
Pacemaker.elf:     file format elf32-littlenios2
Pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000178c4 memsz 0x000178c4 flags r-x
    LOAD off    0x000188e4 vaddr 0x008178e4 paddr 0x008195dc align 2**12
         filesz 0x00001cf8 memsz 0x00001cf8 flags rw-
    LOAD off    0x0001b2d4 vaddr 0x0081b2d4 paddr 0x0081b2d4 align 2**12
         filesz 0x00000000 memsz 0x00000360 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017050  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000650  00817294  00817294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf8  008178e4  008195dc  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000360  0081b2d4  0081b2d4  0001b2d4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081b634  0081b634  0001a5dc  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0001a5dc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001a5dc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011e0  00000000  00000000  0001a600  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e5ca  00000000  00000000  0001b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b718  00000000  00000000  00049daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f25e  00000000  00000000  000554c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b14  00000000  00000000  00064720  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004afc  00000000  00000000  00067234  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000185e9  00000000  00000000  0006bd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0008431c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a10  00000000  00000000  00084380  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00089ccd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00089cd0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00089cd3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00089cd4  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00089cd5  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00089cde  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00089ce7  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00089cf0  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000042  00000000  00000000  00089cfc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  00089d3e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00817294 l    d  .rodata	00000000 .rodata
008178e4 l    d  .rwdata	00000000 .rwdata
0081b2d4 l    d  .bss	00000000 .bss
0081b634 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008074c4 l     F .text	00000008 __fp_unlock
008074d8 l     F .text	0000019c __sinit.part.1
00807674 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008178e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00809280 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081749e l     O .rodata	00000010 zeroes.4404
0080b8ac l     F .text	000000bc __sbprintf
008174ae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfprintf_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080bccc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00818130 l     O .rwdata	00000020 lc_ctype_charset
00818110 l     O .rwdata	00000020 lc_message_charset
00818150 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008174dc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080f6e4 l     F .text	000000fc __sprint_r.part.0
00817610 l     O .rodata	00000010 blanks.4348
00817600 l     O .rodata	00000010 zeroes.4349
00810c70 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00813120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081322c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00813258 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008134c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008135a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00813690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00813864 l     F .text	0000003c alt_get_errno
008138a0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00813ab8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008195c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00813ed8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081400c l     F .text	00000034 alt_dev_reg
00818330 l     O .rwdata	00001060 jtag_uart
00819390 l     O .rwdata	00000120 lcd
008194b0 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00814334 l     F .text	0000020c altera_avalon_jtag_uart_irq
00814540 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008195d4 l     O .rwdata	00000004 colstart
00814b78 l     F .text	000000b8 lcd_write_command
00814c30 l     F .text	000000d8 lcd_write_data
00814d08 l     F .text	000000d0 lcd_clear_screen
00814dd8 l     F .text	000001ec lcd_repaint_screen
00814fc4 l     F .text	000000cc lcd_scroll_up
00815090 l     F .text	000002ac lcd_handle_escape
00815814 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00815a54 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00815d04 l     F .text	0000009c altera_avalon_uart_irq
00815da0 l     F .text	000000e4 altera_avalon_uart_rxirq
00815e84 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00816020 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00816238 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008165c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00816c70 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00817763 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081b378 g     O .bss	00000004 alt_instruction_exception_handler
0080ee58 g     F .text	00000074 _mprec_log10
0081b2dc g     O .bss	00000004 PVARPBufferState
0080ef44 g     F .text	0000008c __any_on
0080dabc g     F .text	00000054 _isatty_r
008174e8 g     O .rodata	00000028 __mprec_tinytens
008137a0 g     F .text	0000007c alt_main
0081b308 g     O .bss	00000004 cAEI
008091ac g     F .text	000000c0 _puts_r
0081b534 g     O .bss	00000100 alt_irq
0080dbec g     F .text	00000060 _lseek_r
008195dc g       *ABS*	00000000 __flash_rwdata_start
0080d554 g     F .text	000000ac __sflags
0081272c g     F .text	00000088 .hidden __eqdf2
00800290 g     F .text	00000040 setup_lcd
0081b634 g       *ABS*	00000000 __alt_heap_start
0081b3a4 g     O .bss	00000018 ticker
00810ff8 g     F .text	0000009c _wcrtomb_r
0080959c g     F .text	0000005c __sseek
00807814 g     F .text	00000010 __sinit
0080b96c g     F .text	00000140 __swbuf_r
0081b2d4 g     O .bss	00000004 lcd
0080db10 g     F .text	0000007c _setlocale_r
0080767c g     F .text	00000068 __sfmoreglue
008007f0 g     F .text	00000068 c_reset
00813840 g     F .text	00000024 __malloc_unlock
0080de78 g     F .text	0000015c memmove
00800358 g     F .text	00000034 close_lcd
008077fc g     F .text	00000018 _cleanup
0080dfd4 g     F .text	000000a8 _Balloc
0080650c g     F .text	000000dc .hidden __gtdf2
00816db0 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00808310 g     F .text	0000005c _fstat_r
00800858 g     F .text	00000340 c_tick
0081b344 g     O .bss	00000004 errno
00809518 g     F .text	00000008 __seofread
0081b368 g     O .bss	00000004 alt_argv
00821574 g       *ABS*	00000000 _gp
00813ea8 g     F .text	00000030 usleep
00805470 g     F .text	00000200 reset
008181b0 g     O .rwdata	00000180 alt_fd_list
00816760 g     F .text	00000090 alt_find_dev
0080dd30 g     F .text	00000148 memcpy
0081b504 g     O .bss	00000018 timer_ap
008074cc g     F .text	0000000c _cleanup_r
00806fd8 g     F .text	000000dc .hidden __floatsidf
00816d34 g     F .text	0000007c alt_io_redirect
008065e8 g     F .text	000000f4 .hidden __ltdf2
00817294 g       *ABS*	00000000 __DTOR_END__
0080926c g     F .text	00000014 puts
00816e64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0081b32c g     O .bss	00000004 VS
00800700 g     F .text	00000084 key_interrupt
0080f594 g     F .text	00000074 __fpclassifyd
0080edb4 g     F .text	000000a4 __ratio
00810c54 g     F .text	0000001c __vfiprintf_internal
00814738 g     F .text	0000021c altera_avalon_jtag_uart_read
00811d88 g     F .text	00000064 .hidden __udivsi3
00813500 g     F .text	000000a4 isatty
00819584 g     O .rwdata	00000004 VRP_Constraint
00817538 g     O .rodata	000000c8 __mprec_tens
0080db8c g     F .text	0000000c __locale_charset
00816dd4 g     F .text	00000090 alt_icache_flush
0081b350 g     O .bss	00000004 __malloc_top_pad
00819578 g     O .rwdata	00000004 implementation
0081b31c g     O .bss	00000004 VRPState
008195a4 g     O .rwdata	00000004 __mb_cur_max
0080dbbc g     F .text	0000000c _localeconv_r
0080e3e0 g     F .text	0000003c __i2b
0080d600 g     F .text	000004bc __sfvwrite_r
00809470 g     F .text	00000054 _sbrk_r
0081b2e0 g     O .bss	00000004 URIBufferState
008002d0 g     F .text	00000088 write_to_lcd
0080efd0 g     F .text	00000060 _read_r
008195bc g     O .rwdata	00000004 alt_max_fd
00807118 g     F .text	000000f0 _fclose_r
00807494 g     F .text	00000030 fflush
0081b34c g     O .bss	00000004 __malloc_max_sbrked_mem
00813344 g     F .text	00000180 alt_irq_register
00805c60 g     F .text	000008ac .hidden __adddf3
0081b300 g     O .bss	00000004 cPVARP
0080eb5c g     F .text	0000010c __b2d
00811758 g     F .text	00000538 .hidden __umoddi3
008136cc g     F .text	000000d4 lseek
00819594 g     O .rwdata	00000004 _global_impure_ptr
0080f030 g     F .text	00000564 _realloc_r
0081b634 g       *ABS*	00000000 __bss_end
00816b80 g     F .text	000000f0 alt_iic_isr_register
00813da0 g     F .text	00000108 alt_tick
008111e0 g     F .text	00000578 .hidden __udivdi3
00810f54 g     F .text	00000024 _fputwc_r
00817510 g     O .rodata	00000028 __mprec_bigtens
0080e1c4 g     F .text	00000104 __s2b
008059f0 g     F .text	00000074 ap_light_timer
00812f4c g     F .text	000000a8 .hidden __floatunsidf
0080e89c g     F .text	00000060 __mcmp
00815c58 g     F .text	000000ac altera_avalon_uart_init
00807834 g     F .text	00000018 __fp_lock_all
00816b34 g     F .text	0000004c alt_ic_irq_enabled
00813d04 g     F .text	0000009c alt_alarm_stop
0081b360 g     O .bss	00000004 alt_irq_active
00807eb0 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00818188 g     O .rwdata	00000028 alt_dev_null
0081b320 g     O .bss	00000004 AEIState
00816578 g     F .text	00000048 alt_dcache_flush_all
0080e2c8 g     F .text	00000068 __hi0bits
00812ecc g     F .text	00000080 .hidden __fixdfsi
008195dc g       *ABS*	00000000 __ram_rwdata_end
008004e4 g     F .text	00000084 start_ticker
008195b4 g     O .rwdata	00000008 alt_dev_list
008079bc g     F .text	00000044 _fputc_r
00813f14 g     F .text	000000f8 write
00805bdc g     F .text	00000050 print_a
00809044 g     F .text	000000a0 _putc_r
008178e4 g       *ABS*	00000000 __ram_rodata_end
00813294 g     F .text	000000b0 fstat
00807998 g     F .text	00000024 fprintf
0081b33d g     O .bss	00000001 VSBuffer
008065e8 g     F .text	000000f4 .hidden __ledf2
0080e614 g     F .text	00000140 __pow5mult
0080f7f8 g     F .text	0000145c ___vfiprintf_internal_r
0081b35c g     O .bss	00000004 __nlocale_changed
00811dec g     F .text	00000058 .hidden __umodsi3
0081b634 g       *ABS*	00000000 end
0081533c g     F .text	000004d8 altera_avalon_lcd_16207_write
008082f4 g     F .text	0000001c fseeko
00819574 g     O .rwdata	00000004 mode
00816274 g     F .text	000001ac altera_avalon_uart_write
0081b30c g     O .bss	00000004 cURI
00807e94 g     F .text	0000001c fseek
00800568 g     F .text	00000034 stop_ticker
00814274 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00817294 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00815acc g     F .text	0000007c alt_avalon_timer_sc_init
00815ba8 g     F .text	00000060 altera_avalon_uart_write_fd
008070b4 g     F .text	00000064 .hidden __clzsi2
00815c08 g     F .text	00000050 altera_avalon_uart_close_fd
0081b2fc g     O .bss	00000004 cAVI
00814954 g     F .text	00000224 altera_avalon_jtag_uart_write
00807824 g     F .text	00000004 __sfp_lock_acquire
0080dc4c g     F .text	000000e4 memchr
00809698 g     F .text	000021f8 ___vfprintf_internal_r
00807b80 g     F .text	00000310 _free_r
0080db98 g     F .text	00000010 __locale_mb_cur_max
0081b314 g     O .bss	00000004 AVIState
008170e0 g     F .text	00000180 __call_exitprocs
0081b324 g     O .bss	00000004 URIState
0081b358 g     O .bss	00000004 __mlocale_changed
0081b304 g     O .bss	00000004 cVRP
0081959c g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081b370 g     O .bss	00000004 _alt_tick_rate
0080e754 g     F .text	00000148 __lshift
0081b374 g     O .bss	00000004 _alt_nticks
00813af4 g     F .text	000000fc read
00814078 g     F .text	00000098 alt_sys_init
00808fe4 g     F .text	00000060 _open_r
00816fc8 g     F .text	00000118 __register_exitproc
0080e41c g     F .text	000001f8 __multiply
008145e0 g     F .text	00000068 altera_avalon_jtag_uart_close
008178e4 g       *ABS*	00000000 __ram_rwdata_start
00817294 g       *ABS*	00000000 __ram_rodata_start
0081b37c g     O .bss	00000028 __malloc_current_mallinfo
0080ec68 g     F .text	0000014c __d2b
00814110 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008168f8 g     F .text	000000a4 alt_get_fd
00816420 g     F .text	00000158 alt_busy_sleep
0080bc78 g     F .text	00000054 _close_r
0080597c g     F .text	00000074 vp_light_timer
0081b2da g     O .bss	00000001 print_values
00816f4c g     F .text	0000007c memcmp
008058ec g     F .text	00000048 vp_light_timer_isr
008141d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081b634 g       *ABS*	00000000 __alt_stack_base
00814220 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080bb24 g     F .text	00000154 __swsetup_r
00805670 g     F .text	0000027c tick
00811e44 g     F .text	000008e8 .hidden __divdf3
008076e4 g     F .text	00000118 __sfp
0080eecc g     F .text	00000078 __copybits
00817d08 g     O .rwdata	00000408 __malloc_av_
00807830 g     F .text	00000004 __sinit_lock_release
008127b4 g     F .text	00000718 .hidden __muldf3
008094c4 g     F .text	00000054 __sread
008167f0 g     F .text	00000108 alt_find_file
008165fc g     F .text	000000a4 alt_dev_llist_insert
0081381c g     F .text	00000024 __malloc_lock
00807970 g     F .text	00000028 _fprintf_r
00813c54 g     F .text	000000b0 sbrk
00819588 g     O .rwdata	00000004 AEI_Constraint
00807438 g     F .text	0000005c _fflush_r
0081b2e4 g     O .bss	00000004 C_VP
00810d2c g     F .text	000000c4 _calloc_r
00807958 g     F .text	00000018 fopen
0081b2d4 g       *ABS*	00000000 __bss_start
00808ebc g     F .text	00000128 memset
0080038c g     F .text	00000158 main
0081b36c g     O .bss	00000004 alt_envp
0081b348 g     O .bss	00000004 __malloc_max_total_mem
0081b2e8 g     O .bss	00000004 C_AP
00814170 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080baac g     F .text	00000018 __swbuf
008006c0 g     F .text	00000040 reset_leds
0081b33c g     O .bss	00000001 ASBuffer
008158c0 g     F .text	00000134 altera_avalon_lcd_16207_init
008095f8 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00807208 g     F .text	00000014 fclose
0080becc g     F .text	00001688 _dtoa_r
008086b0 g     F .text	0000080c _malloc_r
00811154 g     F .text	00000030 __ascii_wctomb
00805b8c g     F .text	00000050 print_v
008195c0 g     O .rwdata	00000004 alt_errno
0081b3bc g     O .bss	00000148 tickData
0081b2ec g     O .bss	00000004 AEIBufferState
0080836c g     F .text	000000c4 _fwalk
008090e4 g     F .text	000000c8 putc
00811c90 g     F .text	00000084 .hidden __divsi3
00805a64 g     F .text	00000060 setup_uart
00807a5c g     F .text	00000124 _malloc_trim_r
00817294 g       *ABS*	00000000 __CTOR_END__
0080f608 g     F .text	000000dc strcmp
00817294 g       *ABS*	00000000 __flash_rodata_start
00817294 g       *ABS*	00000000 __DTOR_LIST__
0081272c g     F .text	00000088 .hidden __nedf2
0081b334 g     O .bss	00000004 vp_timer_started
00814040 g     F .text	00000038 alt_irq_init
00813bf0 g     F .text	00000064 alt_release_fd
00817353 g     O .rodata	00000100 .hidden __clz_tab
0081b354 g     O .bss	00000004 _PathLocale
00816f00 g     F .text	00000014 atexit
0080bac4 g     F .text	00000060 _write_r
0080dbc8 g     F .text	00000018 setlocale
0081b2f0 g     O .bss	00000004 AVIBufferState
0081958c g     O .rwdata	00000004 LRI_Constraint
0081b51c g     O .bss	00000018 timer_vp
00819598 g     O .rwdata	00000004 _impure_ptr
0081b364 g     O .bss	00000004 alt_argc
0080721c g     F .text	0000021c __sflush_r
00816700 g     F .text	00000060 _do_dtors
0080dbb4 g     F .text	00000008 __locale_cjk_lang
00807e90 g     F .text	00000004 _fseek_r
00805ac4 g     F .text	000000c8 check_uart
0080929c g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0081b310 g     O .bss	00000004 cLRI
0080eaf8 g     F .text	00000064 __ulp
0080784c g     F .text	00000018 __fp_unlock_all
008159f4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00807a00 g     F .text	0000005c fputc
008195ac g     O .rwdata	00000008 alt_fs_list
0081b2d8 g     O .bss	00000001 VP
0081b318 g     O .bss	00000004 PVARPState
0081b2f4 g     O .bss	00000004 VRPBufferState
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080dbe0 g     F .text	0000000c localeconv
0081b338 g     O .bss	00000004 ap_timer_started
00805c2c g     F .text	00000034 close_uart
0080059c g     F .text	00000124 timerISR
008169d0 g     F .text	00000050 alt_ic_isr_register
0081b328 g     O .bss	00000004 LRIState
008195dc g       *ABS*	00000000 _edata
00815b48 g     F .text	00000060 altera_avalon_uart_read_fd
0081b634 g       *ABS*	00000000 _end
00810df0 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00814648 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00816aa8 g     F .text	0000008c alt_ic_irq_disable
00809520 g     F .text	0000007c __swrite
008195a0 g     O .rwdata	00000004 __malloc_trim_threshold
0080dba8 g     F .text	0000000c __locale_msgcharset
00816f14 g     F .text	00000038 exit
00808430 g     F .text	000000c4 _fwalk_reent
0080e8fc g     F .text	000001fc __mdiff
0081b330 g     O .bss	00000004 AS
00811d14 g     F .text	00000074 .hidden __modsi3
00800b98 g     F .text	000048d8 logic
008195d8 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0081b340 g     O .bss	00000004 uart
00807828 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00817662 g     O .rodata	00000101 _ctype_
00800784 g     F .text	0000006c setup_keys
00805934 g     F .text	00000048 ap_light_timer_isr
00815fcc g     F .text	00000054 altera_avalon_uart_close
00807864 g     F .text	000000f4 _fopen_r
00817260 g     F .text	00000034 _exit
00812ff4 g     F .text	0000012c alt_alarm_start
008084f4 g     F .text	000001bc __smakebuf_r
0081b2d9 g     O .bss	00000001 AP
00809600 g     F .text	00000098 strlen
00813964 g     F .text	00000154 open
0080650c g     F .text	000000dc .hidden __gedf2
00819580 g     O .rwdata	00000004 PVARP_Constraint
008195a8 g     O .rwdata	00000004 __wctomb
0080f7e0 g     F .text	00000018 __sprint_r
0081699c g     F .text	00000034 alt_icache_flush_all
008195c4 g     O .rwdata	00000004 alt_priority_mask
00816a20 g     F .text	00000088 alt_ic_irq_enable
0080b890 g     F .text	0000001c __vfprintf_internal
0081605c g     F .text	000001dc altera_avalon_uart_read
00811184 g     F .text	0000005c _wctomb_r
008066dc g     F .text	000008fc .hidden __subdf3
0080e330 g     F .text	000000b0 __lo0bits
008195cc g     O .rwdata	00000008 alt_alarm_list
008166a0 g     F .text	00000060 _do_ctors
00811094 g     F .text	000000c0 wcrtomb
0081315c g     F .text	000000d0 close
0081957c g     O .rwdata	00000004 AVI_Constraint
0081360c g     F .text	00000084 alt_load
00819590 g     O .rwdata	00000004 URI_Constraint
0080b968 g     F .text	00000004 vfprintf
00810f78 g     F .text	00000080 fputwc
0081b2f8 g     O .bss	00000004 LRIBufferState
0080782c g     F .text	00000004 __sinit_lock_acquire
0080e0a4 g     F .text	00000120 __multadd
0080e07c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10ad4d04 	addi	r2,r2,-19148
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10ad4d04 	addi	r2,r2,-19148
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a78117 	ldw	r2,-25084(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a78117 	ldw	r2,-25084(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d6855d14 	ori	gp,gp,5492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10acb514 	ori	r2,r2,45780

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18ed8d14 	ori	r3,r3,46644

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	081360c0 	call	81360c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08137a00 	call	8137a0 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <setup_lcd>:
 */
#include "lcd.h"

FILE *lcd;

void setup_lcd(){
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
	lcd = fopen(LCD_NAME, "w");
  8002a0:	01402074 	movhi	r5,129
  8002a4:	295ca504 	addi	r5,r5,29332
  8002a8:	01002074 	movhi	r4,129
  8002ac:	211ca604 	addi	r4,r4,29336
  8002b0:	08079580 	call	807958 <fopen>
  8002b4:	d0a75815 	stw	r2,-25248(gp)
}
  8002b8:	0001883a 	nop
  8002bc:	e037883a 	mov	sp,fp
  8002c0:	dfc00117 	ldw	ra,4(sp)
  8002c4:	df000017 	ldw	fp,0(sp)
  8002c8:	dec00204 	addi	sp,sp,8
  8002cc:	f800283a 	ret

008002d0 <write_to_lcd>:

void write_to_lcd(const char *format, ...){
  8002d0:	defff904 	addi	sp,sp,-28
  8002d4:	dfc00315 	stw	ra,12(sp)
  8002d8:	df000215 	stw	fp,8(sp)
  8002dc:	df000204 	addi	fp,sp,8
  8002e0:	e13fff15 	stw	r4,-4(fp)
  8002e4:	e1400215 	stw	r5,8(fp)
  8002e8:	e1800315 	stw	r6,12(fp)
  8002ec:	e1c00415 	stw	r7,16(fp)
	#define ESC 27
	#define CLEAR_LCD_STRING "[2J"

    // Print the ESC and CLEAR_LCD_STRING
	fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8002f0:	d0a75817 	ldw	r2,-25248(gp)
  8002f4:	01c02074 	movhi	r7,129
  8002f8:	39dca904 	addi	r7,r7,29348
  8002fc:	018006c4 	movi	r6,27
  800300:	01402074 	movhi	r5,129
  800304:	295caa04 	addi	r5,r5,29352
  800308:	1009883a 	mov	r4,r2
  80030c:	08079980 	call	807998 <fprintf>

	// Use variadic arguments to print the formatted string
	va_list args;
	va_start(args, format);
  800310:	e0800204 	addi	r2,fp,8
  800314:	e0bffe15 	stw	r2,-8(fp)
	vfprintf(lcd, format, args);
  800318:	d0a75817 	ldw	r2,-25248(gp)
  80031c:	e0fffe17 	ldw	r3,-8(fp)
  800320:	180d883a 	mov	r6,r3
  800324:	e17fff17 	ldw	r5,-4(fp)
  800328:	1009883a 	mov	r4,r2
  80032c:	080b9680 	call	80b968 <vfprintf>
	va_end(args);

	// Print a newline character
	fprintf(lcd, "\n");
  800330:	d0a75817 	ldw	r2,-25248(gp)
  800334:	100b883a 	mov	r5,r2
  800338:	01000284 	movi	r4,10
  80033c:	0807a000 	call	807a00 <fputc>
}
  800340:	0001883a 	nop
  800344:	e037883a 	mov	sp,fp
  800348:	dfc00117 	ldw	ra,4(sp)
  80034c:	df000017 	ldw	fp,0(sp)
  800350:	dec00504 	addi	sp,sp,20
  800354:	f800283a 	ret

00800358 <close_lcd>:

void close_lcd(){
  800358:	defffe04 	addi	sp,sp,-8
  80035c:	dfc00115 	stw	ra,4(sp)
  800360:	df000015 	stw	fp,0(sp)
  800364:	d839883a 	mov	fp,sp
	fclose(lcd);
  800368:	d0a75817 	ldw	r2,-25248(gp)
  80036c:	1009883a 	mov	r4,r2
  800370:	08072080 	call	807208 <fclose>
}
  800374:	0001883a 	nop
  800378:	e037883a 	mov	sp,fp
  80037c:	dfc00117 	ldw	ra,4(sp)
  800380:	df000017 	ldw	fp,0(sp)
  800384:	dec00204 	addi	sp,sp,8
  800388:	f800283a 	ret

0080038c <main>:
enum MODE mode = UNSET;
enum IMPLEMENTATIONS implementation = PURE_C;


int main()
{
  80038c:	defffe04 	addi	sp,sp,-8
  800390:	dfc00115 	stw	ra,4(sp)
  800394:	df000015 	stw	fp,0(sp)
  800398:	d839883a 	mov	fp,sp
	reset_leds();
  80039c:	08006c00 	call	8006c0 <reset_leds>
	printf("Hello from Nios II!\n");
  8003a0:	01002074 	movhi	r4,129
  8003a4:	211cac04 	addi	r4,r4,29360
  8003a8:	080926c0 	call	80926c <puts>
	// start a non blocking UART with read and write
	setup_keys();
  8003ac:	08007840 	call	800784 <setup_keys>
	setup_lcd();
  8003b0:	08002900 	call	800290 <setup_lcd>

	write_to_lcd("hello \n%s %s", "joshua", "morley");
  8003b4:	01802074 	movhi	r6,129
  8003b8:	319cb104 	addi	r6,r6,29380
  8003bc:	01402074 	movhi	r5,129
  8003c0:	295cb304 	addi	r5,r5,29388
  8003c4:	01002074 	movhi	r4,129
  8003c8:	211cb504 	addi	r4,r4,29396
  8003cc:	08002d00 	call	8002d0 <write_to_lcd>


	while(1) {
		if (UART_MODE) {
  8003d0:	00804074 	movhi	r2,257
  8003d4:	10842404 	addi	r2,r2,4240
  8003d8:	10800037 	ldwio	r2,0(r2)
  8003dc:	1080004c 	andi	r2,r2,1
  8003e0:	10001726 	beq	r2,zero,800440 <main+0xb4>
			if (mode != UART){
  8003e4:	d0a00017 	ldw	r2,-32768(gp)
  8003e8:	10001326 	beq	r2,zero,800438 <main+0xac>
				stop_ticker();
  8003ec:	08005680 	call	800568 <stop_ticker>
				close_uart();
  8003f0:	0805c2c0 	call	805c2c <close_uart>
				// disable interrupts for all buttons
				IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x0);
  8003f4:	0007883a 	mov	r3,zero
  8003f8:	00804074 	movhi	r2,257
  8003fc:	10842a04 	addi	r2,r2,4264
  800400:	10c00035 	stwio	r3,0(r2)

				write_to_lcd("PaceMaker\n%s mode", "UART");
  800404:	01402074 	movhi	r5,129
  800408:	295cb904 	addi	r5,r5,29412
  80040c:	01002074 	movhi	r4,129
  800410:	211cbb04 	addi	r4,r4,29420
  800414:	08002d00 	call	8002d0 <write_to_lcd>
				printf("UART Enabled\n");
  800418:	01002074 	movhi	r4,129
  80041c:	211cc004 	addi	r4,r4,29440
  800420:	080926c0 	call	80926c <puts>

				mode = UART;
  800424:	d0200015 	stw	zero,-32768(gp)


				usleep(50); // To remove bouncing
  800428:	01000c84 	movi	r4,50
  80042c:	0813ea80 	call	813ea8 <usleep>
				setup_uart();
  800430:	0805a640 	call	805a64 <setup_uart>
				start_ticker();
  800434:	08004e40 	call	8004e4 <start_ticker>
			}
			check_uart();
  800438:	0805ac40 	call	805ac4 <check_uart>
  80043c:	00001a06 	br	8004a8 <main+0x11c>
		} else {
			if (mode != BUTTON){
  800440:	d0a00017 	ldw	r2,-32768(gp)
  800444:	10800060 	cmpeqi	r2,r2,1
  800448:	1000171e 	bne	r2,zero,8004a8 <main+0x11c>
				close_uart();
  80044c:	0805c2c0 	call	805c2c <close_uart>
				stop_ticker();
  800450:	08005680 	call	800568 <stop_ticker>
				// clears the edge capture register
				IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  800454:	0007883a 	mov	r3,zero
  800458:	00804074 	movhi	r2,257
  80045c:	10842b04 	addi	r2,r2,4268
  800460:	10c00035 	stwio	r3,0(r2)
				// enable interrupts for all buttons
				IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  800464:	00c001c4 	movi	r3,7
  800468:	00804074 	movhi	r2,257
  80046c:	10842a04 	addi	r2,r2,4264
  800470:	10c00035 	stwio	r3,0(r2)

				printf("UART Disabled\n");
  800474:	01002074 	movhi	r4,129
  800478:	211cc404 	addi	r4,r4,29456
  80047c:	080926c0 	call	80926c <puts>
				write_to_lcd("PaceMaker\n%s mode", "BUTTON");
  800480:	01402074 	movhi	r5,129
  800484:	295cc804 	addi	r5,r5,29472
  800488:	01002074 	movhi	r4,129
  80048c:	211cbb04 	addi	r4,r4,29420
  800490:	08002d00 	call	8002d0 <write_to_lcd>

				mode = BUTTON;
  800494:	00800044 	movi	r2,1
  800498:	d0a00015 	stw	r2,-32768(gp)

				usleep(50); // To remove bouncing
  80049c:	01000c84 	movi	r4,50
  8004a0:	0813ea80 	call	813ea8 <usleep>
				start_ticker();
  8004a4:	08004e40 	call	8004e4 <start_ticker>
			}
		}

		if (AP) {
  8004a8:	d0a75943 	ldbu	r2,-25243(gp)
  8004ac:	10803fcc 	andi	r2,r2,255
  8004b0:	10000226 	beq	r2,zero,8004bc <main+0x130>
			//print_uart("A\n");
			print_a();
  8004b4:	0805bdc0 	call	805bdc <print_a>
			AP = false;
  8004b8:	d0275945 	stb	zero,-25243(gp)
		}


		if (VP) {
  8004bc:	d0a75903 	ldbu	r2,-25244(gp)
  8004c0:	10803fcc 	andi	r2,r2,255
  8004c4:	10000226 	beq	r2,zero,8004d0 <main+0x144>
			print_v();
  8004c8:	0805b8c0 	call	805b8c <print_v>
			VP = false;
  8004cc:	d0275905 	stb	zero,-25244(gp)
		}


		if (print_values) {
  8004d0:	d0a75983 	ldbu	r2,-25242(gp)
  8004d4:	10803fcc 	andi	r2,r2,255
  8004d8:	103fbd26 	beq	r2,zero,8003d0 <__alt_mem_onchip_mem+0xff7f83d0>
			//printf("AVI %d: %d, PVARP %d: %d, VRP %d: %d, AEI %d: %d, URI%d: %d, LRI%d: %d\n",AVIState, cAVI,PVARPState, cPVARP, VRPState, cVRP, AEIState, cAEI,URIState, cURI,LRIState, cLRI);
			print_values = false;
  8004dc:	d0275985 	stb	zero,-25242(gp)
		}
	}
  8004e0:	003fbb06 	br	8003d0 <__alt_mem_onchip_mem+0xff7f83d0>

008004e4 <start_ticker>:
	close_uart();
	close_lcd();
	return 0;
}

void start_ticker(){
  8004e4:	defffb04 	addi	sp,sp,-20
  8004e8:	dfc00415 	stw	ra,16(sp)
  8004ec:	df000315 	stw	fp,12(sp)
  8004f0:	df000304 	addi	fp,sp,12
	reset(&tickData);
  8004f4:	010020b4 	movhi	r4,130
  8004f8:	212cef04 	addi	r4,r4,-19524
  8004fc:	08054700 	call	805470 <reset>
	tick(&tickData); // init tick
  800500:	010020b4 	movhi	r4,130
  800504:	212cef04 	addi	r4,r4,-19524
  800508:	08056700 	call	805670 <tick>
	c_reset();
  80050c:	08007f00 	call	8007f0 <c_reset>

	// Timer Init
	uint64_t systemTime = 0;
  800510:	e03ffe15 	stw	zero,-8(fp)
  800514:	e03fff15 	stw	zero,-4(fp)
	void* timerContext = (void*) &systemTime;
  800518:	e0bffe04 	addi	r2,fp,-8
  80051c:	e0bffd15 	stw	r2,-12(fp)
	alt_alarm_start(&ticker, 1, timerISR, timerContext);
  800520:	e1fffd17 	ldw	r7,-12(fp)
  800524:	01802034 	movhi	r6,128
  800528:	31816704 	addi	r6,r6,1436
  80052c:	01400044 	movi	r5,1
  800530:	010020b4 	movhi	r4,130
  800534:	212ce904 	addi	r4,r4,-19548
  800538:	0812ff40 	call	812ff4 <alt_alarm_start>
	tickData.deltaT = 1;
  80053c:	008020b4 	movhi	r2,130
  800540:	10acef04 	addi	r2,r2,-19524
  800544:	10001315 	stw	zero,76(r2)
  800548:	00cffc34 	movhi	r3,16368
  80054c:	10c01415 	stw	r3,80(r2)

}
  800550:	0001883a 	nop
  800554:	e037883a 	mov	sp,fp
  800558:	dfc00117 	ldw	ra,4(sp)
  80055c:	df000017 	ldw	fp,0(sp)
  800560:	dec00204 	addi	sp,sp,8
  800564:	f800283a 	ret

00800568 <stop_ticker>:

void stop_ticker(){
  800568:	defffe04 	addi	sp,sp,-8
  80056c:	dfc00115 	stw	ra,4(sp)
  800570:	df000015 	stw	fp,0(sp)
  800574:	d839883a 	mov	fp,sp
	alt_alarm_stop(&ticker);
  800578:	010020b4 	movhi	r4,130
  80057c:	212ce904 	addi	r4,r4,-19548
  800580:	0813d040 	call	813d04 <alt_alarm_stop>
}
  800584:	0001883a 	nop
  800588:	e037883a 	mov	sp,fp
  80058c:	dfc00117 	ldw	ra,4(sp)
  800590:	df000017 	ldw	fp,0(sp)
  800594:	dec00204 	addi	sp,sp,8
  800598:	f800283a 	ret

0080059c <timerISR>:


alt_u32 timerISR(void* context){
  80059c:	defffd04 	addi	sp,sp,-12
  8005a0:	dfc00215 	stw	ra,8(sp)
  8005a4:	df000115 	stw	fp,4(sp)
  8005a8:	df000104 	addi	fp,sp,4
  8005ac:	e13fff15 	stw	r4,-4(fp)

	switch (implementation){
  8005b0:	d0a00117 	ldw	r2,-32764(gp)
  8005b4:	10000326 	beq	r2,zero,8005c4 <timerISR+0x28>
  8005b8:	10800060 	cmpeqi	r2,r2,1
  8005bc:	1000231e 	bne	r2,zero,80064c <timerISR+0xb0>
  8005c0:	00003706 	br	8006a0 <timerISR+0x104>
	case SCCHARTS:
		tickData.VS = VSBuffer;
  8005c4:	d0a77243 	ldbu	r2,-25143(gp)
  8005c8:	1007883a 	mov	r3,r2
  8005cc:	008020b4 	movhi	r2,130
  8005d0:	10acef04 	addi	r2,r2,-19524
  8005d4:	10c00045 	stb	r3,1(r2)
		tickData.AS = ASBuffer;
  8005d8:	d0a77203 	ldbu	r2,-25144(gp)
  8005dc:	1007883a 	mov	r3,r2
  8005e0:	008020b4 	movhi	r2,130
  8005e4:	10acef04 	addi	r2,r2,-19524
  8005e8:	10c00005 	stb	r3,0(r2)



		tick(&tickData);
  8005ec:	010020b4 	movhi	r4,130
  8005f0:	212cef04 	addi	r4,r4,-19524
  8005f4:	08056700 	call	805670 <tick>


		if (tickData.AP){
  8005f8:	008020b4 	movhi	r2,130
  8005fc:	10acef04 	addi	r2,r2,-19524
  800600:	10801703 	ldbu	r2,92(r2)
  800604:	10803fcc 	andi	r2,r2,255
  800608:	1080201c 	xori	r2,r2,128
  80060c:	10bfe004 	addi	r2,r2,-128
  800610:	10000326 	beq	r2,zero,800620 <timerISR+0x84>
			ap_light_timer();
  800614:	08059f00 	call	8059f0 <ap_light_timer>
			AP = true;
  800618:	00800044 	movi	r2,1
  80061c:	d0a75945 	stb	r2,-25243(gp)
		}

		if (tickData.VP){
  800620:	008020b4 	movhi	r2,130
  800624:	10acef04 	addi	r2,r2,-19524
  800628:	10801743 	ldbu	r2,93(r2)
  80062c:	10803fcc 	andi	r2,r2,255
  800630:	1080201c 	xori	r2,r2,128
  800634:	10bfe004 	addi	r2,r2,-128
  800638:	10001826 	beq	r2,zero,80069c <timerISR+0x100>
			vp_light_timer();
  80063c:	080597c0 	call	80597c <vp_light_timer>
			VP = true;
  800640:	00800044 	movi	r2,1
  800644:	d0a75905 	stb	r2,-25244(gp)
		}
		break;
  800648:	00001406 	br	80069c <timerISR+0x100>
	case PURE_C:
		c_tick();
  80064c:	08008580 	call	800858 <c_tick>

		if (C_AP){
  800650:	d0a75d17 	ldw	r2,-25228(gp)
  800654:	10000626 	beq	r2,zero,800670 <timerISR+0xd4>
			ap_light_timer();
  800658:	08059f00 	call	8059f0 <ap_light_timer>
			AP = true;
  80065c:	00800044 	movi	r2,1
  800660:	d0a75945 	stb	r2,-25243(gp)
			C_AP += 1;
  800664:	d0a75d17 	ldw	r2,-25228(gp)
  800668:	10800044 	addi	r2,r2,1
  80066c:	d0a75d15 	stw	r2,-25228(gp)
		}

		if (C_VP){
  800670:	d0a75c17 	ldw	r2,-25232(gp)
  800674:	10000626 	beq	r2,zero,800690 <timerISR+0xf4>
			vp_light_timer();
  800678:	080597c0 	call	80597c <vp_light_timer>
			VP = true;
  80067c:	00800044 	movi	r2,1
  800680:	d0a75905 	stb	r2,-25244(gp)
			C_VP += 1;
  800684:	d0a75c17 	ldw	r2,-25232(gp)
  800688:	10800044 	addi	r2,r2,1
  80068c:	d0a75c15 	stw	r2,-25232(gp)

		}

		print_values = true;
  800690:	00800044 	movi	r2,1
  800694:	d0a75985 	stb	r2,-25242(gp)

		break;
  800698:	00000106 	br	8006a0 <timerISR+0x104>

		if (tickData.VP){
			vp_light_timer();
			VP = true;
		}
		break;
  80069c:	0001883a 	nop

		break;
	}


	VSBuffer = 0;
  8006a0:	d0277245 	stb	zero,-25143(gp)
	ASBuffer = 0;
  8006a4:	d0277205 	stb	zero,-25144(gp)


	return 1; // next tick is a fter 1ms
  8006a8:	00800044 	movi	r2,1
}
  8006ac:	e037883a 	mov	sp,fp
  8006b0:	dfc00117 	ldw	ra,4(sp)
  8006b4:	df000017 	ldw	fp,0(sp)
  8006b8:	dec00204 	addi	sp,sp,8
  8006bc:	f800283a 	ret

008006c0 <reset_leds>:

void reset_leds(){
  8006c0:	deffff04 	addi	sp,sp,-4
  8006c4:	df000015 	stw	fp,0(sp)
  8006c8:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x0);
  8006cc:	0007883a 	mov	r3,zero
  8006d0:	00804074 	movhi	r2,257
  8006d4:	10842004 	addi	r2,r2,4224
  8006d8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0);
  8006dc:	0007883a 	mov	r3,zero
  8006e0:	00804074 	movhi	r2,257
  8006e4:	10841c04 	addi	r2,r2,4208
  8006e8:	10c00035 	stwio	r3,0(r2)
}
  8006ec:	0001883a 	nop
  8006f0:	e037883a 	mov	sp,fp
  8006f4:	df000017 	ldw	fp,0(sp)
  8006f8:	dec00104 	addi	sp,sp,4
  8006fc:	f800283a 	ret

00800700 <key_interrupt>:


void key_interrupt(void* context, alt_u32 id) {
  800700:	defffc04 	addi	sp,sp,-16
  800704:	df000315 	stw	fp,12(sp)
  800708:	df000304 	addi	fp,sp,12
  80070c:	e13ffe15 	stw	r4,-8(fp)
  800710:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // need to cast the context first before using it
  800714:	e0bffe17 	ldw	r2,-8(fp)
  800718:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  80071c:	00804074 	movhi	r2,257
  800720:	10842b04 	addi	r2,r2,4268
  800724:	10c00037 	ldwio	r3,0(r2)
  800728:	e0bffd17 	ldw	r2,-12(fp)
  80072c:	10c00015 	stw	r3,0(r2)
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  800730:	0007883a 	mov	r3,zero
  800734:	00804074 	movhi	r2,257
  800738:	10842b04 	addi	r2,r2,4268
  80073c:	10c00035 	stwio	r3,0(r2)
	if (*temp == 1){
  800740:	e0bffd17 	ldw	r2,-12(fp)
  800744:	10800017 	ldw	r2,0(r2)
  800748:	10800058 	cmpnei	r2,r2,1
  80074c:	1000021e 	bne	r2,zero,800758 <key_interrupt+0x58>
		VSBuffer = 1;
  800750:	00800044 	movi	r2,1
  800754:	d0a77245 	stb	r2,-25143(gp)
	}
	if (*temp == 2){
  800758:	e0bffd17 	ldw	r2,-12(fp)
  80075c:	10800017 	ldw	r2,0(r2)
  800760:	10800098 	cmpnei	r2,r2,2
  800764:	1000021e 	bne	r2,zero,800770 <key_interrupt+0x70>
		ASBuffer = 1;
  800768:	00800044 	movi	r2,1
  80076c:	d0a77205 	stb	r2,-25144(gp)
	}
}
  800770:	0001883a 	nop
  800774:	e037883a 	mov	sp,fp
  800778:	df000017 	ldw	fp,0(sp)
  80077c:	dec00104 	addi	sp,sp,4
  800780:	f800283a 	ret

00800784 <setup_keys>:

void setup_keys(){
  800784:	defffc04 	addi	sp,sp,-16
  800788:	dfc00315 	stw	ra,12(sp)
  80078c:	df000215 	stw	fp,8(sp)
  800790:	df000204 	addi	fp,sp,8
	int keyValue = 1;
  800794:	00800044 	movi	r2,1
  800798:	e0bfff15 	stw	r2,-4(fp)
	void* contextKeyInterrupt =(void*) &keyValue; // cast before passing to ISR
  80079c:	e0bfff04 	addi	r2,fp,-4
  8007a0:	e0bffe15 	stw	r2,-8(fp)


	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8007a4:	0007883a 	mov	r3,zero
  8007a8:	00804074 	movhi	r2,257
  8007ac:	10842b04 	addi	r2,r2,4268
  8007b0:	10c00035 	stwio	r3,0(r2)

	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  8007b4:	00c001c4 	movi	r3,7
  8007b8:	00804074 	movhi	r2,257
  8007bc:	10842a04 	addi	r2,r2,4264
  8007c0:	10c00035 	stwio	r3,0(r2)

	// register the ISR
	alt_irq_register(KEYS_IRQ, contextKeyInterrupt, key_interrupt);
  8007c4:	01802034 	movhi	r6,128
  8007c8:	3181c004 	addi	r6,r6,1792
  8007cc:	e17ffe17 	ldw	r5,-8(fp)
  8007d0:	01000104 	movi	r4,4
  8007d4:	08133440 	call	813344 <alt_irq_register>
}
  8007d8:	0001883a 	nop
  8007dc:	e037883a 	mov	sp,fp
  8007e0:	dfc00117 	ldw	ra,4(sp)
  8007e4:	df000017 	ldw	fp,0(sp)
  8007e8:	dec00204 	addi	sp,sp,8
  8007ec:	f800283a 	ret

008007f0 <c_reset>:
enum AEIStates   AEIState = wAEI;
enum URIStates   URIState = wURI;
enum LRIStates   LRIState = wLRI;

// Reset program function
void c_reset() {
  8007f0:	deffff04 	addi	sp,sp,-4
  8007f4:	df000015 	stw	fp,0(sp)
  8007f8:	d839883a 	mov	fp,sp
	// initialize waiting states
	AVIState = wAVI;
  8007fc:	d0276815 	stw	zero,-25184(gp)
	PVARPState = wPVARP;
  800800:	d0276915 	stw	zero,-25180(gp)
	VRPState = wVRP;
  800804:	d0276a15 	stw	zero,-25176(gp)
	AEIState = wAEI;
  800808:	d0276b15 	stw	zero,-25172(gp)
	URIState = wURI;
  80080c:	d0276c15 	stw	zero,-25168(gp)
	LRIState = wLRI;
  800810:	d0276d15 	stw	zero,-25164(gp)

	AVIBufferState = wAVI;
  800814:	d0275f15 	stw	zero,-25220(gp)
	PVARPBufferState = wPVARP;
  800818:	d0275a15 	stw	zero,-25240(gp)
	VRPBufferState = wVRP;
  80081c:	d0276015 	stw	zero,-25216(gp)
	AEIBufferState = wAEI;
  800820:	d0275e15 	stw	zero,-25224(gp)
	URIBufferState = wURI;
  800824:	d0275b15 	stw	zero,-25236(gp)
	LRIBufferState = wLRI;
  800828:	d0276115 	stw	zero,-25212(gp)

	// initialize counters
	cAVI = 0;
  80082c:	d0276215 	stw	zero,-25208(gp)
	cPVARP = 0;
  800830:	d0276315 	stw	zero,-25204(gp)
	cVRP = 0;
  800834:	d0276415 	stw	zero,-25200(gp)
	cAEI = 0;
  800838:	d0276515 	stw	zero,-25196(gp)
	cURI = 0;
  80083c:	d0276615 	stw	zero,-25192(gp)
	cLRI = 0;
  800840:	d0276715 	stw	zero,-25188(gp)
}
  800844:	0001883a 	nop
  800848:	e037883a 	mov	sp,fp
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00104 	addi	sp,sp,4
  800854:	f800283a 	ret

00800858 <c_tick>:

void c_tick() {
  800858:	deffff04 	addi	sp,sp,-4
  80085c:	df000015 	stw	fp,0(sp)
  800860:	d839883a 	mov	fp,sp

	AS = ASBuffer;
  800864:	d0a77203 	ldbu	r2,-25144(gp)
  800868:	10803fcc 	andi	r2,r2,255
  80086c:	d0a76f15 	stw	r2,-25156(gp)
	VS = VSBuffer;
  800870:	d0a77243 	ldbu	r2,-25143(gp)
  800874:	10803fcc 	andi	r2,r2,255
  800878:	d0a76e15 	stw	r2,-25160(gp)

	//print_v();

    // -------------- AVIState ---------------
    switch (AVIState) {
  80087c:	d0a76817 	ldw	r2,-25184(gp)
  800880:	10000326 	beq	r2,zero,800890 <c_tick+0x38>
  800884:	10800060 	cmpeqi	r2,r2,1
  800888:	10000c1e 	bne	r2,zero,8008bc <c_tick+0x64>
  80088c:	00001c06 	br	800900 <c_tick+0xa8>
    case wAVI:
        if ((AS || C_AP) && PVARPState != dPVARP) {
  800890:	d0a76f17 	ldw	r2,-25156(gp)
  800894:	1000021e 	bne	r2,zero,8008a0 <c_tick+0x48>
  800898:	d0a75d17 	ldw	r2,-25228(gp)
  80089c:	10001726 	beq	r2,zero,8008fc <c_tick+0xa4>
  8008a0:	d0a76917 	ldw	r2,-25180(gp)
  8008a4:	10800060 	cmpeqi	r2,r2,1
  8008a8:	1000141e 	bne	r2,zero,8008fc <c_tick+0xa4>
            AVIBufferState = dAVI;
  8008ac:	00800044 	movi	r2,1
  8008b0:	d0a75f15 	stw	r2,-25220(gp)
            cAVI = 0;
  8008b4:	d0276215 	stw	zero,-25208(gp)
        }
        break;
  8008b8:	00001006 	br	8008fc <c_tick+0xa4>
    case dAVI:
        if (cAVI >= AVI_Constraint && URIState != dURI) {
  8008bc:	d0e76217 	ldw	r3,-25208(gp)
  8008c0:	d0a00217 	ldw	r2,-32760(gp)
  8008c4:	18800616 	blt	r3,r2,8008e0 <c_tick+0x88>
  8008c8:	d0a76c17 	ldw	r2,-25168(gp)
  8008cc:	10800060 	cmpeqi	r2,r2,1
  8008d0:	1000031e 	bne	r2,zero,8008e0 <c_tick+0x88>
            C_VP = 1;
  8008d4:	00800044 	movi	r2,1
  8008d8:	d0a75c15 	stw	r2,-25232(gp)
            AVIBufferState = wAVI;
  8008dc:	d0275f15 	stw	zero,-25220(gp)
        }
        if (VS){
  8008e0:	d0a76e17 	ldw	r2,-25160(gp)
  8008e4:	10000126 	beq	r2,zero,8008ec <c_tick+0x94>
        	AVIBufferState = wAVI;
  8008e8:	d0275f15 	stw	zero,-25220(gp)
        }
        cAVI += 1;
  8008ec:	d0a76217 	ldw	r2,-25208(gp)
  8008f0:	10800044 	addi	r2,r2,1
  8008f4:	d0a76215 	stw	r2,-25208(gp)
        break;
  8008f8:	00000106 	br	800900 <c_tick+0xa8>
    case wAVI:
        if ((AS || C_AP) && PVARPState != dPVARP) {
            AVIBufferState = dAVI;
            cAVI = 0;
        }
        break;
  8008fc:	0001883a 	nop
        break;
    }
    // ------------- End AVIState -------------

    // -------------- PVARPState ---------------
    switch (PVARPState) {
  800900:	d0a76917 	ldw	r2,-25180(gp)
  800904:	10000326 	beq	r2,zero,800914 <c_tick+0xbc>
  800908:	10800060 	cmpeqi	r2,r2,1
  80090c:	1000091e 	bne	r2,zero,800934 <c_tick+0xdc>
  800910:	00001106 	br	800958 <c_tick+0x100>
    case wPVARP:
        if (VS || C_VP) {
  800914:	d0a76e17 	ldw	r2,-25160(gp)
  800918:	1000021e 	bne	r2,zero,800924 <c_tick+0xcc>
  80091c:	d0a75c17 	ldw	r2,-25232(gp)
  800920:	10000c26 	beq	r2,zero,800954 <c_tick+0xfc>
            PVARPBufferState = dPVARP;
  800924:	00800044 	movi	r2,1
  800928:	d0a75a15 	stw	r2,-25240(gp)
            cPVARP = 0;
  80092c:	d0276315 	stw	zero,-25204(gp)
        }
        break;
  800930:	00000806 	br	800954 <c_tick+0xfc>
    case dPVARP:
        if (cPVARP >= PVARP_Constraint) {
  800934:	d0e76317 	ldw	r3,-25204(gp)
  800938:	d0a00317 	ldw	r2,-32756(gp)
  80093c:	18800116 	blt	r3,r2,800944 <c_tick+0xec>
            PVARPBufferState = wPVARP;
  800940:	d0275a15 	stw	zero,-25240(gp)
        }
        cPVARP += 1;
  800944:	d0a76317 	ldw	r2,-25204(gp)
  800948:	10800044 	addi	r2,r2,1
  80094c:	d0a76315 	stw	r2,-25204(gp)
        break;
  800950:	00000106 	br	800958 <c_tick+0x100>
    case wPVARP:
        if (VS || C_VP) {
            PVARPBufferState = dPVARP;
            cPVARP = 0;
        }
        break;
  800954:	0001883a 	nop
    }
    // ------------- End PVARPState -------------


    // -------------- VRPState ---------------
    switch (VRPState) {
  800958:	d0a76a17 	ldw	r2,-25176(gp)
  80095c:	10000326 	beq	r2,zero,80096c <c_tick+0x114>
  800960:	10800060 	cmpeqi	r2,r2,1
  800964:	1000091e 	bne	r2,zero,80098c <c_tick+0x134>
  800968:	00001106 	br	8009b0 <c_tick+0x158>
    case wVRP:
        if (VS || C_VP) {
  80096c:	d0a76e17 	ldw	r2,-25160(gp)
  800970:	1000021e 	bne	r2,zero,80097c <c_tick+0x124>
  800974:	d0a75c17 	ldw	r2,-25232(gp)
  800978:	10000c26 	beq	r2,zero,8009ac <c_tick+0x154>
            VRPBufferState = dVRP;
  80097c:	00800044 	movi	r2,1
  800980:	d0a76015 	stw	r2,-25216(gp)
            cVRP = 0;
  800984:	d0276415 	stw	zero,-25200(gp)
        }
        break;
  800988:	00000806 	br	8009ac <c_tick+0x154>
    case dVRP:
        if (cVRP >= VRP_Constraint) {
  80098c:	d0e76417 	ldw	r3,-25200(gp)
  800990:	d0a00417 	ldw	r2,-32752(gp)
  800994:	18800116 	blt	r3,r2,80099c <c_tick+0x144>
            VRPBufferState = wVRP;
  800998:	d0276015 	stw	zero,-25216(gp)
        }
        cVRP += 1;
  80099c:	d0a76417 	ldw	r2,-25200(gp)
  8009a0:	10800044 	addi	r2,r2,1
  8009a4:	d0a76415 	stw	r2,-25200(gp)
        break;
  8009a8:	00000106 	br	8009b0 <c_tick+0x158>
    case wVRP:
        if (VS || C_VP) {
            VRPBufferState = dVRP;
            cVRP = 0;
        }
        break;
  8009ac:	0001883a 	nop
    }
    // ------------- End VRPState -------------


    // -------------- AEIState ---------------
    switch (AEIState) {
  8009b0:	d0a76b17 	ldw	r2,-25172(gp)
  8009b4:	10000326 	beq	r2,zero,8009c4 <c_tick+0x16c>
  8009b8:	10800060 	cmpeqi	r2,r2,1
  8009bc:	10000c1e 	bne	r2,zero,8009f0 <c_tick+0x198>
  8009c0:	00001c06 	br	800a34 <c_tick+0x1dc>
    case wAEI:
        if ((VS || C_VP) && VRPState != dVRP) {
  8009c4:	d0a76e17 	ldw	r2,-25160(gp)
  8009c8:	1000021e 	bne	r2,zero,8009d4 <c_tick+0x17c>
  8009cc:	d0a75c17 	ldw	r2,-25232(gp)
  8009d0:	10001726 	beq	r2,zero,800a30 <c_tick+0x1d8>
  8009d4:	d0a76a17 	ldw	r2,-25176(gp)
  8009d8:	10800060 	cmpeqi	r2,r2,1
  8009dc:	1000141e 	bne	r2,zero,800a30 <c_tick+0x1d8>
            AEIBufferState = dAEI;
  8009e0:	00800044 	movi	r2,1
  8009e4:	d0a75e15 	stw	r2,-25224(gp)
            cAEI = 0;
  8009e8:	d0276515 	stw	zero,-25196(gp)
        }
        break;
  8009ec:	00001006 	br	800a30 <c_tick+0x1d8>
    case dAEI:
        if (cAEI >= AEI_Constraint) {
  8009f0:	d0e76517 	ldw	r3,-25196(gp)
  8009f4:	d0a00517 	ldw	r2,-32748(gp)
  8009f8:	18800316 	blt	r3,r2,800a08 <c_tick+0x1b0>
            C_AP = 1;
  8009fc:	00800044 	movi	r2,1
  800a00:	d0a75d15 	stw	r2,-25228(gp)
            AEIBufferState = wAEI;
  800a04:	d0275e15 	stw	zero,-25224(gp)
        }
        if (AS && PVARPState != dPVARP){
  800a08:	d0a76f17 	ldw	r2,-25156(gp)
  800a0c:	10000426 	beq	r2,zero,800a20 <c_tick+0x1c8>
  800a10:	d0a76917 	ldw	r2,-25180(gp)
  800a14:	10800060 	cmpeqi	r2,r2,1
  800a18:	1000011e 	bne	r2,zero,800a20 <c_tick+0x1c8>
			AEIBufferState = wAEI;
  800a1c:	d0275e15 	stw	zero,-25224(gp)
        }
        cAEI += 1;
  800a20:	d0a76517 	ldw	r2,-25196(gp)
  800a24:	10800044 	addi	r2,r2,1
  800a28:	d0a76515 	stw	r2,-25196(gp)
        break;
  800a2c:	00000106 	br	800a34 <c_tick+0x1dc>
    case wAEI:
        if ((VS || C_VP) && VRPState != dVRP) {
            AEIBufferState = dAEI;
            cAEI = 0;
        }
        break;
  800a30:	0001883a 	nop
    }
    // ------------- End AEIState -------------


    // -------------- LRIState ---------------
    switch (LRIState) {
  800a34:	d0a76d17 	ldw	r2,-25164(gp)
  800a38:	10000326 	beq	r2,zero,800a48 <c_tick+0x1f0>
  800a3c:	10800060 	cmpeqi	r2,r2,1
  800a40:	10000c1e 	bne	r2,zero,800a74 <c_tick+0x21c>
  800a44:	00002206 	br	800ad0 <c_tick+0x278>
    case wLRI:
        if ((VS || C_VP) && VRPState != dVRP) {
  800a48:	d0a76e17 	ldw	r2,-25160(gp)
  800a4c:	1000021e 	bne	r2,zero,800a58 <c_tick+0x200>
  800a50:	d0a75c17 	ldw	r2,-25232(gp)
  800a54:	10001d26 	beq	r2,zero,800acc <c_tick+0x274>
  800a58:	d0a76a17 	ldw	r2,-25176(gp)
  800a5c:	10800060 	cmpeqi	r2,r2,1
  800a60:	10001a1e 	bne	r2,zero,800acc <c_tick+0x274>
            LRIBufferState = dLRI;
  800a64:	00800044 	movi	r2,1
  800a68:	d0a76115 	stw	r2,-25212(gp)
            cLRI = 0;
  800a6c:	d0276715 	stw	zero,-25188(gp)
        }
        break;
  800a70:	00001606 	br	800acc <c_tick+0x274>
    case dLRI:
        if (cLRI >= LRI_Constraint) {
  800a74:	d0e76717 	ldw	r3,-25188(gp)
  800a78:	d0a00617 	ldw	r2,-32744(gp)
  800a7c:	18800516 	blt	r3,r2,800a94 <c_tick+0x23c>
            C_VP = 1;
  800a80:	00800044 	movi	r2,1
  800a84:	d0a75c15 	stw	r2,-25232(gp)
            LRIBufferState = dLRI;
  800a88:	00800044 	movi	r2,1
  800a8c:	d0a76115 	stw	r2,-25212(gp)
            cLRI = 0;
  800a90:	d0276715 	stw	zero,-25188(gp)
        }
        if ((VS || C_VP) && VRPState != dVRP){
  800a94:	d0a76e17 	ldw	r2,-25160(gp)
  800a98:	1000021e 	bne	r2,zero,800aa4 <c_tick+0x24c>
  800a9c:	d0a75c17 	ldw	r2,-25232(gp)
  800aa0:	10000626 	beq	r2,zero,800abc <c_tick+0x264>
  800aa4:	d0a76a17 	ldw	r2,-25176(gp)
  800aa8:	10800060 	cmpeqi	r2,r2,1
  800aac:	1000031e 	bne	r2,zero,800abc <c_tick+0x264>
        	LRIBufferState = dLRI;
  800ab0:	00800044 	movi	r2,1
  800ab4:	d0a76115 	stw	r2,-25212(gp)
        	cLRI = 0;
  800ab8:	d0276715 	stw	zero,-25188(gp)
        }
        cLRI += 1;
  800abc:	d0a76717 	ldw	r2,-25188(gp)
  800ac0:	10800044 	addi	r2,r2,1
  800ac4:	d0a76715 	stw	r2,-25188(gp)
        break;
  800ac8:	00000106 	br	800ad0 <c_tick+0x278>
    case wLRI:
        if ((VS || C_VP) && VRPState != dVRP) {
            LRIBufferState = dLRI;
            cLRI = 0;
        }
        break;
  800acc:	0001883a 	nop
    }
    // ------------- End LRIState -------------


    // -------------- URIState ---------------
    switch (URIState) {
  800ad0:	d0a76c17 	ldw	r2,-25168(gp)
  800ad4:	10000326 	beq	r2,zero,800ae4 <c_tick+0x28c>
  800ad8:	10800060 	cmpeqi	r2,r2,1
  800adc:	10000c1e 	bne	r2,zero,800b10 <c_tick+0x2b8>
  800ae0:	00001406 	br	800b34 <c_tick+0x2dc>
    case wURI:
        if ((VS || C_VP) && VRPState != dVRP) {
  800ae4:	d0a76e17 	ldw	r2,-25160(gp)
  800ae8:	1000021e 	bne	r2,zero,800af4 <c_tick+0x29c>
  800aec:	d0a75c17 	ldw	r2,-25232(gp)
  800af0:	10000f26 	beq	r2,zero,800b30 <c_tick+0x2d8>
  800af4:	d0a76a17 	ldw	r2,-25176(gp)
  800af8:	10800060 	cmpeqi	r2,r2,1
  800afc:	10000c1e 	bne	r2,zero,800b30 <c_tick+0x2d8>
            URIBufferState = dURI;
  800b00:	00800044 	movi	r2,1
  800b04:	d0a75b15 	stw	r2,-25236(gp)
            cURI = 0;
  800b08:	d0276615 	stw	zero,-25192(gp)
        }
        break;
  800b0c:	00000806 	br	800b30 <c_tick+0x2d8>
    case dURI:
        if (cURI >= URI_Constraint) {
  800b10:	d0e76617 	ldw	r3,-25192(gp)
  800b14:	d0a00717 	ldw	r2,-32740(gp)
  800b18:	18800116 	blt	r3,r2,800b20 <c_tick+0x2c8>
            URIBufferState = wURI;
  800b1c:	d0275b15 	stw	zero,-25236(gp)
        }
        cURI += 1;
  800b20:	d0a76617 	ldw	r2,-25192(gp)
  800b24:	10800044 	addi	r2,r2,1
  800b28:	d0a76615 	stw	r2,-25192(gp)
        break;
  800b2c:	00000106 	br	800b34 <c_tick+0x2dc>
    case wURI:
        if ((VS || C_VP) && VRPState != dVRP) {
            URIBufferState = dURI;
            cURI = 0;
        }
        break;
  800b30:	0001883a 	nop
        cURI += 1;
        break;
    }
    // ------------- End URIState -------------

	AVIState = AVIBufferState;
  800b34:	d0a75f17 	ldw	r2,-25220(gp)
  800b38:	d0a76815 	stw	r2,-25184(gp)
	PVARPState = PVARPBufferState;
  800b3c:	d0a75a17 	ldw	r2,-25240(gp)
  800b40:	d0a76915 	stw	r2,-25180(gp)
	VRPState = VRPBufferState;
  800b44:	d0a76017 	ldw	r2,-25216(gp)
  800b48:	d0a76a15 	stw	r2,-25176(gp)
	AEIState = AEIBufferState;
  800b4c:	d0a75e17 	ldw	r2,-25224(gp)
  800b50:	d0a76b15 	stw	r2,-25172(gp)
	URIState = URIBufferState;
  800b54:	d0a75b17 	ldw	r2,-25236(gp)
  800b58:	d0a76c15 	stw	r2,-25168(gp)
	LRIState = LRIBufferState;
  800b5c:	d0a76117 	ldw	r2,-25212(gp)
  800b60:	d0a76d15 	stw	r2,-25164(gp)


	if (C_AP == 2){
  800b64:	d0a75d17 	ldw	r2,-25228(gp)
  800b68:	10800098 	cmpnei	r2,r2,2
  800b6c:	1000011e 	bne	r2,zero,800b74 <c_tick+0x31c>
		C_AP = 0;
  800b70:	d0275d15 	stw	zero,-25228(gp)
	}

	if (C_VP == 2){
  800b74:	d0a75c17 	ldw	r2,-25232(gp)
  800b78:	10800098 	cmpnei	r2,r2,2
  800b7c:	1000011e 	bne	r2,zero,800b84 <c_tick+0x32c>
		C_VP = 0;
  800b80:	d0275c15 	stw	zero,-25232(gp)
	}

}
  800b84:	0001883a 	nop
  800b88:	e037883a 	mov	sp,fp
  800b8c:	df000017 	ldw	fp,0(sp)
  800b90:	dec00104 	addi	sp,sp,4
  800b94:	f800283a 	ret

00800b98 <logic>:

#include "timing.h"

#include "sccharts.h"

void logic(TickData* d) {
  800b98:	defffa04 	addi	sp,sp,-24
  800b9c:	dfc00515 	stw	ra,20(sp)
  800ba0:	df000415 	stw	fp,16(sp)
  800ba4:	dc800315 	stw	r18,12(sp)
  800ba8:	dc400215 	stw	r17,8(sp)
  800bac:	dc000115 	stw	r16,4(sp)
  800bb0:	df000404 	addi	fp,sp,16
  800bb4:	e13ffc15 	stw	r4,-16(fp)
  d->AP = 0;
  800bb8:	e0bffc17 	ldw	r2,-16(fp)
  800bbc:	10001705 	stb	zero,92(r2)
  d->VP = 0;
  800bc0:	e0bffc17 	ldw	r2,-16(fp)
  800bc4:	10001745 	stb	zero,93(r2)
  d->AVI = 0;
  800bc8:	e0bffc17 	ldw	r2,-16(fp)
  800bcc:	10001785 	stb	zero,94(r2)
  d->PVARP = 0;
  800bd0:	e0bffc17 	ldw	r2,-16(fp)
  800bd4:	100017c5 	stb	zero,95(r2)
  d->VRP = 0;
  800bd8:	e0bffc17 	ldw	r2,-16(fp)
  800bdc:	10001805 	stb	zero,96(r2)
  d->AEI = 0;
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	10001845 	stb	zero,97(r2)
  d->LRI = 0;
  800be8:	e0bffc17 	ldw	r2,-16(fp)
  800bec:	10001885 	stb	zero,98(r2)
  d->URI = 0;
  800bf0:	e0bffc17 	ldw	r2,-16(fp)
  800bf4:	100018c5 	stb	zero,99(r2)
  d->_g8 = d->_pg93;
  800bf8:	e0bffc17 	ldw	r2,-16(fp)
  800bfc:	10c04843 	ldbu	r3,289(r2)
  800c00:	e0bffc17 	ldw	r2,-16(fp)
  800c04:	10c01bc5 	stb	r3,111(r2)
  d->_g9_e1 = !d->_g8;
  800c08:	e0bffc17 	ldw	r2,-16(fp)
  800c0c:	10801bc3 	ldbu	r2,111(r2)
  800c10:	10803fcc 	andi	r2,r2,255
  800c14:	1080201c 	xori	r2,r2,128
  800c18:	10bfe004 	addi	r2,r2,-128
  800c1c:	1005003a 	cmpeq	r2,r2,zero
  800c20:	1007883a 	mov	r3,r2
  800c24:	e0bffc17 	ldw	r2,-16(fp)
  800c28:	10c04385 	stb	r3,270(r2)
  if (d->_g8) {
  800c2c:	e0bffc17 	ldw	r2,-16(fp)
  800c30:	10801bc3 	ldbu	r2,111(r2)
  800c34:	10803fcc 	andi	r2,r2,255
  800c38:	1080201c 	xori	r2,r2,128
  800c3c:	10bfe004 	addi	r2,r2,-128
  800c40:	10000626 	beq	r2,zero,800c5c <logic+0xc4>
    d->AVI |= 1;
  800c44:	e0bffc17 	ldw	r2,-16(fp)
  800c48:	10801783 	ldbu	r2,94(r2)
  800c4c:	10800054 	ori	r2,r2,1
  800c50:	1007883a 	mov	r3,r2
  800c54:	e0bffc17 	ldw	r2,-16(fp)
  800c58:	10c01785 	stb	r3,94(r2)
  }
  d->_g145 = d->_pg126;
  800c5c:	e0bffc17 	ldw	r2,-16(fp)
  800c60:	10c04883 	ldbu	r3,290(r2)
  800c64:	e0bffc17 	ldw	r2,-16(fp)
  800c68:	10c03285 	stb	r3,202(r2)
  if (d->_g145) {
  800c6c:	e0bffc17 	ldw	r2,-16(fp)
  800c70:	10803283 	ldbu	r2,202(r2)
  800c74:	10803fcc 	andi	r2,r2,255
  800c78:	1080201c 	xori	r2,r2,128
  800c7c:	10bfe004 	addi	r2,r2,-128
  800c80:	10000626 	beq	r2,zero,800c9c <logic+0x104>
    d->URI |= 1;
  800c84:	e0bffc17 	ldw	r2,-16(fp)
  800c88:	108018c3 	ldbu	r2,99(r2)
  800c8c:	10800054 	ori	r2,r2,1
  800c90:	1007883a 	mov	r3,r2
  800c94:	e0bffc17 	ldw	r2,-16(fp)
  800c98:	10c018c5 	stb	r3,99(r2)
  }
  d->_g167 = d->_pg143;
  800c9c:	e0bffc17 	ldw	r2,-16(fp)
  800ca0:	10c048c3 	ldbu	r3,291(r2)
  800ca4:	e0bffc17 	ldw	r2,-16(fp)
  800ca8:	10c03545 	stb	r3,213(r2)
  if (d->_g167) {
  800cac:	e0bffc17 	ldw	r2,-16(fp)
  800cb0:	10803543 	ldbu	r2,213(r2)
  800cb4:	10803fcc 	andi	r2,r2,255
  800cb8:	1080201c 	xori	r2,r2,128
  800cbc:	10bfe004 	addi	r2,r2,-128
  800cc0:	10001226 	beq	r2,zero,800d0c <logic+0x174>
    d->_region0_AVI_cAVI += d->deltaT;
  800cc4:	e13ffc17 	ldw	r4,-16(fp)
  800cc8:	20800717 	ldw	r2,28(r4)
  800ccc:	20c00817 	ldw	r3,32(r4)
  800cd0:	e1bffc17 	ldw	r6,-16(fp)
  800cd4:	31001317 	ldw	r4,76(r6)
  800cd8:	31401417 	ldw	r5,80(r6)
  800cdc:	200d883a 	mov	r6,r4
  800ce0:	280f883a 	mov	r7,r5
  800ce4:	1009883a 	mov	r4,r2
  800ce8:	180b883a 	mov	r5,r3
  800cec:	0805c600 	call	805c60 <__adddf3>
  800cf0:	1009883a 	mov	r4,r2
  800cf4:	180b883a 	mov	r5,r3
  800cf8:	2005883a 	mov	r2,r4
  800cfc:	2807883a 	mov	r3,r5
  800d00:	e13ffc17 	ldw	r4,-16(fp)
  800d04:	20800715 	stw	r2,28(r4)
  800d08:	20c00815 	stw	r3,32(r4)
  }
  d->_g23 = d->_pg8;
  800d0c:	e0bffc17 	ldw	r2,-16(fp)
  800d10:	10c04903 	ldbu	r3,292(r2)
  800d14:	e0bffc17 	ldw	r2,-16(fp)
  800d18:	10c01e45 	stb	r3,121(r2)
  d->_cg23 = d->_region0_AVI_cAVI >= d->AVI_Constraint && !d->URI;
  800d1c:	e0bffc17 	ldw	r2,-16(fp)
  800d20:	14000717 	ldw	r16,28(r2)
  800d24:	14400817 	ldw	r17,32(r2)
  800d28:	e0bffc17 	ldw	r2,-16(fp)
  800d2c:	10800117 	ldw	r2,4(r2)
  800d30:	1009883a 	mov	r4,r2
  800d34:	0806fd80 	call	806fd8 <__floatsidf>
  800d38:	1009883a 	mov	r4,r2
  800d3c:	180b883a 	mov	r5,r3
  800d40:	200d883a 	mov	r6,r4
  800d44:	280f883a 	mov	r7,r5
  800d48:	8009883a 	mov	r4,r16
  800d4c:	880b883a 	mov	r5,r17
  800d50:	080650c0 	call	80650c <__gedf2>
  800d54:	10000816 	blt	r2,zero,800d78 <logic+0x1e0>
  800d58:	e0bffc17 	ldw	r2,-16(fp)
  800d5c:	108018c3 	ldbu	r2,99(r2)
  800d60:	10803fcc 	andi	r2,r2,255
  800d64:	1080201c 	xori	r2,r2,128
  800d68:	10bfe004 	addi	r2,r2,-128
  800d6c:	1000021e 	bne	r2,zero,800d78 <logic+0x1e0>
  800d70:	00800044 	movi	r2,1
  800d74:	00000106 	br	800d7c <logic+0x1e4>
  800d78:	0005883a 	mov	r2,zero
  800d7c:	1007883a 	mov	r3,r2
  800d80:	e0bffc17 	ldw	r2,-16(fp)
  800d84:	10c038c5 	stb	r3,227(r2)
  d->_g24 = d->_g23 && d->_cg23;
  800d88:	e0bffc17 	ldw	r2,-16(fp)
  800d8c:	10801e43 	ldbu	r2,121(r2)
  800d90:	10803fcc 	andi	r2,r2,255
  800d94:	1080201c 	xori	r2,r2,128
  800d98:	10bfe004 	addi	r2,r2,-128
  800d9c:	10000826 	beq	r2,zero,800dc0 <logic+0x228>
  800da0:	e0bffc17 	ldw	r2,-16(fp)
  800da4:	108038c3 	ldbu	r2,227(r2)
  800da8:	10803fcc 	andi	r2,r2,255
  800dac:	1080201c 	xori	r2,r2,128
  800db0:	10bfe004 	addi	r2,r2,-128
  800db4:	10000226 	beq	r2,zero,800dc0 <logic+0x228>
  800db8:	00800044 	movi	r2,1
  800dbc:	00000106 	br	800dc4 <logic+0x22c>
  800dc0:	0005883a 	mov	r2,zero
  800dc4:	1007883a 	mov	r3,r2
  800dc8:	e0bffc17 	ldw	r2,-16(fp)
  800dcc:	10c01e85 	stb	r3,122(r2)
  if (d->_g24) {
  800dd0:	e0bffc17 	ldw	r2,-16(fp)
  800dd4:	10801e83 	ldbu	r2,122(r2)
  800dd8:	10803fcc 	andi	r2,r2,255
  800ddc:	1080201c 	xori	r2,r2,128
  800de0:	10bfe004 	addi	r2,r2,-128
  800de4:	10000326 	beq	r2,zero,800df4 <logic+0x25c>
    d->_Pacemaker_local__Atrig = 1;
  800de8:	e0bffc17 	ldw	r2,-16(fp)
  800dec:	00c00044 	movi	r3,1
  800df0:	10c01905 	stb	r3,100(r2)
  }
  d->_g26 = d->_g23 && !d->_cg23;
  800df4:	e0bffc17 	ldw	r2,-16(fp)
  800df8:	10801e43 	ldbu	r2,121(r2)
  800dfc:	10803fcc 	andi	r2,r2,255
  800e00:	1080201c 	xori	r2,r2,128
  800e04:	10bfe004 	addi	r2,r2,-128
  800e08:	10000826 	beq	r2,zero,800e2c <logic+0x294>
  800e0c:	e0bffc17 	ldw	r2,-16(fp)
  800e10:	108038c3 	ldbu	r2,227(r2)
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	1080201c 	xori	r2,r2,128
  800e1c:	10bfe004 	addi	r2,r2,-128
  800e20:	1000021e 	bne	r2,zero,800e2c <logic+0x294>
  800e24:	00800044 	movi	r2,1
  800e28:	00000106 	br	800e30 <logic+0x298>
  800e2c:	0005883a 	mov	r2,zero
  800e30:	1007883a 	mov	r3,r2
  800e34:	e0bffc17 	ldw	r2,-16(fp)
  800e38:	10c01f05 	stb	r3,124(r2)
  d->_g27 = d->_g26 && d->VS;
  800e3c:	e0bffc17 	ldw	r2,-16(fp)
  800e40:	10801f03 	ldbu	r2,124(r2)
  800e44:	10803fcc 	andi	r2,r2,255
  800e48:	1080201c 	xori	r2,r2,128
  800e4c:	10bfe004 	addi	r2,r2,-128
  800e50:	10000826 	beq	r2,zero,800e74 <logic+0x2dc>
  800e54:	e0bffc17 	ldw	r2,-16(fp)
  800e58:	10800043 	ldbu	r2,1(r2)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080201c 	xori	r2,r2,128
  800e64:	10bfe004 	addi	r2,r2,-128
  800e68:	10000226 	beq	r2,zero,800e74 <logic+0x2dc>
  800e6c:	00800044 	movi	r2,1
  800e70:	00000106 	br	800e78 <logic+0x2e0>
  800e74:	0005883a 	mov	r2,zero
  800e78:	1007883a 	mov	r3,r2
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	10c01f45 	stb	r3,125(r2)
  if (d->_g27) {
  800e84:	e0bffc17 	ldw	r2,-16(fp)
  800e88:	10801f43 	ldbu	r2,125(r2)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	1080201c 	xori	r2,r2,128
  800e94:	10bfe004 	addi	r2,r2,-128
  800e98:	10000326 	beq	r2,zero,800ea8 <logic+0x310>
    d->_Pacemaker_local__Atrig1 = 1;
  800e9c:	e0bffc17 	ldw	r2,-16(fp)
  800ea0:	00c00044 	movi	r3,1
  800ea4:	10c01945 	stb	r3,101(r2)
  }
  d->_cg8 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  800ea8:	e0bffc17 	ldw	r2,-16(fp)
  800eac:	10801903 	ldbu	r2,100(r2)
  800eb0:	10803fcc 	andi	r2,r2,255
  800eb4:	1080201c 	xori	r2,r2,128
  800eb8:	10bfe004 	addi	r2,r2,-128
  800ebc:	1000061e 	bne	r2,zero,800ed8 <logic+0x340>
  800ec0:	e0bffc17 	ldw	r2,-16(fp)
  800ec4:	10801943 	ldbu	r2,101(r2)
  800ec8:	10803fcc 	andi	r2,r2,255
  800ecc:	1080201c 	xori	r2,r2,128
  800ed0:	10bfe004 	addi	r2,r2,-128
  800ed4:	10000226 	beq	r2,zero,800ee0 <logic+0x348>
  800ed8:	00800044 	movi	r2,1
  800edc:	00000106 	br	800ee4 <logic+0x34c>
  800ee0:	0005883a 	mov	r2,zero
  800ee4:	1007883a 	mov	r3,r2
  800ee8:	e0bffc17 	ldw	r2,-16(fp)
  800eec:	10c036c5 	stb	r3,219(r2)
  d->_g9 = d->_g8 && d->_cg8;
  800ef0:	e0bffc17 	ldw	r2,-16(fp)
  800ef4:	10801bc3 	ldbu	r2,111(r2)
  800ef8:	10803fcc 	andi	r2,r2,255
  800efc:	1080201c 	xori	r2,r2,128
  800f00:	10bfe004 	addi	r2,r2,-128
  800f04:	10000826 	beq	r2,zero,800f28 <logic+0x390>
  800f08:	e0bffc17 	ldw	r2,-16(fp)
  800f0c:	108036c3 	ldbu	r2,219(r2)
  800f10:	10803fcc 	andi	r2,r2,255
  800f14:	1080201c 	xori	r2,r2,128
  800f18:	10bfe004 	addi	r2,r2,-128
  800f1c:	10000226 	beq	r2,zero,800f28 <logic+0x390>
  800f20:	00800044 	movi	r2,1
  800f24:	00000106 	br	800f2c <logic+0x394>
  800f28:	0005883a 	mov	r2,zero
  800f2c:	1007883a 	mov	r3,r2
  800f30:	e0bffc17 	ldw	r2,-16(fp)
  800f34:	10c01c05 	stb	r3,112(r2)
  d->_g19 = d->_pg4;
  800f38:	e0bffc17 	ldw	r2,-16(fp)
  800f3c:	10c04943 	ldbu	r3,293(r2)
  800f40:	e0bffc17 	ldw	r2,-16(fp)
  800f44:	10c01dc5 	stb	r3,119(r2)
  d->_g13 = d->_pg28;
  800f48:	e0bffc17 	ldw	r2,-16(fp)
  800f4c:	10c04983 	ldbu	r3,294(r2)
  800f50:	e0bffc17 	ldw	r2,-16(fp)
  800f54:	10c01c85 	stb	r3,114(r2)
  d->_g16_e2 = !(d->_g19 || d->_g13);
  800f58:	e0bffc17 	ldw	r2,-16(fp)
  800f5c:	10801dc3 	ldbu	r2,119(r2)
  800f60:	10803fcc 	andi	r2,r2,255
  800f64:	1080201c 	xori	r2,r2,128
  800f68:	10bfe004 	addi	r2,r2,-128
  800f6c:	1000081e 	bne	r2,zero,800f90 <logic+0x3f8>
  800f70:	e0bffc17 	ldw	r2,-16(fp)
  800f74:	10801c83 	ldbu	r2,114(r2)
  800f78:	10803fcc 	andi	r2,r2,255
  800f7c:	1080201c 	xori	r2,r2,128
  800f80:	10bfe004 	addi	r2,r2,-128
  800f84:	1000021e 	bne	r2,zero,800f90 <logic+0x3f8>
  800f88:	00800044 	movi	r2,1
  800f8c:	00000106 	br	800f94 <logic+0x3fc>
  800f90:	0005883a 	mov	r2,zero
  800f94:	1007883a 	mov	r3,r2
  800f98:	e0bffc17 	ldw	r2,-16(fp)
  800f9c:	10c043c5 	stb	r3,271(r2)
  d->sleepT = 1000.0;
  800fa0:	e0fffc17 	ldw	r3,-16(fp)
  800fa4:	18001515 	stw	zero,84(r3)
  800fa8:	009023f4 	movhi	r2,16527
  800fac:	10900004 	addi	r2,r2,16384
  800fb0:	18801615 	stw	r2,88(r3)
  d->_g19 = d->_g13 || d->_g19;
  800fb4:	e0bffc17 	ldw	r2,-16(fp)
  800fb8:	10801c83 	ldbu	r2,114(r2)
  800fbc:	10803fcc 	andi	r2,r2,255
  800fc0:	1080201c 	xori	r2,r2,128
  800fc4:	10bfe004 	addi	r2,r2,-128
  800fc8:	1000061e 	bne	r2,zero,800fe4 <logic+0x44c>
  800fcc:	e0bffc17 	ldw	r2,-16(fp)
  800fd0:	10801dc3 	ldbu	r2,119(r2)
  800fd4:	10803fcc 	andi	r2,r2,255
  800fd8:	1080201c 	xori	r2,r2,128
  800fdc:	10bfe004 	addi	r2,r2,-128
  800fe0:	10000226 	beq	r2,zero,800fec <logic+0x454>
  800fe4:	00800044 	movi	r2,1
  800fe8:	00000106 	br	800ff0 <logic+0x458>
  800fec:	0005883a 	mov	r2,zero
  800ff0:	1007883a 	mov	r3,r2
  800ff4:	e0bffc17 	ldw	r2,-16(fp)
  800ff8:	10c01dc5 	stb	r3,119(r2)
  d->_cg14 = d->_region0_AVI_cAVI < d->AVI_Constraint;
  800ffc:	e0bffc17 	ldw	r2,-16(fp)
  801000:	14000717 	ldw	r16,28(r2)
  801004:	14400817 	ldw	r17,32(r2)
  801008:	e0bffc17 	ldw	r2,-16(fp)
  80100c:	10800117 	ldw	r2,4(r2)
  801010:	1009883a 	mov	r4,r2
  801014:	0806fd80 	call	806fd8 <__floatsidf>
  801018:	1009883a 	mov	r4,r2
  80101c:	180b883a 	mov	r5,r3
  801020:	04800044 	movi	r18,1
  801024:	200d883a 	mov	r6,r4
  801028:	280f883a 	mov	r7,r5
  80102c:	8009883a 	mov	r4,r16
  801030:	880b883a 	mov	r5,r17
  801034:	08065e80 	call	8065e8 <__ledf2>
  801038:	10000116 	blt	r2,zero,801040 <logic+0x4a8>
  80103c:	0025883a 	mov	r18,zero
  801040:	9007883a 	mov	r3,r18
  801044:	e0bffc17 	ldw	r2,-16(fp)
  801048:	10c037c5 	stb	r3,223(r2)
  d->_g13 = d->_g19 && d->_cg14;
  80104c:	e0bffc17 	ldw	r2,-16(fp)
  801050:	10801dc3 	ldbu	r2,119(r2)
  801054:	10803fcc 	andi	r2,r2,255
  801058:	1080201c 	xori	r2,r2,128
  80105c:	10bfe004 	addi	r2,r2,-128
  801060:	10000826 	beq	r2,zero,801084 <logic+0x4ec>
  801064:	e0bffc17 	ldw	r2,-16(fp)
  801068:	108037c3 	ldbu	r2,223(r2)
  80106c:	10803fcc 	andi	r2,r2,255
  801070:	1080201c 	xori	r2,r2,128
  801074:	10bfe004 	addi	r2,r2,-128
  801078:	10000226 	beq	r2,zero,801084 <logic+0x4ec>
  80107c:	00800044 	movi	r2,1
  801080:	00000106 	br	801088 <logic+0x4f0>
  801084:	0005883a 	mov	r2,zero
  801088:	1007883a 	mov	r3,r2
  80108c:	e0bffc17 	ldw	r2,-16(fp)
  801090:	10c01c85 	stb	r3,114(r2)
  if (d->_g13) {
  801094:	e0bffc17 	ldw	r2,-16(fp)
  801098:	10801c83 	ldbu	r2,114(r2)
  80109c:	10803fcc 	andi	r2,r2,255
  8010a0:	1080201c 	xori	r2,r2,128
  8010a4:	10bfe004 	addi	r2,r2,-128
  8010a8:	10003426 	beq	r2,zero,80117c <logic+0x5e4>
    d->sleepT = (d->sleepT < (d->AVI_Constraint - d->_region0_AVI_cAVI)) ? d->sleepT : (d->AVI_Constraint - d->_region0_AVI_cAVI);
  8010ac:	e0bffc17 	ldw	r2,-16(fp)
  8010b0:	14001517 	ldw	r16,84(r2)
  8010b4:	14401617 	ldw	r17,88(r2)
  8010b8:	e0bffc17 	ldw	r2,-16(fp)
  8010bc:	10800117 	ldw	r2,4(r2)
  8010c0:	1009883a 	mov	r4,r2
  8010c4:	0806fd80 	call	806fd8 <__floatsidf>
  8010c8:	1011883a 	mov	r8,r2
  8010cc:	1813883a 	mov	r9,r3
  8010d0:	e13ffc17 	ldw	r4,-16(fp)
  8010d4:	20800717 	ldw	r2,28(r4)
  8010d8:	20c00817 	ldw	r3,32(r4)
  8010dc:	100d883a 	mov	r6,r2
  8010e0:	180f883a 	mov	r7,r3
  8010e4:	4009883a 	mov	r4,r8
  8010e8:	480b883a 	mov	r5,r9
  8010ec:	08066dc0 	call	8066dc <__subdf3>
  8010f0:	1009883a 	mov	r4,r2
  8010f4:	180b883a 	mov	r5,r3
  8010f8:	2005883a 	mov	r2,r4
  8010fc:	2807883a 	mov	r3,r5
  801100:	100d883a 	mov	r6,r2
  801104:	180f883a 	mov	r7,r3
  801108:	8009883a 	mov	r4,r16
  80110c:	880b883a 	mov	r5,r17
  801110:	08065e80 	call	8065e8 <__ledf2>
  801114:	1000040e 	bge	r2,zero,801128 <logic+0x590>
  801118:	e13ffc17 	ldw	r4,-16(fp)
  80111c:	20801517 	ldw	r2,84(r4)
  801120:	20c01617 	ldw	r3,88(r4)
  801124:	00001206 	br	801170 <logic+0x5d8>
  801128:	e0bffc17 	ldw	r2,-16(fp)
  80112c:	10800117 	ldw	r2,4(r2)
  801130:	1009883a 	mov	r4,r2
  801134:	0806fd80 	call	806fd8 <__floatsidf>
  801138:	1011883a 	mov	r8,r2
  80113c:	1813883a 	mov	r9,r3
  801140:	e13ffc17 	ldw	r4,-16(fp)
  801144:	20800717 	ldw	r2,28(r4)
  801148:	20c00817 	ldw	r3,32(r4)
  80114c:	100d883a 	mov	r6,r2
  801150:	180f883a 	mov	r7,r3
  801154:	4009883a 	mov	r4,r8
  801158:	480b883a 	mov	r5,r9
  80115c:	08066dc0 	call	8066dc <__subdf3>
  801160:	1009883a 	mov	r4,r2
  801164:	180b883a 	mov	r5,r3
  801168:	2005883a 	mov	r2,r4
  80116c:	2807883a 	mov	r3,r5
  801170:	e13ffc17 	ldw	r4,-16(fp)
  801174:	20801515 	stw	r2,84(r4)
  801178:	20c01615 	stw	r3,88(r4)
  }
  d->_cg15 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  80117c:	e0bffc17 	ldw	r2,-16(fp)
  801180:	10801903 	ldbu	r2,100(r2)
  801184:	10803fcc 	andi	r2,r2,255
  801188:	1080201c 	xori	r2,r2,128
  80118c:	10bfe004 	addi	r2,r2,-128
  801190:	1000061e 	bne	r2,zero,8011ac <logic+0x614>
  801194:	e0bffc17 	ldw	r2,-16(fp)
  801198:	10801943 	ldbu	r2,101(r2)
  80119c:	10803fcc 	andi	r2,r2,255
  8011a0:	1080201c 	xori	r2,r2,128
  8011a4:	10bfe004 	addi	r2,r2,-128
  8011a8:	10000226 	beq	r2,zero,8011b4 <logic+0x61c>
  8011ac:	00800044 	movi	r2,1
  8011b0:	00000106 	br	8011b8 <logic+0x620>
  8011b4:	0005883a 	mov	r2,zero
  8011b8:	1007883a 	mov	r3,r2
  8011bc:	e0bffc17 	ldw	r2,-16(fp)
  8011c0:	10c03785 	stb	r3,222(r2)
  d->_g14 = d->_g19 && !d->_cg14;
  8011c4:	e0bffc17 	ldw	r2,-16(fp)
  8011c8:	10801dc3 	ldbu	r2,119(r2)
  8011cc:	10803fcc 	andi	r2,r2,255
  8011d0:	1080201c 	xori	r2,r2,128
  8011d4:	10bfe004 	addi	r2,r2,-128
  8011d8:	10000826 	beq	r2,zero,8011fc <logic+0x664>
  8011dc:	e0bffc17 	ldw	r2,-16(fp)
  8011e0:	108037c3 	ldbu	r2,223(r2)
  8011e4:	10803fcc 	andi	r2,r2,255
  8011e8:	1080201c 	xori	r2,r2,128
  8011ec:	10bfe004 	addi	r2,r2,-128
  8011f0:	1000021e 	bne	r2,zero,8011fc <logic+0x664>
  8011f4:	00800044 	movi	r2,1
  8011f8:	00000106 	br	801200 <logic+0x668>
  8011fc:	0005883a 	mov	r2,zero
  801200:	1007883a 	mov	r3,r2
  801204:	e0bffc17 	ldw	r2,-16(fp)
  801208:	10c01cc5 	stb	r3,115(r2)
  d->_cg17 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  80120c:	e0bffc17 	ldw	r2,-16(fp)
  801210:	10801903 	ldbu	r2,100(r2)
  801214:	10803fcc 	andi	r2,r2,255
  801218:	1080201c 	xori	r2,r2,128
  80121c:	10bfe004 	addi	r2,r2,-128
  801220:	1000061e 	bne	r2,zero,80123c <logic+0x6a4>
  801224:	e0bffc17 	ldw	r2,-16(fp)
  801228:	10801943 	ldbu	r2,101(r2)
  80122c:	10803fcc 	andi	r2,r2,255
  801230:	1080201c 	xori	r2,r2,128
  801234:	10bfe004 	addi	r2,r2,-128
  801238:	10000226 	beq	r2,zero,801244 <logic+0x6ac>
  80123c:	00800044 	movi	r2,1
  801240:	00000106 	br	801248 <logic+0x6b0>
  801244:	0005883a 	mov	r2,zero
  801248:	1007883a 	mov	r3,r2
  80124c:	e0bffc17 	ldw	r2,-16(fp)
  801250:	10c03805 	stb	r3,224(r2)
  d->_g16 = d->_g13 && d->_cg15 || d->_g14 && d->_cg17;
  801254:	e0bffc17 	ldw	r2,-16(fp)
  801258:	10801c83 	ldbu	r2,114(r2)
  80125c:	10803fcc 	andi	r2,r2,255
  801260:	1080201c 	xori	r2,r2,128
  801264:	10bfe004 	addi	r2,r2,-128
  801268:	10000626 	beq	r2,zero,801284 <logic+0x6ec>
  80126c:	e0bffc17 	ldw	r2,-16(fp)
  801270:	10803783 	ldbu	r2,222(r2)
  801274:	10803fcc 	andi	r2,r2,255
  801278:	1080201c 	xori	r2,r2,128
  80127c:	10bfe004 	addi	r2,r2,-128
  801280:	10000c1e 	bne	r2,zero,8012b4 <logic+0x71c>
  801284:	e0bffc17 	ldw	r2,-16(fp)
  801288:	10801cc3 	ldbu	r2,115(r2)
  80128c:	10803fcc 	andi	r2,r2,255
  801290:	1080201c 	xori	r2,r2,128
  801294:	10bfe004 	addi	r2,r2,-128
  801298:	10000826 	beq	r2,zero,8012bc <logic+0x724>
  80129c:	e0bffc17 	ldw	r2,-16(fp)
  8012a0:	10803803 	ldbu	r2,224(r2)
  8012a4:	10803fcc 	andi	r2,r2,255
  8012a8:	1080201c 	xori	r2,r2,128
  8012ac:	10bfe004 	addi	r2,r2,-128
  8012b0:	10000226 	beq	r2,zero,8012bc <logic+0x724>
  8012b4:	00800044 	movi	r2,1
  8012b8:	00000106 	br	8012c0 <logic+0x728>
  8012bc:	0005883a 	mov	r2,zero
  8012c0:	1007883a 	mov	r3,r2
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10c01d45 	stb	r3,117(r2)
  d->_g23 = !d->_g23;
  8012cc:	e0bffc17 	ldw	r2,-16(fp)
  8012d0:	10801e43 	ldbu	r2,121(r2)
  8012d4:	10803fcc 	andi	r2,r2,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	1005003a 	cmpeq	r2,r2,zero
  8012e4:	1007883a 	mov	r3,r2
  8012e8:	e0bffc17 	ldw	r2,-16(fp)
  8012ec:	10c01e45 	stb	r3,121(r2)
  d->_g27 = d->_g24 || d->_g27;
  8012f0:	e0bffc17 	ldw	r2,-16(fp)
  8012f4:	10801e83 	ldbu	r2,122(r2)
  8012f8:	10803fcc 	andi	r2,r2,255
  8012fc:	1080201c 	xori	r2,r2,128
  801300:	10bfe004 	addi	r2,r2,-128
  801304:	1000061e 	bne	r2,zero,801320 <logic+0x788>
  801308:	e0bffc17 	ldw	r2,-16(fp)
  80130c:	10801f43 	ldbu	r2,125(r2)
  801310:	10803fcc 	andi	r2,r2,255
  801314:	1080201c 	xori	r2,r2,128
  801318:	10bfe004 	addi	r2,r2,-128
  80131c:	10000226 	beq	r2,zero,801328 <logic+0x790>
  801320:	00800044 	movi	r2,1
  801324:	00000106 	br	80132c <logic+0x794>
  801328:	0005883a 	mov	r2,zero
  80132c:	1007883a 	mov	r3,r2
  801330:	e0bffc17 	ldw	r2,-16(fp)
  801334:	10c01f45 	stb	r3,125(r2)
  d->_g24 = (d->_g9_e1 || d->_g9) && (d->_g16_e2 || d->_g16) && (d->_g23 || d->_g27) && (d->_g9 || d->_g16 || d->_g27);
  801338:	e0bffc17 	ldw	r2,-16(fp)
  80133c:	10804383 	ldbu	r2,270(r2)
  801340:	10803fcc 	andi	r2,r2,255
  801344:	1080201c 	xori	r2,r2,128
  801348:	10bfe004 	addi	r2,r2,-128
  80134c:	1000061e 	bne	r2,zero,801368 <logic+0x7d0>
  801350:	e0bffc17 	ldw	r2,-16(fp)
  801354:	10801c03 	ldbu	r2,112(r2)
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	1080201c 	xori	r2,r2,128
  801360:	10bfe004 	addi	r2,r2,-128
  801364:	10002c26 	beq	r2,zero,801418 <logic+0x880>
  801368:	e0bffc17 	ldw	r2,-16(fp)
  80136c:	108043c3 	ldbu	r2,271(r2)
  801370:	10803fcc 	andi	r2,r2,255
  801374:	1080201c 	xori	r2,r2,128
  801378:	10bfe004 	addi	r2,r2,-128
  80137c:	1000061e 	bne	r2,zero,801398 <logic+0x800>
  801380:	e0bffc17 	ldw	r2,-16(fp)
  801384:	10801d43 	ldbu	r2,117(r2)
  801388:	10803fcc 	andi	r2,r2,255
  80138c:	1080201c 	xori	r2,r2,128
  801390:	10bfe004 	addi	r2,r2,-128
  801394:	10002026 	beq	r2,zero,801418 <logic+0x880>
  801398:	e0bffc17 	ldw	r2,-16(fp)
  80139c:	10801e43 	ldbu	r2,121(r2)
  8013a0:	10803fcc 	andi	r2,r2,255
  8013a4:	1080201c 	xori	r2,r2,128
  8013a8:	10bfe004 	addi	r2,r2,-128
  8013ac:	1000061e 	bne	r2,zero,8013c8 <logic+0x830>
  8013b0:	e0bffc17 	ldw	r2,-16(fp)
  8013b4:	10801f43 	ldbu	r2,125(r2)
  8013b8:	10803fcc 	andi	r2,r2,255
  8013bc:	1080201c 	xori	r2,r2,128
  8013c0:	10bfe004 	addi	r2,r2,-128
  8013c4:	10001426 	beq	r2,zero,801418 <logic+0x880>
  8013c8:	e0bffc17 	ldw	r2,-16(fp)
  8013cc:	10801c03 	ldbu	r2,112(r2)
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	1080201c 	xori	r2,r2,128
  8013d8:	10bfe004 	addi	r2,r2,-128
  8013dc:	10000c1e 	bne	r2,zero,801410 <logic+0x878>
  8013e0:	e0bffc17 	ldw	r2,-16(fp)
  8013e4:	10801d43 	ldbu	r2,117(r2)
  8013e8:	10803fcc 	andi	r2,r2,255
  8013ec:	1080201c 	xori	r2,r2,128
  8013f0:	10bfe004 	addi	r2,r2,-128
  8013f4:	1000061e 	bne	r2,zero,801410 <logic+0x878>
  8013f8:	e0bffc17 	ldw	r2,-16(fp)
  8013fc:	10801f43 	ldbu	r2,125(r2)
  801400:	10803fcc 	andi	r2,r2,255
  801404:	1080201c 	xori	r2,r2,128
  801408:	10bfe004 	addi	r2,r2,-128
  80140c:	10000226 	beq	r2,zero,801418 <logic+0x880>
  801410:	00800044 	movi	r2,1
  801414:	00000106 	br	80141c <logic+0x884>
  801418:	0005883a 	mov	r2,zero
  80141c:	1007883a 	mov	r3,r2
  801420:	e0bffc17 	ldw	r2,-16(fp)
  801424:	10c01e85 	stb	r3,122(r2)
  d->_cg28 = d->_Pacemaker_local__Atrig;
  801428:	e0bffc17 	ldw	r2,-16(fp)
  80142c:	10c01903 	ldbu	r3,100(r2)
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10c03605 	stb	r3,216(r2)
  d->_g16_e2 = d->_g24 && d->_cg28;
  801438:	e0bffc17 	ldw	r2,-16(fp)
  80143c:	10801e83 	ldbu	r2,122(r2)
  801440:	10803fcc 	andi	r2,r2,255
  801444:	1080201c 	xori	r2,r2,128
  801448:	10bfe004 	addi	r2,r2,-128
  80144c:	10000826 	beq	r2,zero,801470 <logic+0x8d8>
  801450:	e0bffc17 	ldw	r2,-16(fp)
  801454:	10803603 	ldbu	r2,216(r2)
  801458:	10803fcc 	andi	r2,r2,255
  80145c:	1080201c 	xori	r2,r2,128
  801460:	10bfe004 	addi	r2,r2,-128
  801464:	10000226 	beq	r2,zero,801470 <logic+0x8d8>
  801468:	00800044 	movi	r2,1
  80146c:	00000106 	br	801474 <logic+0x8dc>
  801470:	0005883a 	mov	r2,zero
  801474:	1007883a 	mov	r3,r2
  801478:	e0bffc17 	ldw	r2,-16(fp)
  80147c:	10c043c5 	stb	r3,271(r2)
  if (d->_g16_e2) {
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	108043c3 	ldbu	r2,271(r2)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10000626 	beq	r2,zero,8014b0 <logic+0x918>
    d->VP |= 1;
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	10801743 	ldbu	r2,93(r2)
  8014a0:	10800054 	ori	r2,r2,1
  8014a4:	1007883a 	mov	r3,r2
  8014a8:	e0bffc17 	ldw	r2,-16(fp)
  8014ac:	10c01745 	stb	r3,93(r2)
  }
  d->_g9 = d->_pg131;
  8014b0:	e0bffc17 	ldw	r2,-16(fp)
  8014b4:	10c049c3 	ldbu	r3,295(r2)
  8014b8:	e0bffc17 	ldw	r2,-16(fp)
  8014bc:	10c01c05 	stb	r3,112(r2)
  if (d->_g9) {
  8014c0:	e0bffc17 	ldw	r2,-16(fp)
  8014c4:	10801c03 	ldbu	r2,112(r2)
  8014c8:	10803fcc 	andi	r2,r2,255
  8014cc:	1080201c 	xori	r2,r2,128
  8014d0:	10bfe004 	addi	r2,r2,-128
  8014d4:	10000626 	beq	r2,zero,8014f0 <logic+0x958>
    d->PVARP |= 1;
  8014d8:	e0bffc17 	ldw	r2,-16(fp)
  8014dc:	108017c3 	ldbu	r2,95(r2)
  8014e0:	10800054 	ori	r2,r2,1
  8014e4:	1007883a 	mov	r3,r2
  8014e8:	e0bffc17 	ldw	r2,-16(fp)
  8014ec:	10c017c5 	stb	r3,95(r2)
  }
  d->_g16 = d->_pg67;
  8014f0:	e0bffc17 	ldw	r2,-16(fp)
  8014f4:	10c04a03 	ldbu	r3,296(r2)
  8014f8:	e0bffc17 	ldw	r2,-16(fp)
  8014fc:	10c01d45 	stb	r3,117(r2)
  d->_g9_e1 = !d->_g16;
  801500:	e0bffc17 	ldw	r2,-16(fp)
  801504:	10801d43 	ldbu	r2,117(r2)
  801508:	10803fcc 	andi	r2,r2,255
  80150c:	1080201c 	xori	r2,r2,128
  801510:	10bfe004 	addi	r2,r2,-128
  801514:	1005003a 	cmpeq	r2,r2,zero
  801518:	1007883a 	mov	r3,r2
  80151c:	e0bffc17 	ldw	r2,-16(fp)
  801520:	10c04385 	stb	r3,270(r2)
  if (d->_g16) {
  801524:	e0bffc17 	ldw	r2,-16(fp)
  801528:	10801d43 	ldbu	r2,117(r2)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	1080201c 	xori	r2,r2,128
  801534:	10bfe004 	addi	r2,r2,-128
  801538:	10000626 	beq	r2,zero,801554 <logic+0x9bc>
    d->AEI |= 1;
  80153c:	e0bffc17 	ldw	r2,-16(fp)
  801540:	10801843 	ldbu	r2,97(r2)
  801544:	10800054 	ori	r2,r2,1
  801548:	1007883a 	mov	r3,r2
  80154c:	e0bffc17 	ldw	r2,-16(fp)
  801550:	10c01845 	stb	r3,97(r2)
  }
  d->_g25 = d->_pg158;
  801554:	e0bffc17 	ldw	r2,-16(fp)
  801558:	10c04a43 	ldbu	r3,297(r2)
  80155c:	e0bffc17 	ldw	r2,-16(fp)
  801560:	10c01ec5 	stb	r3,123(r2)
  if (d->_g25) {
  801564:	e0bffc17 	ldw	r2,-16(fp)
  801568:	10801ec3 	ldbu	r2,123(r2)
  80156c:	10803fcc 	andi	r2,r2,255
  801570:	1080201c 	xori	r2,r2,128
  801574:	10bfe004 	addi	r2,r2,-128
  801578:	10001226 	beq	r2,zero,8015c4 <logic+0xa2c>
    d->_region3_AEI_cAEI += d->deltaT;
  80157c:	e13ffc17 	ldw	r4,-16(fp)
  801580:	20800d17 	ldw	r2,52(r4)
  801584:	20c00e17 	ldw	r3,56(r4)
  801588:	e1bffc17 	ldw	r6,-16(fp)
  80158c:	31001317 	ldw	r4,76(r6)
  801590:	31401417 	ldw	r5,80(r6)
  801594:	200d883a 	mov	r6,r4
  801598:	280f883a 	mov	r7,r5
  80159c:	1009883a 	mov	r4,r2
  8015a0:	180b883a 	mov	r5,r3
  8015a4:	0805c600 	call	805c60 <__adddf3>
  8015a8:	1009883a 	mov	r4,r2
  8015ac:	180b883a 	mov	r5,r3
  8015b0:	2005883a 	mov	r2,r4
  8015b4:	2807883a 	mov	r3,r5
  8015b8:	e13ffc17 	ldw	r4,-16(fp)
  8015bc:	20800d15 	stw	r2,52(r4)
  8015c0:	20c00e15 	stw	r3,56(r4)
  }
  d->_g25_e3 = d->_pg106;
  8015c4:	e0bffc17 	ldw	r2,-16(fp)
  8015c8:	10c04a83 	ldbu	r3,298(r2)
  8015cc:	e0bffc17 	ldw	r2,-16(fp)
  8015d0:	10c04405 	stb	r3,272(r2)
  d->_cg100 = d->_region3_AEI_cAEI >= d->AEI_Constraint;
  8015d4:	e0bffc17 	ldw	r2,-16(fp)
  8015d8:	14000d17 	ldw	r16,52(r2)
  8015dc:	14400e17 	ldw	r17,56(r2)
  8015e0:	e0bffc17 	ldw	r2,-16(fp)
  8015e4:	10800417 	ldw	r2,16(r2)
  8015e8:	1009883a 	mov	r4,r2
  8015ec:	0806fd80 	call	806fd8 <__floatsidf>
  8015f0:	1009883a 	mov	r4,r2
  8015f4:	180b883a 	mov	r5,r3
  8015f8:	04800044 	movi	r18,1
  8015fc:	200d883a 	mov	r6,r4
  801600:	280f883a 	mov	r7,r5
  801604:	8009883a 	mov	r4,r16
  801608:	880b883a 	mov	r5,r17
  80160c:	080650c0 	call	80650c <__gedf2>
  801610:	1000010e 	bge	r2,zero,801618 <logic+0xa80>
  801614:	0025883a 	mov	r18,zero
  801618:	9007883a 	mov	r3,r18
  80161c:	e0bffc17 	ldw	r2,-16(fp)
  801620:	10c03ec5 	stb	r3,251(r2)
  d->_g101 = d->_g25_e3 && d->_cg100;
  801624:	e0bffc17 	ldw	r2,-16(fp)
  801628:	10804403 	ldbu	r2,272(r2)
  80162c:	10803fcc 	andi	r2,r2,255
  801630:	1080201c 	xori	r2,r2,128
  801634:	10bfe004 	addi	r2,r2,-128
  801638:	10000826 	beq	r2,zero,80165c <logic+0xac4>
  80163c:	e0bffc17 	ldw	r2,-16(fp)
  801640:	10803ec3 	ldbu	r2,251(r2)
  801644:	10803fcc 	andi	r2,r2,255
  801648:	1080201c 	xori	r2,r2,128
  80164c:	10bfe004 	addi	r2,r2,-128
  801650:	10000226 	beq	r2,zero,80165c <logic+0xac4>
  801654:	00800044 	movi	r2,1
  801658:	00000106 	br	801660 <logic+0xac8>
  80165c:	0005883a 	mov	r2,zero
  801660:	1007883a 	mov	r3,r2
  801664:	e0bffc17 	ldw	r2,-16(fp)
  801668:	10c02b45 	stb	r3,173(r2)
  if (d->_g101) {
  80166c:	e0bffc17 	ldw	r2,-16(fp)
  801670:	10802b43 	ldbu	r2,173(r2)
  801674:	10803fcc 	andi	r2,r2,255
  801678:	1080201c 	xori	r2,r2,128
  80167c:	10bfe004 	addi	r2,r2,-128
  801680:	10000326 	beq	r2,zero,801690 <logic+0xaf8>
    d->_Pacemaker_local__Atrig4 = 1;
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	00c00044 	movi	r3,1
  80168c:	10c01a05 	stb	r3,104(r2)
  }
  d->_g103 = d->_g25_e3 && !d->_cg100;
  801690:	e0bffc17 	ldw	r2,-16(fp)
  801694:	10804403 	ldbu	r2,272(r2)
  801698:	10803fcc 	andi	r2,r2,255
  80169c:	1080201c 	xori	r2,r2,128
  8016a0:	10bfe004 	addi	r2,r2,-128
  8016a4:	10000826 	beq	r2,zero,8016c8 <logic+0xb30>
  8016a8:	e0bffc17 	ldw	r2,-16(fp)
  8016ac:	10803ec3 	ldbu	r2,251(r2)
  8016b0:	10803fcc 	andi	r2,r2,255
  8016b4:	1080201c 	xori	r2,r2,128
  8016b8:	10bfe004 	addi	r2,r2,-128
  8016bc:	1000021e 	bne	r2,zero,8016c8 <logic+0xb30>
  8016c0:	00800044 	movi	r2,1
  8016c4:	00000106 	br	8016cc <logic+0xb34>
  8016c8:	0005883a 	mov	r2,zero
  8016cc:	1007883a 	mov	r3,r2
  8016d0:	e0bffc17 	ldw	r2,-16(fp)
  8016d4:	10c02bc5 	stb	r3,175(r2)
  d->_cg103 = d->AS && !d->PVARP;
  8016d8:	e0bffc17 	ldw	r2,-16(fp)
  8016dc:	10800003 	ldbu	r2,0(r2)
  8016e0:	10803fcc 	andi	r2,r2,255
  8016e4:	1080201c 	xori	r2,r2,128
  8016e8:	10bfe004 	addi	r2,r2,-128
  8016ec:	10000826 	beq	r2,zero,801710 <logic+0xb78>
  8016f0:	e0bffc17 	ldw	r2,-16(fp)
  8016f4:	108017c3 	ldbu	r2,95(r2)
  8016f8:	10803fcc 	andi	r2,r2,255
  8016fc:	1080201c 	xori	r2,r2,128
  801700:	10bfe004 	addi	r2,r2,-128
  801704:	1000021e 	bne	r2,zero,801710 <logic+0xb78>
  801708:	00800044 	movi	r2,1
  80170c:	00000106 	br	801714 <logic+0xb7c>
  801710:	0005883a 	mov	r2,zero
  801714:	1007883a 	mov	r3,r2
  801718:	e0bffc17 	ldw	r2,-16(fp)
  80171c:	10c03e85 	stb	r3,250(r2)
  d->_g104 = d->_g103 && d->_cg103;
  801720:	e0bffc17 	ldw	r2,-16(fp)
  801724:	10802bc3 	ldbu	r2,175(r2)
  801728:	10803fcc 	andi	r2,r2,255
  80172c:	1080201c 	xori	r2,r2,128
  801730:	10bfe004 	addi	r2,r2,-128
  801734:	10000826 	beq	r2,zero,801758 <logic+0xbc0>
  801738:	e0bffc17 	ldw	r2,-16(fp)
  80173c:	10803e83 	ldbu	r2,250(r2)
  801740:	10803fcc 	andi	r2,r2,255
  801744:	1080201c 	xori	r2,r2,128
  801748:	10bfe004 	addi	r2,r2,-128
  80174c:	10000226 	beq	r2,zero,801758 <logic+0xbc0>
  801750:	00800044 	movi	r2,1
  801754:	00000106 	br	80175c <logic+0xbc4>
  801758:	0005883a 	mov	r2,zero
  80175c:	1007883a 	mov	r3,r2
  801760:	e0bffc17 	ldw	r2,-16(fp)
  801764:	10c02c05 	stb	r3,176(r2)
  if (d->_g104) {
  801768:	e0bffc17 	ldw	r2,-16(fp)
  80176c:	10802c03 	ldbu	r2,176(r2)
  801770:	10803fcc 	andi	r2,r2,255
  801774:	1080201c 	xori	r2,r2,128
  801778:	10bfe004 	addi	r2,r2,-128
  80177c:	10000326 	beq	r2,zero,80178c <logic+0xbf4>
    d->_Pacemaker_local__Atrig5 = 1;
  801780:	e0bffc17 	ldw	r2,-16(fp)
  801784:	00c00044 	movi	r3,1
  801788:	10c01a45 	stb	r3,105(r2)
  }
  d->_cg85 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80178c:	e0bffc17 	ldw	r2,-16(fp)
  801790:	10801a03 	ldbu	r2,104(r2)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	1080201c 	xori	r2,r2,128
  80179c:	10bfe004 	addi	r2,r2,-128
  8017a0:	1000061e 	bne	r2,zero,8017bc <logic+0xc24>
  8017a4:	e0bffc17 	ldw	r2,-16(fp)
  8017a8:	10801a43 	ldbu	r2,105(r2)
  8017ac:	10803fcc 	andi	r2,r2,255
  8017b0:	1080201c 	xori	r2,r2,128
  8017b4:	10bfe004 	addi	r2,r2,-128
  8017b8:	10000226 	beq	r2,zero,8017c4 <logic+0xc2c>
  8017bc:	00800044 	movi	r2,1
  8017c0:	00000106 	br	8017c8 <logic+0xc30>
  8017c4:	0005883a 	mov	r2,zero
  8017c8:	1007883a 	mov	r3,r2
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10c03cc5 	stb	r3,243(r2)
  d->_g86 = d->_g16 && d->_cg85;
  8017d4:	e0bffc17 	ldw	r2,-16(fp)
  8017d8:	10801d43 	ldbu	r2,117(r2)
  8017dc:	10803fcc 	andi	r2,r2,255
  8017e0:	1080201c 	xori	r2,r2,128
  8017e4:	10bfe004 	addi	r2,r2,-128
  8017e8:	10000826 	beq	r2,zero,80180c <logic+0xc74>
  8017ec:	e0bffc17 	ldw	r2,-16(fp)
  8017f0:	10803cc3 	ldbu	r2,243(r2)
  8017f4:	10803fcc 	andi	r2,r2,255
  8017f8:	1080201c 	xori	r2,r2,128
  8017fc:	10bfe004 	addi	r2,r2,-128
  801800:	10000226 	beq	r2,zero,80180c <logic+0xc74>
  801804:	00800044 	movi	r2,1
  801808:	00000106 	br	801810 <logic+0xc78>
  80180c:	0005883a 	mov	r2,zero
  801810:	1007883a 	mov	r3,r2
  801814:	e0bffc17 	ldw	r2,-16(fp)
  801818:	10c028c5 	stb	r3,163(r2)
  d->_g96 = d->_pg105;
  80181c:	e0bffc17 	ldw	r2,-16(fp)
  801820:	10c04ac3 	ldbu	r3,299(r2)
  801824:	e0bffc17 	ldw	r2,-16(fp)
  801828:	10c02a85 	stb	r3,170(r2)
  d->_g90 = d->_pg77;
  80182c:	e0bffc17 	ldw	r2,-16(fp)
  801830:	10c04b03 	ldbu	r3,300(r2)
  801834:	e0bffc17 	ldw	r2,-16(fp)
  801838:	10c02945 	stb	r3,165(r2)
  d->_g93_e2 = !(d->_g96 || d->_g90);
  80183c:	e0bffc17 	ldw	r2,-16(fp)
  801840:	10802a83 	ldbu	r2,170(r2)
  801844:	10803fcc 	andi	r2,r2,255
  801848:	1080201c 	xori	r2,r2,128
  80184c:	10bfe004 	addi	r2,r2,-128
  801850:	1000081e 	bne	r2,zero,801874 <logic+0xcdc>
  801854:	e0bffc17 	ldw	r2,-16(fp)
  801858:	10802943 	ldbu	r2,165(r2)
  80185c:	10803fcc 	andi	r2,r2,255
  801860:	1080201c 	xori	r2,r2,128
  801864:	10bfe004 	addi	r2,r2,-128
  801868:	1000021e 	bne	r2,zero,801874 <logic+0xcdc>
  80186c:	00800044 	movi	r2,1
  801870:	00000106 	br	801878 <logic+0xce0>
  801874:	0005883a 	mov	r2,zero
  801878:	1007883a 	mov	r3,r2
  80187c:	e0bffc17 	ldw	r2,-16(fp)
  801880:	10c04605 	stb	r3,280(r2)
  d->_g96 = d->_g90 || d->_g96;
  801884:	e0bffc17 	ldw	r2,-16(fp)
  801888:	10802943 	ldbu	r2,165(r2)
  80188c:	10803fcc 	andi	r2,r2,255
  801890:	1080201c 	xori	r2,r2,128
  801894:	10bfe004 	addi	r2,r2,-128
  801898:	1000061e 	bne	r2,zero,8018b4 <logic+0xd1c>
  80189c:	e0bffc17 	ldw	r2,-16(fp)
  8018a0:	10802a83 	ldbu	r2,170(r2)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	1080201c 	xori	r2,r2,128
  8018ac:	10bfe004 	addi	r2,r2,-128
  8018b0:	10000226 	beq	r2,zero,8018bc <logic+0xd24>
  8018b4:	00800044 	movi	r2,1
  8018b8:	00000106 	br	8018c0 <logic+0xd28>
  8018bc:	0005883a 	mov	r2,zero
  8018c0:	1007883a 	mov	r3,r2
  8018c4:	e0bffc17 	ldw	r2,-16(fp)
  8018c8:	10c02a85 	stb	r3,170(r2)
  d->_cg91 = d->_region3_AEI_cAEI < d->AEI_Constraint;
  8018cc:	e0bffc17 	ldw	r2,-16(fp)
  8018d0:	14000d17 	ldw	r16,52(r2)
  8018d4:	14400e17 	ldw	r17,56(r2)
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10800417 	ldw	r2,16(r2)
  8018e0:	1009883a 	mov	r4,r2
  8018e4:	0806fd80 	call	806fd8 <__floatsidf>
  8018e8:	1009883a 	mov	r4,r2
  8018ec:	180b883a 	mov	r5,r3
  8018f0:	04800044 	movi	r18,1
  8018f4:	200d883a 	mov	r6,r4
  8018f8:	280f883a 	mov	r7,r5
  8018fc:	8009883a 	mov	r4,r16
  801900:	880b883a 	mov	r5,r17
  801904:	08065e80 	call	8065e8 <__ledf2>
  801908:	10000116 	blt	r2,zero,801910 <logic+0xd78>
  80190c:	0025883a 	mov	r18,zero
  801910:	9007883a 	mov	r3,r18
  801914:	e0bffc17 	ldw	r2,-16(fp)
  801918:	10c03dc5 	stb	r3,247(r2)
  d->_g90 = d->_g96 && d->_cg91;
  80191c:	e0bffc17 	ldw	r2,-16(fp)
  801920:	10802a83 	ldbu	r2,170(r2)
  801924:	10803fcc 	andi	r2,r2,255
  801928:	1080201c 	xori	r2,r2,128
  80192c:	10bfe004 	addi	r2,r2,-128
  801930:	10000826 	beq	r2,zero,801954 <logic+0xdbc>
  801934:	e0bffc17 	ldw	r2,-16(fp)
  801938:	10803dc3 	ldbu	r2,247(r2)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	1080201c 	xori	r2,r2,128
  801944:	10bfe004 	addi	r2,r2,-128
  801948:	10000226 	beq	r2,zero,801954 <logic+0xdbc>
  80194c:	00800044 	movi	r2,1
  801950:	00000106 	br	801958 <logic+0xdc0>
  801954:	0005883a 	mov	r2,zero
  801958:	1007883a 	mov	r3,r2
  80195c:	e0bffc17 	ldw	r2,-16(fp)
  801960:	10c02945 	stb	r3,165(r2)
  if (d->_g90) {
  801964:	e0bffc17 	ldw	r2,-16(fp)
  801968:	10802943 	ldbu	r2,165(r2)
  80196c:	10803fcc 	andi	r2,r2,255
  801970:	1080201c 	xori	r2,r2,128
  801974:	10bfe004 	addi	r2,r2,-128
  801978:	10003426 	beq	r2,zero,801a4c <logic+0xeb4>
    d->sleepT = (d->sleepT < (d->AEI_Constraint - d->_region3_AEI_cAEI)) ? d->sleepT : (d->AEI_Constraint - d->_region3_AEI_cAEI);
  80197c:	e0bffc17 	ldw	r2,-16(fp)
  801980:	14001517 	ldw	r16,84(r2)
  801984:	14401617 	ldw	r17,88(r2)
  801988:	e0bffc17 	ldw	r2,-16(fp)
  80198c:	10800417 	ldw	r2,16(r2)
  801990:	1009883a 	mov	r4,r2
  801994:	0806fd80 	call	806fd8 <__floatsidf>
  801998:	1011883a 	mov	r8,r2
  80199c:	1813883a 	mov	r9,r3
  8019a0:	e13ffc17 	ldw	r4,-16(fp)
  8019a4:	20800d17 	ldw	r2,52(r4)
  8019a8:	20c00e17 	ldw	r3,56(r4)
  8019ac:	100d883a 	mov	r6,r2
  8019b0:	180f883a 	mov	r7,r3
  8019b4:	4009883a 	mov	r4,r8
  8019b8:	480b883a 	mov	r5,r9
  8019bc:	08066dc0 	call	8066dc <__subdf3>
  8019c0:	1009883a 	mov	r4,r2
  8019c4:	180b883a 	mov	r5,r3
  8019c8:	2005883a 	mov	r2,r4
  8019cc:	2807883a 	mov	r3,r5
  8019d0:	100d883a 	mov	r6,r2
  8019d4:	180f883a 	mov	r7,r3
  8019d8:	8009883a 	mov	r4,r16
  8019dc:	880b883a 	mov	r5,r17
  8019e0:	08065e80 	call	8065e8 <__ledf2>
  8019e4:	1000040e 	bge	r2,zero,8019f8 <logic+0xe60>
  8019e8:	e13ffc17 	ldw	r4,-16(fp)
  8019ec:	20801517 	ldw	r2,84(r4)
  8019f0:	20c01617 	ldw	r3,88(r4)
  8019f4:	00001206 	br	801a40 <logic+0xea8>
  8019f8:	e0bffc17 	ldw	r2,-16(fp)
  8019fc:	10800417 	ldw	r2,16(r2)
  801a00:	1009883a 	mov	r4,r2
  801a04:	0806fd80 	call	806fd8 <__floatsidf>
  801a08:	1011883a 	mov	r8,r2
  801a0c:	1813883a 	mov	r9,r3
  801a10:	e13ffc17 	ldw	r4,-16(fp)
  801a14:	20800d17 	ldw	r2,52(r4)
  801a18:	20c00e17 	ldw	r3,56(r4)
  801a1c:	100d883a 	mov	r6,r2
  801a20:	180f883a 	mov	r7,r3
  801a24:	4009883a 	mov	r4,r8
  801a28:	480b883a 	mov	r5,r9
  801a2c:	08066dc0 	call	8066dc <__subdf3>
  801a30:	1009883a 	mov	r4,r2
  801a34:	180b883a 	mov	r5,r3
  801a38:	2005883a 	mov	r2,r4
  801a3c:	2807883a 	mov	r3,r5
  801a40:	e13ffc17 	ldw	r4,-16(fp)
  801a44:	20801515 	stw	r2,84(r4)
  801a48:	20c01615 	stw	r3,88(r4)
  }
  d->_cg92 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  801a4c:	e0bffc17 	ldw	r2,-16(fp)
  801a50:	10801a03 	ldbu	r2,104(r2)
  801a54:	10803fcc 	andi	r2,r2,255
  801a58:	1080201c 	xori	r2,r2,128
  801a5c:	10bfe004 	addi	r2,r2,-128
  801a60:	1000061e 	bne	r2,zero,801a7c <logic+0xee4>
  801a64:	e0bffc17 	ldw	r2,-16(fp)
  801a68:	10801a43 	ldbu	r2,105(r2)
  801a6c:	10803fcc 	andi	r2,r2,255
  801a70:	1080201c 	xori	r2,r2,128
  801a74:	10bfe004 	addi	r2,r2,-128
  801a78:	10000226 	beq	r2,zero,801a84 <logic+0xeec>
  801a7c:	00800044 	movi	r2,1
  801a80:	00000106 	br	801a88 <logic+0xef0>
  801a84:	0005883a 	mov	r2,zero
  801a88:	1007883a 	mov	r3,r2
  801a8c:	e0bffc17 	ldw	r2,-16(fp)
  801a90:	10c03d85 	stb	r3,246(r2)
  d->_g91 = d->_g96 && !d->_cg91;
  801a94:	e0bffc17 	ldw	r2,-16(fp)
  801a98:	10802a83 	ldbu	r2,170(r2)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1080201c 	xori	r2,r2,128
  801aa4:	10bfe004 	addi	r2,r2,-128
  801aa8:	10000826 	beq	r2,zero,801acc <logic+0xf34>
  801aac:	e0bffc17 	ldw	r2,-16(fp)
  801ab0:	10803dc3 	ldbu	r2,247(r2)
  801ab4:	10803fcc 	andi	r2,r2,255
  801ab8:	1080201c 	xori	r2,r2,128
  801abc:	10bfe004 	addi	r2,r2,-128
  801ac0:	1000021e 	bne	r2,zero,801acc <logic+0xf34>
  801ac4:	00800044 	movi	r2,1
  801ac8:	00000106 	br	801ad0 <logic+0xf38>
  801acc:	0005883a 	mov	r2,zero
  801ad0:	1007883a 	mov	r3,r2
  801ad4:	e0bffc17 	ldw	r2,-16(fp)
  801ad8:	10c02985 	stb	r3,166(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  801adc:	e0bffc17 	ldw	r2,-16(fp)
  801ae0:	10801a03 	ldbu	r2,104(r2)
  801ae4:	10803fcc 	andi	r2,r2,255
  801ae8:	1080201c 	xori	r2,r2,128
  801aec:	10bfe004 	addi	r2,r2,-128
  801af0:	1000061e 	bne	r2,zero,801b0c <logic+0xf74>
  801af4:	e0bffc17 	ldw	r2,-16(fp)
  801af8:	10801a43 	ldbu	r2,105(r2)
  801afc:	10803fcc 	andi	r2,r2,255
  801b00:	1080201c 	xori	r2,r2,128
  801b04:	10bfe004 	addi	r2,r2,-128
  801b08:	10000226 	beq	r2,zero,801b14 <logic+0xf7c>
  801b0c:	00800044 	movi	r2,1
  801b10:	00000106 	br	801b18 <logic+0xf80>
  801b14:	0005883a 	mov	r2,zero
  801b18:	1007883a 	mov	r3,r2
  801b1c:	e0bffc17 	ldw	r2,-16(fp)
  801b20:	10c03e05 	stb	r3,248(r2)
  d->_g93 = d->_g90 && d->_cg92 || d->_g91 && d->_cg94;
  801b24:	e0bffc17 	ldw	r2,-16(fp)
  801b28:	10802943 	ldbu	r2,165(r2)
  801b2c:	10803fcc 	andi	r2,r2,255
  801b30:	1080201c 	xori	r2,r2,128
  801b34:	10bfe004 	addi	r2,r2,-128
  801b38:	10000626 	beq	r2,zero,801b54 <logic+0xfbc>
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	10803d83 	ldbu	r2,246(r2)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1080201c 	xori	r2,r2,128
  801b4c:	10bfe004 	addi	r2,r2,-128
  801b50:	10000c1e 	bne	r2,zero,801b84 <logic+0xfec>
  801b54:	e0bffc17 	ldw	r2,-16(fp)
  801b58:	10802983 	ldbu	r2,166(r2)
  801b5c:	10803fcc 	andi	r2,r2,255
  801b60:	1080201c 	xori	r2,r2,128
  801b64:	10bfe004 	addi	r2,r2,-128
  801b68:	10000826 	beq	r2,zero,801b8c <logic+0xff4>
  801b6c:	e0bffc17 	ldw	r2,-16(fp)
  801b70:	10803e03 	ldbu	r2,248(r2)
  801b74:	10803fcc 	andi	r2,r2,255
  801b78:	1080201c 	xori	r2,r2,128
  801b7c:	10bfe004 	addi	r2,r2,-128
  801b80:	10000226 	beq	r2,zero,801b8c <logic+0xff4>
  801b84:	00800044 	movi	r2,1
  801b88:	00000106 	br	801b90 <logic+0xff8>
  801b8c:	0005883a 	mov	r2,zero
  801b90:	1007883a 	mov	r3,r2
  801b94:	e0bffc17 	ldw	r2,-16(fp)
  801b98:	10c02a05 	stb	r3,168(r2)
  d->_g100 = !d->_g25_e3;
  801b9c:	e0bffc17 	ldw	r2,-16(fp)
  801ba0:	10804403 	ldbu	r2,272(r2)
  801ba4:	10803fcc 	andi	r2,r2,255
  801ba8:	1080201c 	xori	r2,r2,128
  801bac:	10bfe004 	addi	r2,r2,-128
  801bb0:	1005003a 	cmpeq	r2,r2,zero
  801bb4:	1007883a 	mov	r3,r2
  801bb8:	e0bffc17 	ldw	r2,-16(fp)
  801bbc:	10c02b05 	stb	r3,172(r2)
  d->_g101 = d->_g101 || d->_g104;
  801bc0:	e0bffc17 	ldw	r2,-16(fp)
  801bc4:	10802b43 	ldbu	r2,173(r2)
  801bc8:	10803fcc 	andi	r2,r2,255
  801bcc:	1080201c 	xori	r2,r2,128
  801bd0:	10bfe004 	addi	r2,r2,-128
  801bd4:	1000061e 	bne	r2,zero,801bf0 <logic+0x1058>
  801bd8:	e0bffc17 	ldw	r2,-16(fp)
  801bdc:	10802c03 	ldbu	r2,176(r2)
  801be0:	10803fcc 	andi	r2,r2,255
  801be4:	1080201c 	xori	r2,r2,128
  801be8:	10bfe004 	addi	r2,r2,-128
  801bec:	10000226 	beq	r2,zero,801bf8 <logic+0x1060>
  801bf0:	00800044 	movi	r2,1
  801bf4:	00000106 	br	801bfc <logic+0x1064>
  801bf8:	0005883a 	mov	r2,zero
  801bfc:	1007883a 	mov	r3,r2
  801c00:	e0bffc17 	ldw	r2,-16(fp)
  801c04:	10c02b45 	stb	r3,173(r2)
  d->_g104 = (d->_g9_e1 || d->_g86) && (d->_g93_e2 || d->_g93) && (d->_g100 || d->_g101) && (d->_g86 || d->_g93 || d->_g101);
  801c08:	e0bffc17 	ldw	r2,-16(fp)
  801c0c:	10804383 	ldbu	r2,270(r2)
  801c10:	10803fcc 	andi	r2,r2,255
  801c14:	1080201c 	xori	r2,r2,128
  801c18:	10bfe004 	addi	r2,r2,-128
  801c1c:	1000061e 	bne	r2,zero,801c38 <logic+0x10a0>
  801c20:	e0bffc17 	ldw	r2,-16(fp)
  801c24:	108028c3 	ldbu	r2,163(r2)
  801c28:	10803fcc 	andi	r2,r2,255
  801c2c:	1080201c 	xori	r2,r2,128
  801c30:	10bfe004 	addi	r2,r2,-128
  801c34:	10002c26 	beq	r2,zero,801ce8 <logic+0x1150>
  801c38:	e0bffc17 	ldw	r2,-16(fp)
  801c3c:	10804603 	ldbu	r2,280(r2)
  801c40:	10803fcc 	andi	r2,r2,255
  801c44:	1080201c 	xori	r2,r2,128
  801c48:	10bfe004 	addi	r2,r2,-128
  801c4c:	1000061e 	bne	r2,zero,801c68 <logic+0x10d0>
  801c50:	e0bffc17 	ldw	r2,-16(fp)
  801c54:	10802a03 	ldbu	r2,168(r2)
  801c58:	10803fcc 	andi	r2,r2,255
  801c5c:	1080201c 	xori	r2,r2,128
  801c60:	10bfe004 	addi	r2,r2,-128
  801c64:	10002026 	beq	r2,zero,801ce8 <logic+0x1150>
  801c68:	e0bffc17 	ldw	r2,-16(fp)
  801c6c:	10802b03 	ldbu	r2,172(r2)
  801c70:	10803fcc 	andi	r2,r2,255
  801c74:	1080201c 	xori	r2,r2,128
  801c78:	10bfe004 	addi	r2,r2,-128
  801c7c:	1000061e 	bne	r2,zero,801c98 <logic+0x1100>
  801c80:	e0bffc17 	ldw	r2,-16(fp)
  801c84:	10802b43 	ldbu	r2,173(r2)
  801c88:	10803fcc 	andi	r2,r2,255
  801c8c:	1080201c 	xori	r2,r2,128
  801c90:	10bfe004 	addi	r2,r2,-128
  801c94:	10001426 	beq	r2,zero,801ce8 <logic+0x1150>
  801c98:	e0bffc17 	ldw	r2,-16(fp)
  801c9c:	108028c3 	ldbu	r2,163(r2)
  801ca0:	10803fcc 	andi	r2,r2,255
  801ca4:	1080201c 	xori	r2,r2,128
  801ca8:	10bfe004 	addi	r2,r2,-128
  801cac:	10000c1e 	bne	r2,zero,801ce0 <logic+0x1148>
  801cb0:	e0bffc17 	ldw	r2,-16(fp)
  801cb4:	10802a03 	ldbu	r2,168(r2)
  801cb8:	10803fcc 	andi	r2,r2,255
  801cbc:	1080201c 	xori	r2,r2,128
  801cc0:	10bfe004 	addi	r2,r2,-128
  801cc4:	1000061e 	bne	r2,zero,801ce0 <logic+0x1148>
  801cc8:	e0bffc17 	ldw	r2,-16(fp)
  801ccc:	10802b43 	ldbu	r2,173(r2)
  801cd0:	10803fcc 	andi	r2,r2,255
  801cd4:	1080201c 	xori	r2,r2,128
  801cd8:	10bfe004 	addi	r2,r2,-128
  801cdc:	10000226 	beq	r2,zero,801ce8 <logic+0x1150>
  801ce0:	00800044 	movi	r2,1
  801ce4:	00000106 	br	801cec <logic+0x1154>
  801ce8:	0005883a 	mov	r2,zero
  801cec:	1007883a 	mov	r3,r2
  801cf0:	e0bffc17 	ldw	r2,-16(fp)
  801cf4:	10c02c05 	stb	r3,176(r2)
  d->_cg105 = d->_Pacemaker_local__Atrig4;
  801cf8:	e0bffc17 	ldw	r2,-16(fp)
  801cfc:	10c01a03 	ldbu	r3,104(r2)
  801d00:	e0bffc17 	ldw	r2,-16(fp)
  801d04:	10c03c05 	stb	r3,240(r2)
  d->_g102 = d->_g104 && d->_cg105;
  801d08:	e0bffc17 	ldw	r2,-16(fp)
  801d0c:	10802c03 	ldbu	r2,176(r2)
  801d10:	10803fcc 	andi	r2,r2,255
  801d14:	1080201c 	xori	r2,r2,128
  801d18:	10bfe004 	addi	r2,r2,-128
  801d1c:	10000826 	beq	r2,zero,801d40 <logic+0x11a8>
  801d20:	e0bffc17 	ldw	r2,-16(fp)
  801d24:	10803c03 	ldbu	r2,240(r2)
  801d28:	10803fcc 	andi	r2,r2,255
  801d2c:	1080201c 	xori	r2,r2,128
  801d30:	10bfe004 	addi	r2,r2,-128
  801d34:	10000226 	beq	r2,zero,801d40 <logic+0x11a8>
  801d38:	00800044 	movi	r2,1
  801d3c:	00000106 	br	801d44 <logic+0x11ac>
  801d40:	0005883a 	mov	r2,zero
  801d44:	1007883a 	mov	r3,r2
  801d48:	e0bffc17 	ldw	r2,-16(fp)
  801d4c:	10c02b85 	stb	r3,174(r2)
  if (d->_g102) {
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	10802b83 	ldbu	r2,174(r2)
  801d58:	10803fcc 	andi	r2,r2,255
  801d5c:	1080201c 	xori	r2,r2,128
  801d60:	10bfe004 	addi	r2,r2,-128
  801d64:	10000626 	beq	r2,zero,801d80 <logic+0x11e8>
    d->AP |= 1;
  801d68:	e0bffc17 	ldw	r2,-16(fp)
  801d6c:	10801703 	ldbu	r2,92(r2)
  801d70:	10800054 	ori	r2,r2,1
  801d74:	1007883a 	mov	r3,r2
  801d78:	e0bffc17 	ldw	r2,-16(fp)
  801d7c:	10c01705 	stb	r3,92(r2)
  }
  d->_g102_e3 = d->_pg86;
  801d80:	e0bffc17 	ldw	r2,-16(fp)
  801d84:	10c04b43 	ldbu	r3,301(r2)
  801d88:	e0bffc17 	ldw	r2,-16(fp)
  801d8c:	10c04645 	stb	r3,281(r2)
  d->_cg4 = (d->AS || d->AP) && !d->PVARP;
  801d90:	e0bffc17 	ldw	r2,-16(fp)
  801d94:	10800003 	ldbu	r2,0(r2)
  801d98:	10803fcc 	andi	r2,r2,255
  801d9c:	1080201c 	xori	r2,r2,128
  801da0:	10bfe004 	addi	r2,r2,-128
  801da4:	1000061e 	bne	r2,zero,801dc0 <logic+0x1228>
  801da8:	e0bffc17 	ldw	r2,-16(fp)
  801dac:	10801703 	ldbu	r2,92(r2)
  801db0:	10803fcc 	andi	r2,r2,255
  801db4:	1080201c 	xori	r2,r2,128
  801db8:	10bfe004 	addi	r2,r2,-128
  801dbc:	10000826 	beq	r2,zero,801de0 <logic+0x1248>
  801dc0:	e0bffc17 	ldw	r2,-16(fp)
  801dc4:	108017c3 	ldbu	r2,95(r2)
  801dc8:	10803fcc 	andi	r2,r2,255
  801dcc:	1080201c 	xori	r2,r2,128
  801dd0:	10bfe004 	addi	r2,r2,-128
  801dd4:	1000021e 	bne	r2,zero,801de0 <logic+0x1248>
  801dd8:	00800044 	movi	r2,1
  801ddc:	00000106 	br	801de4 <logic+0x124c>
  801de0:	0005883a 	mov	r2,zero
  801de4:	1007883a 	mov	r3,r2
  801de8:	e0bffc17 	ldw	r2,-16(fp)
  801dec:	10c03645 	stb	r3,217(r2)
  d->_g86 = d->_GO || d->_g16_e2 || d->_g24 && !d->_cg28 || d->_g102_e3 && !d->_cg4;
  801df0:	e0bffc17 	ldw	r2,-16(fp)
  801df4:	108035c3 	ldbu	r2,215(r2)
  801df8:	10803fcc 	andi	r2,r2,255
  801dfc:	1080201c 	xori	r2,r2,128
  801e00:	10bfe004 	addi	r2,r2,-128
  801e04:	10001e1e 	bne	r2,zero,801e80 <logic+0x12e8>
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	108043c3 	ldbu	r2,271(r2)
  801e10:	10803fcc 	andi	r2,r2,255
  801e14:	1080201c 	xori	r2,r2,128
  801e18:	10bfe004 	addi	r2,r2,-128
  801e1c:	1000181e 	bne	r2,zero,801e80 <logic+0x12e8>
  801e20:	e0bffc17 	ldw	r2,-16(fp)
  801e24:	10801e83 	ldbu	r2,122(r2)
  801e28:	10803fcc 	andi	r2,r2,255
  801e2c:	1080201c 	xori	r2,r2,128
  801e30:	10bfe004 	addi	r2,r2,-128
  801e34:	10000626 	beq	r2,zero,801e50 <logic+0x12b8>
  801e38:	e0bffc17 	ldw	r2,-16(fp)
  801e3c:	10803603 	ldbu	r2,216(r2)
  801e40:	10803fcc 	andi	r2,r2,255
  801e44:	1080201c 	xori	r2,r2,128
  801e48:	10bfe004 	addi	r2,r2,-128
  801e4c:	10000c26 	beq	r2,zero,801e80 <logic+0x12e8>
  801e50:	e0bffc17 	ldw	r2,-16(fp)
  801e54:	10804643 	ldbu	r2,281(r2)
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	1080201c 	xori	r2,r2,128
  801e60:	10bfe004 	addi	r2,r2,-128
  801e64:	10000826 	beq	r2,zero,801e88 <logic+0x12f0>
  801e68:	e0bffc17 	ldw	r2,-16(fp)
  801e6c:	10803643 	ldbu	r2,217(r2)
  801e70:	10803fcc 	andi	r2,r2,255
  801e74:	1080201c 	xori	r2,r2,128
  801e78:	10bfe004 	addi	r2,r2,-128
  801e7c:	1000021e 	bne	r2,zero,801e88 <logic+0x12f0>
  801e80:	00800044 	movi	r2,1
  801e84:	00000106 	br	801e8c <logic+0x12f4>
  801e88:	0005883a 	mov	r2,zero
  801e8c:	1007883a 	mov	r3,r2
  801e90:	e0bffc17 	ldw	r2,-16(fp)
  801e94:	10c028c5 	stb	r3,163(r2)
  d->_g93_e2 = d->_g102_e3 && d->_cg4;
  801e98:	e0bffc17 	ldw	r2,-16(fp)
  801e9c:	10804643 	ldbu	r2,281(r2)
  801ea0:	10803fcc 	andi	r2,r2,255
  801ea4:	1080201c 	xori	r2,r2,128
  801ea8:	10bfe004 	addi	r2,r2,-128
  801eac:	10000826 	beq	r2,zero,801ed0 <logic+0x1338>
  801eb0:	e0bffc17 	ldw	r2,-16(fp)
  801eb4:	10803643 	ldbu	r2,217(r2)
  801eb8:	10803fcc 	andi	r2,r2,255
  801ebc:	1080201c 	xori	r2,r2,128
  801ec0:	10bfe004 	addi	r2,r2,-128
  801ec4:	10000226 	beq	r2,zero,801ed0 <logic+0x1338>
  801ec8:	00800044 	movi	r2,1
  801ecc:	00000106 	br	801ed4 <logic+0x133c>
  801ed0:	0005883a 	mov	r2,zero
  801ed4:	1007883a 	mov	r3,r2
  801ed8:	e0bffc17 	ldw	r2,-16(fp)
  801edc:	10c04605 	stb	r3,280(r2)
  if (d->_g93_e2) {
  801ee0:	e0bffc17 	ldw	r2,-16(fp)
  801ee4:	10804603 	ldbu	r2,280(r2)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1080201c 	xori	r2,r2,128
  801ef0:	10bfe004 	addi	r2,r2,-128
  801ef4:	10000726 	beq	r2,zero,801f14 <logic+0x137c>
    d->_region0_AVI_cAVI = 0;
  801ef8:	e0bffc17 	ldw	r2,-16(fp)
  801efc:	10000715 	stw	zero,28(r2)
  801f00:	10000815 	stw	zero,32(r2)
    d->_Pacemaker_local__Atrig = 0;
  801f04:	e0bffc17 	ldw	r2,-16(fp)
  801f08:	10001905 	stb	zero,100(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  801f0c:	e0bffc17 	ldw	r2,-16(fp)
  801f10:	10001945 	stb	zero,101(r2)
  }
  d->_cg6 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801f14:	e0bffc17 	ldw	r2,-16(fp)
  801f18:	10801903 	ldbu	r2,100(r2)
  801f1c:	10803fcc 	andi	r2,r2,255
  801f20:	1080201c 	xori	r2,r2,128
  801f24:	10bfe004 	addi	r2,r2,-128
  801f28:	1000061e 	bne	r2,zero,801f44 <logic+0x13ac>
  801f2c:	e0bffc17 	ldw	r2,-16(fp)
  801f30:	10801943 	ldbu	r2,101(r2)
  801f34:	10803fcc 	andi	r2,r2,255
  801f38:	1080201c 	xori	r2,r2,128
  801f3c:	10bfe004 	addi	r2,r2,-128
  801f40:	10000226 	beq	r2,zero,801f4c <logic+0x13b4>
  801f44:	00800044 	movi	r2,1
  801f48:	00000106 	br	801f50 <logic+0x13b8>
  801f4c:	0005883a 	mov	r2,zero
  801f50:	1007883a 	mov	r3,r2
  801f54:	e0bffc17 	ldw	r2,-16(fp)
  801f58:	10c03685 	stb	r3,218(r2)
  d->_g93 = d->_g93_e2 && !d->_cg6 || d->_g8 && !d->_cg8;
  801f5c:	e0bffc17 	ldw	r2,-16(fp)
  801f60:	10804603 	ldbu	r2,280(r2)
  801f64:	10803fcc 	andi	r2,r2,255
  801f68:	1080201c 	xori	r2,r2,128
  801f6c:	10bfe004 	addi	r2,r2,-128
  801f70:	10000626 	beq	r2,zero,801f8c <logic+0x13f4>
  801f74:	e0bffc17 	ldw	r2,-16(fp)
  801f78:	10803683 	ldbu	r2,218(r2)
  801f7c:	10803fcc 	andi	r2,r2,255
  801f80:	1080201c 	xori	r2,r2,128
  801f84:	10bfe004 	addi	r2,r2,-128
  801f88:	10000c26 	beq	r2,zero,801fbc <logic+0x1424>
  801f8c:	e0bffc17 	ldw	r2,-16(fp)
  801f90:	10801bc3 	ldbu	r2,111(r2)
  801f94:	10803fcc 	andi	r2,r2,255
  801f98:	1080201c 	xori	r2,r2,128
  801f9c:	10bfe004 	addi	r2,r2,-128
  801fa0:	10000826 	beq	r2,zero,801fc4 <logic+0x142c>
  801fa4:	e0bffc17 	ldw	r2,-16(fp)
  801fa8:	108036c3 	ldbu	r2,219(r2)
  801fac:	10803fcc 	andi	r2,r2,255
  801fb0:	1080201c 	xori	r2,r2,128
  801fb4:	10bfe004 	addi	r2,r2,-128
  801fb8:	1000021e 	bne	r2,zero,801fc4 <logic+0x142c>
  801fbc:	00800044 	movi	r2,1
  801fc0:	00000106 	br	801fc8 <logic+0x1430>
  801fc4:	0005883a 	mov	r2,zero
  801fc8:	1007883a 	mov	r3,r2
  801fcc:	e0bffc17 	ldw	r2,-16(fp)
  801fd0:	10c02a05 	stb	r3,168(r2)
  d->_cg10 = d->_region0_AVI_cAVI < d->AVI_Constraint;
  801fd4:	e0bffc17 	ldw	r2,-16(fp)
  801fd8:	14000717 	ldw	r16,28(r2)
  801fdc:	14400817 	ldw	r17,32(r2)
  801fe0:	e0bffc17 	ldw	r2,-16(fp)
  801fe4:	10800117 	ldw	r2,4(r2)
  801fe8:	1009883a 	mov	r4,r2
  801fec:	0806fd80 	call	806fd8 <__floatsidf>
  801ff0:	1009883a 	mov	r4,r2
  801ff4:	180b883a 	mov	r5,r3
  801ff8:	04800044 	movi	r18,1
  801ffc:	200d883a 	mov	r6,r4
  802000:	280f883a 	mov	r7,r5
  802004:	8009883a 	mov	r4,r16
  802008:	880b883a 	mov	r5,r17
  80200c:	08065e80 	call	8065e8 <__ledf2>
  802010:	10000116 	blt	r2,zero,802018 <logic+0x1480>
  802014:	0025883a 	mov	r18,zero
  802018:	9007883a 	mov	r3,r18
  80201c:	e0bffc17 	ldw	r2,-16(fp)
  802020:	10c03705 	stb	r3,220(r2)
  d->_g86_e1 = d->_g93_e2 && d->_cg10;
  802024:	e0bffc17 	ldw	r2,-16(fp)
  802028:	10804603 	ldbu	r2,280(r2)
  80202c:	10803fcc 	andi	r2,r2,255
  802030:	1080201c 	xori	r2,r2,128
  802034:	10bfe004 	addi	r2,r2,-128
  802038:	10000826 	beq	r2,zero,80205c <logic+0x14c4>
  80203c:	e0bffc17 	ldw	r2,-16(fp)
  802040:	10803703 	ldbu	r2,220(r2)
  802044:	10803fcc 	andi	r2,r2,255
  802048:	1080201c 	xori	r2,r2,128
  80204c:	10bfe004 	addi	r2,r2,-128
  802050:	10000226 	beq	r2,zero,80205c <logic+0x14c4>
  802054:	00800044 	movi	r2,1
  802058:	00000106 	br	802060 <logic+0x14c8>
  80205c:	0005883a 	mov	r2,zero
  802060:	1007883a 	mov	r3,r2
  802064:	e0bffc17 	ldw	r2,-16(fp)
  802068:	10c045c5 	stb	r3,279(r2)
  if (d->_g86_e1) {
  80206c:	e0bffc17 	ldw	r2,-16(fp)
  802070:	108045c3 	ldbu	r2,279(r2)
  802074:	10803fcc 	andi	r2,r2,255
  802078:	1080201c 	xori	r2,r2,128
  80207c:	10bfe004 	addi	r2,r2,-128
  802080:	10003426 	beq	r2,zero,802154 <logic+0x15bc>
    d->sleepT = (d->sleepT < (d->AVI_Constraint - d->_region0_AVI_cAVI)) ? d->sleepT : (d->AVI_Constraint - d->_region0_AVI_cAVI);
  802084:	e0bffc17 	ldw	r2,-16(fp)
  802088:	14001517 	ldw	r16,84(r2)
  80208c:	14401617 	ldw	r17,88(r2)
  802090:	e0bffc17 	ldw	r2,-16(fp)
  802094:	10800117 	ldw	r2,4(r2)
  802098:	1009883a 	mov	r4,r2
  80209c:	0806fd80 	call	806fd8 <__floatsidf>
  8020a0:	1011883a 	mov	r8,r2
  8020a4:	1813883a 	mov	r9,r3
  8020a8:	e13ffc17 	ldw	r4,-16(fp)
  8020ac:	20800717 	ldw	r2,28(r4)
  8020b0:	20c00817 	ldw	r3,32(r4)
  8020b4:	100d883a 	mov	r6,r2
  8020b8:	180f883a 	mov	r7,r3
  8020bc:	4009883a 	mov	r4,r8
  8020c0:	480b883a 	mov	r5,r9
  8020c4:	08066dc0 	call	8066dc <__subdf3>
  8020c8:	1009883a 	mov	r4,r2
  8020cc:	180b883a 	mov	r5,r3
  8020d0:	2005883a 	mov	r2,r4
  8020d4:	2807883a 	mov	r3,r5
  8020d8:	100d883a 	mov	r6,r2
  8020dc:	180f883a 	mov	r7,r3
  8020e0:	8009883a 	mov	r4,r16
  8020e4:	880b883a 	mov	r5,r17
  8020e8:	08065e80 	call	8065e8 <__ledf2>
  8020ec:	1000040e 	bge	r2,zero,802100 <logic+0x1568>
  8020f0:	e13ffc17 	ldw	r4,-16(fp)
  8020f4:	20801517 	ldw	r2,84(r4)
  8020f8:	20c01617 	ldw	r3,88(r4)
  8020fc:	00001206 	br	802148 <logic+0x15b0>
  802100:	e0bffc17 	ldw	r2,-16(fp)
  802104:	10800117 	ldw	r2,4(r2)
  802108:	1009883a 	mov	r4,r2
  80210c:	0806fd80 	call	806fd8 <__floatsidf>
  802110:	1011883a 	mov	r8,r2
  802114:	1813883a 	mov	r9,r3
  802118:	e13ffc17 	ldw	r4,-16(fp)
  80211c:	20800717 	ldw	r2,28(r4)
  802120:	20c00817 	ldw	r3,32(r4)
  802124:	100d883a 	mov	r6,r2
  802128:	180f883a 	mov	r7,r3
  80212c:	4009883a 	mov	r4,r8
  802130:	480b883a 	mov	r5,r9
  802134:	08066dc0 	call	8066dc <__subdf3>
  802138:	1009883a 	mov	r4,r2
  80213c:	180b883a 	mov	r5,r3
  802140:	2005883a 	mov	r2,r4
  802144:	2807883a 	mov	r3,r5
  802148:	e13ffc17 	ldw	r4,-16(fp)
  80214c:	20801515 	stw	r2,84(r4)
  802150:	20c01615 	stw	r3,88(r4)
  }
  d->_cg11 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802154:	e0bffc17 	ldw	r2,-16(fp)
  802158:	10801903 	ldbu	r2,100(r2)
  80215c:	10803fcc 	andi	r2,r2,255
  802160:	1080201c 	xori	r2,r2,128
  802164:	10bfe004 	addi	r2,r2,-128
  802168:	1000061e 	bne	r2,zero,802184 <logic+0x15ec>
  80216c:	e0bffc17 	ldw	r2,-16(fp)
  802170:	10801943 	ldbu	r2,101(r2)
  802174:	10803fcc 	andi	r2,r2,255
  802178:	1080201c 	xori	r2,r2,128
  80217c:	10bfe004 	addi	r2,r2,-128
  802180:	10000226 	beq	r2,zero,80218c <logic+0x15f4>
  802184:	00800044 	movi	r2,1
  802188:	00000106 	br	802190 <logic+0x15f8>
  80218c:	0005883a 	mov	r2,zero
  802190:	1007883a 	mov	r3,r2
  802194:	e0bffc17 	ldw	r2,-16(fp)
  802198:	10c03745 	stb	r3,221(r2)
  d->_g28 = d->_g86_e1 && !d->_cg11 || d->_g13 && !d->_cg15;
  80219c:	e0bffc17 	ldw	r2,-16(fp)
  8021a0:	108045c3 	ldbu	r2,279(r2)
  8021a4:	10803fcc 	andi	r2,r2,255
  8021a8:	1080201c 	xori	r2,r2,128
  8021ac:	10bfe004 	addi	r2,r2,-128
  8021b0:	10000626 	beq	r2,zero,8021cc <logic+0x1634>
  8021b4:	e0bffc17 	ldw	r2,-16(fp)
  8021b8:	10803743 	ldbu	r2,221(r2)
  8021bc:	10803fcc 	andi	r2,r2,255
  8021c0:	1080201c 	xori	r2,r2,128
  8021c4:	10bfe004 	addi	r2,r2,-128
  8021c8:	10000c26 	beq	r2,zero,8021fc <logic+0x1664>
  8021cc:	e0bffc17 	ldw	r2,-16(fp)
  8021d0:	10801c83 	ldbu	r2,114(r2)
  8021d4:	10803fcc 	andi	r2,r2,255
  8021d8:	1080201c 	xori	r2,r2,128
  8021dc:	10bfe004 	addi	r2,r2,-128
  8021e0:	10000826 	beq	r2,zero,802204 <logic+0x166c>
  8021e4:	e0bffc17 	ldw	r2,-16(fp)
  8021e8:	10803783 	ldbu	r2,222(r2)
  8021ec:	10803fcc 	andi	r2,r2,255
  8021f0:	1080201c 	xori	r2,r2,128
  8021f4:	10bfe004 	addi	r2,r2,-128
  8021f8:	1000021e 	bne	r2,zero,802204 <logic+0x166c>
  8021fc:	00800044 	movi	r2,1
  802200:	00000106 	br	802208 <logic+0x1670>
  802204:	0005883a 	mov	r2,zero
  802208:	1007883a 	mov	r3,r2
  80220c:	e0bffc17 	ldw	r2,-16(fp)
  802210:	10c01f85 	stb	r3,126(r2)
  d->_g29 = d->_g93_e2 && !d->_cg10;
  802214:	e0bffc17 	ldw	r2,-16(fp)
  802218:	10804603 	ldbu	r2,280(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	10000826 	beq	r2,zero,80224c <logic+0x16b4>
  80222c:	e0bffc17 	ldw	r2,-16(fp)
  802230:	10803703 	ldbu	r2,220(r2)
  802234:	10803fcc 	andi	r2,r2,255
  802238:	1080201c 	xori	r2,r2,128
  80223c:	10bfe004 	addi	r2,r2,-128
  802240:	1000021e 	bne	r2,zero,80224c <logic+0x16b4>
  802244:	00800044 	movi	r2,1
  802248:	00000106 	br	802250 <logic+0x16b8>
  80224c:	0005883a 	mov	r2,zero
  802250:	1007883a 	mov	r3,r2
  802254:	e0bffc17 	ldw	r2,-16(fp)
  802258:	10c01fc5 	stb	r3,127(r2)
  d->_cg20 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  80225c:	e0bffc17 	ldw	r2,-16(fp)
  802260:	10801903 	ldbu	r2,100(r2)
  802264:	10803fcc 	andi	r2,r2,255
  802268:	1080201c 	xori	r2,r2,128
  80226c:	10bfe004 	addi	r2,r2,-128
  802270:	1000061e 	bne	r2,zero,80228c <logic+0x16f4>
  802274:	e0bffc17 	ldw	r2,-16(fp)
  802278:	10801943 	ldbu	r2,101(r2)
  80227c:	10803fcc 	andi	r2,r2,255
  802280:	1080201c 	xori	r2,r2,128
  802284:	10bfe004 	addi	r2,r2,-128
  802288:	10000226 	beq	r2,zero,802294 <logic+0x16fc>
  80228c:	00800044 	movi	r2,1
  802290:	00000106 	br	802298 <logic+0x1700>
  802294:	0005883a 	mov	r2,zero
  802298:	1007883a 	mov	r3,r2
  80229c:	e0bffc17 	ldw	r2,-16(fp)
  8022a0:	10c03845 	stb	r3,225(r2)
  d->_g4 = d->_g14 && !d->_cg17 || d->_g29 && !d->_cg20;
  8022a4:	e0bffc17 	ldw	r2,-16(fp)
  8022a8:	10801cc3 	ldbu	r2,115(r2)
  8022ac:	10803fcc 	andi	r2,r2,255
  8022b0:	1080201c 	xori	r2,r2,128
  8022b4:	10bfe004 	addi	r2,r2,-128
  8022b8:	10000626 	beq	r2,zero,8022d4 <logic+0x173c>
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	10803803 	ldbu	r2,224(r2)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	10000c26 	beq	r2,zero,802304 <logic+0x176c>
  8022d4:	e0bffc17 	ldw	r2,-16(fp)
  8022d8:	10801fc3 	ldbu	r2,127(r2)
  8022dc:	10803fcc 	andi	r2,r2,255
  8022e0:	1080201c 	xori	r2,r2,128
  8022e4:	10bfe004 	addi	r2,r2,-128
  8022e8:	10000826 	beq	r2,zero,80230c <logic+0x1774>
  8022ec:	e0bffc17 	ldw	r2,-16(fp)
  8022f0:	10803843 	ldbu	r2,225(r2)
  8022f4:	10803fcc 	andi	r2,r2,255
  8022f8:	1080201c 	xori	r2,r2,128
  8022fc:	10bfe004 	addi	r2,r2,-128
  802300:	1000021e 	bne	r2,zero,80230c <logic+0x1774>
  802304:	00800044 	movi	r2,1
  802308:	00000106 	br	802310 <logic+0x1778>
  80230c:	0005883a 	mov	r2,zero
  802310:	1007883a 	mov	r3,r2
  802314:	e0bffc17 	ldw	r2,-16(fp)
  802318:	10c01b45 	stb	r3,109(r2)
  d->_g8 = d->_g93_e2 || d->_g26 && !d->VS;
  80231c:	e0bffc17 	ldw	r2,-16(fp)
  802320:	10804603 	ldbu	r2,280(r2)
  802324:	10803fcc 	andi	r2,r2,255
  802328:	1080201c 	xori	r2,r2,128
  80232c:	10bfe004 	addi	r2,r2,-128
  802330:	10000c1e 	bne	r2,zero,802364 <logic+0x17cc>
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10801f03 	ldbu	r2,124(r2)
  80233c:	10803fcc 	andi	r2,r2,255
  802340:	1080201c 	xori	r2,r2,128
  802344:	10bfe004 	addi	r2,r2,-128
  802348:	10000826 	beq	r2,zero,80236c <logic+0x17d4>
  80234c:	e0bffc17 	ldw	r2,-16(fp)
  802350:	10800043 	ldbu	r2,1(r2)
  802354:	10803fcc 	andi	r2,r2,255
  802358:	1080201c 	xori	r2,r2,128
  80235c:	10bfe004 	addi	r2,r2,-128
  802360:	1000021e 	bne	r2,zero,80236c <logic+0x17d4>
  802364:	00800044 	movi	r2,1
  802368:	00000106 	br	802370 <logic+0x17d8>
  80236c:	0005883a 	mov	r2,zero
  802370:	1007883a 	mov	r3,r2
  802374:	e0bffc17 	ldw	r2,-16(fp)
  802378:	10c01bc5 	stb	r3,111(r2)
  d->_g15 = d->_pg149;
  80237c:	e0bffc17 	ldw	r2,-16(fp)
  802380:	10c04b83 	ldbu	r3,302(r2)
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	10c01d05 	stb	r3,116(r2)
  if (d->_g15) {
  80238c:	e0bffc17 	ldw	r2,-16(fp)
  802390:	10801d03 	ldbu	r2,116(r2)
  802394:	10803fcc 	andi	r2,r2,255
  802398:	1080201c 	xori	r2,r2,128
  80239c:	10bfe004 	addi	r2,r2,-128
  8023a0:	10001226 	beq	r2,zero,8023ec <logic+0x1854>
    d->_region1_PVARP_cPVARP += d->deltaT;
  8023a4:	e13ffc17 	ldw	r4,-16(fp)
  8023a8:	20800917 	ldw	r2,36(r4)
  8023ac:	20c00a17 	ldw	r3,40(r4)
  8023b0:	e1bffc17 	ldw	r6,-16(fp)
  8023b4:	31001317 	ldw	r4,76(r6)
  8023b8:	31401417 	ldw	r5,80(r6)
  8023bc:	200d883a 	mov	r6,r4
  8023c0:	280f883a 	mov	r7,r5
  8023c4:	1009883a 	mov	r4,r2
  8023c8:	180b883a 	mov	r5,r3
  8023cc:	0805c600 	call	805c60 <__adddf3>
  8023d0:	1009883a 	mov	r4,r2
  8023d4:	180b883a 	mov	r5,r3
  8023d8:	2005883a 	mov	r2,r4
  8023dc:	2807883a 	mov	r3,r5
  8023e0:	e13ffc17 	ldw	r4,-16(fp)
  8023e4:	20800915 	stw	r2,36(r4)
  8023e8:	20c00a15 	stw	r3,40(r4)
  }
  d->_g11 = d->_pg42;
  8023ec:	e0bffc17 	ldw	r2,-16(fp)
  8023f0:	10c04bc3 	ldbu	r3,303(r2)
  8023f4:	e0bffc17 	ldw	r2,-16(fp)
  8023f8:	10c01c45 	stb	r3,113(r2)
  d->_cg51 = d->_region1_PVARP_cPVARP >= d->PVARP_Constraint;
  8023fc:	e0bffc17 	ldw	r2,-16(fp)
  802400:	14000917 	ldw	r16,36(r2)
  802404:	14400a17 	ldw	r17,40(r2)
  802408:	e0bffc17 	ldw	r2,-16(fp)
  80240c:	10800217 	ldw	r2,8(r2)
  802410:	1009883a 	mov	r4,r2
  802414:	0806fd80 	call	806fd8 <__floatsidf>
  802418:	1009883a 	mov	r4,r2
  80241c:	180b883a 	mov	r5,r3
  802420:	04800044 	movi	r18,1
  802424:	200d883a 	mov	r6,r4
  802428:	280f883a 	mov	r7,r5
  80242c:	8009883a 	mov	r4,r16
  802430:	880b883a 	mov	r5,r17
  802434:	080650c0 	call	80650c <__gedf2>
  802438:	1000010e 	bge	r2,zero,802440 <logic+0x18a8>
  80243c:	0025883a 	mov	r18,zero
  802440:	9007883a 	mov	r3,r18
  802444:	e0bffc17 	ldw	r2,-16(fp)
  802448:	10c03a45 	stb	r3,233(r2)
  d->_g20 = d->_g11 && d->_cg51;
  80244c:	e0bffc17 	ldw	r2,-16(fp)
  802450:	10801c43 	ldbu	r2,113(r2)
  802454:	10803fcc 	andi	r2,r2,255
  802458:	1080201c 	xori	r2,r2,128
  80245c:	10bfe004 	addi	r2,r2,-128
  802460:	10000826 	beq	r2,zero,802484 <logic+0x18ec>
  802464:	e0bffc17 	ldw	r2,-16(fp)
  802468:	10803a43 	ldbu	r2,233(r2)
  80246c:	10803fcc 	andi	r2,r2,255
  802470:	1080201c 	xori	r2,r2,128
  802474:	10bfe004 	addi	r2,r2,-128
  802478:	10000226 	beq	r2,zero,802484 <logic+0x18ec>
  80247c:	00800044 	movi	r2,1
  802480:	00000106 	br	802488 <logic+0x18f0>
  802484:	0005883a 	mov	r2,zero
  802488:	1007883a 	mov	r3,r2
  80248c:	e0bffc17 	ldw	r2,-16(fp)
  802490:	10c01e05 	stb	r3,120(r2)
  if (d->_g20) {
  802494:	e0bffc17 	ldw	r2,-16(fp)
  802498:	10801e03 	ldbu	r2,120(r2)
  80249c:	10803fcc 	andi	r2,r2,255
  8024a0:	1080201c 	xori	r2,r2,128
  8024a4:	10bfe004 	addi	r2,r2,-128
  8024a8:	10000326 	beq	r2,zero,8024b8 <logic+0x1920>
    d->_Pacemaker_local__Atrig2 = 1;
  8024ac:	e0bffc17 	ldw	r2,-16(fp)
  8024b0:	00c00044 	movi	r3,1
  8024b4:	10c01985 	stb	r3,102(r2)
  }
  d->_g17 = d->_pg92;
  8024b8:	e0bffc17 	ldw	r2,-16(fp)
  8024bc:	10c04c03 	ldbu	r3,304(r2)
  8024c0:	e0bffc17 	ldw	r2,-16(fp)
  8024c4:	10c01d85 	stb	r3,118(r2)
  d->_g26 = !d->_g17;
  8024c8:	e0bffc17 	ldw	r2,-16(fp)
  8024cc:	10801d83 	ldbu	r2,118(r2)
  8024d0:	10803fcc 	andi	r2,r2,255
  8024d4:	1080201c 	xori	r2,r2,128
  8024d8:	10bfe004 	addi	r2,r2,-128
  8024dc:	1005003a 	cmpeq	r2,r2,zero
  8024e0:	1007883a 	mov	r3,r2
  8024e4:	e0bffc17 	ldw	r2,-16(fp)
  8024e8:	10c01f05 	stb	r3,124(r2)
  if (d->_g17) {
  8024ec:	e0bffc17 	ldw	r2,-16(fp)
  8024f0:	10801d83 	ldbu	r2,118(r2)
  8024f4:	10803fcc 	andi	r2,r2,255
  8024f8:	1080201c 	xori	r2,r2,128
  8024fc:	10bfe004 	addi	r2,r2,-128
  802500:	10000626 	beq	r2,zero,80251c <logic+0x1984>
    d->LRI |= 1;
  802504:	e0bffc17 	ldw	r2,-16(fp)
  802508:	10801883 	ldbu	r2,98(r2)
  80250c:	10800054 	ori	r2,r2,1
  802510:	1007883a 	mov	r3,r2
  802514:	e0bffc17 	ldw	r2,-16(fp)
  802518:	10c01885 	stb	r3,98(r2)
  }
  d->_g5 = d->_pg53;
  80251c:	e0bffc17 	ldw	r2,-16(fp)
  802520:	10c04c43 	ldbu	r3,305(r2)
  802524:	e0bffc17 	ldw	r2,-16(fp)
  802528:	10c01b85 	stb	r3,110(r2)
  if (d->_g5) {
  80252c:	e0bffc17 	ldw	r2,-16(fp)
  802530:	10801b83 	ldbu	r2,110(r2)
  802534:	10803fcc 	andi	r2,r2,255
  802538:	1080201c 	xori	r2,r2,128
  80253c:	10bfe004 	addi	r2,r2,-128
  802540:	10000626 	beq	r2,zero,80255c <logic+0x19c4>
    d->VRP |= 1;
  802544:	e0bffc17 	ldw	r2,-16(fp)
  802548:	10801803 	ldbu	r2,96(r2)
  80254c:	10800054 	ori	r2,r2,1
  802550:	1007883a 	mov	r3,r2
  802554:	e0bffc17 	ldw	r2,-16(fp)
  802558:	10c01805 	stb	r3,96(r2)
  }
  d->_g129 = d->_pg134;
  80255c:	e0bffc17 	ldw	r2,-16(fp)
  802560:	10c04c83 	ldbu	r3,306(r2)
  802564:	e0bffc17 	ldw	r2,-16(fp)
  802568:	10c02fc5 	stb	r3,191(r2)
  d->_cg129 = (d->VS || d->VP) && !d->VRP;
  80256c:	e0bffc17 	ldw	r2,-16(fp)
  802570:	10800043 	ldbu	r2,1(r2)
  802574:	10803fcc 	andi	r2,r2,255
  802578:	1080201c 	xori	r2,r2,128
  80257c:	10bfe004 	addi	r2,r2,-128
  802580:	1000061e 	bne	r2,zero,80259c <logic+0x1a04>
  802584:	e0bffc17 	ldw	r2,-16(fp)
  802588:	10801743 	ldbu	r2,93(r2)
  80258c:	10803fcc 	andi	r2,r2,255
  802590:	1080201c 	xori	r2,r2,128
  802594:	10bfe004 	addi	r2,r2,-128
  802598:	10000826 	beq	r2,zero,8025bc <logic+0x1a24>
  80259c:	e0bffc17 	ldw	r2,-16(fp)
  8025a0:	10801803 	ldbu	r2,96(r2)
  8025a4:	10803fcc 	andi	r2,r2,255
  8025a8:	1080201c 	xori	r2,r2,128
  8025ac:	10bfe004 	addi	r2,r2,-128
  8025b0:	1000021e 	bne	r2,zero,8025bc <logic+0x1a24>
  8025b4:	00800044 	movi	r2,1
  8025b8:	00000106 	br	8025c0 <logic+0x1a28>
  8025bc:	0005883a 	mov	r2,zero
  8025c0:	1007883a 	mov	r3,r2
  8025c4:	e0bffc17 	ldw	r2,-16(fp)
  8025c8:	10c041c5 	stb	r3,263(r2)
  d->_g130 = d->_g129 && d->_cg129;
  8025cc:	e0bffc17 	ldw	r2,-16(fp)
  8025d0:	10802fc3 	ldbu	r2,191(r2)
  8025d4:	10803fcc 	andi	r2,r2,255
  8025d8:	1080201c 	xori	r2,r2,128
  8025dc:	10bfe004 	addi	r2,r2,-128
  8025e0:	10000826 	beq	r2,zero,802604 <logic+0x1a6c>
  8025e4:	e0bffc17 	ldw	r2,-16(fp)
  8025e8:	108041c3 	ldbu	r2,263(r2)
  8025ec:	10803fcc 	andi	r2,r2,255
  8025f0:	1080201c 	xori	r2,r2,128
  8025f4:	10bfe004 	addi	r2,r2,-128
  8025f8:	10000226 	beq	r2,zero,802604 <logic+0x1a6c>
  8025fc:	00800044 	movi	r2,1
  802600:	00000106 	br	802608 <logic+0x1a70>
  802604:	0005883a 	mov	r2,zero
  802608:	1007883a 	mov	r3,r2
  80260c:	e0bffc17 	ldw	r2,-16(fp)
  802610:	10c03005 	stb	r3,192(r2)
  if (d->_g130) {
  802614:	e0bffc17 	ldw	r2,-16(fp)
  802618:	10803003 	ldbu	r2,192(r2)
  80261c:	10803fcc 	andi	r2,r2,255
  802620:	1080201c 	xori	r2,r2,128
  802624:	10bfe004 	addi	r2,r2,-128
  802628:	10000326 	beq	r2,zero,802638 <logic+0x1aa0>
    d->_Pacemaker_local__Atrig6 = 1;
  80262c:	e0bffc17 	ldw	r2,-16(fp)
  802630:	00c00044 	movi	r3,1
  802634:	10c01a85 	stb	r3,106(r2)
  }
  d->_g183 = d->_pg143_e1;
  802638:	e0bffc17 	ldw	r2,-16(fp)
  80263c:	10c04cc3 	ldbu	r3,307(r2)
  802640:	e0bffc17 	ldw	r2,-16(fp)
  802644:	10c03585 	stb	r3,214(r2)
  if (d->_g183) {
  802648:	e0bffc17 	ldw	r2,-16(fp)
  80264c:	10803583 	ldbu	r2,214(r2)
  802650:	10803fcc 	andi	r2,r2,255
  802654:	1080201c 	xori	r2,r2,128
  802658:	10bfe004 	addi	r2,r2,-128
  80265c:	10001226 	beq	r2,zero,8026a8 <logic+0x1b10>
    d->_region4_LRI_cLRI += d->deltaT;
  802660:	e13ffc17 	ldw	r4,-16(fp)
  802664:	20800f17 	ldw	r2,60(r4)
  802668:	20c01017 	ldw	r3,64(r4)
  80266c:	e1bffc17 	ldw	r6,-16(fp)
  802670:	31001317 	ldw	r4,76(r6)
  802674:	31401417 	ldw	r5,80(r6)
  802678:	200d883a 	mov	r6,r4
  80267c:	280f883a 	mov	r7,r5
  802680:	1009883a 	mov	r4,r2
  802684:	180b883a 	mov	r5,r3
  802688:	0805c600 	call	805c60 <__adddf3>
  80268c:	1009883a 	mov	r4,r2
  802690:	180b883a 	mov	r5,r3
  802694:	2005883a 	mov	r2,r4
  802698:	2807883a 	mov	r3,r5
  80269c:	e13ffc17 	ldw	r4,-16(fp)
  8026a0:	20800f15 	stw	r2,60(r4)
  8026a4:	20c01015 	stw	r3,64(r4)
  }
  d->_g132 = d->_g129 && !d->_cg129;
  8026a8:	e0bffc17 	ldw	r2,-16(fp)
  8026ac:	10802fc3 	ldbu	r2,191(r2)
  8026b0:	10803fcc 	andi	r2,r2,255
  8026b4:	1080201c 	xori	r2,r2,128
  8026b8:	10bfe004 	addi	r2,r2,-128
  8026bc:	10000826 	beq	r2,zero,8026e0 <logic+0x1b48>
  8026c0:	e0bffc17 	ldw	r2,-16(fp)
  8026c4:	108041c3 	ldbu	r2,263(r2)
  8026c8:	10803fcc 	andi	r2,r2,255
  8026cc:	1080201c 	xori	r2,r2,128
  8026d0:	10bfe004 	addi	r2,r2,-128
  8026d4:	1000021e 	bne	r2,zero,8026e0 <logic+0x1b48>
  8026d8:	00800044 	movi	r2,1
  8026dc:	00000106 	br	8026e4 <logic+0x1b4c>
  8026e0:	0005883a 	mov	r2,zero
  8026e4:	1007883a 	mov	r3,r2
  8026e8:	e0bffc17 	ldw	r2,-16(fp)
  8026ec:	10c03085 	stb	r3,194(r2)
  d->_cg132 = d->_region4_LRI_cLRI >= d->LRI_Constraint;
  8026f0:	e0bffc17 	ldw	r2,-16(fp)
  8026f4:	14000f17 	ldw	r16,60(r2)
  8026f8:	14401017 	ldw	r17,64(r2)
  8026fc:	e0bffc17 	ldw	r2,-16(fp)
  802700:	10800517 	ldw	r2,20(r2)
  802704:	1009883a 	mov	r4,r2
  802708:	0806fd80 	call	806fd8 <__floatsidf>
  80270c:	1009883a 	mov	r4,r2
  802710:	180b883a 	mov	r5,r3
  802714:	04800044 	movi	r18,1
  802718:	200d883a 	mov	r6,r4
  80271c:	280f883a 	mov	r7,r5
  802720:	8009883a 	mov	r4,r16
  802724:	880b883a 	mov	r5,r17
  802728:	080650c0 	call	80650c <__gedf2>
  80272c:	1000010e 	bge	r2,zero,802734 <logic+0x1b9c>
  802730:	0025883a 	mov	r18,zero
  802734:	9007883a 	mov	r3,r18
  802738:	e0bffc17 	ldw	r2,-16(fp)
  80273c:	10c04185 	stb	r3,262(r2)
  d->_g133 = d->_g132 && d->_cg132;
  802740:	e0bffc17 	ldw	r2,-16(fp)
  802744:	10803083 	ldbu	r2,194(r2)
  802748:	10803fcc 	andi	r2,r2,255
  80274c:	1080201c 	xori	r2,r2,128
  802750:	10bfe004 	addi	r2,r2,-128
  802754:	10000826 	beq	r2,zero,802778 <logic+0x1be0>
  802758:	e0bffc17 	ldw	r2,-16(fp)
  80275c:	10804183 	ldbu	r2,262(r2)
  802760:	10803fcc 	andi	r2,r2,255
  802764:	1080201c 	xori	r2,r2,128
  802768:	10bfe004 	addi	r2,r2,-128
  80276c:	10000226 	beq	r2,zero,802778 <logic+0x1be0>
  802770:	00800044 	movi	r2,1
  802774:	00000106 	br	80277c <logic+0x1be4>
  802778:	0005883a 	mov	r2,zero
  80277c:	1007883a 	mov	r3,r2
  802780:	e0bffc17 	ldw	r2,-16(fp)
  802784:	10c030c5 	stb	r3,195(r2)
  if (d->_g133) {
  802788:	e0bffc17 	ldw	r2,-16(fp)
  80278c:	108030c3 	ldbu	r2,195(r2)
  802790:	10803fcc 	andi	r2,r2,255
  802794:	1080201c 	xori	r2,r2,128
  802798:	10bfe004 	addi	r2,r2,-128
  80279c:	10000326 	beq	r2,zero,8027ac <logic+0x1c14>
    d->_Pacemaker_local__Atrig7 = 1;
  8027a0:	e0bffc17 	ldw	r2,-16(fp)
  8027a4:	00c00044 	movi	r3,1
  8027a8:	10c01ac5 	stb	r3,107(r2)
  }
  d->_cg114 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8027ac:	e0bffc17 	ldw	r2,-16(fp)
  8027b0:	10801a83 	ldbu	r2,106(r2)
  8027b4:	10803fcc 	andi	r2,r2,255
  8027b8:	1080201c 	xori	r2,r2,128
  8027bc:	10bfe004 	addi	r2,r2,-128
  8027c0:	1000061e 	bne	r2,zero,8027dc <logic+0x1c44>
  8027c4:	e0bffc17 	ldw	r2,-16(fp)
  8027c8:	10801ac3 	ldbu	r2,107(r2)
  8027cc:	10803fcc 	andi	r2,r2,255
  8027d0:	1080201c 	xori	r2,r2,128
  8027d4:	10bfe004 	addi	r2,r2,-128
  8027d8:	10000226 	beq	r2,zero,8027e4 <logic+0x1c4c>
  8027dc:	00800044 	movi	r2,1
  8027e0:	00000106 	br	8027e8 <logic+0x1c50>
  8027e4:	0005883a 	mov	r2,zero
  8027e8:	1007883a 	mov	r3,r2
  8027ec:	e0bffc17 	ldw	r2,-16(fp)
  8027f0:	10c03fc5 	stb	r3,255(r2)
  d->_g115 = d->_g17 && d->_cg114;
  8027f4:	e0bffc17 	ldw	r2,-16(fp)
  8027f8:	10801d83 	ldbu	r2,118(r2)
  8027fc:	10803fcc 	andi	r2,r2,255
  802800:	1080201c 	xori	r2,r2,128
  802804:	10bfe004 	addi	r2,r2,-128
  802808:	10000826 	beq	r2,zero,80282c <logic+0x1c94>
  80280c:	e0bffc17 	ldw	r2,-16(fp)
  802810:	10803fc3 	ldbu	r2,255(r2)
  802814:	10803fcc 	andi	r2,r2,255
  802818:	1080201c 	xori	r2,r2,128
  80281c:	10bfe004 	addi	r2,r2,-128
  802820:	10000226 	beq	r2,zero,80282c <logic+0x1c94>
  802824:	00800044 	movi	r2,1
  802828:	00000106 	br	802830 <logic+0x1c98>
  80282c:	0005883a 	mov	r2,zero
  802830:	1007883a 	mov	r3,r2
  802834:	e0bffc17 	ldw	r2,-16(fp)
  802838:	10c02d85 	stb	r3,182(r2)
  d->_g125 = d->_pg82;
  80283c:	e0bffc17 	ldw	r2,-16(fp)
  802840:	10c04d03 	ldbu	r3,308(r2)
  802844:	e0bffc17 	ldw	r2,-16(fp)
  802848:	10c02f45 	stb	r3,189(r2)
  d->_g119 = d->_pg94;
  80284c:	e0bffc17 	ldw	r2,-16(fp)
  802850:	10c04d43 	ldbu	r3,309(r2)
  802854:	e0bffc17 	ldw	r2,-16(fp)
  802858:	10c02e05 	stb	r3,184(r2)
  d->_g122_e2 = !(d->_g125 || d->_g119);
  80285c:	e0bffc17 	ldw	r2,-16(fp)
  802860:	10802f43 	ldbu	r2,189(r2)
  802864:	10803fcc 	andi	r2,r2,255
  802868:	1080201c 	xori	r2,r2,128
  80286c:	10bfe004 	addi	r2,r2,-128
  802870:	1000081e 	bne	r2,zero,802894 <logic+0x1cfc>
  802874:	e0bffc17 	ldw	r2,-16(fp)
  802878:	10802e03 	ldbu	r2,184(r2)
  80287c:	10803fcc 	andi	r2,r2,255
  802880:	1080201c 	xori	r2,r2,128
  802884:	10bfe004 	addi	r2,r2,-128
  802888:	1000021e 	bne	r2,zero,802894 <logic+0x1cfc>
  80288c:	00800044 	movi	r2,1
  802890:	00000106 	br	802898 <logic+0x1d00>
  802894:	0005883a 	mov	r2,zero
  802898:	1007883a 	mov	r3,r2
  80289c:	e0bffc17 	ldw	r2,-16(fp)
  8028a0:	10c046c5 	stb	r3,283(r2)
  d->_g125 = d->_g119 || d->_g125;
  8028a4:	e0bffc17 	ldw	r2,-16(fp)
  8028a8:	10802e03 	ldbu	r2,184(r2)
  8028ac:	10803fcc 	andi	r2,r2,255
  8028b0:	1080201c 	xori	r2,r2,128
  8028b4:	10bfe004 	addi	r2,r2,-128
  8028b8:	1000061e 	bne	r2,zero,8028d4 <logic+0x1d3c>
  8028bc:	e0bffc17 	ldw	r2,-16(fp)
  8028c0:	10802f43 	ldbu	r2,189(r2)
  8028c4:	10803fcc 	andi	r2,r2,255
  8028c8:	1080201c 	xori	r2,r2,128
  8028cc:	10bfe004 	addi	r2,r2,-128
  8028d0:	10000226 	beq	r2,zero,8028dc <logic+0x1d44>
  8028d4:	00800044 	movi	r2,1
  8028d8:	00000106 	br	8028e0 <logic+0x1d48>
  8028dc:	0005883a 	mov	r2,zero
  8028e0:	1007883a 	mov	r3,r2
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	10c02f45 	stb	r3,189(r2)
  d->_cg120 = d->_region4_LRI_cLRI < d->LRI_Constraint;
  8028ec:	e0bffc17 	ldw	r2,-16(fp)
  8028f0:	14000f17 	ldw	r16,60(r2)
  8028f4:	14401017 	ldw	r17,64(r2)
  8028f8:	e0bffc17 	ldw	r2,-16(fp)
  8028fc:	10800517 	ldw	r2,20(r2)
  802900:	1009883a 	mov	r4,r2
  802904:	0806fd80 	call	806fd8 <__floatsidf>
  802908:	1009883a 	mov	r4,r2
  80290c:	180b883a 	mov	r5,r3
  802910:	04800044 	movi	r18,1
  802914:	200d883a 	mov	r6,r4
  802918:	280f883a 	mov	r7,r5
  80291c:	8009883a 	mov	r4,r16
  802920:	880b883a 	mov	r5,r17
  802924:	08065e80 	call	8065e8 <__ledf2>
  802928:	10000116 	blt	r2,zero,802930 <logic+0x1d98>
  80292c:	0025883a 	mov	r18,zero
  802930:	9007883a 	mov	r3,r18
  802934:	e0bffc17 	ldw	r2,-16(fp)
  802938:	10c040c5 	stb	r3,259(r2)
  d->_g119 = d->_g125 && d->_cg120;
  80293c:	e0bffc17 	ldw	r2,-16(fp)
  802940:	10802f43 	ldbu	r2,189(r2)
  802944:	10803fcc 	andi	r2,r2,255
  802948:	1080201c 	xori	r2,r2,128
  80294c:	10bfe004 	addi	r2,r2,-128
  802950:	10000826 	beq	r2,zero,802974 <logic+0x1ddc>
  802954:	e0bffc17 	ldw	r2,-16(fp)
  802958:	108040c3 	ldbu	r2,259(r2)
  80295c:	10803fcc 	andi	r2,r2,255
  802960:	1080201c 	xori	r2,r2,128
  802964:	10bfe004 	addi	r2,r2,-128
  802968:	10000226 	beq	r2,zero,802974 <logic+0x1ddc>
  80296c:	00800044 	movi	r2,1
  802970:	00000106 	br	802978 <logic+0x1de0>
  802974:	0005883a 	mov	r2,zero
  802978:	1007883a 	mov	r3,r2
  80297c:	e0bffc17 	ldw	r2,-16(fp)
  802980:	10c02e05 	stb	r3,184(r2)
  if (d->_g119) {
  802984:	e0bffc17 	ldw	r2,-16(fp)
  802988:	10802e03 	ldbu	r2,184(r2)
  80298c:	10803fcc 	andi	r2,r2,255
  802990:	1080201c 	xori	r2,r2,128
  802994:	10bfe004 	addi	r2,r2,-128
  802998:	10003426 	beq	r2,zero,802a6c <logic+0x1ed4>
    d->sleepT = (d->sleepT < (d->LRI_Constraint - d->_region4_LRI_cLRI)) ? d->sleepT : (d->LRI_Constraint - d->_region4_LRI_cLRI);
  80299c:	e0bffc17 	ldw	r2,-16(fp)
  8029a0:	14001517 	ldw	r16,84(r2)
  8029a4:	14401617 	ldw	r17,88(r2)
  8029a8:	e0bffc17 	ldw	r2,-16(fp)
  8029ac:	10800517 	ldw	r2,20(r2)
  8029b0:	1009883a 	mov	r4,r2
  8029b4:	0806fd80 	call	806fd8 <__floatsidf>
  8029b8:	1011883a 	mov	r8,r2
  8029bc:	1813883a 	mov	r9,r3
  8029c0:	e13ffc17 	ldw	r4,-16(fp)
  8029c4:	20800f17 	ldw	r2,60(r4)
  8029c8:	20c01017 	ldw	r3,64(r4)
  8029cc:	100d883a 	mov	r6,r2
  8029d0:	180f883a 	mov	r7,r3
  8029d4:	4009883a 	mov	r4,r8
  8029d8:	480b883a 	mov	r5,r9
  8029dc:	08066dc0 	call	8066dc <__subdf3>
  8029e0:	1009883a 	mov	r4,r2
  8029e4:	180b883a 	mov	r5,r3
  8029e8:	2005883a 	mov	r2,r4
  8029ec:	2807883a 	mov	r3,r5
  8029f0:	100d883a 	mov	r6,r2
  8029f4:	180f883a 	mov	r7,r3
  8029f8:	8009883a 	mov	r4,r16
  8029fc:	880b883a 	mov	r5,r17
  802a00:	08065e80 	call	8065e8 <__ledf2>
  802a04:	1000040e 	bge	r2,zero,802a18 <logic+0x1e80>
  802a08:	e13ffc17 	ldw	r4,-16(fp)
  802a0c:	20801517 	ldw	r2,84(r4)
  802a10:	20c01617 	ldw	r3,88(r4)
  802a14:	00001206 	br	802a60 <logic+0x1ec8>
  802a18:	e0bffc17 	ldw	r2,-16(fp)
  802a1c:	10800517 	ldw	r2,20(r2)
  802a20:	1009883a 	mov	r4,r2
  802a24:	0806fd80 	call	806fd8 <__floatsidf>
  802a28:	1011883a 	mov	r8,r2
  802a2c:	1813883a 	mov	r9,r3
  802a30:	e13ffc17 	ldw	r4,-16(fp)
  802a34:	20800f17 	ldw	r2,60(r4)
  802a38:	20c01017 	ldw	r3,64(r4)
  802a3c:	100d883a 	mov	r6,r2
  802a40:	180f883a 	mov	r7,r3
  802a44:	4009883a 	mov	r4,r8
  802a48:	480b883a 	mov	r5,r9
  802a4c:	08066dc0 	call	8066dc <__subdf3>
  802a50:	1009883a 	mov	r4,r2
  802a54:	180b883a 	mov	r5,r3
  802a58:	2005883a 	mov	r2,r4
  802a5c:	2807883a 	mov	r3,r5
  802a60:	e13ffc17 	ldw	r4,-16(fp)
  802a64:	20801515 	stw	r2,84(r4)
  802a68:	20c01615 	stw	r3,88(r4)
  }
  d->_cg121 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  802a6c:	e0bffc17 	ldw	r2,-16(fp)
  802a70:	10801a83 	ldbu	r2,106(r2)
  802a74:	10803fcc 	andi	r2,r2,255
  802a78:	1080201c 	xori	r2,r2,128
  802a7c:	10bfe004 	addi	r2,r2,-128
  802a80:	1000061e 	bne	r2,zero,802a9c <logic+0x1f04>
  802a84:	e0bffc17 	ldw	r2,-16(fp)
  802a88:	10801ac3 	ldbu	r2,107(r2)
  802a8c:	10803fcc 	andi	r2,r2,255
  802a90:	1080201c 	xori	r2,r2,128
  802a94:	10bfe004 	addi	r2,r2,-128
  802a98:	10000226 	beq	r2,zero,802aa4 <logic+0x1f0c>
  802a9c:	00800044 	movi	r2,1
  802aa0:	00000106 	br	802aa8 <logic+0x1f10>
  802aa4:	0005883a 	mov	r2,zero
  802aa8:	1007883a 	mov	r3,r2
  802aac:	e0bffc17 	ldw	r2,-16(fp)
  802ab0:	10c04085 	stb	r3,258(r2)
  d->_g120 = d->_g125 && !d->_cg120;
  802ab4:	e0bffc17 	ldw	r2,-16(fp)
  802ab8:	10802f43 	ldbu	r2,189(r2)
  802abc:	10803fcc 	andi	r2,r2,255
  802ac0:	1080201c 	xori	r2,r2,128
  802ac4:	10bfe004 	addi	r2,r2,-128
  802ac8:	10000826 	beq	r2,zero,802aec <logic+0x1f54>
  802acc:	e0bffc17 	ldw	r2,-16(fp)
  802ad0:	108040c3 	ldbu	r2,259(r2)
  802ad4:	10803fcc 	andi	r2,r2,255
  802ad8:	1080201c 	xori	r2,r2,128
  802adc:	10bfe004 	addi	r2,r2,-128
  802ae0:	1000021e 	bne	r2,zero,802aec <logic+0x1f54>
  802ae4:	00800044 	movi	r2,1
  802ae8:	00000106 	br	802af0 <logic+0x1f58>
  802aec:	0005883a 	mov	r2,zero
  802af0:	1007883a 	mov	r3,r2
  802af4:	e0bffc17 	ldw	r2,-16(fp)
  802af8:	10c02e45 	stb	r3,185(r2)
  d->_cg123 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  802afc:	e0bffc17 	ldw	r2,-16(fp)
  802b00:	10801a83 	ldbu	r2,106(r2)
  802b04:	10803fcc 	andi	r2,r2,255
  802b08:	1080201c 	xori	r2,r2,128
  802b0c:	10bfe004 	addi	r2,r2,-128
  802b10:	1000061e 	bne	r2,zero,802b2c <logic+0x1f94>
  802b14:	e0bffc17 	ldw	r2,-16(fp)
  802b18:	10801ac3 	ldbu	r2,107(r2)
  802b1c:	10803fcc 	andi	r2,r2,255
  802b20:	1080201c 	xori	r2,r2,128
  802b24:	10bfe004 	addi	r2,r2,-128
  802b28:	10000226 	beq	r2,zero,802b34 <logic+0x1f9c>
  802b2c:	00800044 	movi	r2,1
  802b30:	00000106 	br	802b38 <logic+0x1fa0>
  802b34:	0005883a 	mov	r2,zero
  802b38:	1007883a 	mov	r3,r2
  802b3c:	e0bffc17 	ldw	r2,-16(fp)
  802b40:	10c04105 	stb	r3,260(r2)
  d->_g122 = d->_g119 && d->_cg121 || d->_g120 && d->_cg123;
  802b44:	e0bffc17 	ldw	r2,-16(fp)
  802b48:	10802e03 	ldbu	r2,184(r2)
  802b4c:	10803fcc 	andi	r2,r2,255
  802b50:	1080201c 	xori	r2,r2,128
  802b54:	10bfe004 	addi	r2,r2,-128
  802b58:	10000626 	beq	r2,zero,802b74 <logic+0x1fdc>
  802b5c:	e0bffc17 	ldw	r2,-16(fp)
  802b60:	10804083 	ldbu	r2,258(r2)
  802b64:	10803fcc 	andi	r2,r2,255
  802b68:	1080201c 	xori	r2,r2,128
  802b6c:	10bfe004 	addi	r2,r2,-128
  802b70:	10000c1e 	bne	r2,zero,802ba4 <logic+0x200c>
  802b74:	e0bffc17 	ldw	r2,-16(fp)
  802b78:	10802e43 	ldbu	r2,185(r2)
  802b7c:	10803fcc 	andi	r2,r2,255
  802b80:	1080201c 	xori	r2,r2,128
  802b84:	10bfe004 	addi	r2,r2,-128
  802b88:	10000826 	beq	r2,zero,802bac <logic+0x2014>
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10804103 	ldbu	r2,260(r2)
  802b94:	10803fcc 	andi	r2,r2,255
  802b98:	1080201c 	xori	r2,r2,128
  802b9c:	10bfe004 	addi	r2,r2,-128
  802ba0:	10000226 	beq	r2,zero,802bac <logic+0x2014>
  802ba4:	00800044 	movi	r2,1
  802ba8:	00000106 	br	802bb0 <logic+0x2018>
  802bac:	0005883a 	mov	r2,zero
  802bb0:	1007883a 	mov	r3,r2
  802bb4:	e0bffc17 	ldw	r2,-16(fp)
  802bb8:	10c02ec5 	stb	r3,187(r2)
  d->_g129 = !d->_g129;
  802bbc:	e0bffc17 	ldw	r2,-16(fp)
  802bc0:	10802fc3 	ldbu	r2,191(r2)
  802bc4:	10803fcc 	andi	r2,r2,255
  802bc8:	1080201c 	xori	r2,r2,128
  802bcc:	10bfe004 	addi	r2,r2,-128
  802bd0:	1005003a 	cmpeq	r2,r2,zero
  802bd4:	1007883a 	mov	r3,r2
  802bd8:	e0bffc17 	ldw	r2,-16(fp)
  802bdc:	10c02fc5 	stb	r3,191(r2)
  d->_g130 = d->_g130 || d->_g133;
  802be0:	e0bffc17 	ldw	r2,-16(fp)
  802be4:	10803003 	ldbu	r2,192(r2)
  802be8:	10803fcc 	andi	r2,r2,255
  802bec:	1080201c 	xori	r2,r2,128
  802bf0:	10bfe004 	addi	r2,r2,-128
  802bf4:	1000061e 	bne	r2,zero,802c10 <logic+0x2078>
  802bf8:	e0bffc17 	ldw	r2,-16(fp)
  802bfc:	108030c3 	ldbu	r2,195(r2)
  802c00:	10803fcc 	andi	r2,r2,255
  802c04:	1080201c 	xori	r2,r2,128
  802c08:	10bfe004 	addi	r2,r2,-128
  802c0c:	10000226 	beq	r2,zero,802c18 <logic+0x2080>
  802c10:	00800044 	movi	r2,1
  802c14:	00000106 	br	802c1c <logic+0x2084>
  802c18:	0005883a 	mov	r2,zero
  802c1c:	1007883a 	mov	r3,r2
  802c20:	e0bffc17 	ldw	r2,-16(fp)
  802c24:	10c03005 	stb	r3,192(r2)
  d->_g133 = (d->_g26 || d->_g115) && (d->_g122_e2 || d->_g122) && (d->_g129 || d->_g130) && (d->_g115 || d->_g122 || d->_g130);
  802c28:	e0bffc17 	ldw	r2,-16(fp)
  802c2c:	10801f03 	ldbu	r2,124(r2)
  802c30:	10803fcc 	andi	r2,r2,255
  802c34:	1080201c 	xori	r2,r2,128
  802c38:	10bfe004 	addi	r2,r2,-128
  802c3c:	1000061e 	bne	r2,zero,802c58 <logic+0x20c0>
  802c40:	e0bffc17 	ldw	r2,-16(fp)
  802c44:	10802d83 	ldbu	r2,182(r2)
  802c48:	10803fcc 	andi	r2,r2,255
  802c4c:	1080201c 	xori	r2,r2,128
  802c50:	10bfe004 	addi	r2,r2,-128
  802c54:	10002c26 	beq	r2,zero,802d08 <logic+0x2170>
  802c58:	e0bffc17 	ldw	r2,-16(fp)
  802c5c:	108046c3 	ldbu	r2,283(r2)
  802c60:	10803fcc 	andi	r2,r2,255
  802c64:	1080201c 	xori	r2,r2,128
  802c68:	10bfe004 	addi	r2,r2,-128
  802c6c:	1000061e 	bne	r2,zero,802c88 <logic+0x20f0>
  802c70:	e0bffc17 	ldw	r2,-16(fp)
  802c74:	10802ec3 	ldbu	r2,187(r2)
  802c78:	10803fcc 	andi	r2,r2,255
  802c7c:	1080201c 	xori	r2,r2,128
  802c80:	10bfe004 	addi	r2,r2,-128
  802c84:	10002026 	beq	r2,zero,802d08 <logic+0x2170>
  802c88:	e0bffc17 	ldw	r2,-16(fp)
  802c8c:	10802fc3 	ldbu	r2,191(r2)
  802c90:	10803fcc 	andi	r2,r2,255
  802c94:	1080201c 	xori	r2,r2,128
  802c98:	10bfe004 	addi	r2,r2,-128
  802c9c:	1000061e 	bne	r2,zero,802cb8 <logic+0x2120>
  802ca0:	e0bffc17 	ldw	r2,-16(fp)
  802ca4:	10803003 	ldbu	r2,192(r2)
  802ca8:	10803fcc 	andi	r2,r2,255
  802cac:	1080201c 	xori	r2,r2,128
  802cb0:	10bfe004 	addi	r2,r2,-128
  802cb4:	10001426 	beq	r2,zero,802d08 <logic+0x2170>
  802cb8:	e0bffc17 	ldw	r2,-16(fp)
  802cbc:	10802d83 	ldbu	r2,182(r2)
  802cc0:	10803fcc 	andi	r2,r2,255
  802cc4:	1080201c 	xori	r2,r2,128
  802cc8:	10bfe004 	addi	r2,r2,-128
  802ccc:	10000c1e 	bne	r2,zero,802d00 <logic+0x2168>
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	10802ec3 	ldbu	r2,187(r2)
  802cd8:	10803fcc 	andi	r2,r2,255
  802cdc:	1080201c 	xori	r2,r2,128
  802ce0:	10bfe004 	addi	r2,r2,-128
  802ce4:	1000061e 	bne	r2,zero,802d00 <logic+0x2168>
  802ce8:	e0bffc17 	ldw	r2,-16(fp)
  802cec:	10803003 	ldbu	r2,192(r2)
  802cf0:	10803fcc 	andi	r2,r2,255
  802cf4:	1080201c 	xori	r2,r2,128
  802cf8:	10bfe004 	addi	r2,r2,-128
  802cfc:	10000226 	beq	r2,zero,802d08 <logic+0x2170>
  802d00:	00800044 	movi	r2,1
  802d04:	00000106 	br	802d0c <logic+0x2174>
  802d08:	0005883a 	mov	r2,zero
  802d0c:	1007883a 	mov	r3,r2
  802d10:	e0bffc17 	ldw	r2,-16(fp)
  802d14:	10c030c5 	stb	r3,195(r2)
  d->_cg134 = d->_Pacemaker_local__Atrig6;
  802d18:	e0bffc17 	ldw	r2,-16(fp)
  802d1c:	10c01a83 	ldbu	r3,106(r2)
  802d20:	e0bffc17 	ldw	r2,-16(fp)
  802d24:	10c03f45 	stb	r3,253(r2)
  d->_g122 = d->_g133 && !d->_cg134;
  802d28:	e0bffc17 	ldw	r2,-16(fp)
  802d2c:	108030c3 	ldbu	r2,195(r2)
  802d30:	10803fcc 	andi	r2,r2,255
  802d34:	1080201c 	xori	r2,r2,128
  802d38:	10bfe004 	addi	r2,r2,-128
  802d3c:	10000826 	beq	r2,zero,802d60 <logic+0x21c8>
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10803f43 	ldbu	r2,253(r2)
  802d48:	10803fcc 	andi	r2,r2,255
  802d4c:	1080201c 	xori	r2,r2,128
  802d50:	10bfe004 	addi	r2,r2,-128
  802d54:	1000021e 	bne	r2,zero,802d60 <logic+0x21c8>
  802d58:	00800044 	movi	r2,1
  802d5c:	00000106 	br	802d64 <logic+0x21cc>
  802d60:	0005883a 	mov	r2,zero
  802d64:	1007883a 	mov	r3,r2
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	10c02ec5 	stb	r3,187(r2)
  if (d->_g122) {
  802d70:	e0bffc17 	ldw	r2,-16(fp)
  802d74:	10802ec3 	ldbu	r2,187(r2)
  802d78:	10803fcc 	andi	r2,r2,255
  802d7c:	1080201c 	xori	r2,r2,128
  802d80:	10bfe004 	addi	r2,r2,-128
  802d84:	10000626 	beq	r2,zero,802da0 <logic+0x2208>
    d->VP |= 1;
  802d88:	e0bffc17 	ldw	r2,-16(fp)
  802d8c:	10801743 	ldbu	r2,93(r2)
  802d90:	10800054 	ori	r2,r2,1
  802d94:	1007883a 	mov	r3,r2
  802d98:	e0bffc17 	ldw	r2,-16(fp)
  802d9c:	10c01745 	stb	r3,93(r2)
  }
  d->_g131_e3 = d->_pg37;
  802da0:	e0bffc17 	ldw	r2,-16(fp)
  802da4:	10c04d83 	ldbu	r3,310(r2)
  802da8:	e0bffc17 	ldw	r2,-16(fp)
  802dac:	10c04705 	stb	r3,284(r2)
  d->_cg33 = d->VS || d->VP;
  802db0:	e0bffc17 	ldw	r2,-16(fp)
  802db4:	10800043 	ldbu	r2,1(r2)
  802db8:	10803fcc 	andi	r2,r2,255
  802dbc:	1080201c 	xori	r2,r2,128
  802dc0:	10bfe004 	addi	r2,r2,-128
  802dc4:	1000061e 	bne	r2,zero,802de0 <logic+0x2248>
  802dc8:	e0bffc17 	ldw	r2,-16(fp)
  802dcc:	10801743 	ldbu	r2,93(r2)
  802dd0:	10803fcc 	andi	r2,r2,255
  802dd4:	1080201c 	xori	r2,r2,128
  802dd8:	10bfe004 	addi	r2,r2,-128
  802ddc:	10000226 	beq	r2,zero,802de8 <logic+0x2250>
  802de0:	00800044 	movi	r2,1
  802de4:	00000106 	br	802dec <logic+0x2254>
  802de8:	0005883a 	mov	r2,zero
  802dec:	1007883a 	mov	r3,r2
  802df0:	e0bffc17 	ldw	r2,-16(fp)
  802df4:	10c03905 	stb	r3,228(r2)
  d->_g115_e1 = d->_g131_e3 && d->_cg33;
  802df8:	e0bffc17 	ldw	r2,-16(fp)
  802dfc:	10804703 	ldbu	r2,284(r2)
  802e00:	10803fcc 	andi	r2,r2,255
  802e04:	1080201c 	xori	r2,r2,128
  802e08:	10bfe004 	addi	r2,r2,-128
  802e0c:	10000826 	beq	r2,zero,802e30 <logic+0x2298>
  802e10:	e0bffc17 	ldw	r2,-16(fp)
  802e14:	10803903 	ldbu	r2,228(r2)
  802e18:	10803fcc 	andi	r2,r2,255
  802e1c:	1080201c 	xori	r2,r2,128
  802e20:	10bfe004 	addi	r2,r2,-128
  802e24:	10000226 	beq	r2,zero,802e30 <logic+0x2298>
  802e28:	00800044 	movi	r2,1
  802e2c:	00000106 	br	802e34 <logic+0x229c>
  802e30:	0005883a 	mov	r2,zero
  802e34:	1007883a 	mov	r3,r2
  802e38:	e0bffc17 	ldw	r2,-16(fp)
  802e3c:	10c04685 	stb	r3,282(r2)
  if (d->_g115_e1) {
  802e40:	e0bffc17 	ldw	r2,-16(fp)
  802e44:	10804683 	ldbu	r2,282(r2)
  802e48:	10803fcc 	andi	r2,r2,255
  802e4c:	1080201c 	xori	r2,r2,128
  802e50:	10bfe004 	addi	r2,r2,-128
  802e54:	10000526 	beq	r2,zero,802e6c <logic+0x22d4>
    d->_region1_PVARP_cPVARP = 0;
  802e58:	e0bffc17 	ldw	r2,-16(fp)
  802e5c:	10000915 	stw	zero,36(r2)
  802e60:	10000a15 	stw	zero,40(r2)
    d->_Pacemaker_local__Atrig2 = 0;
  802e64:	e0bffc17 	ldw	r2,-16(fp)
  802e68:	10001985 	stb	zero,102(r2)
  }
  d->_g122_e2 = d->_g115_e1 || d->_g9;
  802e6c:	e0bffc17 	ldw	r2,-16(fp)
  802e70:	10804683 	ldbu	r2,282(r2)
  802e74:	10803fcc 	andi	r2,r2,255
  802e78:	1080201c 	xori	r2,r2,128
  802e7c:	10bfe004 	addi	r2,r2,-128
  802e80:	1000061e 	bne	r2,zero,802e9c <logic+0x2304>
  802e84:	e0bffc17 	ldw	r2,-16(fp)
  802e88:	10801c03 	ldbu	r2,112(r2)
  802e8c:	10803fcc 	andi	r2,r2,255
  802e90:	1080201c 	xori	r2,r2,128
  802e94:	10bfe004 	addi	r2,r2,-128
  802e98:	10000226 	beq	r2,zero,802ea4 <logic+0x230c>
  802e9c:	00800044 	movi	r2,1
  802ea0:	00000106 	br	802ea8 <logic+0x2310>
  802ea4:	0005883a 	mov	r2,zero
  802ea8:	1007883a 	mov	r3,r2
  802eac:	e0bffc17 	ldw	r2,-16(fp)
  802eb0:	10c046c5 	stb	r3,283(r2)
  d->_cg36 = d->_Pacemaker_local__Atrig2;
  802eb4:	e0bffc17 	ldw	r2,-16(fp)
  802eb8:	10c01983 	ldbu	r3,102(r2)
  802ebc:	e0bffc17 	ldw	r2,-16(fp)
  802ec0:	10c03945 	stb	r3,229(r2)
  d->_g131 = d->_g122_e2 && !d->_cg36;
  802ec4:	e0bffc17 	ldw	r2,-16(fp)
  802ec8:	108046c3 	ldbu	r2,283(r2)
  802ecc:	10803fcc 	andi	r2,r2,255
  802ed0:	1080201c 	xori	r2,r2,128
  802ed4:	10bfe004 	addi	r2,r2,-128
  802ed8:	10000826 	beq	r2,zero,802efc <logic+0x2364>
  802edc:	e0bffc17 	ldw	r2,-16(fp)
  802ee0:	10803943 	ldbu	r2,229(r2)
  802ee4:	10803fcc 	andi	r2,r2,255
  802ee8:	1080201c 	xori	r2,r2,128
  802eec:	10bfe004 	addi	r2,r2,-128
  802ef0:	1000021e 	bne	r2,zero,802efc <logic+0x2364>
  802ef4:	00800044 	movi	r2,1
  802ef8:	00000106 	br	802f00 <logic+0x2368>
  802efc:	0005883a 	mov	r2,zero
  802f00:	1007883a 	mov	r3,r2
  802f04:	e0bffc17 	ldw	r2,-16(fp)
  802f08:	10c03045 	stb	r3,193(r2)
  d->_g115 = !d->_g131;
  802f0c:	e0bffc17 	ldw	r2,-16(fp)
  802f10:	10803043 	ldbu	r2,193(r2)
  802f14:	10803fcc 	andi	r2,r2,255
  802f18:	1080201c 	xori	r2,r2,128
  802f1c:	10bfe004 	addi	r2,r2,-128
  802f20:	1005003a 	cmpeq	r2,r2,zero
  802f24:	1007883a 	mov	r3,r2
  802f28:	e0bffc17 	ldw	r2,-16(fp)
  802f2c:	10c02d85 	stb	r3,182(r2)
  d->_g39 = d->_g122_e2 && d->_cg36;
  802f30:	e0bffc17 	ldw	r2,-16(fp)
  802f34:	108046c3 	ldbu	r2,283(r2)
  802f38:	10803fcc 	andi	r2,r2,255
  802f3c:	1080201c 	xori	r2,r2,128
  802f40:	10bfe004 	addi	r2,r2,-128
  802f44:	10000826 	beq	r2,zero,802f68 <logic+0x23d0>
  802f48:	e0bffc17 	ldw	r2,-16(fp)
  802f4c:	10803943 	ldbu	r2,229(r2)
  802f50:	10803fcc 	andi	r2,r2,255
  802f54:	1080201c 	xori	r2,r2,128
  802f58:	10bfe004 	addi	r2,r2,-128
  802f5c:	10000226 	beq	r2,zero,802f68 <logic+0x23d0>
  802f60:	00800044 	movi	r2,1
  802f64:	00000106 	br	802f6c <logic+0x23d4>
  802f68:	0005883a 	mov	r2,zero
  802f6c:	1007883a 	mov	r3,r2
  802f70:	e0bffc17 	ldw	r2,-16(fp)
  802f74:	10c02105 	stb	r3,132(r2)
  d->_g36 = d->_pg44;
  802f78:	e0bffc17 	ldw	r2,-16(fp)
  802f7c:	10c04dc3 	ldbu	r3,311(r2)
  802f80:	e0bffc17 	ldw	r2,-16(fp)
  802f84:	10c02085 	stb	r3,130(r2)
  d->_g48 = d->_pg47;
  802f88:	e0bffc17 	ldw	r2,-16(fp)
  802f8c:	10c04e03 	ldbu	r3,312(r2)
  802f90:	e0bffc17 	ldw	r2,-16(fp)
  802f94:	10c02305 	stb	r3,140(r2)
  d->_g48 = d->_g115_e1 || d->_g36 || d->_g48;
  802f98:	e0bffc17 	ldw	r2,-16(fp)
  802f9c:	10804683 	ldbu	r2,282(r2)
  802fa0:	10803fcc 	andi	r2,r2,255
  802fa4:	1080201c 	xori	r2,r2,128
  802fa8:	10bfe004 	addi	r2,r2,-128
  802fac:	10000c1e 	bne	r2,zero,802fe0 <logic+0x2448>
  802fb0:	e0bffc17 	ldw	r2,-16(fp)
  802fb4:	10802083 	ldbu	r2,130(r2)
  802fb8:	10803fcc 	andi	r2,r2,255
  802fbc:	1080201c 	xori	r2,r2,128
  802fc0:	10bfe004 	addi	r2,r2,-128
  802fc4:	1000061e 	bne	r2,zero,802fe0 <logic+0x2448>
  802fc8:	e0bffc17 	ldw	r2,-16(fp)
  802fcc:	10802303 	ldbu	r2,140(r2)
  802fd0:	10803fcc 	andi	r2,r2,255
  802fd4:	1080201c 	xori	r2,r2,128
  802fd8:	10bfe004 	addi	r2,r2,-128
  802fdc:	10000226 	beq	r2,zero,802fe8 <logic+0x2450>
  802fe0:	00800044 	movi	r2,1
  802fe4:	00000106 	br	802fec <logic+0x2454>
  802fe8:	0005883a 	mov	r2,zero
  802fec:	1007883a 	mov	r3,r2
  802ff0:	e0bffc17 	ldw	r2,-16(fp)
  802ff4:	10c02305 	stb	r3,140(r2)
  d->_cg41 = d->_region1_PVARP_cPVARP < d->PVARP_Constraint;
  802ff8:	e0bffc17 	ldw	r2,-16(fp)
  802ffc:	14000917 	ldw	r16,36(r2)
  803000:	14400a17 	ldw	r17,40(r2)
  803004:	e0bffc17 	ldw	r2,-16(fp)
  803008:	10800217 	ldw	r2,8(r2)
  80300c:	1009883a 	mov	r4,r2
  803010:	0806fd80 	call	806fd8 <__floatsidf>
  803014:	1009883a 	mov	r4,r2
  803018:	180b883a 	mov	r5,r3
  80301c:	04800044 	movi	r18,1
  803020:	200d883a 	mov	r6,r4
  803024:	280f883a 	mov	r7,r5
  803028:	8009883a 	mov	r4,r16
  80302c:	880b883a 	mov	r5,r17
  803030:	08065e80 	call	8065e8 <__ledf2>
  803034:	10000116 	blt	r2,zero,80303c <logic+0x24a4>
  803038:	0025883a 	mov	r18,zero
  80303c:	9007883a 	mov	r3,r18
  803040:	e0bffc17 	ldw	r2,-16(fp)
  803044:	10c03985 	stb	r3,230(r2)
  d->_g45 = d->_g48 && !d->_cg41;
  803048:	e0bffc17 	ldw	r2,-16(fp)
  80304c:	10802303 	ldbu	r2,140(r2)
  803050:	10803fcc 	andi	r2,r2,255
  803054:	1080201c 	xori	r2,r2,128
  803058:	10bfe004 	addi	r2,r2,-128
  80305c:	10000826 	beq	r2,zero,803080 <logic+0x24e8>
  803060:	e0bffc17 	ldw	r2,-16(fp)
  803064:	10803983 	ldbu	r2,230(r2)
  803068:	10803fcc 	andi	r2,r2,255
  80306c:	1080201c 	xori	r2,r2,128
  803070:	10bfe004 	addi	r2,r2,-128
  803074:	1000021e 	bne	r2,zero,803080 <logic+0x24e8>
  803078:	00800044 	movi	r2,1
  80307c:	00000106 	br	803084 <logic+0x24ec>
  803080:	0005883a 	mov	r2,zero
  803084:	1007883a 	mov	r3,r2
  803088:	e0bffc17 	ldw	r2,-16(fp)
  80308c:	10c02245 	stb	r3,137(r2)
  d->_cg46 = d->_Pacemaker_local__Atrig2;
  803090:	e0bffc17 	ldw	r2,-16(fp)
  803094:	10c01983 	ldbu	r3,102(r2)
  803098:	e0bffc17 	ldw	r2,-16(fp)
  80309c:	10c03a05 	stb	r3,232(r2)
  d->_g47 = d->_g45 && !d->_cg46;
  8030a0:	e0bffc17 	ldw	r2,-16(fp)
  8030a4:	10802243 	ldbu	r2,137(r2)
  8030a8:	10803fcc 	andi	r2,r2,255
  8030ac:	1080201c 	xori	r2,r2,128
  8030b0:	10bfe004 	addi	r2,r2,-128
  8030b4:	10000826 	beq	r2,zero,8030d8 <logic+0x2540>
  8030b8:	e0bffc17 	ldw	r2,-16(fp)
  8030bc:	10803a03 	ldbu	r2,232(r2)
  8030c0:	10803fcc 	andi	r2,r2,255
  8030c4:	1080201c 	xori	r2,r2,128
  8030c8:	10bfe004 	addi	r2,r2,-128
  8030cc:	1000021e 	bne	r2,zero,8030d8 <logic+0x2540>
  8030d0:	00800044 	movi	r2,1
  8030d4:	00000106 	br	8030dc <logic+0x2544>
  8030d8:	0005883a 	mov	r2,zero
  8030dc:	1007883a 	mov	r3,r2
  8030e0:	e0bffc17 	ldw	r2,-16(fp)
  8030e4:	10c022c5 	stb	r3,139(r2)
  d->_g41 = d->_g48 && d->_cg41;
  8030e8:	e0bffc17 	ldw	r2,-16(fp)
  8030ec:	10802303 	ldbu	r2,140(r2)
  8030f0:	10803fcc 	andi	r2,r2,255
  8030f4:	1080201c 	xori	r2,r2,128
  8030f8:	10bfe004 	addi	r2,r2,-128
  8030fc:	10000826 	beq	r2,zero,803120 <logic+0x2588>
  803100:	e0bffc17 	ldw	r2,-16(fp)
  803104:	10803983 	ldbu	r2,230(r2)
  803108:	10803fcc 	andi	r2,r2,255
  80310c:	1080201c 	xori	r2,r2,128
  803110:	10bfe004 	addi	r2,r2,-128
  803114:	10000226 	beq	r2,zero,803120 <logic+0x2588>
  803118:	00800044 	movi	r2,1
  80311c:	00000106 	br	803124 <logic+0x258c>
  803120:	0005883a 	mov	r2,zero
  803124:	1007883a 	mov	r3,r2
  803128:	e0bffc17 	ldw	r2,-16(fp)
  80312c:	10c02145 	stb	r3,133(r2)
  if (d->_g41) {
  803130:	e0bffc17 	ldw	r2,-16(fp)
  803134:	10802143 	ldbu	r2,133(r2)
  803138:	10803fcc 	andi	r2,r2,255
  80313c:	1080201c 	xori	r2,r2,128
  803140:	10bfe004 	addi	r2,r2,-128
  803144:	10003426 	beq	r2,zero,803218 <logic+0x2680>
    d->sleepT = (d->sleepT < (d->PVARP_Constraint - d->_region1_PVARP_cPVARP)) ? d->sleepT : (d->PVARP_Constraint - d->_region1_PVARP_cPVARP);
  803148:	e0bffc17 	ldw	r2,-16(fp)
  80314c:	14001517 	ldw	r16,84(r2)
  803150:	14401617 	ldw	r17,88(r2)
  803154:	e0bffc17 	ldw	r2,-16(fp)
  803158:	10800217 	ldw	r2,8(r2)
  80315c:	1009883a 	mov	r4,r2
  803160:	0806fd80 	call	806fd8 <__floatsidf>
  803164:	1011883a 	mov	r8,r2
  803168:	1813883a 	mov	r9,r3
  80316c:	e13ffc17 	ldw	r4,-16(fp)
  803170:	20800917 	ldw	r2,36(r4)
  803174:	20c00a17 	ldw	r3,40(r4)
  803178:	100d883a 	mov	r6,r2
  80317c:	180f883a 	mov	r7,r3
  803180:	4009883a 	mov	r4,r8
  803184:	480b883a 	mov	r5,r9
  803188:	08066dc0 	call	8066dc <__subdf3>
  80318c:	1009883a 	mov	r4,r2
  803190:	180b883a 	mov	r5,r3
  803194:	2005883a 	mov	r2,r4
  803198:	2807883a 	mov	r3,r5
  80319c:	100d883a 	mov	r6,r2
  8031a0:	180f883a 	mov	r7,r3
  8031a4:	8009883a 	mov	r4,r16
  8031a8:	880b883a 	mov	r5,r17
  8031ac:	08065e80 	call	8065e8 <__ledf2>
  8031b0:	1000040e 	bge	r2,zero,8031c4 <logic+0x262c>
  8031b4:	e13ffc17 	ldw	r4,-16(fp)
  8031b8:	20801517 	ldw	r2,84(r4)
  8031bc:	20c01617 	ldw	r3,88(r4)
  8031c0:	00001206 	br	80320c <logic+0x2674>
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	10800217 	ldw	r2,8(r2)
  8031cc:	1009883a 	mov	r4,r2
  8031d0:	0806fd80 	call	806fd8 <__floatsidf>
  8031d4:	1011883a 	mov	r8,r2
  8031d8:	1813883a 	mov	r9,r3
  8031dc:	e13ffc17 	ldw	r4,-16(fp)
  8031e0:	20800917 	ldw	r2,36(r4)
  8031e4:	20c00a17 	ldw	r3,40(r4)
  8031e8:	100d883a 	mov	r6,r2
  8031ec:	180f883a 	mov	r7,r3
  8031f0:	4009883a 	mov	r4,r8
  8031f4:	480b883a 	mov	r5,r9
  8031f8:	08066dc0 	call	8066dc <__subdf3>
  8031fc:	1009883a 	mov	r4,r2
  803200:	180b883a 	mov	r5,r3
  803204:	2005883a 	mov	r2,r4
  803208:	2807883a 	mov	r3,r5
  80320c:	e13ffc17 	ldw	r4,-16(fp)
  803210:	20801515 	stw	r2,84(r4)
  803214:	20c01615 	stw	r3,88(r4)
  }
  d->_cg42 = d->_Pacemaker_local__Atrig2;
  803218:	e0bffc17 	ldw	r2,-16(fp)
  80321c:	10c01983 	ldbu	r3,102(r2)
  803220:	e0bffc17 	ldw	r2,-16(fp)
  803224:	10c039c5 	stb	r3,231(r2)
  d->_g44 = d->_g41 && !d->_cg42;
  803228:	e0bffc17 	ldw	r2,-16(fp)
  80322c:	10802143 	ldbu	r2,133(r2)
  803230:	10803fcc 	andi	r2,r2,255
  803234:	1080201c 	xori	r2,r2,128
  803238:	10bfe004 	addi	r2,r2,-128
  80323c:	10000826 	beq	r2,zero,803260 <logic+0x26c8>
  803240:	e0bffc17 	ldw	r2,-16(fp)
  803244:	108039c3 	ldbu	r2,231(r2)
  803248:	10803fcc 	andi	r2,r2,255
  80324c:	1080201c 	xori	r2,r2,128
  803250:	10bfe004 	addi	r2,r2,-128
  803254:	1000021e 	bne	r2,zero,803260 <logic+0x26c8>
  803258:	00800044 	movi	r2,1
  80325c:	00000106 	br	803264 <logic+0x26cc>
  803260:	0005883a 	mov	r2,zero
  803264:	1007883a 	mov	r3,r2
  803268:	e0bffc17 	ldw	r2,-16(fp)
  80326c:	10c02205 	stb	r3,136(r2)
  d->_g43_e2 = !(d->_g47 || d->_g44);
  803270:	e0bffc17 	ldw	r2,-16(fp)
  803274:	108022c3 	ldbu	r2,139(r2)
  803278:	10803fcc 	andi	r2,r2,255
  80327c:	1080201c 	xori	r2,r2,128
  803280:	10bfe004 	addi	r2,r2,-128
  803284:	1000081e 	bne	r2,zero,8032a8 <logic+0x2710>
  803288:	e0bffc17 	ldw	r2,-16(fp)
  80328c:	10802203 	ldbu	r2,136(r2)
  803290:	10803fcc 	andi	r2,r2,255
  803294:	1080201c 	xori	r2,r2,128
  803298:	10bfe004 	addi	r2,r2,-128
  80329c:	1000021e 	bne	r2,zero,8032a8 <logic+0x2710>
  8032a0:	00800044 	movi	r2,1
  8032a4:	00000106 	br	8032ac <logic+0x2714>
  8032a8:	0005883a 	mov	r2,zero
  8032ac:	1007883a 	mov	r3,r2
  8032b0:	e0bffc17 	ldw	r2,-16(fp)
  8032b4:	10c04485 	stb	r3,274(r2)
  d->_g46 = d->_g41 && d->_cg42 || d->_g45 && d->_cg46;
  8032b8:	e0bffc17 	ldw	r2,-16(fp)
  8032bc:	10802143 	ldbu	r2,133(r2)
  8032c0:	10803fcc 	andi	r2,r2,255
  8032c4:	1080201c 	xori	r2,r2,128
  8032c8:	10bfe004 	addi	r2,r2,-128
  8032cc:	10000626 	beq	r2,zero,8032e8 <logic+0x2750>
  8032d0:	e0bffc17 	ldw	r2,-16(fp)
  8032d4:	108039c3 	ldbu	r2,231(r2)
  8032d8:	10803fcc 	andi	r2,r2,255
  8032dc:	1080201c 	xori	r2,r2,128
  8032e0:	10bfe004 	addi	r2,r2,-128
  8032e4:	10000c1e 	bne	r2,zero,803318 <logic+0x2780>
  8032e8:	e0bffc17 	ldw	r2,-16(fp)
  8032ec:	10802243 	ldbu	r2,137(r2)
  8032f0:	10803fcc 	andi	r2,r2,255
  8032f4:	1080201c 	xori	r2,r2,128
  8032f8:	10bfe004 	addi	r2,r2,-128
  8032fc:	10000826 	beq	r2,zero,803320 <logic+0x2788>
  803300:	e0bffc17 	ldw	r2,-16(fp)
  803304:	10803a03 	ldbu	r2,232(r2)
  803308:	10803fcc 	andi	r2,r2,255
  80330c:	1080201c 	xori	r2,r2,128
  803310:	10bfe004 	addi	r2,r2,-128
  803314:	10000226 	beq	r2,zero,803320 <logic+0x2788>
  803318:	00800044 	movi	r2,1
  80331c:	00000106 	br	803324 <logic+0x278c>
  803320:	0005883a 	mov	r2,zero
  803324:	1007883a 	mov	r3,r2
  803328:	e0bffc17 	ldw	r2,-16(fp)
  80332c:	10c02285 	stb	r3,138(r2)
  d->_g42 = d->_g115_e1 || d->_g11 && !d->_cg51;
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10804683 	ldbu	r2,282(r2)
  803338:	10803fcc 	andi	r2,r2,255
  80333c:	1080201c 	xori	r2,r2,128
  803340:	10bfe004 	addi	r2,r2,-128
  803344:	10000c1e 	bne	r2,zero,803378 <logic+0x27e0>
  803348:	e0bffc17 	ldw	r2,-16(fp)
  80334c:	10801c43 	ldbu	r2,113(r2)
  803350:	10803fcc 	andi	r2,r2,255
  803354:	1080201c 	xori	r2,r2,128
  803358:	10bfe004 	addi	r2,r2,-128
  80335c:	10000826 	beq	r2,zero,803380 <logic+0x27e8>
  803360:	e0bffc17 	ldw	r2,-16(fp)
  803364:	10803a43 	ldbu	r2,233(r2)
  803368:	10803fcc 	andi	r2,r2,255
  80336c:	1080201c 	xori	r2,r2,128
  803370:	10bfe004 	addi	r2,r2,-128
  803374:	1000021e 	bne	r2,zero,803380 <logic+0x27e8>
  803378:	00800044 	movi	r2,1
  80337c:	00000106 	br	803384 <logic+0x27ec>
  803380:	0005883a 	mov	r2,zero
  803384:	1007883a 	mov	r3,r2
  803388:	e0bffc17 	ldw	r2,-16(fp)
  80338c:	10c02185 	stb	r3,134(r2)
  d->_g51 = !d->_g42;
  803390:	e0bffc17 	ldw	r2,-16(fp)
  803394:	10802183 	ldbu	r2,134(r2)
  803398:	10803fcc 	andi	r2,r2,255
  80339c:	1080201c 	xori	r2,r2,128
  8033a0:	10bfe004 	addi	r2,r2,-128
  8033a4:	1005003a 	cmpeq	r2,r2,zero
  8033a8:	1007883a 	mov	r3,r2
  8033ac:	e0bffc17 	ldw	r2,-16(fp)
  8033b0:	10c02345 	stb	r3,141(r2)
  d->_g34 = (d->_g115 || d->_g39) && (d->_g43_e2 || d->_g46) && (d->_g51 || d->_g20) && (d->_g39 || d->_g46 || d->_g20);
  8033b4:	e0bffc17 	ldw	r2,-16(fp)
  8033b8:	10802d83 	ldbu	r2,182(r2)
  8033bc:	10803fcc 	andi	r2,r2,255
  8033c0:	1080201c 	xori	r2,r2,128
  8033c4:	10bfe004 	addi	r2,r2,-128
  8033c8:	1000061e 	bne	r2,zero,8033e4 <logic+0x284c>
  8033cc:	e0bffc17 	ldw	r2,-16(fp)
  8033d0:	10802103 	ldbu	r2,132(r2)
  8033d4:	10803fcc 	andi	r2,r2,255
  8033d8:	1080201c 	xori	r2,r2,128
  8033dc:	10bfe004 	addi	r2,r2,-128
  8033e0:	10002c26 	beq	r2,zero,803494 <logic+0x28fc>
  8033e4:	e0bffc17 	ldw	r2,-16(fp)
  8033e8:	10804483 	ldbu	r2,274(r2)
  8033ec:	10803fcc 	andi	r2,r2,255
  8033f0:	1080201c 	xori	r2,r2,128
  8033f4:	10bfe004 	addi	r2,r2,-128
  8033f8:	1000061e 	bne	r2,zero,803414 <logic+0x287c>
  8033fc:	e0bffc17 	ldw	r2,-16(fp)
  803400:	10802283 	ldbu	r2,138(r2)
  803404:	10803fcc 	andi	r2,r2,255
  803408:	1080201c 	xori	r2,r2,128
  80340c:	10bfe004 	addi	r2,r2,-128
  803410:	10002026 	beq	r2,zero,803494 <logic+0x28fc>
  803414:	e0bffc17 	ldw	r2,-16(fp)
  803418:	10802343 	ldbu	r2,141(r2)
  80341c:	10803fcc 	andi	r2,r2,255
  803420:	1080201c 	xori	r2,r2,128
  803424:	10bfe004 	addi	r2,r2,-128
  803428:	1000061e 	bne	r2,zero,803444 <logic+0x28ac>
  80342c:	e0bffc17 	ldw	r2,-16(fp)
  803430:	10801e03 	ldbu	r2,120(r2)
  803434:	10803fcc 	andi	r2,r2,255
  803438:	1080201c 	xori	r2,r2,128
  80343c:	10bfe004 	addi	r2,r2,-128
  803440:	10001426 	beq	r2,zero,803494 <logic+0x28fc>
  803444:	e0bffc17 	ldw	r2,-16(fp)
  803448:	10802103 	ldbu	r2,132(r2)
  80344c:	10803fcc 	andi	r2,r2,255
  803450:	1080201c 	xori	r2,r2,128
  803454:	10bfe004 	addi	r2,r2,-128
  803458:	10000c1e 	bne	r2,zero,80348c <logic+0x28f4>
  80345c:	e0bffc17 	ldw	r2,-16(fp)
  803460:	10802283 	ldbu	r2,138(r2)
  803464:	10803fcc 	andi	r2,r2,255
  803468:	1080201c 	xori	r2,r2,128
  80346c:	10bfe004 	addi	r2,r2,-128
  803470:	1000061e 	bne	r2,zero,80348c <logic+0x28f4>
  803474:	e0bffc17 	ldw	r2,-16(fp)
  803478:	10801e03 	ldbu	r2,120(r2)
  80347c:	10803fcc 	andi	r2,r2,255
  803480:	1080201c 	xori	r2,r2,128
  803484:	10bfe004 	addi	r2,r2,-128
  803488:	10000226 	beq	r2,zero,803494 <logic+0x28fc>
  80348c:	00800044 	movi	r2,1
  803490:	00000106 	br	803498 <logic+0x2900>
  803494:	0005883a 	mov	r2,zero
  803498:	1007883a 	mov	r3,r2
  80349c:	e0bffc17 	ldw	r2,-16(fp)
  8034a0:	10c02045 	stb	r3,129(r2)
  d->_g37 = d->_GO || d->_g34 || d->_g131_e3 && !d->_cg33;
  8034a4:	e0bffc17 	ldw	r2,-16(fp)
  8034a8:	108035c3 	ldbu	r2,215(r2)
  8034ac:	10803fcc 	andi	r2,r2,255
  8034b0:	1080201c 	xori	r2,r2,128
  8034b4:	10bfe004 	addi	r2,r2,-128
  8034b8:	1000121e 	bne	r2,zero,803504 <logic+0x296c>
  8034bc:	e0bffc17 	ldw	r2,-16(fp)
  8034c0:	10802043 	ldbu	r2,129(r2)
  8034c4:	10803fcc 	andi	r2,r2,255
  8034c8:	1080201c 	xori	r2,r2,128
  8034cc:	10bfe004 	addi	r2,r2,-128
  8034d0:	10000c1e 	bne	r2,zero,803504 <logic+0x296c>
  8034d4:	e0bffc17 	ldw	r2,-16(fp)
  8034d8:	10804703 	ldbu	r2,284(r2)
  8034dc:	10803fcc 	andi	r2,r2,255
  8034e0:	1080201c 	xori	r2,r2,128
  8034e4:	10bfe004 	addi	r2,r2,-128
  8034e8:	10000826 	beq	r2,zero,80350c <logic+0x2974>
  8034ec:	e0bffc17 	ldw	r2,-16(fp)
  8034f0:	10803903 	ldbu	r2,228(r2)
  8034f4:	10803fcc 	andi	r2,r2,255
  8034f8:	1080201c 	xori	r2,r2,128
  8034fc:	10bfe004 	addi	r2,r2,-128
  803500:	1000021e 	bne	r2,zero,80350c <logic+0x2974>
  803504:	00800044 	movi	r2,1
  803508:	00000106 	br	803510 <logic+0x2978>
  80350c:	0005883a 	mov	r2,zero
  803510:	1007883a 	mov	r3,r2
  803514:	e0bffc17 	ldw	r2,-16(fp)
  803518:	10c020c5 	stb	r3,131(r2)
  d->_g52 = d->_pg158_e3;
  80351c:	e0bffc17 	ldw	r2,-16(fp)
  803520:	10c04e43 	ldbu	r3,313(r2)
  803524:	e0bffc17 	ldw	r2,-16(fp)
  803528:	10c02385 	stb	r3,142(r2)
  if (d->_g52) {
  80352c:	e0bffc17 	ldw	r2,-16(fp)
  803530:	10802383 	ldbu	r2,142(r2)
  803534:	10803fcc 	andi	r2,r2,255
  803538:	1080201c 	xori	r2,r2,128
  80353c:	10bfe004 	addi	r2,r2,-128
  803540:	10001226 	beq	r2,zero,80358c <logic+0x29f4>
    d->_region2_VRP_cVRP += d->deltaT;
  803544:	e13ffc17 	ldw	r4,-16(fp)
  803548:	20800b17 	ldw	r2,44(r4)
  80354c:	20c00c17 	ldw	r3,48(r4)
  803550:	e1bffc17 	ldw	r6,-16(fp)
  803554:	31001317 	ldw	r4,76(r6)
  803558:	31401417 	ldw	r5,80(r6)
  80355c:	200d883a 	mov	r6,r4
  803560:	280f883a 	mov	r7,r5
  803564:	1009883a 	mov	r4,r2
  803568:	180b883a 	mov	r5,r3
  80356c:	0805c600 	call	805c60 <__adddf3>
  803570:	1009883a 	mov	r4,r2
  803574:	180b883a 	mov	r5,r3
  803578:	2005883a 	mov	r2,r4
  80357c:	2807883a 	mov	r3,r5
  803580:	e13ffc17 	ldw	r4,-16(fp)
  803584:	20800b15 	stw	r2,44(r4)
  803588:	20c00c15 	stw	r3,48(r4)
  }
  d->_g37_e1 = d->_pg70;
  80358c:	e0bffc17 	ldw	r2,-16(fp)
  803590:	10c04e83 	ldbu	r3,314(r2)
  803594:	e0bffc17 	ldw	r2,-16(fp)
  803598:	10c04445 	stb	r3,273(r2)
  d->_cg75 = d->_region2_VRP_cVRP >= d->VRP_Constraint;
  80359c:	e0bffc17 	ldw	r2,-16(fp)
  8035a0:	14000b17 	ldw	r16,44(r2)
  8035a4:	14400c17 	ldw	r17,48(r2)
  8035a8:	e0bffc17 	ldw	r2,-16(fp)
  8035ac:	10800317 	ldw	r2,12(r2)
  8035b0:	1009883a 	mov	r4,r2
  8035b4:	0806fd80 	call	806fd8 <__floatsidf>
  8035b8:	1009883a 	mov	r4,r2
  8035bc:	180b883a 	mov	r5,r3
  8035c0:	04800044 	movi	r18,1
  8035c4:	200d883a 	mov	r6,r4
  8035c8:	280f883a 	mov	r7,r5
  8035cc:	8009883a 	mov	r4,r16
  8035d0:	880b883a 	mov	r5,r17
  8035d4:	080650c0 	call	80650c <__gedf2>
  8035d8:	1000010e 	bge	r2,zero,8035e0 <logic+0x2a48>
  8035dc:	0025883a 	mov	r18,zero
  8035e0:	9007883a 	mov	r3,r18
  8035e4:	e0bffc17 	ldw	r2,-16(fp)
  8035e8:	10c03bc5 	stb	r3,239(r2)
  d->_g43 = d->_g37_e1 && d->_cg75;
  8035ec:	e0bffc17 	ldw	r2,-16(fp)
  8035f0:	10804443 	ldbu	r2,273(r2)
  8035f4:	10803fcc 	andi	r2,r2,255
  8035f8:	1080201c 	xori	r2,r2,128
  8035fc:	10bfe004 	addi	r2,r2,-128
  803600:	10000826 	beq	r2,zero,803624 <logic+0x2a8c>
  803604:	e0bffc17 	ldw	r2,-16(fp)
  803608:	10803bc3 	ldbu	r2,239(r2)
  80360c:	10803fcc 	andi	r2,r2,255
  803610:	1080201c 	xori	r2,r2,128
  803614:	10bfe004 	addi	r2,r2,-128
  803618:	10000226 	beq	r2,zero,803624 <logic+0x2a8c>
  80361c:	00800044 	movi	r2,1
  803620:	00000106 	br	803628 <logic+0x2a90>
  803624:	0005883a 	mov	r2,zero
  803628:	1007883a 	mov	r3,r2
  80362c:	e0bffc17 	ldw	r2,-16(fp)
  803630:	10c021c5 	stb	r3,135(r2)
  if (d->_g43) {
  803634:	e0bffc17 	ldw	r2,-16(fp)
  803638:	108021c3 	ldbu	r2,135(r2)
  80363c:	10803fcc 	andi	r2,r2,255
  803640:	1080201c 	xori	r2,r2,128
  803644:	10bfe004 	addi	r2,r2,-128
  803648:	10000326 	beq	r2,zero,803658 <logic+0x2ac0>
    d->_Pacemaker_local__Atrig3 = 1;
  80364c:	e0bffc17 	ldw	r2,-16(fp)
  803650:	00c00044 	movi	r3,1
  803654:	10c019c5 	stb	r3,103(r2)
  }
  d->_g43_e2 = d->_pg76_e3;
  803658:	e0bffc17 	ldw	r2,-16(fp)
  80365c:	10c04ec3 	ldbu	r3,315(r2)
  803660:	e0bffc17 	ldw	r2,-16(fp)
  803664:	10c04485 	stb	r3,274(r2)
  d->_cg57 = d->VS || d->VP;
  803668:	e0bffc17 	ldw	r2,-16(fp)
  80366c:	10800043 	ldbu	r2,1(r2)
  803670:	10803fcc 	andi	r2,r2,255
  803674:	1080201c 	xori	r2,r2,128
  803678:	10bfe004 	addi	r2,r2,-128
  80367c:	1000061e 	bne	r2,zero,803698 <logic+0x2b00>
  803680:	e0bffc17 	ldw	r2,-16(fp)
  803684:	10801743 	ldbu	r2,93(r2)
  803688:	10803fcc 	andi	r2,r2,255
  80368c:	1080201c 	xori	r2,r2,128
  803690:	10bfe004 	addi	r2,r2,-128
  803694:	10000226 	beq	r2,zero,8036a0 <logic+0x2b08>
  803698:	00800044 	movi	r2,1
  80369c:	00000106 	br	8036a4 <logic+0x2b0c>
  8036a0:	0005883a 	mov	r2,zero
  8036a4:	1007883a 	mov	r3,r2
  8036a8:	e0bffc17 	ldw	r2,-16(fp)
  8036ac:	10c03a85 	stb	r3,234(r2)
  d->_g52_e3 = d->_g43_e2 && d->_cg57;
  8036b0:	e0bffc17 	ldw	r2,-16(fp)
  8036b4:	10804483 	ldbu	r2,274(r2)
  8036b8:	10803fcc 	andi	r2,r2,255
  8036bc:	1080201c 	xori	r2,r2,128
  8036c0:	10bfe004 	addi	r2,r2,-128
  8036c4:	10000826 	beq	r2,zero,8036e8 <logic+0x2b50>
  8036c8:	e0bffc17 	ldw	r2,-16(fp)
  8036cc:	10803a83 	ldbu	r2,234(r2)
  8036d0:	10803fcc 	andi	r2,r2,255
  8036d4:	1080201c 	xori	r2,r2,128
  8036d8:	10bfe004 	addi	r2,r2,-128
  8036dc:	10000226 	beq	r2,zero,8036e8 <logic+0x2b50>
  8036e0:	00800044 	movi	r2,1
  8036e4:	00000106 	br	8036ec <logic+0x2b54>
  8036e8:	0005883a 	mov	r2,zero
  8036ec:	1007883a 	mov	r3,r2
  8036f0:	e0bffc17 	ldw	r2,-16(fp)
  8036f4:	10c044c5 	stb	r3,275(r2)
  if (d->_g52_e3) {
  8036f8:	e0bffc17 	ldw	r2,-16(fp)
  8036fc:	108044c3 	ldbu	r2,275(r2)
  803700:	10803fcc 	andi	r2,r2,255
  803704:	1080201c 	xori	r2,r2,128
  803708:	10bfe004 	addi	r2,r2,-128
  80370c:	10000526 	beq	r2,zero,803724 <logic+0x2b8c>
    d->_region2_VRP_cVRP = 0;
  803710:	e0bffc17 	ldw	r2,-16(fp)
  803714:	10000b15 	stw	zero,44(r2)
  803718:	10000c15 	stw	zero,48(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  80371c:	e0bffc17 	ldw	r2,-16(fp)
  803720:	100019c5 	stb	zero,103(r2)
  }
  d->_g33 = d->_g52_e3 || d->_g5;
  803724:	e0bffc17 	ldw	r2,-16(fp)
  803728:	108044c3 	ldbu	r2,275(r2)
  80372c:	10803fcc 	andi	r2,r2,255
  803730:	1080201c 	xori	r2,r2,128
  803734:	10bfe004 	addi	r2,r2,-128
  803738:	1000061e 	bne	r2,zero,803754 <logic+0x2bbc>
  80373c:	e0bffc17 	ldw	r2,-16(fp)
  803740:	10801b83 	ldbu	r2,110(r2)
  803744:	10803fcc 	andi	r2,r2,255
  803748:	1080201c 	xori	r2,r2,128
  80374c:	10bfe004 	addi	r2,r2,-128
  803750:	10000226 	beq	r2,zero,80375c <logic+0x2bc4>
  803754:	00800044 	movi	r2,1
  803758:	00000106 	br	803760 <logic+0x2bc8>
  80375c:	0005883a 	mov	r2,zero
  803760:	1007883a 	mov	r3,r2
  803764:	e0bffc17 	ldw	r2,-16(fp)
  803768:	10c02005 	stb	r3,128(r2)
  d->_cg60 = d->_Pacemaker_local__Atrig3;
  80376c:	e0bffc17 	ldw	r2,-16(fp)
  803770:	10c019c3 	ldbu	r3,103(r2)
  803774:	e0bffc17 	ldw	r2,-16(fp)
  803778:	10c03ac5 	stb	r3,235(r2)
  d->_g53 = d->_g33 && !d->_cg60;
  80377c:	e0bffc17 	ldw	r2,-16(fp)
  803780:	10802003 	ldbu	r2,128(r2)
  803784:	10803fcc 	andi	r2,r2,255
  803788:	1080201c 	xori	r2,r2,128
  80378c:	10bfe004 	addi	r2,r2,-128
  803790:	10000826 	beq	r2,zero,8037b4 <logic+0x2c1c>
  803794:	e0bffc17 	ldw	r2,-16(fp)
  803798:	10803ac3 	ldbu	r2,235(r2)
  80379c:	10803fcc 	andi	r2,r2,255
  8037a0:	1080201c 	xori	r2,r2,128
  8037a4:	10bfe004 	addi	r2,r2,-128
  8037a8:	1000021e 	bne	r2,zero,8037b4 <logic+0x2c1c>
  8037ac:	00800044 	movi	r2,1
  8037b0:	00000106 	br	8037b8 <logic+0x2c20>
  8037b4:	0005883a 	mov	r2,zero
  8037b8:	1007883a 	mov	r3,r2
  8037bc:	e0bffc17 	ldw	r2,-16(fp)
  8037c0:	10c023c5 	stb	r3,143(r2)
  d->_g63 = !d->_g53;
  8037c4:	e0bffc17 	ldw	r2,-16(fp)
  8037c8:	108023c3 	ldbu	r2,143(r2)
  8037cc:	10803fcc 	andi	r2,r2,255
  8037d0:	1080201c 	xori	r2,r2,128
  8037d4:	10bfe004 	addi	r2,r2,-128
  8037d8:	1005003a 	cmpeq	r2,r2,zero
  8037dc:	1007883a 	mov	r3,r2
  8037e0:	e0bffc17 	ldw	r2,-16(fp)
  8037e4:	10c02505 	stb	r3,148(r2)
  d->_g60 = d->_g33 && d->_cg60;
  8037e8:	e0bffc17 	ldw	r2,-16(fp)
  8037ec:	10802003 	ldbu	r2,128(r2)
  8037f0:	10803fcc 	andi	r2,r2,255
  8037f4:	1080201c 	xori	r2,r2,128
  8037f8:	10bfe004 	addi	r2,r2,-128
  8037fc:	10000826 	beq	r2,zero,803820 <logic+0x2c88>
  803800:	e0bffc17 	ldw	r2,-16(fp)
  803804:	10803ac3 	ldbu	r2,235(r2)
  803808:	10803fcc 	andi	r2,r2,255
  80380c:	1080201c 	xori	r2,r2,128
  803810:	10bfe004 	addi	r2,r2,-128
  803814:	10000226 	beq	r2,zero,803820 <logic+0x2c88>
  803818:	00800044 	movi	r2,1
  80381c:	00000106 	br	803824 <logic+0x2c8c>
  803820:	0005883a 	mov	r2,zero
  803824:	1007883a 	mov	r3,r2
  803828:	e0bffc17 	ldw	r2,-16(fp)
  80382c:	10c02485 	stb	r3,146(r2)
  d->_g69 = d->_pg68;
  803830:	e0bffc17 	ldw	r2,-16(fp)
  803834:	10c04f03 	ldbu	r3,316(r2)
  803838:	e0bffc17 	ldw	r2,-16(fp)
  80383c:	10c02645 	stb	r3,153(r2)
  d->_g72 = d->_pg71;
  803840:	e0bffc17 	ldw	r2,-16(fp)
  803844:	10c04f43 	ldbu	r3,317(r2)
  803848:	e0bffc17 	ldw	r2,-16(fp)
  80384c:	10c02705 	stb	r3,156(r2)
  d->_g69 = d->_g52_e3 || d->_g69 || d->_g72;
  803850:	e0bffc17 	ldw	r2,-16(fp)
  803854:	108044c3 	ldbu	r2,275(r2)
  803858:	10803fcc 	andi	r2,r2,255
  80385c:	1080201c 	xori	r2,r2,128
  803860:	10bfe004 	addi	r2,r2,-128
  803864:	10000c1e 	bne	r2,zero,803898 <logic+0x2d00>
  803868:	e0bffc17 	ldw	r2,-16(fp)
  80386c:	10802643 	ldbu	r2,153(r2)
  803870:	10803fcc 	andi	r2,r2,255
  803874:	1080201c 	xori	r2,r2,128
  803878:	10bfe004 	addi	r2,r2,-128
  80387c:	1000061e 	bne	r2,zero,803898 <logic+0x2d00>
  803880:	e0bffc17 	ldw	r2,-16(fp)
  803884:	10802703 	ldbu	r2,156(r2)
  803888:	10803fcc 	andi	r2,r2,255
  80388c:	1080201c 	xori	r2,r2,128
  803890:	10bfe004 	addi	r2,r2,-128
  803894:	10000226 	beq	r2,zero,8038a0 <logic+0x2d08>
  803898:	00800044 	movi	r2,1
  80389c:	00000106 	br	8038a4 <logic+0x2d0c>
  8038a0:	0005883a 	mov	r2,zero
  8038a4:	1007883a 	mov	r3,r2
  8038a8:	e0bffc17 	ldw	r2,-16(fp)
  8038ac:	10c02645 	stb	r3,153(r2)
  d->_cg65 = d->_region2_VRP_cVRP < d->VRP_Constraint;
  8038b0:	e0bffc17 	ldw	r2,-16(fp)
  8038b4:	14000b17 	ldw	r16,44(r2)
  8038b8:	14400c17 	ldw	r17,48(r2)
  8038bc:	e0bffc17 	ldw	r2,-16(fp)
  8038c0:	10800317 	ldw	r2,12(r2)
  8038c4:	1009883a 	mov	r4,r2
  8038c8:	0806fd80 	call	806fd8 <__floatsidf>
  8038cc:	1009883a 	mov	r4,r2
  8038d0:	180b883a 	mov	r5,r3
  8038d4:	04800044 	movi	r18,1
  8038d8:	200d883a 	mov	r6,r4
  8038dc:	280f883a 	mov	r7,r5
  8038e0:	8009883a 	mov	r4,r16
  8038e4:	880b883a 	mov	r5,r17
  8038e8:	08065e80 	call	8065e8 <__ledf2>
  8038ec:	10000116 	blt	r2,zero,8038f4 <logic+0x2d5c>
  8038f0:	0025883a 	mov	r18,zero
  8038f4:	9007883a 	mov	r3,r18
  8038f8:	e0bffc17 	ldw	r2,-16(fp)
  8038fc:	10c03b05 	stb	r3,236(r2)
  d->_g72 = d->_g69 && !d->_cg65;
  803900:	e0bffc17 	ldw	r2,-16(fp)
  803904:	10802643 	ldbu	r2,153(r2)
  803908:	10803fcc 	andi	r2,r2,255
  80390c:	1080201c 	xori	r2,r2,128
  803910:	10bfe004 	addi	r2,r2,-128
  803914:	10000826 	beq	r2,zero,803938 <logic+0x2da0>
  803918:	e0bffc17 	ldw	r2,-16(fp)
  80391c:	10803b03 	ldbu	r2,236(r2)
  803920:	10803fcc 	andi	r2,r2,255
  803924:	1080201c 	xori	r2,r2,128
  803928:	10bfe004 	addi	r2,r2,-128
  80392c:	1000021e 	bne	r2,zero,803938 <logic+0x2da0>
  803930:	00800044 	movi	r2,1
  803934:	00000106 	br	80393c <logic+0x2da4>
  803938:	0005883a 	mov	r2,zero
  80393c:	1007883a 	mov	r3,r2
  803940:	e0bffc17 	ldw	r2,-16(fp)
  803944:	10c02705 	stb	r3,156(r2)
  d->_cg70 = d->_Pacemaker_local__Atrig3;
  803948:	e0bffc17 	ldw	r2,-16(fp)
  80394c:	10c019c3 	ldbu	r3,103(r2)
  803950:	e0bffc17 	ldw	r2,-16(fp)
  803954:	10c03b85 	stb	r3,238(r2)
  d->_g71 = d->_g72 && !d->_cg70;
  803958:	e0bffc17 	ldw	r2,-16(fp)
  80395c:	10802703 	ldbu	r2,156(r2)
  803960:	10803fcc 	andi	r2,r2,255
  803964:	1080201c 	xori	r2,r2,128
  803968:	10bfe004 	addi	r2,r2,-128
  80396c:	10000826 	beq	r2,zero,803990 <logic+0x2df8>
  803970:	e0bffc17 	ldw	r2,-16(fp)
  803974:	10803b83 	ldbu	r2,238(r2)
  803978:	10803fcc 	andi	r2,r2,255
  80397c:	1080201c 	xori	r2,r2,128
  803980:	10bfe004 	addi	r2,r2,-128
  803984:	1000021e 	bne	r2,zero,803990 <logic+0x2df8>
  803988:	00800044 	movi	r2,1
  80398c:	00000106 	br	803994 <logic+0x2dfc>
  803990:	0005883a 	mov	r2,zero
  803994:	1007883a 	mov	r3,r2
  803998:	e0bffc17 	ldw	r2,-16(fp)
  80399c:	10c026c5 	stb	r3,155(r2)
  d->_g65 = d->_g69 && d->_cg65;
  8039a0:	e0bffc17 	ldw	r2,-16(fp)
  8039a4:	10802643 	ldbu	r2,153(r2)
  8039a8:	10803fcc 	andi	r2,r2,255
  8039ac:	1080201c 	xori	r2,r2,128
  8039b0:	10bfe004 	addi	r2,r2,-128
  8039b4:	10000826 	beq	r2,zero,8039d8 <logic+0x2e40>
  8039b8:	e0bffc17 	ldw	r2,-16(fp)
  8039bc:	10803b03 	ldbu	r2,236(r2)
  8039c0:	10803fcc 	andi	r2,r2,255
  8039c4:	1080201c 	xori	r2,r2,128
  8039c8:	10bfe004 	addi	r2,r2,-128
  8039cc:	10000226 	beq	r2,zero,8039d8 <logic+0x2e40>
  8039d0:	00800044 	movi	r2,1
  8039d4:	00000106 	br	8039dc <logic+0x2e44>
  8039d8:	0005883a 	mov	r2,zero
  8039dc:	1007883a 	mov	r3,r2
  8039e0:	e0bffc17 	ldw	r2,-16(fp)
  8039e4:	10c02545 	stb	r3,149(r2)
  if (d->_g65) {
  8039e8:	e0bffc17 	ldw	r2,-16(fp)
  8039ec:	10802543 	ldbu	r2,149(r2)
  8039f0:	10803fcc 	andi	r2,r2,255
  8039f4:	1080201c 	xori	r2,r2,128
  8039f8:	10bfe004 	addi	r2,r2,-128
  8039fc:	10003426 	beq	r2,zero,803ad0 <logic+0x2f38>
    d->sleepT = (d->sleepT < (d->VRP_Constraint - d->_region2_VRP_cVRP)) ? d->sleepT : (d->VRP_Constraint - d->_region2_VRP_cVRP);
  803a00:	e0bffc17 	ldw	r2,-16(fp)
  803a04:	14001517 	ldw	r16,84(r2)
  803a08:	14401617 	ldw	r17,88(r2)
  803a0c:	e0bffc17 	ldw	r2,-16(fp)
  803a10:	10800317 	ldw	r2,12(r2)
  803a14:	1009883a 	mov	r4,r2
  803a18:	0806fd80 	call	806fd8 <__floatsidf>
  803a1c:	1011883a 	mov	r8,r2
  803a20:	1813883a 	mov	r9,r3
  803a24:	e13ffc17 	ldw	r4,-16(fp)
  803a28:	20800b17 	ldw	r2,44(r4)
  803a2c:	20c00c17 	ldw	r3,48(r4)
  803a30:	100d883a 	mov	r6,r2
  803a34:	180f883a 	mov	r7,r3
  803a38:	4009883a 	mov	r4,r8
  803a3c:	480b883a 	mov	r5,r9
  803a40:	08066dc0 	call	8066dc <__subdf3>
  803a44:	1009883a 	mov	r4,r2
  803a48:	180b883a 	mov	r5,r3
  803a4c:	2005883a 	mov	r2,r4
  803a50:	2807883a 	mov	r3,r5
  803a54:	100d883a 	mov	r6,r2
  803a58:	180f883a 	mov	r7,r3
  803a5c:	8009883a 	mov	r4,r16
  803a60:	880b883a 	mov	r5,r17
  803a64:	08065e80 	call	8065e8 <__ledf2>
  803a68:	1000040e 	bge	r2,zero,803a7c <logic+0x2ee4>
  803a6c:	e13ffc17 	ldw	r4,-16(fp)
  803a70:	20801517 	ldw	r2,84(r4)
  803a74:	20c01617 	ldw	r3,88(r4)
  803a78:	00001206 	br	803ac4 <logic+0x2f2c>
  803a7c:	e0bffc17 	ldw	r2,-16(fp)
  803a80:	10800317 	ldw	r2,12(r2)
  803a84:	1009883a 	mov	r4,r2
  803a88:	0806fd80 	call	806fd8 <__floatsidf>
  803a8c:	1011883a 	mov	r8,r2
  803a90:	1813883a 	mov	r9,r3
  803a94:	e13ffc17 	ldw	r4,-16(fp)
  803a98:	20800b17 	ldw	r2,44(r4)
  803a9c:	20c00c17 	ldw	r3,48(r4)
  803aa0:	100d883a 	mov	r6,r2
  803aa4:	180f883a 	mov	r7,r3
  803aa8:	4009883a 	mov	r4,r8
  803aac:	480b883a 	mov	r5,r9
  803ab0:	08066dc0 	call	8066dc <__subdf3>
  803ab4:	1009883a 	mov	r4,r2
  803ab8:	180b883a 	mov	r5,r3
  803abc:	2005883a 	mov	r2,r4
  803ac0:	2807883a 	mov	r3,r5
  803ac4:	e13ffc17 	ldw	r4,-16(fp)
  803ac8:	20801515 	stw	r2,84(r4)
  803acc:	20c01615 	stw	r3,88(r4)
  }
  d->_cg66 = d->_Pacemaker_local__Atrig3;
  803ad0:	e0bffc17 	ldw	r2,-16(fp)
  803ad4:	10c019c3 	ldbu	r3,103(r2)
  803ad8:	e0bffc17 	ldw	r2,-16(fp)
  803adc:	10c03b45 	stb	r3,237(r2)
  d->_g68 = d->_g65 && !d->_cg66;
  803ae0:	e0bffc17 	ldw	r2,-16(fp)
  803ae4:	10802543 	ldbu	r2,149(r2)
  803ae8:	10803fcc 	andi	r2,r2,255
  803aec:	1080201c 	xori	r2,r2,128
  803af0:	10bfe004 	addi	r2,r2,-128
  803af4:	10000826 	beq	r2,zero,803b18 <logic+0x2f80>
  803af8:	e0bffc17 	ldw	r2,-16(fp)
  803afc:	10803b43 	ldbu	r2,237(r2)
  803b00:	10803fcc 	andi	r2,r2,255
  803b04:	1080201c 	xori	r2,r2,128
  803b08:	10bfe004 	addi	r2,r2,-128
  803b0c:	1000021e 	bne	r2,zero,803b18 <logic+0x2f80>
  803b10:	00800044 	movi	r2,1
  803b14:	00000106 	br	803b1c <logic+0x2f84>
  803b18:	0005883a 	mov	r2,zero
  803b1c:	1007883a 	mov	r3,r2
  803b20:	e0bffc17 	ldw	r2,-16(fp)
  803b24:	10c02605 	stb	r3,152(r2)
  d->_g67_e2 = !(d->_g71 || d->_g68);
  803b28:	e0bffc17 	ldw	r2,-16(fp)
  803b2c:	108026c3 	ldbu	r2,155(r2)
  803b30:	10803fcc 	andi	r2,r2,255
  803b34:	1080201c 	xori	r2,r2,128
  803b38:	10bfe004 	addi	r2,r2,-128
  803b3c:	1000081e 	bne	r2,zero,803b60 <logic+0x2fc8>
  803b40:	e0bffc17 	ldw	r2,-16(fp)
  803b44:	10802603 	ldbu	r2,152(r2)
  803b48:	10803fcc 	andi	r2,r2,255
  803b4c:	1080201c 	xori	r2,r2,128
  803b50:	10bfe004 	addi	r2,r2,-128
  803b54:	1000021e 	bne	r2,zero,803b60 <logic+0x2fc8>
  803b58:	00800044 	movi	r2,1
  803b5c:	00000106 	br	803b64 <logic+0x2fcc>
  803b60:	0005883a 	mov	r2,zero
  803b64:	1007883a 	mov	r3,r2
  803b68:	e0bffc17 	ldw	r2,-16(fp)
  803b6c:	10c04545 	stb	r3,277(r2)
  d->_g66 = d->_g65 && d->_cg66 || d->_g72 && d->_cg70;
  803b70:	e0bffc17 	ldw	r2,-16(fp)
  803b74:	10802543 	ldbu	r2,149(r2)
  803b78:	10803fcc 	andi	r2,r2,255
  803b7c:	1080201c 	xori	r2,r2,128
  803b80:	10bfe004 	addi	r2,r2,-128
  803b84:	10000626 	beq	r2,zero,803ba0 <logic+0x3008>
  803b88:	e0bffc17 	ldw	r2,-16(fp)
  803b8c:	10803b43 	ldbu	r2,237(r2)
  803b90:	10803fcc 	andi	r2,r2,255
  803b94:	1080201c 	xori	r2,r2,128
  803b98:	10bfe004 	addi	r2,r2,-128
  803b9c:	10000c1e 	bne	r2,zero,803bd0 <logic+0x3038>
  803ba0:	e0bffc17 	ldw	r2,-16(fp)
  803ba4:	10802703 	ldbu	r2,156(r2)
  803ba8:	10803fcc 	andi	r2,r2,255
  803bac:	1080201c 	xori	r2,r2,128
  803bb0:	10bfe004 	addi	r2,r2,-128
  803bb4:	10000826 	beq	r2,zero,803bd8 <logic+0x3040>
  803bb8:	e0bffc17 	ldw	r2,-16(fp)
  803bbc:	10803b83 	ldbu	r2,238(r2)
  803bc0:	10803fcc 	andi	r2,r2,255
  803bc4:	1080201c 	xori	r2,r2,128
  803bc8:	10bfe004 	addi	r2,r2,-128
  803bcc:	10000226 	beq	r2,zero,803bd8 <logic+0x3040>
  803bd0:	00800044 	movi	r2,1
  803bd4:	00000106 	br	803bdc <logic+0x3044>
  803bd8:	0005883a 	mov	r2,zero
  803bdc:	1007883a 	mov	r3,r2
  803be0:	e0bffc17 	ldw	r2,-16(fp)
  803be4:	10c02585 	stb	r3,150(r2)
  d->_g70 = d->_g52_e3 || d->_g37_e1 && !d->_cg75;
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	108044c3 	ldbu	r2,275(r2)
  803bf0:	10803fcc 	andi	r2,r2,255
  803bf4:	1080201c 	xori	r2,r2,128
  803bf8:	10bfe004 	addi	r2,r2,-128
  803bfc:	10000c1e 	bne	r2,zero,803c30 <logic+0x3098>
  803c00:	e0bffc17 	ldw	r2,-16(fp)
  803c04:	10804443 	ldbu	r2,273(r2)
  803c08:	10803fcc 	andi	r2,r2,255
  803c0c:	1080201c 	xori	r2,r2,128
  803c10:	10bfe004 	addi	r2,r2,-128
  803c14:	10000826 	beq	r2,zero,803c38 <logic+0x30a0>
  803c18:	e0bffc17 	ldw	r2,-16(fp)
  803c1c:	10803bc3 	ldbu	r2,239(r2)
  803c20:	10803fcc 	andi	r2,r2,255
  803c24:	1080201c 	xori	r2,r2,128
  803c28:	10bfe004 	addi	r2,r2,-128
  803c2c:	1000021e 	bne	r2,zero,803c38 <logic+0x30a0>
  803c30:	00800044 	movi	r2,1
  803c34:	00000106 	br	803c3c <logic+0x30a4>
  803c38:	0005883a 	mov	r2,zero
  803c3c:	1007883a 	mov	r3,r2
  803c40:	e0bffc17 	ldw	r2,-16(fp)
  803c44:	10c02685 	stb	r3,154(r2)
  d->_g75 = !d->_g70;
  803c48:	e0bffc17 	ldw	r2,-16(fp)
  803c4c:	10802683 	ldbu	r2,154(r2)
  803c50:	10803fcc 	andi	r2,r2,255
  803c54:	1080201c 	xori	r2,r2,128
  803c58:	10bfe004 	addi	r2,r2,-128
  803c5c:	1005003a 	cmpeq	r2,r2,zero
  803c60:	1007883a 	mov	r3,r2
  803c64:	e0bffc17 	ldw	r2,-16(fp)
  803c68:	10c02745 	stb	r3,157(r2)
  d->_g58 = (d->_g63 || d->_g60) && (d->_g67_e2 || d->_g66) && (d->_g75 || d->_g43) && (d->_g60 || d->_g66 || d->_g43);
  803c6c:	e0bffc17 	ldw	r2,-16(fp)
  803c70:	10802503 	ldbu	r2,148(r2)
  803c74:	10803fcc 	andi	r2,r2,255
  803c78:	1080201c 	xori	r2,r2,128
  803c7c:	10bfe004 	addi	r2,r2,-128
  803c80:	1000061e 	bne	r2,zero,803c9c <logic+0x3104>
  803c84:	e0bffc17 	ldw	r2,-16(fp)
  803c88:	10802483 	ldbu	r2,146(r2)
  803c8c:	10803fcc 	andi	r2,r2,255
  803c90:	1080201c 	xori	r2,r2,128
  803c94:	10bfe004 	addi	r2,r2,-128
  803c98:	10002c26 	beq	r2,zero,803d4c <logic+0x31b4>
  803c9c:	e0bffc17 	ldw	r2,-16(fp)
  803ca0:	10804543 	ldbu	r2,277(r2)
  803ca4:	10803fcc 	andi	r2,r2,255
  803ca8:	1080201c 	xori	r2,r2,128
  803cac:	10bfe004 	addi	r2,r2,-128
  803cb0:	1000061e 	bne	r2,zero,803ccc <logic+0x3134>
  803cb4:	e0bffc17 	ldw	r2,-16(fp)
  803cb8:	10802583 	ldbu	r2,150(r2)
  803cbc:	10803fcc 	andi	r2,r2,255
  803cc0:	1080201c 	xori	r2,r2,128
  803cc4:	10bfe004 	addi	r2,r2,-128
  803cc8:	10002026 	beq	r2,zero,803d4c <logic+0x31b4>
  803ccc:	e0bffc17 	ldw	r2,-16(fp)
  803cd0:	10802743 	ldbu	r2,157(r2)
  803cd4:	10803fcc 	andi	r2,r2,255
  803cd8:	1080201c 	xori	r2,r2,128
  803cdc:	10bfe004 	addi	r2,r2,-128
  803ce0:	1000061e 	bne	r2,zero,803cfc <logic+0x3164>
  803ce4:	e0bffc17 	ldw	r2,-16(fp)
  803ce8:	108021c3 	ldbu	r2,135(r2)
  803cec:	10803fcc 	andi	r2,r2,255
  803cf0:	1080201c 	xori	r2,r2,128
  803cf4:	10bfe004 	addi	r2,r2,-128
  803cf8:	10001426 	beq	r2,zero,803d4c <logic+0x31b4>
  803cfc:	e0bffc17 	ldw	r2,-16(fp)
  803d00:	10802483 	ldbu	r2,146(r2)
  803d04:	10803fcc 	andi	r2,r2,255
  803d08:	1080201c 	xori	r2,r2,128
  803d0c:	10bfe004 	addi	r2,r2,-128
  803d10:	10000c1e 	bne	r2,zero,803d44 <logic+0x31ac>
  803d14:	e0bffc17 	ldw	r2,-16(fp)
  803d18:	10802583 	ldbu	r2,150(r2)
  803d1c:	10803fcc 	andi	r2,r2,255
  803d20:	1080201c 	xori	r2,r2,128
  803d24:	10bfe004 	addi	r2,r2,-128
  803d28:	1000061e 	bne	r2,zero,803d44 <logic+0x31ac>
  803d2c:	e0bffc17 	ldw	r2,-16(fp)
  803d30:	108021c3 	ldbu	r2,135(r2)
  803d34:	10803fcc 	andi	r2,r2,255
  803d38:	1080201c 	xori	r2,r2,128
  803d3c:	10bfe004 	addi	r2,r2,-128
  803d40:	10000226 	beq	r2,zero,803d4c <logic+0x31b4>
  803d44:	00800044 	movi	r2,1
  803d48:	00000106 	br	803d50 <logic+0x31b8>
  803d4c:	0005883a 	mov	r2,zero
  803d50:	1007883a 	mov	r3,r2
  803d54:	e0bffc17 	ldw	r2,-16(fp)
  803d58:	10c02445 	stb	r3,145(r2)
  d->_g76_e3 = d->_GO || d->_g58 || d->_g43_e2 && !d->_cg57;
  803d5c:	e0bffc17 	ldw	r2,-16(fp)
  803d60:	108035c3 	ldbu	r2,215(r2)
  803d64:	10803fcc 	andi	r2,r2,255
  803d68:	1080201c 	xori	r2,r2,128
  803d6c:	10bfe004 	addi	r2,r2,-128
  803d70:	1000121e 	bne	r2,zero,803dbc <logic+0x3224>
  803d74:	e0bffc17 	ldw	r2,-16(fp)
  803d78:	10802443 	ldbu	r2,145(r2)
  803d7c:	10803fcc 	andi	r2,r2,255
  803d80:	1080201c 	xori	r2,r2,128
  803d84:	10bfe004 	addi	r2,r2,-128
  803d88:	10000c1e 	bne	r2,zero,803dbc <logic+0x3224>
  803d8c:	e0bffc17 	ldw	r2,-16(fp)
  803d90:	10804483 	ldbu	r2,274(r2)
  803d94:	10803fcc 	andi	r2,r2,255
  803d98:	1080201c 	xori	r2,r2,128
  803d9c:	10bfe004 	addi	r2,r2,-128
  803da0:	10000826 	beq	r2,zero,803dc4 <logic+0x322c>
  803da4:	e0bffc17 	ldw	r2,-16(fp)
  803da8:	10803a83 	ldbu	r2,234(r2)
  803dac:	10803fcc 	andi	r2,r2,255
  803db0:	1080201c 	xori	r2,r2,128
  803db4:	10bfe004 	addi	r2,r2,-128
  803db8:	1000021e 	bne	r2,zero,803dc4 <logic+0x322c>
  803dbc:	00800044 	movi	r2,1
  803dc0:	00000106 	br	803dc8 <logic+0x3230>
  803dc4:	0005883a 	mov	r2,zero
  803dc8:	1007883a 	mov	r3,r2
  803dcc:	e0bffc17 	ldw	r2,-16(fp)
  803dd0:	10c04585 	stb	r3,278(r2)
  d->_g61_e1 = d->_pg76;
  803dd4:	e0bffc17 	ldw	r2,-16(fp)
  803dd8:	10c04f83 	ldbu	r3,318(r2)
  803ddc:	e0bffc17 	ldw	r2,-16(fp)
  803de0:	10c04505 	stb	r3,276(r2)
  d->_cg81 = (d->VS || d->VP) && !d->VRP;
  803de4:	e0bffc17 	ldw	r2,-16(fp)
  803de8:	10800043 	ldbu	r2,1(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1080201c 	xori	r2,r2,128
  803df4:	10bfe004 	addi	r2,r2,-128
  803df8:	1000061e 	bne	r2,zero,803e14 <logic+0x327c>
  803dfc:	e0bffc17 	ldw	r2,-16(fp)
  803e00:	10801743 	ldbu	r2,93(r2)
  803e04:	10803fcc 	andi	r2,r2,255
  803e08:	1080201c 	xori	r2,r2,128
  803e0c:	10bfe004 	addi	r2,r2,-128
  803e10:	10000826 	beq	r2,zero,803e34 <logic+0x329c>
  803e14:	e0bffc17 	ldw	r2,-16(fp)
  803e18:	10801803 	ldbu	r2,96(r2)
  803e1c:	10803fcc 	andi	r2,r2,255
  803e20:	1080201c 	xori	r2,r2,128
  803e24:	10bfe004 	addi	r2,r2,-128
  803e28:	1000021e 	bne	r2,zero,803e34 <logic+0x329c>
  803e2c:	00800044 	movi	r2,1
  803e30:	00000106 	br	803e38 <logic+0x32a0>
  803e34:	0005883a 	mov	r2,zero
  803e38:	1007883a 	mov	r3,r2
  803e3c:	e0bffc17 	ldw	r2,-16(fp)
  803e40:	10c03c45 	stb	r3,241(r2)
  d->_g76 = d->_GO || d->_g102 || d->_g104 && !d->_cg105 || d->_g61_e1 && !d->_cg81;
  803e44:	e0bffc17 	ldw	r2,-16(fp)
  803e48:	108035c3 	ldbu	r2,215(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1080201c 	xori	r2,r2,128
  803e54:	10bfe004 	addi	r2,r2,-128
  803e58:	10001e1e 	bne	r2,zero,803ed4 <logic+0x333c>
  803e5c:	e0bffc17 	ldw	r2,-16(fp)
  803e60:	10802b83 	ldbu	r2,174(r2)
  803e64:	10803fcc 	andi	r2,r2,255
  803e68:	1080201c 	xori	r2,r2,128
  803e6c:	10bfe004 	addi	r2,r2,-128
  803e70:	1000181e 	bne	r2,zero,803ed4 <logic+0x333c>
  803e74:	e0bffc17 	ldw	r2,-16(fp)
  803e78:	10802c03 	ldbu	r2,176(r2)
  803e7c:	10803fcc 	andi	r2,r2,255
  803e80:	1080201c 	xori	r2,r2,128
  803e84:	10bfe004 	addi	r2,r2,-128
  803e88:	10000626 	beq	r2,zero,803ea4 <logic+0x330c>
  803e8c:	e0bffc17 	ldw	r2,-16(fp)
  803e90:	10803c03 	ldbu	r2,240(r2)
  803e94:	10803fcc 	andi	r2,r2,255
  803e98:	1080201c 	xori	r2,r2,128
  803e9c:	10bfe004 	addi	r2,r2,-128
  803ea0:	10000c26 	beq	r2,zero,803ed4 <logic+0x333c>
  803ea4:	e0bffc17 	ldw	r2,-16(fp)
  803ea8:	10804503 	ldbu	r2,276(r2)
  803eac:	10803fcc 	andi	r2,r2,255
  803eb0:	1080201c 	xori	r2,r2,128
  803eb4:	10bfe004 	addi	r2,r2,-128
  803eb8:	10000826 	beq	r2,zero,803edc <logic+0x3344>
  803ebc:	e0bffc17 	ldw	r2,-16(fp)
  803ec0:	10803c43 	ldbu	r2,241(r2)
  803ec4:	10803fcc 	andi	r2,r2,255
  803ec8:	1080201c 	xori	r2,r2,128
  803ecc:	10bfe004 	addi	r2,r2,-128
  803ed0:	1000021e 	bne	r2,zero,803edc <logic+0x3344>
  803ed4:	00800044 	movi	r2,1
  803ed8:	00000106 	br	803ee0 <logic+0x3348>
  803edc:	0005883a 	mov	r2,zero
  803ee0:	1007883a 	mov	r3,r2
  803ee4:	e0bffc17 	ldw	r2,-16(fp)
  803ee8:	10c02785 	stb	r3,158(r2)
  d->_g67_e2 = d->_g61_e1 && d->_cg81;
  803eec:	e0bffc17 	ldw	r2,-16(fp)
  803ef0:	10804503 	ldbu	r2,276(r2)
  803ef4:	10803fcc 	andi	r2,r2,255
  803ef8:	1080201c 	xori	r2,r2,128
  803efc:	10bfe004 	addi	r2,r2,-128
  803f00:	10000826 	beq	r2,zero,803f24 <logic+0x338c>
  803f04:	e0bffc17 	ldw	r2,-16(fp)
  803f08:	10803c43 	ldbu	r2,241(r2)
  803f0c:	10803fcc 	andi	r2,r2,255
  803f10:	1080201c 	xori	r2,r2,128
  803f14:	10bfe004 	addi	r2,r2,-128
  803f18:	10000226 	beq	r2,zero,803f24 <logic+0x338c>
  803f1c:	00800044 	movi	r2,1
  803f20:	00000106 	br	803f28 <logic+0x3390>
  803f24:	0005883a 	mov	r2,zero
  803f28:	1007883a 	mov	r3,r2
  803f2c:	e0bffc17 	ldw	r2,-16(fp)
  803f30:	10c04545 	stb	r3,277(r2)
  if (d->_g67_e2) {
  803f34:	e0bffc17 	ldw	r2,-16(fp)
  803f38:	10804543 	ldbu	r2,277(r2)
  803f3c:	10803fcc 	andi	r2,r2,255
  803f40:	1080201c 	xori	r2,r2,128
  803f44:	10bfe004 	addi	r2,r2,-128
  803f48:	10000726 	beq	r2,zero,803f68 <logic+0x33d0>
    d->_region3_AEI_cAEI = 0;
  803f4c:	e0bffc17 	ldw	r2,-16(fp)
  803f50:	10000d15 	stw	zero,52(r2)
  803f54:	10000e15 	stw	zero,56(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  803f58:	e0bffc17 	ldw	r2,-16(fp)
  803f5c:	10001a05 	stb	zero,104(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  803f60:	e0bffc17 	ldw	r2,-16(fp)
  803f64:	10001a45 	stb	zero,105(r2)
  }
  d->_cg83 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803f68:	e0bffc17 	ldw	r2,-16(fp)
  803f6c:	10801a03 	ldbu	r2,104(r2)
  803f70:	10803fcc 	andi	r2,r2,255
  803f74:	1080201c 	xori	r2,r2,128
  803f78:	10bfe004 	addi	r2,r2,-128
  803f7c:	1000061e 	bne	r2,zero,803f98 <logic+0x3400>
  803f80:	e0bffc17 	ldw	r2,-16(fp)
  803f84:	10801a43 	ldbu	r2,105(r2)
  803f88:	10803fcc 	andi	r2,r2,255
  803f8c:	1080201c 	xori	r2,r2,128
  803f90:	10bfe004 	addi	r2,r2,-128
  803f94:	10000226 	beq	r2,zero,803fa0 <logic+0x3408>
  803f98:	00800044 	movi	r2,1
  803f9c:	00000106 	br	803fa4 <logic+0x340c>
  803fa0:	0005883a 	mov	r2,zero
  803fa4:	1007883a 	mov	r3,r2
  803fa8:	e0bffc17 	ldw	r2,-16(fp)
  803fac:	10c03c85 	stb	r3,242(r2)
  d->_g67 = d->_g67_e2 && !d->_cg83 || d->_g16 && !d->_cg85;
  803fb0:	e0bffc17 	ldw	r2,-16(fp)
  803fb4:	10804543 	ldbu	r2,277(r2)
  803fb8:	10803fcc 	andi	r2,r2,255
  803fbc:	1080201c 	xori	r2,r2,128
  803fc0:	10bfe004 	addi	r2,r2,-128
  803fc4:	10000626 	beq	r2,zero,803fe0 <logic+0x3448>
  803fc8:	e0bffc17 	ldw	r2,-16(fp)
  803fcc:	10803c83 	ldbu	r2,242(r2)
  803fd0:	10803fcc 	andi	r2,r2,255
  803fd4:	1080201c 	xori	r2,r2,128
  803fd8:	10bfe004 	addi	r2,r2,-128
  803fdc:	10000c26 	beq	r2,zero,804010 <logic+0x3478>
  803fe0:	e0bffc17 	ldw	r2,-16(fp)
  803fe4:	10801d43 	ldbu	r2,117(r2)
  803fe8:	10803fcc 	andi	r2,r2,255
  803fec:	1080201c 	xori	r2,r2,128
  803ff0:	10bfe004 	addi	r2,r2,-128
  803ff4:	10000826 	beq	r2,zero,804018 <logic+0x3480>
  803ff8:	e0bffc17 	ldw	r2,-16(fp)
  803ffc:	10803cc3 	ldbu	r2,243(r2)
  804000:	10803fcc 	andi	r2,r2,255
  804004:	1080201c 	xori	r2,r2,128
  804008:	10bfe004 	addi	r2,r2,-128
  80400c:	1000021e 	bne	r2,zero,804018 <logic+0x3480>
  804010:	00800044 	movi	r2,1
  804014:	00000106 	br	80401c <logic+0x3484>
  804018:	0005883a 	mov	r2,zero
  80401c:	1007883a 	mov	r3,r2
  804020:	e0bffc17 	ldw	r2,-16(fp)
  804024:	10c025c5 	stb	r3,151(r2)
  d->_cg87 = d->_region3_AEI_cAEI < d->AEI_Constraint;
  804028:	e0bffc17 	ldw	r2,-16(fp)
  80402c:	14000d17 	ldw	r16,52(r2)
  804030:	14400e17 	ldw	r17,56(r2)
  804034:	e0bffc17 	ldw	r2,-16(fp)
  804038:	10800417 	ldw	r2,16(r2)
  80403c:	1009883a 	mov	r4,r2
  804040:	0806fd80 	call	806fd8 <__floatsidf>
  804044:	1009883a 	mov	r4,r2
  804048:	180b883a 	mov	r5,r3
  80404c:	04800044 	movi	r18,1
  804050:	200d883a 	mov	r6,r4
  804054:	280f883a 	mov	r7,r5
  804058:	8009883a 	mov	r4,r16
  80405c:	880b883a 	mov	r5,r17
  804060:	08065e80 	call	8065e8 <__ledf2>
  804064:	10000116 	blt	r2,zero,80406c <logic+0x34d4>
  804068:	0025883a 	mov	r18,zero
  80406c:	9007883a 	mov	r3,r18
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	10c03d05 	stb	r3,244(r2)
  d->_g61 = d->_g67_e2 && d->_cg87;
  804078:	e0bffc17 	ldw	r2,-16(fp)
  80407c:	10804543 	ldbu	r2,277(r2)
  804080:	10803fcc 	andi	r2,r2,255
  804084:	1080201c 	xori	r2,r2,128
  804088:	10bfe004 	addi	r2,r2,-128
  80408c:	10000826 	beq	r2,zero,8040b0 <logic+0x3518>
  804090:	e0bffc17 	ldw	r2,-16(fp)
  804094:	10803d03 	ldbu	r2,244(r2)
  804098:	10803fcc 	andi	r2,r2,255
  80409c:	1080201c 	xori	r2,r2,128
  8040a0:	10bfe004 	addi	r2,r2,-128
  8040a4:	10000226 	beq	r2,zero,8040b0 <logic+0x3518>
  8040a8:	00800044 	movi	r2,1
  8040ac:	00000106 	br	8040b4 <logic+0x351c>
  8040b0:	0005883a 	mov	r2,zero
  8040b4:	1007883a 	mov	r3,r2
  8040b8:	e0bffc17 	ldw	r2,-16(fp)
  8040bc:	10c024c5 	stb	r3,147(r2)
  if (d->_g61) {
  8040c0:	e0bffc17 	ldw	r2,-16(fp)
  8040c4:	108024c3 	ldbu	r2,147(r2)
  8040c8:	10803fcc 	andi	r2,r2,255
  8040cc:	1080201c 	xori	r2,r2,128
  8040d0:	10bfe004 	addi	r2,r2,-128
  8040d4:	10003426 	beq	r2,zero,8041a8 <logic+0x3610>
    d->sleepT = (d->sleepT < (d->AEI_Constraint - d->_region3_AEI_cAEI)) ? d->sleepT : (d->AEI_Constraint - d->_region3_AEI_cAEI);
  8040d8:	e0bffc17 	ldw	r2,-16(fp)
  8040dc:	14001517 	ldw	r16,84(r2)
  8040e0:	14401617 	ldw	r17,88(r2)
  8040e4:	e0bffc17 	ldw	r2,-16(fp)
  8040e8:	10800417 	ldw	r2,16(r2)
  8040ec:	1009883a 	mov	r4,r2
  8040f0:	0806fd80 	call	806fd8 <__floatsidf>
  8040f4:	1011883a 	mov	r8,r2
  8040f8:	1813883a 	mov	r9,r3
  8040fc:	e13ffc17 	ldw	r4,-16(fp)
  804100:	20800d17 	ldw	r2,52(r4)
  804104:	20c00e17 	ldw	r3,56(r4)
  804108:	100d883a 	mov	r6,r2
  80410c:	180f883a 	mov	r7,r3
  804110:	4009883a 	mov	r4,r8
  804114:	480b883a 	mov	r5,r9
  804118:	08066dc0 	call	8066dc <__subdf3>
  80411c:	1009883a 	mov	r4,r2
  804120:	180b883a 	mov	r5,r3
  804124:	2005883a 	mov	r2,r4
  804128:	2807883a 	mov	r3,r5
  80412c:	100d883a 	mov	r6,r2
  804130:	180f883a 	mov	r7,r3
  804134:	8009883a 	mov	r4,r16
  804138:	880b883a 	mov	r5,r17
  80413c:	08065e80 	call	8065e8 <__ledf2>
  804140:	1000040e 	bge	r2,zero,804154 <logic+0x35bc>
  804144:	e13ffc17 	ldw	r4,-16(fp)
  804148:	20801517 	ldw	r2,84(r4)
  80414c:	20c01617 	ldw	r3,88(r4)
  804150:	00001206 	br	80419c <logic+0x3604>
  804154:	e0bffc17 	ldw	r2,-16(fp)
  804158:	10800417 	ldw	r2,16(r2)
  80415c:	1009883a 	mov	r4,r2
  804160:	0806fd80 	call	806fd8 <__floatsidf>
  804164:	1011883a 	mov	r8,r2
  804168:	1813883a 	mov	r9,r3
  80416c:	e13ffc17 	ldw	r4,-16(fp)
  804170:	20800d17 	ldw	r2,52(r4)
  804174:	20c00e17 	ldw	r3,56(r4)
  804178:	100d883a 	mov	r6,r2
  80417c:	180f883a 	mov	r7,r3
  804180:	4009883a 	mov	r4,r8
  804184:	480b883a 	mov	r5,r9
  804188:	08066dc0 	call	8066dc <__subdf3>
  80418c:	1009883a 	mov	r4,r2
  804190:	180b883a 	mov	r5,r3
  804194:	2005883a 	mov	r2,r4
  804198:	2807883a 	mov	r3,r5
  80419c:	e13ffc17 	ldw	r4,-16(fp)
  8041a0:	20801515 	stw	r2,84(r4)
  8041a4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg88 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8041a8:	e0bffc17 	ldw	r2,-16(fp)
  8041ac:	10801a03 	ldbu	r2,104(r2)
  8041b0:	10803fcc 	andi	r2,r2,255
  8041b4:	1080201c 	xori	r2,r2,128
  8041b8:	10bfe004 	addi	r2,r2,-128
  8041bc:	1000061e 	bne	r2,zero,8041d8 <logic+0x3640>
  8041c0:	e0bffc17 	ldw	r2,-16(fp)
  8041c4:	10801a43 	ldbu	r2,105(r2)
  8041c8:	10803fcc 	andi	r2,r2,255
  8041cc:	1080201c 	xori	r2,r2,128
  8041d0:	10bfe004 	addi	r2,r2,-128
  8041d4:	10000226 	beq	r2,zero,8041e0 <logic+0x3648>
  8041d8:	00800044 	movi	r2,1
  8041dc:	00000106 	br	8041e4 <logic+0x364c>
  8041e0:	0005883a 	mov	r2,zero
  8041e4:	1007883a 	mov	r3,r2
  8041e8:	e0bffc17 	ldw	r2,-16(fp)
  8041ec:	10c03d45 	stb	r3,245(r2)
  d->_g77 = d->_g61 && !d->_cg88 || d->_g90 && !d->_cg92;
  8041f0:	e0bffc17 	ldw	r2,-16(fp)
  8041f4:	108024c3 	ldbu	r2,147(r2)
  8041f8:	10803fcc 	andi	r2,r2,255
  8041fc:	1080201c 	xori	r2,r2,128
  804200:	10bfe004 	addi	r2,r2,-128
  804204:	10000626 	beq	r2,zero,804220 <logic+0x3688>
  804208:	e0bffc17 	ldw	r2,-16(fp)
  80420c:	10803d43 	ldbu	r2,245(r2)
  804210:	10803fcc 	andi	r2,r2,255
  804214:	1080201c 	xori	r2,r2,128
  804218:	10bfe004 	addi	r2,r2,-128
  80421c:	10000c26 	beq	r2,zero,804250 <logic+0x36b8>
  804220:	e0bffc17 	ldw	r2,-16(fp)
  804224:	10802943 	ldbu	r2,165(r2)
  804228:	10803fcc 	andi	r2,r2,255
  80422c:	1080201c 	xori	r2,r2,128
  804230:	10bfe004 	addi	r2,r2,-128
  804234:	10000826 	beq	r2,zero,804258 <logic+0x36c0>
  804238:	e0bffc17 	ldw	r2,-16(fp)
  80423c:	10803d83 	ldbu	r2,246(r2)
  804240:	10803fcc 	andi	r2,r2,255
  804244:	1080201c 	xori	r2,r2,128
  804248:	10bfe004 	addi	r2,r2,-128
  80424c:	1000021e 	bne	r2,zero,804258 <logic+0x36c0>
  804250:	00800044 	movi	r2,1
  804254:	00000106 	br	80425c <logic+0x36c4>
  804258:	0005883a 	mov	r2,zero
  80425c:	1007883a 	mov	r3,r2
  804260:	e0bffc17 	ldw	r2,-16(fp)
  804264:	10c027c5 	stb	r3,159(r2)
  d->_g57 = d->_g67_e2 && !d->_cg87;
  804268:	e0bffc17 	ldw	r2,-16(fp)
  80426c:	10804543 	ldbu	r2,277(r2)
  804270:	10803fcc 	andi	r2,r2,255
  804274:	1080201c 	xori	r2,r2,128
  804278:	10bfe004 	addi	r2,r2,-128
  80427c:	10000826 	beq	r2,zero,8042a0 <logic+0x3708>
  804280:	e0bffc17 	ldw	r2,-16(fp)
  804284:	10803d03 	ldbu	r2,244(r2)
  804288:	10803fcc 	andi	r2,r2,255
  80428c:	1080201c 	xori	r2,r2,128
  804290:	10bfe004 	addi	r2,r2,-128
  804294:	1000021e 	bne	r2,zero,8042a0 <logic+0x3708>
  804298:	00800044 	movi	r2,1
  80429c:	00000106 	br	8042a4 <logic+0x370c>
  8042a0:	0005883a 	mov	r2,zero
  8042a4:	1007883a 	mov	r3,r2
  8042a8:	e0bffc17 	ldw	r2,-16(fp)
  8042ac:	10c02405 	stb	r3,144(r2)
  d->_cg97 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8042b0:	e0bffc17 	ldw	r2,-16(fp)
  8042b4:	10801a03 	ldbu	r2,104(r2)
  8042b8:	10803fcc 	andi	r2,r2,255
  8042bc:	1080201c 	xori	r2,r2,128
  8042c0:	10bfe004 	addi	r2,r2,-128
  8042c4:	1000061e 	bne	r2,zero,8042e0 <logic+0x3748>
  8042c8:	e0bffc17 	ldw	r2,-16(fp)
  8042cc:	10801a43 	ldbu	r2,105(r2)
  8042d0:	10803fcc 	andi	r2,r2,255
  8042d4:	1080201c 	xori	r2,r2,128
  8042d8:	10bfe004 	addi	r2,r2,-128
  8042dc:	10000226 	beq	r2,zero,8042e8 <logic+0x3750>
  8042e0:	00800044 	movi	r2,1
  8042e4:	00000106 	br	8042ec <logic+0x3754>
  8042e8:	0005883a 	mov	r2,zero
  8042ec:	1007883a 	mov	r3,r2
  8042f0:	e0bffc17 	ldw	r2,-16(fp)
  8042f4:	10c03e45 	stb	r3,249(r2)
  d->_g105 = d->_g91 && !d->_cg94 || d->_g57 && !d->_cg97;
  8042f8:	e0bffc17 	ldw	r2,-16(fp)
  8042fc:	10802983 	ldbu	r2,166(r2)
  804300:	10803fcc 	andi	r2,r2,255
  804304:	1080201c 	xori	r2,r2,128
  804308:	10bfe004 	addi	r2,r2,-128
  80430c:	10000626 	beq	r2,zero,804328 <logic+0x3790>
  804310:	e0bffc17 	ldw	r2,-16(fp)
  804314:	10803e03 	ldbu	r2,248(r2)
  804318:	10803fcc 	andi	r2,r2,255
  80431c:	1080201c 	xori	r2,r2,128
  804320:	10bfe004 	addi	r2,r2,-128
  804324:	10000c26 	beq	r2,zero,804358 <logic+0x37c0>
  804328:	e0bffc17 	ldw	r2,-16(fp)
  80432c:	10802403 	ldbu	r2,144(r2)
  804330:	10803fcc 	andi	r2,r2,255
  804334:	1080201c 	xori	r2,r2,128
  804338:	10bfe004 	addi	r2,r2,-128
  80433c:	10000826 	beq	r2,zero,804360 <logic+0x37c8>
  804340:	e0bffc17 	ldw	r2,-16(fp)
  804344:	10803e43 	ldbu	r2,249(r2)
  804348:	10803fcc 	andi	r2,r2,255
  80434c:	1080201c 	xori	r2,r2,128
  804350:	10bfe004 	addi	r2,r2,-128
  804354:	1000021e 	bne	r2,zero,804360 <logic+0x37c8>
  804358:	00800044 	movi	r2,1
  80435c:	00000106 	br	804364 <logic+0x37cc>
  804360:	0005883a 	mov	r2,zero
  804364:	1007883a 	mov	r3,r2
  804368:	e0bffc17 	ldw	r2,-16(fp)
  80436c:	10c02c45 	stb	r3,177(r2)
  d->_g106 = d->_g67_e2 || d->_g103 && !d->_cg103;
  804370:	e0bffc17 	ldw	r2,-16(fp)
  804374:	10804543 	ldbu	r2,277(r2)
  804378:	10803fcc 	andi	r2,r2,255
  80437c:	1080201c 	xori	r2,r2,128
  804380:	10bfe004 	addi	r2,r2,-128
  804384:	10000c1e 	bne	r2,zero,8043b8 <logic+0x3820>
  804388:	e0bffc17 	ldw	r2,-16(fp)
  80438c:	10802bc3 	ldbu	r2,175(r2)
  804390:	10803fcc 	andi	r2,r2,255
  804394:	1080201c 	xori	r2,r2,128
  804398:	10bfe004 	addi	r2,r2,-128
  80439c:	10000826 	beq	r2,zero,8043c0 <logic+0x3828>
  8043a0:	e0bffc17 	ldw	r2,-16(fp)
  8043a4:	10803e83 	ldbu	r2,250(r2)
  8043a8:	10803fcc 	andi	r2,r2,255
  8043ac:	1080201c 	xori	r2,r2,128
  8043b0:	10bfe004 	addi	r2,r2,-128
  8043b4:	1000021e 	bne	r2,zero,8043c0 <logic+0x3828>
  8043b8:	00800044 	movi	r2,1
  8043bc:	00000106 	br	8043c4 <logic+0x382c>
  8043c0:	0005883a 	mov	r2,zero
  8043c4:	1007883a 	mov	r3,r2
  8043c8:	e0bffc17 	ldw	r2,-16(fp)
  8043cc:	10c02c85 	stb	r3,178(r2)
  d->_g81 = d->_pg85;
  8043d0:	e0bffc17 	ldw	r2,-16(fp)
  8043d4:	10c04fc3 	ldbu	r3,319(r2)
  8043d8:	e0bffc17 	ldw	r2,-16(fp)
  8043dc:	10c02805 	stb	r3,160(r2)
  d->_cg110 = (d->VP || d->VS) && !d->VRP;
  8043e0:	e0bffc17 	ldw	r2,-16(fp)
  8043e4:	10801743 	ldbu	r2,93(r2)
  8043e8:	10803fcc 	andi	r2,r2,255
  8043ec:	1080201c 	xori	r2,r2,128
  8043f0:	10bfe004 	addi	r2,r2,-128
  8043f4:	1000061e 	bne	r2,zero,804410 <logic+0x3878>
  8043f8:	e0bffc17 	ldw	r2,-16(fp)
  8043fc:	10800043 	ldbu	r2,1(r2)
  804400:	10803fcc 	andi	r2,r2,255
  804404:	1080201c 	xori	r2,r2,128
  804408:	10bfe004 	addi	r2,r2,-128
  80440c:	10000826 	beq	r2,zero,804430 <logic+0x3898>
  804410:	e0bffc17 	ldw	r2,-16(fp)
  804414:	10801803 	ldbu	r2,96(r2)
  804418:	10803fcc 	andi	r2,r2,255
  80441c:	1080201c 	xori	r2,r2,128
  804420:	10bfe004 	addi	r2,r2,-128
  804424:	1000021e 	bne	r2,zero,804430 <logic+0x3898>
  804428:	00800044 	movi	r2,1
  80442c:	00000106 	br	804434 <logic+0x389c>
  804430:	0005883a 	mov	r2,zero
  804434:	1007883a 	mov	r3,r2
  804438:	e0bffc17 	ldw	r2,-16(fp)
  80443c:	10c03f05 	stb	r3,252(r2)
  d->_g85 = d->_GO || d->_g81 && !d->_cg110;
  804440:	e0bffc17 	ldw	r2,-16(fp)
  804444:	108035c3 	ldbu	r2,215(r2)
  804448:	10803fcc 	andi	r2,r2,255
  80444c:	1080201c 	xori	r2,r2,128
  804450:	10bfe004 	addi	r2,r2,-128
  804454:	10000c1e 	bne	r2,zero,804488 <logic+0x38f0>
  804458:	e0bffc17 	ldw	r2,-16(fp)
  80445c:	10802803 	ldbu	r2,160(r2)
  804460:	10803fcc 	andi	r2,r2,255
  804464:	1080201c 	xori	r2,r2,128
  804468:	10bfe004 	addi	r2,r2,-128
  80446c:	10000826 	beq	r2,zero,804490 <logic+0x38f8>
  804470:	e0bffc17 	ldw	r2,-16(fp)
  804474:	10803f03 	ldbu	r2,252(r2)
  804478:	10803fcc 	andi	r2,r2,255
  80447c:	1080201c 	xori	r2,r2,128
  804480:	10bfe004 	addi	r2,r2,-128
  804484:	1000021e 	bne	r2,zero,804490 <logic+0x38f8>
  804488:	00800044 	movi	r2,1
  80448c:	00000106 	br	804494 <logic+0x38fc>
  804490:	0005883a 	mov	r2,zero
  804494:	1007883a 	mov	r3,r2
  804498:	e0bffc17 	ldw	r2,-16(fp)
  80449c:	10c02885 	stb	r3,162(r2)
  d->_g88 = d->_g81 && d->_cg110 || d->_g133 && d->_cg134 || d->_g122;
  8044a0:	e0bffc17 	ldw	r2,-16(fp)
  8044a4:	10802803 	ldbu	r2,160(r2)
  8044a8:	10803fcc 	andi	r2,r2,255
  8044ac:	1080201c 	xori	r2,r2,128
  8044b0:	10bfe004 	addi	r2,r2,-128
  8044b4:	10000626 	beq	r2,zero,8044d0 <logic+0x3938>
  8044b8:	e0bffc17 	ldw	r2,-16(fp)
  8044bc:	10803f03 	ldbu	r2,252(r2)
  8044c0:	10803fcc 	andi	r2,r2,255
  8044c4:	1080201c 	xori	r2,r2,128
  8044c8:	10bfe004 	addi	r2,r2,-128
  8044cc:	1000121e 	bne	r2,zero,804518 <logic+0x3980>
  8044d0:	e0bffc17 	ldw	r2,-16(fp)
  8044d4:	108030c3 	ldbu	r2,195(r2)
  8044d8:	10803fcc 	andi	r2,r2,255
  8044dc:	1080201c 	xori	r2,r2,128
  8044e0:	10bfe004 	addi	r2,r2,-128
  8044e4:	10000626 	beq	r2,zero,804500 <logic+0x3968>
  8044e8:	e0bffc17 	ldw	r2,-16(fp)
  8044ec:	10803f43 	ldbu	r2,253(r2)
  8044f0:	10803fcc 	andi	r2,r2,255
  8044f4:	1080201c 	xori	r2,r2,128
  8044f8:	10bfe004 	addi	r2,r2,-128
  8044fc:	1000061e 	bne	r2,zero,804518 <logic+0x3980>
  804500:	e0bffc17 	ldw	r2,-16(fp)
  804504:	10802ec3 	ldbu	r2,187(r2)
  804508:	10803fcc 	andi	r2,r2,255
  80450c:	1080201c 	xori	r2,r2,128
  804510:	10bfe004 	addi	r2,r2,-128
  804514:	10000226 	beq	r2,zero,804520 <logic+0x3988>
  804518:	00800044 	movi	r2,1
  80451c:	00000106 	br	804524 <logic+0x398c>
  804520:	0005883a 	mov	r2,zero
  804524:	1007883a 	mov	r3,r2
  804528:	e0bffc17 	ldw	r2,-16(fp)
  80452c:	10c02905 	stb	r3,164(r2)
  if (d->_g88) {
  804530:	e0bffc17 	ldw	r2,-16(fp)
  804534:	10802903 	ldbu	r2,164(r2)
  804538:	10803fcc 	andi	r2,r2,255
  80453c:	1080201c 	xori	r2,r2,128
  804540:	10bfe004 	addi	r2,r2,-128
  804544:	10000726 	beq	r2,zero,804564 <logic+0x39cc>
    d->_region4_LRI_cLRI = 0;
  804548:	e0bffc17 	ldw	r2,-16(fp)
  80454c:	10000f15 	stw	zero,60(r2)
  804550:	10001015 	stw	zero,64(r2)
    d->_Pacemaker_local__Atrig6 = 0;
  804554:	e0bffc17 	ldw	r2,-16(fp)
  804558:	10001a85 	stb	zero,106(r2)
    d->_Pacemaker_local__Atrig7 = 0;
  80455c:	e0bffc17 	ldw	r2,-16(fp)
  804560:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg112 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  804564:	e0bffc17 	ldw	r2,-16(fp)
  804568:	10801a83 	ldbu	r2,106(r2)
  80456c:	10803fcc 	andi	r2,r2,255
  804570:	1080201c 	xori	r2,r2,128
  804574:	10bfe004 	addi	r2,r2,-128
  804578:	1000061e 	bne	r2,zero,804594 <logic+0x39fc>
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	10801ac3 	ldbu	r2,107(r2)
  804584:	10803fcc 	andi	r2,r2,255
  804588:	1080201c 	xori	r2,r2,128
  80458c:	10bfe004 	addi	r2,r2,-128
  804590:	10000226 	beq	r2,zero,80459c <logic+0x3a04>
  804594:	00800044 	movi	r2,1
  804598:	00000106 	br	8045a0 <logic+0x3a08>
  80459c:	0005883a 	mov	r2,zero
  8045a0:	1007883a 	mov	r3,r2
  8045a4:	e0bffc17 	ldw	r2,-16(fp)
  8045a8:	10c03f85 	stb	r3,254(r2)
  d->_g92 = d->_g88 && !d->_cg112 || d->_g17 && !d->_cg114;
  8045ac:	e0bffc17 	ldw	r2,-16(fp)
  8045b0:	10802903 	ldbu	r2,164(r2)
  8045b4:	10803fcc 	andi	r2,r2,255
  8045b8:	1080201c 	xori	r2,r2,128
  8045bc:	10bfe004 	addi	r2,r2,-128
  8045c0:	10000626 	beq	r2,zero,8045dc <logic+0x3a44>
  8045c4:	e0bffc17 	ldw	r2,-16(fp)
  8045c8:	10803f83 	ldbu	r2,254(r2)
  8045cc:	10803fcc 	andi	r2,r2,255
  8045d0:	1080201c 	xori	r2,r2,128
  8045d4:	10bfe004 	addi	r2,r2,-128
  8045d8:	10000c26 	beq	r2,zero,80460c <logic+0x3a74>
  8045dc:	e0bffc17 	ldw	r2,-16(fp)
  8045e0:	10801d83 	ldbu	r2,118(r2)
  8045e4:	10803fcc 	andi	r2,r2,255
  8045e8:	1080201c 	xori	r2,r2,128
  8045ec:	10bfe004 	addi	r2,r2,-128
  8045f0:	10000826 	beq	r2,zero,804614 <logic+0x3a7c>
  8045f4:	e0bffc17 	ldw	r2,-16(fp)
  8045f8:	10803fc3 	ldbu	r2,255(r2)
  8045fc:	10803fcc 	andi	r2,r2,255
  804600:	1080201c 	xori	r2,r2,128
  804604:	10bfe004 	addi	r2,r2,-128
  804608:	1000021e 	bne	r2,zero,804614 <logic+0x3a7c>
  80460c:	00800044 	movi	r2,1
  804610:	00000106 	br	804618 <logic+0x3a80>
  804614:	0005883a 	mov	r2,zero
  804618:	1007883a 	mov	r3,r2
  80461c:	e0bffc17 	ldw	r2,-16(fp)
  804620:	10c029c5 	stb	r3,167(r2)
  d->_cg116 = d->_region4_LRI_cLRI < d->LRI_Constraint;
  804624:	e0bffc17 	ldw	r2,-16(fp)
  804628:	14000f17 	ldw	r16,60(r2)
  80462c:	14401017 	ldw	r17,64(r2)
  804630:	e0bffc17 	ldw	r2,-16(fp)
  804634:	10800517 	ldw	r2,20(r2)
  804638:	1009883a 	mov	r4,r2
  80463c:	0806fd80 	call	806fd8 <__floatsidf>
  804640:	1009883a 	mov	r4,r2
  804644:	180b883a 	mov	r5,r3
  804648:	04800044 	movi	r18,1
  80464c:	200d883a 	mov	r6,r4
  804650:	280f883a 	mov	r7,r5
  804654:	8009883a 	mov	r4,r16
  804658:	880b883a 	mov	r5,r17
  80465c:	08065e80 	call	8065e8 <__ledf2>
  804660:	10000116 	blt	r2,zero,804668 <logic+0x3ad0>
  804664:	0025883a 	mov	r18,zero
  804668:	9007883a 	mov	r3,r18
  80466c:	e0bffc17 	ldw	r2,-16(fp)
  804670:	10c04005 	stb	r3,256(r2)
  d->_g97 = d->_g88 && d->_cg116;
  804674:	e0bffc17 	ldw	r2,-16(fp)
  804678:	10802903 	ldbu	r2,164(r2)
  80467c:	10803fcc 	andi	r2,r2,255
  804680:	1080201c 	xori	r2,r2,128
  804684:	10bfe004 	addi	r2,r2,-128
  804688:	10000826 	beq	r2,zero,8046ac <logic+0x3b14>
  80468c:	e0bffc17 	ldw	r2,-16(fp)
  804690:	10804003 	ldbu	r2,256(r2)
  804694:	10803fcc 	andi	r2,r2,255
  804698:	1080201c 	xori	r2,r2,128
  80469c:	10bfe004 	addi	r2,r2,-128
  8046a0:	10000226 	beq	r2,zero,8046ac <logic+0x3b14>
  8046a4:	00800044 	movi	r2,1
  8046a8:	00000106 	br	8046b0 <logic+0x3b18>
  8046ac:	0005883a 	mov	r2,zero
  8046b0:	1007883a 	mov	r3,r2
  8046b4:	e0bffc17 	ldw	r2,-16(fp)
  8046b8:	10c02ac5 	stb	r3,171(r2)
  if (d->_g97) {
  8046bc:	e0bffc17 	ldw	r2,-16(fp)
  8046c0:	10802ac3 	ldbu	r2,171(r2)
  8046c4:	10803fcc 	andi	r2,r2,255
  8046c8:	1080201c 	xori	r2,r2,128
  8046cc:	10bfe004 	addi	r2,r2,-128
  8046d0:	10003426 	beq	r2,zero,8047a4 <logic+0x3c0c>
    d->sleepT = (d->sleepT < (d->LRI_Constraint - d->_region4_LRI_cLRI)) ? d->sleepT : (d->LRI_Constraint - d->_region4_LRI_cLRI);
  8046d4:	e0bffc17 	ldw	r2,-16(fp)
  8046d8:	14001517 	ldw	r16,84(r2)
  8046dc:	14401617 	ldw	r17,88(r2)
  8046e0:	e0bffc17 	ldw	r2,-16(fp)
  8046e4:	10800517 	ldw	r2,20(r2)
  8046e8:	1009883a 	mov	r4,r2
  8046ec:	0806fd80 	call	806fd8 <__floatsidf>
  8046f0:	1011883a 	mov	r8,r2
  8046f4:	1813883a 	mov	r9,r3
  8046f8:	e13ffc17 	ldw	r4,-16(fp)
  8046fc:	20800f17 	ldw	r2,60(r4)
  804700:	20c01017 	ldw	r3,64(r4)
  804704:	100d883a 	mov	r6,r2
  804708:	180f883a 	mov	r7,r3
  80470c:	4009883a 	mov	r4,r8
  804710:	480b883a 	mov	r5,r9
  804714:	08066dc0 	call	8066dc <__subdf3>
  804718:	1009883a 	mov	r4,r2
  80471c:	180b883a 	mov	r5,r3
  804720:	2005883a 	mov	r2,r4
  804724:	2807883a 	mov	r3,r5
  804728:	100d883a 	mov	r6,r2
  80472c:	180f883a 	mov	r7,r3
  804730:	8009883a 	mov	r4,r16
  804734:	880b883a 	mov	r5,r17
  804738:	08065e80 	call	8065e8 <__ledf2>
  80473c:	1000040e 	bge	r2,zero,804750 <logic+0x3bb8>
  804740:	e13ffc17 	ldw	r4,-16(fp)
  804744:	20801517 	ldw	r2,84(r4)
  804748:	20c01617 	ldw	r3,88(r4)
  80474c:	00001206 	br	804798 <logic+0x3c00>
  804750:	e0bffc17 	ldw	r2,-16(fp)
  804754:	10800517 	ldw	r2,20(r2)
  804758:	1009883a 	mov	r4,r2
  80475c:	0806fd80 	call	806fd8 <__floatsidf>
  804760:	1011883a 	mov	r8,r2
  804764:	1813883a 	mov	r9,r3
  804768:	e13ffc17 	ldw	r4,-16(fp)
  80476c:	20800f17 	ldw	r2,60(r4)
  804770:	20c01017 	ldw	r3,64(r4)
  804774:	100d883a 	mov	r6,r2
  804778:	180f883a 	mov	r7,r3
  80477c:	4009883a 	mov	r4,r8
  804780:	480b883a 	mov	r5,r9
  804784:	08066dc0 	call	8066dc <__subdf3>
  804788:	1009883a 	mov	r4,r2
  80478c:	180b883a 	mov	r5,r3
  804790:	2005883a 	mov	r2,r4
  804794:	2807883a 	mov	r3,r5
  804798:	e13ffc17 	ldw	r4,-16(fp)
  80479c:	20801515 	stw	r2,84(r4)
  8047a0:	20c01615 	stw	r3,88(r4)
  }
  d->_cg117 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8047a4:	e0bffc17 	ldw	r2,-16(fp)
  8047a8:	10801a83 	ldbu	r2,106(r2)
  8047ac:	10803fcc 	andi	r2,r2,255
  8047b0:	1080201c 	xori	r2,r2,128
  8047b4:	10bfe004 	addi	r2,r2,-128
  8047b8:	1000061e 	bne	r2,zero,8047d4 <logic+0x3c3c>
  8047bc:	e0bffc17 	ldw	r2,-16(fp)
  8047c0:	10801ac3 	ldbu	r2,107(r2)
  8047c4:	10803fcc 	andi	r2,r2,255
  8047c8:	1080201c 	xori	r2,r2,128
  8047cc:	10bfe004 	addi	r2,r2,-128
  8047d0:	10000226 	beq	r2,zero,8047dc <logic+0x3c44>
  8047d4:	00800044 	movi	r2,1
  8047d8:	00000106 	br	8047e0 <logic+0x3c48>
  8047dc:	0005883a 	mov	r2,zero
  8047e0:	1007883a 	mov	r3,r2
  8047e4:	e0bffc17 	ldw	r2,-16(fp)
  8047e8:	10c04045 	stb	r3,257(r2)
  d->_g94 = d->_g97 && !d->_cg117 || d->_g119 && !d->_cg121;
  8047ec:	e0bffc17 	ldw	r2,-16(fp)
  8047f0:	10802ac3 	ldbu	r2,171(r2)
  8047f4:	10803fcc 	andi	r2,r2,255
  8047f8:	1080201c 	xori	r2,r2,128
  8047fc:	10bfe004 	addi	r2,r2,-128
  804800:	10000626 	beq	r2,zero,80481c <logic+0x3c84>
  804804:	e0bffc17 	ldw	r2,-16(fp)
  804808:	10804043 	ldbu	r2,257(r2)
  80480c:	10803fcc 	andi	r2,r2,255
  804810:	1080201c 	xori	r2,r2,128
  804814:	10bfe004 	addi	r2,r2,-128
  804818:	10000c26 	beq	r2,zero,80484c <logic+0x3cb4>
  80481c:	e0bffc17 	ldw	r2,-16(fp)
  804820:	10802e03 	ldbu	r2,184(r2)
  804824:	10803fcc 	andi	r2,r2,255
  804828:	1080201c 	xori	r2,r2,128
  80482c:	10bfe004 	addi	r2,r2,-128
  804830:	10000826 	beq	r2,zero,804854 <logic+0x3cbc>
  804834:	e0bffc17 	ldw	r2,-16(fp)
  804838:	10804083 	ldbu	r2,258(r2)
  80483c:	10803fcc 	andi	r2,r2,255
  804840:	1080201c 	xori	r2,r2,128
  804844:	10bfe004 	addi	r2,r2,-128
  804848:	1000021e 	bne	r2,zero,804854 <logic+0x3cbc>
  80484c:	00800044 	movi	r2,1
  804850:	00000106 	br	804858 <logic+0x3cc0>
  804854:	0005883a 	mov	r2,zero
  804858:	1007883a 	mov	r3,r2
  80485c:	e0bffc17 	ldw	r2,-16(fp)
  804860:	10c02a45 	stb	r3,169(r2)
  d->_g103 = d->_g88 && !d->_cg116;
  804864:	e0bffc17 	ldw	r2,-16(fp)
  804868:	10802903 	ldbu	r2,164(r2)
  80486c:	10803fcc 	andi	r2,r2,255
  804870:	1080201c 	xori	r2,r2,128
  804874:	10bfe004 	addi	r2,r2,-128
  804878:	10000826 	beq	r2,zero,80489c <logic+0x3d04>
  80487c:	e0bffc17 	ldw	r2,-16(fp)
  804880:	10804003 	ldbu	r2,256(r2)
  804884:	10803fcc 	andi	r2,r2,255
  804888:	1080201c 	xori	r2,r2,128
  80488c:	10bfe004 	addi	r2,r2,-128
  804890:	1000021e 	bne	r2,zero,80489c <logic+0x3d04>
  804894:	00800044 	movi	r2,1
  804898:	00000106 	br	8048a0 <logic+0x3d08>
  80489c:	0005883a 	mov	r2,zero
  8048a0:	1007883a 	mov	r3,r2
  8048a4:	e0bffc17 	ldw	r2,-16(fp)
  8048a8:	10c02bc5 	stb	r3,175(r2)
  d->_cg126 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8048ac:	e0bffc17 	ldw	r2,-16(fp)
  8048b0:	10801a83 	ldbu	r2,106(r2)
  8048b4:	10803fcc 	andi	r2,r2,255
  8048b8:	1080201c 	xori	r2,r2,128
  8048bc:	10bfe004 	addi	r2,r2,-128
  8048c0:	1000061e 	bne	r2,zero,8048dc <logic+0x3d44>
  8048c4:	e0bffc17 	ldw	r2,-16(fp)
  8048c8:	10801ac3 	ldbu	r2,107(r2)
  8048cc:	10803fcc 	andi	r2,r2,255
  8048d0:	1080201c 	xori	r2,r2,128
  8048d4:	10bfe004 	addi	r2,r2,-128
  8048d8:	10000226 	beq	r2,zero,8048e4 <logic+0x3d4c>
  8048dc:	00800044 	movi	r2,1
  8048e0:	00000106 	br	8048e8 <logic+0x3d50>
  8048e4:	0005883a 	mov	r2,zero
  8048e8:	1007883a 	mov	r3,r2
  8048ec:	e0bffc17 	ldw	r2,-16(fp)
  8048f0:	10c04145 	stb	r3,261(r2)
  d->_g82 = d->_g120 && !d->_cg123 || d->_g103 && !d->_cg126;
  8048f4:	e0bffc17 	ldw	r2,-16(fp)
  8048f8:	10802e43 	ldbu	r2,185(r2)
  8048fc:	10803fcc 	andi	r2,r2,255
  804900:	1080201c 	xori	r2,r2,128
  804904:	10bfe004 	addi	r2,r2,-128
  804908:	10000626 	beq	r2,zero,804924 <logic+0x3d8c>
  80490c:	e0bffc17 	ldw	r2,-16(fp)
  804910:	10804103 	ldbu	r2,260(r2)
  804914:	10803fcc 	andi	r2,r2,255
  804918:	1080201c 	xori	r2,r2,128
  80491c:	10bfe004 	addi	r2,r2,-128
  804920:	10000c26 	beq	r2,zero,804954 <logic+0x3dbc>
  804924:	e0bffc17 	ldw	r2,-16(fp)
  804928:	10802bc3 	ldbu	r2,175(r2)
  80492c:	10803fcc 	andi	r2,r2,255
  804930:	1080201c 	xori	r2,r2,128
  804934:	10bfe004 	addi	r2,r2,-128
  804938:	10000826 	beq	r2,zero,80495c <logic+0x3dc4>
  80493c:	e0bffc17 	ldw	r2,-16(fp)
  804940:	10804143 	ldbu	r2,261(r2)
  804944:	10803fcc 	andi	r2,r2,255
  804948:	1080201c 	xori	r2,r2,128
  80494c:	10bfe004 	addi	r2,r2,-128
  804950:	1000021e 	bne	r2,zero,80495c <logic+0x3dc4>
  804954:	00800044 	movi	r2,1
  804958:	00000106 	br	804960 <logic+0x3dc8>
  80495c:	0005883a 	mov	r2,zero
  804960:	1007883a 	mov	r3,r2
  804964:	e0bffc17 	ldw	r2,-16(fp)
  804968:	10c02845 	stb	r3,161(r2)
  d->_g134 = d->_g88 || d->_g132 && !d->_cg132;
  80496c:	e0bffc17 	ldw	r2,-16(fp)
  804970:	10802903 	ldbu	r2,164(r2)
  804974:	10803fcc 	andi	r2,r2,255
  804978:	1080201c 	xori	r2,r2,128
  80497c:	10bfe004 	addi	r2,r2,-128
  804980:	10000c1e 	bne	r2,zero,8049b4 <logic+0x3e1c>
  804984:	e0bffc17 	ldw	r2,-16(fp)
  804988:	10803083 	ldbu	r2,194(r2)
  80498c:	10803fcc 	andi	r2,r2,255
  804990:	1080201c 	xori	r2,r2,128
  804994:	10bfe004 	addi	r2,r2,-128
  804998:	10000826 	beq	r2,zero,8049bc <logic+0x3e24>
  80499c:	e0bffc17 	ldw	r2,-16(fp)
  8049a0:	10804183 	ldbu	r2,262(r2)
  8049a4:	10803fcc 	andi	r2,r2,255
  8049a8:	1080201c 	xori	r2,r2,128
  8049ac:	10bfe004 	addi	r2,r2,-128
  8049b0:	1000021e 	bne	r2,zero,8049bc <logic+0x3e24>
  8049b4:	00800044 	movi	r2,1
  8049b8:	00000106 	br	8049c0 <logic+0x3e28>
  8049bc:	0005883a 	mov	r2,zero
  8049c0:	1007883a 	mov	r3,r2
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	10c03105 	stb	r3,196(r2)
  d->_g135 = d->_pg139;
  8049cc:	e0bffc17 	ldw	r2,-16(fp)
  8049d0:	10c05003 	ldbu	r3,320(r2)
  8049d4:	e0bffc17 	ldw	r2,-16(fp)
  8049d8:	10c03145 	stb	r3,197(r2)
  if (d->_g135) {
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	10803143 	ldbu	r2,197(r2)
  8049e4:	10803fcc 	andi	r2,r2,255
  8049e8:	1080201c 	xori	r2,r2,128
  8049ec:	10bfe004 	addi	r2,r2,-128
  8049f0:	10001226 	beq	r2,zero,804a3c <logic+0x3ea4>
    d->_region5_URI_cURI += d->deltaT;
  8049f4:	e13ffc17 	ldw	r4,-16(fp)
  8049f8:	20801117 	ldw	r2,68(r4)
  8049fc:	20c01217 	ldw	r3,72(r4)
  804a00:	e1bffc17 	ldw	r6,-16(fp)
  804a04:	31001317 	ldw	r4,76(r6)
  804a08:	31401417 	ldw	r5,80(r6)
  804a0c:	200d883a 	mov	r6,r4
  804a10:	280f883a 	mov	r7,r5
  804a14:	1009883a 	mov	r4,r2
  804a18:	180b883a 	mov	r5,r3
  804a1c:	0805c600 	call	805c60 <__adddf3>
  804a20:	1009883a 	mov	r4,r2
  804a24:	180b883a 	mov	r5,r3
  804a28:	2005883a 	mov	r2,r4
  804a2c:	2807883a 	mov	r3,r5
  804a30:	e13ffc17 	ldw	r4,-16(fp)
  804a34:	20801115 	stw	r2,68(r4)
  804a38:	20c01215 	stw	r3,72(r4)
  }
  d->_g110 = d->_pg148;
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10c05043 	ldbu	r3,321(r2)
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10c02cc5 	stb	r3,179(r2)
  d->_cg157 = d->_region5_URI_cURI >= d->URI_Constraint;
  804a4c:	e0bffc17 	ldw	r2,-16(fp)
  804a50:	14001117 	ldw	r16,68(r2)
  804a54:	14401217 	ldw	r17,72(r2)
  804a58:	e0bffc17 	ldw	r2,-16(fp)
  804a5c:	10800617 	ldw	r2,24(r2)
  804a60:	1009883a 	mov	r4,r2
  804a64:	0806fd80 	call	806fd8 <__floatsidf>
  804a68:	1009883a 	mov	r4,r2
  804a6c:	180b883a 	mov	r5,r3
  804a70:	04800044 	movi	r18,1
  804a74:	200d883a 	mov	r6,r4
  804a78:	280f883a 	mov	r7,r5
  804a7c:	8009883a 	mov	r4,r16
  804a80:	880b883a 	mov	r5,r17
  804a84:	080650c0 	call	80650c <__gedf2>
  804a88:	1000010e 	bge	r2,zero,804a90 <logic+0x3ef8>
  804a8c:	0025883a 	mov	r18,zero
  804a90:	9007883a 	mov	r3,r18
  804a94:	e0bffc17 	ldw	r2,-16(fp)
  804a98:	10c04345 	stb	r3,269(r2)
  d->_g114 = d->_g110 && d->_cg157;
  804a9c:	e0bffc17 	ldw	r2,-16(fp)
  804aa0:	10802cc3 	ldbu	r2,179(r2)
  804aa4:	10803fcc 	andi	r2,r2,255
  804aa8:	1080201c 	xori	r2,r2,128
  804aac:	10bfe004 	addi	r2,r2,-128
  804ab0:	10000826 	beq	r2,zero,804ad4 <logic+0x3f3c>
  804ab4:	e0bffc17 	ldw	r2,-16(fp)
  804ab8:	10804343 	ldbu	r2,269(r2)
  804abc:	10803fcc 	andi	r2,r2,255
  804ac0:	1080201c 	xori	r2,r2,128
  804ac4:	10bfe004 	addi	r2,r2,-128
  804ac8:	10000226 	beq	r2,zero,804ad4 <logic+0x3f3c>
  804acc:	00800044 	movi	r2,1
  804ad0:	00000106 	br	804ad8 <logic+0x3f40>
  804ad4:	0005883a 	mov	r2,zero
  804ad8:	1007883a 	mov	r3,r2
  804adc:	e0bffc17 	ldw	r2,-16(fp)
  804ae0:	10c02d45 	stb	r3,181(r2)
  if (d->_g114) {
  804ae4:	e0bffc17 	ldw	r2,-16(fp)
  804ae8:	10802d43 	ldbu	r2,181(r2)
  804aec:	10803fcc 	andi	r2,r2,255
  804af0:	1080201c 	xori	r2,r2,128
  804af4:	10bfe004 	addi	r2,r2,-128
  804af8:	10000326 	beq	r2,zero,804b08 <logic+0x3f70>
    d->_Pacemaker_local__Atrig8 = 1;
  804afc:	e0bffc17 	ldw	r2,-16(fp)
  804b00:	00c00044 	movi	r3,1
  804b04:	10c01b05 	stb	r3,108(r2)
  }
  d->_g117 = d->_pg149_e2;
  804b08:	e0bffc17 	ldw	r2,-16(fp)
  804b0c:	10c05083 	ldbu	r3,322(r2)
  804b10:	e0bffc17 	ldw	r2,-16(fp)
  804b14:	10c02dc5 	stb	r3,183(r2)
  d->_cg139 = (d->VS || d->VP) && !d->VRP;
  804b18:	e0bffc17 	ldw	r2,-16(fp)
  804b1c:	10800043 	ldbu	r2,1(r2)
  804b20:	10803fcc 	andi	r2,r2,255
  804b24:	1080201c 	xori	r2,r2,128
  804b28:	10bfe004 	addi	r2,r2,-128
  804b2c:	1000061e 	bne	r2,zero,804b48 <logic+0x3fb0>
  804b30:	e0bffc17 	ldw	r2,-16(fp)
  804b34:	10801743 	ldbu	r2,93(r2)
  804b38:	10803fcc 	andi	r2,r2,255
  804b3c:	1080201c 	xori	r2,r2,128
  804b40:	10bfe004 	addi	r2,r2,-128
  804b44:	10000826 	beq	r2,zero,804b68 <logic+0x3fd0>
  804b48:	e0bffc17 	ldw	r2,-16(fp)
  804b4c:	10801803 	ldbu	r2,96(r2)
  804b50:	10803fcc 	andi	r2,r2,255
  804b54:	1080201c 	xori	r2,r2,128
  804b58:	10bfe004 	addi	r2,r2,-128
  804b5c:	1000021e 	bne	r2,zero,804b68 <logic+0x3fd0>
  804b60:	00800044 	movi	r2,1
  804b64:	00000106 	br	804b6c <logic+0x3fd4>
  804b68:	0005883a 	mov	r2,zero
  804b6c:	1007883a 	mov	r3,r2
  804b70:	e0bffc17 	ldw	r2,-16(fp)
  804b74:	10c04205 	stb	r3,264(r2)
  d->_g121 = d->_g117 && d->_cg139;
  804b78:	e0bffc17 	ldw	r2,-16(fp)
  804b7c:	10802dc3 	ldbu	r2,183(r2)
  804b80:	10803fcc 	andi	r2,r2,255
  804b84:	1080201c 	xori	r2,r2,128
  804b88:	10bfe004 	addi	r2,r2,-128
  804b8c:	10000826 	beq	r2,zero,804bb0 <logic+0x4018>
  804b90:	e0bffc17 	ldw	r2,-16(fp)
  804b94:	10804203 	ldbu	r2,264(r2)
  804b98:	10803fcc 	andi	r2,r2,255
  804b9c:	1080201c 	xori	r2,r2,128
  804ba0:	10bfe004 	addi	r2,r2,-128
  804ba4:	10000226 	beq	r2,zero,804bb0 <logic+0x4018>
  804ba8:	00800044 	movi	r2,1
  804bac:	00000106 	br	804bb4 <logic+0x401c>
  804bb0:	0005883a 	mov	r2,zero
  804bb4:	1007883a 	mov	r3,r2
  804bb8:	e0bffc17 	ldw	r2,-16(fp)
  804bbc:	10c02e85 	stb	r3,186(r2)
  if (d->_g121) {
  804bc0:	e0bffc17 	ldw	r2,-16(fp)
  804bc4:	10802e83 	ldbu	r2,186(r2)
  804bc8:	10803fcc 	andi	r2,r2,255
  804bcc:	1080201c 	xori	r2,r2,128
  804bd0:	10bfe004 	addi	r2,r2,-128
  804bd4:	10000526 	beq	r2,zero,804bec <logic+0x4054>
    d->_region5_URI_cURI = 0;
  804bd8:	e0bffc17 	ldw	r2,-16(fp)
  804bdc:	10001115 	stw	zero,68(r2)
  804be0:	10001215 	stw	zero,72(r2)
    d->_Pacemaker_local__Atrig8 = 0;
  804be4:	e0bffc17 	ldw	r2,-16(fp)
  804be8:	10001b05 	stb	zero,108(r2)
  }
  d->_g123 = d->_g121 || d->_g145;
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	10802e83 	ldbu	r2,186(r2)
  804bf4:	10803fcc 	andi	r2,r2,255
  804bf8:	1080201c 	xori	r2,r2,128
  804bfc:	10bfe004 	addi	r2,r2,-128
  804c00:	1000061e 	bne	r2,zero,804c1c <logic+0x4084>
  804c04:	e0bffc17 	ldw	r2,-16(fp)
  804c08:	10803283 	ldbu	r2,202(r2)
  804c0c:	10803fcc 	andi	r2,r2,255
  804c10:	1080201c 	xori	r2,r2,128
  804c14:	10bfe004 	addi	r2,r2,-128
  804c18:	10000226 	beq	r2,zero,804c24 <logic+0x408c>
  804c1c:	00800044 	movi	r2,1
  804c20:	00000106 	br	804c28 <logic+0x4090>
  804c24:	0005883a 	mov	r2,zero
  804c28:	1007883a 	mov	r3,r2
  804c2c:	e0bffc17 	ldw	r2,-16(fp)
  804c30:	10c02f05 	stb	r3,188(r2)
  d->_cg142 = d->_Pacemaker_local__Atrig8;
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10c01b03 	ldbu	r3,108(r2)
  804c3c:	e0bffc17 	ldw	r2,-16(fp)
  804c40:	10c04245 	stb	r3,265(r2)
  d->_g126 = d->_g123 && !d->_cg142;
  804c44:	e0bffc17 	ldw	r2,-16(fp)
  804c48:	10802f03 	ldbu	r2,188(r2)
  804c4c:	10803fcc 	andi	r2,r2,255
  804c50:	1080201c 	xori	r2,r2,128
  804c54:	10bfe004 	addi	r2,r2,-128
  804c58:	10000826 	beq	r2,zero,804c7c <logic+0x40e4>
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10804243 	ldbu	r2,265(r2)
  804c64:	10803fcc 	andi	r2,r2,255
  804c68:	1080201c 	xori	r2,r2,128
  804c6c:	10bfe004 	addi	r2,r2,-128
  804c70:	1000021e 	bne	r2,zero,804c7c <logic+0x40e4>
  804c74:	00800044 	movi	r2,1
  804c78:	00000106 	br	804c80 <logic+0x40e8>
  804c7c:	0005883a 	mov	r2,zero
  804c80:	1007883a 	mov	r3,r2
  804c84:	e0bffc17 	ldw	r2,-16(fp)
  804c88:	10c02f85 	stb	r3,190(r2)
  d->_g132 = !d->_g126;
  804c8c:	e0bffc17 	ldw	r2,-16(fp)
  804c90:	10802f83 	ldbu	r2,190(r2)
  804c94:	10803fcc 	andi	r2,r2,255
  804c98:	1080201c 	xori	r2,r2,128
  804c9c:	10bfe004 	addi	r2,r2,-128
  804ca0:	1005003a 	cmpeq	r2,r2,zero
  804ca4:	1007883a 	mov	r3,r2
  804ca8:	e0bffc17 	ldw	r2,-16(fp)
  804cac:	10c03085 	stb	r3,194(r2)
  d->_g111 = d->_g123 && d->_cg142;
  804cb0:	e0bffc17 	ldw	r2,-16(fp)
  804cb4:	10802f03 	ldbu	r2,188(r2)
  804cb8:	10803fcc 	andi	r2,r2,255
  804cbc:	1080201c 	xori	r2,r2,128
  804cc0:	10bfe004 	addi	r2,r2,-128
  804cc4:	10000826 	beq	r2,zero,804ce8 <logic+0x4150>
  804cc8:	e0bffc17 	ldw	r2,-16(fp)
  804ccc:	10804243 	ldbu	r2,265(r2)
  804cd0:	10803fcc 	andi	r2,r2,255
  804cd4:	1080201c 	xori	r2,r2,128
  804cd8:	10bfe004 	addi	r2,r2,-128
  804cdc:	10000226 	beq	r2,zero,804ce8 <logic+0x4150>
  804ce0:	00800044 	movi	r2,1
  804ce4:	00000106 	br	804cec <logic+0x4154>
  804ce8:	0005883a 	mov	r2,zero
  804cec:	1007883a 	mov	r3,r2
  804cf0:	e0bffc17 	ldw	r2,-16(fp)
  804cf4:	10c02d05 	stb	r3,180(r2)
  d->_g145 = d->_pg150;
  804cf8:	e0bffc17 	ldw	r2,-16(fp)
  804cfc:	10c050c3 	ldbu	r3,323(r2)
  804d00:	e0bffc17 	ldw	r2,-16(fp)
  804d04:	10c03285 	stb	r3,202(r2)
  d->_g142 = d->_pg153;
  804d08:	e0bffc17 	ldw	r2,-16(fp)
  804d0c:	10c05103 	ldbu	r3,324(r2)
  804d10:	e0bffc17 	ldw	r2,-16(fp)
  804d14:	10c03205 	stb	r3,200(r2)
  d->_g154 = d->_g121 || d->_g145 || d->_g142;
  804d18:	e0bffc17 	ldw	r2,-16(fp)
  804d1c:	10802e83 	ldbu	r2,186(r2)
  804d20:	10803fcc 	andi	r2,r2,255
  804d24:	1080201c 	xori	r2,r2,128
  804d28:	10bfe004 	addi	r2,r2,-128
  804d2c:	10000c1e 	bne	r2,zero,804d60 <logic+0x41c8>
  804d30:	e0bffc17 	ldw	r2,-16(fp)
  804d34:	10803283 	ldbu	r2,202(r2)
  804d38:	10803fcc 	andi	r2,r2,255
  804d3c:	1080201c 	xori	r2,r2,128
  804d40:	10bfe004 	addi	r2,r2,-128
  804d44:	1000061e 	bne	r2,zero,804d60 <logic+0x41c8>
  804d48:	e0bffc17 	ldw	r2,-16(fp)
  804d4c:	10803203 	ldbu	r2,200(r2)
  804d50:	10803fcc 	andi	r2,r2,255
  804d54:	1080201c 	xori	r2,r2,128
  804d58:	10bfe004 	addi	r2,r2,-128
  804d5c:	10000226 	beq	r2,zero,804d68 <logic+0x41d0>
  804d60:	00800044 	movi	r2,1
  804d64:	00000106 	br	804d6c <logic+0x41d4>
  804d68:	0005883a 	mov	r2,zero
  804d6c:	1007883a 	mov	r3,r2
  804d70:	e0bffc17 	ldw	r2,-16(fp)
  804d74:	10c03485 	stb	r3,210(r2)
  d->_cg147 = d->_region5_URI_cURI < d->URI_Constraint;
  804d78:	e0bffc17 	ldw	r2,-16(fp)
  804d7c:	14001117 	ldw	r16,68(r2)
  804d80:	14401217 	ldw	r17,72(r2)
  804d84:	e0bffc17 	ldw	r2,-16(fp)
  804d88:	10800617 	ldw	r2,24(r2)
  804d8c:	1009883a 	mov	r4,r2
  804d90:	0806fd80 	call	806fd8 <__floatsidf>
  804d94:	1009883a 	mov	r4,r2
  804d98:	180b883a 	mov	r5,r3
  804d9c:	04800044 	movi	r18,1
  804da0:	200d883a 	mov	r6,r4
  804da4:	280f883a 	mov	r7,r5
  804da8:	8009883a 	mov	r4,r16
  804dac:	880b883a 	mov	r5,r17
  804db0:	08065e80 	call	8065e8 <__ledf2>
  804db4:	10000116 	blt	r2,zero,804dbc <logic+0x4224>
  804db8:	0025883a 	mov	r18,zero
  804dbc:	9007883a 	mov	r3,r18
  804dc0:	e0bffc17 	ldw	r2,-16(fp)
  804dc4:	10c04285 	stb	r3,266(r2)
  d->_g151 = d->_g154 && !d->_cg147;
  804dc8:	e0bffc17 	ldw	r2,-16(fp)
  804dcc:	10803483 	ldbu	r2,210(r2)
  804dd0:	10803fcc 	andi	r2,r2,255
  804dd4:	1080201c 	xori	r2,r2,128
  804dd8:	10bfe004 	addi	r2,r2,-128
  804ddc:	10000826 	beq	r2,zero,804e00 <logic+0x4268>
  804de0:	e0bffc17 	ldw	r2,-16(fp)
  804de4:	10804283 	ldbu	r2,266(r2)
  804de8:	10803fcc 	andi	r2,r2,255
  804dec:	1080201c 	xori	r2,r2,128
  804df0:	10bfe004 	addi	r2,r2,-128
  804df4:	1000021e 	bne	r2,zero,804e00 <logic+0x4268>
  804df8:	00800044 	movi	r2,1
  804dfc:	00000106 	br	804e04 <logic+0x426c>
  804e00:	0005883a 	mov	r2,zero
  804e04:	1007883a 	mov	r3,r2
  804e08:	e0bffc17 	ldw	r2,-16(fp)
  804e0c:	10c033c5 	stb	r3,207(r2)
  d->_cg152 = d->_Pacemaker_local__Atrig8;
  804e10:	e0bffc17 	ldw	r2,-16(fp)
  804e14:	10c01b03 	ldbu	r3,108(r2)
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10c04305 	stb	r3,268(r2)
  d->_g153 = d->_g151 && !d->_cg152;
  804e20:	e0bffc17 	ldw	r2,-16(fp)
  804e24:	108033c3 	ldbu	r2,207(r2)
  804e28:	10803fcc 	andi	r2,r2,255
  804e2c:	1080201c 	xori	r2,r2,128
  804e30:	10bfe004 	addi	r2,r2,-128
  804e34:	10000826 	beq	r2,zero,804e58 <logic+0x42c0>
  804e38:	e0bffc17 	ldw	r2,-16(fp)
  804e3c:	10804303 	ldbu	r2,268(r2)
  804e40:	10803fcc 	andi	r2,r2,255
  804e44:	1080201c 	xori	r2,r2,128
  804e48:	10bfe004 	addi	r2,r2,-128
  804e4c:	1000021e 	bne	r2,zero,804e58 <logic+0x42c0>
  804e50:	00800044 	movi	r2,1
  804e54:	00000106 	br	804e5c <logic+0x42c4>
  804e58:	0005883a 	mov	r2,zero
  804e5c:	1007883a 	mov	r3,r2
  804e60:	e0bffc17 	ldw	r2,-16(fp)
  804e64:	10c03445 	stb	r3,209(r2)
  d->_g147 = d->_g154 && d->_cg147;
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10803483 	ldbu	r2,210(r2)
  804e70:	10803fcc 	andi	r2,r2,255
  804e74:	1080201c 	xori	r2,r2,128
  804e78:	10bfe004 	addi	r2,r2,-128
  804e7c:	10000826 	beq	r2,zero,804ea0 <logic+0x4308>
  804e80:	e0bffc17 	ldw	r2,-16(fp)
  804e84:	10804283 	ldbu	r2,266(r2)
  804e88:	10803fcc 	andi	r2,r2,255
  804e8c:	1080201c 	xori	r2,r2,128
  804e90:	10bfe004 	addi	r2,r2,-128
  804e94:	10000226 	beq	r2,zero,804ea0 <logic+0x4308>
  804e98:	00800044 	movi	r2,1
  804e9c:	00000106 	br	804ea4 <logic+0x430c>
  804ea0:	0005883a 	mov	r2,zero
  804ea4:	1007883a 	mov	r3,r2
  804ea8:	e0bffc17 	ldw	r2,-16(fp)
  804eac:	10c032c5 	stb	r3,203(r2)
  if (d->_g147) {
  804eb0:	e0bffc17 	ldw	r2,-16(fp)
  804eb4:	108032c3 	ldbu	r2,203(r2)
  804eb8:	10803fcc 	andi	r2,r2,255
  804ebc:	1080201c 	xori	r2,r2,128
  804ec0:	10bfe004 	addi	r2,r2,-128
  804ec4:	10003426 	beq	r2,zero,804f98 <logic+0x4400>
    d->sleepT = (d->sleepT < (d->URI_Constraint - d->_region5_URI_cURI)) ? d->sleepT : (d->URI_Constraint - d->_region5_URI_cURI);
  804ec8:	e0bffc17 	ldw	r2,-16(fp)
  804ecc:	14001517 	ldw	r16,84(r2)
  804ed0:	14401617 	ldw	r17,88(r2)
  804ed4:	e0bffc17 	ldw	r2,-16(fp)
  804ed8:	10800617 	ldw	r2,24(r2)
  804edc:	1009883a 	mov	r4,r2
  804ee0:	0806fd80 	call	806fd8 <__floatsidf>
  804ee4:	1011883a 	mov	r8,r2
  804ee8:	1813883a 	mov	r9,r3
  804eec:	e13ffc17 	ldw	r4,-16(fp)
  804ef0:	20801117 	ldw	r2,68(r4)
  804ef4:	20c01217 	ldw	r3,72(r4)
  804ef8:	100d883a 	mov	r6,r2
  804efc:	180f883a 	mov	r7,r3
  804f00:	4009883a 	mov	r4,r8
  804f04:	480b883a 	mov	r5,r9
  804f08:	08066dc0 	call	8066dc <__subdf3>
  804f0c:	1009883a 	mov	r4,r2
  804f10:	180b883a 	mov	r5,r3
  804f14:	2005883a 	mov	r2,r4
  804f18:	2807883a 	mov	r3,r5
  804f1c:	100d883a 	mov	r6,r2
  804f20:	180f883a 	mov	r7,r3
  804f24:	8009883a 	mov	r4,r16
  804f28:	880b883a 	mov	r5,r17
  804f2c:	08065e80 	call	8065e8 <__ledf2>
  804f30:	1000040e 	bge	r2,zero,804f44 <logic+0x43ac>
  804f34:	e13ffc17 	ldw	r4,-16(fp)
  804f38:	20801517 	ldw	r2,84(r4)
  804f3c:	20c01617 	ldw	r3,88(r4)
  804f40:	00001206 	br	804f8c <logic+0x43f4>
  804f44:	e0bffc17 	ldw	r2,-16(fp)
  804f48:	10800617 	ldw	r2,24(r2)
  804f4c:	1009883a 	mov	r4,r2
  804f50:	0806fd80 	call	806fd8 <__floatsidf>
  804f54:	1011883a 	mov	r8,r2
  804f58:	1813883a 	mov	r9,r3
  804f5c:	e13ffc17 	ldw	r4,-16(fp)
  804f60:	20801117 	ldw	r2,68(r4)
  804f64:	20c01217 	ldw	r3,72(r4)
  804f68:	100d883a 	mov	r6,r2
  804f6c:	180f883a 	mov	r7,r3
  804f70:	4009883a 	mov	r4,r8
  804f74:	480b883a 	mov	r5,r9
  804f78:	08066dc0 	call	8066dc <__subdf3>
  804f7c:	1009883a 	mov	r4,r2
  804f80:	180b883a 	mov	r5,r3
  804f84:	2005883a 	mov	r2,r4
  804f88:	2807883a 	mov	r3,r5
  804f8c:	e13ffc17 	ldw	r4,-16(fp)
  804f90:	20801515 	stw	r2,84(r4)
  804f94:	20c01615 	stw	r3,88(r4)
  }
  d->_cg148 = d->_Pacemaker_local__Atrig8;
  804f98:	e0bffc17 	ldw	r2,-16(fp)
  804f9c:	10c01b03 	ldbu	r3,108(r2)
  804fa0:	e0bffc17 	ldw	r2,-16(fp)
  804fa4:	10c042c5 	stb	r3,267(r2)
  d->_g150 = d->_g147 && !d->_cg148;
  804fa8:	e0bffc17 	ldw	r2,-16(fp)
  804fac:	108032c3 	ldbu	r2,203(r2)
  804fb0:	10803fcc 	andi	r2,r2,255
  804fb4:	1080201c 	xori	r2,r2,128
  804fb8:	10bfe004 	addi	r2,r2,-128
  804fbc:	10000826 	beq	r2,zero,804fe0 <logic+0x4448>
  804fc0:	e0bffc17 	ldw	r2,-16(fp)
  804fc4:	108042c3 	ldbu	r2,267(r2)
  804fc8:	10803fcc 	andi	r2,r2,255
  804fcc:	1080201c 	xori	r2,r2,128
  804fd0:	10bfe004 	addi	r2,r2,-128
  804fd4:	1000021e 	bne	r2,zero,804fe0 <logic+0x4448>
  804fd8:	00800044 	movi	r2,1
  804fdc:	00000106 	br	804fe4 <logic+0x444c>
  804fe0:	0005883a 	mov	r2,zero
  804fe4:	1007883a 	mov	r3,r2
  804fe8:	e0bffc17 	ldw	r2,-16(fp)
  804fec:	10c03385 	stb	r3,206(r2)
  d->_g149_e2 = !(d->_g153 || d->_g150);
  804ff0:	e0bffc17 	ldw	r2,-16(fp)
  804ff4:	10803443 	ldbu	r2,209(r2)
  804ff8:	10803fcc 	andi	r2,r2,255
  804ffc:	1080201c 	xori	r2,r2,128
  805000:	10bfe004 	addi	r2,r2,-128
  805004:	1000081e 	bne	r2,zero,805028 <logic+0x4490>
  805008:	e0bffc17 	ldw	r2,-16(fp)
  80500c:	10803383 	ldbu	r2,206(r2)
  805010:	10803fcc 	andi	r2,r2,255
  805014:	1080201c 	xori	r2,r2,128
  805018:	10bfe004 	addi	r2,r2,-128
  80501c:	1000021e 	bne	r2,zero,805028 <logic+0x4490>
  805020:	00800044 	movi	r2,1
  805024:	00000106 	br	80502c <logic+0x4494>
  805028:	0005883a 	mov	r2,zero
  80502c:	1007883a 	mov	r3,r2
  805030:	e0bffc17 	ldw	r2,-16(fp)
  805034:	10c04785 	stb	r3,286(r2)
  d->_g152 = d->_g147 && d->_cg148 || d->_g151 && d->_cg152;
  805038:	e0bffc17 	ldw	r2,-16(fp)
  80503c:	108032c3 	ldbu	r2,203(r2)
  805040:	10803fcc 	andi	r2,r2,255
  805044:	1080201c 	xori	r2,r2,128
  805048:	10bfe004 	addi	r2,r2,-128
  80504c:	10000626 	beq	r2,zero,805068 <logic+0x44d0>
  805050:	e0bffc17 	ldw	r2,-16(fp)
  805054:	108042c3 	ldbu	r2,267(r2)
  805058:	10803fcc 	andi	r2,r2,255
  80505c:	1080201c 	xori	r2,r2,128
  805060:	10bfe004 	addi	r2,r2,-128
  805064:	10000c1e 	bne	r2,zero,805098 <logic+0x4500>
  805068:	e0bffc17 	ldw	r2,-16(fp)
  80506c:	108033c3 	ldbu	r2,207(r2)
  805070:	10803fcc 	andi	r2,r2,255
  805074:	1080201c 	xori	r2,r2,128
  805078:	10bfe004 	addi	r2,r2,-128
  80507c:	10000826 	beq	r2,zero,8050a0 <logic+0x4508>
  805080:	e0bffc17 	ldw	r2,-16(fp)
  805084:	10804303 	ldbu	r2,268(r2)
  805088:	10803fcc 	andi	r2,r2,255
  80508c:	1080201c 	xori	r2,r2,128
  805090:	10bfe004 	addi	r2,r2,-128
  805094:	10000226 	beq	r2,zero,8050a0 <logic+0x4508>
  805098:	00800044 	movi	r2,1
  80509c:	00000106 	br	8050a4 <logic+0x450c>
  8050a0:	0005883a 	mov	r2,zero
  8050a4:	1007883a 	mov	r3,r2
  8050a8:	e0bffc17 	ldw	r2,-16(fp)
  8050ac:	10c03405 	stb	r3,208(r2)
  d->_g148 = d->_g121 || d->_g110 && !d->_cg157;
  8050b0:	e0bffc17 	ldw	r2,-16(fp)
  8050b4:	10802e83 	ldbu	r2,186(r2)
  8050b8:	10803fcc 	andi	r2,r2,255
  8050bc:	1080201c 	xori	r2,r2,128
  8050c0:	10bfe004 	addi	r2,r2,-128
  8050c4:	10000c1e 	bne	r2,zero,8050f8 <logic+0x4560>
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	10802cc3 	ldbu	r2,179(r2)
  8050d0:	10803fcc 	andi	r2,r2,255
  8050d4:	1080201c 	xori	r2,r2,128
  8050d8:	10bfe004 	addi	r2,r2,-128
  8050dc:	10000826 	beq	r2,zero,805100 <logic+0x4568>
  8050e0:	e0bffc17 	ldw	r2,-16(fp)
  8050e4:	10804343 	ldbu	r2,269(r2)
  8050e8:	10803fcc 	andi	r2,r2,255
  8050ec:	1080201c 	xori	r2,r2,128
  8050f0:	10bfe004 	addi	r2,r2,-128
  8050f4:	1000021e 	bne	r2,zero,805100 <logic+0x4568>
  8050f8:	00800044 	movi	r2,1
  8050fc:	00000106 	br	805104 <logic+0x456c>
  805100:	0005883a 	mov	r2,zero
  805104:	1007883a 	mov	r3,r2
  805108:	e0bffc17 	ldw	r2,-16(fp)
  80510c:	10c03305 	stb	r3,204(r2)
  d->_g157 = !d->_g148;
  805110:	e0bffc17 	ldw	r2,-16(fp)
  805114:	10803303 	ldbu	r2,204(r2)
  805118:	10803fcc 	andi	r2,r2,255
  80511c:	1080201c 	xori	r2,r2,128
  805120:	10bfe004 	addi	r2,r2,-128
  805124:	1005003a 	cmpeq	r2,r2,zero
  805128:	1007883a 	mov	r3,r2
  80512c:	e0bffc17 	ldw	r2,-16(fp)
  805130:	10c034c5 	stb	r3,211(r2)
  d->_g140 = (d->_g132 || d->_g111) && (d->_g149_e2 || d->_g152) && (d->_g157 || d->_g114) && (d->_g111 || d->_g152 || d->_g114);
  805134:	e0bffc17 	ldw	r2,-16(fp)
  805138:	10803083 	ldbu	r2,194(r2)
  80513c:	10803fcc 	andi	r2,r2,255
  805140:	1080201c 	xori	r2,r2,128
  805144:	10bfe004 	addi	r2,r2,-128
  805148:	1000061e 	bne	r2,zero,805164 <logic+0x45cc>
  80514c:	e0bffc17 	ldw	r2,-16(fp)
  805150:	10802d03 	ldbu	r2,180(r2)
  805154:	10803fcc 	andi	r2,r2,255
  805158:	1080201c 	xori	r2,r2,128
  80515c:	10bfe004 	addi	r2,r2,-128
  805160:	10002c26 	beq	r2,zero,805214 <logic+0x467c>
  805164:	e0bffc17 	ldw	r2,-16(fp)
  805168:	10804783 	ldbu	r2,286(r2)
  80516c:	10803fcc 	andi	r2,r2,255
  805170:	1080201c 	xori	r2,r2,128
  805174:	10bfe004 	addi	r2,r2,-128
  805178:	1000061e 	bne	r2,zero,805194 <logic+0x45fc>
  80517c:	e0bffc17 	ldw	r2,-16(fp)
  805180:	10803403 	ldbu	r2,208(r2)
  805184:	10803fcc 	andi	r2,r2,255
  805188:	1080201c 	xori	r2,r2,128
  80518c:	10bfe004 	addi	r2,r2,-128
  805190:	10002026 	beq	r2,zero,805214 <logic+0x467c>
  805194:	e0bffc17 	ldw	r2,-16(fp)
  805198:	108034c3 	ldbu	r2,211(r2)
  80519c:	10803fcc 	andi	r2,r2,255
  8051a0:	1080201c 	xori	r2,r2,128
  8051a4:	10bfe004 	addi	r2,r2,-128
  8051a8:	1000061e 	bne	r2,zero,8051c4 <logic+0x462c>
  8051ac:	e0bffc17 	ldw	r2,-16(fp)
  8051b0:	10802d43 	ldbu	r2,181(r2)
  8051b4:	10803fcc 	andi	r2,r2,255
  8051b8:	1080201c 	xori	r2,r2,128
  8051bc:	10bfe004 	addi	r2,r2,-128
  8051c0:	10001426 	beq	r2,zero,805214 <logic+0x467c>
  8051c4:	e0bffc17 	ldw	r2,-16(fp)
  8051c8:	10802d03 	ldbu	r2,180(r2)
  8051cc:	10803fcc 	andi	r2,r2,255
  8051d0:	1080201c 	xori	r2,r2,128
  8051d4:	10bfe004 	addi	r2,r2,-128
  8051d8:	10000c1e 	bne	r2,zero,80520c <logic+0x4674>
  8051dc:	e0bffc17 	ldw	r2,-16(fp)
  8051e0:	10803403 	ldbu	r2,208(r2)
  8051e4:	10803fcc 	andi	r2,r2,255
  8051e8:	1080201c 	xori	r2,r2,128
  8051ec:	10bfe004 	addi	r2,r2,-128
  8051f0:	1000061e 	bne	r2,zero,80520c <logic+0x4674>
  8051f4:	e0bffc17 	ldw	r2,-16(fp)
  8051f8:	10802d43 	ldbu	r2,181(r2)
  8051fc:	10803fcc 	andi	r2,r2,255
  805200:	1080201c 	xori	r2,r2,128
  805204:	10bfe004 	addi	r2,r2,-128
  805208:	10000226 	beq	r2,zero,805214 <logic+0x467c>
  80520c:	00800044 	movi	r2,1
  805210:	00000106 	br	805218 <logic+0x4680>
  805214:	0005883a 	mov	r2,zero
  805218:	1007883a 	mov	r3,r2
  80521c:	e0bffc17 	ldw	r2,-16(fp)
  805220:	10c031c5 	stb	r3,199(r2)
  d->_g149_e2 = d->_GO || d->_g140 || d->_g117 && !d->_cg139;
  805224:	e0bffc17 	ldw	r2,-16(fp)
  805228:	108035c3 	ldbu	r2,215(r2)
  80522c:	10803fcc 	andi	r2,r2,255
  805230:	1080201c 	xori	r2,r2,128
  805234:	10bfe004 	addi	r2,r2,-128
  805238:	1000121e 	bne	r2,zero,805284 <logic+0x46ec>
  80523c:	e0bffc17 	ldw	r2,-16(fp)
  805240:	108031c3 	ldbu	r2,199(r2)
  805244:	10803fcc 	andi	r2,r2,255
  805248:	1080201c 	xori	r2,r2,128
  80524c:	10bfe004 	addi	r2,r2,-128
  805250:	10000c1e 	bne	r2,zero,805284 <logic+0x46ec>
  805254:	e0bffc17 	ldw	r2,-16(fp)
  805258:	10802dc3 	ldbu	r2,183(r2)
  80525c:	10803fcc 	andi	r2,r2,255
  805260:	1080201c 	xori	r2,r2,128
  805264:	10bfe004 	addi	r2,r2,-128
  805268:	10000826 	beq	r2,zero,80528c <logic+0x46f4>
  80526c:	e0bffc17 	ldw	r2,-16(fp)
  805270:	10804203 	ldbu	r2,264(r2)
  805274:	10803fcc 	andi	r2,r2,255
  805278:	1080201c 	xori	r2,r2,128
  80527c:	10bfe004 	addi	r2,r2,-128
  805280:	1000021e 	bne	r2,zero,80528c <logic+0x46f4>
  805284:	00800044 	movi	r2,1
  805288:	00000106 	br	805290 <logic+0x46f8>
  80528c:	0005883a 	mov	r2,zero
  805290:	1007883a 	mov	r3,r2
  805294:	e0bffc17 	ldw	r2,-16(fp)
  805298:	10c04785 	stb	r3,286(r2)
  d->_g143 = d->_GO || d->_g167;
  80529c:	e0bffc17 	ldw	r2,-16(fp)
  8052a0:	108035c3 	ldbu	r2,215(r2)
  8052a4:	10803fcc 	andi	r2,r2,255
  8052a8:	1080201c 	xori	r2,r2,128
  8052ac:	10bfe004 	addi	r2,r2,-128
  8052b0:	1000061e 	bne	r2,zero,8052cc <logic+0x4734>
  8052b4:	e0bffc17 	ldw	r2,-16(fp)
  8052b8:	10803543 	ldbu	r2,213(r2)
  8052bc:	10803fcc 	andi	r2,r2,255
  8052c0:	1080201c 	xori	r2,r2,128
  8052c4:	10bfe004 	addi	r2,r2,-128
  8052c8:	10000226 	beq	r2,zero,8052d4 <logic+0x473c>
  8052cc:	00800044 	movi	r2,1
  8052d0:	00000106 	br	8052d8 <logic+0x4740>
  8052d4:	0005883a 	mov	r2,zero
  8052d8:	1007883a 	mov	r3,r2
  8052dc:	e0bffc17 	ldw	r2,-16(fp)
  8052e0:	10c03245 	stb	r3,201(r2)
  d->_g149 = d->_GO || d->_g15;
  8052e4:	e0bffc17 	ldw	r2,-16(fp)
  8052e8:	108035c3 	ldbu	r2,215(r2)
  8052ec:	10803fcc 	andi	r2,r2,255
  8052f0:	1080201c 	xori	r2,r2,128
  8052f4:	10bfe004 	addi	r2,r2,-128
  8052f8:	1000061e 	bne	r2,zero,805314 <logic+0x477c>
  8052fc:	e0bffc17 	ldw	r2,-16(fp)
  805300:	10801d03 	ldbu	r2,116(r2)
  805304:	10803fcc 	andi	r2,r2,255
  805308:	1080201c 	xori	r2,r2,128
  80530c:	10bfe004 	addi	r2,r2,-128
  805310:	10000226 	beq	r2,zero,80531c <logic+0x4784>
  805314:	00800044 	movi	r2,1
  805318:	00000106 	br	805320 <logic+0x4788>
  80531c:	0005883a 	mov	r2,zero
  805320:	1007883a 	mov	r3,r2
  805324:	e0bffc17 	ldw	r2,-16(fp)
  805328:	10c03345 	stb	r3,205(r2)
  d->_g158_e3 = d->_GO || d->_g52;
  80532c:	e0bffc17 	ldw	r2,-16(fp)
  805330:	108035c3 	ldbu	r2,215(r2)
  805334:	10803fcc 	andi	r2,r2,255
  805338:	1080201c 	xori	r2,r2,128
  80533c:	10bfe004 	addi	r2,r2,-128
  805340:	1000061e 	bne	r2,zero,80535c <logic+0x47c4>
  805344:	e0bffc17 	ldw	r2,-16(fp)
  805348:	10802383 	ldbu	r2,142(r2)
  80534c:	10803fcc 	andi	r2,r2,255
  805350:	1080201c 	xori	r2,r2,128
  805354:	10bfe004 	addi	r2,r2,-128
  805358:	10000226 	beq	r2,zero,805364 <logic+0x47cc>
  80535c:	00800044 	movi	r2,1
  805360:	00000106 	br	805368 <logic+0x47d0>
  805364:	0005883a 	mov	r2,zero
  805368:	1007883a 	mov	r3,r2
  80536c:	e0bffc17 	ldw	r2,-16(fp)
  805370:	10c047c5 	stb	r3,287(r2)
  d->_g158 = d->_GO || d->_g25;
  805374:	e0bffc17 	ldw	r2,-16(fp)
  805378:	108035c3 	ldbu	r2,215(r2)
  80537c:	10803fcc 	andi	r2,r2,255
  805380:	1080201c 	xori	r2,r2,128
  805384:	10bfe004 	addi	r2,r2,-128
  805388:	1000061e 	bne	r2,zero,8053a4 <logic+0x480c>
  80538c:	e0bffc17 	ldw	r2,-16(fp)
  805390:	10801ec3 	ldbu	r2,123(r2)
  805394:	10803fcc 	andi	r2,r2,255
  805398:	1080201c 	xori	r2,r2,128
  80539c:	10bfe004 	addi	r2,r2,-128
  8053a0:	10000226 	beq	r2,zero,8053ac <logic+0x4814>
  8053a4:	00800044 	movi	r2,1
  8053a8:	00000106 	br	8053b0 <logic+0x4818>
  8053ac:	0005883a 	mov	r2,zero
  8053b0:	1007883a 	mov	r3,r2
  8053b4:	e0bffc17 	ldw	r2,-16(fp)
  8053b8:	10c03505 	stb	r3,212(r2)
  d->_g143_e1 = d->_GO || d->_g183;
  8053bc:	e0bffc17 	ldw	r2,-16(fp)
  8053c0:	108035c3 	ldbu	r2,215(r2)
  8053c4:	10803fcc 	andi	r2,r2,255
  8053c8:	1080201c 	xori	r2,r2,128
  8053cc:	10bfe004 	addi	r2,r2,-128
  8053d0:	1000061e 	bne	r2,zero,8053ec <logic+0x4854>
  8053d4:	e0bffc17 	ldw	r2,-16(fp)
  8053d8:	10803583 	ldbu	r2,214(r2)
  8053dc:	10803fcc 	andi	r2,r2,255
  8053e0:	1080201c 	xori	r2,r2,128
  8053e4:	10bfe004 	addi	r2,r2,-128
  8053e8:	10000226 	beq	r2,zero,8053f4 <logic+0x485c>
  8053ec:	00800044 	movi	r2,1
  8053f0:	00000106 	br	8053f8 <logic+0x4860>
  8053f4:	0005883a 	mov	r2,zero
  8053f8:	1007883a 	mov	r3,r2
  8053fc:	e0bffc17 	ldw	r2,-16(fp)
  805400:	10c04745 	stb	r3,285(r2)
  d->_g139 = d->_GO || d->_g135;
  805404:	e0bffc17 	ldw	r2,-16(fp)
  805408:	108035c3 	ldbu	r2,215(r2)
  80540c:	10803fcc 	andi	r2,r2,255
  805410:	1080201c 	xori	r2,r2,128
  805414:	10bfe004 	addi	r2,r2,-128
  805418:	1000061e 	bne	r2,zero,805434 <logic+0x489c>
  80541c:	e0bffc17 	ldw	r2,-16(fp)
  805420:	10803143 	ldbu	r2,197(r2)
  805424:	10803fcc 	andi	r2,r2,255
  805428:	1080201c 	xori	r2,r2,128
  80542c:	10bfe004 	addi	r2,r2,-128
  805430:	10000226 	beq	r2,zero,80543c <logic+0x48a4>
  805434:	00800044 	movi	r2,1
  805438:	00000106 	br	805440 <logic+0x48a8>
  80543c:	0005883a 	mov	r2,zero
  805440:	1007883a 	mov	r3,r2
  805444:	e0bffc17 	ldw	r2,-16(fp)
  805448:	10c03185 	stb	r3,198(r2)
}
  80544c:	0001883a 	nop
  805450:	e6fffd04 	addi	sp,fp,-12
  805454:	dfc00417 	ldw	ra,16(sp)
  805458:	df000317 	ldw	fp,12(sp)
  80545c:	dc800217 	ldw	r18,8(sp)
  805460:	dc400117 	ldw	r17,4(sp)
  805464:	dc000017 	ldw	r16,0(sp)
  805468:	dec00504 	addi	sp,sp,20
  80546c:	f800283a 	ret

00805470 <reset>:

void reset(TickData* d) {
  805470:	defffe04 	addi	sp,sp,-8
  805474:	df000115 	stw	fp,4(sp)
  805478:	df000104 	addi	fp,sp,4
  80547c:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  805480:	e0bfff17 	ldw	r2,-4(fp)
  805484:	00c00044 	movi	r3,1
  805488:	10c035c5 	stb	r3,215(r2)
  d->_TERM = 0;
  80548c:	e0bfff17 	ldw	r2,-4(fp)
  805490:	10004805 	stb	zero,288(r2)
  d->AVI_Constraint = AVI_VALUE;
  805494:	e0bfff17 	ldw	r2,-4(fp)
  805498:	00c04b04 	movi	r3,300
  80549c:	10c00115 	stw	r3,4(r2)
  d->PVARP_Constraint = PVARP_VALUE;
  8054a0:	e0bfff17 	ldw	r2,-4(fp)
  8054a4:	00c00c84 	movi	r3,50
  8054a8:	10c00215 	stw	r3,8(r2)
  d->VRP_Constraint = VRP_VALUE;
  8054ac:	e0bfff17 	ldw	r2,-4(fp)
  8054b0:	00c02584 	movi	r3,150
  8054b4:	10c00315 	stw	r3,12(r2)
  d->AEI_Constraint = AEI_VALUE;
  8054b8:	e0bfff17 	ldw	r2,-4(fp)
  8054bc:	00c0c804 	movi	r3,800
  8054c0:	10c00415 	stw	r3,16(r2)
  d->LRI_Constraint = LRI_VALUE;
  8054c4:	e0bfff17 	ldw	r2,-4(fp)
  8054c8:	00c0ed84 	movi	r3,950
  8054cc:	10c00515 	stw	r3,20(r2)
  d->URI_Constraint = URI_VALUE;
  8054d0:	e0bfff17 	ldw	r2,-4(fp)
  8054d4:	00c0e104 	movi	r3,900
  8054d8:	10c00615 	stw	r3,24(r2)
  d->_region0_AVI_cAVI = 0;
  8054dc:	e0bfff17 	ldw	r2,-4(fp)
  8054e0:	10000715 	stw	zero,28(r2)
  8054e4:	10000815 	stw	zero,32(r2)
  d->_region1_PVARP_cPVARP = 0;
  8054e8:	e0bfff17 	ldw	r2,-4(fp)
  8054ec:	10000915 	stw	zero,36(r2)
  8054f0:	10000a15 	stw	zero,40(r2)
  d->_region2_VRP_cVRP = 0;
  8054f4:	e0bfff17 	ldw	r2,-4(fp)
  8054f8:	10000b15 	stw	zero,44(r2)
  8054fc:	10000c15 	stw	zero,48(r2)
  d->_region3_AEI_cAEI = 0;
  805500:	e0bfff17 	ldw	r2,-4(fp)
  805504:	10000d15 	stw	zero,52(r2)
  805508:	10000e15 	stw	zero,56(r2)
  d->_region4_LRI_cLRI = 0;
  80550c:	e0bfff17 	ldw	r2,-4(fp)
  805510:	10000f15 	stw	zero,60(r2)
  805514:	10001015 	stw	zero,64(r2)
  d->_region5_URI_cURI = 0;
  805518:	e0bfff17 	ldw	r2,-4(fp)
  80551c:	10001115 	stw	zero,68(r2)
  805520:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  805524:	e0bfff17 	ldw	r2,-4(fp)
  805528:	10001315 	stw	zero,76(r2)
  80552c:	10001415 	stw	zero,80(r2)
  d->sleepT = 0.0;
  805530:	e0bfff17 	ldw	r2,-4(fp)
  805534:	10001515 	stw	zero,84(r2)
  805538:	10001615 	stw	zero,88(r2)
  d->_pg93 = 0;
  80553c:	e0bfff17 	ldw	r2,-4(fp)
  805540:	10004845 	stb	zero,289(r2)
  d->_pg126 = 0;
  805544:	e0bfff17 	ldw	r2,-4(fp)
  805548:	10004885 	stb	zero,290(r2)
  d->_pg143 = 0;
  80554c:	e0bfff17 	ldw	r2,-4(fp)
  805550:	100048c5 	stb	zero,291(r2)
  d->_pg8 = 0;
  805554:	e0bfff17 	ldw	r2,-4(fp)
  805558:	10004905 	stb	zero,292(r2)
  d->_pg4 = 0;
  80555c:	e0bfff17 	ldw	r2,-4(fp)
  805560:	10004945 	stb	zero,293(r2)
  d->_pg28 = 0;
  805564:	e0bfff17 	ldw	r2,-4(fp)
  805568:	10004985 	stb	zero,294(r2)
  d->_pg131 = 0;
  80556c:	e0bfff17 	ldw	r2,-4(fp)
  805570:	100049c5 	stb	zero,295(r2)
  d->_pg67 = 0;
  805574:	e0bfff17 	ldw	r2,-4(fp)
  805578:	10004a05 	stb	zero,296(r2)
  d->_pg158 = 0;
  80557c:	e0bfff17 	ldw	r2,-4(fp)
  805580:	10004a45 	stb	zero,297(r2)
  d->_pg106 = 0;
  805584:	e0bfff17 	ldw	r2,-4(fp)
  805588:	10004a85 	stb	zero,298(r2)
  d->_pg105 = 0;
  80558c:	e0bfff17 	ldw	r2,-4(fp)
  805590:	10004ac5 	stb	zero,299(r2)
  d->_pg77 = 0;
  805594:	e0bfff17 	ldw	r2,-4(fp)
  805598:	10004b05 	stb	zero,300(r2)
  d->_pg86 = 0;
  80559c:	e0bfff17 	ldw	r2,-4(fp)
  8055a0:	10004b45 	stb	zero,301(r2)
  d->_pg149 = 0;
  8055a4:	e0bfff17 	ldw	r2,-4(fp)
  8055a8:	10004b85 	stb	zero,302(r2)
  d->_pg42 = 0;
  8055ac:	e0bfff17 	ldw	r2,-4(fp)
  8055b0:	10004bc5 	stb	zero,303(r2)
  d->_pg92 = 0;
  8055b4:	e0bfff17 	ldw	r2,-4(fp)
  8055b8:	10004c05 	stb	zero,304(r2)
  d->_pg53 = 0;
  8055bc:	e0bfff17 	ldw	r2,-4(fp)
  8055c0:	10004c45 	stb	zero,305(r2)
  d->_pg134 = 0;
  8055c4:	e0bfff17 	ldw	r2,-4(fp)
  8055c8:	10004c85 	stb	zero,306(r2)
  d->_pg143_e1 = 0;
  8055cc:	e0bfff17 	ldw	r2,-4(fp)
  8055d0:	10004cc5 	stb	zero,307(r2)
  d->_pg82 = 0;
  8055d4:	e0bfff17 	ldw	r2,-4(fp)
  8055d8:	10004d05 	stb	zero,308(r2)
  d->_pg94 = 0;
  8055dc:	e0bfff17 	ldw	r2,-4(fp)
  8055e0:	10004d45 	stb	zero,309(r2)
  d->_pg37 = 0;
  8055e4:	e0bfff17 	ldw	r2,-4(fp)
  8055e8:	10004d85 	stb	zero,310(r2)
  d->_pg44 = 0;
  8055ec:	e0bfff17 	ldw	r2,-4(fp)
  8055f0:	10004dc5 	stb	zero,311(r2)
  d->_pg47 = 0;
  8055f4:	e0bfff17 	ldw	r2,-4(fp)
  8055f8:	10004e05 	stb	zero,312(r2)
  d->_pg158_e3 = 0;
  8055fc:	e0bfff17 	ldw	r2,-4(fp)
  805600:	10004e45 	stb	zero,313(r2)
  d->_pg70 = 0;
  805604:	e0bfff17 	ldw	r2,-4(fp)
  805608:	10004e85 	stb	zero,314(r2)
  d->_pg76_e3 = 0;
  80560c:	e0bfff17 	ldw	r2,-4(fp)
  805610:	10004ec5 	stb	zero,315(r2)
  d->_pg68 = 0;
  805614:	e0bfff17 	ldw	r2,-4(fp)
  805618:	10004f05 	stb	zero,316(r2)
  d->_pg71 = 0;
  80561c:	e0bfff17 	ldw	r2,-4(fp)
  805620:	10004f45 	stb	zero,317(r2)
  d->_pg76 = 0;
  805624:	e0bfff17 	ldw	r2,-4(fp)
  805628:	10004f85 	stb	zero,318(r2)
  d->_pg85 = 0;
  80562c:	e0bfff17 	ldw	r2,-4(fp)
  805630:	10004fc5 	stb	zero,319(r2)
  d->_pg139 = 0;
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	10005005 	stb	zero,320(r2)
  d->_pg148 = 0;
  80563c:	e0bfff17 	ldw	r2,-4(fp)
  805640:	10005045 	stb	zero,321(r2)
  d->_pg149_e2 = 0;
  805644:	e0bfff17 	ldw	r2,-4(fp)
  805648:	10005085 	stb	zero,322(r2)
  d->_pg150 = 0;
  80564c:	e0bfff17 	ldw	r2,-4(fp)
  805650:	100050c5 	stb	zero,323(r2)
  d->_pg153 = 0;
  805654:	e0bfff17 	ldw	r2,-4(fp)
  805658:	10005105 	stb	zero,324(r2)
}
  80565c:	0001883a 	nop
  805660:	e037883a 	mov	sp,fp
  805664:	df000017 	ldw	fp,0(sp)
  805668:	dec00104 	addi	sp,sp,4
  80566c:	f800283a 	ret

00805670 <tick>:

void tick(TickData* d) {
  805670:	defffd04 	addi	sp,sp,-12
  805674:	dfc00215 	stw	ra,8(sp)
  805678:	df000115 	stw	fp,4(sp)
  80567c:	df000104 	addi	fp,sp,4
  805680:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  805684:	e13fff17 	ldw	r4,-4(fp)
  805688:	0800b980 	call	800b98 <logic>

  d->_pg93 = d->_g93;
  80568c:	e0bfff17 	ldw	r2,-4(fp)
  805690:	10c02a03 	ldbu	r3,168(r2)
  805694:	e0bfff17 	ldw	r2,-4(fp)
  805698:	10c04845 	stb	r3,289(r2)
  d->_pg126 = d->_g126;
  80569c:	e0bfff17 	ldw	r2,-4(fp)
  8056a0:	10c02f83 	ldbu	r3,190(r2)
  8056a4:	e0bfff17 	ldw	r2,-4(fp)
  8056a8:	10c04885 	stb	r3,290(r2)
  d->_pg143 = d->_g143;
  8056ac:	e0bfff17 	ldw	r2,-4(fp)
  8056b0:	10c03243 	ldbu	r3,201(r2)
  8056b4:	e0bfff17 	ldw	r2,-4(fp)
  8056b8:	10c048c5 	stb	r3,291(r2)
  d->_pg8 = d->_g8;
  8056bc:	e0bfff17 	ldw	r2,-4(fp)
  8056c0:	10c01bc3 	ldbu	r3,111(r2)
  8056c4:	e0bfff17 	ldw	r2,-4(fp)
  8056c8:	10c04905 	stb	r3,292(r2)
  d->_pg4 = d->_g4;
  8056cc:	e0bfff17 	ldw	r2,-4(fp)
  8056d0:	10c01b43 	ldbu	r3,109(r2)
  8056d4:	e0bfff17 	ldw	r2,-4(fp)
  8056d8:	10c04945 	stb	r3,293(r2)
  d->_pg28 = d->_g28;
  8056dc:	e0bfff17 	ldw	r2,-4(fp)
  8056e0:	10c01f83 	ldbu	r3,126(r2)
  8056e4:	e0bfff17 	ldw	r2,-4(fp)
  8056e8:	10c04985 	stb	r3,294(r2)
  d->_pg131 = d->_g131;
  8056ec:	e0bfff17 	ldw	r2,-4(fp)
  8056f0:	10c03043 	ldbu	r3,193(r2)
  8056f4:	e0bfff17 	ldw	r2,-4(fp)
  8056f8:	10c049c5 	stb	r3,295(r2)
  d->_pg67 = d->_g67;
  8056fc:	e0bfff17 	ldw	r2,-4(fp)
  805700:	10c025c3 	ldbu	r3,151(r2)
  805704:	e0bfff17 	ldw	r2,-4(fp)
  805708:	10c04a05 	stb	r3,296(r2)
  d->_pg158 = d->_g158;
  80570c:	e0bfff17 	ldw	r2,-4(fp)
  805710:	10c03503 	ldbu	r3,212(r2)
  805714:	e0bfff17 	ldw	r2,-4(fp)
  805718:	10c04a45 	stb	r3,297(r2)
  d->_pg106 = d->_g106;
  80571c:	e0bfff17 	ldw	r2,-4(fp)
  805720:	10c02c83 	ldbu	r3,178(r2)
  805724:	e0bfff17 	ldw	r2,-4(fp)
  805728:	10c04a85 	stb	r3,298(r2)
  d->_pg105 = d->_g105;
  80572c:	e0bfff17 	ldw	r2,-4(fp)
  805730:	10c02c43 	ldbu	r3,177(r2)
  805734:	e0bfff17 	ldw	r2,-4(fp)
  805738:	10c04ac5 	stb	r3,299(r2)
  d->_pg77 = d->_g77;
  80573c:	e0bfff17 	ldw	r2,-4(fp)
  805740:	10c027c3 	ldbu	r3,159(r2)
  805744:	e0bfff17 	ldw	r2,-4(fp)
  805748:	10c04b05 	stb	r3,300(r2)
  d->_pg86 = d->_g86;
  80574c:	e0bfff17 	ldw	r2,-4(fp)
  805750:	10c028c3 	ldbu	r3,163(r2)
  805754:	e0bfff17 	ldw	r2,-4(fp)
  805758:	10c04b45 	stb	r3,301(r2)
  d->_pg149 = d->_g149;
  80575c:	e0bfff17 	ldw	r2,-4(fp)
  805760:	10c03343 	ldbu	r3,205(r2)
  805764:	e0bfff17 	ldw	r2,-4(fp)
  805768:	10c04b85 	stb	r3,302(r2)
  d->_pg42 = d->_g42;
  80576c:	e0bfff17 	ldw	r2,-4(fp)
  805770:	10c02183 	ldbu	r3,134(r2)
  805774:	e0bfff17 	ldw	r2,-4(fp)
  805778:	10c04bc5 	stb	r3,303(r2)
  d->_pg92 = d->_g92;
  80577c:	e0bfff17 	ldw	r2,-4(fp)
  805780:	10c029c3 	ldbu	r3,167(r2)
  805784:	e0bfff17 	ldw	r2,-4(fp)
  805788:	10c04c05 	stb	r3,304(r2)
  d->_pg53 = d->_g53;
  80578c:	e0bfff17 	ldw	r2,-4(fp)
  805790:	10c023c3 	ldbu	r3,143(r2)
  805794:	e0bfff17 	ldw	r2,-4(fp)
  805798:	10c04c45 	stb	r3,305(r2)
  d->_pg134 = d->_g134;
  80579c:	e0bfff17 	ldw	r2,-4(fp)
  8057a0:	10c03103 	ldbu	r3,196(r2)
  8057a4:	e0bfff17 	ldw	r2,-4(fp)
  8057a8:	10c04c85 	stb	r3,306(r2)
  d->_pg143_e1 = d->_g143_e1;
  8057ac:	e0bfff17 	ldw	r2,-4(fp)
  8057b0:	10c04743 	ldbu	r3,285(r2)
  8057b4:	e0bfff17 	ldw	r2,-4(fp)
  8057b8:	10c04cc5 	stb	r3,307(r2)
  d->_pg82 = d->_g82;
  8057bc:	e0bfff17 	ldw	r2,-4(fp)
  8057c0:	10c02843 	ldbu	r3,161(r2)
  8057c4:	e0bfff17 	ldw	r2,-4(fp)
  8057c8:	10c04d05 	stb	r3,308(r2)
  d->_pg94 = d->_g94;
  8057cc:	e0bfff17 	ldw	r2,-4(fp)
  8057d0:	10c02a43 	ldbu	r3,169(r2)
  8057d4:	e0bfff17 	ldw	r2,-4(fp)
  8057d8:	10c04d45 	stb	r3,309(r2)
  d->_pg37 = d->_g37;
  8057dc:	e0bfff17 	ldw	r2,-4(fp)
  8057e0:	10c020c3 	ldbu	r3,131(r2)
  8057e4:	e0bfff17 	ldw	r2,-4(fp)
  8057e8:	10c04d85 	stb	r3,310(r2)
  d->_pg44 = d->_g44;
  8057ec:	e0bfff17 	ldw	r2,-4(fp)
  8057f0:	10c02203 	ldbu	r3,136(r2)
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	10c04dc5 	stb	r3,311(r2)
  d->_pg47 = d->_g47;
  8057fc:	e0bfff17 	ldw	r2,-4(fp)
  805800:	10c022c3 	ldbu	r3,139(r2)
  805804:	e0bfff17 	ldw	r2,-4(fp)
  805808:	10c04e05 	stb	r3,312(r2)
  d->_pg158_e3 = d->_g158_e3;
  80580c:	e0bfff17 	ldw	r2,-4(fp)
  805810:	10c047c3 	ldbu	r3,287(r2)
  805814:	e0bfff17 	ldw	r2,-4(fp)
  805818:	10c04e45 	stb	r3,313(r2)
  d->_pg70 = d->_g70;
  80581c:	e0bfff17 	ldw	r2,-4(fp)
  805820:	10c02683 	ldbu	r3,154(r2)
  805824:	e0bfff17 	ldw	r2,-4(fp)
  805828:	10c04e85 	stb	r3,314(r2)
  d->_pg76_e3 = d->_g76_e3;
  80582c:	e0bfff17 	ldw	r2,-4(fp)
  805830:	10c04583 	ldbu	r3,278(r2)
  805834:	e0bfff17 	ldw	r2,-4(fp)
  805838:	10c04ec5 	stb	r3,315(r2)
  d->_pg68 = d->_g68;
  80583c:	e0bfff17 	ldw	r2,-4(fp)
  805840:	10c02603 	ldbu	r3,152(r2)
  805844:	e0bfff17 	ldw	r2,-4(fp)
  805848:	10c04f05 	stb	r3,316(r2)
  d->_pg71 = d->_g71;
  80584c:	e0bfff17 	ldw	r2,-4(fp)
  805850:	10c026c3 	ldbu	r3,155(r2)
  805854:	e0bfff17 	ldw	r2,-4(fp)
  805858:	10c04f45 	stb	r3,317(r2)
  d->_pg76 = d->_g76;
  80585c:	e0bfff17 	ldw	r2,-4(fp)
  805860:	10c02783 	ldbu	r3,158(r2)
  805864:	e0bfff17 	ldw	r2,-4(fp)
  805868:	10c04f85 	stb	r3,318(r2)
  d->_pg85 = d->_g85;
  80586c:	e0bfff17 	ldw	r2,-4(fp)
  805870:	10c02883 	ldbu	r3,162(r2)
  805874:	e0bfff17 	ldw	r2,-4(fp)
  805878:	10c04fc5 	stb	r3,319(r2)
  d->_pg139 = d->_g139;
  80587c:	e0bfff17 	ldw	r2,-4(fp)
  805880:	10c03183 	ldbu	r3,198(r2)
  805884:	e0bfff17 	ldw	r2,-4(fp)
  805888:	10c05005 	stb	r3,320(r2)
  d->_pg148 = d->_g148;
  80588c:	e0bfff17 	ldw	r2,-4(fp)
  805890:	10c03303 	ldbu	r3,204(r2)
  805894:	e0bfff17 	ldw	r2,-4(fp)
  805898:	10c05045 	stb	r3,321(r2)
  d->_pg149_e2 = d->_g149_e2;
  80589c:	e0bfff17 	ldw	r2,-4(fp)
  8058a0:	10c04783 	ldbu	r3,286(r2)
  8058a4:	e0bfff17 	ldw	r2,-4(fp)
  8058a8:	10c05085 	stb	r3,322(r2)
  d->_pg150 = d->_g150;
  8058ac:	e0bfff17 	ldw	r2,-4(fp)
  8058b0:	10c03383 	ldbu	r3,206(r2)
  8058b4:	e0bfff17 	ldw	r2,-4(fp)
  8058b8:	10c050c5 	stb	r3,323(r2)
  d->_pg153 = d->_g153;
  8058bc:	e0bfff17 	ldw	r2,-4(fp)
  8058c0:	10c03443 	ldbu	r3,209(r2)
  8058c4:	e0bfff17 	ldw	r2,-4(fp)
  8058c8:	10c05105 	stb	r3,324(r2)
  d->_GO = 0;
  8058cc:	e0bfff17 	ldw	r2,-4(fp)
  8058d0:	100035c5 	stb	zero,215(r2)
}
  8058d4:	0001883a 	nop
  8058d8:	e037883a 	mov	sp,fp
  8058dc:	dfc00117 	ldw	ra,4(sp)
  8058e0:	df000017 	ldw	fp,0(sp)
  8058e4:	dec00204 	addi	sp,sp,8
  8058e8:	f800283a 	ret

008058ec <vp_light_timer_isr>:


int vp_timer_started = 0;
int ap_timer_started = 0;

alt_u32 vp_light_timer_isr(void* context){
  8058ec:	defffe04 	addi	sp,sp,-8
  8058f0:	df000115 	stw	fp,4(sp)
  8058f4:	df000104 	addi	fp,sp,4
  8058f8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~(1 << 0)));
  8058fc:	00804074 	movhi	r2,257
  805900:	10841c04 	addi	r2,r2,4208
  805904:	10c00037 	ldwio	r3,0(r2)
  805908:	00bfff84 	movi	r2,-2
  80590c:	1886703a 	and	r3,r3,r2
  805910:	00804074 	movhi	r2,257
  805914:	10841c04 	addi	r2,r2,4208
  805918:	10c00035 	stwio	r3,0(r2)
	vp_timer_started = 0;
  80591c:	d0277015 	stw	zero,-25152(gp)
	return 0;
  805920:	0005883a 	mov	r2,zero
}
  805924:	e037883a 	mov	sp,fp
  805928:	df000017 	ldw	fp,0(sp)
  80592c:	dec00104 	addi	sp,sp,4
  805930:	f800283a 	ret

00805934 <ap_light_timer_isr>:

alt_u32 ap_light_timer_isr(void* context){
  805934:	defffe04 	addi	sp,sp,-8
  805938:	df000115 	stw	fp,4(sp)
  80593c:	df000104 	addi	fp,sp,4
  805940:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~(1 << 1)));
  805944:	00804074 	movhi	r2,257
  805948:	10841c04 	addi	r2,r2,4208
  80594c:	10c00037 	ldwio	r3,0(r2)
  805950:	00bfff44 	movi	r2,-3
  805954:	1886703a 	and	r3,r3,r2
  805958:	00804074 	movhi	r2,257
  80595c:	10841c04 	addi	r2,r2,4208
  805960:	10c00035 	stwio	r3,0(r2)
	ap_timer_started = 0;
  805964:	d0277115 	stw	zero,-25148(gp)
	return 0;
  805968:	0005883a 	mov	r2,zero
}
  80596c:	e037883a 	mov	sp,fp
  805970:	df000017 	ldw	fp,0(sp)
  805974:	dec00104 	addi	sp,sp,4
  805978:	f800283a 	ret

0080597c <vp_light_timer>:



void vp_light_timer(){
  80597c:	defffd04 	addi	sp,sp,-12
  805980:	dfc00215 	stw	ra,8(sp)
  805984:	df000115 	stw	fp,4(sp)
  805988:	df000104 	addi	fp,sp,4
	if (vp_timer_started == 0) {
  80598c:	d0a77017 	ldw	r2,-25152(gp)
  805990:	1000111e 	bne	r2,zero,8059d8 <vp_light_timer+0x5c>
		vp_timer_started = 1;
  805994:	00800044 	movi	r2,1
  805998:	d0a77015 	stw	r2,-25152(gp)

		void* context = 0;
  80599c:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 1 << 0));
  8059a0:	00804074 	movhi	r2,257
  8059a4:	10841c04 	addi	r2,r2,4208
  8059a8:	10800037 	ldwio	r2,0(r2)
  8059ac:	10c00054 	ori	r3,r2,1
  8059b0:	00804074 	movhi	r2,257
  8059b4:	10841c04 	addi	r2,r2,4208
  8059b8:	10c00035 	stwio	r3,0(r2)
		alt_alarm_start(&timer_vp, LED_TIMEOUT, vp_light_timer_isr, context);
  8059bc:	e1ffff17 	ldw	r7,-4(fp)
  8059c0:	01802034 	movhi	r6,128
  8059c4:	31963b04 	addi	r6,r6,22764
  8059c8:	01400c84 	movi	r5,50
  8059cc:	010020b4 	movhi	r4,130
  8059d0:	212d4704 	addi	r4,r4,-19172
  8059d4:	0812ff40 	call	812ff4 <alt_alarm_start>
	}

}
  8059d8:	0001883a 	nop
  8059dc:	e037883a 	mov	sp,fp
  8059e0:	dfc00117 	ldw	ra,4(sp)
  8059e4:	df000017 	ldw	fp,0(sp)
  8059e8:	dec00204 	addi	sp,sp,8
  8059ec:	f800283a 	ret

008059f0 <ap_light_timer>:

void ap_light_timer(){
  8059f0:	defffd04 	addi	sp,sp,-12
  8059f4:	dfc00215 	stw	ra,8(sp)
  8059f8:	df000115 	stw	fp,4(sp)
  8059fc:	df000104 	addi	fp,sp,4
	if (ap_timer_started == 0) {
  805a00:	d0a77117 	ldw	r2,-25148(gp)
  805a04:	1000111e 	bne	r2,zero,805a4c <ap_light_timer+0x5c>
		ap_timer_started = 1;
  805a08:	00800044 	movi	r2,1
  805a0c:	d0a77115 	stw	r2,-25148(gp)

		void* context = 0;
  805a10:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 1 << 1));
  805a14:	00804074 	movhi	r2,257
  805a18:	10841c04 	addi	r2,r2,4208
  805a1c:	10800037 	ldwio	r2,0(r2)
  805a20:	10c00094 	ori	r3,r2,2
  805a24:	00804074 	movhi	r2,257
  805a28:	10841c04 	addi	r2,r2,4208
  805a2c:	10c00035 	stwio	r3,0(r2)
		alt_alarm_start(&timer_ap, LED_TIMEOUT, ap_light_timer_isr, context);
  805a30:	e1ffff17 	ldw	r7,-4(fp)
  805a34:	01802034 	movhi	r6,128
  805a38:	31964d04 	addi	r6,r6,22836
  805a3c:	01400c84 	movi	r5,50
  805a40:	010020b4 	movhi	r4,130
  805a44:	212d4104 	addi	r4,r4,-19196
  805a48:	0812ff40 	call	812ff4 <alt_alarm_start>
	}

}
  805a4c:	0001883a 	nop
  805a50:	e037883a 	mov	sp,fp
  805a54:	dfc00117 	ldw	ra,4(sp)
  805a58:	df000017 	ldw	fp,0(sp)
  805a5c:	dec00204 	addi	sp,sp,8
  805a60:	f800283a 	ret

00805a64 <setup_uart>:
FILE* uart;

uint8_t ASBuffer = 0;
uint8_t VSBuffer = 0;

void setup_uart(){
  805a64:	defffe04 	addi	sp,sp,-8
  805a68:	dfc00115 	stw	ra,4(sp)
  805a6c:	df000015 	stw	fp,0(sp)
  805a70:	d839883a 	mov	fp,sp
	uart = open(UART_NAME,(O_NONBLOCK | O_RDWR));
  805a74:	01500084 	movi	r5,16386
  805a78:	01002074 	movhi	r4,129
  805a7c:	211cca04 	addi	r4,r4,29480
  805a80:	08139640 	call	813964 <open>
  805a84:	d0a77315 	stw	r2,-25140(gp)

	if(!uart){
  805a88:	d0a77317 	ldw	r2,-25140(gp)
  805a8c:	1000041e 	bne	r2,zero,805aa0 <setup_uart+0x3c>
		printf("Failed to open UART\n");
  805a90:	01002074 	movhi	r4,129
  805a94:	211ccd04 	addi	r4,r4,29492
  805a98:	080926c0 	call	80926c <puts>
	} else {
		printf("setup uart\n");
	}
}
  805a9c:	00000306 	br	805aac <setup_uart+0x48>
	uart = open(UART_NAME,(O_NONBLOCK | O_RDWR));

	if(!uart){
		printf("Failed to open UART\n");
	} else {
		printf("setup uart\n");
  805aa0:	01002074 	movhi	r4,129
  805aa4:	211cd204 	addi	r4,r4,29512
  805aa8:	080926c0 	call	80926c <puts>
	}
}
  805aac:	0001883a 	nop
  805ab0:	e037883a 	mov	sp,fp
  805ab4:	dfc00117 	ldw	ra,4(sp)
  805ab8:	df000017 	ldw	fp,0(sp)
  805abc:	dec00204 	addi	sp,sp,8
  805ac0:	f800283a 	ret

00805ac4 <check_uart>:

void check_uart(){
  805ac4:	defffa04 	addi	sp,sp,-24
  805ac8:	dfc00515 	stw	ra,20(sp)
  805acc:	df000415 	stw	fp,16(sp)
  805ad0:	df000404 	addi	fp,sp,16

	// create a buffer to load the next 5 characters
	char uartBuffer[5];

	// check the length of the uart input
	int length = read(uart, uartBuffer, sizeof(uartBuffer) - 1);
  805ad4:	d0a77317 	ldw	r2,-25140(gp)
  805ad8:	e0fffe04 	addi	r3,fp,-8
  805adc:	01800104 	movi	r6,4
  805ae0:	180b883a 	mov	r5,r3
  805ae4:	1009883a 	mov	r4,r2
  805ae8:	0813af40 	call	813af4 <read>
  805aec:	e0bffd15 	stw	r2,-12(fp)

	if (length > 0) {
  805af0:	e0bffd17 	ldw	r2,-12(fp)
  805af4:	00801f0e 	bge	zero,r2,805b74 <check_uart+0xb0>
		for (int i = 0; i < length; i++){
  805af8:	e03ffc15 	stw	zero,-16(fp)
  805afc:	00001a06 	br	805b68 <check_uart+0xa4>
			if (uartBuffer[i] == 'V'){
  805b00:	e0fffe04 	addi	r3,fp,-8
  805b04:	e0bffc17 	ldw	r2,-16(fp)
  805b08:	1885883a 	add	r2,r3,r2
  805b0c:	10800003 	ldbu	r2,0(r2)
  805b10:	10803fcc 	andi	r2,r2,255
  805b14:	1080201c 	xori	r2,r2,128
  805b18:	10bfe004 	addi	r2,r2,-128
  805b1c:	10801598 	cmpnei	r2,r2,86
  805b20:	1000031e 	bne	r2,zero,805b30 <check_uart+0x6c>
				VSBuffer = 1;
  805b24:	00800044 	movi	r2,1
  805b28:	d0a77245 	stb	r2,-25143(gp)
  805b2c:	00000b06 	br	805b5c <check_uart+0x98>
			} else if(uartBuffer[i] == 'A'){
  805b30:	e0fffe04 	addi	r3,fp,-8
  805b34:	e0bffc17 	ldw	r2,-16(fp)
  805b38:	1885883a 	add	r2,r3,r2
  805b3c:	10800003 	ldbu	r2,0(r2)
  805b40:	10803fcc 	andi	r2,r2,255
  805b44:	1080201c 	xori	r2,r2,128
  805b48:	10bfe004 	addi	r2,r2,-128
  805b4c:	10801058 	cmpnei	r2,r2,65
  805b50:	1000021e 	bne	r2,zero,805b5c <check_uart+0x98>
				ASBuffer = 1;
  805b54:	00800044 	movi	r2,1
  805b58:	d0a77205 	stb	r2,-25144(gp)

	// check the length of the uart input
	int length = read(uart, uartBuffer, sizeof(uartBuffer) - 1);

	if (length > 0) {
		for (int i = 0; i < length; i++){
  805b5c:	e0bffc17 	ldw	r2,-16(fp)
  805b60:	10800044 	addi	r2,r2,1
  805b64:	e0bffc15 	stw	r2,-16(fp)
  805b68:	e0fffc17 	ldw	r3,-16(fp)
  805b6c:	e0bffd17 	ldw	r2,-12(fp)
  805b70:	18bfe316 	blt	r3,r2,805b00 <__alt_mem_onchip_mem+0xff7fdb00>
				ASBuffer = 1;

			}
		}
	}
}
  805b74:	0001883a 	nop
  805b78:	e037883a 	mov	sp,fp
  805b7c:	dfc00117 	ldw	ra,4(sp)
  805b80:	df000017 	ldw	fp,0(sp)
  805b84:	dec00204 	addi	sp,sp,8
  805b88:	f800283a 	ret

00805b8c <print_v>:

void print_v(){
  805b8c:	defffd04 	addi	sp,sp,-12
  805b90:	dfc00215 	stw	ra,8(sp)
  805b94:	df000115 	stw	fp,4(sp)
  805b98:	df000104 	addi	fp,sp,4
	if(!uart)
  805b9c:	d0a77317 	ldw	r2,-25140(gp)
  805ba0:	10000826 	beq	r2,zero,805bc4 <print_v+0x38>
			return;
	char v = 'V';
  805ba4:	00801584 	movi	r2,86
  805ba8:	e0bfff05 	stb	r2,-4(fp)
	write(uart, &v, 1);
  805bac:	d0a77317 	ldw	r2,-25140(gp)
  805bb0:	01800044 	movi	r6,1
  805bb4:	e17fff04 	addi	r5,fp,-4
  805bb8:	1009883a 	mov	r4,r2
  805bbc:	0813f140 	call	813f14 <write>
  805bc0:	00000106 	br	805bc8 <print_v+0x3c>
	}
}

void print_v(){
	if(!uart)
			return;
  805bc4:	0001883a 	nop
	char v = 'V';
	write(uart, &v, 1);
}
  805bc8:	e037883a 	mov	sp,fp
  805bcc:	dfc00117 	ldw	ra,4(sp)
  805bd0:	df000017 	ldw	fp,0(sp)
  805bd4:	dec00204 	addi	sp,sp,8
  805bd8:	f800283a 	ret

00805bdc <print_a>:

void print_a(){
  805bdc:	defffd04 	addi	sp,sp,-12
  805be0:	dfc00215 	stw	ra,8(sp)
  805be4:	df000115 	stw	fp,4(sp)
  805be8:	df000104 	addi	fp,sp,4
	if(!uart)
  805bec:	d0a77317 	ldw	r2,-25140(gp)
  805bf0:	10000826 	beq	r2,zero,805c14 <print_a+0x38>
			return;
	char a = 'A';
  805bf4:	00801044 	movi	r2,65
  805bf8:	e0bfff05 	stb	r2,-4(fp)
	write(uart, &a, 1);
  805bfc:	d0a77317 	ldw	r2,-25140(gp)
  805c00:	01800044 	movi	r6,1
  805c04:	e17fff04 	addi	r5,fp,-4
  805c08:	1009883a 	mov	r4,r2
  805c0c:	0813f140 	call	813f14 <write>
  805c10:	00000106 	br	805c18 <print_a+0x3c>
	write(uart, &v, 1);
}

void print_a(){
	if(!uart)
			return;
  805c14:	0001883a 	nop
	char a = 'A';
	write(uart, &a, 1);
}
  805c18:	e037883a 	mov	sp,fp
  805c1c:	dfc00117 	ldw	ra,4(sp)
  805c20:	df000017 	ldw	fp,0(sp)
  805c24:	dec00204 	addi	sp,sp,8
  805c28:	f800283a 	ret

00805c2c <close_uart>:



void close_uart(){
  805c2c:	defffe04 	addi	sp,sp,-8
  805c30:	dfc00115 	stw	ra,4(sp)
  805c34:	df000015 	stw	fp,0(sp)
  805c38:	d839883a 	mov	fp,sp
	close(uart);
  805c3c:	d0a77317 	ldw	r2,-25140(gp)
  805c40:	1009883a 	mov	r4,r2
  805c44:	081315c0 	call	81315c <close>
}
  805c48:	0001883a 	nop
  805c4c:	e037883a 	mov	sp,fp
  805c50:	dfc00117 	ldw	ra,4(sp)
  805c54:	df000017 	ldw	fp,0(sp)
  805c58:	dec00204 	addi	sp,sp,8
  805c5c:	f800283a 	ret

00805c60 <__adddf3>:
  805c60:	02c00434 	movhi	r11,16
  805c64:	5affffc4 	addi	r11,r11,-1
  805c68:	2806d7fa 	srli	r3,r5,31
  805c6c:	2ad4703a 	and	r10,r5,r11
  805c70:	3ad2703a 	and	r9,r7,r11
  805c74:	3804d53a 	srli	r2,r7,20
  805c78:	3018d77a 	srli	r12,r6,29
  805c7c:	280ad53a 	srli	r5,r5,20
  805c80:	501490fa 	slli	r10,r10,3
  805c84:	2010d77a 	srli	r8,r4,29
  805c88:	481290fa 	slli	r9,r9,3
  805c8c:	380ed7fa 	srli	r7,r7,31
  805c90:	defffb04 	addi	sp,sp,-20
  805c94:	dc800215 	stw	r18,8(sp)
  805c98:	dc400115 	stw	r17,4(sp)
  805c9c:	dc000015 	stw	r16,0(sp)
  805ca0:	dfc00415 	stw	ra,16(sp)
  805ca4:	dcc00315 	stw	r19,12(sp)
  805ca8:	1c803fcc 	andi	r18,r3,255
  805cac:	2c01ffcc 	andi	r16,r5,2047
  805cb0:	5210b03a 	or	r8,r10,r8
  805cb4:	202290fa 	slli	r17,r4,3
  805cb8:	1081ffcc 	andi	r2,r2,2047
  805cbc:	4b12b03a 	or	r9,r9,r12
  805cc0:	300c90fa 	slli	r6,r6,3
  805cc4:	91c07526 	beq	r18,r7,805e9c <__adddf3+0x23c>
  805cc8:	8087c83a 	sub	r3,r16,r2
  805ccc:	00c0ab0e 	bge	zero,r3,805f7c <__adddf3+0x31c>
  805cd0:	10002a1e 	bne	r2,zero,805d7c <__adddf3+0x11c>
  805cd4:	4984b03a 	or	r2,r9,r6
  805cd8:	1000961e 	bne	r2,zero,805f34 <__adddf3+0x2d4>
  805cdc:	888001cc 	andi	r2,r17,7
  805ce0:	10000726 	beq	r2,zero,805d00 <__adddf3+0xa0>
  805ce4:	888003cc 	andi	r2,r17,15
  805ce8:	00c00104 	movi	r3,4
  805cec:	10c00426 	beq	r2,r3,805d00 <__adddf3+0xa0>
  805cf0:	88c7883a 	add	r3,r17,r3
  805cf4:	1c63803a 	cmpltu	r17,r3,r17
  805cf8:	4451883a 	add	r8,r8,r17
  805cfc:	1823883a 	mov	r17,r3
  805d00:	4080202c 	andhi	r2,r8,128
  805d04:	10005926 	beq	r2,zero,805e6c <__adddf3+0x20c>
  805d08:	84000044 	addi	r16,r16,1
  805d0c:	0081ffc4 	movi	r2,2047
  805d10:	8080ba26 	beq	r16,r2,805ffc <__adddf3+0x39c>
  805d14:	00bfe034 	movhi	r2,65408
  805d18:	10bfffc4 	addi	r2,r2,-1
  805d1c:	4090703a 	and	r8,r8,r2
  805d20:	4004977a 	slli	r2,r8,29
  805d24:	4010927a 	slli	r8,r8,9
  805d28:	8822d0fa 	srli	r17,r17,3
  805d2c:	8401ffcc 	andi	r16,r16,2047
  805d30:	4010d33a 	srli	r8,r8,12
  805d34:	9007883a 	mov	r3,r18
  805d38:	1444b03a 	or	r2,r2,r17
  805d3c:	8401ffcc 	andi	r16,r16,2047
  805d40:	8020953a 	slli	r16,r16,20
  805d44:	18c03fcc 	andi	r3,r3,255
  805d48:	01000434 	movhi	r4,16
  805d4c:	213fffc4 	addi	r4,r4,-1
  805d50:	180697fa 	slli	r3,r3,31
  805d54:	4110703a 	and	r8,r8,r4
  805d58:	4410b03a 	or	r8,r8,r16
  805d5c:	40c6b03a 	or	r3,r8,r3
  805d60:	dfc00417 	ldw	ra,16(sp)
  805d64:	dcc00317 	ldw	r19,12(sp)
  805d68:	dc800217 	ldw	r18,8(sp)
  805d6c:	dc400117 	ldw	r17,4(sp)
  805d70:	dc000017 	ldw	r16,0(sp)
  805d74:	dec00504 	addi	sp,sp,20
  805d78:	f800283a 	ret
  805d7c:	0081ffc4 	movi	r2,2047
  805d80:	80bfd626 	beq	r16,r2,805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  805d84:	4a402034 	orhi	r9,r9,128
  805d88:	00800e04 	movi	r2,56
  805d8c:	10c09f16 	blt	r2,r3,80600c <__adddf3+0x3ac>
  805d90:	008007c4 	movi	r2,31
  805d94:	10c0c216 	blt	r2,r3,8060a0 <__adddf3+0x440>
  805d98:	00800804 	movi	r2,32
  805d9c:	10c5c83a 	sub	r2,r2,r3
  805da0:	488a983a 	sll	r5,r9,r2
  805da4:	30c8d83a 	srl	r4,r6,r3
  805da8:	3084983a 	sll	r2,r6,r2
  805dac:	48c6d83a 	srl	r3,r9,r3
  805db0:	290cb03a 	or	r6,r5,r4
  805db4:	1004c03a 	cmpne	r2,r2,zero
  805db8:	308cb03a 	or	r6,r6,r2
  805dbc:	898dc83a 	sub	r6,r17,r6
  805dc0:	89a3803a 	cmpltu	r17,r17,r6
  805dc4:	40d1c83a 	sub	r8,r8,r3
  805dc8:	4451c83a 	sub	r8,r8,r17
  805dcc:	3023883a 	mov	r17,r6
  805dd0:	4080202c 	andhi	r2,r8,128
  805dd4:	10002326 	beq	r2,zero,805e64 <__adddf3+0x204>
  805dd8:	04c02034 	movhi	r19,128
  805ddc:	9cffffc4 	addi	r19,r19,-1
  805de0:	44e6703a 	and	r19,r8,r19
  805de4:	98007626 	beq	r19,zero,805fc0 <__adddf3+0x360>
  805de8:	9809883a 	mov	r4,r19
  805dec:	08070b40 	call	8070b4 <__clzsi2>
  805df0:	10fffe04 	addi	r3,r2,-8
  805df4:	010007c4 	movi	r4,31
  805df8:	20c07716 	blt	r4,r3,805fd8 <__adddf3+0x378>
  805dfc:	00800804 	movi	r2,32
  805e00:	10c5c83a 	sub	r2,r2,r3
  805e04:	8884d83a 	srl	r2,r17,r2
  805e08:	98d0983a 	sll	r8,r19,r3
  805e0c:	88e2983a 	sll	r17,r17,r3
  805e10:	1204b03a 	or	r2,r2,r8
  805e14:	1c007416 	blt	r3,r16,805fe8 <__adddf3+0x388>
  805e18:	1c21c83a 	sub	r16,r3,r16
  805e1c:	82000044 	addi	r8,r16,1
  805e20:	00c007c4 	movi	r3,31
  805e24:	1a009116 	blt	r3,r8,80606c <__adddf3+0x40c>
  805e28:	00c00804 	movi	r3,32
  805e2c:	1a07c83a 	sub	r3,r3,r8
  805e30:	8a08d83a 	srl	r4,r17,r8
  805e34:	88e2983a 	sll	r17,r17,r3
  805e38:	10c6983a 	sll	r3,r2,r3
  805e3c:	1210d83a 	srl	r8,r2,r8
  805e40:	8804c03a 	cmpne	r2,r17,zero
  805e44:	1906b03a 	or	r3,r3,r4
  805e48:	18a2b03a 	or	r17,r3,r2
  805e4c:	0021883a 	mov	r16,zero
  805e50:	003fa206 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  805e54:	1890b03a 	or	r8,r3,r2
  805e58:	40017d26 	beq	r8,zero,806450 <__adddf3+0x7f0>
  805e5c:	1011883a 	mov	r8,r2
  805e60:	1823883a 	mov	r17,r3
  805e64:	888001cc 	andi	r2,r17,7
  805e68:	103f9e1e 	bne	r2,zero,805ce4 <__alt_mem_onchip_mem+0xff7fdce4>
  805e6c:	4004977a 	slli	r2,r8,29
  805e70:	8822d0fa 	srli	r17,r17,3
  805e74:	4010d0fa 	srli	r8,r8,3
  805e78:	9007883a 	mov	r3,r18
  805e7c:	1444b03a 	or	r2,r2,r17
  805e80:	0101ffc4 	movi	r4,2047
  805e84:	81002426 	beq	r16,r4,805f18 <__adddf3+0x2b8>
  805e88:	8120703a 	and	r16,r16,r4
  805e8c:	01000434 	movhi	r4,16
  805e90:	213fffc4 	addi	r4,r4,-1
  805e94:	4110703a 	and	r8,r8,r4
  805e98:	003fa806 	br	805d3c <__alt_mem_onchip_mem+0xff7fdd3c>
  805e9c:	8089c83a 	sub	r4,r16,r2
  805ea0:	01005e0e 	bge	zero,r4,80601c <__adddf3+0x3bc>
  805ea4:	10002b26 	beq	r2,zero,805f54 <__adddf3+0x2f4>
  805ea8:	0081ffc4 	movi	r2,2047
  805eac:	80bf8b26 	beq	r16,r2,805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  805eb0:	4a402034 	orhi	r9,r9,128
  805eb4:	00800e04 	movi	r2,56
  805eb8:	1100a40e 	bge	r2,r4,80614c <__adddf3+0x4ec>
  805ebc:	498cb03a 	or	r6,r9,r6
  805ec0:	300ac03a 	cmpne	r5,r6,zero
  805ec4:	0013883a 	mov	r9,zero
  805ec8:	2c4b883a 	add	r5,r5,r17
  805ecc:	2c63803a 	cmpltu	r17,r5,r17
  805ed0:	4a11883a 	add	r8,r9,r8
  805ed4:	8a11883a 	add	r8,r17,r8
  805ed8:	2823883a 	mov	r17,r5
  805edc:	4080202c 	andhi	r2,r8,128
  805ee0:	103fe026 	beq	r2,zero,805e64 <__alt_mem_onchip_mem+0xff7fde64>
  805ee4:	84000044 	addi	r16,r16,1
  805ee8:	0081ffc4 	movi	r2,2047
  805eec:	8080d226 	beq	r16,r2,806238 <__adddf3+0x5d8>
  805ef0:	00bfe034 	movhi	r2,65408
  805ef4:	10bfffc4 	addi	r2,r2,-1
  805ef8:	4090703a 	and	r8,r8,r2
  805efc:	880ad07a 	srli	r5,r17,1
  805f00:	400897fa 	slli	r4,r8,31
  805f04:	88c0004c 	andi	r3,r17,1
  805f08:	28e2b03a 	or	r17,r5,r3
  805f0c:	4010d07a 	srli	r8,r8,1
  805f10:	2462b03a 	or	r17,r4,r17
  805f14:	003f7106 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  805f18:	4088b03a 	or	r4,r8,r2
  805f1c:	20014526 	beq	r4,zero,806434 <__adddf3+0x7d4>
  805f20:	01000434 	movhi	r4,16
  805f24:	42000234 	orhi	r8,r8,8
  805f28:	213fffc4 	addi	r4,r4,-1
  805f2c:	4110703a 	and	r8,r8,r4
  805f30:	003f8206 	br	805d3c <__alt_mem_onchip_mem+0xff7fdd3c>
  805f34:	18ffffc4 	addi	r3,r3,-1
  805f38:	1800491e 	bne	r3,zero,806060 <__adddf3+0x400>
  805f3c:	898bc83a 	sub	r5,r17,r6
  805f40:	8963803a 	cmpltu	r17,r17,r5
  805f44:	4251c83a 	sub	r8,r8,r9
  805f48:	4451c83a 	sub	r8,r8,r17
  805f4c:	2823883a 	mov	r17,r5
  805f50:	003f9f06 	br	805dd0 <__alt_mem_onchip_mem+0xff7fddd0>
  805f54:	4984b03a 	or	r2,r9,r6
  805f58:	103f6026 	beq	r2,zero,805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  805f5c:	213fffc4 	addi	r4,r4,-1
  805f60:	2000931e 	bne	r4,zero,8061b0 <__adddf3+0x550>
  805f64:	898d883a 	add	r6,r17,r6
  805f68:	3463803a 	cmpltu	r17,r6,r17
  805f6c:	4251883a 	add	r8,r8,r9
  805f70:	8a11883a 	add	r8,r17,r8
  805f74:	3023883a 	mov	r17,r6
  805f78:	003fd806 	br	805edc <__alt_mem_onchip_mem+0xff7fdedc>
  805f7c:	1800541e 	bne	r3,zero,8060d0 <__adddf3+0x470>
  805f80:	80800044 	addi	r2,r16,1
  805f84:	1081ffcc 	andi	r2,r2,2047
  805f88:	00c00044 	movi	r3,1
  805f8c:	1880a00e 	bge	r3,r2,806210 <__adddf3+0x5b0>
  805f90:	8989c83a 	sub	r4,r17,r6
  805f94:	8905803a 	cmpltu	r2,r17,r4
  805f98:	4267c83a 	sub	r19,r8,r9
  805f9c:	98a7c83a 	sub	r19,r19,r2
  805fa0:	9880202c 	andhi	r2,r19,128
  805fa4:	10006326 	beq	r2,zero,806134 <__adddf3+0x4d4>
  805fa8:	3463c83a 	sub	r17,r6,r17
  805fac:	4a07c83a 	sub	r3,r9,r8
  805fb0:	344d803a 	cmpltu	r6,r6,r17
  805fb4:	19a7c83a 	sub	r19,r3,r6
  805fb8:	3825883a 	mov	r18,r7
  805fbc:	983f8a1e 	bne	r19,zero,805de8 <__alt_mem_onchip_mem+0xff7fdde8>
  805fc0:	8809883a 	mov	r4,r17
  805fc4:	08070b40 	call	8070b4 <__clzsi2>
  805fc8:	10800804 	addi	r2,r2,32
  805fcc:	10fffe04 	addi	r3,r2,-8
  805fd0:	010007c4 	movi	r4,31
  805fd4:	20ff890e 	bge	r4,r3,805dfc <__alt_mem_onchip_mem+0xff7fddfc>
  805fd8:	10bff604 	addi	r2,r2,-40
  805fdc:	8884983a 	sll	r2,r17,r2
  805fe0:	0023883a 	mov	r17,zero
  805fe4:	1c3f8c0e 	bge	r3,r16,805e18 <__alt_mem_onchip_mem+0xff7fde18>
  805fe8:	023fe034 	movhi	r8,65408
  805fec:	423fffc4 	addi	r8,r8,-1
  805ff0:	80e1c83a 	sub	r16,r16,r3
  805ff4:	1210703a 	and	r8,r2,r8
  805ff8:	003f3806 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  805ffc:	9007883a 	mov	r3,r18
  806000:	0011883a 	mov	r8,zero
  806004:	0005883a 	mov	r2,zero
  806008:	003f4c06 	br	805d3c <__alt_mem_onchip_mem+0xff7fdd3c>
  80600c:	498cb03a 	or	r6,r9,r6
  806010:	300cc03a 	cmpne	r6,r6,zero
  806014:	0007883a 	mov	r3,zero
  806018:	003f6806 	br	805dbc <__alt_mem_onchip_mem+0xff7fddbc>
  80601c:	20009c1e 	bne	r4,zero,806290 <__adddf3+0x630>
  806020:	80800044 	addi	r2,r16,1
  806024:	1141ffcc 	andi	r5,r2,2047
  806028:	01000044 	movi	r4,1
  80602c:	2140670e 	bge	r4,r5,8061cc <__adddf3+0x56c>
  806030:	0101ffc4 	movi	r4,2047
  806034:	11007f26 	beq	r2,r4,806234 <__adddf3+0x5d4>
  806038:	898d883a 	add	r6,r17,r6
  80603c:	4247883a 	add	r3,r8,r9
  806040:	3451803a 	cmpltu	r8,r6,r17
  806044:	40d1883a 	add	r8,r8,r3
  806048:	402297fa 	slli	r17,r8,31
  80604c:	300cd07a 	srli	r6,r6,1
  806050:	4010d07a 	srli	r8,r8,1
  806054:	1021883a 	mov	r16,r2
  806058:	89a2b03a 	or	r17,r17,r6
  80605c:	003f1f06 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  806060:	0081ffc4 	movi	r2,2047
  806064:	80bf481e 	bne	r16,r2,805d88 <__alt_mem_onchip_mem+0xff7fdd88>
  806068:	003f1c06 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  80606c:	843ff844 	addi	r16,r16,-31
  806070:	01000804 	movi	r4,32
  806074:	1406d83a 	srl	r3,r2,r16
  806078:	41005026 	beq	r8,r4,8061bc <__adddf3+0x55c>
  80607c:	01001004 	movi	r4,64
  806080:	2211c83a 	sub	r8,r4,r8
  806084:	1204983a 	sll	r2,r2,r8
  806088:	88a2b03a 	or	r17,r17,r2
  80608c:	8822c03a 	cmpne	r17,r17,zero
  806090:	1c62b03a 	or	r17,r3,r17
  806094:	0011883a 	mov	r8,zero
  806098:	0021883a 	mov	r16,zero
  80609c:	003f7106 	br	805e64 <__alt_mem_onchip_mem+0xff7fde64>
  8060a0:	193ff804 	addi	r4,r3,-32
  8060a4:	00800804 	movi	r2,32
  8060a8:	4908d83a 	srl	r4,r9,r4
  8060ac:	18804526 	beq	r3,r2,8061c4 <__adddf3+0x564>
  8060b0:	00801004 	movi	r2,64
  8060b4:	10c5c83a 	sub	r2,r2,r3
  8060b8:	4886983a 	sll	r3,r9,r2
  8060bc:	198cb03a 	or	r6,r3,r6
  8060c0:	300cc03a 	cmpne	r6,r6,zero
  8060c4:	218cb03a 	or	r6,r4,r6
  8060c8:	0007883a 	mov	r3,zero
  8060cc:	003f3b06 	br	805dbc <__alt_mem_onchip_mem+0xff7fddbc>
  8060d0:	80002a26 	beq	r16,zero,80617c <__adddf3+0x51c>
  8060d4:	0101ffc4 	movi	r4,2047
  8060d8:	11006826 	beq	r2,r4,80627c <__adddf3+0x61c>
  8060dc:	00c7c83a 	sub	r3,zero,r3
  8060e0:	42002034 	orhi	r8,r8,128
  8060e4:	01000e04 	movi	r4,56
  8060e8:	20c07c16 	blt	r4,r3,8062dc <__adddf3+0x67c>
  8060ec:	010007c4 	movi	r4,31
  8060f0:	20c0da16 	blt	r4,r3,80645c <__adddf3+0x7fc>
  8060f4:	01000804 	movi	r4,32
  8060f8:	20c9c83a 	sub	r4,r4,r3
  8060fc:	4114983a 	sll	r10,r8,r4
  806100:	88cad83a 	srl	r5,r17,r3
  806104:	8908983a 	sll	r4,r17,r4
  806108:	40c6d83a 	srl	r3,r8,r3
  80610c:	5162b03a 	or	r17,r10,r5
  806110:	2008c03a 	cmpne	r4,r4,zero
  806114:	8922b03a 	or	r17,r17,r4
  806118:	3463c83a 	sub	r17,r6,r17
  80611c:	48c7c83a 	sub	r3,r9,r3
  806120:	344d803a 	cmpltu	r6,r6,r17
  806124:	1991c83a 	sub	r8,r3,r6
  806128:	1021883a 	mov	r16,r2
  80612c:	3825883a 	mov	r18,r7
  806130:	003f2706 	br	805dd0 <__alt_mem_onchip_mem+0xff7fddd0>
  806134:	24d0b03a 	or	r8,r4,r19
  806138:	40001b1e 	bne	r8,zero,8061a8 <__adddf3+0x548>
  80613c:	0005883a 	mov	r2,zero
  806140:	0007883a 	mov	r3,zero
  806144:	0021883a 	mov	r16,zero
  806148:	003f4d06 	br	805e80 <__alt_mem_onchip_mem+0xff7fde80>
  80614c:	008007c4 	movi	r2,31
  806150:	11003c16 	blt	r2,r4,806244 <__adddf3+0x5e4>
  806154:	00800804 	movi	r2,32
  806158:	1105c83a 	sub	r2,r2,r4
  80615c:	488e983a 	sll	r7,r9,r2
  806160:	310ad83a 	srl	r5,r6,r4
  806164:	3084983a 	sll	r2,r6,r2
  806168:	4912d83a 	srl	r9,r9,r4
  80616c:	394ab03a 	or	r5,r7,r5
  806170:	1004c03a 	cmpne	r2,r2,zero
  806174:	288ab03a 	or	r5,r5,r2
  806178:	003f5306 	br	805ec8 <__alt_mem_onchip_mem+0xff7fdec8>
  80617c:	4448b03a 	or	r4,r8,r17
  806180:	20003e26 	beq	r4,zero,80627c <__adddf3+0x61c>
  806184:	00c6303a 	nor	r3,zero,r3
  806188:	18003a1e 	bne	r3,zero,806274 <__adddf3+0x614>
  80618c:	3463c83a 	sub	r17,r6,r17
  806190:	4a07c83a 	sub	r3,r9,r8
  806194:	344d803a 	cmpltu	r6,r6,r17
  806198:	1991c83a 	sub	r8,r3,r6
  80619c:	1021883a 	mov	r16,r2
  8061a0:	3825883a 	mov	r18,r7
  8061a4:	003f0a06 	br	805dd0 <__alt_mem_onchip_mem+0xff7fddd0>
  8061a8:	2023883a 	mov	r17,r4
  8061ac:	003f0d06 	br	805de4 <__alt_mem_onchip_mem+0xff7fdde4>
  8061b0:	0081ffc4 	movi	r2,2047
  8061b4:	80bf3f1e 	bne	r16,r2,805eb4 <__alt_mem_onchip_mem+0xff7fdeb4>
  8061b8:	003ec806 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  8061bc:	0005883a 	mov	r2,zero
  8061c0:	003fb106 	br	806088 <__alt_mem_onchip_mem+0xff7fe088>
  8061c4:	0007883a 	mov	r3,zero
  8061c8:	003fbc06 	br	8060bc <__alt_mem_onchip_mem+0xff7fe0bc>
  8061cc:	4444b03a 	or	r2,r8,r17
  8061d0:	8000871e 	bne	r16,zero,8063f0 <__adddf3+0x790>
  8061d4:	1000ba26 	beq	r2,zero,8064c0 <__adddf3+0x860>
  8061d8:	4984b03a 	or	r2,r9,r6
  8061dc:	103ebf26 	beq	r2,zero,805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  8061e0:	8985883a 	add	r2,r17,r6
  8061e4:	4247883a 	add	r3,r8,r9
  8061e8:	1451803a 	cmpltu	r8,r2,r17
  8061ec:	40d1883a 	add	r8,r8,r3
  8061f0:	40c0202c 	andhi	r3,r8,128
  8061f4:	1023883a 	mov	r17,r2
  8061f8:	183f1a26 	beq	r3,zero,805e64 <__alt_mem_onchip_mem+0xff7fde64>
  8061fc:	00bfe034 	movhi	r2,65408
  806200:	10bfffc4 	addi	r2,r2,-1
  806204:	2021883a 	mov	r16,r4
  806208:	4090703a 	and	r8,r8,r2
  80620c:	003eb306 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  806210:	4444b03a 	or	r2,r8,r17
  806214:	8000291e 	bne	r16,zero,8062bc <__adddf3+0x65c>
  806218:	10004b1e 	bne	r2,zero,806348 <__adddf3+0x6e8>
  80621c:	4990b03a 	or	r8,r9,r6
  806220:	40008b26 	beq	r8,zero,806450 <__adddf3+0x7f0>
  806224:	4811883a 	mov	r8,r9
  806228:	3023883a 	mov	r17,r6
  80622c:	3825883a 	mov	r18,r7
  806230:	003eaa06 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  806234:	1021883a 	mov	r16,r2
  806238:	0011883a 	mov	r8,zero
  80623c:	0005883a 	mov	r2,zero
  806240:	003f0f06 	br	805e80 <__alt_mem_onchip_mem+0xff7fde80>
  806244:	217ff804 	addi	r5,r4,-32
  806248:	00800804 	movi	r2,32
  80624c:	494ad83a 	srl	r5,r9,r5
  806250:	20807d26 	beq	r4,r2,806448 <__adddf3+0x7e8>
  806254:	00801004 	movi	r2,64
  806258:	1109c83a 	sub	r4,r2,r4
  80625c:	4912983a 	sll	r9,r9,r4
  806260:	498cb03a 	or	r6,r9,r6
  806264:	300cc03a 	cmpne	r6,r6,zero
  806268:	298ab03a 	or	r5,r5,r6
  80626c:	0013883a 	mov	r9,zero
  806270:	003f1506 	br	805ec8 <__alt_mem_onchip_mem+0xff7fdec8>
  806274:	0101ffc4 	movi	r4,2047
  806278:	113f9a1e 	bne	r2,r4,8060e4 <__alt_mem_onchip_mem+0xff7fe0e4>
  80627c:	4811883a 	mov	r8,r9
  806280:	3023883a 	mov	r17,r6
  806284:	1021883a 	mov	r16,r2
  806288:	3825883a 	mov	r18,r7
  80628c:	003e9306 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  806290:	8000161e 	bne	r16,zero,8062ec <__adddf3+0x68c>
  806294:	444ab03a 	or	r5,r8,r17
  806298:	28005126 	beq	r5,zero,8063e0 <__adddf3+0x780>
  80629c:	0108303a 	nor	r4,zero,r4
  8062a0:	20004d1e 	bne	r4,zero,8063d8 <__adddf3+0x778>
  8062a4:	89a3883a 	add	r17,r17,r6
  8062a8:	4253883a 	add	r9,r8,r9
  8062ac:	898d803a 	cmpltu	r6,r17,r6
  8062b0:	3251883a 	add	r8,r6,r9
  8062b4:	1021883a 	mov	r16,r2
  8062b8:	003f0806 	br	805edc <__alt_mem_onchip_mem+0xff7fdedc>
  8062bc:	1000301e 	bne	r2,zero,806380 <__adddf3+0x720>
  8062c0:	4984b03a 	or	r2,r9,r6
  8062c4:	10007126 	beq	r2,zero,80648c <__adddf3+0x82c>
  8062c8:	4811883a 	mov	r8,r9
  8062cc:	3023883a 	mov	r17,r6
  8062d0:	3825883a 	mov	r18,r7
  8062d4:	0401ffc4 	movi	r16,2047
  8062d8:	003e8006 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  8062dc:	4462b03a 	or	r17,r8,r17
  8062e0:	8822c03a 	cmpne	r17,r17,zero
  8062e4:	0007883a 	mov	r3,zero
  8062e8:	003f8b06 	br	806118 <__alt_mem_onchip_mem+0xff7fe118>
  8062ec:	0141ffc4 	movi	r5,2047
  8062f0:	11403b26 	beq	r2,r5,8063e0 <__adddf3+0x780>
  8062f4:	0109c83a 	sub	r4,zero,r4
  8062f8:	42002034 	orhi	r8,r8,128
  8062fc:	01400e04 	movi	r5,56
  806300:	29006716 	blt	r5,r4,8064a0 <__adddf3+0x840>
  806304:	014007c4 	movi	r5,31
  806308:	29007016 	blt	r5,r4,8064cc <__adddf3+0x86c>
  80630c:	01400804 	movi	r5,32
  806310:	290bc83a 	sub	r5,r5,r4
  806314:	4154983a 	sll	r10,r8,r5
  806318:	890ed83a 	srl	r7,r17,r4
  80631c:	894a983a 	sll	r5,r17,r5
  806320:	4108d83a 	srl	r4,r8,r4
  806324:	51e2b03a 	or	r17,r10,r7
  806328:	280ac03a 	cmpne	r5,r5,zero
  80632c:	8962b03a 	or	r17,r17,r5
  806330:	89a3883a 	add	r17,r17,r6
  806334:	2253883a 	add	r9,r4,r9
  806338:	898d803a 	cmpltu	r6,r17,r6
  80633c:	3251883a 	add	r8,r6,r9
  806340:	1021883a 	mov	r16,r2
  806344:	003ee506 	br	805edc <__alt_mem_onchip_mem+0xff7fdedc>
  806348:	4984b03a 	or	r2,r9,r6
  80634c:	103e6326 	beq	r2,zero,805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  806350:	8987c83a 	sub	r3,r17,r6
  806354:	88c9803a 	cmpltu	r4,r17,r3
  806358:	4245c83a 	sub	r2,r8,r9
  80635c:	1105c83a 	sub	r2,r2,r4
  806360:	1100202c 	andhi	r4,r2,128
  806364:	203ebb26 	beq	r4,zero,805e54 <__alt_mem_onchip_mem+0xff7fde54>
  806368:	3463c83a 	sub	r17,r6,r17
  80636c:	4a07c83a 	sub	r3,r9,r8
  806370:	344d803a 	cmpltu	r6,r6,r17
  806374:	1991c83a 	sub	r8,r3,r6
  806378:	3825883a 	mov	r18,r7
  80637c:	003e5706 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  806380:	4984b03a 	or	r2,r9,r6
  806384:	10002e26 	beq	r2,zero,806440 <__adddf3+0x7e0>
  806388:	4004d0fa 	srli	r2,r8,3
  80638c:	8822d0fa 	srli	r17,r17,3
  806390:	4010977a 	slli	r8,r8,29
  806394:	10c0022c 	andhi	r3,r2,8
  806398:	4462b03a 	or	r17,r8,r17
  80639c:	18000826 	beq	r3,zero,8063c0 <__adddf3+0x760>
  8063a0:	4808d0fa 	srli	r4,r9,3
  8063a4:	20c0022c 	andhi	r3,r4,8
  8063a8:	1800051e 	bne	r3,zero,8063c0 <__adddf3+0x760>
  8063ac:	300cd0fa 	srli	r6,r6,3
  8063b0:	4806977a 	slli	r3,r9,29
  8063b4:	2005883a 	mov	r2,r4
  8063b8:	3825883a 	mov	r18,r7
  8063bc:	19a2b03a 	or	r17,r3,r6
  8063c0:	8810d77a 	srli	r8,r17,29
  8063c4:	100490fa 	slli	r2,r2,3
  8063c8:	882290fa 	slli	r17,r17,3
  8063cc:	0401ffc4 	movi	r16,2047
  8063d0:	4090b03a 	or	r8,r8,r2
  8063d4:	003e4106 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  8063d8:	0141ffc4 	movi	r5,2047
  8063dc:	117fc71e 	bne	r2,r5,8062fc <__alt_mem_onchip_mem+0xff7fe2fc>
  8063e0:	4811883a 	mov	r8,r9
  8063e4:	3023883a 	mov	r17,r6
  8063e8:	1021883a 	mov	r16,r2
  8063ec:	003e3b06 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  8063f0:	10002f26 	beq	r2,zero,8064b0 <__adddf3+0x850>
  8063f4:	4984b03a 	or	r2,r9,r6
  8063f8:	10001126 	beq	r2,zero,806440 <__adddf3+0x7e0>
  8063fc:	4004d0fa 	srli	r2,r8,3
  806400:	8822d0fa 	srli	r17,r17,3
  806404:	4010977a 	slli	r8,r8,29
  806408:	10c0022c 	andhi	r3,r2,8
  80640c:	4462b03a 	or	r17,r8,r17
  806410:	183feb26 	beq	r3,zero,8063c0 <__alt_mem_onchip_mem+0xff7fe3c0>
  806414:	4808d0fa 	srli	r4,r9,3
  806418:	20c0022c 	andhi	r3,r4,8
  80641c:	183fe81e 	bne	r3,zero,8063c0 <__alt_mem_onchip_mem+0xff7fe3c0>
  806420:	300cd0fa 	srli	r6,r6,3
  806424:	4806977a 	slli	r3,r9,29
  806428:	2005883a 	mov	r2,r4
  80642c:	19a2b03a 	or	r17,r3,r6
  806430:	003fe306 	br	8063c0 <__alt_mem_onchip_mem+0xff7fe3c0>
  806434:	0011883a 	mov	r8,zero
  806438:	0005883a 	mov	r2,zero
  80643c:	003e3f06 	br	805d3c <__alt_mem_onchip_mem+0xff7fdd3c>
  806440:	0401ffc4 	movi	r16,2047
  806444:	003e2506 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  806448:	0013883a 	mov	r9,zero
  80644c:	003f8406 	br	806260 <__alt_mem_onchip_mem+0xff7fe260>
  806450:	0005883a 	mov	r2,zero
  806454:	0007883a 	mov	r3,zero
  806458:	003e8906 	br	805e80 <__alt_mem_onchip_mem+0xff7fde80>
  80645c:	197ff804 	addi	r5,r3,-32
  806460:	01000804 	movi	r4,32
  806464:	414ad83a 	srl	r5,r8,r5
  806468:	19002426 	beq	r3,r4,8064fc <__adddf3+0x89c>
  80646c:	01001004 	movi	r4,64
  806470:	20c7c83a 	sub	r3,r4,r3
  806474:	40c6983a 	sll	r3,r8,r3
  806478:	1c46b03a 	or	r3,r3,r17
  80647c:	1806c03a 	cmpne	r3,r3,zero
  806480:	28e2b03a 	or	r17,r5,r3
  806484:	0007883a 	mov	r3,zero
  806488:	003f2306 	br	806118 <__alt_mem_onchip_mem+0xff7fe118>
  80648c:	0007883a 	mov	r3,zero
  806490:	5811883a 	mov	r8,r11
  806494:	00bfffc4 	movi	r2,-1
  806498:	0401ffc4 	movi	r16,2047
  80649c:	003e7806 	br	805e80 <__alt_mem_onchip_mem+0xff7fde80>
  8064a0:	4462b03a 	or	r17,r8,r17
  8064a4:	8822c03a 	cmpne	r17,r17,zero
  8064a8:	0009883a 	mov	r4,zero
  8064ac:	003fa006 	br	806330 <__alt_mem_onchip_mem+0xff7fe330>
  8064b0:	4811883a 	mov	r8,r9
  8064b4:	3023883a 	mov	r17,r6
  8064b8:	0401ffc4 	movi	r16,2047
  8064bc:	003e0706 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  8064c0:	4811883a 	mov	r8,r9
  8064c4:	3023883a 	mov	r17,r6
  8064c8:	003e0406 	br	805cdc <__alt_mem_onchip_mem+0xff7fdcdc>
  8064cc:	21fff804 	addi	r7,r4,-32
  8064d0:	01400804 	movi	r5,32
  8064d4:	41ced83a 	srl	r7,r8,r7
  8064d8:	21400a26 	beq	r4,r5,806504 <__adddf3+0x8a4>
  8064dc:	01401004 	movi	r5,64
  8064e0:	2909c83a 	sub	r4,r5,r4
  8064e4:	4108983a 	sll	r4,r8,r4
  8064e8:	2448b03a 	or	r4,r4,r17
  8064ec:	2008c03a 	cmpne	r4,r4,zero
  8064f0:	3922b03a 	or	r17,r7,r4
  8064f4:	0009883a 	mov	r4,zero
  8064f8:	003f8d06 	br	806330 <__alt_mem_onchip_mem+0xff7fe330>
  8064fc:	0007883a 	mov	r3,zero
  806500:	003fdd06 	br	806478 <__alt_mem_onchip_mem+0xff7fe478>
  806504:	0009883a 	mov	r4,zero
  806508:	003ff706 	br	8064e8 <__alt_mem_onchip_mem+0xff7fe4e8>

0080650c <__gedf2>:
  80650c:	2804d53a 	srli	r2,r5,20
  806510:	3806d53a 	srli	r3,r7,20
  806514:	02000434 	movhi	r8,16
  806518:	423fffc4 	addi	r8,r8,-1
  80651c:	1081ffcc 	andi	r2,r2,2047
  806520:	0241ffc4 	movi	r9,2047
  806524:	2a14703a 	and	r10,r5,r8
  806528:	18c1ffcc 	andi	r3,r3,2047
  80652c:	3a10703a 	and	r8,r7,r8
  806530:	280ad7fa 	srli	r5,r5,31
  806534:	380ed7fa 	srli	r7,r7,31
  806538:	12401d26 	beq	r2,r9,8065b0 <__gedf2+0xa4>
  80653c:	0241ffc4 	movi	r9,2047
  806540:	1a401226 	beq	r3,r9,80658c <__gedf2+0x80>
  806544:	1000081e 	bne	r2,zero,806568 <__gedf2+0x5c>
  806548:	2296b03a 	or	r11,r4,r10
  80654c:	5813003a 	cmpeq	r9,r11,zero
  806550:	1800091e 	bne	r3,zero,806578 <__gedf2+0x6c>
  806554:	3218b03a 	or	r12,r6,r8
  806558:	6000071e 	bne	r12,zero,806578 <__gedf2+0x6c>
  80655c:	0005883a 	mov	r2,zero
  806560:	5800101e 	bne	r11,zero,8065a4 <__gedf2+0x98>
  806564:	f800283a 	ret
  806568:	18000c1e 	bne	r3,zero,80659c <__gedf2+0x90>
  80656c:	3212b03a 	or	r9,r6,r8
  806570:	48000c26 	beq	r9,zero,8065a4 <__gedf2+0x98>
  806574:	0013883a 	mov	r9,zero
  806578:	39c03fcc 	andi	r7,r7,255
  80657c:	48000826 	beq	r9,zero,8065a0 <__gedf2+0x94>
  806580:	38000926 	beq	r7,zero,8065a8 <__gedf2+0x9c>
  806584:	00800044 	movi	r2,1
  806588:	f800283a 	ret
  80658c:	3212b03a 	or	r9,r6,r8
  806590:	483fec26 	beq	r9,zero,806544 <__alt_mem_onchip_mem+0xff7fe544>
  806594:	00bfff84 	movi	r2,-2
  806598:	f800283a 	ret
  80659c:	39c03fcc 	andi	r7,r7,255
  8065a0:	29c00626 	beq	r5,r7,8065bc <__gedf2+0xb0>
  8065a4:	283ff726 	beq	r5,zero,806584 <__alt_mem_onchip_mem+0xff7fe584>
  8065a8:	00bfffc4 	movi	r2,-1
  8065ac:	f800283a 	ret
  8065b0:	2292b03a 	or	r9,r4,r10
  8065b4:	483fe126 	beq	r9,zero,80653c <__alt_mem_onchip_mem+0xff7fe53c>
  8065b8:	003ff606 	br	806594 <__alt_mem_onchip_mem+0xff7fe594>
  8065bc:	18bff916 	blt	r3,r2,8065a4 <__alt_mem_onchip_mem+0xff7fe5a4>
  8065c0:	10c00316 	blt	r2,r3,8065d0 <__gedf2+0xc4>
  8065c4:	42bff736 	bltu	r8,r10,8065a4 <__alt_mem_onchip_mem+0xff7fe5a4>
  8065c8:	52000326 	beq	r10,r8,8065d8 <__gedf2+0xcc>
  8065cc:	5200042e 	bgeu	r10,r8,8065e0 <__gedf2+0xd4>
  8065d0:	283fec1e 	bne	r5,zero,806584 <__alt_mem_onchip_mem+0xff7fe584>
  8065d4:	003ff406 	br	8065a8 <__alt_mem_onchip_mem+0xff7fe5a8>
  8065d8:	313ff236 	bltu	r6,r4,8065a4 <__alt_mem_onchip_mem+0xff7fe5a4>
  8065dc:	21bffc36 	bltu	r4,r6,8065d0 <__alt_mem_onchip_mem+0xff7fe5d0>
  8065e0:	0005883a 	mov	r2,zero
  8065e4:	f800283a 	ret

008065e8 <__ledf2>:
  8065e8:	2804d53a 	srli	r2,r5,20
  8065ec:	3810d53a 	srli	r8,r7,20
  8065f0:	00c00434 	movhi	r3,16
  8065f4:	18ffffc4 	addi	r3,r3,-1
  8065f8:	1081ffcc 	andi	r2,r2,2047
  8065fc:	0241ffc4 	movi	r9,2047
  806600:	28d4703a 	and	r10,r5,r3
  806604:	4201ffcc 	andi	r8,r8,2047
  806608:	38c6703a 	and	r3,r7,r3
  80660c:	280ad7fa 	srli	r5,r5,31
  806610:	380ed7fa 	srli	r7,r7,31
  806614:	12401f26 	beq	r2,r9,806694 <__ledf2+0xac>
  806618:	0241ffc4 	movi	r9,2047
  80661c:	42401426 	beq	r8,r9,806670 <__ledf2+0x88>
  806620:	1000091e 	bne	r2,zero,806648 <__ledf2+0x60>
  806624:	2296b03a 	or	r11,r4,r10
  806628:	5813003a 	cmpeq	r9,r11,zero
  80662c:	29403fcc 	andi	r5,r5,255
  806630:	40000a1e 	bne	r8,zero,80665c <__ledf2+0x74>
  806634:	30d8b03a 	or	r12,r6,r3
  806638:	6000081e 	bne	r12,zero,80665c <__ledf2+0x74>
  80663c:	0005883a 	mov	r2,zero
  806640:	5800111e 	bne	r11,zero,806688 <__ledf2+0xa0>
  806644:	f800283a 	ret
  806648:	29403fcc 	andi	r5,r5,255
  80664c:	40000c1e 	bne	r8,zero,806680 <__ledf2+0x98>
  806650:	30d2b03a 	or	r9,r6,r3
  806654:	48000c26 	beq	r9,zero,806688 <__ledf2+0xa0>
  806658:	0013883a 	mov	r9,zero
  80665c:	39c03fcc 	andi	r7,r7,255
  806660:	48000826 	beq	r9,zero,806684 <__ledf2+0x9c>
  806664:	38001126 	beq	r7,zero,8066ac <__ledf2+0xc4>
  806668:	00800044 	movi	r2,1
  80666c:	f800283a 	ret
  806670:	30d2b03a 	or	r9,r6,r3
  806674:	483fea26 	beq	r9,zero,806620 <__alt_mem_onchip_mem+0xff7fe620>
  806678:	00800084 	movi	r2,2
  80667c:	f800283a 	ret
  806680:	39c03fcc 	andi	r7,r7,255
  806684:	39400726 	beq	r7,r5,8066a4 <__ledf2+0xbc>
  806688:	2800081e 	bne	r5,zero,8066ac <__ledf2+0xc4>
  80668c:	00800044 	movi	r2,1
  806690:	f800283a 	ret
  806694:	2292b03a 	or	r9,r4,r10
  806698:	483fdf26 	beq	r9,zero,806618 <__alt_mem_onchip_mem+0xff7fe618>
  80669c:	00800084 	movi	r2,2
  8066a0:	f800283a 	ret
  8066a4:	4080030e 	bge	r8,r2,8066b4 <__ledf2+0xcc>
  8066a8:	383fef26 	beq	r7,zero,806668 <__alt_mem_onchip_mem+0xff7fe668>
  8066ac:	00bfffc4 	movi	r2,-1
  8066b0:	f800283a 	ret
  8066b4:	123feb16 	blt	r2,r8,806664 <__alt_mem_onchip_mem+0xff7fe664>
  8066b8:	1abff336 	bltu	r3,r10,806688 <__alt_mem_onchip_mem+0xff7fe688>
  8066bc:	50c00326 	beq	r10,r3,8066cc <__ledf2+0xe4>
  8066c0:	50c0042e 	bgeu	r10,r3,8066d4 <__ledf2+0xec>
  8066c4:	283fe81e 	bne	r5,zero,806668 <__alt_mem_onchip_mem+0xff7fe668>
  8066c8:	003ff806 	br	8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  8066cc:	313fee36 	bltu	r6,r4,806688 <__alt_mem_onchip_mem+0xff7fe688>
  8066d0:	21bffc36 	bltu	r4,r6,8066c4 <__alt_mem_onchip_mem+0xff7fe6c4>
  8066d4:	0005883a 	mov	r2,zero
  8066d8:	f800283a 	ret

008066dc <__subdf3>:
  8066dc:	02000434 	movhi	r8,16
  8066e0:	423fffc4 	addi	r8,r8,-1
  8066e4:	defffb04 	addi	sp,sp,-20
  8066e8:	2a14703a 	and	r10,r5,r8
  8066ec:	3812d53a 	srli	r9,r7,20
  8066f0:	3a10703a 	and	r8,r7,r8
  8066f4:	2006d77a 	srli	r3,r4,29
  8066f8:	3004d77a 	srli	r2,r6,29
  8066fc:	dc000015 	stw	r16,0(sp)
  806700:	501490fa 	slli	r10,r10,3
  806704:	2820d53a 	srli	r16,r5,20
  806708:	401090fa 	slli	r8,r8,3
  80670c:	dc800215 	stw	r18,8(sp)
  806710:	dc400115 	stw	r17,4(sp)
  806714:	dfc00415 	stw	ra,16(sp)
  806718:	202290fa 	slli	r17,r4,3
  80671c:	dcc00315 	stw	r19,12(sp)
  806720:	4a41ffcc 	andi	r9,r9,2047
  806724:	0101ffc4 	movi	r4,2047
  806728:	2824d7fa 	srli	r18,r5,31
  80672c:	8401ffcc 	andi	r16,r16,2047
  806730:	50c6b03a 	or	r3,r10,r3
  806734:	380ed7fa 	srli	r7,r7,31
  806738:	408ab03a 	or	r5,r8,r2
  80673c:	300c90fa 	slli	r6,r6,3
  806740:	49009626 	beq	r9,r4,80699c <__subdf3+0x2c0>
  806744:	39c0005c 	xori	r7,r7,1
  806748:	8245c83a 	sub	r2,r16,r9
  80674c:	3c807426 	beq	r7,r18,806920 <__subdf3+0x244>
  806750:	0080af0e 	bge	zero,r2,806a10 <__subdf3+0x334>
  806754:	48002a1e 	bne	r9,zero,806800 <__subdf3+0x124>
  806758:	2988b03a 	or	r4,r5,r6
  80675c:	20009a1e 	bne	r4,zero,8069c8 <__subdf3+0x2ec>
  806760:	888001cc 	andi	r2,r17,7
  806764:	10000726 	beq	r2,zero,806784 <__subdf3+0xa8>
  806768:	888003cc 	andi	r2,r17,15
  80676c:	01000104 	movi	r4,4
  806770:	11000426 	beq	r2,r4,806784 <__subdf3+0xa8>
  806774:	890b883a 	add	r5,r17,r4
  806778:	2c63803a 	cmpltu	r17,r5,r17
  80677c:	1c47883a 	add	r3,r3,r17
  806780:	2823883a 	mov	r17,r5
  806784:	1880202c 	andhi	r2,r3,128
  806788:	10005926 	beq	r2,zero,8068f0 <__subdf3+0x214>
  80678c:	84000044 	addi	r16,r16,1
  806790:	0081ffc4 	movi	r2,2047
  806794:	8080be26 	beq	r16,r2,806a90 <__subdf3+0x3b4>
  806798:	017fe034 	movhi	r5,65408
  80679c:	297fffc4 	addi	r5,r5,-1
  8067a0:	1946703a 	and	r3,r3,r5
  8067a4:	1804977a 	slli	r2,r3,29
  8067a8:	1806927a 	slli	r3,r3,9
  8067ac:	8822d0fa 	srli	r17,r17,3
  8067b0:	8401ffcc 	andi	r16,r16,2047
  8067b4:	180ad33a 	srli	r5,r3,12
  8067b8:	9100004c 	andi	r4,r18,1
  8067bc:	1444b03a 	or	r2,r2,r17
  8067c0:	80c1ffcc 	andi	r3,r16,2047
  8067c4:	1820953a 	slli	r16,r3,20
  8067c8:	20c03fcc 	andi	r3,r4,255
  8067cc:	180897fa 	slli	r4,r3,31
  8067d0:	00c00434 	movhi	r3,16
  8067d4:	18ffffc4 	addi	r3,r3,-1
  8067d8:	28c6703a 	and	r3,r5,r3
  8067dc:	1c06b03a 	or	r3,r3,r16
  8067e0:	1906b03a 	or	r3,r3,r4
  8067e4:	dfc00417 	ldw	ra,16(sp)
  8067e8:	dcc00317 	ldw	r19,12(sp)
  8067ec:	dc800217 	ldw	r18,8(sp)
  8067f0:	dc400117 	ldw	r17,4(sp)
  8067f4:	dc000017 	ldw	r16,0(sp)
  8067f8:	dec00504 	addi	sp,sp,20
  8067fc:	f800283a 	ret
  806800:	0101ffc4 	movi	r4,2047
  806804:	813fd626 	beq	r16,r4,806760 <__alt_mem_onchip_mem+0xff7fe760>
  806808:	29402034 	orhi	r5,r5,128
  80680c:	01000e04 	movi	r4,56
  806810:	2080a316 	blt	r4,r2,806aa0 <__subdf3+0x3c4>
  806814:	010007c4 	movi	r4,31
  806818:	2080c616 	blt	r4,r2,806b34 <__subdf3+0x458>
  80681c:	01000804 	movi	r4,32
  806820:	2089c83a 	sub	r4,r4,r2
  806824:	2910983a 	sll	r8,r5,r4
  806828:	308ed83a 	srl	r7,r6,r2
  80682c:	3108983a 	sll	r4,r6,r4
  806830:	2884d83a 	srl	r2,r5,r2
  806834:	41ccb03a 	or	r6,r8,r7
  806838:	2008c03a 	cmpne	r4,r4,zero
  80683c:	310cb03a 	or	r6,r6,r4
  806840:	898dc83a 	sub	r6,r17,r6
  806844:	89a3803a 	cmpltu	r17,r17,r6
  806848:	1887c83a 	sub	r3,r3,r2
  80684c:	1c47c83a 	sub	r3,r3,r17
  806850:	3023883a 	mov	r17,r6
  806854:	1880202c 	andhi	r2,r3,128
  806858:	10002326 	beq	r2,zero,8068e8 <__subdf3+0x20c>
  80685c:	04c02034 	movhi	r19,128
  806860:	9cffffc4 	addi	r19,r19,-1
  806864:	1ce6703a 	and	r19,r3,r19
  806868:	98007a26 	beq	r19,zero,806a54 <__subdf3+0x378>
  80686c:	9809883a 	mov	r4,r19
  806870:	08070b40 	call	8070b4 <__clzsi2>
  806874:	113ffe04 	addi	r4,r2,-8
  806878:	00c007c4 	movi	r3,31
  80687c:	19007b16 	blt	r3,r4,806a6c <__subdf3+0x390>
  806880:	00800804 	movi	r2,32
  806884:	1105c83a 	sub	r2,r2,r4
  806888:	8884d83a 	srl	r2,r17,r2
  80688c:	9906983a 	sll	r3,r19,r4
  806890:	8922983a 	sll	r17,r17,r4
  806894:	10c4b03a 	or	r2,r2,r3
  806898:	24007816 	blt	r4,r16,806a7c <__subdf3+0x3a0>
  80689c:	2421c83a 	sub	r16,r4,r16
  8068a0:	80c00044 	addi	r3,r16,1
  8068a4:	010007c4 	movi	r4,31
  8068a8:	20c09516 	blt	r4,r3,806b00 <__subdf3+0x424>
  8068ac:	01400804 	movi	r5,32
  8068b0:	28cbc83a 	sub	r5,r5,r3
  8068b4:	88c8d83a 	srl	r4,r17,r3
  8068b8:	8962983a 	sll	r17,r17,r5
  8068bc:	114a983a 	sll	r5,r2,r5
  8068c0:	10c6d83a 	srl	r3,r2,r3
  8068c4:	8804c03a 	cmpne	r2,r17,zero
  8068c8:	290ab03a 	or	r5,r5,r4
  8068cc:	28a2b03a 	or	r17,r5,r2
  8068d0:	0021883a 	mov	r16,zero
  8068d4:	003fa206 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  8068d8:	2090b03a 	or	r8,r4,r2
  8068dc:	40018e26 	beq	r8,zero,806f18 <__subdf3+0x83c>
  8068e0:	1007883a 	mov	r3,r2
  8068e4:	2023883a 	mov	r17,r4
  8068e8:	888001cc 	andi	r2,r17,7
  8068ec:	103f9e1e 	bne	r2,zero,806768 <__alt_mem_onchip_mem+0xff7fe768>
  8068f0:	1804977a 	slli	r2,r3,29
  8068f4:	8822d0fa 	srli	r17,r17,3
  8068f8:	1810d0fa 	srli	r8,r3,3
  8068fc:	9100004c 	andi	r4,r18,1
  806900:	1444b03a 	or	r2,r2,r17
  806904:	00c1ffc4 	movi	r3,2047
  806908:	80c02826 	beq	r16,r3,8069ac <__subdf3+0x2d0>
  80690c:	01400434 	movhi	r5,16
  806910:	297fffc4 	addi	r5,r5,-1
  806914:	80e0703a 	and	r16,r16,r3
  806918:	414a703a 	and	r5,r8,r5
  80691c:	003fa806 	br	8067c0 <__alt_mem_onchip_mem+0xff7fe7c0>
  806920:	0080630e 	bge	zero,r2,806ab0 <__subdf3+0x3d4>
  806924:	48003026 	beq	r9,zero,8069e8 <__subdf3+0x30c>
  806928:	0101ffc4 	movi	r4,2047
  80692c:	813f8c26 	beq	r16,r4,806760 <__alt_mem_onchip_mem+0xff7fe760>
  806930:	29402034 	orhi	r5,r5,128
  806934:	01000e04 	movi	r4,56
  806938:	2080a90e 	bge	r4,r2,806be0 <__subdf3+0x504>
  80693c:	298cb03a 	or	r6,r5,r6
  806940:	3012c03a 	cmpne	r9,r6,zero
  806944:	0005883a 	mov	r2,zero
  806948:	4c53883a 	add	r9,r9,r17
  80694c:	4c63803a 	cmpltu	r17,r9,r17
  806950:	10c7883a 	add	r3,r2,r3
  806954:	88c7883a 	add	r3,r17,r3
  806958:	4823883a 	mov	r17,r9
  80695c:	1880202c 	andhi	r2,r3,128
  806960:	1000d026 	beq	r2,zero,806ca4 <__subdf3+0x5c8>
  806964:	84000044 	addi	r16,r16,1
  806968:	0081ffc4 	movi	r2,2047
  80696c:	8080fe26 	beq	r16,r2,806d68 <__subdf3+0x68c>
  806970:	00bfe034 	movhi	r2,65408
  806974:	10bfffc4 	addi	r2,r2,-1
  806978:	1886703a 	and	r3,r3,r2
  80697c:	880ad07a 	srli	r5,r17,1
  806980:	180497fa 	slli	r2,r3,31
  806984:	8900004c 	andi	r4,r17,1
  806988:	2922b03a 	or	r17,r5,r4
  80698c:	1806d07a 	srli	r3,r3,1
  806990:	1462b03a 	or	r17,r2,r17
  806994:	3825883a 	mov	r18,r7
  806998:	003f7106 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  80699c:	2984b03a 	or	r2,r5,r6
  8069a0:	103f6826 	beq	r2,zero,806744 <__alt_mem_onchip_mem+0xff7fe744>
  8069a4:	39c03fcc 	andi	r7,r7,255
  8069a8:	003f6706 	br	806748 <__alt_mem_onchip_mem+0xff7fe748>
  8069ac:	4086b03a 	or	r3,r8,r2
  8069b0:	18015226 	beq	r3,zero,806efc <__subdf3+0x820>
  8069b4:	00c00434 	movhi	r3,16
  8069b8:	41400234 	orhi	r5,r8,8
  8069bc:	18ffffc4 	addi	r3,r3,-1
  8069c0:	28ca703a 	and	r5,r5,r3
  8069c4:	003f7e06 	br	8067c0 <__alt_mem_onchip_mem+0xff7fe7c0>
  8069c8:	10bfffc4 	addi	r2,r2,-1
  8069cc:	1000491e 	bne	r2,zero,806af4 <__subdf3+0x418>
  8069d0:	898fc83a 	sub	r7,r17,r6
  8069d4:	89e3803a 	cmpltu	r17,r17,r7
  8069d8:	1947c83a 	sub	r3,r3,r5
  8069dc:	1c47c83a 	sub	r3,r3,r17
  8069e0:	3823883a 	mov	r17,r7
  8069e4:	003f9b06 	br	806854 <__alt_mem_onchip_mem+0xff7fe854>
  8069e8:	2988b03a 	or	r4,r5,r6
  8069ec:	203f5c26 	beq	r4,zero,806760 <__alt_mem_onchip_mem+0xff7fe760>
  8069f0:	10bfffc4 	addi	r2,r2,-1
  8069f4:	1000931e 	bne	r2,zero,806c44 <__subdf3+0x568>
  8069f8:	898d883a 	add	r6,r17,r6
  8069fc:	3463803a 	cmpltu	r17,r6,r17
  806a00:	1947883a 	add	r3,r3,r5
  806a04:	88c7883a 	add	r3,r17,r3
  806a08:	3023883a 	mov	r17,r6
  806a0c:	003fd306 	br	80695c <__alt_mem_onchip_mem+0xff7fe95c>
  806a10:	1000541e 	bne	r2,zero,806b64 <__subdf3+0x488>
  806a14:	80800044 	addi	r2,r16,1
  806a18:	1081ffcc 	andi	r2,r2,2047
  806a1c:	01000044 	movi	r4,1
  806a20:	2080a20e 	bge	r4,r2,806cac <__subdf3+0x5d0>
  806a24:	8989c83a 	sub	r4,r17,r6
  806a28:	8905803a 	cmpltu	r2,r17,r4
  806a2c:	1967c83a 	sub	r19,r3,r5
  806a30:	98a7c83a 	sub	r19,r19,r2
  806a34:	9880202c 	andhi	r2,r19,128
  806a38:	10006326 	beq	r2,zero,806bc8 <__subdf3+0x4ec>
  806a3c:	3463c83a 	sub	r17,r6,r17
  806a40:	28c7c83a 	sub	r3,r5,r3
  806a44:	344d803a 	cmpltu	r6,r6,r17
  806a48:	19a7c83a 	sub	r19,r3,r6
  806a4c:	3825883a 	mov	r18,r7
  806a50:	983f861e 	bne	r19,zero,80686c <__alt_mem_onchip_mem+0xff7fe86c>
  806a54:	8809883a 	mov	r4,r17
  806a58:	08070b40 	call	8070b4 <__clzsi2>
  806a5c:	10800804 	addi	r2,r2,32
  806a60:	113ffe04 	addi	r4,r2,-8
  806a64:	00c007c4 	movi	r3,31
  806a68:	193f850e 	bge	r3,r4,806880 <__alt_mem_onchip_mem+0xff7fe880>
  806a6c:	10bff604 	addi	r2,r2,-40
  806a70:	8884983a 	sll	r2,r17,r2
  806a74:	0023883a 	mov	r17,zero
  806a78:	243f880e 	bge	r4,r16,80689c <__alt_mem_onchip_mem+0xff7fe89c>
  806a7c:	00ffe034 	movhi	r3,65408
  806a80:	18ffffc4 	addi	r3,r3,-1
  806a84:	8121c83a 	sub	r16,r16,r4
  806a88:	10c6703a 	and	r3,r2,r3
  806a8c:	003f3406 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806a90:	9100004c 	andi	r4,r18,1
  806a94:	000b883a 	mov	r5,zero
  806a98:	0005883a 	mov	r2,zero
  806a9c:	003f4806 	br	8067c0 <__alt_mem_onchip_mem+0xff7fe7c0>
  806aa0:	298cb03a 	or	r6,r5,r6
  806aa4:	300cc03a 	cmpne	r6,r6,zero
  806aa8:	0005883a 	mov	r2,zero
  806aac:	003f6406 	br	806840 <__alt_mem_onchip_mem+0xff7fe840>
  806ab0:	10009a1e 	bne	r2,zero,806d1c <__subdf3+0x640>
  806ab4:	82400044 	addi	r9,r16,1
  806ab8:	4881ffcc 	andi	r2,r9,2047
  806abc:	02800044 	movi	r10,1
  806ac0:	5080670e 	bge	r10,r2,806c60 <__subdf3+0x584>
  806ac4:	0081ffc4 	movi	r2,2047
  806ac8:	4880af26 	beq	r9,r2,806d88 <__subdf3+0x6ac>
  806acc:	898d883a 	add	r6,r17,r6
  806ad0:	1945883a 	add	r2,r3,r5
  806ad4:	3447803a 	cmpltu	r3,r6,r17
  806ad8:	1887883a 	add	r3,r3,r2
  806adc:	182297fa 	slli	r17,r3,31
  806ae0:	300cd07a 	srli	r6,r6,1
  806ae4:	1806d07a 	srli	r3,r3,1
  806ae8:	4821883a 	mov	r16,r9
  806aec:	89a2b03a 	or	r17,r17,r6
  806af0:	003f1b06 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806af4:	0101ffc4 	movi	r4,2047
  806af8:	813f441e 	bne	r16,r4,80680c <__alt_mem_onchip_mem+0xff7fe80c>
  806afc:	003f1806 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806b00:	843ff844 	addi	r16,r16,-31
  806b04:	01400804 	movi	r5,32
  806b08:	1408d83a 	srl	r4,r2,r16
  806b0c:	19405026 	beq	r3,r5,806c50 <__subdf3+0x574>
  806b10:	01401004 	movi	r5,64
  806b14:	28c7c83a 	sub	r3,r5,r3
  806b18:	10c4983a 	sll	r2,r2,r3
  806b1c:	88a2b03a 	or	r17,r17,r2
  806b20:	8822c03a 	cmpne	r17,r17,zero
  806b24:	2462b03a 	or	r17,r4,r17
  806b28:	0007883a 	mov	r3,zero
  806b2c:	0021883a 	mov	r16,zero
  806b30:	003f6d06 	br	8068e8 <__alt_mem_onchip_mem+0xff7fe8e8>
  806b34:	11fff804 	addi	r7,r2,-32
  806b38:	01000804 	movi	r4,32
  806b3c:	29ced83a 	srl	r7,r5,r7
  806b40:	11004526 	beq	r2,r4,806c58 <__subdf3+0x57c>
  806b44:	01001004 	movi	r4,64
  806b48:	2089c83a 	sub	r4,r4,r2
  806b4c:	2904983a 	sll	r2,r5,r4
  806b50:	118cb03a 	or	r6,r2,r6
  806b54:	300cc03a 	cmpne	r6,r6,zero
  806b58:	398cb03a 	or	r6,r7,r6
  806b5c:	0005883a 	mov	r2,zero
  806b60:	003f3706 	br	806840 <__alt_mem_onchip_mem+0xff7fe840>
  806b64:	80002a26 	beq	r16,zero,806c10 <__subdf3+0x534>
  806b68:	0101ffc4 	movi	r4,2047
  806b6c:	49006626 	beq	r9,r4,806d08 <__subdf3+0x62c>
  806b70:	0085c83a 	sub	r2,zero,r2
  806b74:	18c02034 	orhi	r3,r3,128
  806b78:	01000e04 	movi	r4,56
  806b7c:	20807e16 	blt	r4,r2,806d78 <__subdf3+0x69c>
  806b80:	010007c4 	movi	r4,31
  806b84:	2080e716 	blt	r4,r2,806f24 <__subdf3+0x848>
  806b88:	01000804 	movi	r4,32
  806b8c:	2089c83a 	sub	r4,r4,r2
  806b90:	1914983a 	sll	r10,r3,r4
  806b94:	8890d83a 	srl	r8,r17,r2
  806b98:	8908983a 	sll	r4,r17,r4
  806b9c:	1884d83a 	srl	r2,r3,r2
  806ba0:	5222b03a 	or	r17,r10,r8
  806ba4:	2006c03a 	cmpne	r3,r4,zero
  806ba8:	88e2b03a 	or	r17,r17,r3
  806bac:	3463c83a 	sub	r17,r6,r17
  806bb0:	2885c83a 	sub	r2,r5,r2
  806bb4:	344d803a 	cmpltu	r6,r6,r17
  806bb8:	1187c83a 	sub	r3,r2,r6
  806bbc:	4821883a 	mov	r16,r9
  806bc0:	3825883a 	mov	r18,r7
  806bc4:	003f2306 	br	806854 <__alt_mem_onchip_mem+0xff7fe854>
  806bc8:	24d0b03a 	or	r8,r4,r19
  806bcc:	40001b1e 	bne	r8,zero,806c3c <__subdf3+0x560>
  806bd0:	0005883a 	mov	r2,zero
  806bd4:	0009883a 	mov	r4,zero
  806bd8:	0021883a 	mov	r16,zero
  806bdc:	003f4906 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  806be0:	010007c4 	movi	r4,31
  806be4:	20803a16 	blt	r4,r2,806cd0 <__subdf3+0x5f4>
  806be8:	01000804 	movi	r4,32
  806bec:	2089c83a 	sub	r4,r4,r2
  806bf0:	2912983a 	sll	r9,r5,r4
  806bf4:	3090d83a 	srl	r8,r6,r2
  806bf8:	3108983a 	sll	r4,r6,r4
  806bfc:	2884d83a 	srl	r2,r5,r2
  806c00:	4a12b03a 	or	r9,r9,r8
  806c04:	2008c03a 	cmpne	r4,r4,zero
  806c08:	4912b03a 	or	r9,r9,r4
  806c0c:	003f4e06 	br	806948 <__alt_mem_onchip_mem+0xff7fe948>
  806c10:	1c48b03a 	or	r4,r3,r17
  806c14:	20003c26 	beq	r4,zero,806d08 <__subdf3+0x62c>
  806c18:	0084303a 	nor	r2,zero,r2
  806c1c:	1000381e 	bne	r2,zero,806d00 <__subdf3+0x624>
  806c20:	3463c83a 	sub	r17,r6,r17
  806c24:	28c5c83a 	sub	r2,r5,r3
  806c28:	344d803a 	cmpltu	r6,r6,r17
  806c2c:	1187c83a 	sub	r3,r2,r6
  806c30:	4821883a 	mov	r16,r9
  806c34:	3825883a 	mov	r18,r7
  806c38:	003f0606 	br	806854 <__alt_mem_onchip_mem+0xff7fe854>
  806c3c:	2023883a 	mov	r17,r4
  806c40:	003f0906 	br	806868 <__alt_mem_onchip_mem+0xff7fe868>
  806c44:	0101ffc4 	movi	r4,2047
  806c48:	813f3a1e 	bne	r16,r4,806934 <__alt_mem_onchip_mem+0xff7fe934>
  806c4c:	003ec406 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806c50:	0005883a 	mov	r2,zero
  806c54:	003fb106 	br	806b1c <__alt_mem_onchip_mem+0xff7feb1c>
  806c58:	0005883a 	mov	r2,zero
  806c5c:	003fbc06 	br	806b50 <__alt_mem_onchip_mem+0xff7feb50>
  806c60:	1c44b03a 	or	r2,r3,r17
  806c64:	80008e1e 	bne	r16,zero,806ea0 <__subdf3+0x7c4>
  806c68:	1000c826 	beq	r2,zero,806f8c <__subdf3+0x8b0>
  806c6c:	2984b03a 	or	r2,r5,r6
  806c70:	103ebb26 	beq	r2,zero,806760 <__alt_mem_onchip_mem+0xff7fe760>
  806c74:	8989883a 	add	r4,r17,r6
  806c78:	1945883a 	add	r2,r3,r5
  806c7c:	2447803a 	cmpltu	r3,r4,r17
  806c80:	1887883a 	add	r3,r3,r2
  806c84:	1880202c 	andhi	r2,r3,128
  806c88:	2023883a 	mov	r17,r4
  806c8c:	103f1626 	beq	r2,zero,8068e8 <__alt_mem_onchip_mem+0xff7fe8e8>
  806c90:	00bfe034 	movhi	r2,65408
  806c94:	10bfffc4 	addi	r2,r2,-1
  806c98:	5021883a 	mov	r16,r10
  806c9c:	1886703a 	and	r3,r3,r2
  806ca0:	003eaf06 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806ca4:	3825883a 	mov	r18,r7
  806ca8:	003f0f06 	br	8068e8 <__alt_mem_onchip_mem+0xff7fe8e8>
  806cac:	1c44b03a 	or	r2,r3,r17
  806cb0:	8000251e 	bne	r16,zero,806d48 <__subdf3+0x66c>
  806cb4:	1000661e 	bne	r2,zero,806e50 <__subdf3+0x774>
  806cb8:	2990b03a 	or	r8,r5,r6
  806cbc:	40009626 	beq	r8,zero,806f18 <__subdf3+0x83c>
  806cc0:	2807883a 	mov	r3,r5
  806cc4:	3023883a 	mov	r17,r6
  806cc8:	3825883a 	mov	r18,r7
  806ccc:	003ea406 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806cd0:	127ff804 	addi	r9,r2,-32
  806cd4:	01000804 	movi	r4,32
  806cd8:	2a52d83a 	srl	r9,r5,r9
  806cdc:	11008c26 	beq	r2,r4,806f10 <__subdf3+0x834>
  806ce0:	01001004 	movi	r4,64
  806ce4:	2085c83a 	sub	r2,r4,r2
  806ce8:	2884983a 	sll	r2,r5,r2
  806cec:	118cb03a 	or	r6,r2,r6
  806cf0:	300cc03a 	cmpne	r6,r6,zero
  806cf4:	4992b03a 	or	r9,r9,r6
  806cf8:	0005883a 	mov	r2,zero
  806cfc:	003f1206 	br	806948 <__alt_mem_onchip_mem+0xff7fe948>
  806d00:	0101ffc4 	movi	r4,2047
  806d04:	493f9c1e 	bne	r9,r4,806b78 <__alt_mem_onchip_mem+0xff7feb78>
  806d08:	2807883a 	mov	r3,r5
  806d0c:	3023883a 	mov	r17,r6
  806d10:	4821883a 	mov	r16,r9
  806d14:	3825883a 	mov	r18,r7
  806d18:	003e9106 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806d1c:	80001f1e 	bne	r16,zero,806d9c <__subdf3+0x6c0>
  806d20:	1c48b03a 	or	r4,r3,r17
  806d24:	20005a26 	beq	r4,zero,806e90 <__subdf3+0x7b4>
  806d28:	0084303a 	nor	r2,zero,r2
  806d2c:	1000561e 	bne	r2,zero,806e88 <__subdf3+0x7ac>
  806d30:	89a3883a 	add	r17,r17,r6
  806d34:	1945883a 	add	r2,r3,r5
  806d38:	898d803a 	cmpltu	r6,r17,r6
  806d3c:	3087883a 	add	r3,r6,r2
  806d40:	4821883a 	mov	r16,r9
  806d44:	003f0506 	br	80695c <__alt_mem_onchip_mem+0xff7fe95c>
  806d48:	10002b1e 	bne	r2,zero,806df8 <__subdf3+0x71c>
  806d4c:	2984b03a 	or	r2,r5,r6
  806d50:	10008026 	beq	r2,zero,806f54 <__subdf3+0x878>
  806d54:	2807883a 	mov	r3,r5
  806d58:	3023883a 	mov	r17,r6
  806d5c:	3825883a 	mov	r18,r7
  806d60:	0401ffc4 	movi	r16,2047
  806d64:	003e7e06 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806d68:	3809883a 	mov	r4,r7
  806d6c:	0011883a 	mov	r8,zero
  806d70:	0005883a 	mov	r2,zero
  806d74:	003ee306 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  806d78:	1c62b03a 	or	r17,r3,r17
  806d7c:	8822c03a 	cmpne	r17,r17,zero
  806d80:	0005883a 	mov	r2,zero
  806d84:	003f8906 	br	806bac <__alt_mem_onchip_mem+0xff7febac>
  806d88:	3809883a 	mov	r4,r7
  806d8c:	4821883a 	mov	r16,r9
  806d90:	0011883a 	mov	r8,zero
  806d94:	0005883a 	mov	r2,zero
  806d98:	003eda06 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  806d9c:	0101ffc4 	movi	r4,2047
  806da0:	49003b26 	beq	r9,r4,806e90 <__subdf3+0x7b4>
  806da4:	0085c83a 	sub	r2,zero,r2
  806da8:	18c02034 	orhi	r3,r3,128
  806dac:	01000e04 	movi	r4,56
  806db0:	20806e16 	blt	r4,r2,806f6c <__subdf3+0x890>
  806db4:	010007c4 	movi	r4,31
  806db8:	20807716 	blt	r4,r2,806f98 <__subdf3+0x8bc>
  806dbc:	01000804 	movi	r4,32
  806dc0:	2089c83a 	sub	r4,r4,r2
  806dc4:	1914983a 	sll	r10,r3,r4
  806dc8:	8890d83a 	srl	r8,r17,r2
  806dcc:	8908983a 	sll	r4,r17,r4
  806dd0:	1884d83a 	srl	r2,r3,r2
  806dd4:	5222b03a 	or	r17,r10,r8
  806dd8:	2006c03a 	cmpne	r3,r4,zero
  806ddc:	88e2b03a 	or	r17,r17,r3
  806de0:	89a3883a 	add	r17,r17,r6
  806de4:	1145883a 	add	r2,r2,r5
  806de8:	898d803a 	cmpltu	r6,r17,r6
  806dec:	3087883a 	add	r3,r6,r2
  806df0:	4821883a 	mov	r16,r9
  806df4:	003ed906 	br	80695c <__alt_mem_onchip_mem+0xff7fe95c>
  806df8:	2984b03a 	or	r2,r5,r6
  806dfc:	10004226 	beq	r2,zero,806f08 <__subdf3+0x82c>
  806e00:	1808d0fa 	srli	r4,r3,3
  806e04:	8822d0fa 	srli	r17,r17,3
  806e08:	1806977a 	slli	r3,r3,29
  806e0c:	2080022c 	andhi	r2,r4,8
  806e10:	1c62b03a 	or	r17,r3,r17
  806e14:	10000826 	beq	r2,zero,806e38 <__subdf3+0x75c>
  806e18:	2812d0fa 	srli	r9,r5,3
  806e1c:	4880022c 	andhi	r2,r9,8
  806e20:	1000051e 	bne	r2,zero,806e38 <__subdf3+0x75c>
  806e24:	300cd0fa 	srli	r6,r6,3
  806e28:	2804977a 	slli	r2,r5,29
  806e2c:	4809883a 	mov	r4,r9
  806e30:	3825883a 	mov	r18,r7
  806e34:	11a2b03a 	or	r17,r2,r6
  806e38:	8806d77a 	srli	r3,r17,29
  806e3c:	200890fa 	slli	r4,r4,3
  806e40:	882290fa 	slli	r17,r17,3
  806e44:	0401ffc4 	movi	r16,2047
  806e48:	1906b03a 	or	r3,r3,r4
  806e4c:	003e4406 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806e50:	2984b03a 	or	r2,r5,r6
  806e54:	103e4226 	beq	r2,zero,806760 <__alt_mem_onchip_mem+0xff7fe760>
  806e58:	8989c83a 	sub	r4,r17,r6
  806e5c:	8911803a 	cmpltu	r8,r17,r4
  806e60:	1945c83a 	sub	r2,r3,r5
  806e64:	1205c83a 	sub	r2,r2,r8
  806e68:	1200202c 	andhi	r8,r2,128
  806e6c:	403e9a26 	beq	r8,zero,8068d8 <__alt_mem_onchip_mem+0xff7fe8d8>
  806e70:	3463c83a 	sub	r17,r6,r17
  806e74:	28c5c83a 	sub	r2,r5,r3
  806e78:	344d803a 	cmpltu	r6,r6,r17
  806e7c:	1187c83a 	sub	r3,r2,r6
  806e80:	3825883a 	mov	r18,r7
  806e84:	003e3606 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806e88:	0101ffc4 	movi	r4,2047
  806e8c:	493fc71e 	bne	r9,r4,806dac <__alt_mem_onchip_mem+0xff7fedac>
  806e90:	2807883a 	mov	r3,r5
  806e94:	3023883a 	mov	r17,r6
  806e98:	4821883a 	mov	r16,r9
  806e9c:	003e3006 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806ea0:	10003626 	beq	r2,zero,806f7c <__subdf3+0x8a0>
  806ea4:	2984b03a 	or	r2,r5,r6
  806ea8:	10001726 	beq	r2,zero,806f08 <__subdf3+0x82c>
  806eac:	1808d0fa 	srli	r4,r3,3
  806eb0:	8822d0fa 	srli	r17,r17,3
  806eb4:	1806977a 	slli	r3,r3,29
  806eb8:	2080022c 	andhi	r2,r4,8
  806ebc:	1c62b03a 	or	r17,r3,r17
  806ec0:	10000726 	beq	r2,zero,806ee0 <__subdf3+0x804>
  806ec4:	2812d0fa 	srli	r9,r5,3
  806ec8:	4880022c 	andhi	r2,r9,8
  806ecc:	1000041e 	bne	r2,zero,806ee0 <__subdf3+0x804>
  806ed0:	300cd0fa 	srli	r6,r6,3
  806ed4:	2804977a 	slli	r2,r5,29
  806ed8:	4809883a 	mov	r4,r9
  806edc:	11a2b03a 	or	r17,r2,r6
  806ee0:	8806d77a 	srli	r3,r17,29
  806ee4:	200890fa 	slli	r4,r4,3
  806ee8:	882290fa 	slli	r17,r17,3
  806eec:	3825883a 	mov	r18,r7
  806ef0:	1906b03a 	or	r3,r3,r4
  806ef4:	0401ffc4 	movi	r16,2047
  806ef8:	003e1906 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806efc:	000b883a 	mov	r5,zero
  806f00:	0005883a 	mov	r2,zero
  806f04:	003e2e06 	br	8067c0 <__alt_mem_onchip_mem+0xff7fe7c0>
  806f08:	0401ffc4 	movi	r16,2047
  806f0c:	003e1406 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806f10:	0005883a 	mov	r2,zero
  806f14:	003f7506 	br	806cec <__alt_mem_onchip_mem+0xff7fecec>
  806f18:	0005883a 	mov	r2,zero
  806f1c:	0009883a 	mov	r4,zero
  806f20:	003e7806 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  806f24:	123ff804 	addi	r8,r2,-32
  806f28:	01000804 	movi	r4,32
  806f2c:	1a10d83a 	srl	r8,r3,r8
  806f30:	11002526 	beq	r2,r4,806fc8 <__subdf3+0x8ec>
  806f34:	01001004 	movi	r4,64
  806f38:	2085c83a 	sub	r2,r4,r2
  806f3c:	1884983a 	sll	r2,r3,r2
  806f40:	1444b03a 	or	r2,r2,r17
  806f44:	1004c03a 	cmpne	r2,r2,zero
  806f48:	40a2b03a 	or	r17,r8,r2
  806f4c:	0005883a 	mov	r2,zero
  806f50:	003f1606 	br	806bac <__alt_mem_onchip_mem+0xff7febac>
  806f54:	02000434 	movhi	r8,16
  806f58:	0009883a 	mov	r4,zero
  806f5c:	423fffc4 	addi	r8,r8,-1
  806f60:	00bfffc4 	movi	r2,-1
  806f64:	0401ffc4 	movi	r16,2047
  806f68:	003e6606 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  806f6c:	1c62b03a 	or	r17,r3,r17
  806f70:	8822c03a 	cmpne	r17,r17,zero
  806f74:	0005883a 	mov	r2,zero
  806f78:	003f9906 	br	806de0 <__alt_mem_onchip_mem+0xff7fede0>
  806f7c:	2807883a 	mov	r3,r5
  806f80:	3023883a 	mov	r17,r6
  806f84:	0401ffc4 	movi	r16,2047
  806f88:	003df506 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806f8c:	2807883a 	mov	r3,r5
  806f90:	3023883a 	mov	r17,r6
  806f94:	003df206 	br	806760 <__alt_mem_onchip_mem+0xff7fe760>
  806f98:	123ff804 	addi	r8,r2,-32
  806f9c:	01000804 	movi	r4,32
  806fa0:	1a10d83a 	srl	r8,r3,r8
  806fa4:	11000a26 	beq	r2,r4,806fd0 <__subdf3+0x8f4>
  806fa8:	01001004 	movi	r4,64
  806fac:	2085c83a 	sub	r2,r4,r2
  806fb0:	1884983a 	sll	r2,r3,r2
  806fb4:	1444b03a 	or	r2,r2,r17
  806fb8:	1004c03a 	cmpne	r2,r2,zero
  806fbc:	40a2b03a 	or	r17,r8,r2
  806fc0:	0005883a 	mov	r2,zero
  806fc4:	003f8606 	br	806de0 <__alt_mem_onchip_mem+0xff7fede0>
  806fc8:	0005883a 	mov	r2,zero
  806fcc:	003fdc06 	br	806f40 <__alt_mem_onchip_mem+0xff7fef40>
  806fd0:	0005883a 	mov	r2,zero
  806fd4:	003ff706 	br	806fb4 <__alt_mem_onchip_mem+0xff7fefb4>

00806fd8 <__floatsidf>:
  806fd8:	defffd04 	addi	sp,sp,-12
  806fdc:	dfc00215 	stw	ra,8(sp)
  806fe0:	dc400115 	stw	r17,4(sp)
  806fe4:	dc000015 	stw	r16,0(sp)
  806fe8:	20002b26 	beq	r4,zero,807098 <__floatsidf+0xc0>
  806fec:	2023883a 	mov	r17,r4
  806ff0:	2020d7fa 	srli	r16,r4,31
  806ff4:	20002d16 	blt	r4,zero,8070ac <__floatsidf+0xd4>
  806ff8:	8809883a 	mov	r4,r17
  806ffc:	08070b40 	call	8070b4 <__clzsi2>
  807000:	01410784 	movi	r5,1054
  807004:	288bc83a 	sub	r5,r5,r2
  807008:	01010cc4 	movi	r4,1075
  80700c:	2149c83a 	sub	r4,r4,r5
  807010:	00c007c4 	movi	r3,31
  807014:	1900160e 	bge	r3,r4,807070 <__floatsidf+0x98>
  807018:	00c104c4 	movi	r3,1043
  80701c:	1947c83a 	sub	r3,r3,r5
  807020:	88c6983a 	sll	r3,r17,r3
  807024:	00800434 	movhi	r2,16
  807028:	10bfffc4 	addi	r2,r2,-1
  80702c:	1886703a 	and	r3,r3,r2
  807030:	2941ffcc 	andi	r5,r5,2047
  807034:	800d883a 	mov	r6,r16
  807038:	0005883a 	mov	r2,zero
  80703c:	280a953a 	slli	r5,r5,20
  807040:	31803fcc 	andi	r6,r6,255
  807044:	01000434 	movhi	r4,16
  807048:	300c97fa 	slli	r6,r6,31
  80704c:	213fffc4 	addi	r4,r4,-1
  807050:	1906703a 	and	r3,r3,r4
  807054:	1946b03a 	or	r3,r3,r5
  807058:	1986b03a 	or	r3,r3,r6
  80705c:	dfc00217 	ldw	ra,8(sp)
  807060:	dc400117 	ldw	r17,4(sp)
  807064:	dc000017 	ldw	r16,0(sp)
  807068:	dec00304 	addi	sp,sp,12
  80706c:	f800283a 	ret
  807070:	00c002c4 	movi	r3,11
  807074:	1887c83a 	sub	r3,r3,r2
  807078:	88c6d83a 	srl	r3,r17,r3
  80707c:	8904983a 	sll	r2,r17,r4
  807080:	01000434 	movhi	r4,16
  807084:	213fffc4 	addi	r4,r4,-1
  807088:	2941ffcc 	andi	r5,r5,2047
  80708c:	1906703a 	and	r3,r3,r4
  807090:	800d883a 	mov	r6,r16
  807094:	003fe906 	br	80703c <__alt_mem_onchip_mem+0xff7ff03c>
  807098:	000d883a 	mov	r6,zero
  80709c:	000b883a 	mov	r5,zero
  8070a0:	0007883a 	mov	r3,zero
  8070a4:	0005883a 	mov	r2,zero
  8070a8:	003fe406 	br	80703c <__alt_mem_onchip_mem+0xff7ff03c>
  8070ac:	0123c83a 	sub	r17,zero,r4
  8070b0:	003fd106 	br	806ff8 <__alt_mem_onchip_mem+0xff7feff8>

008070b4 <__clzsi2>:
  8070b4:	00bfffd4 	movui	r2,65535
  8070b8:	11000536 	bltu	r2,r4,8070d0 <__clzsi2+0x1c>
  8070bc:	00803fc4 	movi	r2,255
  8070c0:	11000f36 	bltu	r2,r4,807100 <__clzsi2+0x4c>
  8070c4:	00800804 	movi	r2,32
  8070c8:	0007883a 	mov	r3,zero
  8070cc:	00000506 	br	8070e4 <__clzsi2+0x30>
  8070d0:	00804034 	movhi	r2,256
  8070d4:	10bfffc4 	addi	r2,r2,-1
  8070d8:	11000c2e 	bgeu	r2,r4,80710c <__clzsi2+0x58>
  8070dc:	00800204 	movi	r2,8
  8070e0:	00c00604 	movi	r3,24
  8070e4:	20c8d83a 	srl	r4,r4,r3
  8070e8:	00c02074 	movhi	r3,129
  8070ec:	18dcd4c4 	addi	r3,r3,29523
  8070f0:	1909883a 	add	r4,r3,r4
  8070f4:	20c00003 	ldbu	r3,0(r4)
  8070f8:	10c5c83a 	sub	r2,r2,r3
  8070fc:	f800283a 	ret
  807100:	00800604 	movi	r2,24
  807104:	00c00204 	movi	r3,8
  807108:	003ff606 	br	8070e4 <__alt_mem_onchip_mem+0xff7ff0e4>
  80710c:	00800404 	movi	r2,16
  807110:	1007883a 	mov	r3,r2
  807114:	003ff306 	br	8070e4 <__alt_mem_onchip_mem+0xff7ff0e4>

00807118 <_fclose_r>:
  807118:	28003926 	beq	r5,zero,807200 <_fclose_r+0xe8>
  80711c:	defffc04 	addi	sp,sp,-16
  807120:	dc400115 	stw	r17,4(sp)
  807124:	dc000015 	stw	r16,0(sp)
  807128:	dfc00315 	stw	ra,12(sp)
  80712c:	dc800215 	stw	r18,8(sp)
  807130:	2023883a 	mov	r17,r4
  807134:	2821883a 	mov	r16,r5
  807138:	20000226 	beq	r4,zero,807144 <_fclose_r+0x2c>
  80713c:	20800e17 	ldw	r2,56(r4)
  807140:	10002726 	beq	r2,zero,8071e0 <_fclose_r+0xc8>
  807144:	8080030f 	ldh	r2,12(r16)
  807148:	1000071e 	bne	r2,zero,807168 <_fclose_r+0x50>
  80714c:	0005883a 	mov	r2,zero
  807150:	dfc00317 	ldw	ra,12(sp)
  807154:	dc800217 	ldw	r18,8(sp)
  807158:	dc400117 	ldw	r17,4(sp)
  80715c:	dc000017 	ldw	r16,0(sp)
  807160:	dec00404 	addi	sp,sp,16
  807164:	f800283a 	ret
  807168:	800b883a 	mov	r5,r16
  80716c:	8809883a 	mov	r4,r17
  807170:	080721c0 	call	80721c <__sflush_r>
  807174:	1025883a 	mov	r18,r2
  807178:	80800b17 	ldw	r2,44(r16)
  80717c:	10000426 	beq	r2,zero,807190 <_fclose_r+0x78>
  807180:	81400717 	ldw	r5,28(r16)
  807184:	8809883a 	mov	r4,r17
  807188:	103ee83a 	callr	r2
  80718c:	10001616 	blt	r2,zero,8071e8 <_fclose_r+0xd0>
  807190:	8080030b 	ldhu	r2,12(r16)
  807194:	1080200c 	andi	r2,r2,128
  807198:	1000151e 	bne	r2,zero,8071f0 <_fclose_r+0xd8>
  80719c:	81400c17 	ldw	r5,48(r16)
  8071a0:	28000526 	beq	r5,zero,8071b8 <_fclose_r+0xa0>
  8071a4:	80801004 	addi	r2,r16,64
  8071a8:	28800226 	beq	r5,r2,8071b4 <_fclose_r+0x9c>
  8071ac:	8809883a 	mov	r4,r17
  8071b0:	0807b800 	call	807b80 <_free_r>
  8071b4:	80000c15 	stw	zero,48(r16)
  8071b8:	81401117 	ldw	r5,68(r16)
  8071bc:	28000326 	beq	r5,zero,8071cc <_fclose_r+0xb4>
  8071c0:	8809883a 	mov	r4,r17
  8071c4:	0807b800 	call	807b80 <_free_r>
  8071c8:	80001115 	stw	zero,68(r16)
  8071cc:	08078240 	call	807824 <__sfp_lock_acquire>
  8071d0:	8000030d 	sth	zero,12(r16)
  8071d4:	08078280 	call	807828 <__sfp_lock_release>
  8071d8:	9005883a 	mov	r2,r18
  8071dc:	003fdc06 	br	807150 <__alt_mem_onchip_mem+0xff7ff150>
  8071e0:	08078140 	call	807814 <__sinit>
  8071e4:	003fd706 	br	807144 <__alt_mem_onchip_mem+0xff7ff144>
  8071e8:	04bfffc4 	movi	r18,-1
  8071ec:	003fe806 	br	807190 <__alt_mem_onchip_mem+0xff7ff190>
  8071f0:	81400417 	ldw	r5,16(r16)
  8071f4:	8809883a 	mov	r4,r17
  8071f8:	0807b800 	call	807b80 <_free_r>
  8071fc:	003fe706 	br	80719c <__alt_mem_onchip_mem+0xff7ff19c>
  807200:	0005883a 	mov	r2,zero
  807204:	f800283a 	ret

00807208 <fclose>:
  807208:	008020b4 	movhi	r2,130
  80720c:	10a56604 	addi	r2,r2,-27240
  807210:	200b883a 	mov	r5,r4
  807214:	11000017 	ldw	r4,0(r2)
  807218:	08071181 	jmpi	807118 <_fclose_r>

0080721c <__sflush_r>:
  80721c:	2880030b 	ldhu	r2,12(r5)
  807220:	defffb04 	addi	sp,sp,-20
  807224:	dcc00315 	stw	r19,12(sp)
  807228:	dc400115 	stw	r17,4(sp)
  80722c:	dfc00415 	stw	ra,16(sp)
  807230:	dc800215 	stw	r18,8(sp)
  807234:	dc000015 	stw	r16,0(sp)
  807238:	10c0020c 	andi	r3,r2,8
  80723c:	2823883a 	mov	r17,r5
  807240:	2027883a 	mov	r19,r4
  807244:	1800311e 	bne	r3,zero,80730c <__sflush_r+0xf0>
  807248:	28c00117 	ldw	r3,4(r5)
  80724c:	10820014 	ori	r2,r2,2048
  807250:	2880030d 	sth	r2,12(r5)
  807254:	00c04b0e 	bge	zero,r3,807384 <__sflush_r+0x168>
  807258:	8a000a17 	ldw	r8,40(r17)
  80725c:	40002326 	beq	r8,zero,8072ec <__sflush_r+0xd0>
  807260:	9c000017 	ldw	r16,0(r19)
  807264:	10c4000c 	andi	r3,r2,4096
  807268:	98000015 	stw	zero,0(r19)
  80726c:	18004826 	beq	r3,zero,807390 <__sflush_r+0x174>
  807270:	89801417 	ldw	r6,80(r17)
  807274:	10c0010c 	andi	r3,r2,4
  807278:	18000626 	beq	r3,zero,807294 <__sflush_r+0x78>
  80727c:	88c00117 	ldw	r3,4(r17)
  807280:	88800c17 	ldw	r2,48(r17)
  807284:	30cdc83a 	sub	r6,r6,r3
  807288:	10000226 	beq	r2,zero,807294 <__sflush_r+0x78>
  80728c:	88800f17 	ldw	r2,60(r17)
  807290:	308dc83a 	sub	r6,r6,r2
  807294:	89400717 	ldw	r5,28(r17)
  807298:	000f883a 	mov	r7,zero
  80729c:	9809883a 	mov	r4,r19
  8072a0:	403ee83a 	callr	r8
  8072a4:	00ffffc4 	movi	r3,-1
  8072a8:	10c04426 	beq	r2,r3,8073bc <__sflush_r+0x1a0>
  8072ac:	88c0030b 	ldhu	r3,12(r17)
  8072b0:	89000417 	ldw	r4,16(r17)
  8072b4:	88000115 	stw	zero,4(r17)
  8072b8:	197dffcc 	andi	r5,r3,63487
  8072bc:	8940030d 	sth	r5,12(r17)
  8072c0:	89000015 	stw	r4,0(r17)
  8072c4:	18c4000c 	andi	r3,r3,4096
  8072c8:	18002c1e 	bne	r3,zero,80737c <__sflush_r+0x160>
  8072cc:	89400c17 	ldw	r5,48(r17)
  8072d0:	9c000015 	stw	r16,0(r19)
  8072d4:	28000526 	beq	r5,zero,8072ec <__sflush_r+0xd0>
  8072d8:	88801004 	addi	r2,r17,64
  8072dc:	28800226 	beq	r5,r2,8072e8 <__sflush_r+0xcc>
  8072e0:	9809883a 	mov	r4,r19
  8072e4:	0807b800 	call	807b80 <_free_r>
  8072e8:	88000c15 	stw	zero,48(r17)
  8072ec:	0005883a 	mov	r2,zero
  8072f0:	dfc00417 	ldw	ra,16(sp)
  8072f4:	dcc00317 	ldw	r19,12(sp)
  8072f8:	dc800217 	ldw	r18,8(sp)
  8072fc:	dc400117 	ldw	r17,4(sp)
  807300:	dc000017 	ldw	r16,0(sp)
  807304:	dec00504 	addi	sp,sp,20
  807308:	f800283a 	ret
  80730c:	2c800417 	ldw	r18,16(r5)
  807310:	903ff626 	beq	r18,zero,8072ec <__alt_mem_onchip_mem+0xff7ff2ec>
  807314:	2c000017 	ldw	r16,0(r5)
  807318:	108000cc 	andi	r2,r2,3
  80731c:	2c800015 	stw	r18,0(r5)
  807320:	84a1c83a 	sub	r16,r16,r18
  807324:	1000131e 	bne	r2,zero,807374 <__sflush_r+0x158>
  807328:	28800517 	ldw	r2,20(r5)
  80732c:	88800215 	stw	r2,8(r17)
  807330:	04000316 	blt	zero,r16,807340 <__sflush_r+0x124>
  807334:	003fed06 	br	8072ec <__alt_mem_onchip_mem+0xff7ff2ec>
  807338:	90a5883a 	add	r18,r18,r2
  80733c:	043feb0e 	bge	zero,r16,8072ec <__alt_mem_onchip_mem+0xff7ff2ec>
  807340:	88800917 	ldw	r2,36(r17)
  807344:	89400717 	ldw	r5,28(r17)
  807348:	800f883a 	mov	r7,r16
  80734c:	900d883a 	mov	r6,r18
  807350:	9809883a 	mov	r4,r19
  807354:	103ee83a 	callr	r2
  807358:	80a1c83a 	sub	r16,r16,r2
  80735c:	00bff616 	blt	zero,r2,807338 <__alt_mem_onchip_mem+0xff7ff338>
  807360:	88c0030b 	ldhu	r3,12(r17)
  807364:	00bfffc4 	movi	r2,-1
  807368:	18c01014 	ori	r3,r3,64
  80736c:	88c0030d 	sth	r3,12(r17)
  807370:	003fdf06 	br	8072f0 <__alt_mem_onchip_mem+0xff7ff2f0>
  807374:	0005883a 	mov	r2,zero
  807378:	003fec06 	br	80732c <__alt_mem_onchip_mem+0xff7ff32c>
  80737c:	88801415 	stw	r2,80(r17)
  807380:	003fd206 	br	8072cc <__alt_mem_onchip_mem+0xff7ff2cc>
  807384:	28c00f17 	ldw	r3,60(r5)
  807388:	00ffb316 	blt	zero,r3,807258 <__alt_mem_onchip_mem+0xff7ff258>
  80738c:	003fd706 	br	8072ec <__alt_mem_onchip_mem+0xff7ff2ec>
  807390:	89400717 	ldw	r5,28(r17)
  807394:	000d883a 	mov	r6,zero
  807398:	01c00044 	movi	r7,1
  80739c:	9809883a 	mov	r4,r19
  8073a0:	403ee83a 	callr	r8
  8073a4:	100d883a 	mov	r6,r2
  8073a8:	00bfffc4 	movi	r2,-1
  8073ac:	30801426 	beq	r6,r2,807400 <__sflush_r+0x1e4>
  8073b0:	8880030b 	ldhu	r2,12(r17)
  8073b4:	8a000a17 	ldw	r8,40(r17)
  8073b8:	003fae06 	br	807274 <__alt_mem_onchip_mem+0xff7ff274>
  8073bc:	98c00017 	ldw	r3,0(r19)
  8073c0:	183fba26 	beq	r3,zero,8072ac <__alt_mem_onchip_mem+0xff7ff2ac>
  8073c4:	01000744 	movi	r4,29
  8073c8:	19000626 	beq	r3,r4,8073e4 <__sflush_r+0x1c8>
  8073cc:	01000584 	movi	r4,22
  8073d0:	19000426 	beq	r3,r4,8073e4 <__sflush_r+0x1c8>
  8073d4:	88c0030b 	ldhu	r3,12(r17)
  8073d8:	18c01014 	ori	r3,r3,64
  8073dc:	88c0030d 	sth	r3,12(r17)
  8073e0:	003fc306 	br	8072f0 <__alt_mem_onchip_mem+0xff7ff2f0>
  8073e4:	8880030b 	ldhu	r2,12(r17)
  8073e8:	88c00417 	ldw	r3,16(r17)
  8073ec:	88000115 	stw	zero,4(r17)
  8073f0:	10bdffcc 	andi	r2,r2,63487
  8073f4:	8880030d 	sth	r2,12(r17)
  8073f8:	88c00015 	stw	r3,0(r17)
  8073fc:	003fb306 	br	8072cc <__alt_mem_onchip_mem+0xff7ff2cc>
  807400:	98800017 	ldw	r2,0(r19)
  807404:	103fea26 	beq	r2,zero,8073b0 <__alt_mem_onchip_mem+0xff7ff3b0>
  807408:	00c00744 	movi	r3,29
  80740c:	10c00226 	beq	r2,r3,807418 <__sflush_r+0x1fc>
  807410:	00c00584 	movi	r3,22
  807414:	10c0031e 	bne	r2,r3,807424 <__sflush_r+0x208>
  807418:	9c000015 	stw	r16,0(r19)
  80741c:	0005883a 	mov	r2,zero
  807420:	003fb306 	br	8072f0 <__alt_mem_onchip_mem+0xff7ff2f0>
  807424:	88c0030b 	ldhu	r3,12(r17)
  807428:	3005883a 	mov	r2,r6
  80742c:	18c01014 	ori	r3,r3,64
  807430:	88c0030d 	sth	r3,12(r17)
  807434:	003fae06 	br	8072f0 <__alt_mem_onchip_mem+0xff7ff2f0>

00807438 <_fflush_r>:
  807438:	defffd04 	addi	sp,sp,-12
  80743c:	dc000115 	stw	r16,4(sp)
  807440:	dfc00215 	stw	ra,8(sp)
  807444:	2021883a 	mov	r16,r4
  807448:	20000226 	beq	r4,zero,807454 <_fflush_r+0x1c>
  80744c:	20800e17 	ldw	r2,56(r4)
  807450:	10000c26 	beq	r2,zero,807484 <_fflush_r+0x4c>
  807454:	2880030f 	ldh	r2,12(r5)
  807458:	1000051e 	bne	r2,zero,807470 <_fflush_r+0x38>
  80745c:	0005883a 	mov	r2,zero
  807460:	dfc00217 	ldw	ra,8(sp)
  807464:	dc000117 	ldw	r16,4(sp)
  807468:	dec00304 	addi	sp,sp,12
  80746c:	f800283a 	ret
  807470:	8009883a 	mov	r4,r16
  807474:	dfc00217 	ldw	ra,8(sp)
  807478:	dc000117 	ldw	r16,4(sp)
  80747c:	dec00304 	addi	sp,sp,12
  807480:	080721c1 	jmpi	80721c <__sflush_r>
  807484:	d9400015 	stw	r5,0(sp)
  807488:	08078140 	call	807814 <__sinit>
  80748c:	d9400017 	ldw	r5,0(sp)
  807490:	003ff006 	br	807454 <__alt_mem_onchip_mem+0xff7ff454>

00807494 <fflush>:
  807494:	20000526 	beq	r4,zero,8074ac <fflush+0x18>
  807498:	008020b4 	movhi	r2,130
  80749c:	10a56604 	addi	r2,r2,-27240
  8074a0:	200b883a 	mov	r5,r4
  8074a4:	11000017 	ldw	r4,0(r2)
  8074a8:	08074381 	jmpi	807438 <_fflush_r>
  8074ac:	008020b4 	movhi	r2,130
  8074b0:	10a56504 	addi	r2,r2,-27244
  8074b4:	11000017 	ldw	r4,0(r2)
  8074b8:	01402034 	movhi	r5,128
  8074bc:	295d0e04 	addi	r5,r5,29752
  8074c0:	08084301 	jmpi	808430 <_fwalk_reent>

008074c4 <__fp_unlock>:
  8074c4:	0005883a 	mov	r2,zero
  8074c8:	f800283a 	ret

008074cc <_cleanup_r>:
  8074cc:	01402034 	movhi	r5,128
  8074d0:	295c4604 	addi	r5,r5,28952
  8074d4:	08084301 	jmpi	808430 <_fwalk_reent>

008074d8 <__sinit.part.1>:
  8074d8:	defff704 	addi	sp,sp,-36
  8074dc:	00c02034 	movhi	r3,128
  8074e0:	dfc00815 	stw	ra,32(sp)
  8074e4:	ddc00715 	stw	r23,28(sp)
  8074e8:	dd800615 	stw	r22,24(sp)
  8074ec:	dd400515 	stw	r21,20(sp)
  8074f0:	dd000415 	stw	r20,16(sp)
  8074f4:	dcc00315 	stw	r19,12(sp)
  8074f8:	dc800215 	stw	r18,8(sp)
  8074fc:	dc400115 	stw	r17,4(sp)
  807500:	dc000015 	stw	r16,0(sp)
  807504:	18dd3304 	addi	r3,r3,29900
  807508:	24000117 	ldw	r16,4(r4)
  80750c:	20c00f15 	stw	r3,60(r4)
  807510:	2080bb04 	addi	r2,r4,748
  807514:	00c000c4 	movi	r3,3
  807518:	20c0b915 	stw	r3,740(r4)
  80751c:	2080ba15 	stw	r2,744(r4)
  807520:	2000b815 	stw	zero,736(r4)
  807524:	05c00204 	movi	r23,8
  807528:	00800104 	movi	r2,4
  80752c:	2025883a 	mov	r18,r4
  807530:	b80d883a 	mov	r6,r23
  807534:	81001704 	addi	r4,r16,92
  807538:	000b883a 	mov	r5,zero
  80753c:	80000015 	stw	zero,0(r16)
  807540:	80000115 	stw	zero,4(r16)
  807544:	80000215 	stw	zero,8(r16)
  807548:	8080030d 	sth	r2,12(r16)
  80754c:	80001915 	stw	zero,100(r16)
  807550:	8000038d 	sth	zero,14(r16)
  807554:	80000415 	stw	zero,16(r16)
  807558:	80000515 	stw	zero,20(r16)
  80755c:	80000615 	stw	zero,24(r16)
  807560:	0808ebc0 	call	808ebc <memset>
  807564:	05802074 	movhi	r22,129
  807568:	94400217 	ldw	r17,8(r18)
  80756c:	05402074 	movhi	r21,129
  807570:	05002074 	movhi	r20,129
  807574:	04c02074 	movhi	r19,129
  807578:	b5a53104 	addi	r22,r22,-27452
  80757c:	ad654804 	addi	r21,r21,-27360
  807580:	a5256704 	addi	r20,r20,-27236
  807584:	9ce57e04 	addi	r19,r19,-27144
  807588:	85800815 	stw	r22,32(r16)
  80758c:	85400915 	stw	r21,36(r16)
  807590:	85000a15 	stw	r20,40(r16)
  807594:	84c00b15 	stw	r19,44(r16)
  807598:	84000715 	stw	r16,28(r16)
  80759c:	00800284 	movi	r2,10
  8075a0:	8880030d 	sth	r2,12(r17)
  8075a4:	00800044 	movi	r2,1
  8075a8:	b80d883a 	mov	r6,r23
  8075ac:	89001704 	addi	r4,r17,92
  8075b0:	000b883a 	mov	r5,zero
  8075b4:	88000015 	stw	zero,0(r17)
  8075b8:	88000115 	stw	zero,4(r17)
  8075bc:	88000215 	stw	zero,8(r17)
  8075c0:	88001915 	stw	zero,100(r17)
  8075c4:	8880038d 	sth	r2,14(r17)
  8075c8:	88000415 	stw	zero,16(r17)
  8075cc:	88000515 	stw	zero,20(r17)
  8075d0:	88000615 	stw	zero,24(r17)
  8075d4:	0808ebc0 	call	808ebc <memset>
  8075d8:	94000317 	ldw	r16,12(r18)
  8075dc:	00800484 	movi	r2,18
  8075e0:	8c400715 	stw	r17,28(r17)
  8075e4:	8d800815 	stw	r22,32(r17)
  8075e8:	8d400915 	stw	r21,36(r17)
  8075ec:	8d000a15 	stw	r20,40(r17)
  8075f0:	8cc00b15 	stw	r19,44(r17)
  8075f4:	8080030d 	sth	r2,12(r16)
  8075f8:	00800084 	movi	r2,2
  8075fc:	80000015 	stw	zero,0(r16)
  807600:	80000115 	stw	zero,4(r16)
  807604:	80000215 	stw	zero,8(r16)
  807608:	80001915 	stw	zero,100(r16)
  80760c:	8080038d 	sth	r2,14(r16)
  807610:	80000415 	stw	zero,16(r16)
  807614:	80000515 	stw	zero,20(r16)
  807618:	80000615 	stw	zero,24(r16)
  80761c:	b80d883a 	mov	r6,r23
  807620:	000b883a 	mov	r5,zero
  807624:	81001704 	addi	r4,r16,92
  807628:	0808ebc0 	call	808ebc <memset>
  80762c:	00800044 	movi	r2,1
  807630:	84000715 	stw	r16,28(r16)
  807634:	85800815 	stw	r22,32(r16)
  807638:	85400915 	stw	r21,36(r16)
  80763c:	85000a15 	stw	r20,40(r16)
  807640:	84c00b15 	stw	r19,44(r16)
  807644:	90800e15 	stw	r2,56(r18)
  807648:	dfc00817 	ldw	ra,32(sp)
  80764c:	ddc00717 	ldw	r23,28(sp)
  807650:	dd800617 	ldw	r22,24(sp)
  807654:	dd400517 	ldw	r21,20(sp)
  807658:	dd000417 	ldw	r20,16(sp)
  80765c:	dcc00317 	ldw	r19,12(sp)
  807660:	dc800217 	ldw	r18,8(sp)
  807664:	dc400117 	ldw	r17,4(sp)
  807668:	dc000017 	ldw	r16,0(sp)
  80766c:	dec00904 	addi	sp,sp,36
  807670:	f800283a 	ret

00807674 <__fp_lock>:
  807674:	0005883a 	mov	r2,zero
  807678:	f800283a 	ret

0080767c <__sfmoreglue>:
  80767c:	defffc04 	addi	sp,sp,-16
  807680:	dc400115 	stw	r17,4(sp)
  807684:	2c7fffc4 	addi	r17,r5,-1
  807688:	8c401a24 	muli	r17,r17,104
  80768c:	dc800215 	stw	r18,8(sp)
  807690:	2825883a 	mov	r18,r5
  807694:	89401d04 	addi	r5,r17,116
  807698:	dc000015 	stw	r16,0(sp)
  80769c:	dfc00315 	stw	ra,12(sp)
  8076a0:	08086b00 	call	8086b0 <_malloc_r>
  8076a4:	1021883a 	mov	r16,r2
  8076a8:	10000726 	beq	r2,zero,8076c8 <__sfmoreglue+0x4c>
  8076ac:	11000304 	addi	r4,r2,12
  8076b0:	10000015 	stw	zero,0(r2)
  8076b4:	14800115 	stw	r18,4(r2)
  8076b8:	11000215 	stw	r4,8(r2)
  8076bc:	89801a04 	addi	r6,r17,104
  8076c0:	000b883a 	mov	r5,zero
  8076c4:	0808ebc0 	call	808ebc <memset>
  8076c8:	8005883a 	mov	r2,r16
  8076cc:	dfc00317 	ldw	ra,12(sp)
  8076d0:	dc800217 	ldw	r18,8(sp)
  8076d4:	dc400117 	ldw	r17,4(sp)
  8076d8:	dc000017 	ldw	r16,0(sp)
  8076dc:	dec00404 	addi	sp,sp,16
  8076e0:	f800283a 	ret

008076e4 <__sfp>:
  8076e4:	defffb04 	addi	sp,sp,-20
  8076e8:	dc000015 	stw	r16,0(sp)
  8076ec:	040020b4 	movhi	r16,130
  8076f0:	84256504 	addi	r16,r16,-27244
  8076f4:	dcc00315 	stw	r19,12(sp)
  8076f8:	2027883a 	mov	r19,r4
  8076fc:	81000017 	ldw	r4,0(r16)
  807700:	dfc00415 	stw	ra,16(sp)
  807704:	dc800215 	stw	r18,8(sp)
  807708:	20800e17 	ldw	r2,56(r4)
  80770c:	dc400115 	stw	r17,4(sp)
  807710:	1000021e 	bne	r2,zero,80771c <__sfp+0x38>
  807714:	08074d80 	call	8074d8 <__sinit.part.1>
  807718:	81000017 	ldw	r4,0(r16)
  80771c:	2480b804 	addi	r18,r4,736
  807720:	047fffc4 	movi	r17,-1
  807724:	91000117 	ldw	r4,4(r18)
  807728:	94000217 	ldw	r16,8(r18)
  80772c:	213fffc4 	addi	r4,r4,-1
  807730:	20000a16 	blt	r4,zero,80775c <__sfp+0x78>
  807734:	8080030f 	ldh	r2,12(r16)
  807738:	10000c26 	beq	r2,zero,80776c <__sfp+0x88>
  80773c:	80c01d04 	addi	r3,r16,116
  807740:	00000206 	br	80774c <__sfp+0x68>
  807744:	18bfe60f 	ldh	r2,-104(r3)
  807748:	10000826 	beq	r2,zero,80776c <__sfp+0x88>
  80774c:	213fffc4 	addi	r4,r4,-1
  807750:	1c3ffd04 	addi	r16,r3,-12
  807754:	18c01a04 	addi	r3,r3,104
  807758:	247ffa1e 	bne	r4,r17,807744 <__alt_mem_onchip_mem+0xff7ff744>
  80775c:	90800017 	ldw	r2,0(r18)
  807760:	10001d26 	beq	r2,zero,8077d8 <__sfp+0xf4>
  807764:	1025883a 	mov	r18,r2
  807768:	003fee06 	br	807724 <__alt_mem_onchip_mem+0xff7ff724>
  80776c:	00bfffc4 	movi	r2,-1
  807770:	8080038d 	sth	r2,14(r16)
  807774:	00800044 	movi	r2,1
  807778:	8080030d 	sth	r2,12(r16)
  80777c:	80001915 	stw	zero,100(r16)
  807780:	80000015 	stw	zero,0(r16)
  807784:	80000215 	stw	zero,8(r16)
  807788:	80000115 	stw	zero,4(r16)
  80778c:	80000415 	stw	zero,16(r16)
  807790:	80000515 	stw	zero,20(r16)
  807794:	80000615 	stw	zero,24(r16)
  807798:	01800204 	movi	r6,8
  80779c:	000b883a 	mov	r5,zero
  8077a0:	81001704 	addi	r4,r16,92
  8077a4:	0808ebc0 	call	808ebc <memset>
  8077a8:	8005883a 	mov	r2,r16
  8077ac:	80000c15 	stw	zero,48(r16)
  8077b0:	80000d15 	stw	zero,52(r16)
  8077b4:	80001115 	stw	zero,68(r16)
  8077b8:	80001215 	stw	zero,72(r16)
  8077bc:	dfc00417 	ldw	ra,16(sp)
  8077c0:	dcc00317 	ldw	r19,12(sp)
  8077c4:	dc800217 	ldw	r18,8(sp)
  8077c8:	dc400117 	ldw	r17,4(sp)
  8077cc:	dc000017 	ldw	r16,0(sp)
  8077d0:	dec00504 	addi	sp,sp,20
  8077d4:	f800283a 	ret
  8077d8:	01400104 	movi	r5,4
  8077dc:	9809883a 	mov	r4,r19
  8077e0:	080767c0 	call	80767c <__sfmoreglue>
  8077e4:	90800015 	stw	r2,0(r18)
  8077e8:	103fde1e 	bne	r2,zero,807764 <__alt_mem_onchip_mem+0xff7ff764>
  8077ec:	00800304 	movi	r2,12
  8077f0:	98800015 	stw	r2,0(r19)
  8077f4:	0005883a 	mov	r2,zero
  8077f8:	003ff006 	br	8077bc <__alt_mem_onchip_mem+0xff7ff7bc>

008077fc <_cleanup>:
  8077fc:	008020b4 	movhi	r2,130
  807800:	10a56504 	addi	r2,r2,-27244
  807804:	11000017 	ldw	r4,0(r2)
  807808:	01402034 	movhi	r5,128
  80780c:	295c4604 	addi	r5,r5,28952
  807810:	08084301 	jmpi	808430 <_fwalk_reent>

00807814 <__sinit>:
  807814:	20800e17 	ldw	r2,56(r4)
  807818:	10000126 	beq	r2,zero,807820 <__sinit+0xc>
  80781c:	f800283a 	ret
  807820:	08074d81 	jmpi	8074d8 <__sinit.part.1>

00807824 <__sfp_lock_acquire>:
  807824:	f800283a 	ret

00807828 <__sfp_lock_release>:
  807828:	f800283a 	ret

0080782c <__sinit_lock_acquire>:
  80782c:	f800283a 	ret

00807830 <__sinit_lock_release>:
  807830:	f800283a 	ret

00807834 <__fp_lock_all>:
  807834:	008020b4 	movhi	r2,130
  807838:	10a56604 	addi	r2,r2,-27240
  80783c:	11000017 	ldw	r4,0(r2)
  807840:	01402034 	movhi	r5,128
  807844:	295d9d04 	addi	r5,r5,30324
  807848:	080836c1 	jmpi	80836c <_fwalk>

0080784c <__fp_unlock_all>:
  80784c:	008020b4 	movhi	r2,130
  807850:	10a56604 	addi	r2,r2,-27240
  807854:	11000017 	ldw	r4,0(r2)
  807858:	01402034 	movhi	r5,128
  80785c:	295d3104 	addi	r5,r5,29892
  807860:	080836c1 	jmpi	80836c <_fwalk>

00807864 <_fopen_r>:
  807864:	defffa04 	addi	sp,sp,-24
  807868:	3005883a 	mov	r2,r6
  80786c:	dcc00415 	stw	r19,16(sp)
  807870:	d80d883a 	mov	r6,sp
  807874:	2827883a 	mov	r19,r5
  807878:	100b883a 	mov	r5,r2
  80787c:	dc800315 	stw	r18,12(sp)
  807880:	dfc00515 	stw	ra,20(sp)
  807884:	dc400215 	stw	r17,8(sp)
  807888:	dc000115 	stw	r16,4(sp)
  80788c:	2025883a 	mov	r18,r4
  807890:	080d5540 	call	80d554 <__sflags>
  807894:	10002726 	beq	r2,zero,807934 <_fopen_r+0xd0>
  807898:	9009883a 	mov	r4,r18
  80789c:	1023883a 	mov	r17,r2
  8078a0:	08076e40 	call	8076e4 <__sfp>
  8078a4:	1021883a 	mov	r16,r2
  8078a8:	10002226 	beq	r2,zero,807934 <_fopen_r+0xd0>
  8078ac:	d9800017 	ldw	r6,0(sp)
  8078b0:	01c06d84 	movi	r7,438
  8078b4:	980b883a 	mov	r5,r19
  8078b8:	9009883a 	mov	r4,r18
  8078bc:	0808fe40 	call	808fe4 <_open_r>
  8078c0:	10001916 	blt	r2,zero,807928 <_fopen_r+0xc4>
  8078c4:	8080038d 	sth	r2,14(r16)
  8078c8:	00802074 	movhi	r2,129
  8078cc:	10a53104 	addi	r2,r2,-27452
  8078d0:	80800815 	stw	r2,32(r16)
  8078d4:	00802074 	movhi	r2,129
  8078d8:	10a54804 	addi	r2,r2,-27360
  8078dc:	80800915 	stw	r2,36(r16)
  8078e0:	00802074 	movhi	r2,129
  8078e4:	10a56704 	addi	r2,r2,-27236
  8078e8:	80800a15 	stw	r2,40(r16)
  8078ec:	00802074 	movhi	r2,129
  8078f0:	10a57e04 	addi	r2,r2,-27144
  8078f4:	8440030d 	sth	r17,12(r16)
  8078f8:	84000715 	stw	r16,28(r16)
  8078fc:	80800b15 	stw	r2,44(r16)
  807900:	8c40400c 	andi	r17,r17,256
  807904:	88000d1e 	bne	r17,zero,80793c <_fopen_r+0xd8>
  807908:	8005883a 	mov	r2,r16
  80790c:	dfc00517 	ldw	ra,20(sp)
  807910:	dcc00417 	ldw	r19,16(sp)
  807914:	dc800317 	ldw	r18,12(sp)
  807918:	dc400217 	ldw	r17,8(sp)
  80791c:	dc000117 	ldw	r16,4(sp)
  807920:	dec00604 	addi	sp,sp,24
  807924:	f800283a 	ret
  807928:	08078240 	call	807824 <__sfp_lock_acquire>
  80792c:	8000030d 	sth	zero,12(r16)
  807930:	08078280 	call	807828 <__sfp_lock_release>
  807934:	0005883a 	mov	r2,zero
  807938:	003ff406 	br	80790c <__alt_mem_onchip_mem+0xff7ff90c>
  80793c:	01c00084 	movi	r7,2
  807940:	000d883a 	mov	r6,zero
  807944:	800b883a 	mov	r5,r16
  807948:	9009883a 	mov	r4,r18
  80794c:	0807e900 	call	807e90 <_fseek_r>
  807950:	8005883a 	mov	r2,r16
  807954:	003fed06 	br	80790c <__alt_mem_onchip_mem+0xff7ff90c>

00807958 <fopen>:
  807958:	008020b4 	movhi	r2,130
  80795c:	10a56604 	addi	r2,r2,-27240
  807960:	280d883a 	mov	r6,r5
  807964:	200b883a 	mov	r5,r4
  807968:	11000017 	ldw	r4,0(r2)
  80796c:	08078641 	jmpi	807864 <_fopen_r>

00807970 <_fprintf_r>:
  807970:	defffe04 	addi	sp,sp,-8
  807974:	2809883a 	mov	r4,r5
  807978:	300b883a 	mov	r5,r6
  80797c:	dfc00015 	stw	ra,0(sp)
  807980:	d9c00115 	stw	r7,4(sp)
  807984:	d9800104 	addi	r6,sp,4
  807988:	080b8900 	call	80b890 <__vfprintf_internal>
  80798c:	dfc00017 	ldw	ra,0(sp)
  807990:	dec00204 	addi	sp,sp,8
  807994:	f800283a 	ret

00807998 <fprintf>:
  807998:	defffd04 	addi	sp,sp,-12
  80799c:	dfc00015 	stw	ra,0(sp)
  8079a0:	d9800115 	stw	r6,4(sp)
  8079a4:	d9c00215 	stw	r7,8(sp)
  8079a8:	d9800104 	addi	r6,sp,4
  8079ac:	080b8900 	call	80b890 <__vfprintf_internal>
  8079b0:	dfc00017 	ldw	ra,0(sp)
  8079b4:	dec00304 	addi	sp,sp,12
  8079b8:	f800283a 	ret

008079bc <_fputc_r>:
  8079bc:	defffc04 	addi	sp,sp,-16
  8079c0:	dc000215 	stw	r16,8(sp)
  8079c4:	dfc00315 	stw	ra,12(sp)
  8079c8:	2021883a 	mov	r16,r4
  8079cc:	20000726 	beq	r4,zero,8079ec <_fputc_r+0x30>
  8079d0:	20800e17 	ldw	r2,56(r4)
  8079d4:	1000051e 	bne	r2,zero,8079ec <_fputc_r+0x30>
  8079d8:	d9400015 	stw	r5,0(sp)
  8079dc:	d9800115 	stw	r6,4(sp)
  8079e0:	08078140 	call	807814 <__sinit>
  8079e4:	d9800117 	ldw	r6,4(sp)
  8079e8:	d9400017 	ldw	r5,0(sp)
  8079ec:	8009883a 	mov	r4,r16
  8079f0:	dfc00317 	ldw	ra,12(sp)
  8079f4:	dc000217 	ldw	r16,8(sp)
  8079f8:	dec00404 	addi	sp,sp,16
  8079fc:	08090441 	jmpi	809044 <_putc_r>

00807a00 <fputc>:
  807a00:	008020b4 	movhi	r2,130
  807a04:	defffc04 	addi	sp,sp,-16
  807a08:	10a56604 	addi	r2,r2,-27240
  807a0c:	dc000115 	stw	r16,4(sp)
  807a10:	14000017 	ldw	r16,0(r2)
  807a14:	dc400215 	stw	r17,8(sp)
  807a18:	dfc00315 	stw	ra,12(sp)
  807a1c:	2023883a 	mov	r17,r4
  807a20:	80000626 	beq	r16,zero,807a3c <fputc+0x3c>
  807a24:	80800e17 	ldw	r2,56(r16)
  807a28:	1000041e 	bne	r2,zero,807a3c <fputc+0x3c>
  807a2c:	8009883a 	mov	r4,r16
  807a30:	d9400015 	stw	r5,0(sp)
  807a34:	08078140 	call	807814 <__sinit>
  807a38:	d9400017 	ldw	r5,0(sp)
  807a3c:	280d883a 	mov	r6,r5
  807a40:	8009883a 	mov	r4,r16
  807a44:	880b883a 	mov	r5,r17
  807a48:	dfc00317 	ldw	ra,12(sp)
  807a4c:	dc400217 	ldw	r17,8(sp)
  807a50:	dc000117 	ldw	r16,4(sp)
  807a54:	dec00404 	addi	sp,sp,16
  807a58:	08090441 	jmpi	809044 <_putc_r>

00807a5c <_malloc_trim_r>:
  807a5c:	defffb04 	addi	sp,sp,-20
  807a60:	dcc00315 	stw	r19,12(sp)
  807a64:	04c02074 	movhi	r19,129
  807a68:	dc800215 	stw	r18,8(sp)
  807a6c:	dc400115 	stw	r17,4(sp)
  807a70:	dc000015 	stw	r16,0(sp)
  807a74:	dfc00415 	stw	ra,16(sp)
  807a78:	2821883a 	mov	r16,r5
  807a7c:	9cdf4204 	addi	r19,r19,32008
  807a80:	2025883a 	mov	r18,r4
  807a84:	081381c0 	call	81381c <__malloc_lock>
  807a88:	98800217 	ldw	r2,8(r19)
  807a8c:	14400117 	ldw	r17,4(r2)
  807a90:	00bfff04 	movi	r2,-4
  807a94:	88a2703a 	and	r17,r17,r2
  807a98:	8c21c83a 	sub	r16,r17,r16
  807a9c:	8403fbc4 	addi	r16,r16,4079
  807aa0:	8020d33a 	srli	r16,r16,12
  807aa4:	0083ffc4 	movi	r2,4095
  807aa8:	843fffc4 	addi	r16,r16,-1
  807aac:	8020933a 	slli	r16,r16,12
  807ab0:	1400060e 	bge	r2,r16,807acc <_malloc_trim_r+0x70>
  807ab4:	000b883a 	mov	r5,zero
  807ab8:	9009883a 	mov	r4,r18
  807abc:	08094700 	call	809470 <_sbrk_r>
  807ac0:	98c00217 	ldw	r3,8(r19)
  807ac4:	1c47883a 	add	r3,r3,r17
  807ac8:	10c00a26 	beq	r2,r3,807af4 <_malloc_trim_r+0x98>
  807acc:	9009883a 	mov	r4,r18
  807ad0:	08138400 	call	813840 <__malloc_unlock>
  807ad4:	0005883a 	mov	r2,zero
  807ad8:	dfc00417 	ldw	ra,16(sp)
  807adc:	dcc00317 	ldw	r19,12(sp)
  807ae0:	dc800217 	ldw	r18,8(sp)
  807ae4:	dc400117 	ldw	r17,4(sp)
  807ae8:	dc000017 	ldw	r16,0(sp)
  807aec:	dec00504 	addi	sp,sp,20
  807af0:	f800283a 	ret
  807af4:	040bc83a 	sub	r5,zero,r16
  807af8:	9009883a 	mov	r4,r18
  807afc:	08094700 	call	809470 <_sbrk_r>
  807b00:	00ffffc4 	movi	r3,-1
  807b04:	10c00d26 	beq	r2,r3,807b3c <_malloc_trim_r+0xe0>
  807b08:	00c020b4 	movhi	r3,130
  807b0c:	18ecdf04 	addi	r3,r3,-19588
  807b10:	18800017 	ldw	r2,0(r3)
  807b14:	99000217 	ldw	r4,8(r19)
  807b18:	8c23c83a 	sub	r17,r17,r16
  807b1c:	8c400054 	ori	r17,r17,1
  807b20:	1421c83a 	sub	r16,r2,r16
  807b24:	24400115 	stw	r17,4(r4)
  807b28:	9009883a 	mov	r4,r18
  807b2c:	1c000015 	stw	r16,0(r3)
  807b30:	08138400 	call	813840 <__malloc_unlock>
  807b34:	00800044 	movi	r2,1
  807b38:	003fe706 	br	807ad8 <__alt_mem_onchip_mem+0xff7ffad8>
  807b3c:	000b883a 	mov	r5,zero
  807b40:	9009883a 	mov	r4,r18
  807b44:	08094700 	call	809470 <_sbrk_r>
  807b48:	99000217 	ldw	r4,8(r19)
  807b4c:	014003c4 	movi	r5,15
  807b50:	1107c83a 	sub	r3,r2,r4
  807b54:	28ffdd0e 	bge	r5,r3,807acc <__alt_mem_onchip_mem+0xff7ffacc>
  807b58:	014020b4 	movhi	r5,130
  807b5c:	29656704 	addi	r5,r5,-27236
  807b60:	29400017 	ldw	r5,0(r5)
  807b64:	18c00054 	ori	r3,r3,1
  807b68:	20c00115 	stw	r3,4(r4)
  807b6c:	00c020b4 	movhi	r3,130
  807b70:	1145c83a 	sub	r2,r2,r5
  807b74:	18ecdf04 	addi	r3,r3,-19588
  807b78:	18800015 	stw	r2,0(r3)
  807b7c:	003fd306 	br	807acc <__alt_mem_onchip_mem+0xff7ffacc>

00807b80 <_free_r>:
  807b80:	28004126 	beq	r5,zero,807c88 <_free_r+0x108>
  807b84:	defffd04 	addi	sp,sp,-12
  807b88:	dc400115 	stw	r17,4(sp)
  807b8c:	dc000015 	stw	r16,0(sp)
  807b90:	2023883a 	mov	r17,r4
  807b94:	2821883a 	mov	r16,r5
  807b98:	dfc00215 	stw	ra,8(sp)
  807b9c:	081381c0 	call	81381c <__malloc_lock>
  807ba0:	81ffff17 	ldw	r7,-4(r16)
  807ba4:	00bfff84 	movi	r2,-2
  807ba8:	01002074 	movhi	r4,129
  807bac:	81bffe04 	addi	r6,r16,-8
  807bb0:	3884703a 	and	r2,r7,r2
  807bb4:	211f4204 	addi	r4,r4,32008
  807bb8:	308b883a 	add	r5,r6,r2
  807bbc:	2a400117 	ldw	r9,4(r5)
  807bc0:	22000217 	ldw	r8,8(r4)
  807bc4:	00ffff04 	movi	r3,-4
  807bc8:	48c6703a 	and	r3,r9,r3
  807bcc:	2a005726 	beq	r5,r8,807d2c <_free_r+0x1ac>
  807bd0:	28c00115 	stw	r3,4(r5)
  807bd4:	39c0004c 	andi	r7,r7,1
  807bd8:	3800091e 	bne	r7,zero,807c00 <_free_r+0x80>
  807bdc:	823ffe17 	ldw	r8,-8(r16)
  807be0:	22400204 	addi	r9,r4,8
  807be4:	320dc83a 	sub	r6,r6,r8
  807be8:	31c00217 	ldw	r7,8(r6)
  807bec:	1205883a 	add	r2,r2,r8
  807bf0:	3a406526 	beq	r7,r9,807d88 <_free_r+0x208>
  807bf4:	32000317 	ldw	r8,12(r6)
  807bf8:	3a000315 	stw	r8,12(r7)
  807bfc:	41c00215 	stw	r7,8(r8)
  807c00:	28cf883a 	add	r7,r5,r3
  807c04:	39c00117 	ldw	r7,4(r7)
  807c08:	39c0004c 	andi	r7,r7,1
  807c0c:	38003a26 	beq	r7,zero,807cf8 <_free_r+0x178>
  807c10:	10c00054 	ori	r3,r2,1
  807c14:	30c00115 	stw	r3,4(r6)
  807c18:	3087883a 	add	r3,r6,r2
  807c1c:	18800015 	stw	r2,0(r3)
  807c20:	00c07fc4 	movi	r3,511
  807c24:	18801936 	bltu	r3,r2,807c8c <_free_r+0x10c>
  807c28:	1004d0fa 	srli	r2,r2,3
  807c2c:	01c00044 	movi	r7,1
  807c30:	21400117 	ldw	r5,4(r4)
  807c34:	10c00044 	addi	r3,r2,1
  807c38:	18c7883a 	add	r3,r3,r3
  807c3c:	1005d0ba 	srai	r2,r2,2
  807c40:	18c7883a 	add	r3,r3,r3
  807c44:	18c7883a 	add	r3,r3,r3
  807c48:	1907883a 	add	r3,r3,r4
  807c4c:	3884983a 	sll	r2,r7,r2
  807c50:	19c00017 	ldw	r7,0(r3)
  807c54:	1a3ffe04 	addi	r8,r3,-8
  807c58:	1144b03a 	or	r2,r2,r5
  807c5c:	32000315 	stw	r8,12(r6)
  807c60:	31c00215 	stw	r7,8(r6)
  807c64:	20800115 	stw	r2,4(r4)
  807c68:	19800015 	stw	r6,0(r3)
  807c6c:	39800315 	stw	r6,12(r7)
  807c70:	8809883a 	mov	r4,r17
  807c74:	dfc00217 	ldw	ra,8(sp)
  807c78:	dc400117 	ldw	r17,4(sp)
  807c7c:	dc000017 	ldw	r16,0(sp)
  807c80:	dec00304 	addi	sp,sp,12
  807c84:	08138401 	jmpi	813840 <__malloc_unlock>
  807c88:	f800283a 	ret
  807c8c:	100ad27a 	srli	r5,r2,9
  807c90:	00c00104 	movi	r3,4
  807c94:	19404a36 	bltu	r3,r5,807dc0 <_free_r+0x240>
  807c98:	100ad1ba 	srli	r5,r2,6
  807c9c:	28c00e44 	addi	r3,r5,57
  807ca0:	18c7883a 	add	r3,r3,r3
  807ca4:	29400e04 	addi	r5,r5,56
  807ca8:	18c7883a 	add	r3,r3,r3
  807cac:	18c7883a 	add	r3,r3,r3
  807cb0:	1909883a 	add	r4,r3,r4
  807cb4:	20c00017 	ldw	r3,0(r4)
  807cb8:	01c02074 	movhi	r7,129
  807cbc:	213ffe04 	addi	r4,r4,-8
  807cc0:	39df4204 	addi	r7,r7,32008
  807cc4:	20c04426 	beq	r4,r3,807dd8 <_free_r+0x258>
  807cc8:	01ffff04 	movi	r7,-4
  807ccc:	19400117 	ldw	r5,4(r3)
  807cd0:	29ca703a 	and	r5,r5,r7
  807cd4:	1140022e 	bgeu	r2,r5,807ce0 <_free_r+0x160>
  807cd8:	18c00217 	ldw	r3,8(r3)
  807cdc:	20fffb1e 	bne	r4,r3,807ccc <__alt_mem_onchip_mem+0xff7ffccc>
  807ce0:	19000317 	ldw	r4,12(r3)
  807ce4:	31000315 	stw	r4,12(r6)
  807ce8:	30c00215 	stw	r3,8(r6)
  807cec:	21800215 	stw	r6,8(r4)
  807cf0:	19800315 	stw	r6,12(r3)
  807cf4:	003fde06 	br	807c70 <__alt_mem_onchip_mem+0xff7ffc70>
  807cf8:	29c00217 	ldw	r7,8(r5)
  807cfc:	10c5883a 	add	r2,r2,r3
  807d00:	00c02074 	movhi	r3,129
  807d04:	18df4404 	addi	r3,r3,32016
  807d08:	38c03b26 	beq	r7,r3,807df8 <_free_r+0x278>
  807d0c:	2a000317 	ldw	r8,12(r5)
  807d10:	11400054 	ori	r5,r2,1
  807d14:	3087883a 	add	r3,r6,r2
  807d18:	3a000315 	stw	r8,12(r7)
  807d1c:	41c00215 	stw	r7,8(r8)
  807d20:	31400115 	stw	r5,4(r6)
  807d24:	18800015 	stw	r2,0(r3)
  807d28:	003fbd06 	br	807c20 <__alt_mem_onchip_mem+0xff7ffc20>
  807d2c:	39c0004c 	andi	r7,r7,1
  807d30:	10c5883a 	add	r2,r2,r3
  807d34:	3800071e 	bne	r7,zero,807d54 <_free_r+0x1d4>
  807d38:	81fffe17 	ldw	r7,-8(r16)
  807d3c:	31cdc83a 	sub	r6,r6,r7
  807d40:	30c00317 	ldw	r3,12(r6)
  807d44:	31400217 	ldw	r5,8(r6)
  807d48:	11c5883a 	add	r2,r2,r7
  807d4c:	28c00315 	stw	r3,12(r5)
  807d50:	19400215 	stw	r5,8(r3)
  807d54:	10c00054 	ori	r3,r2,1
  807d58:	30c00115 	stw	r3,4(r6)
  807d5c:	00c020b4 	movhi	r3,130
  807d60:	18e56804 	addi	r3,r3,-27232
  807d64:	18c00017 	ldw	r3,0(r3)
  807d68:	21800215 	stw	r6,8(r4)
  807d6c:	10ffc036 	bltu	r2,r3,807c70 <__alt_mem_onchip_mem+0xff7ffc70>
  807d70:	008020b4 	movhi	r2,130
  807d74:	10acd404 	addi	r2,r2,-19632
  807d78:	11400017 	ldw	r5,0(r2)
  807d7c:	8809883a 	mov	r4,r17
  807d80:	0807a5c0 	call	807a5c <_malloc_trim_r>
  807d84:	003fba06 	br	807c70 <__alt_mem_onchip_mem+0xff7ffc70>
  807d88:	28c9883a 	add	r4,r5,r3
  807d8c:	21000117 	ldw	r4,4(r4)
  807d90:	2100004c 	andi	r4,r4,1
  807d94:	2000391e 	bne	r4,zero,807e7c <_free_r+0x2fc>
  807d98:	29c00217 	ldw	r7,8(r5)
  807d9c:	29000317 	ldw	r4,12(r5)
  807da0:	1885883a 	add	r2,r3,r2
  807da4:	10c00054 	ori	r3,r2,1
  807da8:	39000315 	stw	r4,12(r7)
  807dac:	21c00215 	stw	r7,8(r4)
  807db0:	30c00115 	stw	r3,4(r6)
  807db4:	308d883a 	add	r6,r6,r2
  807db8:	30800015 	stw	r2,0(r6)
  807dbc:	003fac06 	br	807c70 <__alt_mem_onchip_mem+0xff7ffc70>
  807dc0:	00c00504 	movi	r3,20
  807dc4:	19401536 	bltu	r3,r5,807e1c <_free_r+0x29c>
  807dc8:	28c01704 	addi	r3,r5,92
  807dcc:	18c7883a 	add	r3,r3,r3
  807dd0:	294016c4 	addi	r5,r5,91
  807dd4:	003fb406 	br	807ca8 <__alt_mem_onchip_mem+0xff7ffca8>
  807dd8:	280bd0ba 	srai	r5,r5,2
  807ddc:	00c00044 	movi	r3,1
  807de0:	38800117 	ldw	r2,4(r7)
  807de4:	194a983a 	sll	r5,r3,r5
  807de8:	2007883a 	mov	r3,r4
  807dec:	2884b03a 	or	r2,r5,r2
  807df0:	38800115 	stw	r2,4(r7)
  807df4:	003fbb06 	br	807ce4 <__alt_mem_onchip_mem+0xff7ffce4>
  807df8:	21800515 	stw	r6,20(r4)
  807dfc:	21800415 	stw	r6,16(r4)
  807e00:	10c00054 	ori	r3,r2,1
  807e04:	31c00315 	stw	r7,12(r6)
  807e08:	31c00215 	stw	r7,8(r6)
  807e0c:	30c00115 	stw	r3,4(r6)
  807e10:	308d883a 	add	r6,r6,r2
  807e14:	30800015 	stw	r2,0(r6)
  807e18:	003f9506 	br	807c70 <__alt_mem_onchip_mem+0xff7ffc70>
  807e1c:	00c01504 	movi	r3,84
  807e20:	19400536 	bltu	r3,r5,807e38 <_free_r+0x2b8>
  807e24:	100ad33a 	srli	r5,r2,12
  807e28:	28c01bc4 	addi	r3,r5,111
  807e2c:	18c7883a 	add	r3,r3,r3
  807e30:	29401b84 	addi	r5,r5,110
  807e34:	003f9c06 	br	807ca8 <__alt_mem_onchip_mem+0xff7ffca8>
  807e38:	00c05504 	movi	r3,340
  807e3c:	19400536 	bltu	r3,r5,807e54 <_free_r+0x2d4>
  807e40:	100ad3fa 	srli	r5,r2,15
  807e44:	28c01e04 	addi	r3,r5,120
  807e48:	18c7883a 	add	r3,r3,r3
  807e4c:	29401dc4 	addi	r5,r5,119
  807e50:	003f9506 	br	807ca8 <__alt_mem_onchip_mem+0xff7ffca8>
  807e54:	00c15504 	movi	r3,1364
  807e58:	19400536 	bltu	r3,r5,807e70 <_free_r+0x2f0>
  807e5c:	100ad4ba 	srli	r5,r2,18
  807e60:	28c01f44 	addi	r3,r5,125
  807e64:	18c7883a 	add	r3,r3,r3
  807e68:	29401f04 	addi	r5,r5,124
  807e6c:	003f8e06 	br	807ca8 <__alt_mem_onchip_mem+0xff7ffca8>
  807e70:	00c03f84 	movi	r3,254
  807e74:	01401f84 	movi	r5,126
  807e78:	003f8b06 	br	807ca8 <__alt_mem_onchip_mem+0xff7ffca8>
  807e7c:	10c00054 	ori	r3,r2,1
  807e80:	30c00115 	stw	r3,4(r6)
  807e84:	308d883a 	add	r6,r6,r2
  807e88:	30800015 	stw	r2,0(r6)
  807e8c:	003f7806 	br	807c70 <__alt_mem_onchip_mem+0xff7ffc70>

00807e90 <_fseek_r>:
  807e90:	0807eb01 	jmpi	807eb0 <_fseeko_r>

00807e94 <fseek>:
  807e94:	008020b4 	movhi	r2,130
  807e98:	10a56604 	addi	r2,r2,-27240
  807e9c:	300f883a 	mov	r7,r6
  807ea0:	280d883a 	mov	r6,r5
  807ea4:	200b883a 	mov	r5,r4
  807ea8:	11000017 	ldw	r4,0(r2)
  807eac:	0807eb01 	jmpi	807eb0 <_fseeko_r>

00807eb0 <_fseeko_r>:
  807eb0:	deffe804 	addi	sp,sp,-96
  807eb4:	dd401415 	stw	r21,80(sp)
  807eb8:	dc801115 	stw	r18,68(sp)
  807ebc:	dc401015 	stw	r17,64(sp)
  807ec0:	dc000f15 	stw	r16,60(sp)
  807ec4:	dfc01715 	stw	ra,92(sp)
  807ec8:	ddc01615 	stw	r23,88(sp)
  807ecc:	dd801515 	stw	r22,84(sp)
  807ed0:	dd001315 	stw	r20,76(sp)
  807ed4:	dcc01215 	stw	r19,72(sp)
  807ed8:	2023883a 	mov	r17,r4
  807edc:	2821883a 	mov	r16,r5
  807ee0:	302b883a 	mov	r21,r6
  807ee4:	3825883a 	mov	r18,r7
  807ee8:	20000226 	beq	r4,zero,807ef4 <_fseeko_r+0x44>
  807eec:	20800e17 	ldw	r2,56(r4)
  807ef0:	10005a26 	beq	r2,zero,80805c <_fseeko_r+0x1ac>
  807ef4:	8080030b 	ldhu	r2,12(r16)
  807ef8:	00c04204 	movi	r3,264
  807efc:	1080420c 	andi	r2,r2,264
  807f00:	10c05b26 	beq	r2,r3,808070 <_fseeko_r+0x1c0>
  807f04:	85000a17 	ldw	r20,40(r16)
  807f08:	a000f626 	beq	r20,zero,8082e4 <_fseeko_r+0x434>
  807f0c:	00800044 	movi	r2,1
  807f10:	90803e26 	beq	r18,r2,80800c <_fseeko_r+0x15c>
  807f14:	00800084 	movi	r2,2
  807f18:	90801026 	beq	r18,r2,807f5c <_fseeko_r+0xac>
  807f1c:	90000f26 	beq	r18,zero,807f5c <_fseeko_r+0xac>
  807f20:	00800584 	movi	r2,22
  807f24:	88800015 	stw	r2,0(r17)
  807f28:	04ffffc4 	movi	r19,-1
  807f2c:	9805883a 	mov	r2,r19
  807f30:	dfc01717 	ldw	ra,92(sp)
  807f34:	ddc01617 	ldw	r23,88(sp)
  807f38:	dd801517 	ldw	r22,84(sp)
  807f3c:	dd401417 	ldw	r21,80(sp)
  807f40:	dd001317 	ldw	r20,76(sp)
  807f44:	dcc01217 	ldw	r19,72(sp)
  807f48:	dc801117 	ldw	r18,68(sp)
  807f4c:	dc401017 	ldw	r17,64(sp)
  807f50:	dc000f17 	ldw	r16,60(sp)
  807f54:	dec01804 	addi	sp,sp,96
  807f58:	f800283a 	ret
  807f5c:	80800417 	ldw	r2,16(r16)
  807f60:	002f883a 	mov	r23,zero
  807f64:	0027883a 	mov	r19,zero
  807f68:	1000cb26 	beq	r2,zero,808298 <_fseeko_r+0x3e8>
  807f6c:	8080030b 	ldhu	r2,12(r16)
  807f70:	10c2068c 	andi	r3,r2,2074
  807f74:	1800071e 	bne	r3,zero,807f94 <_fseeko_r+0xe4>
  807f78:	10c1000c 	andi	r3,r2,1024
  807f7c:	1800451e 	bne	r3,zero,808094 <_fseeko_r+0x1e4>
  807f80:	00c02074 	movhi	r3,129
  807f84:	18e56704 	addi	r3,r3,-27236
  807f88:	a0c0b726 	beq	r20,r3,808268 <_fseeko_r+0x3b8>
  807f8c:	10820014 	ori	r2,r2,2048
  807f90:	8080030d 	sth	r2,12(r16)
  807f94:	800b883a 	mov	r5,r16
  807f98:	8809883a 	mov	r4,r17
  807f9c:	08074380 	call	807438 <_fflush_r>
  807fa0:	1027883a 	mov	r19,r2
  807fa4:	103fe01e 	bne	r2,zero,807f28 <__alt_mem_onchip_mem+0xff7fff28>
  807fa8:	81400717 	ldw	r5,28(r16)
  807fac:	900f883a 	mov	r7,r18
  807fb0:	a80d883a 	mov	r6,r21
  807fb4:	8809883a 	mov	r4,r17
  807fb8:	a03ee83a 	callr	r20
  807fbc:	00ffffc4 	movi	r3,-1
  807fc0:	10ffd926 	beq	r2,r3,807f28 <__alt_mem_onchip_mem+0xff7fff28>
  807fc4:	81400c17 	ldw	r5,48(r16)
  807fc8:	28000526 	beq	r5,zero,807fe0 <_fseeko_r+0x130>
  807fcc:	80801004 	addi	r2,r16,64
  807fd0:	28800226 	beq	r5,r2,807fdc <_fseeko_r+0x12c>
  807fd4:	8809883a 	mov	r4,r17
  807fd8:	0807b800 	call	807b80 <_free_r>
  807fdc:	80000c15 	stw	zero,48(r16)
  807fe0:	8080030b 	ldhu	r2,12(r16)
  807fe4:	80c00417 	ldw	r3,16(r16)
  807fe8:	80000115 	stw	zero,4(r16)
  807fec:	10bdf7cc 	andi	r2,r2,63455
  807ff0:	80c00015 	stw	r3,0(r16)
  807ff4:	8080030d 	sth	r2,12(r16)
  807ff8:	01800204 	movi	r6,8
  807ffc:	000b883a 	mov	r5,zero
  808000:	81001704 	addi	r4,r16,92
  808004:	0808ebc0 	call	808ebc <memset>
  808008:	003fc806 	br	807f2c <__alt_mem_onchip_mem+0xff7fff2c>
  80800c:	800b883a 	mov	r5,r16
  808010:	8809883a 	mov	r4,r17
  808014:	08074380 	call	807438 <_fflush_r>
  808018:	8080030b 	ldhu	r2,12(r16)
  80801c:	10c4000c 	andi	r3,r2,4096
  808020:	18008726 	beq	r3,zero,808240 <_fseeko_r+0x390>
  808024:	84c01417 	ldw	r19,80(r16)
  808028:	10c0010c 	andi	r3,r2,4
  80802c:	1800431e 	bne	r3,zero,80813c <_fseeko_r+0x28c>
  808030:	1080020c 	andi	r2,r2,8
  808034:	10008026 	beq	r2,zero,808238 <_fseeko_r+0x388>
  808038:	80c00017 	ldw	r3,0(r16)
  80803c:	80800417 	ldw	r2,16(r16)
  808040:	18000226 	beq	r3,zero,80804c <_fseeko_r+0x19c>
  808044:	1887c83a 	sub	r3,r3,r2
  808048:	98e7883a 	add	r19,r19,r3
  80804c:	aceb883a 	add	r21,r21,r19
  808050:	05c00044 	movi	r23,1
  808054:	0025883a 	mov	r18,zero
  808058:	003fc306 	br	807f68 <__alt_mem_onchip_mem+0xff7fff68>
  80805c:	08078140 	call	807814 <__sinit>
  808060:	8080030b 	ldhu	r2,12(r16)
  808064:	00c04204 	movi	r3,264
  808068:	1080420c 	andi	r2,r2,264
  80806c:	10ffa51e 	bne	r2,r3,807f04 <__alt_mem_onchip_mem+0xff7fff04>
  808070:	800b883a 	mov	r5,r16
  808074:	8809883a 	mov	r4,r17
  808078:	08074380 	call	807438 <_fflush_r>
  80807c:	003fa106 	br	807f04 <__alt_mem_onchip_mem+0xff7fff04>
  808080:	8080030b 	ldhu	r2,12(r16)
  808084:	00c10004 	movi	r3,1024
  808088:	80c01315 	stw	r3,76(r16)
  80808c:	10c4b03a 	or	r2,r2,r3
  808090:	8080030d 	sth	r2,12(r16)
  808094:	9000311e 	bne	r18,zero,80815c <_fseeko_r+0x2ac>
  808098:	a82d883a 	mov	r22,r21
  80809c:	b800371e 	bne	r23,zero,80817c <_fseeko_r+0x2cc>
  8080a0:	8080030b 	ldhu	r2,12(r16)
  8080a4:	1084000c 	andi	r2,r2,4096
  8080a8:	10007f26 	beq	r2,zero,8082a8 <_fseeko_r+0x3f8>
  8080ac:	80801417 	ldw	r2,80(r16)
  8080b0:	81800117 	ldw	r6,4(r16)
  8080b4:	81400c17 	ldw	r5,48(r16)
  8080b8:	11a7c83a 	sub	r19,r2,r6
  8080bc:	28008226 	beq	r5,zero,8082c8 <_fseeko_r+0x418>
  8080c0:	81c00f17 	ldw	r7,60(r16)
  8080c4:	99e7c83a 	sub	r19,r19,r7
  8080c8:	81000e17 	ldw	r4,56(r16)
  8080cc:	80800417 	ldw	r2,16(r16)
  8080d0:	99a7883a 	add	r19,r19,r6
  8080d4:	2087c83a 	sub	r3,r4,r2
  8080d8:	98e7c83a 	sub	r19,r19,r3
  8080dc:	38c7883a 	add	r3,r7,r3
  8080e0:	b4c02b16 	blt	r22,r19,808190 <_fseeko_r+0x2e0>
  8080e4:	98c9883a 	add	r4,r19,r3
  8080e8:	b100292e 	bgeu	r22,r4,808190 <_fseeko_r+0x2e0>
  8080ec:	b4e7c83a 	sub	r19,r22,r19
  8080f0:	14c5883a 	add	r2,r2,r19
  8080f4:	1ce7c83a 	sub	r19,r3,r19
  8080f8:	80800015 	stw	r2,0(r16)
  8080fc:	84c00115 	stw	r19,4(r16)
  808100:	28000526 	beq	r5,zero,808118 <_fseeko_r+0x268>
  808104:	80801004 	addi	r2,r16,64
  808108:	28800226 	beq	r5,r2,808114 <_fseeko_r+0x264>
  80810c:	8809883a 	mov	r4,r17
  808110:	0807b800 	call	807b80 <_free_r>
  808114:	80000c15 	stw	zero,48(r16)
  808118:	8080030b 	ldhu	r2,12(r16)
  80811c:	01800204 	movi	r6,8
  808120:	000b883a 	mov	r5,zero
  808124:	10bff7cc 	andi	r2,r2,65503
  808128:	8080030d 	sth	r2,12(r16)
  80812c:	81001704 	addi	r4,r16,92
  808130:	0808ebc0 	call	808ebc <memset>
  808134:	0027883a 	mov	r19,zero
  808138:	003f7c06 	br	807f2c <__alt_mem_onchip_mem+0xff7fff2c>
  80813c:	80c00117 	ldw	r3,4(r16)
  808140:	80800c17 	ldw	r2,48(r16)
  808144:	98e7c83a 	sub	r19,r19,r3
  808148:	10003b26 	beq	r2,zero,808238 <_fseeko_r+0x388>
  80814c:	80c00f17 	ldw	r3,60(r16)
  808150:	80800417 	ldw	r2,16(r16)
  808154:	98e7c83a 	sub	r19,r19,r3
  808158:	003fbc06 	br	80804c <__alt_mem_onchip_mem+0xff80004c>
  80815c:	8140038f 	ldh	r5,14(r16)
  808160:	d80d883a 	mov	r6,sp
  808164:	8809883a 	mov	r4,r17
  808168:	08083100 	call	808310 <_fstat_r>
  80816c:	103f891e 	bne	r2,zero,807f94 <__alt_mem_onchip_mem+0xff7fff94>
  808170:	dd800417 	ldw	r22,16(sp)
  808174:	adad883a 	add	r22,r21,r22
  808178:	b83fc926 	beq	r23,zero,8080a0 <__alt_mem_onchip_mem+0xff8000a0>
  80817c:	81400c17 	ldw	r5,48(r16)
  808180:	81800117 	ldw	r6,4(r16)
  808184:	28005026 	beq	r5,zero,8082c8 <_fseeko_r+0x418>
  808188:	81c00f17 	ldw	r7,60(r16)
  80818c:	003fce06 	br	8080c8 <__alt_mem_onchip_mem+0xff8000c8>
  808190:	84c01317 	ldw	r19,76(r16)
  808194:	81400717 	ldw	r5,28(r16)
  808198:	000f883a 	mov	r7,zero
  80819c:	04e7c83a 	sub	r19,zero,r19
  8081a0:	9da6703a 	and	r19,r19,r22
  8081a4:	980d883a 	mov	r6,r19
  8081a8:	8809883a 	mov	r4,r17
  8081ac:	a03ee83a 	callr	r20
  8081b0:	00ffffc4 	movi	r3,-1
  8081b4:	10ff7726 	beq	r2,r3,807f94 <__alt_mem_onchip_mem+0xff7fff94>
  8081b8:	80800417 	ldw	r2,16(r16)
  8081bc:	81400c17 	ldw	r5,48(r16)
  8081c0:	80000115 	stw	zero,4(r16)
  8081c4:	80800015 	stw	r2,0(r16)
  8081c8:	28000526 	beq	r5,zero,8081e0 <_fseeko_r+0x330>
  8081cc:	80801004 	addi	r2,r16,64
  8081d0:	28800226 	beq	r5,r2,8081dc <_fseeko_r+0x32c>
  8081d4:	8809883a 	mov	r4,r17
  8081d8:	0807b800 	call	807b80 <_free_r>
  8081dc:	80000c15 	stw	zero,48(r16)
  8081e0:	8080030b 	ldhu	r2,12(r16)
  8081e4:	b4e7c83a 	sub	r19,r22,r19
  8081e8:	10bff7cc 	andi	r2,r2,65503
  8081ec:	8080030d 	sth	r2,12(r16)
  8081f0:	98000b26 	beq	r19,zero,808220 <_fseeko_r+0x370>
  8081f4:	800b883a 	mov	r5,r16
  8081f8:	8809883a 	mov	r4,r17
  8081fc:	080929c0 	call	80929c <__srefill_r>
  808200:	103f641e 	bne	r2,zero,807f94 <__alt_mem_onchip_mem+0xff7fff94>
  808204:	80800117 	ldw	r2,4(r16)
  808208:	14ff6236 	bltu	r2,r19,807f94 <__alt_mem_onchip_mem+0xff7fff94>
  80820c:	80c00017 	ldw	r3,0(r16)
  808210:	14c5c83a 	sub	r2,r2,r19
  808214:	80800115 	stw	r2,4(r16)
  808218:	1ce7883a 	add	r19,r3,r19
  80821c:	84c00015 	stw	r19,0(r16)
  808220:	01800204 	movi	r6,8
  808224:	000b883a 	mov	r5,zero
  808228:	81001704 	addi	r4,r16,92
  80822c:	0808ebc0 	call	808ebc <memset>
  808230:	0027883a 	mov	r19,zero
  808234:	003f3d06 	br	807f2c <__alt_mem_onchip_mem+0xff7fff2c>
  808238:	80800417 	ldw	r2,16(r16)
  80823c:	003f8306 	br	80804c <__alt_mem_onchip_mem+0xff80004c>
  808240:	81400717 	ldw	r5,28(r16)
  808244:	900f883a 	mov	r7,r18
  808248:	000d883a 	mov	r6,zero
  80824c:	8809883a 	mov	r4,r17
  808250:	a03ee83a 	callr	r20
  808254:	1027883a 	mov	r19,r2
  808258:	00bfffc4 	movi	r2,-1
  80825c:	98bf3226 	beq	r19,r2,807f28 <__alt_mem_onchip_mem+0xff7fff28>
  808260:	8080030b 	ldhu	r2,12(r16)
  808264:	003f7006 	br	808028 <__alt_mem_onchip_mem+0xff800028>
  808268:	8140038f 	ldh	r5,14(r16)
  80826c:	283f4716 	blt	r5,zero,807f8c <__alt_mem_onchip_mem+0xff7fff8c>
  808270:	d80d883a 	mov	r6,sp
  808274:	8809883a 	mov	r4,r17
  808278:	08083100 	call	808310 <_fstat_r>
  80827c:	1000041e 	bne	r2,zero,808290 <_fseeko_r+0x3e0>
  808280:	d8800117 	ldw	r2,4(sp)
  808284:	00e00014 	movui	r3,32768
  808288:	10bc000c 	andi	r2,r2,61440
  80828c:	10ff7c26 	beq	r2,r3,808080 <__alt_mem_onchip_mem+0xff800080>
  808290:	8080030b 	ldhu	r2,12(r16)
  808294:	003f3d06 	br	807f8c <__alt_mem_onchip_mem+0xff7fff8c>
  808298:	800b883a 	mov	r5,r16
  80829c:	8809883a 	mov	r4,r17
  8082a0:	08084f40 	call	8084f4 <__smakebuf_r>
  8082a4:	003f3106 	br	807f6c <__alt_mem_onchip_mem+0xff7fff6c>
  8082a8:	81400717 	ldw	r5,28(r16)
  8082ac:	01c00044 	movi	r7,1
  8082b0:	000d883a 	mov	r6,zero
  8082b4:	8809883a 	mov	r4,r17
  8082b8:	a03ee83a 	callr	r20
  8082bc:	00ffffc4 	movi	r3,-1
  8082c0:	10ff7b1e 	bne	r2,r3,8080b0 <__alt_mem_onchip_mem+0xff8000b0>
  8082c4:	003f3306 	br	807f94 <__alt_mem_onchip_mem+0xff7fff94>
  8082c8:	80c00017 	ldw	r3,0(r16)
  8082cc:	80800417 	ldw	r2,16(r16)
  8082d0:	000b883a 	mov	r5,zero
  8082d4:	1887c83a 	sub	r3,r3,r2
  8082d8:	98e7c83a 	sub	r19,r19,r3
  8082dc:	30c7883a 	add	r3,r6,r3
  8082e0:	003f7f06 	br	8080e0 <__alt_mem_onchip_mem+0xff8000e0>
  8082e4:	00800744 	movi	r2,29
  8082e8:	88800015 	stw	r2,0(r17)
  8082ec:	04ffffc4 	movi	r19,-1
  8082f0:	003f0e06 	br	807f2c <__alt_mem_onchip_mem+0xff7fff2c>

008082f4 <fseeko>:
  8082f4:	008020b4 	movhi	r2,130
  8082f8:	10a56604 	addi	r2,r2,-27240
  8082fc:	300f883a 	mov	r7,r6
  808300:	280d883a 	mov	r6,r5
  808304:	200b883a 	mov	r5,r4
  808308:	11000017 	ldw	r4,0(r2)
  80830c:	0807eb01 	jmpi	807eb0 <_fseeko_r>

00808310 <_fstat_r>:
  808310:	defffd04 	addi	sp,sp,-12
  808314:	2805883a 	mov	r2,r5
  808318:	dc000015 	stw	r16,0(sp)
  80831c:	040020b4 	movhi	r16,130
  808320:	dc400115 	stw	r17,4(sp)
  808324:	842cd104 	addi	r16,r16,-19644
  808328:	2023883a 	mov	r17,r4
  80832c:	300b883a 	mov	r5,r6
  808330:	1009883a 	mov	r4,r2
  808334:	dfc00215 	stw	ra,8(sp)
  808338:	80000015 	stw	zero,0(r16)
  80833c:	08132940 	call	813294 <fstat>
  808340:	00ffffc4 	movi	r3,-1
  808344:	10c00526 	beq	r2,r3,80835c <_fstat_r+0x4c>
  808348:	dfc00217 	ldw	ra,8(sp)
  80834c:	dc400117 	ldw	r17,4(sp)
  808350:	dc000017 	ldw	r16,0(sp)
  808354:	dec00304 	addi	sp,sp,12
  808358:	f800283a 	ret
  80835c:	80c00017 	ldw	r3,0(r16)
  808360:	183ff926 	beq	r3,zero,808348 <__alt_mem_onchip_mem+0xff800348>
  808364:	88c00015 	stw	r3,0(r17)
  808368:	003ff706 	br	808348 <__alt_mem_onchip_mem+0xff800348>

0080836c <_fwalk>:
  80836c:	defff704 	addi	sp,sp,-36
  808370:	dd000415 	stw	r20,16(sp)
  808374:	dfc00815 	stw	ra,32(sp)
  808378:	ddc00715 	stw	r23,28(sp)
  80837c:	dd800615 	stw	r22,24(sp)
  808380:	dd400515 	stw	r21,20(sp)
  808384:	dcc00315 	stw	r19,12(sp)
  808388:	dc800215 	stw	r18,8(sp)
  80838c:	dc400115 	stw	r17,4(sp)
  808390:	dc000015 	stw	r16,0(sp)
  808394:	2500b804 	addi	r20,r4,736
  808398:	a0002326 	beq	r20,zero,808428 <_fwalk+0xbc>
  80839c:	282b883a 	mov	r21,r5
  8083a0:	002f883a 	mov	r23,zero
  8083a4:	05800044 	movi	r22,1
  8083a8:	04ffffc4 	movi	r19,-1
  8083ac:	a4400117 	ldw	r17,4(r20)
  8083b0:	a4800217 	ldw	r18,8(r20)
  8083b4:	8c7fffc4 	addi	r17,r17,-1
  8083b8:	88000d16 	blt	r17,zero,8083f0 <_fwalk+0x84>
  8083bc:	94000304 	addi	r16,r18,12
  8083c0:	94800384 	addi	r18,r18,14
  8083c4:	8080000b 	ldhu	r2,0(r16)
  8083c8:	8c7fffc4 	addi	r17,r17,-1
  8083cc:	813ffd04 	addi	r4,r16,-12
  8083d0:	b080042e 	bgeu	r22,r2,8083e4 <_fwalk+0x78>
  8083d4:	9080000f 	ldh	r2,0(r18)
  8083d8:	14c00226 	beq	r2,r19,8083e4 <_fwalk+0x78>
  8083dc:	a83ee83a 	callr	r21
  8083e0:	b8aeb03a 	or	r23,r23,r2
  8083e4:	84001a04 	addi	r16,r16,104
  8083e8:	94801a04 	addi	r18,r18,104
  8083ec:	8cfff51e 	bne	r17,r19,8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  8083f0:	a5000017 	ldw	r20,0(r20)
  8083f4:	a03fed1e 	bne	r20,zero,8083ac <__alt_mem_onchip_mem+0xff8003ac>
  8083f8:	b805883a 	mov	r2,r23
  8083fc:	dfc00817 	ldw	ra,32(sp)
  808400:	ddc00717 	ldw	r23,28(sp)
  808404:	dd800617 	ldw	r22,24(sp)
  808408:	dd400517 	ldw	r21,20(sp)
  80840c:	dd000417 	ldw	r20,16(sp)
  808410:	dcc00317 	ldw	r19,12(sp)
  808414:	dc800217 	ldw	r18,8(sp)
  808418:	dc400117 	ldw	r17,4(sp)
  80841c:	dc000017 	ldw	r16,0(sp)
  808420:	dec00904 	addi	sp,sp,36
  808424:	f800283a 	ret
  808428:	002f883a 	mov	r23,zero
  80842c:	003ff206 	br	8083f8 <__alt_mem_onchip_mem+0xff8003f8>

00808430 <_fwalk_reent>:
  808430:	defff704 	addi	sp,sp,-36
  808434:	dd000415 	stw	r20,16(sp)
  808438:	dfc00815 	stw	ra,32(sp)
  80843c:	ddc00715 	stw	r23,28(sp)
  808440:	dd800615 	stw	r22,24(sp)
  808444:	dd400515 	stw	r21,20(sp)
  808448:	dcc00315 	stw	r19,12(sp)
  80844c:	dc800215 	stw	r18,8(sp)
  808450:	dc400115 	stw	r17,4(sp)
  808454:	dc000015 	stw	r16,0(sp)
  808458:	2500b804 	addi	r20,r4,736
  80845c:	a0002326 	beq	r20,zero,8084ec <_fwalk_reent+0xbc>
  808460:	282b883a 	mov	r21,r5
  808464:	2027883a 	mov	r19,r4
  808468:	002f883a 	mov	r23,zero
  80846c:	05800044 	movi	r22,1
  808470:	04bfffc4 	movi	r18,-1
  808474:	a4400117 	ldw	r17,4(r20)
  808478:	a4000217 	ldw	r16,8(r20)
  80847c:	8c7fffc4 	addi	r17,r17,-1
  808480:	88000c16 	blt	r17,zero,8084b4 <_fwalk_reent+0x84>
  808484:	84000304 	addi	r16,r16,12
  808488:	8080000b 	ldhu	r2,0(r16)
  80848c:	8c7fffc4 	addi	r17,r17,-1
  808490:	817ffd04 	addi	r5,r16,-12
  808494:	b080052e 	bgeu	r22,r2,8084ac <_fwalk_reent+0x7c>
  808498:	8080008f 	ldh	r2,2(r16)
  80849c:	9809883a 	mov	r4,r19
  8084a0:	14800226 	beq	r2,r18,8084ac <_fwalk_reent+0x7c>
  8084a4:	a83ee83a 	callr	r21
  8084a8:	b8aeb03a 	or	r23,r23,r2
  8084ac:	84001a04 	addi	r16,r16,104
  8084b0:	8cbff51e 	bne	r17,r18,808488 <__alt_mem_onchip_mem+0xff800488>
  8084b4:	a5000017 	ldw	r20,0(r20)
  8084b8:	a03fee1e 	bne	r20,zero,808474 <__alt_mem_onchip_mem+0xff800474>
  8084bc:	b805883a 	mov	r2,r23
  8084c0:	dfc00817 	ldw	ra,32(sp)
  8084c4:	ddc00717 	ldw	r23,28(sp)
  8084c8:	dd800617 	ldw	r22,24(sp)
  8084cc:	dd400517 	ldw	r21,20(sp)
  8084d0:	dd000417 	ldw	r20,16(sp)
  8084d4:	dcc00317 	ldw	r19,12(sp)
  8084d8:	dc800217 	ldw	r18,8(sp)
  8084dc:	dc400117 	ldw	r17,4(sp)
  8084e0:	dc000017 	ldw	r16,0(sp)
  8084e4:	dec00904 	addi	sp,sp,36
  8084e8:	f800283a 	ret
  8084ec:	002f883a 	mov	r23,zero
  8084f0:	003ff206 	br	8084bc <__alt_mem_onchip_mem+0xff8004bc>

008084f4 <__smakebuf_r>:
  8084f4:	2880030b 	ldhu	r2,12(r5)
  8084f8:	10c0008c 	andi	r3,r2,2
  8084fc:	1800411e 	bne	r3,zero,808604 <__smakebuf_r+0x110>
  808500:	deffec04 	addi	sp,sp,-80
  808504:	dc000f15 	stw	r16,60(sp)
  808508:	2821883a 	mov	r16,r5
  80850c:	2940038f 	ldh	r5,14(r5)
  808510:	dc401015 	stw	r17,64(sp)
  808514:	dfc01315 	stw	ra,76(sp)
  808518:	dcc01215 	stw	r19,72(sp)
  80851c:	dc801115 	stw	r18,68(sp)
  808520:	2023883a 	mov	r17,r4
  808524:	28001c16 	blt	r5,zero,808598 <__smakebuf_r+0xa4>
  808528:	d80d883a 	mov	r6,sp
  80852c:	08083100 	call	808310 <_fstat_r>
  808530:	10001816 	blt	r2,zero,808594 <__smakebuf_r+0xa0>
  808534:	d8800117 	ldw	r2,4(sp)
  808538:	00e00014 	movui	r3,32768
  80853c:	10bc000c 	andi	r2,r2,61440
  808540:	14c80020 	cmpeqi	r19,r2,8192
  808544:	10c03726 	beq	r2,r3,808624 <__smakebuf_r+0x130>
  808548:	80c0030b 	ldhu	r3,12(r16)
  80854c:	18c20014 	ori	r3,r3,2048
  808550:	80c0030d 	sth	r3,12(r16)
  808554:	00c80004 	movi	r3,8192
  808558:	10c0521e 	bne	r2,r3,8086a4 <__smakebuf_r+0x1b0>
  80855c:	8140038f 	ldh	r5,14(r16)
  808560:	8809883a 	mov	r4,r17
  808564:	080dabc0 	call	80dabc <_isatty_r>
  808568:	10004c26 	beq	r2,zero,80869c <__smakebuf_r+0x1a8>
  80856c:	8080030b 	ldhu	r2,12(r16)
  808570:	80c010c4 	addi	r3,r16,67
  808574:	80c00015 	stw	r3,0(r16)
  808578:	10800054 	ori	r2,r2,1
  80857c:	8080030d 	sth	r2,12(r16)
  808580:	00800044 	movi	r2,1
  808584:	80c00415 	stw	r3,16(r16)
  808588:	80800515 	stw	r2,20(r16)
  80858c:	04810004 	movi	r18,1024
  808590:	00000706 	br	8085b0 <__smakebuf_r+0xbc>
  808594:	8080030b 	ldhu	r2,12(r16)
  808598:	10c0200c 	andi	r3,r2,128
  80859c:	18001f1e 	bne	r3,zero,80861c <__smakebuf_r+0x128>
  8085a0:	04810004 	movi	r18,1024
  8085a4:	10820014 	ori	r2,r2,2048
  8085a8:	8080030d 	sth	r2,12(r16)
  8085ac:	0027883a 	mov	r19,zero
  8085b0:	900b883a 	mov	r5,r18
  8085b4:	8809883a 	mov	r4,r17
  8085b8:	08086b00 	call	8086b0 <_malloc_r>
  8085bc:	10002c26 	beq	r2,zero,808670 <__smakebuf_r+0x17c>
  8085c0:	80c0030b 	ldhu	r3,12(r16)
  8085c4:	01002034 	movhi	r4,128
  8085c8:	211d3304 	addi	r4,r4,29900
  8085cc:	89000f15 	stw	r4,60(r17)
  8085d0:	18c02014 	ori	r3,r3,128
  8085d4:	80c0030d 	sth	r3,12(r16)
  8085d8:	80800015 	stw	r2,0(r16)
  8085dc:	80800415 	stw	r2,16(r16)
  8085e0:	84800515 	stw	r18,20(r16)
  8085e4:	98001a1e 	bne	r19,zero,808650 <__smakebuf_r+0x15c>
  8085e8:	dfc01317 	ldw	ra,76(sp)
  8085ec:	dcc01217 	ldw	r19,72(sp)
  8085f0:	dc801117 	ldw	r18,68(sp)
  8085f4:	dc401017 	ldw	r17,64(sp)
  8085f8:	dc000f17 	ldw	r16,60(sp)
  8085fc:	dec01404 	addi	sp,sp,80
  808600:	f800283a 	ret
  808604:	288010c4 	addi	r2,r5,67
  808608:	28800015 	stw	r2,0(r5)
  80860c:	28800415 	stw	r2,16(r5)
  808610:	00800044 	movi	r2,1
  808614:	28800515 	stw	r2,20(r5)
  808618:	f800283a 	ret
  80861c:	04801004 	movi	r18,64
  808620:	003fe006 	br	8085a4 <__alt_mem_onchip_mem+0xff8005a4>
  808624:	81000a17 	ldw	r4,40(r16)
  808628:	00c02074 	movhi	r3,129
  80862c:	18e56704 	addi	r3,r3,-27236
  808630:	20ffc51e 	bne	r4,r3,808548 <__alt_mem_onchip_mem+0xff800548>
  808634:	8080030b 	ldhu	r2,12(r16)
  808638:	04810004 	movi	r18,1024
  80863c:	84801315 	stw	r18,76(r16)
  808640:	1484b03a 	or	r2,r2,r18
  808644:	8080030d 	sth	r2,12(r16)
  808648:	0027883a 	mov	r19,zero
  80864c:	003fd806 	br	8085b0 <__alt_mem_onchip_mem+0xff8005b0>
  808650:	8140038f 	ldh	r5,14(r16)
  808654:	8809883a 	mov	r4,r17
  808658:	080dabc0 	call	80dabc <_isatty_r>
  80865c:	103fe226 	beq	r2,zero,8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  808660:	8080030b 	ldhu	r2,12(r16)
  808664:	10800054 	ori	r2,r2,1
  808668:	8080030d 	sth	r2,12(r16)
  80866c:	003fde06 	br	8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  808670:	8080030b 	ldhu	r2,12(r16)
  808674:	10c0800c 	andi	r3,r2,512
  808678:	183fdb1e 	bne	r3,zero,8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  80867c:	10800094 	ori	r2,r2,2
  808680:	80c010c4 	addi	r3,r16,67
  808684:	8080030d 	sth	r2,12(r16)
  808688:	00800044 	movi	r2,1
  80868c:	80c00015 	stw	r3,0(r16)
  808690:	80c00415 	stw	r3,16(r16)
  808694:	80800515 	stw	r2,20(r16)
  808698:	003fd306 	br	8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  80869c:	04810004 	movi	r18,1024
  8086a0:	003fc306 	br	8085b0 <__alt_mem_onchip_mem+0xff8005b0>
  8086a4:	0027883a 	mov	r19,zero
  8086a8:	04810004 	movi	r18,1024
  8086ac:	003fc006 	br	8085b0 <__alt_mem_onchip_mem+0xff8005b0>

008086b0 <_malloc_r>:
  8086b0:	defff504 	addi	sp,sp,-44
  8086b4:	dc800315 	stw	r18,12(sp)
  8086b8:	dfc00a15 	stw	ra,40(sp)
  8086bc:	df000915 	stw	fp,36(sp)
  8086c0:	ddc00815 	stw	r23,32(sp)
  8086c4:	dd800715 	stw	r22,28(sp)
  8086c8:	dd400615 	stw	r21,24(sp)
  8086cc:	dd000515 	stw	r20,20(sp)
  8086d0:	dcc00415 	stw	r19,16(sp)
  8086d4:	dc400215 	stw	r17,8(sp)
  8086d8:	dc000115 	stw	r16,4(sp)
  8086dc:	288002c4 	addi	r2,r5,11
  8086e0:	00c00584 	movi	r3,22
  8086e4:	2025883a 	mov	r18,r4
  8086e8:	18807f2e 	bgeu	r3,r2,8088e8 <_malloc_r+0x238>
  8086ec:	047ffe04 	movi	r17,-8
  8086f0:	1462703a 	and	r17,r2,r17
  8086f4:	8800a316 	blt	r17,zero,808984 <_malloc_r+0x2d4>
  8086f8:	8940a236 	bltu	r17,r5,808984 <_malloc_r+0x2d4>
  8086fc:	081381c0 	call	81381c <__malloc_lock>
  808700:	00807dc4 	movi	r2,503
  808704:	1441e92e 	bgeu	r2,r17,808eac <_malloc_r+0x7fc>
  808708:	8804d27a 	srli	r2,r17,9
  80870c:	1000a126 	beq	r2,zero,808994 <_malloc_r+0x2e4>
  808710:	00c00104 	movi	r3,4
  808714:	18811e36 	bltu	r3,r2,808b90 <_malloc_r+0x4e0>
  808718:	8804d1ba 	srli	r2,r17,6
  80871c:	12000e44 	addi	r8,r2,57
  808720:	11c00e04 	addi	r7,r2,56
  808724:	4209883a 	add	r4,r8,r8
  808728:	04c02074 	movhi	r19,129
  80872c:	2109883a 	add	r4,r4,r4
  808730:	9cdf4204 	addi	r19,r19,32008
  808734:	2109883a 	add	r4,r4,r4
  808738:	9909883a 	add	r4,r19,r4
  80873c:	24000117 	ldw	r16,4(r4)
  808740:	213ffe04 	addi	r4,r4,-8
  808744:	24009726 	beq	r4,r16,8089a4 <_malloc_r+0x2f4>
  808748:	80800117 	ldw	r2,4(r16)
  80874c:	01bfff04 	movi	r6,-4
  808750:	014003c4 	movi	r5,15
  808754:	1184703a 	and	r2,r2,r6
  808758:	1447c83a 	sub	r3,r2,r17
  80875c:	28c00716 	blt	r5,r3,80877c <_malloc_r+0xcc>
  808760:	1800920e 	bge	r3,zero,8089ac <_malloc_r+0x2fc>
  808764:	84000317 	ldw	r16,12(r16)
  808768:	24008e26 	beq	r4,r16,8089a4 <_malloc_r+0x2f4>
  80876c:	80800117 	ldw	r2,4(r16)
  808770:	1184703a 	and	r2,r2,r6
  808774:	1447c83a 	sub	r3,r2,r17
  808778:	28fff90e 	bge	r5,r3,808760 <__alt_mem_onchip_mem+0xff800760>
  80877c:	3809883a 	mov	r4,r7
  808780:	01802074 	movhi	r6,129
  808784:	9c000417 	ldw	r16,16(r19)
  808788:	319f4204 	addi	r6,r6,32008
  80878c:	32000204 	addi	r8,r6,8
  808790:	82013426 	beq	r16,r8,808c64 <_malloc_r+0x5b4>
  808794:	80c00117 	ldw	r3,4(r16)
  808798:	00bfff04 	movi	r2,-4
  80879c:	188e703a 	and	r7,r3,r2
  8087a0:	3c45c83a 	sub	r2,r7,r17
  8087a4:	00c003c4 	movi	r3,15
  8087a8:	18811f16 	blt	r3,r2,808c28 <_malloc_r+0x578>
  8087ac:	32000515 	stw	r8,20(r6)
  8087b0:	32000415 	stw	r8,16(r6)
  8087b4:	10007f0e 	bge	r2,zero,8089b4 <_malloc_r+0x304>
  8087b8:	00807fc4 	movi	r2,511
  8087bc:	11c0fd36 	bltu	r2,r7,808bb4 <_malloc_r+0x504>
  8087c0:	3806d0fa 	srli	r3,r7,3
  8087c4:	01c00044 	movi	r7,1
  8087c8:	30800117 	ldw	r2,4(r6)
  8087cc:	19400044 	addi	r5,r3,1
  8087d0:	294b883a 	add	r5,r5,r5
  8087d4:	1807d0ba 	srai	r3,r3,2
  8087d8:	294b883a 	add	r5,r5,r5
  8087dc:	294b883a 	add	r5,r5,r5
  8087e0:	298b883a 	add	r5,r5,r6
  8087e4:	38c6983a 	sll	r3,r7,r3
  8087e8:	29c00017 	ldw	r7,0(r5)
  8087ec:	2a7ffe04 	addi	r9,r5,-8
  8087f0:	1886b03a 	or	r3,r3,r2
  8087f4:	82400315 	stw	r9,12(r16)
  8087f8:	81c00215 	stw	r7,8(r16)
  8087fc:	30c00115 	stw	r3,4(r6)
  808800:	2c000015 	stw	r16,0(r5)
  808804:	3c000315 	stw	r16,12(r7)
  808808:	2005d0ba 	srai	r2,r4,2
  80880c:	01400044 	movi	r5,1
  808810:	288a983a 	sll	r5,r5,r2
  808814:	19406f36 	bltu	r3,r5,8089d4 <_malloc_r+0x324>
  808818:	28c4703a 	and	r2,r5,r3
  80881c:	10000a1e 	bne	r2,zero,808848 <_malloc_r+0x198>
  808820:	00bfff04 	movi	r2,-4
  808824:	294b883a 	add	r5,r5,r5
  808828:	2088703a 	and	r4,r4,r2
  80882c:	28c4703a 	and	r2,r5,r3
  808830:	21000104 	addi	r4,r4,4
  808834:	1000041e 	bne	r2,zero,808848 <_malloc_r+0x198>
  808838:	294b883a 	add	r5,r5,r5
  80883c:	28c4703a 	and	r2,r5,r3
  808840:	21000104 	addi	r4,r4,4
  808844:	103ffc26 	beq	r2,zero,808838 <__alt_mem_onchip_mem+0xff800838>
  808848:	02bfff04 	movi	r10,-4
  80884c:	024003c4 	movi	r9,15
  808850:	21800044 	addi	r6,r4,1
  808854:	318d883a 	add	r6,r6,r6
  808858:	318d883a 	add	r6,r6,r6
  80885c:	318d883a 	add	r6,r6,r6
  808860:	998d883a 	add	r6,r19,r6
  808864:	333ffe04 	addi	r12,r6,-8
  808868:	2017883a 	mov	r11,r4
  80886c:	31800104 	addi	r6,r6,4
  808870:	34000017 	ldw	r16,0(r6)
  808874:	31fffd04 	addi	r7,r6,-12
  808878:	81c0041e 	bne	r16,r7,80888c <_malloc_r+0x1dc>
  80887c:	0000fb06 	br	808c6c <_malloc_r+0x5bc>
  808880:	1801030e 	bge	r3,zero,808c90 <_malloc_r+0x5e0>
  808884:	84000317 	ldw	r16,12(r16)
  808888:	81c0f826 	beq	r16,r7,808c6c <_malloc_r+0x5bc>
  80888c:	80800117 	ldw	r2,4(r16)
  808890:	1284703a 	and	r2,r2,r10
  808894:	1447c83a 	sub	r3,r2,r17
  808898:	48fff90e 	bge	r9,r3,808880 <__alt_mem_onchip_mem+0xff800880>
  80889c:	80800317 	ldw	r2,12(r16)
  8088a0:	81000217 	ldw	r4,8(r16)
  8088a4:	89400054 	ori	r5,r17,1
  8088a8:	81400115 	stw	r5,4(r16)
  8088ac:	20800315 	stw	r2,12(r4)
  8088b0:	11000215 	stw	r4,8(r2)
  8088b4:	8463883a 	add	r17,r16,r17
  8088b8:	9c400515 	stw	r17,20(r19)
  8088bc:	9c400415 	stw	r17,16(r19)
  8088c0:	18800054 	ori	r2,r3,1
  8088c4:	88800115 	stw	r2,4(r17)
  8088c8:	8a000315 	stw	r8,12(r17)
  8088cc:	8a000215 	stw	r8,8(r17)
  8088d0:	88e3883a 	add	r17,r17,r3
  8088d4:	88c00015 	stw	r3,0(r17)
  8088d8:	9009883a 	mov	r4,r18
  8088dc:	08138400 	call	813840 <__malloc_unlock>
  8088e0:	80800204 	addi	r2,r16,8
  8088e4:	00001b06 	br	808954 <_malloc_r+0x2a4>
  8088e8:	04400404 	movi	r17,16
  8088ec:	89402536 	bltu	r17,r5,808984 <_malloc_r+0x2d4>
  8088f0:	081381c0 	call	81381c <__malloc_lock>
  8088f4:	00800184 	movi	r2,6
  8088f8:	01000084 	movi	r4,2
  8088fc:	04c02074 	movhi	r19,129
  808900:	1085883a 	add	r2,r2,r2
  808904:	9cdf4204 	addi	r19,r19,32008
  808908:	1085883a 	add	r2,r2,r2
  80890c:	9885883a 	add	r2,r19,r2
  808910:	14000117 	ldw	r16,4(r2)
  808914:	10fffe04 	addi	r3,r2,-8
  808918:	80c0d926 	beq	r16,r3,808c80 <_malloc_r+0x5d0>
  80891c:	80c00117 	ldw	r3,4(r16)
  808920:	81000317 	ldw	r4,12(r16)
  808924:	00bfff04 	movi	r2,-4
  808928:	1884703a 	and	r2,r3,r2
  80892c:	81400217 	ldw	r5,8(r16)
  808930:	8085883a 	add	r2,r16,r2
  808934:	10c00117 	ldw	r3,4(r2)
  808938:	29000315 	stw	r4,12(r5)
  80893c:	21400215 	stw	r5,8(r4)
  808940:	18c00054 	ori	r3,r3,1
  808944:	10c00115 	stw	r3,4(r2)
  808948:	9009883a 	mov	r4,r18
  80894c:	08138400 	call	813840 <__malloc_unlock>
  808950:	80800204 	addi	r2,r16,8
  808954:	dfc00a17 	ldw	ra,40(sp)
  808958:	df000917 	ldw	fp,36(sp)
  80895c:	ddc00817 	ldw	r23,32(sp)
  808960:	dd800717 	ldw	r22,28(sp)
  808964:	dd400617 	ldw	r21,24(sp)
  808968:	dd000517 	ldw	r20,20(sp)
  80896c:	dcc00417 	ldw	r19,16(sp)
  808970:	dc800317 	ldw	r18,12(sp)
  808974:	dc400217 	ldw	r17,8(sp)
  808978:	dc000117 	ldw	r16,4(sp)
  80897c:	dec00b04 	addi	sp,sp,44
  808980:	f800283a 	ret
  808984:	00800304 	movi	r2,12
  808988:	90800015 	stw	r2,0(r18)
  80898c:	0005883a 	mov	r2,zero
  808990:	003ff006 	br	808954 <__alt_mem_onchip_mem+0xff800954>
  808994:	01002004 	movi	r4,128
  808998:	02001004 	movi	r8,64
  80899c:	01c00fc4 	movi	r7,63
  8089a0:	003f6106 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  8089a4:	4009883a 	mov	r4,r8
  8089a8:	003f7506 	br	808780 <__alt_mem_onchip_mem+0xff800780>
  8089ac:	81000317 	ldw	r4,12(r16)
  8089b0:	003fde06 	br	80892c <__alt_mem_onchip_mem+0xff80092c>
  8089b4:	81c5883a 	add	r2,r16,r7
  8089b8:	11400117 	ldw	r5,4(r2)
  8089bc:	9009883a 	mov	r4,r18
  8089c0:	29400054 	ori	r5,r5,1
  8089c4:	11400115 	stw	r5,4(r2)
  8089c8:	08138400 	call	813840 <__malloc_unlock>
  8089cc:	80800204 	addi	r2,r16,8
  8089d0:	003fe006 	br	808954 <__alt_mem_onchip_mem+0xff800954>
  8089d4:	9c000217 	ldw	r16,8(r19)
  8089d8:	00bfff04 	movi	r2,-4
  8089dc:	85800117 	ldw	r22,4(r16)
  8089e0:	b0ac703a 	and	r22,r22,r2
  8089e4:	b4400336 	bltu	r22,r17,8089f4 <_malloc_r+0x344>
  8089e8:	b445c83a 	sub	r2,r22,r17
  8089ec:	00c003c4 	movi	r3,15
  8089f0:	18805d16 	blt	r3,r2,808b68 <_malloc_r+0x4b8>
  8089f4:	05c020b4 	movhi	r23,130
  8089f8:	008020b4 	movhi	r2,130
  8089fc:	10acd404 	addi	r2,r2,-19632
  808a00:	bde56704 	addi	r23,r23,-27236
  808a04:	15400017 	ldw	r21,0(r2)
  808a08:	b8c00017 	ldw	r3,0(r23)
  808a0c:	00bfffc4 	movi	r2,-1
  808a10:	858d883a 	add	r6,r16,r22
  808a14:	8d6b883a 	add	r21,r17,r21
  808a18:	1880ea26 	beq	r3,r2,808dc4 <_malloc_r+0x714>
  808a1c:	ad4403c4 	addi	r21,r21,4111
  808a20:	00bc0004 	movi	r2,-4096
  808a24:	a8aa703a 	and	r21,r21,r2
  808a28:	a80b883a 	mov	r5,r21
  808a2c:	9009883a 	mov	r4,r18
  808a30:	d9800015 	stw	r6,0(sp)
  808a34:	08094700 	call	809470 <_sbrk_r>
  808a38:	1029883a 	mov	r20,r2
  808a3c:	00bfffc4 	movi	r2,-1
  808a40:	d9800017 	ldw	r6,0(sp)
  808a44:	a080e826 	beq	r20,r2,808de8 <_malloc_r+0x738>
  808a48:	a180a636 	bltu	r20,r6,808ce4 <_malloc_r+0x634>
  808a4c:	070020b4 	movhi	fp,130
  808a50:	e72cdf04 	addi	fp,fp,-19588
  808a54:	e0800017 	ldw	r2,0(fp)
  808a58:	a887883a 	add	r3,r21,r2
  808a5c:	e0c00015 	stw	r3,0(fp)
  808a60:	3500e626 	beq	r6,r20,808dfc <_malloc_r+0x74c>
  808a64:	b9000017 	ldw	r4,0(r23)
  808a68:	00bfffc4 	movi	r2,-1
  808a6c:	2080ee26 	beq	r4,r2,808e28 <_malloc_r+0x778>
  808a70:	a185c83a 	sub	r2,r20,r6
  808a74:	10c5883a 	add	r2,r2,r3
  808a78:	e0800015 	stw	r2,0(fp)
  808a7c:	a0c001cc 	andi	r3,r20,7
  808a80:	1800bc26 	beq	r3,zero,808d74 <_malloc_r+0x6c4>
  808a84:	a0e9c83a 	sub	r20,r20,r3
  808a88:	00840204 	movi	r2,4104
  808a8c:	a5000204 	addi	r20,r20,8
  808a90:	10c7c83a 	sub	r3,r2,r3
  808a94:	a545883a 	add	r2,r20,r21
  808a98:	1083ffcc 	andi	r2,r2,4095
  808a9c:	18abc83a 	sub	r21,r3,r2
  808aa0:	a80b883a 	mov	r5,r21
  808aa4:	9009883a 	mov	r4,r18
  808aa8:	08094700 	call	809470 <_sbrk_r>
  808aac:	00ffffc4 	movi	r3,-1
  808ab0:	10c0e126 	beq	r2,r3,808e38 <_malloc_r+0x788>
  808ab4:	1505c83a 	sub	r2,r2,r20
  808ab8:	1545883a 	add	r2,r2,r21
  808abc:	10800054 	ori	r2,r2,1
  808ac0:	e0c00017 	ldw	r3,0(fp)
  808ac4:	9d000215 	stw	r20,8(r19)
  808ac8:	a0800115 	stw	r2,4(r20)
  808acc:	a8c7883a 	add	r3,r21,r3
  808ad0:	e0c00015 	stw	r3,0(fp)
  808ad4:	84c00e26 	beq	r16,r19,808b10 <_malloc_r+0x460>
  808ad8:	018003c4 	movi	r6,15
  808adc:	3580a72e 	bgeu	r6,r22,808d7c <_malloc_r+0x6cc>
  808ae0:	81400117 	ldw	r5,4(r16)
  808ae4:	013ffe04 	movi	r4,-8
  808ae8:	b0bffd04 	addi	r2,r22,-12
  808aec:	1104703a 	and	r2,r2,r4
  808af0:	2900004c 	andi	r4,r5,1
  808af4:	2088b03a 	or	r4,r4,r2
  808af8:	81000115 	stw	r4,4(r16)
  808afc:	01400144 	movi	r5,5
  808b00:	8089883a 	add	r4,r16,r2
  808b04:	21400115 	stw	r5,4(r4)
  808b08:	21400215 	stw	r5,8(r4)
  808b0c:	3080cd36 	bltu	r6,r2,808e44 <_malloc_r+0x794>
  808b10:	008020b4 	movhi	r2,130
  808b14:	10acd304 	addi	r2,r2,-19636
  808b18:	11000017 	ldw	r4,0(r2)
  808b1c:	20c0012e 	bgeu	r4,r3,808b24 <_malloc_r+0x474>
  808b20:	10c00015 	stw	r3,0(r2)
  808b24:	008020b4 	movhi	r2,130
  808b28:	10acd204 	addi	r2,r2,-19640
  808b2c:	11000017 	ldw	r4,0(r2)
  808b30:	9c000217 	ldw	r16,8(r19)
  808b34:	20c0012e 	bgeu	r4,r3,808b3c <_malloc_r+0x48c>
  808b38:	10c00015 	stw	r3,0(r2)
  808b3c:	80c00117 	ldw	r3,4(r16)
  808b40:	00bfff04 	movi	r2,-4
  808b44:	1886703a 	and	r3,r3,r2
  808b48:	1c45c83a 	sub	r2,r3,r17
  808b4c:	1c400236 	bltu	r3,r17,808b58 <_malloc_r+0x4a8>
  808b50:	00c003c4 	movi	r3,15
  808b54:	18800416 	blt	r3,r2,808b68 <_malloc_r+0x4b8>
  808b58:	9009883a 	mov	r4,r18
  808b5c:	08138400 	call	813840 <__malloc_unlock>
  808b60:	0005883a 	mov	r2,zero
  808b64:	003f7b06 	br	808954 <__alt_mem_onchip_mem+0xff800954>
  808b68:	88c00054 	ori	r3,r17,1
  808b6c:	80c00115 	stw	r3,4(r16)
  808b70:	8463883a 	add	r17,r16,r17
  808b74:	10800054 	ori	r2,r2,1
  808b78:	9c400215 	stw	r17,8(r19)
  808b7c:	88800115 	stw	r2,4(r17)
  808b80:	9009883a 	mov	r4,r18
  808b84:	08138400 	call	813840 <__malloc_unlock>
  808b88:	80800204 	addi	r2,r16,8
  808b8c:	003f7106 	br	808954 <__alt_mem_onchip_mem+0xff800954>
  808b90:	00c00504 	movi	r3,20
  808b94:	18804a2e 	bgeu	r3,r2,808cc0 <_malloc_r+0x610>
  808b98:	00c01504 	movi	r3,84
  808b9c:	18806e36 	bltu	r3,r2,808d58 <_malloc_r+0x6a8>
  808ba0:	8804d33a 	srli	r2,r17,12
  808ba4:	12001bc4 	addi	r8,r2,111
  808ba8:	11c01b84 	addi	r7,r2,110
  808bac:	4209883a 	add	r4,r8,r8
  808bb0:	003edd06 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  808bb4:	3804d27a 	srli	r2,r7,9
  808bb8:	00c00104 	movi	r3,4
  808bbc:	1880442e 	bgeu	r3,r2,808cd0 <_malloc_r+0x620>
  808bc0:	00c00504 	movi	r3,20
  808bc4:	18808136 	bltu	r3,r2,808dcc <_malloc_r+0x71c>
  808bc8:	11401704 	addi	r5,r2,92
  808bcc:	10c016c4 	addi	r3,r2,91
  808bd0:	294b883a 	add	r5,r5,r5
  808bd4:	294b883a 	add	r5,r5,r5
  808bd8:	294b883a 	add	r5,r5,r5
  808bdc:	994b883a 	add	r5,r19,r5
  808be0:	28800017 	ldw	r2,0(r5)
  808be4:	01802074 	movhi	r6,129
  808be8:	297ffe04 	addi	r5,r5,-8
  808bec:	319f4204 	addi	r6,r6,32008
  808bf0:	28806526 	beq	r5,r2,808d88 <_malloc_r+0x6d8>
  808bf4:	01bfff04 	movi	r6,-4
  808bf8:	10c00117 	ldw	r3,4(r2)
  808bfc:	1986703a 	and	r3,r3,r6
  808c00:	38c0022e 	bgeu	r7,r3,808c0c <_malloc_r+0x55c>
  808c04:	10800217 	ldw	r2,8(r2)
  808c08:	28bffb1e 	bne	r5,r2,808bf8 <__alt_mem_onchip_mem+0xff800bf8>
  808c0c:	11400317 	ldw	r5,12(r2)
  808c10:	98c00117 	ldw	r3,4(r19)
  808c14:	81400315 	stw	r5,12(r16)
  808c18:	80800215 	stw	r2,8(r16)
  808c1c:	2c000215 	stw	r16,8(r5)
  808c20:	14000315 	stw	r16,12(r2)
  808c24:	003ef806 	br	808808 <__alt_mem_onchip_mem+0xff800808>
  808c28:	88c00054 	ori	r3,r17,1
  808c2c:	80c00115 	stw	r3,4(r16)
  808c30:	8463883a 	add	r17,r16,r17
  808c34:	34400515 	stw	r17,20(r6)
  808c38:	34400415 	stw	r17,16(r6)
  808c3c:	10c00054 	ori	r3,r2,1
  808c40:	8a000315 	stw	r8,12(r17)
  808c44:	8a000215 	stw	r8,8(r17)
  808c48:	88c00115 	stw	r3,4(r17)
  808c4c:	88a3883a 	add	r17,r17,r2
  808c50:	88800015 	stw	r2,0(r17)
  808c54:	9009883a 	mov	r4,r18
  808c58:	08138400 	call	813840 <__malloc_unlock>
  808c5c:	80800204 	addi	r2,r16,8
  808c60:	003f3c06 	br	808954 <__alt_mem_onchip_mem+0xff800954>
  808c64:	30c00117 	ldw	r3,4(r6)
  808c68:	003ee706 	br	808808 <__alt_mem_onchip_mem+0xff800808>
  808c6c:	5ac00044 	addi	r11,r11,1
  808c70:	588000cc 	andi	r2,r11,3
  808c74:	31800204 	addi	r6,r6,8
  808c78:	103efd1e 	bne	r2,zero,808870 <__alt_mem_onchip_mem+0xff800870>
  808c7c:	00002406 	br	808d10 <_malloc_r+0x660>
  808c80:	14000317 	ldw	r16,12(r2)
  808c84:	143f251e 	bne	r2,r16,80891c <__alt_mem_onchip_mem+0xff80091c>
  808c88:	21000084 	addi	r4,r4,2
  808c8c:	003ebc06 	br	808780 <__alt_mem_onchip_mem+0xff800780>
  808c90:	8085883a 	add	r2,r16,r2
  808c94:	10c00117 	ldw	r3,4(r2)
  808c98:	81000317 	ldw	r4,12(r16)
  808c9c:	81400217 	ldw	r5,8(r16)
  808ca0:	18c00054 	ori	r3,r3,1
  808ca4:	10c00115 	stw	r3,4(r2)
  808ca8:	29000315 	stw	r4,12(r5)
  808cac:	21400215 	stw	r5,8(r4)
  808cb0:	9009883a 	mov	r4,r18
  808cb4:	08138400 	call	813840 <__malloc_unlock>
  808cb8:	80800204 	addi	r2,r16,8
  808cbc:	003f2506 	br	808954 <__alt_mem_onchip_mem+0xff800954>
  808cc0:	12001704 	addi	r8,r2,92
  808cc4:	11c016c4 	addi	r7,r2,91
  808cc8:	4209883a 	add	r4,r8,r8
  808ccc:	003e9606 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  808cd0:	3804d1ba 	srli	r2,r7,6
  808cd4:	11400e44 	addi	r5,r2,57
  808cd8:	10c00e04 	addi	r3,r2,56
  808cdc:	294b883a 	add	r5,r5,r5
  808ce0:	003fbc06 	br	808bd4 <__alt_mem_onchip_mem+0xff800bd4>
  808ce4:	84ff5926 	beq	r16,r19,808a4c <__alt_mem_onchip_mem+0xff800a4c>
  808ce8:	00802074 	movhi	r2,129
  808cec:	109f4204 	addi	r2,r2,32008
  808cf0:	14000217 	ldw	r16,8(r2)
  808cf4:	00bfff04 	movi	r2,-4
  808cf8:	80c00117 	ldw	r3,4(r16)
  808cfc:	1886703a 	and	r3,r3,r2
  808d00:	003f9106 	br	808b48 <__alt_mem_onchip_mem+0xff800b48>
  808d04:	60800217 	ldw	r2,8(r12)
  808d08:	213fffc4 	addi	r4,r4,-1
  808d0c:	1300651e 	bne	r2,r12,808ea4 <_malloc_r+0x7f4>
  808d10:	208000cc 	andi	r2,r4,3
  808d14:	633ffe04 	addi	r12,r12,-8
  808d18:	103ffa1e 	bne	r2,zero,808d04 <__alt_mem_onchip_mem+0xff800d04>
  808d1c:	98800117 	ldw	r2,4(r19)
  808d20:	0146303a 	nor	r3,zero,r5
  808d24:	1884703a 	and	r2,r3,r2
  808d28:	98800115 	stw	r2,4(r19)
  808d2c:	294b883a 	add	r5,r5,r5
  808d30:	117f2836 	bltu	r2,r5,8089d4 <__alt_mem_onchip_mem+0xff8009d4>
  808d34:	283f2726 	beq	r5,zero,8089d4 <__alt_mem_onchip_mem+0xff8009d4>
  808d38:	2886703a 	and	r3,r5,r2
  808d3c:	5809883a 	mov	r4,r11
  808d40:	183ec31e 	bne	r3,zero,808850 <__alt_mem_onchip_mem+0xff800850>
  808d44:	294b883a 	add	r5,r5,r5
  808d48:	2886703a 	and	r3,r5,r2
  808d4c:	21000104 	addi	r4,r4,4
  808d50:	183ffc26 	beq	r3,zero,808d44 <__alt_mem_onchip_mem+0xff800d44>
  808d54:	003ebe06 	br	808850 <__alt_mem_onchip_mem+0xff800850>
  808d58:	00c05504 	movi	r3,340
  808d5c:	18801236 	bltu	r3,r2,808da8 <_malloc_r+0x6f8>
  808d60:	8804d3fa 	srli	r2,r17,15
  808d64:	12001e04 	addi	r8,r2,120
  808d68:	11c01dc4 	addi	r7,r2,119
  808d6c:	4209883a 	add	r4,r8,r8
  808d70:	003e6d06 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  808d74:	00c40004 	movi	r3,4096
  808d78:	003f4606 	br	808a94 <__alt_mem_onchip_mem+0xff800a94>
  808d7c:	00800044 	movi	r2,1
  808d80:	a0800115 	stw	r2,4(r20)
  808d84:	003f7406 	br	808b58 <__alt_mem_onchip_mem+0xff800b58>
  808d88:	1805d0ba 	srai	r2,r3,2
  808d8c:	01c00044 	movi	r7,1
  808d90:	30c00117 	ldw	r3,4(r6)
  808d94:	388e983a 	sll	r7,r7,r2
  808d98:	2805883a 	mov	r2,r5
  808d9c:	38c6b03a 	or	r3,r7,r3
  808da0:	30c00115 	stw	r3,4(r6)
  808da4:	003f9b06 	br	808c14 <__alt_mem_onchip_mem+0xff800c14>
  808da8:	00c15504 	movi	r3,1364
  808dac:	18801a36 	bltu	r3,r2,808e18 <_malloc_r+0x768>
  808db0:	8804d4ba 	srli	r2,r17,18
  808db4:	12001f44 	addi	r8,r2,125
  808db8:	11c01f04 	addi	r7,r2,124
  808dbc:	4209883a 	add	r4,r8,r8
  808dc0:	003e5906 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  808dc4:	ad400404 	addi	r21,r21,16
  808dc8:	003f1706 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808dcc:	00c01504 	movi	r3,84
  808dd0:	18802336 	bltu	r3,r2,808e60 <_malloc_r+0x7b0>
  808dd4:	3804d33a 	srli	r2,r7,12
  808dd8:	11401bc4 	addi	r5,r2,111
  808ddc:	10c01b84 	addi	r3,r2,110
  808de0:	294b883a 	add	r5,r5,r5
  808de4:	003f7b06 	br	808bd4 <__alt_mem_onchip_mem+0xff800bd4>
  808de8:	9c000217 	ldw	r16,8(r19)
  808dec:	00bfff04 	movi	r2,-4
  808df0:	80c00117 	ldw	r3,4(r16)
  808df4:	1886703a 	and	r3,r3,r2
  808df8:	003f5306 	br	808b48 <__alt_mem_onchip_mem+0xff800b48>
  808dfc:	3083ffcc 	andi	r2,r6,4095
  808e00:	103f181e 	bne	r2,zero,808a64 <__alt_mem_onchip_mem+0xff800a64>
  808e04:	99000217 	ldw	r4,8(r19)
  808e08:	b545883a 	add	r2,r22,r21
  808e0c:	10800054 	ori	r2,r2,1
  808e10:	20800115 	stw	r2,4(r4)
  808e14:	003f3e06 	br	808b10 <__alt_mem_onchip_mem+0xff800b10>
  808e18:	01003f84 	movi	r4,254
  808e1c:	02001fc4 	movi	r8,127
  808e20:	01c01f84 	movi	r7,126
  808e24:	003e4006 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  808e28:	008020b4 	movhi	r2,130
  808e2c:	10a56704 	addi	r2,r2,-27236
  808e30:	15000015 	stw	r20,0(r2)
  808e34:	003f1106 	br	808a7c <__alt_mem_onchip_mem+0xff800a7c>
  808e38:	00800044 	movi	r2,1
  808e3c:	002b883a 	mov	r21,zero
  808e40:	003f1f06 	br	808ac0 <__alt_mem_onchip_mem+0xff800ac0>
  808e44:	81400204 	addi	r5,r16,8
  808e48:	9009883a 	mov	r4,r18
  808e4c:	0807b800 	call	807b80 <_free_r>
  808e50:	008020b4 	movhi	r2,130
  808e54:	10acdf04 	addi	r2,r2,-19588
  808e58:	10c00017 	ldw	r3,0(r2)
  808e5c:	003f2c06 	br	808b10 <__alt_mem_onchip_mem+0xff800b10>
  808e60:	00c05504 	movi	r3,340
  808e64:	18800536 	bltu	r3,r2,808e7c <_malloc_r+0x7cc>
  808e68:	3804d3fa 	srli	r2,r7,15
  808e6c:	11401e04 	addi	r5,r2,120
  808e70:	10c01dc4 	addi	r3,r2,119
  808e74:	294b883a 	add	r5,r5,r5
  808e78:	003f5606 	br	808bd4 <__alt_mem_onchip_mem+0xff800bd4>
  808e7c:	00c15504 	movi	r3,1364
  808e80:	18800536 	bltu	r3,r2,808e98 <_malloc_r+0x7e8>
  808e84:	3804d4ba 	srli	r2,r7,18
  808e88:	11401f44 	addi	r5,r2,125
  808e8c:	10c01f04 	addi	r3,r2,124
  808e90:	294b883a 	add	r5,r5,r5
  808e94:	003f4f06 	br	808bd4 <__alt_mem_onchip_mem+0xff800bd4>
  808e98:	01403f84 	movi	r5,254
  808e9c:	00c01f84 	movi	r3,126
  808ea0:	003f4c06 	br	808bd4 <__alt_mem_onchip_mem+0xff800bd4>
  808ea4:	98800117 	ldw	r2,4(r19)
  808ea8:	003fa006 	br	808d2c <__alt_mem_onchip_mem+0xff800d2c>
  808eac:	8808d0fa 	srli	r4,r17,3
  808eb0:	20800044 	addi	r2,r4,1
  808eb4:	1085883a 	add	r2,r2,r2
  808eb8:	003e9006 	br	8088fc <__alt_mem_onchip_mem+0xff8008fc>

00808ebc <memset>:
  808ebc:	20c000cc 	andi	r3,r4,3
  808ec0:	2005883a 	mov	r2,r4
  808ec4:	18004426 	beq	r3,zero,808fd8 <memset+0x11c>
  808ec8:	31ffffc4 	addi	r7,r6,-1
  808ecc:	30004026 	beq	r6,zero,808fd0 <memset+0x114>
  808ed0:	2813883a 	mov	r9,r5
  808ed4:	200d883a 	mov	r6,r4
  808ed8:	2007883a 	mov	r3,r4
  808edc:	00000406 	br	808ef0 <memset+0x34>
  808ee0:	3a3fffc4 	addi	r8,r7,-1
  808ee4:	31800044 	addi	r6,r6,1
  808ee8:	38003926 	beq	r7,zero,808fd0 <memset+0x114>
  808eec:	400f883a 	mov	r7,r8
  808ef0:	18c00044 	addi	r3,r3,1
  808ef4:	32400005 	stb	r9,0(r6)
  808ef8:	1a0000cc 	andi	r8,r3,3
  808efc:	403ff81e 	bne	r8,zero,808ee0 <__alt_mem_onchip_mem+0xff800ee0>
  808f00:	010000c4 	movi	r4,3
  808f04:	21c02d2e 	bgeu	r4,r7,808fbc <memset+0x100>
  808f08:	29003fcc 	andi	r4,r5,255
  808f0c:	200c923a 	slli	r6,r4,8
  808f10:	3108b03a 	or	r4,r6,r4
  808f14:	200c943a 	slli	r6,r4,16
  808f18:	218cb03a 	or	r6,r4,r6
  808f1c:	010003c4 	movi	r4,15
  808f20:	21c0182e 	bgeu	r4,r7,808f84 <memset+0xc8>
  808f24:	3b3ffc04 	addi	r12,r7,-16
  808f28:	6018d13a 	srli	r12,r12,4
  808f2c:	1a000104 	addi	r8,r3,4
  808f30:	1ac00204 	addi	r11,r3,8
  808f34:	6008913a 	slli	r4,r12,4
  808f38:	1a800304 	addi	r10,r3,12
  808f3c:	1813883a 	mov	r9,r3
  808f40:	21000504 	addi	r4,r4,20
  808f44:	1909883a 	add	r4,r3,r4
  808f48:	49800015 	stw	r6,0(r9)
  808f4c:	41800015 	stw	r6,0(r8)
  808f50:	59800015 	stw	r6,0(r11)
  808f54:	51800015 	stw	r6,0(r10)
  808f58:	42000404 	addi	r8,r8,16
  808f5c:	4a400404 	addi	r9,r9,16
  808f60:	5ac00404 	addi	r11,r11,16
  808f64:	52800404 	addi	r10,r10,16
  808f68:	413ff71e 	bne	r8,r4,808f48 <__alt_mem_onchip_mem+0xff800f48>
  808f6c:	63000044 	addi	r12,r12,1
  808f70:	6018913a 	slli	r12,r12,4
  808f74:	39c003cc 	andi	r7,r7,15
  808f78:	010000c4 	movi	r4,3
  808f7c:	1b07883a 	add	r3,r3,r12
  808f80:	21c00e2e 	bgeu	r4,r7,808fbc <memset+0x100>
  808f84:	1813883a 	mov	r9,r3
  808f88:	3811883a 	mov	r8,r7
  808f8c:	010000c4 	movi	r4,3
  808f90:	49800015 	stw	r6,0(r9)
  808f94:	423fff04 	addi	r8,r8,-4
  808f98:	4a400104 	addi	r9,r9,4
  808f9c:	223ffc36 	bltu	r4,r8,808f90 <__alt_mem_onchip_mem+0xff800f90>
  808fa0:	393fff04 	addi	r4,r7,-4
  808fa4:	2008d0ba 	srli	r4,r4,2
  808fa8:	39c000cc 	andi	r7,r7,3
  808fac:	21000044 	addi	r4,r4,1
  808fb0:	2109883a 	add	r4,r4,r4
  808fb4:	2109883a 	add	r4,r4,r4
  808fb8:	1907883a 	add	r3,r3,r4
  808fbc:	38000526 	beq	r7,zero,808fd4 <memset+0x118>
  808fc0:	19cf883a 	add	r7,r3,r7
  808fc4:	19400005 	stb	r5,0(r3)
  808fc8:	18c00044 	addi	r3,r3,1
  808fcc:	38fffd1e 	bne	r7,r3,808fc4 <__alt_mem_onchip_mem+0xff800fc4>
  808fd0:	f800283a 	ret
  808fd4:	f800283a 	ret
  808fd8:	2007883a 	mov	r3,r4
  808fdc:	300f883a 	mov	r7,r6
  808fe0:	003fc706 	br	808f00 <__alt_mem_onchip_mem+0xff800f00>

00808fe4 <_open_r>:
  808fe4:	defffd04 	addi	sp,sp,-12
  808fe8:	2805883a 	mov	r2,r5
  808fec:	dc000015 	stw	r16,0(sp)
  808ff0:	040020b4 	movhi	r16,130
  808ff4:	dc400115 	stw	r17,4(sp)
  808ff8:	300b883a 	mov	r5,r6
  808ffc:	842cd104 	addi	r16,r16,-19644
  809000:	2023883a 	mov	r17,r4
  809004:	380d883a 	mov	r6,r7
  809008:	1009883a 	mov	r4,r2
  80900c:	dfc00215 	stw	ra,8(sp)
  809010:	80000015 	stw	zero,0(r16)
  809014:	08139640 	call	813964 <open>
  809018:	00ffffc4 	movi	r3,-1
  80901c:	10c00526 	beq	r2,r3,809034 <_open_r+0x50>
  809020:	dfc00217 	ldw	ra,8(sp)
  809024:	dc400117 	ldw	r17,4(sp)
  809028:	dc000017 	ldw	r16,0(sp)
  80902c:	dec00304 	addi	sp,sp,12
  809030:	f800283a 	ret
  809034:	80c00017 	ldw	r3,0(r16)
  809038:	183ff926 	beq	r3,zero,809020 <__alt_mem_onchip_mem+0xff801020>
  80903c:	88c00015 	stw	r3,0(r17)
  809040:	003ff706 	br	809020 <__alt_mem_onchip_mem+0xff801020>

00809044 <_putc_r>:
  809044:	defffc04 	addi	sp,sp,-16
  809048:	dc000215 	stw	r16,8(sp)
  80904c:	dfc00315 	stw	ra,12(sp)
  809050:	2021883a 	mov	r16,r4
  809054:	20000226 	beq	r4,zero,809060 <_putc_r+0x1c>
  809058:	20800e17 	ldw	r2,56(r4)
  80905c:	10001b26 	beq	r2,zero,8090cc <_putc_r+0x88>
  809060:	30800217 	ldw	r2,8(r6)
  809064:	10bfffc4 	addi	r2,r2,-1
  809068:	30800215 	stw	r2,8(r6)
  80906c:	10000a16 	blt	r2,zero,809098 <_putc_r+0x54>
  809070:	30800017 	ldw	r2,0(r6)
  809074:	11400005 	stb	r5,0(r2)
  809078:	30800017 	ldw	r2,0(r6)
  80907c:	10c00044 	addi	r3,r2,1
  809080:	30c00015 	stw	r3,0(r6)
  809084:	10800003 	ldbu	r2,0(r2)
  809088:	dfc00317 	ldw	ra,12(sp)
  80908c:	dc000217 	ldw	r16,8(sp)
  809090:	dec00404 	addi	sp,sp,16
  809094:	f800283a 	ret
  809098:	30c00617 	ldw	r3,24(r6)
  80909c:	10c00616 	blt	r2,r3,8090b8 <_putc_r+0x74>
  8090a0:	30800017 	ldw	r2,0(r6)
  8090a4:	00c00284 	movi	r3,10
  8090a8:	11400005 	stb	r5,0(r2)
  8090ac:	30800017 	ldw	r2,0(r6)
  8090b0:	11400003 	ldbu	r5,0(r2)
  8090b4:	28fff11e 	bne	r5,r3,80907c <__alt_mem_onchip_mem+0xff80107c>
  8090b8:	8009883a 	mov	r4,r16
  8090bc:	dfc00317 	ldw	ra,12(sp)
  8090c0:	dc000217 	ldw	r16,8(sp)
  8090c4:	dec00404 	addi	sp,sp,16
  8090c8:	080b96c1 	jmpi	80b96c <__swbuf_r>
  8090cc:	d9400015 	stw	r5,0(sp)
  8090d0:	d9800115 	stw	r6,4(sp)
  8090d4:	08078140 	call	807814 <__sinit>
  8090d8:	d9800117 	ldw	r6,4(sp)
  8090dc:	d9400017 	ldw	r5,0(sp)
  8090e0:	003fdf06 	br	809060 <__alt_mem_onchip_mem+0xff801060>

008090e4 <putc>:
  8090e4:	008020b4 	movhi	r2,130
  8090e8:	defffc04 	addi	sp,sp,-16
  8090ec:	10a56604 	addi	r2,r2,-27240
  8090f0:	dc000115 	stw	r16,4(sp)
  8090f4:	14000017 	ldw	r16,0(r2)
  8090f8:	dc400215 	stw	r17,8(sp)
  8090fc:	dfc00315 	stw	ra,12(sp)
  809100:	2023883a 	mov	r17,r4
  809104:	80000226 	beq	r16,zero,809110 <putc+0x2c>
  809108:	80800e17 	ldw	r2,56(r16)
  80910c:	10001a26 	beq	r2,zero,809178 <putc+0x94>
  809110:	28800217 	ldw	r2,8(r5)
  809114:	10bfffc4 	addi	r2,r2,-1
  809118:	28800215 	stw	r2,8(r5)
  80911c:	10000b16 	blt	r2,zero,80914c <putc+0x68>
  809120:	28800017 	ldw	r2,0(r5)
  809124:	14400005 	stb	r17,0(r2)
  809128:	28800017 	ldw	r2,0(r5)
  80912c:	10c00044 	addi	r3,r2,1
  809130:	28c00015 	stw	r3,0(r5)
  809134:	10800003 	ldbu	r2,0(r2)
  809138:	dfc00317 	ldw	ra,12(sp)
  80913c:	dc400217 	ldw	r17,8(sp)
  809140:	dc000117 	ldw	r16,4(sp)
  809144:	dec00404 	addi	sp,sp,16
  809148:	f800283a 	ret
  80914c:	28c00617 	ldw	r3,24(r5)
  809150:	10c00e16 	blt	r2,r3,80918c <putc+0xa8>
  809154:	28800017 	ldw	r2,0(r5)
  809158:	01000284 	movi	r4,10
  80915c:	14400005 	stb	r17,0(r2)
  809160:	28800017 	ldw	r2,0(r5)
  809164:	10c00003 	ldbu	r3,0(r2)
  809168:	193ff01e 	bne	r3,r4,80912c <__alt_mem_onchip_mem+0xff80112c>
  80916c:	280d883a 	mov	r6,r5
  809170:	180b883a 	mov	r5,r3
  809174:	00000706 	br	809194 <putc+0xb0>
  809178:	8009883a 	mov	r4,r16
  80917c:	d9400015 	stw	r5,0(sp)
  809180:	08078140 	call	807814 <__sinit>
  809184:	d9400017 	ldw	r5,0(sp)
  809188:	003fe106 	br	809110 <__alt_mem_onchip_mem+0xff801110>
  80918c:	280d883a 	mov	r6,r5
  809190:	880b883a 	mov	r5,r17
  809194:	8009883a 	mov	r4,r16
  809198:	dfc00317 	ldw	ra,12(sp)
  80919c:	dc400217 	ldw	r17,8(sp)
  8091a0:	dc000117 	ldw	r16,4(sp)
  8091a4:	dec00404 	addi	sp,sp,16
  8091a8:	080b96c1 	jmpi	80b96c <__swbuf_r>

008091ac <_puts_r>:
  8091ac:	defff604 	addi	sp,sp,-40
  8091b0:	dc000715 	stw	r16,28(sp)
  8091b4:	2021883a 	mov	r16,r4
  8091b8:	2809883a 	mov	r4,r5
  8091bc:	dc400815 	stw	r17,32(sp)
  8091c0:	dfc00915 	stw	ra,36(sp)
  8091c4:	2823883a 	mov	r17,r5
  8091c8:	08096000 	call	809600 <strlen>
  8091cc:	10c00044 	addi	r3,r2,1
  8091d0:	d8800115 	stw	r2,4(sp)
  8091d4:	00802074 	movhi	r2,129
  8091d8:	109d1604 	addi	r2,r2,29784
  8091dc:	d8800215 	stw	r2,8(sp)
  8091e0:	00800044 	movi	r2,1
  8091e4:	d8800315 	stw	r2,12(sp)
  8091e8:	00800084 	movi	r2,2
  8091ec:	dc400015 	stw	r17,0(sp)
  8091f0:	d8c00615 	stw	r3,24(sp)
  8091f4:	dec00415 	stw	sp,16(sp)
  8091f8:	d8800515 	stw	r2,20(sp)
  8091fc:	80000226 	beq	r16,zero,809208 <_puts_r+0x5c>
  809200:	80800e17 	ldw	r2,56(r16)
  809204:	10001426 	beq	r2,zero,809258 <_puts_r+0xac>
  809208:	81400217 	ldw	r5,8(r16)
  80920c:	2880030b 	ldhu	r2,12(r5)
  809210:	10c8000c 	andi	r3,r2,8192
  809214:	1800061e 	bne	r3,zero,809230 <_puts_r+0x84>
  809218:	29001917 	ldw	r4,100(r5)
  80921c:	00f7ffc4 	movi	r3,-8193
  809220:	10880014 	ori	r2,r2,8192
  809224:	20c6703a 	and	r3,r4,r3
  809228:	2880030d 	sth	r2,12(r5)
  80922c:	28c01915 	stw	r3,100(r5)
  809230:	d9800404 	addi	r6,sp,16
  809234:	8009883a 	mov	r4,r16
  809238:	080d6000 	call	80d600 <__sfvwrite_r>
  80923c:	1000091e 	bne	r2,zero,809264 <_puts_r+0xb8>
  809240:	00800284 	movi	r2,10
  809244:	dfc00917 	ldw	ra,36(sp)
  809248:	dc400817 	ldw	r17,32(sp)
  80924c:	dc000717 	ldw	r16,28(sp)
  809250:	dec00a04 	addi	sp,sp,40
  809254:	f800283a 	ret
  809258:	8009883a 	mov	r4,r16
  80925c:	08078140 	call	807814 <__sinit>
  809260:	003fe906 	br	809208 <__alt_mem_onchip_mem+0xff801208>
  809264:	00bfffc4 	movi	r2,-1
  809268:	003ff606 	br	809244 <__alt_mem_onchip_mem+0xff801244>

0080926c <puts>:
  80926c:	008020b4 	movhi	r2,130
  809270:	10a56604 	addi	r2,r2,-27240
  809274:	200b883a 	mov	r5,r4
  809278:	11000017 	ldw	r4,0(r2)
  80927c:	08091ac1 	jmpi	8091ac <_puts_r>

00809280 <lflush>:
  809280:	2080030b 	ldhu	r2,12(r4)
  809284:	00c00244 	movi	r3,9
  809288:	1080024c 	andi	r2,r2,9
  80928c:	10c00226 	beq	r2,r3,809298 <lflush+0x18>
  809290:	0005883a 	mov	r2,zero
  809294:	f800283a 	ret
  809298:	08074941 	jmpi	807494 <fflush>

0080929c <__srefill_r>:
  80929c:	defffc04 	addi	sp,sp,-16
  8092a0:	dc400115 	stw	r17,4(sp)
  8092a4:	dc000015 	stw	r16,0(sp)
  8092a8:	dfc00315 	stw	ra,12(sp)
  8092ac:	dc800215 	stw	r18,8(sp)
  8092b0:	2023883a 	mov	r17,r4
  8092b4:	2821883a 	mov	r16,r5
  8092b8:	20000226 	beq	r4,zero,8092c4 <__srefill_r+0x28>
  8092bc:	20800e17 	ldw	r2,56(r4)
  8092c0:	10003c26 	beq	r2,zero,8093b4 <__srefill_r+0x118>
  8092c4:	80c0030b 	ldhu	r3,12(r16)
  8092c8:	1908000c 	andi	r4,r3,8192
  8092cc:	1805883a 	mov	r2,r3
  8092d0:	2000071e 	bne	r4,zero,8092f0 <__srefill_r+0x54>
  8092d4:	81001917 	ldw	r4,100(r16)
  8092d8:	18880014 	ori	r2,r3,8192
  8092dc:	00f7ffc4 	movi	r3,-8193
  8092e0:	20c8703a 	and	r4,r4,r3
  8092e4:	8080030d 	sth	r2,12(r16)
  8092e8:	1007883a 	mov	r3,r2
  8092ec:	81001915 	stw	r4,100(r16)
  8092f0:	80000115 	stw	zero,4(r16)
  8092f4:	1100080c 	andi	r4,r2,32
  8092f8:	2000571e 	bne	r4,zero,809458 <__srefill_r+0x1bc>
  8092fc:	1100010c 	andi	r4,r2,4
  809300:	20001f26 	beq	r4,zero,809380 <__srefill_r+0xe4>
  809304:	81400c17 	ldw	r5,48(r16)
  809308:	28000826 	beq	r5,zero,80932c <__srefill_r+0x90>
  80930c:	80801004 	addi	r2,r16,64
  809310:	28800226 	beq	r5,r2,80931c <__srefill_r+0x80>
  809314:	8809883a 	mov	r4,r17
  809318:	0807b800 	call	807b80 <_free_r>
  80931c:	80800f17 	ldw	r2,60(r16)
  809320:	80000c15 	stw	zero,48(r16)
  809324:	80800115 	stw	r2,4(r16)
  809328:	1000391e 	bne	r2,zero,809410 <__srefill_r+0x174>
  80932c:	80800417 	ldw	r2,16(r16)
  809330:	10004b26 	beq	r2,zero,809460 <__srefill_r+0x1c4>
  809334:	8480030b 	ldhu	r18,12(r16)
  809338:	908000cc 	andi	r2,r18,3
  80933c:	10001f1e 	bne	r2,zero,8093bc <__srefill_r+0x120>
  809340:	81800417 	ldw	r6,16(r16)
  809344:	80800817 	ldw	r2,32(r16)
  809348:	81c00517 	ldw	r7,20(r16)
  80934c:	81400717 	ldw	r5,28(r16)
  809350:	81800015 	stw	r6,0(r16)
  809354:	8809883a 	mov	r4,r17
  809358:	103ee83a 	callr	r2
  80935c:	80800115 	stw	r2,4(r16)
  809360:	00800e0e 	bge	zero,r2,80939c <__srefill_r+0x100>
  809364:	0005883a 	mov	r2,zero
  809368:	dfc00317 	ldw	ra,12(sp)
  80936c:	dc800217 	ldw	r18,8(sp)
  809370:	dc400117 	ldw	r17,4(sp)
  809374:	dc000017 	ldw	r16,0(sp)
  809378:	dec00404 	addi	sp,sp,16
  80937c:	f800283a 	ret
  809380:	1100040c 	andi	r4,r2,16
  809384:	20003026 	beq	r4,zero,809448 <__srefill_r+0x1ac>
  809388:	1080020c 	andi	r2,r2,8
  80938c:	1000241e 	bne	r2,zero,809420 <__srefill_r+0x184>
  809390:	18c00114 	ori	r3,r3,4
  809394:	80c0030d 	sth	r3,12(r16)
  809398:	003fe406 	br	80932c <__alt_mem_onchip_mem+0xff80132c>
  80939c:	80c0030b 	ldhu	r3,12(r16)
  8093a0:	1000161e 	bne	r2,zero,8093fc <__srefill_r+0x160>
  8093a4:	18c00814 	ori	r3,r3,32
  8093a8:	00bfffc4 	movi	r2,-1
  8093ac:	80c0030d 	sth	r3,12(r16)
  8093b0:	003fed06 	br	809368 <__alt_mem_onchip_mem+0xff801368>
  8093b4:	08078140 	call	807814 <__sinit>
  8093b8:	003fc206 	br	8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  8093bc:	008020b4 	movhi	r2,130
  8093c0:	10a56504 	addi	r2,r2,-27244
  8093c4:	11000017 	ldw	r4,0(r2)
  8093c8:	01402074 	movhi	r5,129
  8093cc:	00800044 	movi	r2,1
  8093d0:	2964a004 	addi	r5,r5,-28032
  8093d4:	8080030d 	sth	r2,12(r16)
  8093d8:	080836c0 	call	80836c <_fwalk>
  8093dc:	00800244 	movi	r2,9
  8093e0:	8480030d 	sth	r18,12(r16)
  8093e4:	9480024c 	andi	r18,r18,9
  8093e8:	90bfd51e 	bne	r18,r2,809340 <__alt_mem_onchip_mem+0xff801340>
  8093ec:	800b883a 	mov	r5,r16
  8093f0:	8809883a 	mov	r4,r17
  8093f4:	080721c0 	call	80721c <__sflush_r>
  8093f8:	003fd106 	br	809340 <__alt_mem_onchip_mem+0xff801340>
  8093fc:	18c01014 	ori	r3,r3,64
  809400:	80000115 	stw	zero,4(r16)
  809404:	00bfffc4 	movi	r2,-1
  809408:	80c0030d 	sth	r3,12(r16)
  80940c:	003fd606 	br	809368 <__alt_mem_onchip_mem+0xff801368>
  809410:	80c00e17 	ldw	r3,56(r16)
  809414:	0005883a 	mov	r2,zero
  809418:	80c00015 	stw	r3,0(r16)
  80941c:	003fd206 	br	809368 <__alt_mem_onchip_mem+0xff801368>
  809420:	800b883a 	mov	r5,r16
  809424:	8809883a 	mov	r4,r17
  809428:	08074380 	call	807438 <_fflush_r>
  80942c:	10000a1e 	bne	r2,zero,809458 <__srefill_r+0x1bc>
  809430:	8080030b 	ldhu	r2,12(r16)
  809434:	00fffdc4 	movi	r3,-9
  809438:	80000215 	stw	zero,8(r16)
  80943c:	1886703a 	and	r3,r3,r2
  809440:	80000615 	stw	zero,24(r16)
  809444:	003fd206 	br	809390 <__alt_mem_onchip_mem+0xff801390>
  809448:	00800244 	movi	r2,9
  80944c:	88800015 	stw	r2,0(r17)
  809450:	18c01014 	ori	r3,r3,64
  809454:	80c0030d 	sth	r3,12(r16)
  809458:	00bfffc4 	movi	r2,-1
  80945c:	003fc206 	br	809368 <__alt_mem_onchip_mem+0xff801368>
  809460:	800b883a 	mov	r5,r16
  809464:	8809883a 	mov	r4,r17
  809468:	08084f40 	call	8084f4 <__smakebuf_r>
  80946c:	003fb106 	br	809334 <__alt_mem_onchip_mem+0xff801334>

00809470 <_sbrk_r>:
  809470:	defffd04 	addi	sp,sp,-12
  809474:	dc000015 	stw	r16,0(sp)
  809478:	040020b4 	movhi	r16,130
  80947c:	dc400115 	stw	r17,4(sp)
  809480:	842cd104 	addi	r16,r16,-19644
  809484:	2023883a 	mov	r17,r4
  809488:	2809883a 	mov	r4,r5
  80948c:	dfc00215 	stw	ra,8(sp)
  809490:	80000015 	stw	zero,0(r16)
  809494:	0813c540 	call	813c54 <sbrk>
  809498:	00ffffc4 	movi	r3,-1
  80949c:	10c00526 	beq	r2,r3,8094b4 <_sbrk_r+0x44>
  8094a0:	dfc00217 	ldw	ra,8(sp)
  8094a4:	dc400117 	ldw	r17,4(sp)
  8094a8:	dc000017 	ldw	r16,0(sp)
  8094ac:	dec00304 	addi	sp,sp,12
  8094b0:	f800283a 	ret
  8094b4:	80c00017 	ldw	r3,0(r16)
  8094b8:	183ff926 	beq	r3,zero,8094a0 <__alt_mem_onchip_mem+0xff8014a0>
  8094bc:	88c00015 	stw	r3,0(r17)
  8094c0:	003ff706 	br	8094a0 <__alt_mem_onchip_mem+0xff8014a0>

008094c4 <__sread>:
  8094c4:	defffe04 	addi	sp,sp,-8
  8094c8:	dc000015 	stw	r16,0(sp)
  8094cc:	2821883a 	mov	r16,r5
  8094d0:	2940038f 	ldh	r5,14(r5)
  8094d4:	dfc00115 	stw	ra,4(sp)
  8094d8:	080efd00 	call	80efd0 <_read_r>
  8094dc:	10000716 	blt	r2,zero,8094fc <__sread+0x38>
  8094e0:	80c01417 	ldw	r3,80(r16)
  8094e4:	1887883a 	add	r3,r3,r2
  8094e8:	80c01415 	stw	r3,80(r16)
  8094ec:	dfc00117 	ldw	ra,4(sp)
  8094f0:	dc000017 	ldw	r16,0(sp)
  8094f4:	dec00204 	addi	sp,sp,8
  8094f8:	f800283a 	ret
  8094fc:	80c0030b 	ldhu	r3,12(r16)
  809500:	18fbffcc 	andi	r3,r3,61439
  809504:	80c0030d 	sth	r3,12(r16)
  809508:	dfc00117 	ldw	ra,4(sp)
  80950c:	dc000017 	ldw	r16,0(sp)
  809510:	dec00204 	addi	sp,sp,8
  809514:	f800283a 	ret

00809518 <__seofread>:
  809518:	0005883a 	mov	r2,zero
  80951c:	f800283a 	ret

00809520 <__swrite>:
  809520:	2880030b 	ldhu	r2,12(r5)
  809524:	defffb04 	addi	sp,sp,-20
  809528:	dcc00315 	stw	r19,12(sp)
  80952c:	dc800215 	stw	r18,8(sp)
  809530:	dc400115 	stw	r17,4(sp)
  809534:	dc000015 	stw	r16,0(sp)
  809538:	dfc00415 	stw	ra,16(sp)
  80953c:	10c0400c 	andi	r3,r2,256
  809540:	2821883a 	mov	r16,r5
  809544:	2023883a 	mov	r17,r4
  809548:	3025883a 	mov	r18,r6
  80954c:	3827883a 	mov	r19,r7
  809550:	18000526 	beq	r3,zero,809568 <__swrite+0x48>
  809554:	2940038f 	ldh	r5,14(r5)
  809558:	01c00084 	movi	r7,2
  80955c:	000d883a 	mov	r6,zero
  809560:	080dbec0 	call	80dbec <_lseek_r>
  809564:	8080030b 	ldhu	r2,12(r16)
  809568:	8140038f 	ldh	r5,14(r16)
  80956c:	10bbffcc 	andi	r2,r2,61439
  809570:	980f883a 	mov	r7,r19
  809574:	900d883a 	mov	r6,r18
  809578:	8809883a 	mov	r4,r17
  80957c:	8080030d 	sth	r2,12(r16)
  809580:	dfc00417 	ldw	ra,16(sp)
  809584:	dcc00317 	ldw	r19,12(sp)
  809588:	dc800217 	ldw	r18,8(sp)
  80958c:	dc400117 	ldw	r17,4(sp)
  809590:	dc000017 	ldw	r16,0(sp)
  809594:	dec00504 	addi	sp,sp,20
  809598:	080bac41 	jmpi	80bac4 <_write_r>

0080959c <__sseek>:
  80959c:	defffe04 	addi	sp,sp,-8
  8095a0:	dc000015 	stw	r16,0(sp)
  8095a4:	2821883a 	mov	r16,r5
  8095a8:	2940038f 	ldh	r5,14(r5)
  8095ac:	dfc00115 	stw	ra,4(sp)
  8095b0:	080dbec0 	call	80dbec <_lseek_r>
  8095b4:	00ffffc4 	movi	r3,-1
  8095b8:	10c00826 	beq	r2,r3,8095dc <__sseek+0x40>
  8095bc:	80c0030b 	ldhu	r3,12(r16)
  8095c0:	80801415 	stw	r2,80(r16)
  8095c4:	18c40014 	ori	r3,r3,4096
  8095c8:	80c0030d 	sth	r3,12(r16)
  8095cc:	dfc00117 	ldw	ra,4(sp)
  8095d0:	dc000017 	ldw	r16,0(sp)
  8095d4:	dec00204 	addi	sp,sp,8
  8095d8:	f800283a 	ret
  8095dc:	80c0030b 	ldhu	r3,12(r16)
  8095e0:	18fbffcc 	andi	r3,r3,61439
  8095e4:	80c0030d 	sth	r3,12(r16)
  8095e8:	dfc00117 	ldw	ra,4(sp)
  8095ec:	dc000017 	ldw	r16,0(sp)
  8095f0:	dec00204 	addi	sp,sp,8
  8095f4:	f800283a 	ret

008095f8 <__sclose>:
  8095f8:	2940038f 	ldh	r5,14(r5)
  8095fc:	080bc781 	jmpi	80bc78 <_close_r>

00809600 <strlen>:
  809600:	208000cc 	andi	r2,r4,3
  809604:	10002026 	beq	r2,zero,809688 <strlen+0x88>
  809608:	20800007 	ldb	r2,0(r4)
  80960c:	10002026 	beq	r2,zero,809690 <strlen+0x90>
  809610:	2005883a 	mov	r2,r4
  809614:	00000206 	br	809620 <strlen+0x20>
  809618:	10c00007 	ldb	r3,0(r2)
  80961c:	18001826 	beq	r3,zero,809680 <strlen+0x80>
  809620:	10800044 	addi	r2,r2,1
  809624:	10c000cc 	andi	r3,r2,3
  809628:	183ffb1e 	bne	r3,zero,809618 <__alt_mem_onchip_mem+0xff801618>
  80962c:	10c00017 	ldw	r3,0(r2)
  809630:	01ffbff4 	movhi	r7,65279
  809634:	39ffbfc4 	addi	r7,r7,-257
  809638:	00ca303a 	nor	r5,zero,r3
  80963c:	01a02074 	movhi	r6,32897
  809640:	19c7883a 	add	r3,r3,r7
  809644:	31a02004 	addi	r6,r6,-32640
  809648:	1946703a 	and	r3,r3,r5
  80964c:	1986703a 	and	r3,r3,r6
  809650:	1800091e 	bne	r3,zero,809678 <strlen+0x78>
  809654:	10800104 	addi	r2,r2,4
  809658:	10c00017 	ldw	r3,0(r2)
  80965c:	19cb883a 	add	r5,r3,r7
  809660:	00c6303a 	nor	r3,zero,r3
  809664:	28c6703a 	and	r3,r5,r3
  809668:	1986703a 	and	r3,r3,r6
  80966c:	183ff926 	beq	r3,zero,809654 <__alt_mem_onchip_mem+0xff801654>
  809670:	00000106 	br	809678 <strlen+0x78>
  809674:	10800044 	addi	r2,r2,1
  809678:	10c00007 	ldb	r3,0(r2)
  80967c:	183ffd1e 	bne	r3,zero,809674 <__alt_mem_onchip_mem+0xff801674>
  809680:	1105c83a 	sub	r2,r2,r4
  809684:	f800283a 	ret
  809688:	2005883a 	mov	r2,r4
  80968c:	003fe706 	br	80962c <__alt_mem_onchip_mem+0xff80162c>
  809690:	0005883a 	mov	r2,zero
  809694:	f800283a 	ret

00809698 <___vfprintf_internal_r>:
  809698:	deffb804 	addi	sp,sp,-288
  80969c:	dfc04715 	stw	ra,284(sp)
  8096a0:	ddc04515 	stw	r23,276(sp)
  8096a4:	dd404315 	stw	r21,268(sp)
  8096a8:	d9002c15 	stw	r4,176(sp)
  8096ac:	282f883a 	mov	r23,r5
  8096b0:	302b883a 	mov	r21,r6
  8096b4:	d9c02d15 	stw	r7,180(sp)
  8096b8:	df004615 	stw	fp,280(sp)
  8096bc:	dd804415 	stw	r22,272(sp)
  8096c0:	dd004215 	stw	r20,264(sp)
  8096c4:	dcc04115 	stw	r19,260(sp)
  8096c8:	dc804015 	stw	r18,256(sp)
  8096cc:	dc403f15 	stw	r17,252(sp)
  8096d0:	dc003e15 	stw	r16,248(sp)
  8096d4:	080dbbc0 	call	80dbbc <_localeconv_r>
  8096d8:	10800017 	ldw	r2,0(r2)
  8096dc:	1009883a 	mov	r4,r2
  8096e0:	d8803415 	stw	r2,208(sp)
  8096e4:	08096000 	call	809600 <strlen>
  8096e8:	d8803715 	stw	r2,220(sp)
  8096ec:	d8802c17 	ldw	r2,176(sp)
  8096f0:	10000226 	beq	r2,zero,8096fc <___vfprintf_internal_r+0x64>
  8096f4:	10800e17 	ldw	r2,56(r2)
  8096f8:	1000f926 	beq	r2,zero,809ae0 <___vfprintf_internal_r+0x448>
  8096fc:	b880030b 	ldhu	r2,12(r23)
  809700:	10c8000c 	andi	r3,r2,8192
  809704:	1800061e 	bne	r3,zero,809720 <___vfprintf_internal_r+0x88>
  809708:	b9001917 	ldw	r4,100(r23)
  80970c:	00f7ffc4 	movi	r3,-8193
  809710:	10880014 	ori	r2,r2,8192
  809714:	20c6703a 	and	r3,r4,r3
  809718:	b880030d 	sth	r2,12(r23)
  80971c:	b8c01915 	stw	r3,100(r23)
  809720:	10c0020c 	andi	r3,r2,8
  809724:	1800c126 	beq	r3,zero,809a2c <___vfprintf_internal_r+0x394>
  809728:	b8c00417 	ldw	r3,16(r23)
  80972c:	1800bf26 	beq	r3,zero,809a2c <___vfprintf_internal_r+0x394>
  809730:	1080068c 	andi	r2,r2,26
  809734:	00c00284 	movi	r3,10
  809738:	10c0c426 	beq	r2,r3,809a4c <___vfprintf_internal_r+0x3b4>
  80973c:	d8c00404 	addi	r3,sp,16
  809740:	05002074 	movhi	r20,129
  809744:	d9001e04 	addi	r4,sp,120
  809748:	a51d2784 	addi	r20,r20,29854
  80974c:	d8c01e15 	stw	r3,120(sp)
  809750:	d8002015 	stw	zero,128(sp)
  809754:	d8001f15 	stw	zero,124(sp)
  809758:	d8003315 	stw	zero,204(sp)
  80975c:	d8003615 	stw	zero,216(sp)
  809760:	d8003815 	stw	zero,224(sp)
  809764:	1811883a 	mov	r8,r3
  809768:	d8003915 	stw	zero,228(sp)
  80976c:	d8003a15 	stw	zero,232(sp)
  809770:	d8002f15 	stw	zero,188(sp)
  809774:	d9002815 	stw	r4,160(sp)
  809778:	a8800007 	ldb	r2,0(r21)
  80977c:	10027b26 	beq	r2,zero,80a16c <___vfprintf_internal_r+0xad4>
  809780:	00c00944 	movi	r3,37
  809784:	a821883a 	mov	r16,r21
  809788:	10c0021e 	bne	r2,r3,809794 <___vfprintf_internal_r+0xfc>
  80978c:	00001406 	br	8097e0 <___vfprintf_internal_r+0x148>
  809790:	10c00326 	beq	r2,r3,8097a0 <___vfprintf_internal_r+0x108>
  809794:	84000044 	addi	r16,r16,1
  809798:	80800007 	ldb	r2,0(r16)
  80979c:	103ffc1e 	bne	r2,zero,809790 <__alt_mem_onchip_mem+0xff801790>
  8097a0:	8563c83a 	sub	r17,r16,r21
  8097a4:	88000e26 	beq	r17,zero,8097e0 <___vfprintf_internal_r+0x148>
  8097a8:	d8c02017 	ldw	r3,128(sp)
  8097ac:	d8801f17 	ldw	r2,124(sp)
  8097b0:	45400015 	stw	r21,0(r8)
  8097b4:	1c47883a 	add	r3,r3,r17
  8097b8:	10800044 	addi	r2,r2,1
  8097bc:	d8c02015 	stw	r3,128(sp)
  8097c0:	44400115 	stw	r17,4(r8)
  8097c4:	d8801f15 	stw	r2,124(sp)
  8097c8:	00c001c4 	movi	r3,7
  8097cc:	1880a716 	blt	r3,r2,809a6c <___vfprintf_internal_r+0x3d4>
  8097d0:	42000204 	addi	r8,r8,8
  8097d4:	d9402f17 	ldw	r5,188(sp)
  8097d8:	2c4b883a 	add	r5,r5,r17
  8097dc:	d9402f15 	stw	r5,188(sp)
  8097e0:	80800007 	ldb	r2,0(r16)
  8097e4:	1000a826 	beq	r2,zero,809a88 <___vfprintf_internal_r+0x3f0>
  8097e8:	84400047 	ldb	r17,1(r16)
  8097ec:	00bfffc4 	movi	r2,-1
  8097f0:	85400044 	addi	r21,r16,1
  8097f4:	d8002785 	stb	zero,158(sp)
  8097f8:	0007883a 	mov	r3,zero
  8097fc:	000f883a 	mov	r7,zero
  809800:	d8802915 	stw	r2,164(sp)
  809804:	d8003115 	stw	zero,196(sp)
  809808:	0025883a 	mov	r18,zero
  80980c:	01401604 	movi	r5,88
  809810:	01800244 	movi	r6,9
  809814:	02800a84 	movi	r10,42
  809818:	02401b04 	movi	r9,108
  80981c:	ad400044 	addi	r21,r21,1
  809820:	88bff804 	addi	r2,r17,-32
  809824:	28830436 	bltu	r5,r2,80a438 <___vfprintf_internal_r+0xda0>
  809828:	100490ba 	slli	r2,r2,2
  80982c:	01002074 	movhi	r4,129
  809830:	21261004 	addi	r4,r4,-26560
  809834:	1105883a 	add	r2,r2,r4
  809838:	10800017 	ldw	r2,0(r2)
  80983c:	1000683a 	jmp	r2
  809840:	0080a358 	cmpnei	r2,zero,653
  809844:	0080a438 	rdprs	r2,zero,656
  809848:	0080a438 	rdprs	r2,zero,656
  80984c:	0080a378 	rdprs	r2,zero,653
  809850:	0080a438 	rdprs	r2,zero,656
  809854:	0080a438 	rdprs	r2,zero,656
  809858:	0080a438 	rdprs	r2,zero,656
  80985c:	0080a438 	rdprs	r2,zero,656
  809860:	0080a438 	rdprs	r2,zero,656
  809864:	0080a438 	rdprs	r2,zero,656
  809868:	00809aec 	andhi	r2,zero,619
  80986c:	0080a294 	movui	r2,650
  809870:	0080a438 	rdprs	r2,zero,656
  809874:	008099b4 	movhi	r2,614
  809878:	00809b14 	movui	r2,620
  80987c:	0080a438 	rdprs	r2,zero,656
  809880:	00809b54 	movui	r2,621
  809884:	00809b60 	cmpeqi	r2,zero,621
  809888:	00809b60 	cmpeqi	r2,zero,621
  80988c:	00809b60 	cmpeqi	r2,zero,621
  809890:	00809b60 	cmpeqi	r2,zero,621
  809894:	00809b60 	cmpeqi	r2,zero,621
  809898:	00809b60 	cmpeqi	r2,zero,621
  80989c:	00809b60 	cmpeqi	r2,zero,621
  8098a0:	00809b60 	cmpeqi	r2,zero,621
  8098a4:	00809b60 	cmpeqi	r2,zero,621
  8098a8:	0080a438 	rdprs	r2,zero,656
  8098ac:	0080a438 	rdprs	r2,zero,656
  8098b0:	0080a438 	rdprs	r2,zero,656
  8098b4:	0080a438 	rdprs	r2,zero,656
  8098b8:	0080a438 	rdprs	r2,zero,656
  8098bc:	0080a438 	rdprs	r2,zero,656
  8098c0:	0080a438 	rdprs	r2,zero,656
  8098c4:	0080a438 	rdprs	r2,zero,656
  8098c8:	0080a438 	rdprs	r2,zero,656
  8098cc:	0080a438 	rdprs	r2,zero,656
  8098d0:	00809b94 	movui	r2,622
  8098d4:	00809c50 	cmplti	r2,zero,625
  8098d8:	0080a438 	rdprs	r2,zero,656
  8098dc:	00809c50 	cmplti	r2,zero,625
  8098e0:	0080a438 	rdprs	r2,zero,656
  8098e4:	0080a438 	rdprs	r2,zero,656
  8098e8:	0080a438 	rdprs	r2,zero,656
  8098ec:	0080a438 	rdprs	r2,zero,656
  8098f0:	00809cf0 	cmpltui	r2,zero,627
  8098f4:	0080a438 	rdprs	r2,zero,656
  8098f8:	0080a438 	rdprs	r2,zero,656
  8098fc:	00809cfc 	xorhi	r2,zero,627
  809900:	0080a438 	rdprs	r2,zero,656
  809904:	0080a438 	rdprs	r2,zero,656
  809908:	0080a438 	rdprs	r2,zero,656
  80990c:	0080a438 	rdprs	r2,zero,656
  809910:	0080a438 	rdprs	r2,zero,656
  809914:	0080a174 	movhi	r2,645
  809918:	0080a438 	rdprs	r2,zero,656
  80991c:	0080a438 	rdprs	r2,zero,656
  809920:	0080a1d4 	movui	r2,647
  809924:	0080a438 	rdprs	r2,zero,656
  809928:	0080a438 	rdprs	r2,zero,656
  80992c:	0080a438 	rdprs	r2,zero,656
  809930:	0080a438 	rdprs	r2,zero,656
  809934:	0080a438 	rdprs	r2,zero,656
  809938:	0080a438 	rdprs	r2,zero,656
  80993c:	0080a438 	rdprs	r2,zero,656
  809940:	0080a438 	rdprs	r2,zero,656
  809944:	0080a438 	rdprs	r2,zero,656
  809948:	0080a438 	rdprs	r2,zero,656
  80994c:	0080a3e4 	muli	r2,zero,655
  809950:	0080a384 	movi	r2,654
  809954:	00809c50 	cmplti	r2,zero,625
  809958:	00809c50 	cmplti	r2,zero,625
  80995c:	00809c50 	cmplti	r2,zero,625
  809960:	0080a394 	movui	r2,654
  809964:	0080a384 	movi	r2,654
  809968:	0080a438 	rdprs	r2,zero,656
  80996c:	0080a438 	rdprs	r2,zero,656
  809970:	0080a3a0 	cmpeqi	r2,zero,654
  809974:	0080a438 	rdprs	r2,zero,656
  809978:	0080a3b0 	cmpltui	r2,zero,654
  80997c:	0080a284 	movi	r2,650
  809980:	008099c0 	call	8099c <__reset-0x77f664>
  809984:	0080a2a4 	muli	r2,zero,650
  809988:	0080a438 	rdprs	r2,zero,656
  80998c:	0080a2b0 	cmpltui	r2,zero,650
  809990:	0080a438 	rdprs	r2,zero,656
  809994:	0080a30c 	andi	r2,zero,652
  809998:	0080a438 	rdprs	r2,zero,656
  80999c:	0080a438 	rdprs	r2,zero,656
  8099a0:	0080a31c 	xori	r2,zero,652
  8099a4:	d9003117 	ldw	r4,196(sp)
  8099a8:	d8802d15 	stw	r2,180(sp)
  8099ac:	0109c83a 	sub	r4,zero,r4
  8099b0:	d9003115 	stw	r4,196(sp)
  8099b4:	94800114 	ori	r18,r18,4
  8099b8:	ac400007 	ldb	r17,0(r21)
  8099bc:	003f9706 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  8099c0:	00800c04 	movi	r2,48
  8099c4:	d9002d17 	ldw	r4,180(sp)
  8099c8:	d9402917 	ldw	r5,164(sp)
  8099cc:	d8802705 	stb	r2,156(sp)
  8099d0:	00801e04 	movi	r2,120
  8099d4:	d8802745 	stb	r2,157(sp)
  8099d8:	d8002785 	stb	zero,158(sp)
  8099dc:	20c00104 	addi	r3,r4,4
  8099e0:	24c00017 	ldw	r19,0(r4)
  8099e4:	002d883a 	mov	r22,zero
  8099e8:	90800094 	ori	r2,r18,2
  8099ec:	28029a16 	blt	r5,zero,80a458 <___vfprintf_internal_r+0xdc0>
  8099f0:	00bfdfc4 	movi	r2,-129
  8099f4:	90a4703a 	and	r18,r18,r2
  8099f8:	d8c02d15 	stw	r3,180(sp)
  8099fc:	94800094 	ori	r18,r18,2
  809a00:	9802871e 	bne	r19,zero,80a420 <___vfprintf_internal_r+0xd88>
  809a04:	00802074 	movhi	r2,129
  809a08:	109d2004 	addi	r2,r2,29824
  809a0c:	d8803915 	stw	r2,228(sp)
  809a10:	04401e04 	movi	r17,120
  809a14:	d8802917 	ldw	r2,164(sp)
  809a18:	0039883a 	mov	fp,zero
  809a1c:	1001e926 	beq	r2,zero,80a1c4 <___vfprintf_internal_r+0xb2c>
  809a20:	0027883a 	mov	r19,zero
  809a24:	002d883a 	mov	r22,zero
  809a28:	00020506 	br	80a240 <___vfprintf_internal_r+0xba8>
  809a2c:	d9002c17 	ldw	r4,176(sp)
  809a30:	b80b883a 	mov	r5,r23
  809a34:	080bb240 	call	80bb24 <__swsetup_r>
  809a38:	1005ac1e 	bne	r2,zero,80b0ec <___vfprintf_internal_r+0x1a54>
  809a3c:	b880030b 	ldhu	r2,12(r23)
  809a40:	00c00284 	movi	r3,10
  809a44:	1080068c 	andi	r2,r2,26
  809a48:	10ff3c1e 	bne	r2,r3,80973c <__alt_mem_onchip_mem+0xff80173c>
  809a4c:	b880038f 	ldh	r2,14(r23)
  809a50:	103f3a16 	blt	r2,zero,80973c <__alt_mem_onchip_mem+0xff80173c>
  809a54:	d9c02d17 	ldw	r7,180(sp)
  809a58:	d9002c17 	ldw	r4,176(sp)
  809a5c:	a80d883a 	mov	r6,r21
  809a60:	b80b883a 	mov	r5,r23
  809a64:	080b8ac0 	call	80b8ac <__sbprintf>
  809a68:	00001106 	br	809ab0 <___vfprintf_internal_r+0x418>
  809a6c:	d9002c17 	ldw	r4,176(sp)
  809a70:	d9801e04 	addi	r6,sp,120
  809a74:	b80b883a 	mov	r5,r23
  809a78:	080f7e00 	call	80f7e0 <__sprint_r>
  809a7c:	1000081e 	bne	r2,zero,809aa0 <___vfprintf_internal_r+0x408>
  809a80:	da000404 	addi	r8,sp,16
  809a84:	003f5306 	br	8097d4 <__alt_mem_onchip_mem+0xff8017d4>
  809a88:	d8802017 	ldw	r2,128(sp)
  809a8c:	10000426 	beq	r2,zero,809aa0 <___vfprintf_internal_r+0x408>
  809a90:	d9002c17 	ldw	r4,176(sp)
  809a94:	d9801e04 	addi	r6,sp,120
  809a98:	b80b883a 	mov	r5,r23
  809a9c:	080f7e00 	call	80f7e0 <__sprint_r>
  809aa0:	b880030b 	ldhu	r2,12(r23)
  809aa4:	1080100c 	andi	r2,r2,64
  809aa8:	1005901e 	bne	r2,zero,80b0ec <___vfprintf_internal_r+0x1a54>
  809aac:	d8802f17 	ldw	r2,188(sp)
  809ab0:	dfc04717 	ldw	ra,284(sp)
  809ab4:	df004617 	ldw	fp,280(sp)
  809ab8:	ddc04517 	ldw	r23,276(sp)
  809abc:	dd804417 	ldw	r22,272(sp)
  809ac0:	dd404317 	ldw	r21,268(sp)
  809ac4:	dd004217 	ldw	r20,264(sp)
  809ac8:	dcc04117 	ldw	r19,260(sp)
  809acc:	dc804017 	ldw	r18,256(sp)
  809ad0:	dc403f17 	ldw	r17,252(sp)
  809ad4:	dc003e17 	ldw	r16,248(sp)
  809ad8:	dec04804 	addi	sp,sp,288
  809adc:	f800283a 	ret
  809ae0:	d9002c17 	ldw	r4,176(sp)
  809ae4:	08078140 	call	807814 <__sinit>
  809ae8:	003f0406 	br	8096fc <__alt_mem_onchip_mem+0xff8016fc>
  809aec:	d8802d17 	ldw	r2,180(sp)
  809af0:	d9002d17 	ldw	r4,180(sp)
  809af4:	10800017 	ldw	r2,0(r2)
  809af8:	d8803115 	stw	r2,196(sp)
  809afc:	20800104 	addi	r2,r4,4
  809b00:	d9003117 	ldw	r4,196(sp)
  809b04:	203fa716 	blt	r4,zero,8099a4 <__alt_mem_onchip_mem+0xff8019a4>
  809b08:	d8802d15 	stw	r2,180(sp)
  809b0c:	ac400007 	ldb	r17,0(r21)
  809b10:	003f4206 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  809b14:	ac400007 	ldb	r17,0(r21)
  809b18:	aac00044 	addi	r11,r21,1
  809b1c:	8a872826 	beq	r17,r10,80b7c0 <___vfprintf_internal_r+0x2128>
  809b20:	88bff404 	addi	r2,r17,-48
  809b24:	0009883a 	mov	r4,zero
  809b28:	30867d36 	bltu	r6,r2,80b520 <___vfprintf_internal_r+0x1e88>
  809b2c:	5c400007 	ldb	r17,0(r11)
  809b30:	210002a4 	muli	r4,r4,10
  809b34:	5d400044 	addi	r21,r11,1
  809b38:	a817883a 	mov	r11,r21
  809b3c:	2089883a 	add	r4,r4,r2
  809b40:	88bff404 	addi	r2,r17,-48
  809b44:	30bff92e 	bgeu	r6,r2,809b2c <__alt_mem_onchip_mem+0xff801b2c>
  809b48:	2005c916 	blt	r4,zero,80b270 <___vfprintf_internal_r+0x1bd8>
  809b4c:	d9002915 	stw	r4,164(sp)
  809b50:	003f3306 	br	809820 <__alt_mem_onchip_mem+0xff801820>
  809b54:	94802014 	ori	r18,r18,128
  809b58:	ac400007 	ldb	r17,0(r21)
  809b5c:	003f2f06 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  809b60:	a809883a 	mov	r4,r21
  809b64:	d8003115 	stw	zero,196(sp)
  809b68:	88bff404 	addi	r2,r17,-48
  809b6c:	0017883a 	mov	r11,zero
  809b70:	24400007 	ldb	r17,0(r4)
  809b74:	5ac002a4 	muli	r11,r11,10
  809b78:	ad400044 	addi	r21,r21,1
  809b7c:	a809883a 	mov	r4,r21
  809b80:	12d7883a 	add	r11,r2,r11
  809b84:	88bff404 	addi	r2,r17,-48
  809b88:	30bff92e 	bgeu	r6,r2,809b70 <__alt_mem_onchip_mem+0xff801b70>
  809b8c:	dac03115 	stw	r11,196(sp)
  809b90:	003f2306 	br	809820 <__alt_mem_onchip_mem+0xff801820>
  809b94:	18c03fcc 	andi	r3,r3,255
  809b98:	18072b1e 	bne	r3,zero,80b848 <___vfprintf_internal_r+0x21b0>
  809b9c:	94800414 	ori	r18,r18,16
  809ba0:	9080080c 	andi	r2,r18,32
  809ba4:	10037b26 	beq	r2,zero,80a994 <___vfprintf_internal_r+0x12fc>
  809ba8:	d9402d17 	ldw	r5,180(sp)
  809bac:	28800117 	ldw	r2,4(r5)
  809bb0:	2cc00017 	ldw	r19,0(r5)
  809bb4:	29400204 	addi	r5,r5,8
  809bb8:	d9402d15 	stw	r5,180(sp)
  809bbc:	102d883a 	mov	r22,r2
  809bc0:	10044b16 	blt	r2,zero,80acf0 <___vfprintf_internal_r+0x1658>
  809bc4:	d9402917 	ldw	r5,164(sp)
  809bc8:	df002783 	ldbu	fp,158(sp)
  809bcc:	2803bc16 	blt	r5,zero,80aac0 <___vfprintf_internal_r+0x1428>
  809bd0:	00ffdfc4 	movi	r3,-129
  809bd4:	9d84b03a 	or	r2,r19,r22
  809bd8:	90e4703a 	and	r18,r18,r3
  809bdc:	10017726 	beq	r2,zero,80a1bc <___vfprintf_internal_r+0xb24>
  809be0:	b0038326 	beq	r22,zero,80a9f0 <___vfprintf_internal_r+0x1358>
  809be4:	dc402a15 	stw	r17,168(sp)
  809be8:	dc001e04 	addi	r16,sp,120
  809bec:	b023883a 	mov	r17,r22
  809bf0:	402d883a 	mov	r22,r8
  809bf4:	9809883a 	mov	r4,r19
  809bf8:	880b883a 	mov	r5,r17
  809bfc:	01800284 	movi	r6,10
  809c00:	000f883a 	mov	r7,zero
  809c04:	08117580 	call	811758 <__umoddi3>
  809c08:	10800c04 	addi	r2,r2,48
  809c0c:	843fffc4 	addi	r16,r16,-1
  809c10:	9809883a 	mov	r4,r19
  809c14:	880b883a 	mov	r5,r17
  809c18:	80800005 	stb	r2,0(r16)
  809c1c:	01800284 	movi	r6,10
  809c20:	000f883a 	mov	r7,zero
  809c24:	08111e00 	call	8111e0 <__udivdi3>
  809c28:	1027883a 	mov	r19,r2
  809c2c:	10c4b03a 	or	r2,r2,r3
  809c30:	1823883a 	mov	r17,r3
  809c34:	103fef1e 	bne	r2,zero,809bf4 <__alt_mem_onchip_mem+0xff801bf4>
  809c38:	d8c02817 	ldw	r3,160(sp)
  809c3c:	dc402a17 	ldw	r17,168(sp)
  809c40:	b011883a 	mov	r8,r22
  809c44:	1c07c83a 	sub	r3,r3,r16
  809c48:	d8c02e15 	stw	r3,184(sp)
  809c4c:	00005906 	br	809db4 <___vfprintf_internal_r+0x71c>
  809c50:	18c03fcc 	andi	r3,r3,255
  809c54:	1806fa1e 	bne	r3,zero,80b840 <___vfprintf_internal_r+0x21a8>
  809c58:	9080020c 	andi	r2,r18,8
  809c5c:	10048a26 	beq	r2,zero,80ae88 <___vfprintf_internal_r+0x17f0>
  809c60:	d8c02d17 	ldw	r3,180(sp)
  809c64:	d9002d17 	ldw	r4,180(sp)
  809c68:	d9402d17 	ldw	r5,180(sp)
  809c6c:	18c00017 	ldw	r3,0(r3)
  809c70:	21000117 	ldw	r4,4(r4)
  809c74:	29400204 	addi	r5,r5,8
  809c78:	d8c03615 	stw	r3,216(sp)
  809c7c:	d9003815 	stw	r4,224(sp)
  809c80:	d9402d15 	stw	r5,180(sp)
  809c84:	d9003617 	ldw	r4,216(sp)
  809c88:	d9403817 	ldw	r5,224(sp)
  809c8c:	da003d15 	stw	r8,244(sp)
  809c90:	04000044 	movi	r16,1
  809c94:	080f5940 	call	80f594 <__fpclassifyd>
  809c98:	da003d17 	ldw	r8,244(sp)
  809c9c:	14041f1e 	bne	r2,r16,80ad1c <___vfprintf_internal_r+0x1684>
  809ca0:	d9003617 	ldw	r4,216(sp)
  809ca4:	d9403817 	ldw	r5,224(sp)
  809ca8:	000d883a 	mov	r6,zero
  809cac:	000f883a 	mov	r7,zero
  809cb0:	08065e80 	call	8065e8 <__ledf2>
  809cb4:	da003d17 	ldw	r8,244(sp)
  809cb8:	1005be16 	blt	r2,zero,80b3b4 <___vfprintf_internal_r+0x1d1c>
  809cbc:	df002783 	ldbu	fp,158(sp)
  809cc0:	008011c4 	movi	r2,71
  809cc4:	1445330e 	bge	r2,r17,80b194 <___vfprintf_internal_r+0x1afc>
  809cc8:	04002074 	movhi	r16,129
  809ccc:	841d1804 	addi	r16,r16,29792
  809cd0:	00c000c4 	movi	r3,3
  809cd4:	00bfdfc4 	movi	r2,-129
  809cd8:	d8c02a15 	stw	r3,168(sp)
  809cdc:	90a4703a 	and	r18,r18,r2
  809ce0:	d8c02e15 	stw	r3,184(sp)
  809ce4:	d8002915 	stw	zero,164(sp)
  809ce8:	d8003215 	stw	zero,200(sp)
  809cec:	00003706 	br	809dcc <___vfprintf_internal_r+0x734>
  809cf0:	94800214 	ori	r18,r18,8
  809cf4:	ac400007 	ldb	r17,0(r21)
  809cf8:	003ec806 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  809cfc:	18c03fcc 	andi	r3,r3,255
  809d00:	1806db1e 	bne	r3,zero,80b870 <___vfprintf_internal_r+0x21d8>
  809d04:	94800414 	ori	r18,r18,16
  809d08:	9080080c 	andi	r2,r18,32
  809d0c:	1002d826 	beq	r2,zero,80a870 <___vfprintf_internal_r+0x11d8>
  809d10:	d9402d17 	ldw	r5,180(sp)
  809d14:	d8c02917 	ldw	r3,164(sp)
  809d18:	d8002785 	stb	zero,158(sp)
  809d1c:	28800204 	addi	r2,r5,8
  809d20:	2cc00017 	ldw	r19,0(r5)
  809d24:	2d800117 	ldw	r22,4(r5)
  809d28:	18048f16 	blt	r3,zero,80af68 <___vfprintf_internal_r+0x18d0>
  809d2c:	013fdfc4 	movi	r4,-129
  809d30:	9d86b03a 	or	r3,r19,r22
  809d34:	d8802d15 	stw	r2,180(sp)
  809d38:	9124703a 	and	r18,r18,r4
  809d3c:	1802d91e 	bne	r3,zero,80a8a4 <___vfprintf_internal_r+0x120c>
  809d40:	d8c02917 	ldw	r3,164(sp)
  809d44:	0039883a 	mov	fp,zero
  809d48:	1805c326 	beq	r3,zero,80b458 <___vfprintf_internal_r+0x1dc0>
  809d4c:	0027883a 	mov	r19,zero
  809d50:	002d883a 	mov	r22,zero
  809d54:	dc001e04 	addi	r16,sp,120
  809d58:	9806d0fa 	srli	r3,r19,3
  809d5c:	b008977a 	slli	r4,r22,29
  809d60:	b02cd0fa 	srli	r22,r22,3
  809d64:	9cc001cc 	andi	r19,r19,7
  809d68:	98800c04 	addi	r2,r19,48
  809d6c:	843fffc4 	addi	r16,r16,-1
  809d70:	20e6b03a 	or	r19,r4,r3
  809d74:	80800005 	stb	r2,0(r16)
  809d78:	9d86b03a 	or	r3,r19,r22
  809d7c:	183ff61e 	bne	r3,zero,809d58 <__alt_mem_onchip_mem+0xff801d58>
  809d80:	90c0004c 	andi	r3,r18,1
  809d84:	18013b26 	beq	r3,zero,80a274 <___vfprintf_internal_r+0xbdc>
  809d88:	10803fcc 	andi	r2,r2,255
  809d8c:	1080201c 	xori	r2,r2,128
  809d90:	10bfe004 	addi	r2,r2,-128
  809d94:	00c00c04 	movi	r3,48
  809d98:	10c13626 	beq	r2,r3,80a274 <___vfprintf_internal_r+0xbdc>
  809d9c:	80ffffc5 	stb	r3,-1(r16)
  809da0:	d8c02817 	ldw	r3,160(sp)
  809da4:	80bfffc4 	addi	r2,r16,-1
  809da8:	1021883a 	mov	r16,r2
  809dac:	1887c83a 	sub	r3,r3,r2
  809db0:	d8c02e15 	stw	r3,184(sp)
  809db4:	d8802e17 	ldw	r2,184(sp)
  809db8:	d9002917 	ldw	r4,164(sp)
  809dbc:	1100010e 	bge	r2,r4,809dc4 <___vfprintf_internal_r+0x72c>
  809dc0:	2005883a 	mov	r2,r4
  809dc4:	d8802a15 	stw	r2,168(sp)
  809dc8:	d8003215 	stw	zero,200(sp)
  809dcc:	e7003fcc 	andi	fp,fp,255
  809dd0:	e700201c 	xori	fp,fp,128
  809dd4:	e73fe004 	addi	fp,fp,-128
  809dd8:	e0000326 	beq	fp,zero,809de8 <___vfprintf_internal_r+0x750>
  809ddc:	d8c02a17 	ldw	r3,168(sp)
  809de0:	18c00044 	addi	r3,r3,1
  809de4:	d8c02a15 	stw	r3,168(sp)
  809de8:	90c0008c 	andi	r3,r18,2
  809dec:	d8c02b15 	stw	r3,172(sp)
  809df0:	18000326 	beq	r3,zero,809e00 <___vfprintf_internal_r+0x768>
  809df4:	d8c02a17 	ldw	r3,168(sp)
  809df8:	18c00084 	addi	r3,r3,2
  809dfc:	d8c02a15 	stw	r3,168(sp)
  809e00:	90c0210c 	andi	r3,r18,132
  809e04:	d8c03015 	stw	r3,192(sp)
  809e08:	1801a31e 	bne	r3,zero,80a498 <___vfprintf_internal_r+0xe00>
  809e0c:	d9003117 	ldw	r4,196(sp)
  809e10:	d8c02a17 	ldw	r3,168(sp)
  809e14:	20e7c83a 	sub	r19,r4,r3
  809e18:	04c19f0e 	bge	zero,r19,80a498 <___vfprintf_internal_r+0xe00>
  809e1c:	02400404 	movi	r9,16
  809e20:	d8c02017 	ldw	r3,128(sp)
  809e24:	d8801f17 	ldw	r2,124(sp)
  809e28:	4cc50d0e 	bge	r9,r19,80b260 <___vfprintf_internal_r+0x1bc8>
  809e2c:	01402074 	movhi	r5,129
  809e30:	295d2b84 	addi	r5,r5,29870
  809e34:	dc403b15 	stw	r17,236(sp)
  809e38:	d9403515 	stw	r5,212(sp)
  809e3c:	9823883a 	mov	r17,r19
  809e40:	482d883a 	mov	r22,r9
  809e44:	9027883a 	mov	r19,r18
  809e48:	070001c4 	movi	fp,7
  809e4c:	8025883a 	mov	r18,r16
  809e50:	dc002c17 	ldw	r16,176(sp)
  809e54:	00000306 	br	809e64 <___vfprintf_internal_r+0x7cc>
  809e58:	8c7ffc04 	addi	r17,r17,-16
  809e5c:	42000204 	addi	r8,r8,8
  809e60:	b440130e 	bge	r22,r17,809eb0 <___vfprintf_internal_r+0x818>
  809e64:	01002074 	movhi	r4,129
  809e68:	18c00404 	addi	r3,r3,16
  809e6c:	10800044 	addi	r2,r2,1
  809e70:	211d2b84 	addi	r4,r4,29870
  809e74:	41000015 	stw	r4,0(r8)
  809e78:	45800115 	stw	r22,4(r8)
  809e7c:	d8c02015 	stw	r3,128(sp)
  809e80:	d8801f15 	stw	r2,124(sp)
  809e84:	e0bff40e 	bge	fp,r2,809e58 <__alt_mem_onchip_mem+0xff801e58>
  809e88:	d9801e04 	addi	r6,sp,120
  809e8c:	b80b883a 	mov	r5,r23
  809e90:	8009883a 	mov	r4,r16
  809e94:	080f7e00 	call	80f7e0 <__sprint_r>
  809e98:	103f011e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  809e9c:	8c7ffc04 	addi	r17,r17,-16
  809ea0:	d8c02017 	ldw	r3,128(sp)
  809ea4:	d8801f17 	ldw	r2,124(sp)
  809ea8:	da000404 	addi	r8,sp,16
  809eac:	b47fed16 	blt	r22,r17,809e64 <__alt_mem_onchip_mem+0xff801e64>
  809eb0:	9021883a 	mov	r16,r18
  809eb4:	9825883a 	mov	r18,r19
  809eb8:	8827883a 	mov	r19,r17
  809ebc:	dc403b17 	ldw	r17,236(sp)
  809ec0:	d9403517 	ldw	r5,212(sp)
  809ec4:	98c7883a 	add	r3,r19,r3
  809ec8:	10800044 	addi	r2,r2,1
  809ecc:	41400015 	stw	r5,0(r8)
  809ed0:	44c00115 	stw	r19,4(r8)
  809ed4:	d8c02015 	stw	r3,128(sp)
  809ed8:	d8801f15 	stw	r2,124(sp)
  809edc:	010001c4 	movi	r4,7
  809ee0:	2082a316 	blt	r4,r2,80a970 <___vfprintf_internal_r+0x12d8>
  809ee4:	df002787 	ldb	fp,158(sp)
  809ee8:	42000204 	addi	r8,r8,8
  809eec:	e0000c26 	beq	fp,zero,809f20 <___vfprintf_internal_r+0x888>
  809ef0:	d8801f17 	ldw	r2,124(sp)
  809ef4:	d9002784 	addi	r4,sp,158
  809ef8:	18c00044 	addi	r3,r3,1
  809efc:	10800044 	addi	r2,r2,1
  809f00:	41000015 	stw	r4,0(r8)
  809f04:	01000044 	movi	r4,1
  809f08:	41000115 	stw	r4,4(r8)
  809f0c:	d8c02015 	stw	r3,128(sp)
  809f10:	d8801f15 	stw	r2,124(sp)
  809f14:	010001c4 	movi	r4,7
  809f18:	20823c16 	blt	r4,r2,80a80c <___vfprintf_internal_r+0x1174>
  809f1c:	42000204 	addi	r8,r8,8
  809f20:	d8802b17 	ldw	r2,172(sp)
  809f24:	10000c26 	beq	r2,zero,809f58 <___vfprintf_internal_r+0x8c0>
  809f28:	d8801f17 	ldw	r2,124(sp)
  809f2c:	d9002704 	addi	r4,sp,156
  809f30:	18c00084 	addi	r3,r3,2
  809f34:	10800044 	addi	r2,r2,1
  809f38:	41000015 	stw	r4,0(r8)
  809f3c:	01000084 	movi	r4,2
  809f40:	41000115 	stw	r4,4(r8)
  809f44:	d8c02015 	stw	r3,128(sp)
  809f48:	d8801f15 	stw	r2,124(sp)
  809f4c:	010001c4 	movi	r4,7
  809f50:	20823616 	blt	r4,r2,80a82c <___vfprintf_internal_r+0x1194>
  809f54:	42000204 	addi	r8,r8,8
  809f58:	d9003017 	ldw	r4,192(sp)
  809f5c:	00802004 	movi	r2,128
  809f60:	20819926 	beq	r4,r2,80a5c8 <___vfprintf_internal_r+0xf30>
  809f64:	d9402917 	ldw	r5,164(sp)
  809f68:	d8802e17 	ldw	r2,184(sp)
  809f6c:	28adc83a 	sub	r22,r5,r2
  809f70:	0580310e 	bge	zero,r22,80a038 <___vfprintf_internal_r+0x9a0>
  809f74:	07000404 	movi	fp,16
  809f78:	d8801f17 	ldw	r2,124(sp)
  809f7c:	e584140e 	bge	fp,r22,80afd0 <___vfprintf_internal_r+0x1938>
  809f80:	01402074 	movhi	r5,129
  809f84:	295d2784 	addi	r5,r5,29854
  809f88:	dc402915 	stw	r17,164(sp)
  809f8c:	d9402b15 	stw	r5,172(sp)
  809f90:	b023883a 	mov	r17,r22
  809f94:	04c001c4 	movi	r19,7
  809f98:	a82d883a 	mov	r22,r21
  809f9c:	902b883a 	mov	r21,r18
  809fa0:	8025883a 	mov	r18,r16
  809fa4:	dc002c17 	ldw	r16,176(sp)
  809fa8:	00000306 	br	809fb8 <___vfprintf_internal_r+0x920>
  809fac:	8c7ffc04 	addi	r17,r17,-16
  809fb0:	42000204 	addi	r8,r8,8
  809fb4:	e440110e 	bge	fp,r17,809ffc <___vfprintf_internal_r+0x964>
  809fb8:	18c00404 	addi	r3,r3,16
  809fbc:	10800044 	addi	r2,r2,1
  809fc0:	45000015 	stw	r20,0(r8)
  809fc4:	47000115 	stw	fp,4(r8)
  809fc8:	d8c02015 	stw	r3,128(sp)
  809fcc:	d8801f15 	stw	r2,124(sp)
  809fd0:	98bff60e 	bge	r19,r2,809fac <__alt_mem_onchip_mem+0xff801fac>
  809fd4:	d9801e04 	addi	r6,sp,120
  809fd8:	b80b883a 	mov	r5,r23
  809fdc:	8009883a 	mov	r4,r16
  809fe0:	080f7e00 	call	80f7e0 <__sprint_r>
  809fe4:	103eae1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  809fe8:	8c7ffc04 	addi	r17,r17,-16
  809fec:	d8c02017 	ldw	r3,128(sp)
  809ff0:	d8801f17 	ldw	r2,124(sp)
  809ff4:	da000404 	addi	r8,sp,16
  809ff8:	e47fef16 	blt	fp,r17,809fb8 <__alt_mem_onchip_mem+0xff801fb8>
  809ffc:	9021883a 	mov	r16,r18
  80a000:	a825883a 	mov	r18,r21
  80a004:	b02b883a 	mov	r21,r22
  80a008:	882d883a 	mov	r22,r17
  80a00c:	dc402917 	ldw	r17,164(sp)
  80a010:	d9002b17 	ldw	r4,172(sp)
  80a014:	1d87883a 	add	r3,r3,r22
  80a018:	10800044 	addi	r2,r2,1
  80a01c:	41000015 	stw	r4,0(r8)
  80a020:	45800115 	stw	r22,4(r8)
  80a024:	d8c02015 	stw	r3,128(sp)
  80a028:	d8801f15 	stw	r2,124(sp)
  80a02c:	010001c4 	movi	r4,7
  80a030:	2081ee16 	blt	r4,r2,80a7ec <___vfprintf_internal_r+0x1154>
  80a034:	42000204 	addi	r8,r8,8
  80a038:	9080400c 	andi	r2,r18,256
  80a03c:	1001181e 	bne	r2,zero,80a4a0 <___vfprintf_internal_r+0xe08>
  80a040:	d9402e17 	ldw	r5,184(sp)
  80a044:	d8801f17 	ldw	r2,124(sp)
  80a048:	44000015 	stw	r16,0(r8)
  80a04c:	1947883a 	add	r3,r3,r5
  80a050:	10800044 	addi	r2,r2,1
  80a054:	41400115 	stw	r5,4(r8)
  80a058:	d8c02015 	stw	r3,128(sp)
  80a05c:	d8801f15 	stw	r2,124(sp)
  80a060:	010001c4 	movi	r4,7
  80a064:	2081d316 	blt	r4,r2,80a7b4 <___vfprintf_internal_r+0x111c>
  80a068:	42000204 	addi	r8,r8,8
  80a06c:	9480010c 	andi	r18,r18,4
  80a070:	90003226 	beq	r18,zero,80a13c <___vfprintf_internal_r+0xaa4>
  80a074:	d9403117 	ldw	r5,196(sp)
  80a078:	d8802a17 	ldw	r2,168(sp)
  80a07c:	28a1c83a 	sub	r16,r5,r2
  80a080:	04002e0e 	bge	zero,r16,80a13c <___vfprintf_internal_r+0xaa4>
  80a084:	04400404 	movi	r17,16
  80a088:	d8801f17 	ldw	r2,124(sp)
  80a08c:	8c04a20e 	bge	r17,r16,80b318 <___vfprintf_internal_r+0x1c80>
  80a090:	01402074 	movhi	r5,129
  80a094:	295d2b84 	addi	r5,r5,29870
  80a098:	d9403515 	stw	r5,212(sp)
  80a09c:	048001c4 	movi	r18,7
  80a0a0:	dcc02c17 	ldw	r19,176(sp)
  80a0a4:	00000306 	br	80a0b4 <___vfprintf_internal_r+0xa1c>
  80a0a8:	843ffc04 	addi	r16,r16,-16
  80a0ac:	42000204 	addi	r8,r8,8
  80a0b0:	8c00130e 	bge	r17,r16,80a100 <___vfprintf_internal_r+0xa68>
  80a0b4:	01002074 	movhi	r4,129
  80a0b8:	18c00404 	addi	r3,r3,16
  80a0bc:	10800044 	addi	r2,r2,1
  80a0c0:	211d2b84 	addi	r4,r4,29870
  80a0c4:	41000015 	stw	r4,0(r8)
  80a0c8:	44400115 	stw	r17,4(r8)
  80a0cc:	d8c02015 	stw	r3,128(sp)
  80a0d0:	d8801f15 	stw	r2,124(sp)
  80a0d4:	90bff40e 	bge	r18,r2,80a0a8 <__alt_mem_onchip_mem+0xff8020a8>
  80a0d8:	d9801e04 	addi	r6,sp,120
  80a0dc:	b80b883a 	mov	r5,r23
  80a0e0:	9809883a 	mov	r4,r19
  80a0e4:	080f7e00 	call	80f7e0 <__sprint_r>
  80a0e8:	103e6d1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a0ec:	843ffc04 	addi	r16,r16,-16
  80a0f0:	d8c02017 	ldw	r3,128(sp)
  80a0f4:	d8801f17 	ldw	r2,124(sp)
  80a0f8:	da000404 	addi	r8,sp,16
  80a0fc:	8c3fed16 	blt	r17,r16,80a0b4 <__alt_mem_onchip_mem+0xff8020b4>
  80a100:	d9403517 	ldw	r5,212(sp)
  80a104:	1c07883a 	add	r3,r3,r16
  80a108:	10800044 	addi	r2,r2,1
  80a10c:	41400015 	stw	r5,0(r8)
  80a110:	44000115 	stw	r16,4(r8)
  80a114:	d8c02015 	stw	r3,128(sp)
  80a118:	d8801f15 	stw	r2,124(sp)
  80a11c:	010001c4 	movi	r4,7
  80a120:	2080060e 	bge	r4,r2,80a13c <___vfprintf_internal_r+0xaa4>
  80a124:	d9002c17 	ldw	r4,176(sp)
  80a128:	d9801e04 	addi	r6,sp,120
  80a12c:	b80b883a 	mov	r5,r23
  80a130:	080f7e00 	call	80f7e0 <__sprint_r>
  80a134:	103e5a1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a138:	d8c02017 	ldw	r3,128(sp)
  80a13c:	d8803117 	ldw	r2,196(sp)
  80a140:	d9002a17 	ldw	r4,168(sp)
  80a144:	1100010e 	bge	r2,r4,80a14c <___vfprintf_internal_r+0xab4>
  80a148:	2005883a 	mov	r2,r4
  80a14c:	d9402f17 	ldw	r5,188(sp)
  80a150:	288b883a 	add	r5,r5,r2
  80a154:	d9402f15 	stw	r5,188(sp)
  80a158:	18019e1e 	bne	r3,zero,80a7d4 <___vfprintf_internal_r+0x113c>
  80a15c:	a8800007 	ldb	r2,0(r21)
  80a160:	d8001f15 	stw	zero,124(sp)
  80a164:	da000404 	addi	r8,sp,16
  80a168:	103d851e 	bne	r2,zero,809780 <__alt_mem_onchip_mem+0xff801780>
  80a16c:	a821883a 	mov	r16,r21
  80a170:	003d9b06 	br	8097e0 <__alt_mem_onchip_mem+0xff8017e0>
  80a174:	18c03fcc 	andi	r3,r3,255
  80a178:	1805c11e 	bne	r3,zero,80b880 <___vfprintf_internal_r+0x21e8>
  80a17c:	94800414 	ori	r18,r18,16
  80a180:	9080080c 	andi	r2,r18,32
  80a184:	10020c26 	beq	r2,zero,80a9b8 <___vfprintf_internal_r+0x1320>
  80a188:	d8802d17 	ldw	r2,180(sp)
  80a18c:	d9002917 	ldw	r4,164(sp)
  80a190:	d8002785 	stb	zero,158(sp)
  80a194:	10c00204 	addi	r3,r2,8
  80a198:	14c00017 	ldw	r19,0(r2)
  80a19c:	15800117 	ldw	r22,4(r2)
  80a1a0:	20040f16 	blt	r4,zero,80b1e0 <___vfprintf_internal_r+0x1b48>
  80a1a4:	013fdfc4 	movi	r4,-129
  80a1a8:	9d84b03a 	or	r2,r19,r22
  80a1ac:	d8c02d15 	stw	r3,180(sp)
  80a1b0:	9124703a 	and	r18,r18,r4
  80a1b4:	0039883a 	mov	fp,zero
  80a1b8:	103e891e 	bne	r2,zero,809be0 <__alt_mem_onchip_mem+0xff801be0>
  80a1bc:	d9002917 	ldw	r4,164(sp)
  80a1c0:	2002c11e 	bne	r4,zero,80acc8 <___vfprintf_internal_r+0x1630>
  80a1c4:	d8002915 	stw	zero,164(sp)
  80a1c8:	d8002e15 	stw	zero,184(sp)
  80a1cc:	dc001e04 	addi	r16,sp,120
  80a1d0:	003ef806 	br	809db4 <__alt_mem_onchip_mem+0xff801db4>
  80a1d4:	18c03fcc 	andi	r3,r3,255
  80a1d8:	18059d1e 	bne	r3,zero,80b850 <___vfprintf_internal_r+0x21b8>
  80a1dc:	01402074 	movhi	r5,129
  80a1e0:	295d1b04 	addi	r5,r5,29804
  80a1e4:	d9403915 	stw	r5,228(sp)
  80a1e8:	9080080c 	andi	r2,r18,32
  80a1ec:	10005226 	beq	r2,zero,80a338 <___vfprintf_internal_r+0xca0>
  80a1f0:	d8802d17 	ldw	r2,180(sp)
  80a1f4:	14c00017 	ldw	r19,0(r2)
  80a1f8:	15800117 	ldw	r22,4(r2)
  80a1fc:	10800204 	addi	r2,r2,8
  80a200:	d8802d15 	stw	r2,180(sp)
  80a204:	9080004c 	andi	r2,r18,1
  80a208:	10019026 	beq	r2,zero,80a84c <___vfprintf_internal_r+0x11b4>
  80a20c:	9d84b03a 	or	r2,r19,r22
  80a210:	10036926 	beq	r2,zero,80afb8 <___vfprintf_internal_r+0x1920>
  80a214:	d8c02917 	ldw	r3,164(sp)
  80a218:	00800c04 	movi	r2,48
  80a21c:	d8802705 	stb	r2,156(sp)
  80a220:	dc402745 	stb	r17,157(sp)
  80a224:	d8002785 	stb	zero,158(sp)
  80a228:	90800094 	ori	r2,r18,2
  80a22c:	18045d16 	blt	r3,zero,80b3a4 <___vfprintf_internal_r+0x1d0c>
  80a230:	00bfdfc4 	movi	r2,-129
  80a234:	90a4703a 	and	r18,r18,r2
  80a238:	94800094 	ori	r18,r18,2
  80a23c:	0039883a 	mov	fp,zero
  80a240:	d9003917 	ldw	r4,228(sp)
  80a244:	dc001e04 	addi	r16,sp,120
  80a248:	988003cc 	andi	r2,r19,15
  80a24c:	b006973a 	slli	r3,r22,28
  80a250:	2085883a 	add	r2,r4,r2
  80a254:	9826d13a 	srli	r19,r19,4
  80a258:	10800003 	ldbu	r2,0(r2)
  80a25c:	b02cd13a 	srli	r22,r22,4
  80a260:	843fffc4 	addi	r16,r16,-1
  80a264:	1ce6b03a 	or	r19,r3,r19
  80a268:	80800005 	stb	r2,0(r16)
  80a26c:	9d84b03a 	or	r2,r19,r22
  80a270:	103ff51e 	bne	r2,zero,80a248 <__alt_mem_onchip_mem+0xff802248>
  80a274:	d8c02817 	ldw	r3,160(sp)
  80a278:	1c07c83a 	sub	r3,r3,r16
  80a27c:	d8c02e15 	stw	r3,184(sp)
  80a280:	003ecc06 	br	809db4 <__alt_mem_onchip_mem+0xff801db4>
  80a284:	18c03fcc 	andi	r3,r3,255
  80a288:	183e9f26 	beq	r3,zero,809d08 <__alt_mem_onchip_mem+0xff801d08>
  80a28c:	d9c02785 	stb	r7,158(sp)
  80a290:	003e9d06 	br	809d08 <__alt_mem_onchip_mem+0xff801d08>
  80a294:	00c00044 	movi	r3,1
  80a298:	01c00ac4 	movi	r7,43
  80a29c:	ac400007 	ldb	r17,0(r21)
  80a2a0:	003d5e06 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80a2a4:	94800814 	ori	r18,r18,32
  80a2a8:	ac400007 	ldb	r17,0(r21)
  80a2ac:	003d5b06 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80a2b0:	d8c02d17 	ldw	r3,180(sp)
  80a2b4:	d8002785 	stb	zero,158(sp)
  80a2b8:	1c000017 	ldw	r16,0(r3)
  80a2bc:	1cc00104 	addi	r19,r3,4
  80a2c0:	80041926 	beq	r16,zero,80b328 <___vfprintf_internal_r+0x1c90>
  80a2c4:	d9002917 	ldw	r4,164(sp)
  80a2c8:	2003d016 	blt	r4,zero,80b20c <___vfprintf_internal_r+0x1b74>
  80a2cc:	200d883a 	mov	r6,r4
  80a2d0:	000b883a 	mov	r5,zero
  80a2d4:	8009883a 	mov	r4,r16
  80a2d8:	da003d15 	stw	r8,244(sp)
  80a2dc:	080dc4c0 	call	80dc4c <memchr>
  80a2e0:	da003d17 	ldw	r8,244(sp)
  80a2e4:	10045426 	beq	r2,zero,80b438 <___vfprintf_internal_r+0x1da0>
  80a2e8:	1405c83a 	sub	r2,r2,r16
  80a2ec:	d8802e15 	stw	r2,184(sp)
  80a2f0:	1003cc16 	blt	r2,zero,80b224 <___vfprintf_internal_r+0x1b8c>
  80a2f4:	df002783 	ldbu	fp,158(sp)
  80a2f8:	d8802a15 	stw	r2,168(sp)
  80a2fc:	dcc02d15 	stw	r19,180(sp)
  80a300:	d8002915 	stw	zero,164(sp)
  80a304:	d8003215 	stw	zero,200(sp)
  80a308:	003eb006 	br	809dcc <__alt_mem_onchip_mem+0xff801dcc>
  80a30c:	18c03fcc 	andi	r3,r3,255
  80a310:	183f9b26 	beq	r3,zero,80a180 <__alt_mem_onchip_mem+0xff802180>
  80a314:	d9c02785 	stb	r7,158(sp)
  80a318:	003f9906 	br	80a180 <__alt_mem_onchip_mem+0xff802180>
  80a31c:	18c03fcc 	andi	r3,r3,255
  80a320:	1805551e 	bne	r3,zero,80b878 <___vfprintf_internal_r+0x21e0>
  80a324:	01402074 	movhi	r5,129
  80a328:	295d2004 	addi	r5,r5,29824
  80a32c:	d9403915 	stw	r5,228(sp)
  80a330:	9080080c 	andi	r2,r18,32
  80a334:	103fae1e 	bne	r2,zero,80a1f0 <__alt_mem_onchip_mem+0xff8021f0>
  80a338:	9080040c 	andi	r2,r18,16
  80a33c:	1002de26 	beq	r2,zero,80aeb8 <___vfprintf_internal_r+0x1820>
  80a340:	d8c02d17 	ldw	r3,180(sp)
  80a344:	002d883a 	mov	r22,zero
  80a348:	1cc00017 	ldw	r19,0(r3)
  80a34c:	18c00104 	addi	r3,r3,4
  80a350:	d8c02d15 	stw	r3,180(sp)
  80a354:	003fab06 	br	80a204 <__alt_mem_onchip_mem+0xff802204>
  80a358:	38803fcc 	andi	r2,r7,255
  80a35c:	1080201c 	xori	r2,r2,128
  80a360:	10bfe004 	addi	r2,r2,-128
  80a364:	1002d21e 	bne	r2,zero,80aeb0 <___vfprintf_internal_r+0x1818>
  80a368:	00c00044 	movi	r3,1
  80a36c:	01c00804 	movi	r7,32
  80a370:	ac400007 	ldb	r17,0(r21)
  80a374:	003d2906 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80a378:	94800054 	ori	r18,r18,1
  80a37c:	ac400007 	ldb	r17,0(r21)
  80a380:	003d2606 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80a384:	18c03fcc 	andi	r3,r3,255
  80a388:	183e0526 	beq	r3,zero,809ba0 <__alt_mem_onchip_mem+0xff801ba0>
  80a38c:	d9c02785 	stb	r7,158(sp)
  80a390:	003e0306 	br	809ba0 <__alt_mem_onchip_mem+0xff801ba0>
  80a394:	94801014 	ori	r18,r18,64
  80a398:	ac400007 	ldb	r17,0(r21)
  80a39c:	003d1f06 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80a3a0:	ac400007 	ldb	r17,0(r21)
  80a3a4:	8a438726 	beq	r17,r9,80b1c4 <___vfprintf_internal_r+0x1b2c>
  80a3a8:	94800414 	ori	r18,r18,16
  80a3ac:	003d1b06 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80a3b0:	18c03fcc 	andi	r3,r3,255
  80a3b4:	1805341e 	bne	r3,zero,80b888 <___vfprintf_internal_r+0x21f0>
  80a3b8:	9080080c 	andi	r2,r18,32
  80a3bc:	1002cd26 	beq	r2,zero,80aef4 <___vfprintf_internal_r+0x185c>
  80a3c0:	d9402d17 	ldw	r5,180(sp)
  80a3c4:	d9002f17 	ldw	r4,188(sp)
  80a3c8:	28800017 	ldw	r2,0(r5)
  80a3cc:	2007d7fa 	srai	r3,r4,31
  80a3d0:	29400104 	addi	r5,r5,4
  80a3d4:	d9402d15 	stw	r5,180(sp)
  80a3d8:	11000015 	stw	r4,0(r2)
  80a3dc:	10c00115 	stw	r3,4(r2)
  80a3e0:	003ce506 	br	809778 <__alt_mem_onchip_mem+0xff801778>
  80a3e4:	d8c02d17 	ldw	r3,180(sp)
  80a3e8:	d9002d17 	ldw	r4,180(sp)
  80a3ec:	d8002785 	stb	zero,158(sp)
  80a3f0:	18800017 	ldw	r2,0(r3)
  80a3f4:	21000104 	addi	r4,r4,4
  80a3f8:	00c00044 	movi	r3,1
  80a3fc:	d8c02a15 	stw	r3,168(sp)
  80a400:	d8801405 	stb	r2,80(sp)
  80a404:	d9002d15 	stw	r4,180(sp)
  80a408:	d8c02e15 	stw	r3,184(sp)
  80a40c:	d8002915 	stw	zero,164(sp)
  80a410:	d8003215 	stw	zero,200(sp)
  80a414:	dc001404 	addi	r16,sp,80
  80a418:	0039883a 	mov	fp,zero
  80a41c:	003e7206 	br	809de8 <__alt_mem_onchip_mem+0xff801de8>
  80a420:	01002074 	movhi	r4,129
  80a424:	211d2004 	addi	r4,r4,29824
  80a428:	0039883a 	mov	fp,zero
  80a42c:	d9003915 	stw	r4,228(sp)
  80a430:	04401e04 	movi	r17,120
  80a434:	003f8206 	br	80a240 <__alt_mem_onchip_mem+0xff802240>
  80a438:	18c03fcc 	andi	r3,r3,255
  80a43c:	1805061e 	bne	r3,zero,80b858 <___vfprintf_internal_r+0x21c0>
  80a440:	883d9126 	beq	r17,zero,809a88 <__alt_mem_onchip_mem+0xff801a88>
  80a444:	00c00044 	movi	r3,1
  80a448:	d8c02a15 	stw	r3,168(sp)
  80a44c:	dc401405 	stb	r17,80(sp)
  80a450:	d8002785 	stb	zero,158(sp)
  80a454:	003fec06 	br	80a408 <__alt_mem_onchip_mem+0xff802408>
  80a458:	01402074 	movhi	r5,129
  80a45c:	295d2004 	addi	r5,r5,29824
  80a460:	d9403915 	stw	r5,228(sp)
  80a464:	d8c02d15 	stw	r3,180(sp)
  80a468:	1025883a 	mov	r18,r2
  80a46c:	04401e04 	movi	r17,120
  80a470:	9d84b03a 	or	r2,r19,r22
  80a474:	1000fc1e 	bne	r2,zero,80a868 <___vfprintf_internal_r+0x11d0>
  80a478:	0039883a 	mov	fp,zero
  80a47c:	00800084 	movi	r2,2
  80a480:	10803fcc 	andi	r2,r2,255
  80a484:	00c00044 	movi	r3,1
  80a488:	10c20f26 	beq	r2,r3,80acc8 <___vfprintf_internal_r+0x1630>
  80a48c:	00c00084 	movi	r3,2
  80a490:	10fd6326 	beq	r2,r3,809a20 <__alt_mem_onchip_mem+0xff801a20>
  80a494:	003e2d06 	br	809d4c <__alt_mem_onchip_mem+0xff801d4c>
  80a498:	d8c02017 	ldw	r3,128(sp)
  80a49c:	003e9306 	br	809eec <__alt_mem_onchip_mem+0xff801eec>
  80a4a0:	00801944 	movi	r2,101
  80a4a4:	14407e0e 	bge	r2,r17,80a6a0 <___vfprintf_internal_r+0x1008>
  80a4a8:	d9003617 	ldw	r4,216(sp)
  80a4ac:	d9403817 	ldw	r5,224(sp)
  80a4b0:	000d883a 	mov	r6,zero
  80a4b4:	000f883a 	mov	r7,zero
  80a4b8:	d8c03c15 	stw	r3,240(sp)
  80a4bc:	da003d15 	stw	r8,244(sp)
  80a4c0:	081272c0 	call	81272c <__eqdf2>
  80a4c4:	d8c03c17 	ldw	r3,240(sp)
  80a4c8:	da003d17 	ldw	r8,244(sp)
  80a4cc:	1000f71e 	bne	r2,zero,80a8ac <___vfprintf_internal_r+0x1214>
  80a4d0:	d8801f17 	ldw	r2,124(sp)
  80a4d4:	01002074 	movhi	r4,129
  80a4d8:	211d2704 	addi	r4,r4,29852
  80a4dc:	18c00044 	addi	r3,r3,1
  80a4e0:	10800044 	addi	r2,r2,1
  80a4e4:	41000015 	stw	r4,0(r8)
  80a4e8:	01000044 	movi	r4,1
  80a4ec:	41000115 	stw	r4,4(r8)
  80a4f0:	d8c02015 	stw	r3,128(sp)
  80a4f4:	d8801f15 	stw	r2,124(sp)
  80a4f8:	010001c4 	movi	r4,7
  80a4fc:	2082b816 	blt	r4,r2,80afe0 <___vfprintf_internal_r+0x1948>
  80a500:	42000204 	addi	r8,r8,8
  80a504:	d8802617 	ldw	r2,152(sp)
  80a508:	d9403317 	ldw	r5,204(sp)
  80a50c:	11400216 	blt	r2,r5,80a518 <___vfprintf_internal_r+0xe80>
  80a510:	9080004c 	andi	r2,r18,1
  80a514:	103ed526 	beq	r2,zero,80a06c <__alt_mem_onchip_mem+0xff80206c>
  80a518:	d8803717 	ldw	r2,220(sp)
  80a51c:	d9003417 	ldw	r4,208(sp)
  80a520:	d9403717 	ldw	r5,220(sp)
  80a524:	1887883a 	add	r3,r3,r2
  80a528:	d8801f17 	ldw	r2,124(sp)
  80a52c:	41000015 	stw	r4,0(r8)
  80a530:	41400115 	stw	r5,4(r8)
  80a534:	10800044 	addi	r2,r2,1
  80a538:	d8c02015 	stw	r3,128(sp)
  80a53c:	d8801f15 	stw	r2,124(sp)
  80a540:	010001c4 	movi	r4,7
  80a544:	20832916 	blt	r4,r2,80b1ec <___vfprintf_internal_r+0x1b54>
  80a548:	42000204 	addi	r8,r8,8
  80a54c:	d8803317 	ldw	r2,204(sp)
  80a550:	143fffc4 	addi	r16,r2,-1
  80a554:	043ec50e 	bge	zero,r16,80a06c <__alt_mem_onchip_mem+0xff80206c>
  80a558:	04400404 	movi	r17,16
  80a55c:	d8801f17 	ldw	r2,124(sp)
  80a560:	8c00880e 	bge	r17,r16,80a784 <___vfprintf_internal_r+0x10ec>
  80a564:	01402074 	movhi	r5,129
  80a568:	295d2784 	addi	r5,r5,29854
  80a56c:	d9402b15 	stw	r5,172(sp)
  80a570:	058001c4 	movi	r22,7
  80a574:	dcc02c17 	ldw	r19,176(sp)
  80a578:	00000306 	br	80a588 <___vfprintf_internal_r+0xef0>
  80a57c:	42000204 	addi	r8,r8,8
  80a580:	843ffc04 	addi	r16,r16,-16
  80a584:	8c00820e 	bge	r17,r16,80a790 <___vfprintf_internal_r+0x10f8>
  80a588:	18c00404 	addi	r3,r3,16
  80a58c:	10800044 	addi	r2,r2,1
  80a590:	45000015 	stw	r20,0(r8)
  80a594:	44400115 	stw	r17,4(r8)
  80a598:	d8c02015 	stw	r3,128(sp)
  80a59c:	d8801f15 	stw	r2,124(sp)
  80a5a0:	b0bff60e 	bge	r22,r2,80a57c <__alt_mem_onchip_mem+0xff80257c>
  80a5a4:	d9801e04 	addi	r6,sp,120
  80a5a8:	b80b883a 	mov	r5,r23
  80a5ac:	9809883a 	mov	r4,r19
  80a5b0:	080f7e00 	call	80f7e0 <__sprint_r>
  80a5b4:	103d3a1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a5b8:	d8c02017 	ldw	r3,128(sp)
  80a5bc:	d8801f17 	ldw	r2,124(sp)
  80a5c0:	da000404 	addi	r8,sp,16
  80a5c4:	003fee06 	br	80a580 <__alt_mem_onchip_mem+0xff802580>
  80a5c8:	d9403117 	ldw	r5,196(sp)
  80a5cc:	d8802a17 	ldw	r2,168(sp)
  80a5d0:	28adc83a 	sub	r22,r5,r2
  80a5d4:	05be630e 	bge	zero,r22,809f64 <__alt_mem_onchip_mem+0xff801f64>
  80a5d8:	07000404 	movi	fp,16
  80a5dc:	d8801f17 	ldw	r2,124(sp)
  80a5e0:	e5838f0e 	bge	fp,r22,80b420 <___vfprintf_internal_r+0x1d88>
  80a5e4:	01402074 	movhi	r5,129
  80a5e8:	295d2784 	addi	r5,r5,29854
  80a5ec:	dc403015 	stw	r17,192(sp)
  80a5f0:	d9402b15 	stw	r5,172(sp)
  80a5f4:	b023883a 	mov	r17,r22
  80a5f8:	04c001c4 	movi	r19,7
  80a5fc:	a82d883a 	mov	r22,r21
  80a600:	902b883a 	mov	r21,r18
  80a604:	8025883a 	mov	r18,r16
  80a608:	dc002c17 	ldw	r16,176(sp)
  80a60c:	00000306 	br	80a61c <___vfprintf_internal_r+0xf84>
  80a610:	8c7ffc04 	addi	r17,r17,-16
  80a614:	42000204 	addi	r8,r8,8
  80a618:	e440110e 	bge	fp,r17,80a660 <___vfprintf_internal_r+0xfc8>
  80a61c:	18c00404 	addi	r3,r3,16
  80a620:	10800044 	addi	r2,r2,1
  80a624:	45000015 	stw	r20,0(r8)
  80a628:	47000115 	stw	fp,4(r8)
  80a62c:	d8c02015 	stw	r3,128(sp)
  80a630:	d8801f15 	stw	r2,124(sp)
  80a634:	98bff60e 	bge	r19,r2,80a610 <__alt_mem_onchip_mem+0xff802610>
  80a638:	d9801e04 	addi	r6,sp,120
  80a63c:	b80b883a 	mov	r5,r23
  80a640:	8009883a 	mov	r4,r16
  80a644:	080f7e00 	call	80f7e0 <__sprint_r>
  80a648:	103d151e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a64c:	8c7ffc04 	addi	r17,r17,-16
  80a650:	d8c02017 	ldw	r3,128(sp)
  80a654:	d8801f17 	ldw	r2,124(sp)
  80a658:	da000404 	addi	r8,sp,16
  80a65c:	e47fef16 	blt	fp,r17,80a61c <__alt_mem_onchip_mem+0xff80261c>
  80a660:	9021883a 	mov	r16,r18
  80a664:	a825883a 	mov	r18,r21
  80a668:	b02b883a 	mov	r21,r22
  80a66c:	882d883a 	mov	r22,r17
  80a670:	dc403017 	ldw	r17,192(sp)
  80a674:	d9002b17 	ldw	r4,172(sp)
  80a678:	1d87883a 	add	r3,r3,r22
  80a67c:	10800044 	addi	r2,r2,1
  80a680:	41000015 	stw	r4,0(r8)
  80a684:	45800115 	stw	r22,4(r8)
  80a688:	d8c02015 	stw	r3,128(sp)
  80a68c:	d8801f15 	stw	r2,124(sp)
  80a690:	010001c4 	movi	r4,7
  80a694:	20818e16 	blt	r4,r2,80acd0 <___vfprintf_internal_r+0x1638>
  80a698:	42000204 	addi	r8,r8,8
  80a69c:	003e3106 	br	809f64 <__alt_mem_onchip_mem+0xff801f64>
  80a6a0:	d9403317 	ldw	r5,204(sp)
  80a6a4:	00800044 	movi	r2,1
  80a6a8:	18c00044 	addi	r3,r3,1
  80a6ac:	1141530e 	bge	r2,r5,80abfc <___vfprintf_internal_r+0x1564>
  80a6b0:	dc401f17 	ldw	r17,124(sp)
  80a6b4:	00800044 	movi	r2,1
  80a6b8:	40800115 	stw	r2,4(r8)
  80a6bc:	8c400044 	addi	r17,r17,1
  80a6c0:	44000015 	stw	r16,0(r8)
  80a6c4:	d8c02015 	stw	r3,128(sp)
  80a6c8:	dc401f15 	stw	r17,124(sp)
  80a6cc:	008001c4 	movi	r2,7
  80a6d0:	14416b16 	blt	r2,r17,80ac80 <___vfprintf_internal_r+0x15e8>
  80a6d4:	42000204 	addi	r8,r8,8
  80a6d8:	d8803717 	ldw	r2,220(sp)
  80a6dc:	d9003417 	ldw	r4,208(sp)
  80a6e0:	8c400044 	addi	r17,r17,1
  80a6e4:	10c7883a 	add	r3,r2,r3
  80a6e8:	40800115 	stw	r2,4(r8)
  80a6ec:	41000015 	stw	r4,0(r8)
  80a6f0:	d8c02015 	stw	r3,128(sp)
  80a6f4:	dc401f15 	stw	r17,124(sp)
  80a6f8:	008001c4 	movi	r2,7
  80a6fc:	14416916 	blt	r2,r17,80aca4 <___vfprintf_internal_r+0x160c>
  80a700:	45800204 	addi	r22,r8,8
  80a704:	d9003617 	ldw	r4,216(sp)
  80a708:	d9403817 	ldw	r5,224(sp)
  80a70c:	000d883a 	mov	r6,zero
  80a710:	000f883a 	mov	r7,zero
  80a714:	d8c03c15 	stw	r3,240(sp)
  80a718:	081272c0 	call	81272c <__eqdf2>
  80a71c:	d8c03c17 	ldw	r3,240(sp)
  80a720:	1000bc26 	beq	r2,zero,80aa14 <___vfprintf_internal_r+0x137c>
  80a724:	d9403317 	ldw	r5,204(sp)
  80a728:	84000044 	addi	r16,r16,1
  80a72c:	8c400044 	addi	r17,r17,1
  80a730:	28bfffc4 	addi	r2,r5,-1
  80a734:	1887883a 	add	r3,r3,r2
  80a738:	b0800115 	stw	r2,4(r22)
  80a73c:	b4000015 	stw	r16,0(r22)
  80a740:	d8c02015 	stw	r3,128(sp)
  80a744:	dc401f15 	stw	r17,124(sp)
  80a748:	008001c4 	movi	r2,7
  80a74c:	14414316 	blt	r2,r17,80ac5c <___vfprintf_internal_r+0x15c4>
  80a750:	b5800204 	addi	r22,r22,8
  80a754:	d9003a17 	ldw	r4,232(sp)
  80a758:	df0022c4 	addi	fp,sp,139
  80a75c:	8c400044 	addi	r17,r17,1
  80a760:	20c7883a 	add	r3,r4,r3
  80a764:	b7000015 	stw	fp,0(r22)
  80a768:	b1000115 	stw	r4,4(r22)
  80a76c:	d8c02015 	stw	r3,128(sp)
  80a770:	dc401f15 	stw	r17,124(sp)
  80a774:	008001c4 	movi	r2,7
  80a778:	14400e16 	blt	r2,r17,80a7b4 <___vfprintf_internal_r+0x111c>
  80a77c:	b2000204 	addi	r8,r22,8
  80a780:	003e3a06 	br	80a06c <__alt_mem_onchip_mem+0xff80206c>
  80a784:	01002074 	movhi	r4,129
  80a788:	211d2784 	addi	r4,r4,29854
  80a78c:	d9002b15 	stw	r4,172(sp)
  80a790:	d9002b17 	ldw	r4,172(sp)
  80a794:	1c07883a 	add	r3,r3,r16
  80a798:	44000115 	stw	r16,4(r8)
  80a79c:	41000015 	stw	r4,0(r8)
  80a7a0:	10800044 	addi	r2,r2,1
  80a7a4:	d8c02015 	stw	r3,128(sp)
  80a7a8:	d8801f15 	stw	r2,124(sp)
  80a7ac:	010001c4 	movi	r4,7
  80a7b0:	20be2d0e 	bge	r4,r2,80a068 <__alt_mem_onchip_mem+0xff802068>
  80a7b4:	d9002c17 	ldw	r4,176(sp)
  80a7b8:	d9801e04 	addi	r6,sp,120
  80a7bc:	b80b883a 	mov	r5,r23
  80a7c0:	080f7e00 	call	80f7e0 <__sprint_r>
  80a7c4:	103cb61e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a7c8:	d8c02017 	ldw	r3,128(sp)
  80a7cc:	da000404 	addi	r8,sp,16
  80a7d0:	003e2606 	br	80a06c <__alt_mem_onchip_mem+0xff80206c>
  80a7d4:	d9002c17 	ldw	r4,176(sp)
  80a7d8:	d9801e04 	addi	r6,sp,120
  80a7dc:	b80b883a 	mov	r5,r23
  80a7e0:	080f7e00 	call	80f7e0 <__sprint_r>
  80a7e4:	103e5d26 	beq	r2,zero,80a15c <__alt_mem_onchip_mem+0xff80215c>
  80a7e8:	003cad06 	br	809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a7ec:	d9002c17 	ldw	r4,176(sp)
  80a7f0:	d9801e04 	addi	r6,sp,120
  80a7f4:	b80b883a 	mov	r5,r23
  80a7f8:	080f7e00 	call	80f7e0 <__sprint_r>
  80a7fc:	103ca81e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a800:	d8c02017 	ldw	r3,128(sp)
  80a804:	da000404 	addi	r8,sp,16
  80a808:	003e0b06 	br	80a038 <__alt_mem_onchip_mem+0xff802038>
  80a80c:	d9002c17 	ldw	r4,176(sp)
  80a810:	d9801e04 	addi	r6,sp,120
  80a814:	b80b883a 	mov	r5,r23
  80a818:	080f7e00 	call	80f7e0 <__sprint_r>
  80a81c:	103ca01e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a820:	d8c02017 	ldw	r3,128(sp)
  80a824:	da000404 	addi	r8,sp,16
  80a828:	003dbd06 	br	809f20 <__alt_mem_onchip_mem+0xff801f20>
  80a82c:	d9002c17 	ldw	r4,176(sp)
  80a830:	d9801e04 	addi	r6,sp,120
  80a834:	b80b883a 	mov	r5,r23
  80a838:	080f7e00 	call	80f7e0 <__sprint_r>
  80a83c:	103c981e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a840:	d8c02017 	ldw	r3,128(sp)
  80a844:	da000404 	addi	r8,sp,16
  80a848:	003dc306 	br	809f58 <__alt_mem_onchip_mem+0xff801f58>
  80a84c:	d8802917 	ldw	r2,164(sp)
  80a850:	d8002785 	stb	zero,158(sp)
  80a854:	103f0616 	blt	r2,zero,80a470 <__alt_mem_onchip_mem+0xff802470>
  80a858:	00ffdfc4 	movi	r3,-129
  80a85c:	9d84b03a 	or	r2,r19,r22
  80a860:	90e4703a 	and	r18,r18,r3
  80a864:	103c6b26 	beq	r2,zero,809a14 <__alt_mem_onchip_mem+0xff801a14>
  80a868:	0039883a 	mov	fp,zero
  80a86c:	003e7406 	br	80a240 <__alt_mem_onchip_mem+0xff802240>
  80a870:	9080040c 	andi	r2,r18,16
  80a874:	1001b326 	beq	r2,zero,80af44 <___vfprintf_internal_r+0x18ac>
  80a878:	d9002d17 	ldw	r4,180(sp)
  80a87c:	d9402917 	ldw	r5,164(sp)
  80a880:	d8002785 	stb	zero,158(sp)
  80a884:	20800104 	addi	r2,r4,4
  80a888:	24c00017 	ldw	r19,0(r4)
  80a88c:	002d883a 	mov	r22,zero
  80a890:	2801b516 	blt	r5,zero,80af68 <___vfprintf_internal_r+0x18d0>
  80a894:	00ffdfc4 	movi	r3,-129
  80a898:	d8802d15 	stw	r2,180(sp)
  80a89c:	90e4703a 	and	r18,r18,r3
  80a8a0:	983d2726 	beq	r19,zero,809d40 <__alt_mem_onchip_mem+0xff801d40>
  80a8a4:	0039883a 	mov	fp,zero
  80a8a8:	003d2a06 	br	809d54 <__alt_mem_onchip_mem+0xff801d54>
  80a8ac:	dc402617 	ldw	r17,152(sp)
  80a8b0:	0441d30e 	bge	zero,r17,80b000 <___vfprintf_internal_r+0x1968>
  80a8b4:	dc403217 	ldw	r17,200(sp)
  80a8b8:	d8803317 	ldw	r2,204(sp)
  80a8bc:	1440010e 	bge	r2,r17,80a8c4 <___vfprintf_internal_r+0x122c>
  80a8c0:	1023883a 	mov	r17,r2
  80a8c4:	04400a0e 	bge	zero,r17,80a8f0 <___vfprintf_internal_r+0x1258>
  80a8c8:	d8801f17 	ldw	r2,124(sp)
  80a8cc:	1c47883a 	add	r3,r3,r17
  80a8d0:	44000015 	stw	r16,0(r8)
  80a8d4:	10800044 	addi	r2,r2,1
  80a8d8:	44400115 	stw	r17,4(r8)
  80a8dc:	d8c02015 	stw	r3,128(sp)
  80a8e0:	d8801f15 	stw	r2,124(sp)
  80a8e4:	010001c4 	movi	r4,7
  80a8e8:	20826516 	blt	r4,r2,80b280 <___vfprintf_internal_r+0x1be8>
  80a8ec:	42000204 	addi	r8,r8,8
  80a8f0:	88026116 	blt	r17,zero,80b278 <___vfprintf_internal_r+0x1be0>
  80a8f4:	d9003217 	ldw	r4,200(sp)
  80a8f8:	2463c83a 	sub	r17,r4,r17
  80a8fc:	04407b0e 	bge	zero,r17,80aaec <___vfprintf_internal_r+0x1454>
  80a900:	05800404 	movi	r22,16
  80a904:	d8801f17 	ldw	r2,124(sp)
  80a908:	b4419d0e 	bge	r22,r17,80af80 <___vfprintf_internal_r+0x18e8>
  80a90c:	01002074 	movhi	r4,129
  80a910:	211d2784 	addi	r4,r4,29854
  80a914:	d9002b15 	stw	r4,172(sp)
  80a918:	070001c4 	movi	fp,7
  80a91c:	dcc02c17 	ldw	r19,176(sp)
  80a920:	00000306 	br	80a930 <___vfprintf_internal_r+0x1298>
  80a924:	42000204 	addi	r8,r8,8
  80a928:	8c7ffc04 	addi	r17,r17,-16
  80a92c:	b441970e 	bge	r22,r17,80af8c <___vfprintf_internal_r+0x18f4>
  80a930:	18c00404 	addi	r3,r3,16
  80a934:	10800044 	addi	r2,r2,1
  80a938:	45000015 	stw	r20,0(r8)
  80a93c:	45800115 	stw	r22,4(r8)
  80a940:	d8c02015 	stw	r3,128(sp)
  80a944:	d8801f15 	stw	r2,124(sp)
  80a948:	e0bff60e 	bge	fp,r2,80a924 <__alt_mem_onchip_mem+0xff802924>
  80a94c:	d9801e04 	addi	r6,sp,120
  80a950:	b80b883a 	mov	r5,r23
  80a954:	9809883a 	mov	r4,r19
  80a958:	080f7e00 	call	80f7e0 <__sprint_r>
  80a95c:	103c501e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a960:	d8c02017 	ldw	r3,128(sp)
  80a964:	d8801f17 	ldw	r2,124(sp)
  80a968:	da000404 	addi	r8,sp,16
  80a96c:	003fee06 	br	80a928 <__alt_mem_onchip_mem+0xff802928>
  80a970:	d9002c17 	ldw	r4,176(sp)
  80a974:	d9801e04 	addi	r6,sp,120
  80a978:	b80b883a 	mov	r5,r23
  80a97c:	080f7e00 	call	80f7e0 <__sprint_r>
  80a980:	103c471e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a984:	d8c02017 	ldw	r3,128(sp)
  80a988:	df002787 	ldb	fp,158(sp)
  80a98c:	da000404 	addi	r8,sp,16
  80a990:	003d5606 	br	809eec <__alt_mem_onchip_mem+0xff801eec>
  80a994:	9080040c 	andi	r2,r18,16
  80a998:	10016126 	beq	r2,zero,80af20 <___vfprintf_internal_r+0x1888>
  80a99c:	d8802d17 	ldw	r2,180(sp)
  80a9a0:	14c00017 	ldw	r19,0(r2)
  80a9a4:	10800104 	addi	r2,r2,4
  80a9a8:	d8802d15 	stw	r2,180(sp)
  80a9ac:	982dd7fa 	srai	r22,r19,31
  80a9b0:	b005883a 	mov	r2,r22
  80a9b4:	003c8206 	br	809bc0 <__alt_mem_onchip_mem+0xff801bc0>
  80a9b8:	9080040c 	andi	r2,r18,16
  80a9bc:	10003526 	beq	r2,zero,80aa94 <___vfprintf_internal_r+0x13fc>
  80a9c0:	d9402d17 	ldw	r5,180(sp)
  80a9c4:	d8c02917 	ldw	r3,164(sp)
  80a9c8:	d8002785 	stb	zero,158(sp)
  80a9cc:	28800104 	addi	r2,r5,4
  80a9d0:	2cc00017 	ldw	r19,0(r5)
  80a9d4:	002d883a 	mov	r22,zero
  80a9d8:	18003716 	blt	r3,zero,80aab8 <___vfprintf_internal_r+0x1420>
  80a9dc:	00ffdfc4 	movi	r3,-129
  80a9e0:	d8802d15 	stw	r2,180(sp)
  80a9e4:	90e4703a 	and	r18,r18,r3
  80a9e8:	0039883a 	mov	fp,zero
  80a9ec:	983df326 	beq	r19,zero,80a1bc <__alt_mem_onchip_mem+0xff8021bc>
  80a9f0:	00800244 	movi	r2,9
  80a9f4:	14fc7b36 	bltu	r2,r19,809be4 <__alt_mem_onchip_mem+0xff801be4>
  80a9f8:	d8c02817 	ldw	r3,160(sp)
  80a9fc:	dc001dc4 	addi	r16,sp,119
  80aa00:	9cc00c04 	addi	r19,r19,48
  80aa04:	1c07c83a 	sub	r3,r3,r16
  80aa08:	dcc01dc5 	stb	r19,119(sp)
  80aa0c:	d8c02e15 	stw	r3,184(sp)
  80aa10:	003ce806 	br	809db4 <__alt_mem_onchip_mem+0xff801db4>
  80aa14:	d8803317 	ldw	r2,204(sp)
  80aa18:	143fffc4 	addi	r16,r2,-1
  80aa1c:	043f4d0e 	bge	zero,r16,80a754 <__alt_mem_onchip_mem+0xff802754>
  80aa20:	07000404 	movi	fp,16
  80aa24:	e400810e 	bge	fp,r16,80ac2c <___vfprintf_internal_r+0x1594>
  80aa28:	01402074 	movhi	r5,129
  80aa2c:	295d2784 	addi	r5,r5,29854
  80aa30:	d9402b15 	stw	r5,172(sp)
  80aa34:	01c001c4 	movi	r7,7
  80aa38:	dcc02c17 	ldw	r19,176(sp)
  80aa3c:	00000306 	br	80aa4c <___vfprintf_internal_r+0x13b4>
  80aa40:	b5800204 	addi	r22,r22,8
  80aa44:	843ffc04 	addi	r16,r16,-16
  80aa48:	e4007b0e 	bge	fp,r16,80ac38 <___vfprintf_internal_r+0x15a0>
  80aa4c:	18c00404 	addi	r3,r3,16
  80aa50:	8c400044 	addi	r17,r17,1
  80aa54:	b5000015 	stw	r20,0(r22)
  80aa58:	b7000115 	stw	fp,4(r22)
  80aa5c:	d8c02015 	stw	r3,128(sp)
  80aa60:	dc401f15 	stw	r17,124(sp)
  80aa64:	3c7ff60e 	bge	r7,r17,80aa40 <__alt_mem_onchip_mem+0xff802a40>
  80aa68:	d9801e04 	addi	r6,sp,120
  80aa6c:	b80b883a 	mov	r5,r23
  80aa70:	9809883a 	mov	r4,r19
  80aa74:	d9c03c15 	stw	r7,240(sp)
  80aa78:	080f7e00 	call	80f7e0 <__sprint_r>
  80aa7c:	d9c03c17 	ldw	r7,240(sp)
  80aa80:	103c071e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80aa84:	d8c02017 	ldw	r3,128(sp)
  80aa88:	dc401f17 	ldw	r17,124(sp)
  80aa8c:	dd800404 	addi	r22,sp,16
  80aa90:	003fec06 	br	80aa44 <__alt_mem_onchip_mem+0xff802a44>
  80aa94:	9080100c 	andi	r2,r18,64
  80aa98:	d8002785 	stb	zero,158(sp)
  80aa9c:	10010e26 	beq	r2,zero,80aed8 <___vfprintf_internal_r+0x1840>
  80aaa0:	d9002d17 	ldw	r4,180(sp)
  80aaa4:	d9402917 	ldw	r5,164(sp)
  80aaa8:	002d883a 	mov	r22,zero
  80aaac:	20800104 	addi	r2,r4,4
  80aab0:	24c0000b 	ldhu	r19,0(r4)
  80aab4:	283fc90e 	bge	r5,zero,80a9dc <__alt_mem_onchip_mem+0xff8029dc>
  80aab8:	d8802d15 	stw	r2,180(sp)
  80aabc:	0039883a 	mov	fp,zero
  80aac0:	9d84b03a 	or	r2,r19,r22
  80aac4:	103c461e 	bne	r2,zero,809be0 <__alt_mem_onchip_mem+0xff801be0>
  80aac8:	00800044 	movi	r2,1
  80aacc:	003e6c06 	br	80a480 <__alt_mem_onchip_mem+0xff802480>
  80aad0:	d9002c17 	ldw	r4,176(sp)
  80aad4:	d9801e04 	addi	r6,sp,120
  80aad8:	b80b883a 	mov	r5,r23
  80aadc:	080f7e00 	call	80f7e0 <__sprint_r>
  80aae0:	103bef1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80aae4:	d8c02017 	ldw	r3,128(sp)
  80aae8:	da000404 	addi	r8,sp,16
  80aaec:	d9003217 	ldw	r4,200(sp)
  80aaf0:	d8802617 	ldw	r2,152(sp)
  80aaf4:	d9403317 	ldw	r5,204(sp)
  80aaf8:	8123883a 	add	r17,r16,r4
  80aafc:	11400216 	blt	r2,r5,80ab08 <___vfprintf_internal_r+0x1470>
  80ab00:	9100004c 	andi	r4,r18,1
  80ab04:	20000d26 	beq	r4,zero,80ab3c <___vfprintf_internal_r+0x14a4>
  80ab08:	d9003717 	ldw	r4,220(sp)
  80ab0c:	d9403417 	ldw	r5,208(sp)
  80ab10:	1907883a 	add	r3,r3,r4
  80ab14:	d9001f17 	ldw	r4,124(sp)
  80ab18:	41400015 	stw	r5,0(r8)
  80ab1c:	d9403717 	ldw	r5,220(sp)
  80ab20:	21000044 	addi	r4,r4,1
  80ab24:	d8c02015 	stw	r3,128(sp)
  80ab28:	41400115 	stw	r5,4(r8)
  80ab2c:	d9001f15 	stw	r4,124(sp)
  80ab30:	014001c4 	movi	r5,7
  80ab34:	2901e816 	blt	r5,r4,80b2d8 <___vfprintf_internal_r+0x1c40>
  80ab38:	42000204 	addi	r8,r8,8
  80ab3c:	d9003317 	ldw	r4,204(sp)
  80ab40:	8121883a 	add	r16,r16,r4
  80ab44:	2085c83a 	sub	r2,r4,r2
  80ab48:	8461c83a 	sub	r16,r16,r17
  80ab4c:	1400010e 	bge	r2,r16,80ab54 <___vfprintf_internal_r+0x14bc>
  80ab50:	1021883a 	mov	r16,r2
  80ab54:	04000a0e 	bge	zero,r16,80ab80 <___vfprintf_internal_r+0x14e8>
  80ab58:	d9001f17 	ldw	r4,124(sp)
  80ab5c:	1c07883a 	add	r3,r3,r16
  80ab60:	44400015 	stw	r17,0(r8)
  80ab64:	21000044 	addi	r4,r4,1
  80ab68:	44000115 	stw	r16,4(r8)
  80ab6c:	d8c02015 	stw	r3,128(sp)
  80ab70:	d9001f15 	stw	r4,124(sp)
  80ab74:	014001c4 	movi	r5,7
  80ab78:	2901fb16 	blt	r5,r4,80b368 <___vfprintf_internal_r+0x1cd0>
  80ab7c:	42000204 	addi	r8,r8,8
  80ab80:	8001f716 	blt	r16,zero,80b360 <___vfprintf_internal_r+0x1cc8>
  80ab84:	1421c83a 	sub	r16,r2,r16
  80ab88:	043d380e 	bge	zero,r16,80a06c <__alt_mem_onchip_mem+0xff80206c>
  80ab8c:	04400404 	movi	r17,16
  80ab90:	d8801f17 	ldw	r2,124(sp)
  80ab94:	8c3efb0e 	bge	r17,r16,80a784 <__alt_mem_onchip_mem+0xff802784>
  80ab98:	01402074 	movhi	r5,129
  80ab9c:	295d2784 	addi	r5,r5,29854
  80aba0:	d9402b15 	stw	r5,172(sp)
  80aba4:	058001c4 	movi	r22,7
  80aba8:	dcc02c17 	ldw	r19,176(sp)
  80abac:	00000306 	br	80abbc <___vfprintf_internal_r+0x1524>
  80abb0:	42000204 	addi	r8,r8,8
  80abb4:	843ffc04 	addi	r16,r16,-16
  80abb8:	8c3ef50e 	bge	r17,r16,80a790 <__alt_mem_onchip_mem+0xff802790>
  80abbc:	18c00404 	addi	r3,r3,16
  80abc0:	10800044 	addi	r2,r2,1
  80abc4:	45000015 	stw	r20,0(r8)
  80abc8:	44400115 	stw	r17,4(r8)
  80abcc:	d8c02015 	stw	r3,128(sp)
  80abd0:	d8801f15 	stw	r2,124(sp)
  80abd4:	b0bff60e 	bge	r22,r2,80abb0 <__alt_mem_onchip_mem+0xff802bb0>
  80abd8:	d9801e04 	addi	r6,sp,120
  80abdc:	b80b883a 	mov	r5,r23
  80abe0:	9809883a 	mov	r4,r19
  80abe4:	080f7e00 	call	80f7e0 <__sprint_r>
  80abe8:	103bad1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80abec:	d8c02017 	ldw	r3,128(sp)
  80abf0:	d8801f17 	ldw	r2,124(sp)
  80abf4:	da000404 	addi	r8,sp,16
  80abf8:	003fee06 	br	80abb4 <__alt_mem_onchip_mem+0xff802bb4>
  80abfc:	9088703a 	and	r4,r18,r2
  80ac00:	203eab1e 	bne	r4,zero,80a6b0 <__alt_mem_onchip_mem+0xff8026b0>
  80ac04:	dc401f17 	ldw	r17,124(sp)
  80ac08:	40800115 	stw	r2,4(r8)
  80ac0c:	44000015 	stw	r16,0(r8)
  80ac10:	8c400044 	addi	r17,r17,1
  80ac14:	d8c02015 	stw	r3,128(sp)
  80ac18:	dc401f15 	stw	r17,124(sp)
  80ac1c:	008001c4 	movi	r2,7
  80ac20:	14400e16 	blt	r2,r17,80ac5c <___vfprintf_internal_r+0x15c4>
  80ac24:	45800204 	addi	r22,r8,8
  80ac28:	003eca06 	br	80a754 <__alt_mem_onchip_mem+0xff802754>
  80ac2c:	01002074 	movhi	r4,129
  80ac30:	211d2784 	addi	r4,r4,29854
  80ac34:	d9002b15 	stw	r4,172(sp)
  80ac38:	d8802b17 	ldw	r2,172(sp)
  80ac3c:	1c07883a 	add	r3,r3,r16
  80ac40:	8c400044 	addi	r17,r17,1
  80ac44:	b0800015 	stw	r2,0(r22)
  80ac48:	b4000115 	stw	r16,4(r22)
  80ac4c:	d8c02015 	stw	r3,128(sp)
  80ac50:	dc401f15 	stw	r17,124(sp)
  80ac54:	008001c4 	movi	r2,7
  80ac58:	147ebd0e 	bge	r2,r17,80a750 <__alt_mem_onchip_mem+0xff802750>
  80ac5c:	d9002c17 	ldw	r4,176(sp)
  80ac60:	d9801e04 	addi	r6,sp,120
  80ac64:	b80b883a 	mov	r5,r23
  80ac68:	080f7e00 	call	80f7e0 <__sprint_r>
  80ac6c:	103b8c1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80ac70:	d8c02017 	ldw	r3,128(sp)
  80ac74:	dc401f17 	ldw	r17,124(sp)
  80ac78:	dd800404 	addi	r22,sp,16
  80ac7c:	003eb506 	br	80a754 <__alt_mem_onchip_mem+0xff802754>
  80ac80:	d9002c17 	ldw	r4,176(sp)
  80ac84:	d9801e04 	addi	r6,sp,120
  80ac88:	b80b883a 	mov	r5,r23
  80ac8c:	080f7e00 	call	80f7e0 <__sprint_r>
  80ac90:	103b831e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80ac94:	d8c02017 	ldw	r3,128(sp)
  80ac98:	dc401f17 	ldw	r17,124(sp)
  80ac9c:	da000404 	addi	r8,sp,16
  80aca0:	003e8d06 	br	80a6d8 <__alt_mem_onchip_mem+0xff8026d8>
  80aca4:	d9002c17 	ldw	r4,176(sp)
  80aca8:	d9801e04 	addi	r6,sp,120
  80acac:	b80b883a 	mov	r5,r23
  80acb0:	080f7e00 	call	80f7e0 <__sprint_r>
  80acb4:	103b7a1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80acb8:	d8c02017 	ldw	r3,128(sp)
  80acbc:	dc401f17 	ldw	r17,124(sp)
  80acc0:	dd800404 	addi	r22,sp,16
  80acc4:	003e8f06 	br	80a704 <__alt_mem_onchip_mem+0xff802704>
  80acc8:	0027883a 	mov	r19,zero
  80accc:	003f4a06 	br	80a9f8 <__alt_mem_onchip_mem+0xff8029f8>
  80acd0:	d9002c17 	ldw	r4,176(sp)
  80acd4:	d9801e04 	addi	r6,sp,120
  80acd8:	b80b883a 	mov	r5,r23
  80acdc:	080f7e00 	call	80f7e0 <__sprint_r>
  80ace0:	103b6f1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80ace4:	d8c02017 	ldw	r3,128(sp)
  80ace8:	da000404 	addi	r8,sp,16
  80acec:	003c9d06 	br	809f64 <__alt_mem_onchip_mem+0xff801f64>
  80acf0:	04e7c83a 	sub	r19,zero,r19
  80acf4:	9804c03a 	cmpne	r2,r19,zero
  80acf8:	05adc83a 	sub	r22,zero,r22
  80acfc:	b0adc83a 	sub	r22,r22,r2
  80ad00:	d8802917 	ldw	r2,164(sp)
  80ad04:	07000b44 	movi	fp,45
  80ad08:	df002785 	stb	fp,158(sp)
  80ad0c:	10017b16 	blt	r2,zero,80b2fc <___vfprintf_internal_r+0x1c64>
  80ad10:	00bfdfc4 	movi	r2,-129
  80ad14:	90a4703a 	and	r18,r18,r2
  80ad18:	003bb106 	br	809be0 <__alt_mem_onchip_mem+0xff801be0>
  80ad1c:	d9003617 	ldw	r4,216(sp)
  80ad20:	d9403817 	ldw	r5,224(sp)
  80ad24:	da003d15 	stw	r8,244(sp)
  80ad28:	080f5940 	call	80f594 <__fpclassifyd>
  80ad2c:	da003d17 	ldw	r8,244(sp)
  80ad30:	1000f026 	beq	r2,zero,80b0f4 <___vfprintf_internal_r+0x1a5c>
  80ad34:	d9002917 	ldw	r4,164(sp)
  80ad38:	05bff7c4 	movi	r22,-33
  80ad3c:	00bfffc4 	movi	r2,-1
  80ad40:	8dac703a 	and	r22,r17,r22
  80ad44:	20820026 	beq	r4,r2,80b548 <___vfprintf_internal_r+0x1eb0>
  80ad48:	008011c4 	movi	r2,71
  80ad4c:	b081f726 	beq	r22,r2,80b52c <___vfprintf_internal_r+0x1e94>
  80ad50:	d9003817 	ldw	r4,224(sp)
  80ad54:	90c04014 	ori	r3,r18,256
  80ad58:	d8c02b15 	stw	r3,172(sp)
  80ad5c:	20021516 	blt	r4,zero,80b5b4 <___vfprintf_internal_r+0x1f1c>
  80ad60:	dcc03817 	ldw	r19,224(sp)
  80ad64:	d8002a05 	stb	zero,168(sp)
  80ad68:	00801984 	movi	r2,102
  80ad6c:	8881f926 	beq	r17,r2,80b554 <___vfprintf_internal_r+0x1ebc>
  80ad70:	00801184 	movi	r2,70
  80ad74:	88821c26 	beq	r17,r2,80b5e8 <___vfprintf_internal_r+0x1f50>
  80ad78:	00801144 	movi	r2,69
  80ad7c:	b081ef26 	beq	r22,r2,80b53c <___vfprintf_internal_r+0x1ea4>
  80ad80:	d8c02917 	ldw	r3,164(sp)
  80ad84:	d8802104 	addi	r2,sp,132
  80ad88:	d8800315 	stw	r2,12(sp)
  80ad8c:	d9403617 	ldw	r5,216(sp)
  80ad90:	d8802504 	addi	r2,sp,148
  80ad94:	d9002c17 	ldw	r4,176(sp)
  80ad98:	d8800215 	stw	r2,8(sp)
  80ad9c:	d8802604 	addi	r2,sp,152
  80ada0:	d8c00015 	stw	r3,0(sp)
  80ada4:	d8800115 	stw	r2,4(sp)
  80ada8:	01c00084 	movi	r7,2
  80adac:	980d883a 	mov	r6,r19
  80adb0:	d8c03c15 	stw	r3,240(sp)
  80adb4:	da003d15 	stw	r8,244(sp)
  80adb8:	080becc0 	call	80becc <_dtoa_r>
  80adbc:	1021883a 	mov	r16,r2
  80adc0:	008019c4 	movi	r2,103
  80adc4:	d8c03c17 	ldw	r3,240(sp)
  80adc8:	da003d17 	ldw	r8,244(sp)
  80adcc:	88817126 	beq	r17,r2,80b394 <___vfprintf_internal_r+0x1cfc>
  80add0:	008011c4 	movi	r2,71
  80add4:	88829226 	beq	r17,r2,80b820 <___vfprintf_internal_r+0x2188>
  80add8:	80f9883a 	add	fp,r16,r3
  80addc:	d9003617 	ldw	r4,216(sp)
  80ade0:	000d883a 	mov	r6,zero
  80ade4:	000f883a 	mov	r7,zero
  80ade8:	980b883a 	mov	r5,r19
  80adec:	da003d15 	stw	r8,244(sp)
  80adf0:	081272c0 	call	81272c <__eqdf2>
  80adf4:	da003d17 	ldw	r8,244(sp)
  80adf8:	10018d26 	beq	r2,zero,80b430 <___vfprintf_internal_r+0x1d98>
  80adfc:	d8802117 	ldw	r2,132(sp)
  80ae00:	1700062e 	bgeu	r2,fp,80ae1c <___vfprintf_internal_r+0x1784>
  80ae04:	01000c04 	movi	r4,48
  80ae08:	10c00044 	addi	r3,r2,1
  80ae0c:	d8c02115 	stw	r3,132(sp)
  80ae10:	11000005 	stb	r4,0(r2)
  80ae14:	d8802117 	ldw	r2,132(sp)
  80ae18:	173ffb36 	bltu	r2,fp,80ae08 <__alt_mem_onchip_mem+0xff802e08>
  80ae1c:	1405c83a 	sub	r2,r2,r16
  80ae20:	d8803315 	stw	r2,204(sp)
  80ae24:	008011c4 	movi	r2,71
  80ae28:	b0817626 	beq	r22,r2,80b404 <___vfprintf_internal_r+0x1d6c>
  80ae2c:	00801944 	movi	r2,101
  80ae30:	1442810e 	bge	r2,r17,80b838 <___vfprintf_internal_r+0x21a0>
  80ae34:	d8c02617 	ldw	r3,152(sp)
  80ae38:	00801984 	movi	r2,102
  80ae3c:	d8c03215 	stw	r3,200(sp)
  80ae40:	8881fe26 	beq	r17,r2,80b63c <___vfprintf_internal_r+0x1fa4>
  80ae44:	d8c03217 	ldw	r3,200(sp)
  80ae48:	d9003317 	ldw	r4,204(sp)
  80ae4c:	1901dd16 	blt	r3,r4,80b5c4 <___vfprintf_internal_r+0x1f2c>
  80ae50:	9480004c 	andi	r18,r18,1
  80ae54:	90022b1e 	bne	r18,zero,80b704 <___vfprintf_internal_r+0x206c>
  80ae58:	1805883a 	mov	r2,r3
  80ae5c:	18028016 	blt	r3,zero,80b860 <___vfprintf_internal_r+0x21c8>
  80ae60:	d8c03217 	ldw	r3,200(sp)
  80ae64:	044019c4 	movi	r17,103
  80ae68:	d8c02e15 	stw	r3,184(sp)
  80ae6c:	df002a07 	ldb	fp,168(sp)
  80ae70:	e001531e 	bne	fp,zero,80b3c0 <___vfprintf_internal_r+0x1d28>
  80ae74:	df002783 	ldbu	fp,158(sp)
  80ae78:	d8802a15 	stw	r2,168(sp)
  80ae7c:	dc802b17 	ldw	r18,172(sp)
  80ae80:	d8002915 	stw	zero,164(sp)
  80ae84:	003bd106 	br	809dcc <__alt_mem_onchip_mem+0xff801dcc>
  80ae88:	d8802d17 	ldw	r2,180(sp)
  80ae8c:	d8c02d17 	ldw	r3,180(sp)
  80ae90:	d9002d17 	ldw	r4,180(sp)
  80ae94:	10800017 	ldw	r2,0(r2)
  80ae98:	18c00117 	ldw	r3,4(r3)
  80ae9c:	21000204 	addi	r4,r4,8
  80aea0:	d8803615 	stw	r2,216(sp)
  80aea4:	d8c03815 	stw	r3,224(sp)
  80aea8:	d9002d15 	stw	r4,180(sp)
  80aeac:	003b7506 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  80aeb0:	ac400007 	ldb	r17,0(r21)
  80aeb4:	003a5906 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80aeb8:	9080100c 	andi	r2,r18,64
  80aebc:	1000a826 	beq	r2,zero,80b160 <___vfprintf_internal_r+0x1ac8>
  80aec0:	d9002d17 	ldw	r4,180(sp)
  80aec4:	002d883a 	mov	r22,zero
  80aec8:	24c0000b 	ldhu	r19,0(r4)
  80aecc:	21000104 	addi	r4,r4,4
  80aed0:	d9002d15 	stw	r4,180(sp)
  80aed4:	003ccb06 	br	80a204 <__alt_mem_onchip_mem+0xff802204>
  80aed8:	d8c02d17 	ldw	r3,180(sp)
  80aedc:	d9002917 	ldw	r4,164(sp)
  80aee0:	002d883a 	mov	r22,zero
  80aee4:	18800104 	addi	r2,r3,4
  80aee8:	1cc00017 	ldw	r19,0(r3)
  80aeec:	203ebb0e 	bge	r4,zero,80a9dc <__alt_mem_onchip_mem+0xff8029dc>
  80aef0:	003ef106 	br	80aab8 <__alt_mem_onchip_mem+0xff802ab8>
  80aef4:	9080040c 	andi	r2,r18,16
  80aef8:	1000921e 	bne	r2,zero,80b144 <___vfprintf_internal_r+0x1aac>
  80aefc:	9480100c 	andi	r18,r18,64
  80af00:	90013926 	beq	r18,zero,80b3e8 <___vfprintf_internal_r+0x1d50>
  80af04:	d9002d17 	ldw	r4,180(sp)
  80af08:	d9402f17 	ldw	r5,188(sp)
  80af0c:	20800017 	ldw	r2,0(r4)
  80af10:	21000104 	addi	r4,r4,4
  80af14:	d9002d15 	stw	r4,180(sp)
  80af18:	1140000d 	sth	r5,0(r2)
  80af1c:	003a1606 	br	809778 <__alt_mem_onchip_mem+0xff801778>
  80af20:	9080100c 	andi	r2,r18,64
  80af24:	10008026 	beq	r2,zero,80b128 <___vfprintf_internal_r+0x1a90>
  80af28:	d8c02d17 	ldw	r3,180(sp)
  80af2c:	1cc0000f 	ldh	r19,0(r3)
  80af30:	18c00104 	addi	r3,r3,4
  80af34:	d8c02d15 	stw	r3,180(sp)
  80af38:	982dd7fa 	srai	r22,r19,31
  80af3c:	b005883a 	mov	r2,r22
  80af40:	003b1f06 	br	809bc0 <__alt_mem_onchip_mem+0xff801bc0>
  80af44:	9080100c 	andi	r2,r18,64
  80af48:	d8002785 	stb	zero,158(sp)
  80af4c:	10008a1e 	bne	r2,zero,80b178 <___vfprintf_internal_r+0x1ae0>
  80af50:	d9402d17 	ldw	r5,180(sp)
  80af54:	d8c02917 	ldw	r3,164(sp)
  80af58:	002d883a 	mov	r22,zero
  80af5c:	28800104 	addi	r2,r5,4
  80af60:	2cc00017 	ldw	r19,0(r5)
  80af64:	183e4b0e 	bge	r3,zero,80a894 <__alt_mem_onchip_mem+0xff802894>
  80af68:	9d86b03a 	or	r3,r19,r22
  80af6c:	d8802d15 	stw	r2,180(sp)
  80af70:	183e4c1e 	bne	r3,zero,80a8a4 <__alt_mem_onchip_mem+0xff8028a4>
  80af74:	0039883a 	mov	fp,zero
  80af78:	0005883a 	mov	r2,zero
  80af7c:	003d4006 	br	80a480 <__alt_mem_onchip_mem+0xff802480>
  80af80:	01402074 	movhi	r5,129
  80af84:	295d2784 	addi	r5,r5,29854
  80af88:	d9402b15 	stw	r5,172(sp)
  80af8c:	d9402b17 	ldw	r5,172(sp)
  80af90:	1c47883a 	add	r3,r3,r17
  80af94:	10800044 	addi	r2,r2,1
  80af98:	41400015 	stw	r5,0(r8)
  80af9c:	44400115 	stw	r17,4(r8)
  80afa0:	d8c02015 	stw	r3,128(sp)
  80afa4:	d8801f15 	stw	r2,124(sp)
  80afa8:	010001c4 	movi	r4,7
  80afac:	20bec816 	blt	r4,r2,80aad0 <__alt_mem_onchip_mem+0xff802ad0>
  80afb0:	42000204 	addi	r8,r8,8
  80afb4:	003ecd06 	br	80aaec <__alt_mem_onchip_mem+0xff802aec>
  80afb8:	d9002917 	ldw	r4,164(sp)
  80afbc:	d8002785 	stb	zero,158(sp)
  80afc0:	203d2d16 	blt	r4,zero,80a478 <__alt_mem_onchip_mem+0xff802478>
  80afc4:	00bfdfc4 	movi	r2,-129
  80afc8:	90a4703a 	and	r18,r18,r2
  80afcc:	003a9106 	br	809a14 <__alt_mem_onchip_mem+0xff801a14>
  80afd0:	01002074 	movhi	r4,129
  80afd4:	211d2784 	addi	r4,r4,29854
  80afd8:	d9002b15 	stw	r4,172(sp)
  80afdc:	003c0c06 	br	80a010 <__alt_mem_onchip_mem+0xff802010>
  80afe0:	d9002c17 	ldw	r4,176(sp)
  80afe4:	d9801e04 	addi	r6,sp,120
  80afe8:	b80b883a 	mov	r5,r23
  80afec:	080f7e00 	call	80f7e0 <__sprint_r>
  80aff0:	103aab1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80aff4:	d8c02017 	ldw	r3,128(sp)
  80aff8:	da000404 	addi	r8,sp,16
  80affc:	003d4106 	br	80a504 <__alt_mem_onchip_mem+0xff802504>
  80b000:	d8801f17 	ldw	r2,124(sp)
  80b004:	01402074 	movhi	r5,129
  80b008:	01000044 	movi	r4,1
  80b00c:	18c00044 	addi	r3,r3,1
  80b010:	10800044 	addi	r2,r2,1
  80b014:	295d2704 	addi	r5,r5,29852
  80b018:	41000115 	stw	r4,4(r8)
  80b01c:	41400015 	stw	r5,0(r8)
  80b020:	d8c02015 	stw	r3,128(sp)
  80b024:	d8801f15 	stw	r2,124(sp)
  80b028:	010001c4 	movi	r4,7
  80b02c:	20805c16 	blt	r4,r2,80b1a0 <___vfprintf_internal_r+0x1b08>
  80b030:	42000204 	addi	r8,r8,8
  80b034:	8800041e 	bne	r17,zero,80b048 <___vfprintf_internal_r+0x19b0>
  80b038:	d8803317 	ldw	r2,204(sp)
  80b03c:	1000021e 	bne	r2,zero,80b048 <___vfprintf_internal_r+0x19b0>
  80b040:	9080004c 	andi	r2,r18,1
  80b044:	103c0926 	beq	r2,zero,80a06c <__alt_mem_onchip_mem+0xff80206c>
  80b048:	d9003717 	ldw	r4,220(sp)
  80b04c:	d8801f17 	ldw	r2,124(sp)
  80b050:	d9403417 	ldw	r5,208(sp)
  80b054:	20c7883a 	add	r3,r4,r3
  80b058:	10800044 	addi	r2,r2,1
  80b05c:	41000115 	stw	r4,4(r8)
  80b060:	41400015 	stw	r5,0(r8)
  80b064:	d8c02015 	stw	r3,128(sp)
  80b068:	d8801f15 	stw	r2,124(sp)
  80b06c:	010001c4 	movi	r4,7
  80b070:	20812116 	blt	r4,r2,80b4f8 <___vfprintf_internal_r+0x1e60>
  80b074:	42000204 	addi	r8,r8,8
  80b078:	0463c83a 	sub	r17,zero,r17
  80b07c:	0440730e 	bge	zero,r17,80b24c <___vfprintf_internal_r+0x1bb4>
  80b080:	05800404 	movi	r22,16
  80b084:	b440860e 	bge	r22,r17,80b2a0 <___vfprintf_internal_r+0x1c08>
  80b088:	01402074 	movhi	r5,129
  80b08c:	295d2784 	addi	r5,r5,29854
  80b090:	d9402b15 	stw	r5,172(sp)
  80b094:	070001c4 	movi	fp,7
  80b098:	dcc02c17 	ldw	r19,176(sp)
  80b09c:	00000306 	br	80b0ac <___vfprintf_internal_r+0x1a14>
  80b0a0:	42000204 	addi	r8,r8,8
  80b0a4:	8c7ffc04 	addi	r17,r17,-16
  80b0a8:	b440800e 	bge	r22,r17,80b2ac <___vfprintf_internal_r+0x1c14>
  80b0ac:	18c00404 	addi	r3,r3,16
  80b0b0:	10800044 	addi	r2,r2,1
  80b0b4:	45000015 	stw	r20,0(r8)
  80b0b8:	45800115 	stw	r22,4(r8)
  80b0bc:	d8c02015 	stw	r3,128(sp)
  80b0c0:	d8801f15 	stw	r2,124(sp)
  80b0c4:	e0bff60e 	bge	fp,r2,80b0a0 <__alt_mem_onchip_mem+0xff8030a0>
  80b0c8:	d9801e04 	addi	r6,sp,120
  80b0cc:	b80b883a 	mov	r5,r23
  80b0d0:	9809883a 	mov	r4,r19
  80b0d4:	080f7e00 	call	80f7e0 <__sprint_r>
  80b0d8:	103a711e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b0dc:	d8c02017 	ldw	r3,128(sp)
  80b0e0:	d8801f17 	ldw	r2,124(sp)
  80b0e4:	da000404 	addi	r8,sp,16
  80b0e8:	003fee06 	br	80b0a4 <__alt_mem_onchip_mem+0xff8030a4>
  80b0ec:	00bfffc4 	movi	r2,-1
  80b0f0:	003a6f06 	br	809ab0 <__alt_mem_onchip_mem+0xff801ab0>
  80b0f4:	008011c4 	movi	r2,71
  80b0f8:	1440b816 	blt	r2,r17,80b3dc <___vfprintf_internal_r+0x1d44>
  80b0fc:	04002074 	movhi	r16,129
  80b100:	841d1904 	addi	r16,r16,29796
  80b104:	00c000c4 	movi	r3,3
  80b108:	00bfdfc4 	movi	r2,-129
  80b10c:	d8c02a15 	stw	r3,168(sp)
  80b110:	90a4703a 	and	r18,r18,r2
  80b114:	df002783 	ldbu	fp,158(sp)
  80b118:	d8c02e15 	stw	r3,184(sp)
  80b11c:	d8002915 	stw	zero,164(sp)
  80b120:	d8003215 	stw	zero,200(sp)
  80b124:	003b2906 	br	809dcc <__alt_mem_onchip_mem+0xff801dcc>
  80b128:	d9002d17 	ldw	r4,180(sp)
  80b12c:	24c00017 	ldw	r19,0(r4)
  80b130:	21000104 	addi	r4,r4,4
  80b134:	d9002d15 	stw	r4,180(sp)
  80b138:	982dd7fa 	srai	r22,r19,31
  80b13c:	b005883a 	mov	r2,r22
  80b140:	003a9f06 	br	809bc0 <__alt_mem_onchip_mem+0xff801bc0>
  80b144:	d9402d17 	ldw	r5,180(sp)
  80b148:	d8c02f17 	ldw	r3,188(sp)
  80b14c:	28800017 	ldw	r2,0(r5)
  80b150:	29400104 	addi	r5,r5,4
  80b154:	d9402d15 	stw	r5,180(sp)
  80b158:	10c00015 	stw	r3,0(r2)
  80b15c:	00398606 	br	809778 <__alt_mem_onchip_mem+0xff801778>
  80b160:	d9402d17 	ldw	r5,180(sp)
  80b164:	002d883a 	mov	r22,zero
  80b168:	2cc00017 	ldw	r19,0(r5)
  80b16c:	29400104 	addi	r5,r5,4
  80b170:	d9402d15 	stw	r5,180(sp)
  80b174:	003c2306 	br	80a204 <__alt_mem_onchip_mem+0xff802204>
  80b178:	d8c02d17 	ldw	r3,180(sp)
  80b17c:	d9002917 	ldw	r4,164(sp)
  80b180:	002d883a 	mov	r22,zero
  80b184:	18800104 	addi	r2,r3,4
  80b188:	1cc0000b 	ldhu	r19,0(r3)
  80b18c:	203dc10e 	bge	r4,zero,80a894 <__alt_mem_onchip_mem+0xff802894>
  80b190:	003f7506 	br	80af68 <__alt_mem_onchip_mem+0xff802f68>
  80b194:	04002074 	movhi	r16,129
  80b198:	841d1704 	addi	r16,r16,29788
  80b19c:	003acc06 	br	809cd0 <__alt_mem_onchip_mem+0xff801cd0>
  80b1a0:	d9002c17 	ldw	r4,176(sp)
  80b1a4:	d9801e04 	addi	r6,sp,120
  80b1a8:	b80b883a 	mov	r5,r23
  80b1ac:	080f7e00 	call	80f7e0 <__sprint_r>
  80b1b0:	103a3b1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b1b4:	dc402617 	ldw	r17,152(sp)
  80b1b8:	d8c02017 	ldw	r3,128(sp)
  80b1bc:	da000404 	addi	r8,sp,16
  80b1c0:	003f9c06 	br	80b034 <__alt_mem_onchip_mem+0xff803034>
  80b1c4:	ac400043 	ldbu	r17,1(r21)
  80b1c8:	94800814 	ori	r18,r18,32
  80b1cc:	ad400044 	addi	r21,r21,1
  80b1d0:	8c403fcc 	andi	r17,r17,255
  80b1d4:	8c40201c 	xori	r17,r17,128
  80b1d8:	8c7fe004 	addi	r17,r17,-128
  80b1dc:	00398f06 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80b1e0:	d8c02d15 	stw	r3,180(sp)
  80b1e4:	0039883a 	mov	fp,zero
  80b1e8:	003e3506 	br	80aac0 <__alt_mem_onchip_mem+0xff802ac0>
  80b1ec:	d9002c17 	ldw	r4,176(sp)
  80b1f0:	d9801e04 	addi	r6,sp,120
  80b1f4:	b80b883a 	mov	r5,r23
  80b1f8:	080f7e00 	call	80f7e0 <__sprint_r>
  80b1fc:	103a281e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b200:	d8c02017 	ldw	r3,128(sp)
  80b204:	da000404 	addi	r8,sp,16
  80b208:	003cd006 	br	80a54c <__alt_mem_onchip_mem+0xff80254c>
  80b20c:	8009883a 	mov	r4,r16
  80b210:	da003d15 	stw	r8,244(sp)
  80b214:	08096000 	call	809600 <strlen>
  80b218:	d8802e15 	stw	r2,184(sp)
  80b21c:	da003d17 	ldw	r8,244(sp)
  80b220:	103c340e 	bge	r2,zero,80a2f4 <__alt_mem_onchip_mem+0xff8022f4>
  80b224:	0005883a 	mov	r2,zero
  80b228:	003c3206 	br	80a2f4 <__alt_mem_onchip_mem+0xff8022f4>
  80b22c:	d9002c17 	ldw	r4,176(sp)
  80b230:	d9801e04 	addi	r6,sp,120
  80b234:	b80b883a 	mov	r5,r23
  80b238:	080f7e00 	call	80f7e0 <__sprint_r>
  80b23c:	103a181e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b240:	d8c02017 	ldw	r3,128(sp)
  80b244:	d8801f17 	ldw	r2,124(sp)
  80b248:	da000404 	addi	r8,sp,16
  80b24c:	d9403317 	ldw	r5,204(sp)
  80b250:	10800044 	addi	r2,r2,1
  80b254:	44000015 	stw	r16,0(r8)
  80b258:	28c7883a 	add	r3,r5,r3
  80b25c:	003b7d06 	br	80a054 <__alt_mem_onchip_mem+0xff802054>
  80b260:	01002074 	movhi	r4,129
  80b264:	211d2b84 	addi	r4,r4,29870
  80b268:	d9003515 	stw	r4,212(sp)
  80b26c:	003b1406 	br	809ec0 <__alt_mem_onchip_mem+0xff801ec0>
  80b270:	013fffc4 	movi	r4,-1
  80b274:	003a3506 	br	809b4c <__alt_mem_onchip_mem+0xff801b4c>
  80b278:	0023883a 	mov	r17,zero
  80b27c:	003d9d06 	br	80a8f4 <__alt_mem_onchip_mem+0xff8028f4>
  80b280:	d9002c17 	ldw	r4,176(sp)
  80b284:	d9801e04 	addi	r6,sp,120
  80b288:	b80b883a 	mov	r5,r23
  80b28c:	080f7e00 	call	80f7e0 <__sprint_r>
  80b290:	103a031e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b294:	d8c02017 	ldw	r3,128(sp)
  80b298:	da000404 	addi	r8,sp,16
  80b29c:	003d9406 	br	80a8f0 <__alt_mem_onchip_mem+0xff8028f0>
  80b2a0:	01002074 	movhi	r4,129
  80b2a4:	211d2784 	addi	r4,r4,29854
  80b2a8:	d9002b15 	stw	r4,172(sp)
  80b2ac:	d9002b17 	ldw	r4,172(sp)
  80b2b0:	1c47883a 	add	r3,r3,r17
  80b2b4:	10800044 	addi	r2,r2,1
  80b2b8:	41000015 	stw	r4,0(r8)
  80b2bc:	44400115 	stw	r17,4(r8)
  80b2c0:	d8c02015 	stw	r3,128(sp)
  80b2c4:	d8801f15 	stw	r2,124(sp)
  80b2c8:	010001c4 	movi	r4,7
  80b2cc:	20bfd716 	blt	r4,r2,80b22c <__alt_mem_onchip_mem+0xff80322c>
  80b2d0:	42000204 	addi	r8,r8,8
  80b2d4:	003fdd06 	br	80b24c <__alt_mem_onchip_mem+0xff80324c>
  80b2d8:	d9002c17 	ldw	r4,176(sp)
  80b2dc:	d9801e04 	addi	r6,sp,120
  80b2e0:	b80b883a 	mov	r5,r23
  80b2e4:	080f7e00 	call	80f7e0 <__sprint_r>
  80b2e8:	1039ed1e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b2ec:	d8802617 	ldw	r2,152(sp)
  80b2f0:	d8c02017 	ldw	r3,128(sp)
  80b2f4:	da000404 	addi	r8,sp,16
  80b2f8:	003e1006 	br	80ab3c <__alt_mem_onchip_mem+0xff802b3c>
  80b2fc:	00800044 	movi	r2,1
  80b300:	10803fcc 	andi	r2,r2,255
  80b304:	00c00044 	movi	r3,1
  80b308:	10fa3526 	beq	r2,r3,809be0 <__alt_mem_onchip_mem+0xff801be0>
  80b30c:	00c00084 	movi	r3,2
  80b310:	10fbcb26 	beq	r2,r3,80a240 <__alt_mem_onchip_mem+0xff802240>
  80b314:	003a8f06 	br	809d54 <__alt_mem_onchip_mem+0xff801d54>
  80b318:	01002074 	movhi	r4,129
  80b31c:	211d2b84 	addi	r4,r4,29870
  80b320:	d9003515 	stw	r4,212(sp)
  80b324:	003b7606 	br	80a100 <__alt_mem_onchip_mem+0xff802100>
  80b328:	d8802917 	ldw	r2,164(sp)
  80b32c:	00c00184 	movi	r3,6
  80b330:	1880012e 	bgeu	r3,r2,80b338 <___vfprintf_internal_r+0x1ca0>
  80b334:	1805883a 	mov	r2,r3
  80b338:	d8802e15 	stw	r2,184(sp)
  80b33c:	1000ef16 	blt	r2,zero,80b6fc <___vfprintf_internal_r+0x2064>
  80b340:	04002074 	movhi	r16,129
  80b344:	d8802a15 	stw	r2,168(sp)
  80b348:	dcc02d15 	stw	r19,180(sp)
  80b34c:	d8002915 	stw	zero,164(sp)
  80b350:	d8003215 	stw	zero,200(sp)
  80b354:	841d2504 	addi	r16,r16,29844
  80b358:	0039883a 	mov	fp,zero
  80b35c:	003aa206 	br	809de8 <__alt_mem_onchip_mem+0xff801de8>
  80b360:	0021883a 	mov	r16,zero
  80b364:	003e0706 	br	80ab84 <__alt_mem_onchip_mem+0xff802b84>
  80b368:	d9002c17 	ldw	r4,176(sp)
  80b36c:	d9801e04 	addi	r6,sp,120
  80b370:	b80b883a 	mov	r5,r23
  80b374:	080f7e00 	call	80f7e0 <__sprint_r>
  80b378:	1039c91e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b37c:	d8802617 	ldw	r2,152(sp)
  80b380:	d9403317 	ldw	r5,204(sp)
  80b384:	d8c02017 	ldw	r3,128(sp)
  80b388:	da000404 	addi	r8,sp,16
  80b38c:	2885c83a 	sub	r2,r5,r2
  80b390:	003dfb06 	br	80ab80 <__alt_mem_onchip_mem+0xff802b80>
  80b394:	9080004c 	andi	r2,r18,1
  80b398:	103e8f1e 	bne	r2,zero,80add8 <__alt_mem_onchip_mem+0xff802dd8>
  80b39c:	d8802117 	ldw	r2,132(sp)
  80b3a0:	003e9e06 	br	80ae1c <__alt_mem_onchip_mem+0xff802e1c>
  80b3a4:	1025883a 	mov	r18,r2
  80b3a8:	0039883a 	mov	fp,zero
  80b3ac:	00800084 	movi	r2,2
  80b3b0:	003fd306 	br	80b300 <__alt_mem_onchip_mem+0xff803300>
  80b3b4:	07000b44 	movi	fp,45
  80b3b8:	df002785 	stb	fp,158(sp)
  80b3bc:	003a4006 	br	809cc0 <__alt_mem_onchip_mem+0xff801cc0>
  80b3c0:	00c00b44 	movi	r3,45
  80b3c4:	d8c02785 	stb	r3,158(sp)
  80b3c8:	d8802a15 	stw	r2,168(sp)
  80b3cc:	dc802b17 	ldw	r18,172(sp)
  80b3d0:	d8002915 	stw	zero,164(sp)
  80b3d4:	07000b44 	movi	fp,45
  80b3d8:	003a8006 	br	809ddc <__alt_mem_onchip_mem+0xff801ddc>
  80b3dc:	04002074 	movhi	r16,129
  80b3e0:	841d1a04 	addi	r16,r16,29800
  80b3e4:	003f4706 	br	80b104 <__alt_mem_onchip_mem+0xff803104>
  80b3e8:	d8c02d17 	ldw	r3,180(sp)
  80b3ec:	d9002f17 	ldw	r4,188(sp)
  80b3f0:	18800017 	ldw	r2,0(r3)
  80b3f4:	18c00104 	addi	r3,r3,4
  80b3f8:	d8c02d15 	stw	r3,180(sp)
  80b3fc:	11000015 	stw	r4,0(r2)
  80b400:	0038dd06 	br	809778 <__alt_mem_onchip_mem+0xff801778>
  80b404:	dd802617 	ldw	r22,152(sp)
  80b408:	00bfff44 	movi	r2,-3
  80b40c:	b0801c16 	blt	r22,r2,80b480 <___vfprintf_internal_r+0x1de8>
  80b410:	d9402917 	ldw	r5,164(sp)
  80b414:	2d801a16 	blt	r5,r22,80b480 <___vfprintf_internal_r+0x1de8>
  80b418:	dd803215 	stw	r22,200(sp)
  80b41c:	003e8906 	br	80ae44 <__alt_mem_onchip_mem+0xff802e44>
  80b420:	01002074 	movhi	r4,129
  80b424:	211d2784 	addi	r4,r4,29854
  80b428:	d9002b15 	stw	r4,172(sp)
  80b42c:	003c9106 	br	80a674 <__alt_mem_onchip_mem+0xff802674>
  80b430:	e005883a 	mov	r2,fp
  80b434:	003e7906 	br	80ae1c <__alt_mem_onchip_mem+0xff802e1c>
  80b438:	d9402917 	ldw	r5,164(sp)
  80b43c:	df002783 	ldbu	fp,158(sp)
  80b440:	dcc02d15 	stw	r19,180(sp)
  80b444:	d9402a15 	stw	r5,168(sp)
  80b448:	d9402e15 	stw	r5,184(sp)
  80b44c:	d8002915 	stw	zero,164(sp)
  80b450:	d8003215 	stw	zero,200(sp)
  80b454:	003a5d06 	br	809dcc <__alt_mem_onchip_mem+0xff801dcc>
  80b458:	9080004c 	andi	r2,r18,1
  80b45c:	0039883a 	mov	fp,zero
  80b460:	10000426 	beq	r2,zero,80b474 <___vfprintf_internal_r+0x1ddc>
  80b464:	00800c04 	movi	r2,48
  80b468:	dc001dc4 	addi	r16,sp,119
  80b46c:	d8801dc5 	stb	r2,119(sp)
  80b470:	003b8006 	br	80a274 <__alt_mem_onchip_mem+0xff802274>
  80b474:	d8002e15 	stw	zero,184(sp)
  80b478:	dc001e04 	addi	r16,sp,120
  80b47c:	003a4d06 	br	809db4 <__alt_mem_onchip_mem+0xff801db4>
  80b480:	8c7fff84 	addi	r17,r17,-2
  80b484:	b5bfffc4 	addi	r22,r22,-1
  80b488:	dd802615 	stw	r22,152(sp)
  80b48c:	dc4022c5 	stb	r17,139(sp)
  80b490:	b000bf16 	blt	r22,zero,80b790 <___vfprintf_internal_r+0x20f8>
  80b494:	00800ac4 	movi	r2,43
  80b498:	d8802305 	stb	r2,140(sp)
  80b49c:	00800244 	movi	r2,9
  80b4a0:	15807016 	blt	r2,r22,80b664 <___vfprintf_internal_r+0x1fcc>
  80b4a4:	00800c04 	movi	r2,48
  80b4a8:	b5800c04 	addi	r22,r22,48
  80b4ac:	d8802345 	stb	r2,141(sp)
  80b4b0:	dd802385 	stb	r22,142(sp)
  80b4b4:	d88023c4 	addi	r2,sp,143
  80b4b8:	df0022c4 	addi	fp,sp,139
  80b4bc:	d8c03317 	ldw	r3,204(sp)
  80b4c0:	1739c83a 	sub	fp,r2,fp
  80b4c4:	d9003317 	ldw	r4,204(sp)
  80b4c8:	e0c7883a 	add	r3,fp,r3
  80b4cc:	df003a15 	stw	fp,232(sp)
  80b4d0:	d8c02e15 	stw	r3,184(sp)
  80b4d4:	00800044 	movi	r2,1
  80b4d8:	1100b30e 	bge	r2,r4,80b7a8 <___vfprintf_internal_r+0x2110>
  80b4dc:	d8c02e17 	ldw	r3,184(sp)
  80b4e0:	18c00044 	addi	r3,r3,1
  80b4e4:	d8c02e15 	stw	r3,184(sp)
  80b4e8:	1805883a 	mov	r2,r3
  80b4ec:	1800ac16 	blt	r3,zero,80b7a0 <___vfprintf_internal_r+0x2108>
  80b4f0:	d8003215 	stw	zero,200(sp)
  80b4f4:	003e5d06 	br	80ae6c <__alt_mem_onchip_mem+0xff802e6c>
  80b4f8:	d9002c17 	ldw	r4,176(sp)
  80b4fc:	d9801e04 	addi	r6,sp,120
  80b500:	b80b883a 	mov	r5,r23
  80b504:	080f7e00 	call	80f7e0 <__sprint_r>
  80b508:	1039651e 	bne	r2,zero,809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80b50c:	dc402617 	ldw	r17,152(sp)
  80b510:	d8c02017 	ldw	r3,128(sp)
  80b514:	d8801f17 	ldw	r2,124(sp)
  80b518:	da000404 	addi	r8,sp,16
  80b51c:	003ed606 	br	80b078 <__alt_mem_onchip_mem+0xff803078>
  80b520:	582b883a 	mov	r21,r11
  80b524:	d8002915 	stw	zero,164(sp)
  80b528:	0038bd06 	br	809820 <__alt_mem_onchip_mem+0xff801820>
  80b52c:	d8802917 	ldw	r2,164(sp)
  80b530:	103e071e 	bne	r2,zero,80ad50 <__alt_mem_onchip_mem+0xff802d50>
  80b534:	dc002915 	stw	r16,164(sp)
  80b538:	003e0506 	br	80ad50 <__alt_mem_onchip_mem+0xff802d50>
  80b53c:	d9002917 	ldw	r4,164(sp)
  80b540:	20c00044 	addi	r3,r4,1
  80b544:	003e0f06 	br	80ad84 <__alt_mem_onchip_mem+0xff802d84>
  80b548:	01400184 	movi	r5,6
  80b54c:	d9402915 	stw	r5,164(sp)
  80b550:	003dff06 	br	80ad50 <__alt_mem_onchip_mem+0xff802d50>
  80b554:	d8802104 	addi	r2,sp,132
  80b558:	d8800315 	stw	r2,12(sp)
  80b55c:	d8802504 	addi	r2,sp,148
  80b560:	d8800215 	stw	r2,8(sp)
  80b564:	d8802604 	addi	r2,sp,152
  80b568:	d8800115 	stw	r2,4(sp)
  80b56c:	d8802917 	ldw	r2,164(sp)
  80b570:	d9403617 	ldw	r5,216(sp)
  80b574:	d9002c17 	ldw	r4,176(sp)
  80b578:	d8800015 	stw	r2,0(sp)
  80b57c:	01c000c4 	movi	r7,3
  80b580:	980d883a 	mov	r6,r19
  80b584:	da003d15 	stw	r8,244(sp)
  80b588:	080becc0 	call	80becc <_dtoa_r>
  80b58c:	d8c02917 	ldw	r3,164(sp)
  80b590:	da003d17 	ldw	r8,244(sp)
  80b594:	1021883a 	mov	r16,r2
  80b598:	10f9883a 	add	fp,r2,r3
  80b59c:	81000007 	ldb	r4,0(r16)
  80b5a0:	00800c04 	movi	r2,48
  80b5a4:	20805e26 	beq	r4,r2,80b720 <___vfprintf_internal_r+0x2088>
  80b5a8:	d8c02617 	ldw	r3,152(sp)
  80b5ac:	e0f9883a 	add	fp,fp,r3
  80b5b0:	003e0a06 	br	80addc <__alt_mem_onchip_mem+0xff802ddc>
  80b5b4:	00c00b44 	movi	r3,45
  80b5b8:	24e0003c 	xorhi	r19,r4,32768
  80b5bc:	d8c02a05 	stb	r3,168(sp)
  80b5c0:	003de906 	br	80ad68 <__alt_mem_onchip_mem+0xff802d68>
  80b5c4:	d8c03217 	ldw	r3,200(sp)
  80b5c8:	00c07a0e 	bge	zero,r3,80b7b4 <___vfprintf_internal_r+0x211c>
  80b5cc:	00800044 	movi	r2,1
  80b5d0:	d9003317 	ldw	r4,204(sp)
  80b5d4:	1105883a 	add	r2,r2,r4
  80b5d8:	d8802e15 	stw	r2,184(sp)
  80b5dc:	10004e16 	blt	r2,zero,80b718 <___vfprintf_internal_r+0x2080>
  80b5e0:	044019c4 	movi	r17,103
  80b5e4:	003e2106 	br	80ae6c <__alt_mem_onchip_mem+0xff802e6c>
  80b5e8:	d9002917 	ldw	r4,164(sp)
  80b5ec:	d8802104 	addi	r2,sp,132
  80b5f0:	d8800315 	stw	r2,12(sp)
  80b5f4:	d9000015 	stw	r4,0(sp)
  80b5f8:	d8802504 	addi	r2,sp,148
  80b5fc:	d9403617 	ldw	r5,216(sp)
  80b600:	d9002c17 	ldw	r4,176(sp)
  80b604:	d8800215 	stw	r2,8(sp)
  80b608:	d8802604 	addi	r2,sp,152
  80b60c:	d8800115 	stw	r2,4(sp)
  80b610:	01c000c4 	movi	r7,3
  80b614:	980d883a 	mov	r6,r19
  80b618:	da003d15 	stw	r8,244(sp)
  80b61c:	080becc0 	call	80becc <_dtoa_r>
  80b620:	d8c02917 	ldw	r3,164(sp)
  80b624:	da003d17 	ldw	r8,244(sp)
  80b628:	1021883a 	mov	r16,r2
  80b62c:	00801184 	movi	r2,70
  80b630:	80f9883a 	add	fp,r16,r3
  80b634:	88bfd926 	beq	r17,r2,80b59c <__alt_mem_onchip_mem+0xff80359c>
  80b638:	003de806 	br	80addc <__alt_mem_onchip_mem+0xff802ddc>
  80b63c:	d9002917 	ldw	r4,164(sp)
  80b640:	00c04d0e 	bge	zero,r3,80b778 <___vfprintf_internal_r+0x20e0>
  80b644:	2000441e 	bne	r4,zero,80b758 <___vfprintf_internal_r+0x20c0>
  80b648:	9480004c 	andi	r18,r18,1
  80b64c:	9000421e 	bne	r18,zero,80b758 <___vfprintf_internal_r+0x20c0>
  80b650:	1805883a 	mov	r2,r3
  80b654:	18007016 	blt	r3,zero,80b818 <___vfprintf_internal_r+0x2180>
  80b658:	d8c03217 	ldw	r3,200(sp)
  80b65c:	d8c02e15 	stw	r3,184(sp)
  80b660:	003e0206 	br	80ae6c <__alt_mem_onchip_mem+0xff802e6c>
  80b664:	df0022c4 	addi	fp,sp,139
  80b668:	dc002915 	stw	r16,164(sp)
  80b66c:	4027883a 	mov	r19,r8
  80b670:	e021883a 	mov	r16,fp
  80b674:	b009883a 	mov	r4,r22
  80b678:	01400284 	movi	r5,10
  80b67c:	0811d140 	call	811d14 <__modsi3>
  80b680:	10800c04 	addi	r2,r2,48
  80b684:	843fffc4 	addi	r16,r16,-1
  80b688:	b009883a 	mov	r4,r22
  80b68c:	01400284 	movi	r5,10
  80b690:	80800005 	stb	r2,0(r16)
  80b694:	0811c900 	call	811c90 <__divsi3>
  80b698:	102d883a 	mov	r22,r2
  80b69c:	00800244 	movi	r2,9
  80b6a0:	15bff416 	blt	r2,r22,80b674 <__alt_mem_onchip_mem+0xff803674>
  80b6a4:	9811883a 	mov	r8,r19
  80b6a8:	b0800c04 	addi	r2,r22,48
  80b6ac:	8027883a 	mov	r19,r16
  80b6b0:	997fffc4 	addi	r5,r19,-1
  80b6b4:	98bfffc5 	stb	r2,-1(r19)
  80b6b8:	dc002917 	ldw	r16,164(sp)
  80b6bc:	2f006a2e 	bgeu	r5,fp,80b868 <___vfprintf_internal_r+0x21d0>
  80b6c0:	d9c02384 	addi	r7,sp,142
  80b6c4:	3ccfc83a 	sub	r7,r7,r19
  80b6c8:	d9002344 	addi	r4,sp,141
  80b6cc:	e1cf883a 	add	r7,fp,r7
  80b6d0:	00000106 	br	80b6d8 <___vfprintf_internal_r+0x2040>
  80b6d4:	28800003 	ldbu	r2,0(r5)
  80b6d8:	20800005 	stb	r2,0(r4)
  80b6dc:	21000044 	addi	r4,r4,1
  80b6e0:	29400044 	addi	r5,r5,1
  80b6e4:	393ffb1e 	bne	r7,r4,80b6d4 <__alt_mem_onchip_mem+0xff8036d4>
  80b6e8:	d8802304 	addi	r2,sp,140
  80b6ec:	14c5c83a 	sub	r2,r2,r19
  80b6f0:	d8c02344 	addi	r3,sp,141
  80b6f4:	1885883a 	add	r2,r3,r2
  80b6f8:	003f7006 	br	80b4bc <__alt_mem_onchip_mem+0xff8034bc>
  80b6fc:	0005883a 	mov	r2,zero
  80b700:	003f0f06 	br	80b340 <__alt_mem_onchip_mem+0xff803340>
  80b704:	d8c03217 	ldw	r3,200(sp)
  80b708:	18c00044 	addi	r3,r3,1
  80b70c:	d8c02e15 	stw	r3,184(sp)
  80b710:	1805883a 	mov	r2,r3
  80b714:	183fb20e 	bge	r3,zero,80b5e0 <__alt_mem_onchip_mem+0xff8035e0>
  80b718:	0005883a 	mov	r2,zero
  80b71c:	003fb006 	br	80b5e0 <__alt_mem_onchip_mem+0xff8035e0>
  80b720:	d9003617 	ldw	r4,216(sp)
  80b724:	000d883a 	mov	r6,zero
  80b728:	000f883a 	mov	r7,zero
  80b72c:	980b883a 	mov	r5,r19
  80b730:	d8c03c15 	stw	r3,240(sp)
  80b734:	da003d15 	stw	r8,244(sp)
  80b738:	081272c0 	call	81272c <__eqdf2>
  80b73c:	d8c03c17 	ldw	r3,240(sp)
  80b740:	da003d17 	ldw	r8,244(sp)
  80b744:	103f9826 	beq	r2,zero,80b5a8 <__alt_mem_onchip_mem+0xff8035a8>
  80b748:	00800044 	movi	r2,1
  80b74c:	10c7c83a 	sub	r3,r2,r3
  80b750:	d8c02615 	stw	r3,152(sp)
  80b754:	003f9506 	br	80b5ac <__alt_mem_onchip_mem+0xff8035ac>
  80b758:	d9002917 	ldw	r4,164(sp)
  80b75c:	d8c03217 	ldw	r3,200(sp)
  80b760:	20800044 	addi	r2,r4,1
  80b764:	1885883a 	add	r2,r3,r2
  80b768:	d8802e15 	stw	r2,184(sp)
  80b76c:	103dbf0e 	bge	r2,zero,80ae6c <__alt_mem_onchip_mem+0xff802e6c>
  80b770:	0005883a 	mov	r2,zero
  80b774:	003dbd06 	br	80ae6c <__alt_mem_onchip_mem+0xff802e6c>
  80b778:	2000211e 	bne	r4,zero,80b800 <___vfprintf_internal_r+0x2168>
  80b77c:	9480004c 	andi	r18,r18,1
  80b780:	90001f1e 	bne	r18,zero,80b800 <___vfprintf_internal_r+0x2168>
  80b784:	00800044 	movi	r2,1
  80b788:	d8802e15 	stw	r2,184(sp)
  80b78c:	003db706 	br	80ae6c <__alt_mem_onchip_mem+0xff802e6c>
  80b790:	00800b44 	movi	r2,45
  80b794:	05adc83a 	sub	r22,zero,r22
  80b798:	d8802305 	stb	r2,140(sp)
  80b79c:	003f3f06 	br	80b49c <__alt_mem_onchip_mem+0xff80349c>
  80b7a0:	0005883a 	mov	r2,zero
  80b7a4:	003f5206 	br	80b4f0 <__alt_mem_onchip_mem+0xff8034f0>
  80b7a8:	90a4703a 	and	r18,r18,r2
  80b7ac:	903f4e26 	beq	r18,zero,80b4e8 <__alt_mem_onchip_mem+0xff8034e8>
  80b7b0:	003f4a06 	br	80b4dc <__alt_mem_onchip_mem+0xff8034dc>
  80b7b4:	00800084 	movi	r2,2
  80b7b8:	10c5c83a 	sub	r2,r2,r3
  80b7bc:	003f8406 	br	80b5d0 <__alt_mem_onchip_mem+0xff8035d0>
  80b7c0:	d8802d17 	ldw	r2,180(sp)
  80b7c4:	d9002d17 	ldw	r4,180(sp)
  80b7c8:	ac400043 	ldbu	r17,1(r21)
  80b7cc:	10800017 	ldw	r2,0(r2)
  80b7d0:	582b883a 	mov	r21,r11
  80b7d4:	d8802915 	stw	r2,164(sp)
  80b7d8:	20800104 	addi	r2,r4,4
  80b7dc:	d9002917 	ldw	r4,164(sp)
  80b7e0:	d8802d15 	stw	r2,180(sp)
  80b7e4:	203e7a0e 	bge	r4,zero,80b1d0 <__alt_mem_onchip_mem+0xff8031d0>
  80b7e8:	8c403fcc 	andi	r17,r17,255
  80b7ec:	00bfffc4 	movi	r2,-1
  80b7f0:	8c40201c 	xori	r17,r17,128
  80b7f4:	d8802915 	stw	r2,164(sp)
  80b7f8:	8c7fe004 	addi	r17,r17,-128
  80b7fc:	00380706 	br	80981c <__alt_mem_onchip_mem+0xff80181c>
  80b800:	d8c02917 	ldw	r3,164(sp)
  80b804:	18c00084 	addi	r3,r3,2
  80b808:	d8c02e15 	stw	r3,184(sp)
  80b80c:	1805883a 	mov	r2,r3
  80b810:	183d960e 	bge	r3,zero,80ae6c <__alt_mem_onchip_mem+0xff802e6c>
  80b814:	003fd606 	br	80b770 <__alt_mem_onchip_mem+0xff803770>
  80b818:	0005883a 	mov	r2,zero
  80b81c:	003f8e06 	br	80b658 <__alt_mem_onchip_mem+0xff803658>
  80b820:	9080004c 	andi	r2,r18,1
  80b824:	103f811e 	bne	r2,zero,80b62c <__alt_mem_onchip_mem+0xff80362c>
  80b828:	d8802117 	ldw	r2,132(sp)
  80b82c:	1405c83a 	sub	r2,r2,r16
  80b830:	d8803315 	stw	r2,204(sp)
  80b834:	b47ef326 	beq	r22,r17,80b404 <__alt_mem_onchip_mem+0xff803404>
  80b838:	dd802617 	ldw	r22,152(sp)
  80b83c:	003f1106 	br	80b484 <__alt_mem_onchip_mem+0xff803484>
  80b840:	d9c02785 	stb	r7,158(sp)
  80b844:	00390406 	br	809c58 <__alt_mem_onchip_mem+0xff801c58>
  80b848:	d9c02785 	stb	r7,158(sp)
  80b84c:	0038d306 	br	809b9c <__alt_mem_onchip_mem+0xff801b9c>
  80b850:	d9c02785 	stb	r7,158(sp)
  80b854:	003a6106 	br	80a1dc <__alt_mem_onchip_mem+0xff8021dc>
  80b858:	d9c02785 	stb	r7,158(sp)
  80b85c:	003af806 	br	80a440 <__alt_mem_onchip_mem+0xff802440>
  80b860:	0005883a 	mov	r2,zero
  80b864:	003d7e06 	br	80ae60 <__alt_mem_onchip_mem+0xff802e60>
  80b868:	d8802344 	addi	r2,sp,141
  80b86c:	003f1306 	br	80b4bc <__alt_mem_onchip_mem+0xff8034bc>
  80b870:	d9c02785 	stb	r7,158(sp)
  80b874:	00392306 	br	809d04 <__alt_mem_onchip_mem+0xff801d04>
  80b878:	d9c02785 	stb	r7,158(sp)
  80b87c:	003aa906 	br	80a324 <__alt_mem_onchip_mem+0xff802324>
  80b880:	d9c02785 	stb	r7,158(sp)
  80b884:	003a3d06 	br	80a17c <__alt_mem_onchip_mem+0xff80217c>
  80b888:	d9c02785 	stb	r7,158(sp)
  80b88c:	003aca06 	br	80a3b8 <__alt_mem_onchip_mem+0xff8023b8>

0080b890 <__vfprintf_internal>:
  80b890:	008020b4 	movhi	r2,130
  80b894:	10a56604 	addi	r2,r2,-27240
  80b898:	300f883a 	mov	r7,r6
  80b89c:	280d883a 	mov	r6,r5
  80b8a0:	200b883a 	mov	r5,r4
  80b8a4:	11000017 	ldw	r4,0(r2)
  80b8a8:	08096981 	jmpi	809698 <___vfprintf_internal_r>

0080b8ac <__sbprintf>:
  80b8ac:	2880030b 	ldhu	r2,12(r5)
  80b8b0:	2ac01917 	ldw	r11,100(r5)
  80b8b4:	2a80038b 	ldhu	r10,14(r5)
  80b8b8:	2a400717 	ldw	r9,28(r5)
  80b8bc:	2a000917 	ldw	r8,36(r5)
  80b8c0:	defee204 	addi	sp,sp,-1144
  80b8c4:	00c10004 	movi	r3,1024
  80b8c8:	dc011a15 	stw	r16,1128(sp)
  80b8cc:	10bfff4c 	andi	r2,r2,65533
  80b8d0:	2821883a 	mov	r16,r5
  80b8d4:	d8cb883a 	add	r5,sp,r3
  80b8d8:	dc811c15 	stw	r18,1136(sp)
  80b8dc:	dc411b15 	stw	r17,1132(sp)
  80b8e0:	dfc11d15 	stw	ra,1140(sp)
  80b8e4:	2025883a 	mov	r18,r4
  80b8e8:	d881030d 	sth	r2,1036(sp)
  80b8ec:	dac11915 	stw	r11,1124(sp)
  80b8f0:	da81038d 	sth	r10,1038(sp)
  80b8f4:	da410715 	stw	r9,1052(sp)
  80b8f8:	da010915 	stw	r8,1060(sp)
  80b8fc:	dec10015 	stw	sp,1024(sp)
  80b900:	dec10415 	stw	sp,1040(sp)
  80b904:	d8c10215 	stw	r3,1032(sp)
  80b908:	d8c10515 	stw	r3,1044(sp)
  80b90c:	d8010615 	stw	zero,1048(sp)
  80b910:	08096980 	call	809698 <___vfprintf_internal_r>
  80b914:	1023883a 	mov	r17,r2
  80b918:	10000416 	blt	r2,zero,80b92c <__sbprintf+0x80>
  80b91c:	d9410004 	addi	r5,sp,1024
  80b920:	9009883a 	mov	r4,r18
  80b924:	08074380 	call	807438 <_fflush_r>
  80b928:	10000d1e 	bne	r2,zero,80b960 <__sbprintf+0xb4>
  80b92c:	d881030b 	ldhu	r2,1036(sp)
  80b930:	1080100c 	andi	r2,r2,64
  80b934:	10000326 	beq	r2,zero,80b944 <__sbprintf+0x98>
  80b938:	8080030b 	ldhu	r2,12(r16)
  80b93c:	10801014 	ori	r2,r2,64
  80b940:	8080030d 	sth	r2,12(r16)
  80b944:	8805883a 	mov	r2,r17
  80b948:	dfc11d17 	ldw	ra,1140(sp)
  80b94c:	dc811c17 	ldw	r18,1136(sp)
  80b950:	dc411b17 	ldw	r17,1132(sp)
  80b954:	dc011a17 	ldw	r16,1128(sp)
  80b958:	dec11e04 	addi	sp,sp,1144
  80b95c:	f800283a 	ret
  80b960:	047fffc4 	movi	r17,-1
  80b964:	003ff106 	br	80b92c <__alt_mem_onchip_mem+0xff80392c>

0080b968 <vfprintf>:
  80b968:	080b8901 	jmpi	80b890 <__vfprintf_internal>

0080b96c <__swbuf_r>:
  80b96c:	defffb04 	addi	sp,sp,-20
  80b970:	dcc00315 	stw	r19,12(sp)
  80b974:	dc800215 	stw	r18,8(sp)
  80b978:	dc000015 	stw	r16,0(sp)
  80b97c:	dfc00415 	stw	ra,16(sp)
  80b980:	dc400115 	stw	r17,4(sp)
  80b984:	2025883a 	mov	r18,r4
  80b988:	2827883a 	mov	r19,r5
  80b98c:	3021883a 	mov	r16,r6
  80b990:	20000226 	beq	r4,zero,80b99c <__swbuf_r+0x30>
  80b994:	20800e17 	ldw	r2,56(r4)
  80b998:	10004226 	beq	r2,zero,80baa4 <__swbuf_r+0x138>
  80b99c:	80800617 	ldw	r2,24(r16)
  80b9a0:	8100030b 	ldhu	r4,12(r16)
  80b9a4:	80800215 	stw	r2,8(r16)
  80b9a8:	2080020c 	andi	r2,r4,8
  80b9ac:	10003626 	beq	r2,zero,80ba88 <__swbuf_r+0x11c>
  80b9b0:	80c00417 	ldw	r3,16(r16)
  80b9b4:	18003426 	beq	r3,zero,80ba88 <__swbuf_r+0x11c>
  80b9b8:	2088000c 	andi	r2,r4,8192
  80b9bc:	9c403fcc 	andi	r17,r19,255
  80b9c0:	10001a26 	beq	r2,zero,80ba2c <__swbuf_r+0xc0>
  80b9c4:	80800017 	ldw	r2,0(r16)
  80b9c8:	81000517 	ldw	r4,20(r16)
  80b9cc:	10c7c83a 	sub	r3,r2,r3
  80b9d0:	1900200e 	bge	r3,r4,80ba54 <__swbuf_r+0xe8>
  80b9d4:	18c00044 	addi	r3,r3,1
  80b9d8:	81000217 	ldw	r4,8(r16)
  80b9dc:	11400044 	addi	r5,r2,1
  80b9e0:	81400015 	stw	r5,0(r16)
  80b9e4:	213fffc4 	addi	r4,r4,-1
  80b9e8:	81000215 	stw	r4,8(r16)
  80b9ec:	14c00005 	stb	r19,0(r2)
  80b9f0:	80800517 	ldw	r2,20(r16)
  80b9f4:	10c01e26 	beq	r2,r3,80ba70 <__swbuf_r+0x104>
  80b9f8:	8080030b 	ldhu	r2,12(r16)
  80b9fc:	1080004c 	andi	r2,r2,1
  80ba00:	10000226 	beq	r2,zero,80ba0c <__swbuf_r+0xa0>
  80ba04:	00800284 	movi	r2,10
  80ba08:	88801926 	beq	r17,r2,80ba70 <__swbuf_r+0x104>
  80ba0c:	8805883a 	mov	r2,r17
  80ba10:	dfc00417 	ldw	ra,16(sp)
  80ba14:	dcc00317 	ldw	r19,12(sp)
  80ba18:	dc800217 	ldw	r18,8(sp)
  80ba1c:	dc400117 	ldw	r17,4(sp)
  80ba20:	dc000017 	ldw	r16,0(sp)
  80ba24:	dec00504 	addi	sp,sp,20
  80ba28:	f800283a 	ret
  80ba2c:	81401917 	ldw	r5,100(r16)
  80ba30:	00b7ffc4 	movi	r2,-8193
  80ba34:	21080014 	ori	r4,r4,8192
  80ba38:	2884703a 	and	r2,r5,r2
  80ba3c:	80801915 	stw	r2,100(r16)
  80ba40:	80800017 	ldw	r2,0(r16)
  80ba44:	8100030d 	sth	r4,12(r16)
  80ba48:	81000517 	ldw	r4,20(r16)
  80ba4c:	10c7c83a 	sub	r3,r2,r3
  80ba50:	193fe016 	blt	r3,r4,80b9d4 <__alt_mem_onchip_mem+0xff8039d4>
  80ba54:	800b883a 	mov	r5,r16
  80ba58:	9009883a 	mov	r4,r18
  80ba5c:	08074380 	call	807438 <_fflush_r>
  80ba60:	1000071e 	bne	r2,zero,80ba80 <__swbuf_r+0x114>
  80ba64:	80800017 	ldw	r2,0(r16)
  80ba68:	00c00044 	movi	r3,1
  80ba6c:	003fda06 	br	80b9d8 <__alt_mem_onchip_mem+0xff8039d8>
  80ba70:	800b883a 	mov	r5,r16
  80ba74:	9009883a 	mov	r4,r18
  80ba78:	08074380 	call	807438 <_fflush_r>
  80ba7c:	103fe326 	beq	r2,zero,80ba0c <__alt_mem_onchip_mem+0xff803a0c>
  80ba80:	00bfffc4 	movi	r2,-1
  80ba84:	003fe206 	br	80ba10 <__alt_mem_onchip_mem+0xff803a10>
  80ba88:	800b883a 	mov	r5,r16
  80ba8c:	9009883a 	mov	r4,r18
  80ba90:	080bb240 	call	80bb24 <__swsetup_r>
  80ba94:	103ffa1e 	bne	r2,zero,80ba80 <__alt_mem_onchip_mem+0xff803a80>
  80ba98:	8100030b 	ldhu	r4,12(r16)
  80ba9c:	80c00417 	ldw	r3,16(r16)
  80baa0:	003fc506 	br	80b9b8 <__alt_mem_onchip_mem+0xff8039b8>
  80baa4:	08078140 	call	807814 <__sinit>
  80baa8:	003fbc06 	br	80b99c <__alt_mem_onchip_mem+0xff80399c>

0080baac <__swbuf>:
  80baac:	008020b4 	movhi	r2,130
  80bab0:	10a56604 	addi	r2,r2,-27240
  80bab4:	280d883a 	mov	r6,r5
  80bab8:	200b883a 	mov	r5,r4
  80babc:	11000017 	ldw	r4,0(r2)
  80bac0:	080b96c1 	jmpi	80b96c <__swbuf_r>

0080bac4 <_write_r>:
  80bac4:	defffd04 	addi	sp,sp,-12
  80bac8:	2805883a 	mov	r2,r5
  80bacc:	dc000015 	stw	r16,0(sp)
  80bad0:	040020b4 	movhi	r16,130
  80bad4:	dc400115 	stw	r17,4(sp)
  80bad8:	300b883a 	mov	r5,r6
  80badc:	842cd104 	addi	r16,r16,-19644
  80bae0:	2023883a 	mov	r17,r4
  80bae4:	380d883a 	mov	r6,r7
  80bae8:	1009883a 	mov	r4,r2
  80baec:	dfc00215 	stw	ra,8(sp)
  80baf0:	80000015 	stw	zero,0(r16)
  80baf4:	0813f140 	call	813f14 <write>
  80baf8:	00ffffc4 	movi	r3,-1
  80bafc:	10c00526 	beq	r2,r3,80bb14 <_write_r+0x50>
  80bb00:	dfc00217 	ldw	ra,8(sp)
  80bb04:	dc400117 	ldw	r17,4(sp)
  80bb08:	dc000017 	ldw	r16,0(sp)
  80bb0c:	dec00304 	addi	sp,sp,12
  80bb10:	f800283a 	ret
  80bb14:	80c00017 	ldw	r3,0(r16)
  80bb18:	183ff926 	beq	r3,zero,80bb00 <__alt_mem_onchip_mem+0xff803b00>
  80bb1c:	88c00015 	stw	r3,0(r17)
  80bb20:	003ff706 	br	80bb00 <__alt_mem_onchip_mem+0xff803b00>

0080bb24 <__swsetup_r>:
  80bb24:	008020b4 	movhi	r2,130
  80bb28:	defffd04 	addi	sp,sp,-12
  80bb2c:	10a56604 	addi	r2,r2,-27240
  80bb30:	dc400115 	stw	r17,4(sp)
  80bb34:	2023883a 	mov	r17,r4
  80bb38:	11000017 	ldw	r4,0(r2)
  80bb3c:	dc000015 	stw	r16,0(sp)
  80bb40:	dfc00215 	stw	ra,8(sp)
  80bb44:	2821883a 	mov	r16,r5
  80bb48:	20000226 	beq	r4,zero,80bb54 <__swsetup_r+0x30>
  80bb4c:	20800e17 	ldw	r2,56(r4)
  80bb50:	10003126 	beq	r2,zero,80bc18 <__swsetup_r+0xf4>
  80bb54:	8080030b 	ldhu	r2,12(r16)
  80bb58:	10c0020c 	andi	r3,r2,8
  80bb5c:	1009883a 	mov	r4,r2
  80bb60:	18000f26 	beq	r3,zero,80bba0 <__swsetup_r+0x7c>
  80bb64:	80c00417 	ldw	r3,16(r16)
  80bb68:	18001526 	beq	r3,zero,80bbc0 <__swsetup_r+0x9c>
  80bb6c:	1100004c 	andi	r4,r2,1
  80bb70:	20001c1e 	bne	r4,zero,80bbe4 <__swsetup_r+0xc0>
  80bb74:	1080008c 	andi	r2,r2,2
  80bb78:	1000291e 	bne	r2,zero,80bc20 <__swsetup_r+0xfc>
  80bb7c:	80800517 	ldw	r2,20(r16)
  80bb80:	80800215 	stw	r2,8(r16)
  80bb84:	18001c26 	beq	r3,zero,80bbf8 <__swsetup_r+0xd4>
  80bb88:	0005883a 	mov	r2,zero
  80bb8c:	dfc00217 	ldw	ra,8(sp)
  80bb90:	dc400117 	ldw	r17,4(sp)
  80bb94:	dc000017 	ldw	r16,0(sp)
  80bb98:	dec00304 	addi	sp,sp,12
  80bb9c:	f800283a 	ret
  80bba0:	2080040c 	andi	r2,r4,16
  80bba4:	10002e26 	beq	r2,zero,80bc60 <__swsetup_r+0x13c>
  80bba8:	2080010c 	andi	r2,r4,4
  80bbac:	10001e1e 	bne	r2,zero,80bc28 <__swsetup_r+0x104>
  80bbb0:	80c00417 	ldw	r3,16(r16)
  80bbb4:	20800214 	ori	r2,r4,8
  80bbb8:	8080030d 	sth	r2,12(r16)
  80bbbc:	183feb1e 	bne	r3,zero,80bb6c <__alt_mem_onchip_mem+0xff803b6c>
  80bbc0:	1100a00c 	andi	r4,r2,640
  80bbc4:	01408004 	movi	r5,512
  80bbc8:	217fe826 	beq	r4,r5,80bb6c <__alt_mem_onchip_mem+0xff803b6c>
  80bbcc:	800b883a 	mov	r5,r16
  80bbd0:	8809883a 	mov	r4,r17
  80bbd4:	08084f40 	call	8084f4 <__smakebuf_r>
  80bbd8:	8080030b 	ldhu	r2,12(r16)
  80bbdc:	80c00417 	ldw	r3,16(r16)
  80bbe0:	003fe206 	br	80bb6c <__alt_mem_onchip_mem+0xff803b6c>
  80bbe4:	80800517 	ldw	r2,20(r16)
  80bbe8:	80000215 	stw	zero,8(r16)
  80bbec:	0085c83a 	sub	r2,zero,r2
  80bbf0:	80800615 	stw	r2,24(r16)
  80bbf4:	183fe41e 	bne	r3,zero,80bb88 <__alt_mem_onchip_mem+0xff803b88>
  80bbf8:	80c0030b 	ldhu	r3,12(r16)
  80bbfc:	0005883a 	mov	r2,zero
  80bc00:	1900200c 	andi	r4,r3,128
  80bc04:	203fe126 	beq	r4,zero,80bb8c <__alt_mem_onchip_mem+0xff803b8c>
  80bc08:	18c01014 	ori	r3,r3,64
  80bc0c:	80c0030d 	sth	r3,12(r16)
  80bc10:	00bfffc4 	movi	r2,-1
  80bc14:	003fdd06 	br	80bb8c <__alt_mem_onchip_mem+0xff803b8c>
  80bc18:	08078140 	call	807814 <__sinit>
  80bc1c:	003fcd06 	br	80bb54 <__alt_mem_onchip_mem+0xff803b54>
  80bc20:	0005883a 	mov	r2,zero
  80bc24:	003fd606 	br	80bb80 <__alt_mem_onchip_mem+0xff803b80>
  80bc28:	81400c17 	ldw	r5,48(r16)
  80bc2c:	28000626 	beq	r5,zero,80bc48 <__swsetup_r+0x124>
  80bc30:	80801004 	addi	r2,r16,64
  80bc34:	28800326 	beq	r5,r2,80bc44 <__swsetup_r+0x120>
  80bc38:	8809883a 	mov	r4,r17
  80bc3c:	0807b800 	call	807b80 <_free_r>
  80bc40:	8100030b 	ldhu	r4,12(r16)
  80bc44:	80000c15 	stw	zero,48(r16)
  80bc48:	80c00417 	ldw	r3,16(r16)
  80bc4c:	00bff6c4 	movi	r2,-37
  80bc50:	1108703a 	and	r4,r2,r4
  80bc54:	80000115 	stw	zero,4(r16)
  80bc58:	80c00015 	stw	r3,0(r16)
  80bc5c:	003fd506 	br	80bbb4 <__alt_mem_onchip_mem+0xff803bb4>
  80bc60:	00800244 	movi	r2,9
  80bc64:	88800015 	stw	r2,0(r17)
  80bc68:	20801014 	ori	r2,r4,64
  80bc6c:	8080030d 	sth	r2,12(r16)
  80bc70:	00bfffc4 	movi	r2,-1
  80bc74:	003fc506 	br	80bb8c <__alt_mem_onchip_mem+0xff803b8c>

0080bc78 <_close_r>:
  80bc78:	defffd04 	addi	sp,sp,-12
  80bc7c:	dc000015 	stw	r16,0(sp)
  80bc80:	040020b4 	movhi	r16,130
  80bc84:	dc400115 	stw	r17,4(sp)
  80bc88:	842cd104 	addi	r16,r16,-19644
  80bc8c:	2023883a 	mov	r17,r4
  80bc90:	2809883a 	mov	r4,r5
  80bc94:	dfc00215 	stw	ra,8(sp)
  80bc98:	80000015 	stw	zero,0(r16)
  80bc9c:	081315c0 	call	81315c <close>
  80bca0:	00ffffc4 	movi	r3,-1
  80bca4:	10c00526 	beq	r2,r3,80bcbc <_close_r+0x44>
  80bca8:	dfc00217 	ldw	ra,8(sp)
  80bcac:	dc400117 	ldw	r17,4(sp)
  80bcb0:	dc000017 	ldw	r16,0(sp)
  80bcb4:	dec00304 	addi	sp,sp,12
  80bcb8:	f800283a 	ret
  80bcbc:	80c00017 	ldw	r3,0(r16)
  80bcc0:	183ff926 	beq	r3,zero,80bca8 <__alt_mem_onchip_mem+0xff803ca8>
  80bcc4:	88c00015 	stw	r3,0(r17)
  80bcc8:	003ff706 	br	80bca8 <__alt_mem_onchip_mem+0xff803ca8>

0080bccc <quorem>:
  80bccc:	defff704 	addi	sp,sp,-36
  80bcd0:	dc800215 	stw	r18,8(sp)
  80bcd4:	20800417 	ldw	r2,16(r4)
  80bcd8:	2c800417 	ldw	r18,16(r5)
  80bcdc:	dfc00815 	stw	ra,32(sp)
  80bce0:	ddc00715 	stw	r23,28(sp)
  80bce4:	dd800615 	stw	r22,24(sp)
  80bce8:	dd400515 	stw	r21,20(sp)
  80bcec:	dd000415 	stw	r20,16(sp)
  80bcf0:	dcc00315 	stw	r19,12(sp)
  80bcf4:	dc400115 	stw	r17,4(sp)
  80bcf8:	dc000015 	stw	r16,0(sp)
  80bcfc:	14807116 	blt	r2,r18,80bec4 <quorem+0x1f8>
  80bd00:	94bfffc4 	addi	r18,r18,-1
  80bd04:	94ad883a 	add	r22,r18,r18
  80bd08:	b5ad883a 	add	r22,r22,r22
  80bd0c:	2c400504 	addi	r17,r5,20
  80bd10:	8da9883a 	add	r20,r17,r22
  80bd14:	25400504 	addi	r21,r4,20
  80bd18:	282f883a 	mov	r23,r5
  80bd1c:	adad883a 	add	r22,r21,r22
  80bd20:	a1400017 	ldw	r5,0(r20)
  80bd24:	2021883a 	mov	r16,r4
  80bd28:	b1000017 	ldw	r4,0(r22)
  80bd2c:	29400044 	addi	r5,r5,1
  80bd30:	0811d880 	call	811d88 <__udivsi3>
  80bd34:	1027883a 	mov	r19,r2
  80bd38:	10002c26 	beq	r2,zero,80bdec <quorem+0x120>
  80bd3c:	a813883a 	mov	r9,r21
  80bd40:	880b883a 	mov	r5,r17
  80bd44:	0009883a 	mov	r4,zero
  80bd48:	000d883a 	mov	r6,zero
  80bd4c:	2a000017 	ldw	r8,0(r5)
  80bd50:	49c00017 	ldw	r7,0(r9)
  80bd54:	29400104 	addi	r5,r5,4
  80bd58:	40bfffcc 	andi	r2,r8,65535
  80bd5c:	14c5383a 	mul	r2,r2,r19
  80bd60:	4010d43a 	srli	r8,r8,16
  80bd64:	38ffffcc 	andi	r3,r7,65535
  80bd68:	1105883a 	add	r2,r2,r4
  80bd6c:	1008d43a 	srli	r4,r2,16
  80bd70:	44d1383a 	mul	r8,r8,r19
  80bd74:	198d883a 	add	r6,r3,r6
  80bd78:	10ffffcc 	andi	r3,r2,65535
  80bd7c:	30c7c83a 	sub	r3,r6,r3
  80bd80:	380ed43a 	srli	r7,r7,16
  80bd84:	4105883a 	add	r2,r8,r4
  80bd88:	180dd43a 	srai	r6,r3,16
  80bd8c:	113fffcc 	andi	r4,r2,65535
  80bd90:	390fc83a 	sub	r7,r7,r4
  80bd94:	398d883a 	add	r6,r7,r6
  80bd98:	300e943a 	slli	r7,r6,16
  80bd9c:	18ffffcc 	andi	r3,r3,65535
  80bda0:	1008d43a 	srli	r4,r2,16
  80bda4:	38ceb03a 	or	r7,r7,r3
  80bda8:	49c00015 	stw	r7,0(r9)
  80bdac:	300dd43a 	srai	r6,r6,16
  80bdb0:	4a400104 	addi	r9,r9,4
  80bdb4:	a17fe52e 	bgeu	r20,r5,80bd4c <__alt_mem_onchip_mem+0xff803d4c>
  80bdb8:	b0800017 	ldw	r2,0(r22)
  80bdbc:	10000b1e 	bne	r2,zero,80bdec <quorem+0x120>
  80bdc0:	b0bfff04 	addi	r2,r22,-4
  80bdc4:	a880082e 	bgeu	r21,r2,80bde8 <quorem+0x11c>
  80bdc8:	b0ffff17 	ldw	r3,-4(r22)
  80bdcc:	18000326 	beq	r3,zero,80bddc <quorem+0x110>
  80bdd0:	00000506 	br	80bde8 <quorem+0x11c>
  80bdd4:	10c00017 	ldw	r3,0(r2)
  80bdd8:	1800031e 	bne	r3,zero,80bde8 <quorem+0x11c>
  80bddc:	10bfff04 	addi	r2,r2,-4
  80bde0:	94bfffc4 	addi	r18,r18,-1
  80bde4:	a8bffb36 	bltu	r21,r2,80bdd4 <__alt_mem_onchip_mem+0xff803dd4>
  80bde8:	84800415 	stw	r18,16(r16)
  80bdec:	b80b883a 	mov	r5,r23
  80bdf0:	8009883a 	mov	r4,r16
  80bdf4:	080e89c0 	call	80e89c <__mcmp>
  80bdf8:	10002616 	blt	r2,zero,80be94 <quorem+0x1c8>
  80bdfc:	9cc00044 	addi	r19,r19,1
  80be00:	a805883a 	mov	r2,r21
  80be04:	000b883a 	mov	r5,zero
  80be08:	11000017 	ldw	r4,0(r2)
  80be0c:	89800017 	ldw	r6,0(r17)
  80be10:	10800104 	addi	r2,r2,4
  80be14:	20ffffcc 	andi	r3,r4,65535
  80be18:	194b883a 	add	r5,r3,r5
  80be1c:	30ffffcc 	andi	r3,r6,65535
  80be20:	28c7c83a 	sub	r3,r5,r3
  80be24:	300cd43a 	srli	r6,r6,16
  80be28:	2008d43a 	srli	r4,r4,16
  80be2c:	180bd43a 	srai	r5,r3,16
  80be30:	18ffffcc 	andi	r3,r3,65535
  80be34:	2189c83a 	sub	r4,r4,r6
  80be38:	2149883a 	add	r4,r4,r5
  80be3c:	200c943a 	slli	r6,r4,16
  80be40:	8c400104 	addi	r17,r17,4
  80be44:	200bd43a 	srai	r5,r4,16
  80be48:	30c6b03a 	or	r3,r6,r3
  80be4c:	10ffff15 	stw	r3,-4(r2)
  80be50:	a47fed2e 	bgeu	r20,r17,80be08 <__alt_mem_onchip_mem+0xff803e08>
  80be54:	9485883a 	add	r2,r18,r18
  80be58:	1085883a 	add	r2,r2,r2
  80be5c:	a887883a 	add	r3,r21,r2
  80be60:	18800017 	ldw	r2,0(r3)
  80be64:	10000b1e 	bne	r2,zero,80be94 <quorem+0x1c8>
  80be68:	18bfff04 	addi	r2,r3,-4
  80be6c:	a880082e 	bgeu	r21,r2,80be90 <quorem+0x1c4>
  80be70:	18ffff17 	ldw	r3,-4(r3)
  80be74:	18000326 	beq	r3,zero,80be84 <quorem+0x1b8>
  80be78:	00000506 	br	80be90 <quorem+0x1c4>
  80be7c:	10c00017 	ldw	r3,0(r2)
  80be80:	1800031e 	bne	r3,zero,80be90 <quorem+0x1c4>
  80be84:	10bfff04 	addi	r2,r2,-4
  80be88:	94bfffc4 	addi	r18,r18,-1
  80be8c:	a8bffb36 	bltu	r21,r2,80be7c <__alt_mem_onchip_mem+0xff803e7c>
  80be90:	84800415 	stw	r18,16(r16)
  80be94:	9805883a 	mov	r2,r19
  80be98:	dfc00817 	ldw	ra,32(sp)
  80be9c:	ddc00717 	ldw	r23,28(sp)
  80bea0:	dd800617 	ldw	r22,24(sp)
  80bea4:	dd400517 	ldw	r21,20(sp)
  80bea8:	dd000417 	ldw	r20,16(sp)
  80beac:	dcc00317 	ldw	r19,12(sp)
  80beb0:	dc800217 	ldw	r18,8(sp)
  80beb4:	dc400117 	ldw	r17,4(sp)
  80beb8:	dc000017 	ldw	r16,0(sp)
  80bebc:	dec00904 	addi	sp,sp,36
  80bec0:	f800283a 	ret
  80bec4:	0005883a 	mov	r2,zero
  80bec8:	003ff306 	br	80be98 <__alt_mem_onchip_mem+0xff803e98>

0080becc <_dtoa_r>:
  80becc:	20801017 	ldw	r2,64(r4)
  80bed0:	deffde04 	addi	sp,sp,-136
  80bed4:	df002015 	stw	fp,128(sp)
  80bed8:	dcc01b15 	stw	r19,108(sp)
  80bedc:	dc801a15 	stw	r18,104(sp)
  80bee0:	dc401915 	stw	r17,100(sp)
  80bee4:	dc001815 	stw	r16,96(sp)
  80bee8:	dfc02115 	stw	ra,132(sp)
  80beec:	ddc01f15 	stw	r23,124(sp)
  80bef0:	dd801e15 	stw	r22,120(sp)
  80bef4:	dd401d15 	stw	r21,116(sp)
  80bef8:	dd001c15 	stw	r20,112(sp)
  80befc:	d9c00315 	stw	r7,12(sp)
  80bf00:	2039883a 	mov	fp,r4
  80bf04:	3023883a 	mov	r17,r6
  80bf08:	2825883a 	mov	r18,r5
  80bf0c:	dc002417 	ldw	r16,144(sp)
  80bf10:	3027883a 	mov	r19,r6
  80bf14:	10000826 	beq	r2,zero,80bf38 <_dtoa_r+0x6c>
  80bf18:	21801117 	ldw	r6,68(r4)
  80bf1c:	00c00044 	movi	r3,1
  80bf20:	100b883a 	mov	r5,r2
  80bf24:	1986983a 	sll	r3,r3,r6
  80bf28:	11800115 	stw	r6,4(r2)
  80bf2c:	10c00215 	stw	r3,8(r2)
  80bf30:	080e07c0 	call	80e07c <_Bfree>
  80bf34:	e0001015 	stw	zero,64(fp)
  80bf38:	88002e16 	blt	r17,zero,80bff4 <_dtoa_r+0x128>
  80bf3c:	80000015 	stw	zero,0(r16)
  80bf40:	889ffc2c 	andhi	r2,r17,32752
  80bf44:	00dffc34 	movhi	r3,32752
  80bf48:	10c01c26 	beq	r2,r3,80bfbc <_dtoa_r+0xf0>
  80bf4c:	000d883a 	mov	r6,zero
  80bf50:	000f883a 	mov	r7,zero
  80bf54:	9009883a 	mov	r4,r18
  80bf58:	980b883a 	mov	r5,r19
  80bf5c:	081272c0 	call	81272c <__eqdf2>
  80bf60:	10002b1e 	bne	r2,zero,80c010 <_dtoa_r+0x144>
  80bf64:	d9c02317 	ldw	r7,140(sp)
  80bf68:	00800044 	movi	r2,1
  80bf6c:	38800015 	stw	r2,0(r7)
  80bf70:	d8802517 	ldw	r2,148(sp)
  80bf74:	10019e26 	beq	r2,zero,80c5f0 <_dtoa_r+0x724>
  80bf78:	d8c02517 	ldw	r3,148(sp)
  80bf7c:	00802074 	movhi	r2,129
  80bf80:	109d2744 	addi	r2,r2,29853
  80bf84:	18800015 	stw	r2,0(r3)
  80bf88:	10bfffc4 	addi	r2,r2,-1
  80bf8c:	dfc02117 	ldw	ra,132(sp)
  80bf90:	df002017 	ldw	fp,128(sp)
  80bf94:	ddc01f17 	ldw	r23,124(sp)
  80bf98:	dd801e17 	ldw	r22,120(sp)
  80bf9c:	dd401d17 	ldw	r21,116(sp)
  80bfa0:	dd001c17 	ldw	r20,112(sp)
  80bfa4:	dcc01b17 	ldw	r19,108(sp)
  80bfa8:	dc801a17 	ldw	r18,104(sp)
  80bfac:	dc401917 	ldw	r17,100(sp)
  80bfb0:	dc001817 	ldw	r16,96(sp)
  80bfb4:	dec02204 	addi	sp,sp,136
  80bfb8:	f800283a 	ret
  80bfbc:	d8c02317 	ldw	r3,140(sp)
  80bfc0:	0089c3c4 	movi	r2,9999
  80bfc4:	18800015 	stw	r2,0(r3)
  80bfc8:	90017726 	beq	r18,zero,80c5a8 <_dtoa_r+0x6dc>
  80bfcc:	00802074 	movhi	r2,129
  80bfd0:	109d3304 	addi	r2,r2,29900
  80bfd4:	d9002517 	ldw	r4,148(sp)
  80bfd8:	203fec26 	beq	r4,zero,80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80bfdc:	10c000c7 	ldb	r3,3(r2)
  80bfe0:	1801781e 	bne	r3,zero,80c5c4 <_dtoa_r+0x6f8>
  80bfe4:	10c000c4 	addi	r3,r2,3
  80bfe8:	d9802517 	ldw	r6,148(sp)
  80bfec:	30c00015 	stw	r3,0(r6)
  80bff0:	003fe606 	br	80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80bff4:	04e00034 	movhi	r19,32768
  80bff8:	9cffffc4 	addi	r19,r19,-1
  80bffc:	00800044 	movi	r2,1
  80c000:	8ce6703a 	and	r19,r17,r19
  80c004:	80800015 	stw	r2,0(r16)
  80c008:	9823883a 	mov	r17,r19
  80c00c:	003fcc06 	br	80bf40 <__alt_mem_onchip_mem+0xff803f40>
  80c010:	d8800204 	addi	r2,sp,8
  80c014:	d8800015 	stw	r2,0(sp)
  80c018:	d9c00104 	addi	r7,sp,4
  80c01c:	900b883a 	mov	r5,r18
  80c020:	980d883a 	mov	r6,r19
  80c024:	e009883a 	mov	r4,fp
  80c028:	8820d53a 	srli	r16,r17,20
  80c02c:	080ec680 	call	80ec68 <__d2b>
  80c030:	d8800915 	stw	r2,36(sp)
  80c034:	8001651e 	bne	r16,zero,80c5cc <_dtoa_r+0x700>
  80c038:	dd800217 	ldw	r22,8(sp)
  80c03c:	dc000117 	ldw	r16,4(sp)
  80c040:	00800804 	movi	r2,32
  80c044:	b421883a 	add	r16,r22,r16
  80c048:	80c10c84 	addi	r3,r16,1074
  80c04c:	10c2d10e 	bge	r2,r3,80cb94 <_dtoa_r+0xcc8>
  80c050:	00801004 	movi	r2,64
  80c054:	81010484 	addi	r4,r16,1042
  80c058:	10c7c83a 	sub	r3,r2,r3
  80c05c:	9108d83a 	srl	r4,r18,r4
  80c060:	88e2983a 	sll	r17,r17,r3
  80c064:	2448b03a 	or	r4,r4,r17
  80c068:	0812f4c0 	call	812f4c <__floatunsidf>
  80c06c:	017f8434 	movhi	r5,65040
  80c070:	01800044 	movi	r6,1
  80c074:	1009883a 	mov	r4,r2
  80c078:	194b883a 	add	r5,r3,r5
  80c07c:	843fffc4 	addi	r16,r16,-1
  80c080:	d9801115 	stw	r6,68(sp)
  80c084:	000d883a 	mov	r6,zero
  80c088:	01cffe34 	movhi	r7,16376
  80c08c:	08066dc0 	call	8066dc <__subdf3>
  80c090:	0198dbf4 	movhi	r6,25455
  80c094:	01cff4f4 	movhi	r7,16339
  80c098:	3190d844 	addi	r6,r6,17249
  80c09c:	39e1e9c4 	addi	r7,r7,-30809
  80c0a0:	1009883a 	mov	r4,r2
  80c0a4:	180b883a 	mov	r5,r3
  80c0a8:	08127b40 	call	8127b4 <__muldf3>
  80c0ac:	01a2d874 	movhi	r6,35681
  80c0b0:	01cff1f4 	movhi	r7,16327
  80c0b4:	31b22cc4 	addi	r6,r6,-14157
  80c0b8:	39e28a04 	addi	r7,r7,-30168
  80c0bc:	180b883a 	mov	r5,r3
  80c0c0:	1009883a 	mov	r4,r2
  80c0c4:	0805c600 	call	805c60 <__adddf3>
  80c0c8:	8009883a 	mov	r4,r16
  80c0cc:	1029883a 	mov	r20,r2
  80c0d0:	1823883a 	mov	r17,r3
  80c0d4:	0806fd80 	call	806fd8 <__floatsidf>
  80c0d8:	019427f4 	movhi	r6,20639
  80c0dc:	01cff4f4 	movhi	r7,16339
  80c0e0:	319e7ec4 	addi	r6,r6,31227
  80c0e4:	39d104c4 	addi	r7,r7,17427
  80c0e8:	1009883a 	mov	r4,r2
  80c0ec:	180b883a 	mov	r5,r3
  80c0f0:	08127b40 	call	8127b4 <__muldf3>
  80c0f4:	100d883a 	mov	r6,r2
  80c0f8:	180f883a 	mov	r7,r3
  80c0fc:	a009883a 	mov	r4,r20
  80c100:	880b883a 	mov	r5,r17
  80c104:	0805c600 	call	805c60 <__adddf3>
  80c108:	1009883a 	mov	r4,r2
  80c10c:	180b883a 	mov	r5,r3
  80c110:	1029883a 	mov	r20,r2
  80c114:	1823883a 	mov	r17,r3
  80c118:	0812ecc0 	call	812ecc <__fixdfsi>
  80c11c:	000d883a 	mov	r6,zero
  80c120:	000f883a 	mov	r7,zero
  80c124:	a009883a 	mov	r4,r20
  80c128:	880b883a 	mov	r5,r17
  80c12c:	d8800515 	stw	r2,20(sp)
  80c130:	08065e80 	call	8065e8 <__ledf2>
  80c134:	10028716 	blt	r2,zero,80cb54 <_dtoa_r+0xc88>
  80c138:	d8c00517 	ldw	r3,20(sp)
  80c13c:	00800584 	movi	r2,22
  80c140:	10c27536 	bltu	r2,r3,80cb18 <_dtoa_r+0xc4c>
  80c144:	180490fa 	slli	r2,r3,3
  80c148:	00c02074 	movhi	r3,129
  80c14c:	18dd4e04 	addi	r3,r3,30008
  80c150:	1885883a 	add	r2,r3,r2
  80c154:	11000017 	ldw	r4,0(r2)
  80c158:	11400117 	ldw	r5,4(r2)
  80c15c:	900d883a 	mov	r6,r18
  80c160:	980f883a 	mov	r7,r19
  80c164:	080650c0 	call	80650c <__gedf2>
  80c168:	00828d0e 	bge	zero,r2,80cba0 <_dtoa_r+0xcd4>
  80c16c:	d9000517 	ldw	r4,20(sp)
  80c170:	d8000e15 	stw	zero,56(sp)
  80c174:	213fffc4 	addi	r4,r4,-1
  80c178:	d9000515 	stw	r4,20(sp)
  80c17c:	b42dc83a 	sub	r22,r22,r16
  80c180:	b5bfffc4 	addi	r22,r22,-1
  80c184:	b0026f16 	blt	r22,zero,80cb44 <_dtoa_r+0xc78>
  80c188:	d8000815 	stw	zero,32(sp)
  80c18c:	d9c00517 	ldw	r7,20(sp)
  80c190:	38026416 	blt	r7,zero,80cb24 <_dtoa_r+0xc58>
  80c194:	b1ed883a 	add	r22,r22,r7
  80c198:	d9c00d15 	stw	r7,52(sp)
  80c19c:	d8000a15 	stw	zero,40(sp)
  80c1a0:	d9800317 	ldw	r6,12(sp)
  80c1a4:	00800244 	movi	r2,9
  80c1a8:	11811436 	bltu	r2,r6,80c5fc <_dtoa_r+0x730>
  80c1ac:	00800144 	movi	r2,5
  80c1b0:	1184e10e 	bge	r2,r6,80d538 <_dtoa_r+0x166c>
  80c1b4:	31bfff04 	addi	r6,r6,-4
  80c1b8:	d9800315 	stw	r6,12(sp)
  80c1bc:	0023883a 	mov	r17,zero
  80c1c0:	d9800317 	ldw	r6,12(sp)
  80c1c4:	008000c4 	movi	r2,3
  80c1c8:	30836726 	beq	r6,r2,80cf68 <_dtoa_r+0x109c>
  80c1cc:	1183410e 	bge	r2,r6,80ced4 <_dtoa_r+0x1008>
  80c1d0:	d9c00317 	ldw	r7,12(sp)
  80c1d4:	00800104 	movi	r2,4
  80c1d8:	38827c26 	beq	r7,r2,80cbcc <_dtoa_r+0xd00>
  80c1dc:	00800144 	movi	r2,5
  80c1e0:	3884c41e 	bne	r7,r2,80d4f4 <_dtoa_r+0x1628>
  80c1e4:	00800044 	movi	r2,1
  80c1e8:	d8800b15 	stw	r2,44(sp)
  80c1ec:	d8c00517 	ldw	r3,20(sp)
  80c1f0:	d9002217 	ldw	r4,136(sp)
  80c1f4:	1907883a 	add	r3,r3,r4
  80c1f8:	19800044 	addi	r6,r3,1
  80c1fc:	d8c00c15 	stw	r3,48(sp)
  80c200:	d9800615 	stw	r6,24(sp)
  80c204:	0183a40e 	bge	zero,r6,80d098 <_dtoa_r+0x11cc>
  80c208:	d9800617 	ldw	r6,24(sp)
  80c20c:	3021883a 	mov	r16,r6
  80c210:	e0001115 	stw	zero,68(fp)
  80c214:	008005c4 	movi	r2,23
  80c218:	1184c92e 	bgeu	r2,r6,80d540 <_dtoa_r+0x1674>
  80c21c:	00c00044 	movi	r3,1
  80c220:	00800104 	movi	r2,4
  80c224:	1085883a 	add	r2,r2,r2
  80c228:	11000504 	addi	r4,r2,20
  80c22c:	180b883a 	mov	r5,r3
  80c230:	18c00044 	addi	r3,r3,1
  80c234:	313ffb2e 	bgeu	r6,r4,80c224 <__alt_mem_onchip_mem+0xff804224>
  80c238:	e1401115 	stw	r5,68(fp)
  80c23c:	e009883a 	mov	r4,fp
  80c240:	080dfd40 	call	80dfd4 <_Balloc>
  80c244:	d8800715 	stw	r2,28(sp)
  80c248:	e0801015 	stw	r2,64(fp)
  80c24c:	00800384 	movi	r2,14
  80c250:	1400f736 	bltu	r2,r16,80c630 <_dtoa_r+0x764>
  80c254:	8800f626 	beq	r17,zero,80c630 <_dtoa_r+0x764>
  80c258:	d9c00517 	ldw	r7,20(sp)
  80c25c:	01c39a0e 	bge	zero,r7,80d0c8 <_dtoa_r+0x11fc>
  80c260:	388003cc 	andi	r2,r7,15
  80c264:	100490fa 	slli	r2,r2,3
  80c268:	382bd13a 	srai	r21,r7,4
  80c26c:	00c02074 	movhi	r3,129
  80c270:	18dd4e04 	addi	r3,r3,30008
  80c274:	1885883a 	add	r2,r3,r2
  80c278:	a8c0040c 	andi	r3,r21,16
  80c27c:	12400017 	ldw	r9,0(r2)
  80c280:	12000117 	ldw	r8,4(r2)
  80c284:	18037926 	beq	r3,zero,80d06c <_dtoa_r+0x11a0>
  80c288:	00802074 	movhi	r2,129
  80c28c:	109d4404 	addi	r2,r2,29968
  80c290:	11800817 	ldw	r6,32(r2)
  80c294:	11c00917 	ldw	r7,36(r2)
  80c298:	9009883a 	mov	r4,r18
  80c29c:	980b883a 	mov	r5,r19
  80c2a0:	da001715 	stw	r8,92(sp)
  80c2a4:	da401615 	stw	r9,88(sp)
  80c2a8:	0811e440 	call	811e44 <__divdf3>
  80c2ac:	da001717 	ldw	r8,92(sp)
  80c2b0:	da401617 	ldw	r9,88(sp)
  80c2b4:	ad4003cc 	andi	r21,r21,15
  80c2b8:	040000c4 	movi	r16,3
  80c2bc:	1023883a 	mov	r17,r2
  80c2c0:	1829883a 	mov	r20,r3
  80c2c4:	a8001126 	beq	r21,zero,80c30c <_dtoa_r+0x440>
  80c2c8:	05c02074 	movhi	r23,129
  80c2cc:	bddd4404 	addi	r23,r23,29968
  80c2d0:	4805883a 	mov	r2,r9
  80c2d4:	4007883a 	mov	r3,r8
  80c2d8:	a980004c 	andi	r6,r21,1
  80c2dc:	1009883a 	mov	r4,r2
  80c2e0:	a82bd07a 	srai	r21,r21,1
  80c2e4:	180b883a 	mov	r5,r3
  80c2e8:	30000426 	beq	r6,zero,80c2fc <_dtoa_r+0x430>
  80c2ec:	b9800017 	ldw	r6,0(r23)
  80c2f0:	b9c00117 	ldw	r7,4(r23)
  80c2f4:	84000044 	addi	r16,r16,1
  80c2f8:	08127b40 	call	8127b4 <__muldf3>
  80c2fc:	bdc00204 	addi	r23,r23,8
  80c300:	a83ff51e 	bne	r21,zero,80c2d8 <__alt_mem_onchip_mem+0xff8042d8>
  80c304:	1013883a 	mov	r9,r2
  80c308:	1811883a 	mov	r8,r3
  80c30c:	480d883a 	mov	r6,r9
  80c310:	400f883a 	mov	r7,r8
  80c314:	8809883a 	mov	r4,r17
  80c318:	a00b883a 	mov	r5,r20
  80c31c:	0811e440 	call	811e44 <__divdf3>
  80c320:	d8800f15 	stw	r2,60(sp)
  80c324:	d8c01015 	stw	r3,64(sp)
  80c328:	d8c00e17 	ldw	r3,56(sp)
  80c32c:	18000626 	beq	r3,zero,80c348 <_dtoa_r+0x47c>
  80c330:	d9000f17 	ldw	r4,60(sp)
  80c334:	d9401017 	ldw	r5,64(sp)
  80c338:	000d883a 	mov	r6,zero
  80c33c:	01cffc34 	movhi	r7,16368
  80c340:	08065e80 	call	8065e8 <__ledf2>
  80c344:	10040b16 	blt	r2,zero,80d374 <_dtoa_r+0x14a8>
  80c348:	8009883a 	mov	r4,r16
  80c34c:	0806fd80 	call	806fd8 <__floatsidf>
  80c350:	d9800f17 	ldw	r6,60(sp)
  80c354:	d9c01017 	ldw	r7,64(sp)
  80c358:	1009883a 	mov	r4,r2
  80c35c:	180b883a 	mov	r5,r3
  80c360:	08127b40 	call	8127b4 <__muldf3>
  80c364:	000d883a 	mov	r6,zero
  80c368:	01d00734 	movhi	r7,16412
  80c36c:	1009883a 	mov	r4,r2
  80c370:	180b883a 	mov	r5,r3
  80c374:	0805c600 	call	805c60 <__adddf3>
  80c378:	1021883a 	mov	r16,r2
  80c37c:	d8800617 	ldw	r2,24(sp)
  80c380:	047f3034 	movhi	r17,64704
  80c384:	1c63883a 	add	r17,r3,r17
  80c388:	10031826 	beq	r2,zero,80cfec <_dtoa_r+0x1120>
  80c38c:	d8c00517 	ldw	r3,20(sp)
  80c390:	db000617 	ldw	r12,24(sp)
  80c394:	d8c01315 	stw	r3,76(sp)
  80c398:	d9000b17 	ldw	r4,44(sp)
  80c39c:	20038f26 	beq	r4,zero,80d1dc <_dtoa_r+0x1310>
  80c3a0:	60bfffc4 	addi	r2,r12,-1
  80c3a4:	100490fa 	slli	r2,r2,3
  80c3a8:	00c02074 	movhi	r3,129
  80c3ac:	18dd4e04 	addi	r3,r3,30008
  80c3b0:	1885883a 	add	r2,r3,r2
  80c3b4:	11800017 	ldw	r6,0(r2)
  80c3b8:	11c00117 	ldw	r7,4(r2)
  80c3bc:	d8800717 	ldw	r2,28(sp)
  80c3c0:	0009883a 	mov	r4,zero
  80c3c4:	014ff834 	movhi	r5,16352
  80c3c8:	db001615 	stw	r12,88(sp)
  80c3cc:	15c00044 	addi	r23,r2,1
  80c3d0:	0811e440 	call	811e44 <__divdf3>
  80c3d4:	800d883a 	mov	r6,r16
  80c3d8:	880f883a 	mov	r7,r17
  80c3dc:	1009883a 	mov	r4,r2
  80c3e0:	180b883a 	mov	r5,r3
  80c3e4:	08066dc0 	call	8066dc <__subdf3>
  80c3e8:	d9401017 	ldw	r5,64(sp)
  80c3ec:	d9000f17 	ldw	r4,60(sp)
  80c3f0:	102b883a 	mov	r21,r2
  80c3f4:	d8c01215 	stw	r3,72(sp)
  80c3f8:	0812ecc0 	call	812ecc <__fixdfsi>
  80c3fc:	1009883a 	mov	r4,r2
  80c400:	1029883a 	mov	r20,r2
  80c404:	0806fd80 	call	806fd8 <__floatsidf>
  80c408:	d9000f17 	ldw	r4,60(sp)
  80c40c:	d9401017 	ldw	r5,64(sp)
  80c410:	100d883a 	mov	r6,r2
  80c414:	180f883a 	mov	r7,r3
  80c418:	08066dc0 	call	8066dc <__subdf3>
  80c41c:	1823883a 	mov	r17,r3
  80c420:	d8c00717 	ldw	r3,28(sp)
  80c424:	d9401217 	ldw	r5,72(sp)
  80c428:	a2000c04 	addi	r8,r20,48
  80c42c:	1021883a 	mov	r16,r2
  80c430:	1a000005 	stb	r8,0(r3)
  80c434:	800d883a 	mov	r6,r16
  80c438:	880f883a 	mov	r7,r17
  80c43c:	a809883a 	mov	r4,r21
  80c440:	4029883a 	mov	r20,r8
  80c444:	080650c0 	call	80650c <__gedf2>
  80c448:	00841d16 	blt	zero,r2,80d4c0 <_dtoa_r+0x15f4>
  80c44c:	800d883a 	mov	r6,r16
  80c450:	880f883a 	mov	r7,r17
  80c454:	0009883a 	mov	r4,zero
  80c458:	014ffc34 	movhi	r5,16368
  80c45c:	08066dc0 	call	8066dc <__subdf3>
  80c460:	d9401217 	ldw	r5,72(sp)
  80c464:	100d883a 	mov	r6,r2
  80c468:	180f883a 	mov	r7,r3
  80c46c:	a809883a 	mov	r4,r21
  80c470:	080650c0 	call	80650c <__gedf2>
  80c474:	db001617 	ldw	r12,88(sp)
  80c478:	00840e16 	blt	zero,r2,80d4b4 <_dtoa_r+0x15e8>
  80c47c:	00800044 	movi	r2,1
  80c480:	13006b0e 	bge	r2,r12,80c630 <_dtoa_r+0x764>
  80c484:	d9000717 	ldw	r4,28(sp)
  80c488:	dd800f15 	stw	r22,60(sp)
  80c48c:	dcc01015 	stw	r19,64(sp)
  80c490:	2319883a 	add	r12,r4,r12
  80c494:	dcc01217 	ldw	r19,72(sp)
  80c498:	602d883a 	mov	r22,r12
  80c49c:	dc801215 	stw	r18,72(sp)
  80c4a0:	b825883a 	mov	r18,r23
  80c4a4:	00000906 	br	80c4cc <_dtoa_r+0x600>
  80c4a8:	08066dc0 	call	8066dc <__subdf3>
  80c4ac:	a80d883a 	mov	r6,r21
  80c4b0:	980f883a 	mov	r7,r19
  80c4b4:	1009883a 	mov	r4,r2
  80c4b8:	180b883a 	mov	r5,r3
  80c4bc:	08065e80 	call	8065e8 <__ledf2>
  80c4c0:	1003e816 	blt	r2,zero,80d464 <_dtoa_r+0x1598>
  80c4c4:	b825883a 	mov	r18,r23
  80c4c8:	bd83e926 	beq	r23,r22,80d470 <_dtoa_r+0x15a4>
  80c4cc:	a809883a 	mov	r4,r21
  80c4d0:	980b883a 	mov	r5,r19
  80c4d4:	000d883a 	mov	r6,zero
  80c4d8:	01d00934 	movhi	r7,16420
  80c4dc:	08127b40 	call	8127b4 <__muldf3>
  80c4e0:	000d883a 	mov	r6,zero
  80c4e4:	01d00934 	movhi	r7,16420
  80c4e8:	8009883a 	mov	r4,r16
  80c4ec:	880b883a 	mov	r5,r17
  80c4f0:	102b883a 	mov	r21,r2
  80c4f4:	1827883a 	mov	r19,r3
  80c4f8:	08127b40 	call	8127b4 <__muldf3>
  80c4fc:	180b883a 	mov	r5,r3
  80c500:	1009883a 	mov	r4,r2
  80c504:	1821883a 	mov	r16,r3
  80c508:	1023883a 	mov	r17,r2
  80c50c:	0812ecc0 	call	812ecc <__fixdfsi>
  80c510:	1009883a 	mov	r4,r2
  80c514:	1029883a 	mov	r20,r2
  80c518:	0806fd80 	call	806fd8 <__floatsidf>
  80c51c:	8809883a 	mov	r4,r17
  80c520:	800b883a 	mov	r5,r16
  80c524:	100d883a 	mov	r6,r2
  80c528:	180f883a 	mov	r7,r3
  80c52c:	08066dc0 	call	8066dc <__subdf3>
  80c530:	a5000c04 	addi	r20,r20,48
  80c534:	a80d883a 	mov	r6,r21
  80c538:	980f883a 	mov	r7,r19
  80c53c:	1009883a 	mov	r4,r2
  80c540:	180b883a 	mov	r5,r3
  80c544:	95000005 	stb	r20,0(r18)
  80c548:	1021883a 	mov	r16,r2
  80c54c:	1823883a 	mov	r17,r3
  80c550:	08065e80 	call	8065e8 <__ledf2>
  80c554:	bdc00044 	addi	r23,r23,1
  80c558:	800d883a 	mov	r6,r16
  80c55c:	880f883a 	mov	r7,r17
  80c560:	0009883a 	mov	r4,zero
  80c564:	014ffc34 	movhi	r5,16368
  80c568:	103fcf0e 	bge	r2,zero,80c4a8 <__alt_mem_onchip_mem+0xff8044a8>
  80c56c:	d8c01317 	ldw	r3,76(sp)
  80c570:	d8c00515 	stw	r3,20(sp)
  80c574:	d9400917 	ldw	r5,36(sp)
  80c578:	e009883a 	mov	r4,fp
  80c57c:	080e07c0 	call	80e07c <_Bfree>
  80c580:	d9000517 	ldw	r4,20(sp)
  80c584:	d9802317 	ldw	r6,140(sp)
  80c588:	d9c02517 	ldw	r7,148(sp)
  80c58c:	b8000005 	stb	zero,0(r23)
  80c590:	20800044 	addi	r2,r4,1
  80c594:	30800015 	stw	r2,0(r6)
  80c598:	3802aa26 	beq	r7,zero,80d044 <_dtoa_r+0x1178>
  80c59c:	3dc00015 	stw	r23,0(r7)
  80c5a0:	d8800717 	ldw	r2,28(sp)
  80c5a4:	003e7906 	br	80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80c5a8:	00800434 	movhi	r2,16
  80c5ac:	10bfffc4 	addi	r2,r2,-1
  80c5b0:	88a2703a 	and	r17,r17,r2
  80c5b4:	883e851e 	bne	r17,zero,80bfcc <__alt_mem_onchip_mem+0xff803fcc>
  80c5b8:	00802074 	movhi	r2,129
  80c5bc:	109d3004 	addi	r2,r2,29888
  80c5c0:	003e8406 	br	80bfd4 <__alt_mem_onchip_mem+0xff803fd4>
  80c5c4:	10c00204 	addi	r3,r2,8
  80c5c8:	003e8706 	br	80bfe8 <__alt_mem_onchip_mem+0xff803fe8>
  80c5cc:	01400434 	movhi	r5,16
  80c5d0:	297fffc4 	addi	r5,r5,-1
  80c5d4:	994a703a 	and	r5,r19,r5
  80c5d8:	9009883a 	mov	r4,r18
  80c5dc:	843f0044 	addi	r16,r16,-1023
  80c5e0:	294ffc34 	orhi	r5,r5,16368
  80c5e4:	dd800217 	ldw	r22,8(sp)
  80c5e8:	d8001115 	stw	zero,68(sp)
  80c5ec:	003ea506 	br	80c084 <__alt_mem_onchip_mem+0xff804084>
  80c5f0:	00802074 	movhi	r2,129
  80c5f4:	109d2704 	addi	r2,r2,29852
  80c5f8:	003e6406 	br	80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80c5fc:	e0001115 	stw	zero,68(fp)
  80c600:	000b883a 	mov	r5,zero
  80c604:	e009883a 	mov	r4,fp
  80c608:	080dfd40 	call	80dfd4 <_Balloc>
  80c60c:	01bfffc4 	movi	r6,-1
  80c610:	01c00044 	movi	r7,1
  80c614:	d8800715 	stw	r2,28(sp)
  80c618:	d9800c15 	stw	r6,48(sp)
  80c61c:	e0801015 	stw	r2,64(fp)
  80c620:	d8000315 	stw	zero,12(sp)
  80c624:	d9c00b15 	stw	r7,44(sp)
  80c628:	d9800615 	stw	r6,24(sp)
  80c62c:	d8002215 	stw	zero,136(sp)
  80c630:	d8800117 	ldw	r2,4(sp)
  80c634:	10008916 	blt	r2,zero,80c85c <_dtoa_r+0x990>
  80c638:	d9000517 	ldw	r4,20(sp)
  80c63c:	00c00384 	movi	r3,14
  80c640:	19008616 	blt	r3,r4,80c85c <_dtoa_r+0x990>
  80c644:	200490fa 	slli	r2,r4,3
  80c648:	00c02074 	movhi	r3,129
  80c64c:	d9802217 	ldw	r6,136(sp)
  80c650:	18dd4e04 	addi	r3,r3,30008
  80c654:	1885883a 	add	r2,r3,r2
  80c658:	14000017 	ldw	r16,0(r2)
  80c65c:	14400117 	ldw	r17,4(r2)
  80c660:	30016316 	blt	r6,zero,80cbf0 <_dtoa_r+0xd24>
  80c664:	800d883a 	mov	r6,r16
  80c668:	880f883a 	mov	r7,r17
  80c66c:	9009883a 	mov	r4,r18
  80c670:	980b883a 	mov	r5,r19
  80c674:	0811e440 	call	811e44 <__divdf3>
  80c678:	180b883a 	mov	r5,r3
  80c67c:	1009883a 	mov	r4,r2
  80c680:	0812ecc0 	call	812ecc <__fixdfsi>
  80c684:	1009883a 	mov	r4,r2
  80c688:	102b883a 	mov	r21,r2
  80c68c:	0806fd80 	call	806fd8 <__floatsidf>
  80c690:	800d883a 	mov	r6,r16
  80c694:	880f883a 	mov	r7,r17
  80c698:	1009883a 	mov	r4,r2
  80c69c:	180b883a 	mov	r5,r3
  80c6a0:	08127b40 	call	8127b4 <__muldf3>
  80c6a4:	100d883a 	mov	r6,r2
  80c6a8:	180f883a 	mov	r7,r3
  80c6ac:	9009883a 	mov	r4,r18
  80c6b0:	980b883a 	mov	r5,r19
  80c6b4:	08066dc0 	call	8066dc <__subdf3>
  80c6b8:	d9c00717 	ldw	r7,28(sp)
  80c6bc:	1009883a 	mov	r4,r2
  80c6c0:	a8800c04 	addi	r2,r21,48
  80c6c4:	38800005 	stb	r2,0(r7)
  80c6c8:	3dc00044 	addi	r23,r7,1
  80c6cc:	d9c00617 	ldw	r7,24(sp)
  80c6d0:	01800044 	movi	r6,1
  80c6d4:	180b883a 	mov	r5,r3
  80c6d8:	2005883a 	mov	r2,r4
  80c6dc:	39803826 	beq	r7,r6,80c7c0 <_dtoa_r+0x8f4>
  80c6e0:	000d883a 	mov	r6,zero
  80c6e4:	01d00934 	movhi	r7,16420
  80c6e8:	08127b40 	call	8127b4 <__muldf3>
  80c6ec:	000d883a 	mov	r6,zero
  80c6f0:	000f883a 	mov	r7,zero
  80c6f4:	1009883a 	mov	r4,r2
  80c6f8:	180b883a 	mov	r5,r3
  80c6fc:	1025883a 	mov	r18,r2
  80c700:	1827883a 	mov	r19,r3
  80c704:	081272c0 	call	81272c <__eqdf2>
  80c708:	103f9a26 	beq	r2,zero,80c574 <__alt_mem_onchip_mem+0xff804574>
  80c70c:	d9c00617 	ldw	r7,24(sp)
  80c710:	d8c00717 	ldw	r3,28(sp)
  80c714:	b829883a 	mov	r20,r23
  80c718:	38bfffc4 	addi	r2,r7,-1
  80c71c:	18ad883a 	add	r22,r3,r2
  80c720:	00000a06 	br	80c74c <_dtoa_r+0x880>
  80c724:	08127b40 	call	8127b4 <__muldf3>
  80c728:	000d883a 	mov	r6,zero
  80c72c:	000f883a 	mov	r7,zero
  80c730:	1009883a 	mov	r4,r2
  80c734:	180b883a 	mov	r5,r3
  80c738:	1025883a 	mov	r18,r2
  80c73c:	1827883a 	mov	r19,r3
  80c740:	b829883a 	mov	r20,r23
  80c744:	081272c0 	call	81272c <__eqdf2>
  80c748:	103f8a26 	beq	r2,zero,80c574 <__alt_mem_onchip_mem+0xff804574>
  80c74c:	800d883a 	mov	r6,r16
  80c750:	880f883a 	mov	r7,r17
  80c754:	9009883a 	mov	r4,r18
  80c758:	980b883a 	mov	r5,r19
  80c75c:	0811e440 	call	811e44 <__divdf3>
  80c760:	180b883a 	mov	r5,r3
  80c764:	1009883a 	mov	r4,r2
  80c768:	0812ecc0 	call	812ecc <__fixdfsi>
  80c76c:	1009883a 	mov	r4,r2
  80c770:	102b883a 	mov	r21,r2
  80c774:	0806fd80 	call	806fd8 <__floatsidf>
  80c778:	800d883a 	mov	r6,r16
  80c77c:	880f883a 	mov	r7,r17
  80c780:	1009883a 	mov	r4,r2
  80c784:	180b883a 	mov	r5,r3
  80c788:	08127b40 	call	8127b4 <__muldf3>
  80c78c:	100d883a 	mov	r6,r2
  80c790:	180f883a 	mov	r7,r3
  80c794:	9009883a 	mov	r4,r18
  80c798:	980b883a 	mov	r5,r19
  80c79c:	08066dc0 	call	8066dc <__subdf3>
  80c7a0:	aa000c04 	addi	r8,r21,48
  80c7a4:	a2000005 	stb	r8,0(r20)
  80c7a8:	000d883a 	mov	r6,zero
  80c7ac:	01d00934 	movhi	r7,16420
  80c7b0:	1009883a 	mov	r4,r2
  80c7b4:	180b883a 	mov	r5,r3
  80c7b8:	a5c00044 	addi	r23,r20,1
  80c7bc:	b53fd91e 	bne	r22,r20,80c724 <__alt_mem_onchip_mem+0xff804724>
  80c7c0:	100d883a 	mov	r6,r2
  80c7c4:	180f883a 	mov	r7,r3
  80c7c8:	1009883a 	mov	r4,r2
  80c7cc:	180b883a 	mov	r5,r3
  80c7d0:	0805c600 	call	805c60 <__adddf3>
  80c7d4:	100d883a 	mov	r6,r2
  80c7d8:	180f883a 	mov	r7,r3
  80c7dc:	8009883a 	mov	r4,r16
  80c7e0:	880b883a 	mov	r5,r17
  80c7e4:	1027883a 	mov	r19,r2
  80c7e8:	1825883a 	mov	r18,r3
  80c7ec:	08065e80 	call	8065e8 <__ledf2>
  80c7f0:	10000816 	blt	r2,zero,80c814 <_dtoa_r+0x948>
  80c7f4:	980d883a 	mov	r6,r19
  80c7f8:	900f883a 	mov	r7,r18
  80c7fc:	8009883a 	mov	r4,r16
  80c800:	880b883a 	mov	r5,r17
  80c804:	081272c0 	call	81272c <__eqdf2>
  80c808:	103f5a1e 	bne	r2,zero,80c574 <__alt_mem_onchip_mem+0xff804574>
  80c80c:	ad40004c 	andi	r21,r21,1
  80c810:	a83f5826 	beq	r21,zero,80c574 <__alt_mem_onchip_mem+0xff804574>
  80c814:	bd3fffc3 	ldbu	r20,-1(r23)
  80c818:	b8bfffc4 	addi	r2,r23,-1
  80c81c:	1007883a 	mov	r3,r2
  80c820:	01400e44 	movi	r5,57
  80c824:	d9800717 	ldw	r6,28(sp)
  80c828:	00000506 	br	80c840 <_dtoa_r+0x974>
  80c82c:	18ffffc4 	addi	r3,r3,-1
  80c830:	11824726 	beq	r2,r6,80d150 <_dtoa_r+0x1284>
  80c834:	1d000003 	ldbu	r20,0(r3)
  80c838:	102f883a 	mov	r23,r2
  80c83c:	10bfffc4 	addi	r2,r2,-1
  80c840:	a1003fcc 	andi	r4,r20,255
  80c844:	2100201c 	xori	r4,r4,128
  80c848:	213fe004 	addi	r4,r4,-128
  80c84c:	217ff726 	beq	r4,r5,80c82c <__alt_mem_onchip_mem+0xff80482c>
  80c850:	a2000044 	addi	r8,r20,1
  80c854:	12000005 	stb	r8,0(r2)
  80c858:	003f4606 	br	80c574 <__alt_mem_onchip_mem+0xff804574>
  80c85c:	d9000b17 	ldw	r4,44(sp)
  80c860:	2000c826 	beq	r4,zero,80cb84 <_dtoa_r+0xcb8>
  80c864:	d9800317 	ldw	r6,12(sp)
  80c868:	00c00044 	movi	r3,1
  80c86c:	1980f90e 	bge	r3,r6,80cc54 <_dtoa_r+0xd88>
  80c870:	d8800617 	ldw	r2,24(sp)
  80c874:	d8c00a17 	ldw	r3,40(sp)
  80c878:	157fffc4 	addi	r21,r2,-1
  80c87c:	1d41f316 	blt	r3,r21,80d04c <_dtoa_r+0x1180>
  80c880:	1d6bc83a 	sub	r21,r3,r21
  80c884:	d9c00617 	ldw	r7,24(sp)
  80c888:	3802aa16 	blt	r7,zero,80d334 <_dtoa_r+0x1468>
  80c88c:	dd000817 	ldw	r20,32(sp)
  80c890:	d8800617 	ldw	r2,24(sp)
  80c894:	d8c00817 	ldw	r3,32(sp)
  80c898:	01400044 	movi	r5,1
  80c89c:	e009883a 	mov	r4,fp
  80c8a0:	1887883a 	add	r3,r3,r2
  80c8a4:	d8c00815 	stw	r3,32(sp)
  80c8a8:	b0ad883a 	add	r22,r22,r2
  80c8ac:	080e3e00 	call	80e3e0 <__i2b>
  80c8b0:	1023883a 	mov	r17,r2
  80c8b4:	a0000826 	beq	r20,zero,80c8d8 <_dtoa_r+0xa0c>
  80c8b8:	0580070e 	bge	zero,r22,80c8d8 <_dtoa_r+0xa0c>
  80c8bc:	a005883a 	mov	r2,r20
  80c8c0:	b500b916 	blt	r22,r20,80cba8 <_dtoa_r+0xcdc>
  80c8c4:	d9000817 	ldw	r4,32(sp)
  80c8c8:	a0a9c83a 	sub	r20,r20,r2
  80c8cc:	b0adc83a 	sub	r22,r22,r2
  80c8d0:	2089c83a 	sub	r4,r4,r2
  80c8d4:	d9000815 	stw	r4,32(sp)
  80c8d8:	d9800a17 	ldw	r6,40(sp)
  80c8dc:	0181810e 	bge	zero,r6,80cee4 <_dtoa_r+0x1018>
  80c8e0:	d9c00b17 	ldw	r7,44(sp)
  80c8e4:	3800b326 	beq	r7,zero,80cbb4 <_dtoa_r+0xce8>
  80c8e8:	a800b226 	beq	r21,zero,80cbb4 <_dtoa_r+0xce8>
  80c8ec:	880b883a 	mov	r5,r17
  80c8f0:	a80d883a 	mov	r6,r21
  80c8f4:	e009883a 	mov	r4,fp
  80c8f8:	080e6140 	call	80e614 <__pow5mult>
  80c8fc:	d9800917 	ldw	r6,36(sp)
  80c900:	100b883a 	mov	r5,r2
  80c904:	e009883a 	mov	r4,fp
  80c908:	1023883a 	mov	r17,r2
  80c90c:	080e41c0 	call	80e41c <__multiply>
  80c910:	1021883a 	mov	r16,r2
  80c914:	d8800a17 	ldw	r2,40(sp)
  80c918:	d9400917 	ldw	r5,36(sp)
  80c91c:	e009883a 	mov	r4,fp
  80c920:	1545c83a 	sub	r2,r2,r21
  80c924:	d8800a15 	stw	r2,40(sp)
  80c928:	080e07c0 	call	80e07c <_Bfree>
  80c92c:	d8c00a17 	ldw	r3,40(sp)
  80c930:	18009f1e 	bne	r3,zero,80cbb0 <_dtoa_r+0xce4>
  80c934:	05c00044 	movi	r23,1
  80c938:	e009883a 	mov	r4,fp
  80c93c:	b80b883a 	mov	r5,r23
  80c940:	080e3e00 	call	80e3e0 <__i2b>
  80c944:	d9000d17 	ldw	r4,52(sp)
  80c948:	102b883a 	mov	r21,r2
  80c94c:	2000ce26 	beq	r4,zero,80cc88 <_dtoa_r+0xdbc>
  80c950:	200d883a 	mov	r6,r4
  80c954:	100b883a 	mov	r5,r2
  80c958:	e009883a 	mov	r4,fp
  80c95c:	080e6140 	call	80e614 <__pow5mult>
  80c960:	d9800317 	ldw	r6,12(sp)
  80c964:	102b883a 	mov	r21,r2
  80c968:	b981810e 	bge	r23,r6,80cf70 <_dtoa_r+0x10a4>
  80c96c:	0027883a 	mov	r19,zero
  80c970:	a8800417 	ldw	r2,16(r21)
  80c974:	05c00804 	movi	r23,32
  80c978:	10800104 	addi	r2,r2,4
  80c97c:	1085883a 	add	r2,r2,r2
  80c980:	1085883a 	add	r2,r2,r2
  80c984:	a885883a 	add	r2,r21,r2
  80c988:	11000017 	ldw	r4,0(r2)
  80c98c:	080e2c80 	call	80e2c8 <__hi0bits>
  80c990:	b885c83a 	sub	r2,r23,r2
  80c994:	1585883a 	add	r2,r2,r22
  80c998:	108007cc 	andi	r2,r2,31
  80c99c:	1000b326 	beq	r2,zero,80cc6c <_dtoa_r+0xda0>
  80c9a0:	00c00804 	movi	r3,32
  80c9a4:	1887c83a 	sub	r3,r3,r2
  80c9a8:	01000104 	movi	r4,4
  80c9ac:	20c2cd0e 	bge	r4,r3,80d4e4 <_dtoa_r+0x1618>
  80c9b0:	00c00704 	movi	r3,28
  80c9b4:	1885c83a 	sub	r2,r3,r2
  80c9b8:	d8c00817 	ldw	r3,32(sp)
  80c9bc:	a0a9883a 	add	r20,r20,r2
  80c9c0:	b0ad883a 	add	r22,r22,r2
  80c9c4:	1887883a 	add	r3,r3,r2
  80c9c8:	d8c00815 	stw	r3,32(sp)
  80c9cc:	d9800817 	ldw	r6,32(sp)
  80c9d0:	0180040e 	bge	zero,r6,80c9e4 <_dtoa_r+0xb18>
  80c9d4:	800b883a 	mov	r5,r16
  80c9d8:	e009883a 	mov	r4,fp
  80c9dc:	080e7540 	call	80e754 <__lshift>
  80c9e0:	1021883a 	mov	r16,r2
  80c9e4:	0580050e 	bge	zero,r22,80c9fc <_dtoa_r+0xb30>
  80c9e8:	a80b883a 	mov	r5,r21
  80c9ec:	b00d883a 	mov	r6,r22
  80c9f0:	e009883a 	mov	r4,fp
  80c9f4:	080e7540 	call	80e754 <__lshift>
  80c9f8:	102b883a 	mov	r21,r2
  80c9fc:	d9c00e17 	ldw	r7,56(sp)
  80ca00:	3801211e 	bne	r7,zero,80ce88 <_dtoa_r+0xfbc>
  80ca04:	d9800617 	ldw	r6,24(sp)
  80ca08:	0181380e 	bge	zero,r6,80ceec <_dtoa_r+0x1020>
  80ca0c:	d8c00b17 	ldw	r3,44(sp)
  80ca10:	1800ab1e 	bne	r3,zero,80ccc0 <_dtoa_r+0xdf4>
  80ca14:	dc800717 	ldw	r18,28(sp)
  80ca18:	dcc00617 	ldw	r19,24(sp)
  80ca1c:	9029883a 	mov	r20,r18
  80ca20:	00000206 	br	80ca2c <_dtoa_r+0xb60>
  80ca24:	080e0a40 	call	80e0a4 <__multadd>
  80ca28:	1021883a 	mov	r16,r2
  80ca2c:	a80b883a 	mov	r5,r21
  80ca30:	8009883a 	mov	r4,r16
  80ca34:	080bccc0 	call	80bccc <quorem>
  80ca38:	10800c04 	addi	r2,r2,48
  80ca3c:	90800005 	stb	r2,0(r18)
  80ca40:	94800044 	addi	r18,r18,1
  80ca44:	9507c83a 	sub	r3,r18,r20
  80ca48:	000f883a 	mov	r7,zero
  80ca4c:	01800284 	movi	r6,10
  80ca50:	800b883a 	mov	r5,r16
  80ca54:	e009883a 	mov	r4,fp
  80ca58:	1cfff216 	blt	r3,r19,80ca24 <__alt_mem_onchip_mem+0xff804a24>
  80ca5c:	1011883a 	mov	r8,r2
  80ca60:	d8800617 	ldw	r2,24(sp)
  80ca64:	0082370e 	bge	zero,r2,80d344 <_dtoa_r+0x1478>
  80ca68:	d9000717 	ldw	r4,28(sp)
  80ca6c:	0025883a 	mov	r18,zero
  80ca70:	20af883a 	add	r23,r4,r2
  80ca74:	01800044 	movi	r6,1
  80ca78:	800b883a 	mov	r5,r16
  80ca7c:	e009883a 	mov	r4,fp
  80ca80:	da001715 	stw	r8,92(sp)
  80ca84:	080e7540 	call	80e754 <__lshift>
  80ca88:	a80b883a 	mov	r5,r21
  80ca8c:	1009883a 	mov	r4,r2
  80ca90:	d8800915 	stw	r2,36(sp)
  80ca94:	080e89c0 	call	80e89c <__mcmp>
  80ca98:	da001717 	ldw	r8,92(sp)
  80ca9c:	0081800e 	bge	zero,r2,80d0a0 <_dtoa_r+0x11d4>
  80caa0:	b93fffc3 	ldbu	r4,-1(r23)
  80caa4:	b8bfffc4 	addi	r2,r23,-1
  80caa8:	1007883a 	mov	r3,r2
  80caac:	01800e44 	movi	r6,57
  80cab0:	d9c00717 	ldw	r7,28(sp)
  80cab4:	00000506 	br	80cacc <_dtoa_r+0xc00>
  80cab8:	18ffffc4 	addi	r3,r3,-1
  80cabc:	11c12326 	beq	r2,r7,80cf4c <_dtoa_r+0x1080>
  80cac0:	19000003 	ldbu	r4,0(r3)
  80cac4:	102f883a 	mov	r23,r2
  80cac8:	10bfffc4 	addi	r2,r2,-1
  80cacc:	21403fcc 	andi	r5,r4,255
  80cad0:	2940201c 	xori	r5,r5,128
  80cad4:	297fe004 	addi	r5,r5,-128
  80cad8:	29bff726 	beq	r5,r6,80cab8 <__alt_mem_onchip_mem+0xff804ab8>
  80cadc:	21000044 	addi	r4,r4,1
  80cae0:	11000005 	stb	r4,0(r2)
  80cae4:	a80b883a 	mov	r5,r21
  80cae8:	e009883a 	mov	r4,fp
  80caec:	080e07c0 	call	80e07c <_Bfree>
  80caf0:	883ea026 	beq	r17,zero,80c574 <__alt_mem_onchip_mem+0xff804574>
  80caf4:	90000426 	beq	r18,zero,80cb08 <_dtoa_r+0xc3c>
  80caf8:	94400326 	beq	r18,r17,80cb08 <_dtoa_r+0xc3c>
  80cafc:	900b883a 	mov	r5,r18
  80cb00:	e009883a 	mov	r4,fp
  80cb04:	080e07c0 	call	80e07c <_Bfree>
  80cb08:	880b883a 	mov	r5,r17
  80cb0c:	e009883a 	mov	r4,fp
  80cb10:	080e07c0 	call	80e07c <_Bfree>
  80cb14:	003e9706 	br	80c574 <__alt_mem_onchip_mem+0xff804574>
  80cb18:	01800044 	movi	r6,1
  80cb1c:	d9800e15 	stw	r6,56(sp)
  80cb20:	003d9606 	br	80c17c <__alt_mem_onchip_mem+0xff80417c>
  80cb24:	d8800817 	ldw	r2,32(sp)
  80cb28:	d8c00517 	ldw	r3,20(sp)
  80cb2c:	d8000d15 	stw	zero,52(sp)
  80cb30:	10c5c83a 	sub	r2,r2,r3
  80cb34:	00c9c83a 	sub	r4,zero,r3
  80cb38:	d8800815 	stw	r2,32(sp)
  80cb3c:	d9000a15 	stw	r4,40(sp)
  80cb40:	003d9706 	br	80c1a0 <__alt_mem_onchip_mem+0xff8041a0>
  80cb44:	05adc83a 	sub	r22,zero,r22
  80cb48:	dd800815 	stw	r22,32(sp)
  80cb4c:	002d883a 	mov	r22,zero
  80cb50:	003d8e06 	br	80c18c <__alt_mem_onchip_mem+0xff80418c>
  80cb54:	d9000517 	ldw	r4,20(sp)
  80cb58:	0806fd80 	call	806fd8 <__floatsidf>
  80cb5c:	100d883a 	mov	r6,r2
  80cb60:	180f883a 	mov	r7,r3
  80cb64:	a009883a 	mov	r4,r20
  80cb68:	880b883a 	mov	r5,r17
  80cb6c:	081272c0 	call	81272c <__eqdf2>
  80cb70:	103d7126 	beq	r2,zero,80c138 <__alt_mem_onchip_mem+0xff804138>
  80cb74:	d9c00517 	ldw	r7,20(sp)
  80cb78:	39ffffc4 	addi	r7,r7,-1
  80cb7c:	d9c00515 	stw	r7,20(sp)
  80cb80:	003d6d06 	br	80c138 <__alt_mem_onchip_mem+0xff804138>
  80cb84:	dd400a17 	ldw	r21,40(sp)
  80cb88:	dd000817 	ldw	r20,32(sp)
  80cb8c:	0023883a 	mov	r17,zero
  80cb90:	003f4806 	br	80c8b4 <__alt_mem_onchip_mem+0xff8048b4>
  80cb94:	10e3c83a 	sub	r17,r2,r3
  80cb98:	9448983a 	sll	r4,r18,r17
  80cb9c:	003d3206 	br	80c068 <__alt_mem_onchip_mem+0xff804068>
  80cba0:	d8000e15 	stw	zero,56(sp)
  80cba4:	003d7506 	br	80c17c <__alt_mem_onchip_mem+0xff80417c>
  80cba8:	b005883a 	mov	r2,r22
  80cbac:	003f4506 	br	80c8c4 <__alt_mem_onchip_mem+0xff8048c4>
  80cbb0:	dc000915 	stw	r16,36(sp)
  80cbb4:	d9800a17 	ldw	r6,40(sp)
  80cbb8:	d9400917 	ldw	r5,36(sp)
  80cbbc:	e009883a 	mov	r4,fp
  80cbc0:	080e6140 	call	80e614 <__pow5mult>
  80cbc4:	1021883a 	mov	r16,r2
  80cbc8:	003f5a06 	br	80c934 <__alt_mem_onchip_mem+0xff804934>
  80cbcc:	01c00044 	movi	r7,1
  80cbd0:	d9c00b15 	stw	r7,44(sp)
  80cbd4:	d8802217 	ldw	r2,136(sp)
  80cbd8:	0081280e 	bge	zero,r2,80d07c <_dtoa_r+0x11b0>
  80cbdc:	100d883a 	mov	r6,r2
  80cbe0:	1021883a 	mov	r16,r2
  80cbe4:	d8800c15 	stw	r2,48(sp)
  80cbe8:	d8800615 	stw	r2,24(sp)
  80cbec:	003d8806 	br	80c210 <__alt_mem_onchip_mem+0xff804210>
  80cbf0:	d8800617 	ldw	r2,24(sp)
  80cbf4:	00be9b16 	blt	zero,r2,80c664 <__alt_mem_onchip_mem+0xff804664>
  80cbf8:	10010f1e 	bne	r2,zero,80d038 <_dtoa_r+0x116c>
  80cbfc:	880b883a 	mov	r5,r17
  80cc00:	000d883a 	mov	r6,zero
  80cc04:	01d00534 	movhi	r7,16404
  80cc08:	8009883a 	mov	r4,r16
  80cc0c:	08127b40 	call	8127b4 <__muldf3>
  80cc10:	900d883a 	mov	r6,r18
  80cc14:	980f883a 	mov	r7,r19
  80cc18:	1009883a 	mov	r4,r2
  80cc1c:	180b883a 	mov	r5,r3
  80cc20:	080650c0 	call	80650c <__gedf2>
  80cc24:	002b883a 	mov	r21,zero
  80cc28:	0023883a 	mov	r17,zero
  80cc2c:	1000bf16 	blt	r2,zero,80cf2c <_dtoa_r+0x1060>
  80cc30:	d9802217 	ldw	r6,136(sp)
  80cc34:	ddc00717 	ldw	r23,28(sp)
  80cc38:	018c303a 	nor	r6,zero,r6
  80cc3c:	d9800515 	stw	r6,20(sp)
  80cc40:	a80b883a 	mov	r5,r21
  80cc44:	e009883a 	mov	r4,fp
  80cc48:	080e07c0 	call	80e07c <_Bfree>
  80cc4c:	883e4926 	beq	r17,zero,80c574 <__alt_mem_onchip_mem+0xff804574>
  80cc50:	003fad06 	br	80cb08 <__alt_mem_onchip_mem+0xff804b08>
  80cc54:	d9c01117 	ldw	r7,68(sp)
  80cc58:	3801bc26 	beq	r7,zero,80d34c <_dtoa_r+0x1480>
  80cc5c:	10810cc4 	addi	r2,r2,1075
  80cc60:	dd400a17 	ldw	r21,40(sp)
  80cc64:	dd000817 	ldw	r20,32(sp)
  80cc68:	003f0a06 	br	80c894 <__alt_mem_onchip_mem+0xff804894>
  80cc6c:	00800704 	movi	r2,28
  80cc70:	d9000817 	ldw	r4,32(sp)
  80cc74:	a0a9883a 	add	r20,r20,r2
  80cc78:	b0ad883a 	add	r22,r22,r2
  80cc7c:	2089883a 	add	r4,r4,r2
  80cc80:	d9000815 	stw	r4,32(sp)
  80cc84:	003f5106 	br	80c9cc <__alt_mem_onchip_mem+0xff8049cc>
  80cc88:	d8c00317 	ldw	r3,12(sp)
  80cc8c:	b8c1fc0e 	bge	r23,r3,80d480 <_dtoa_r+0x15b4>
  80cc90:	0027883a 	mov	r19,zero
  80cc94:	b805883a 	mov	r2,r23
  80cc98:	003f3e06 	br	80c994 <__alt_mem_onchip_mem+0xff804994>
  80cc9c:	880b883a 	mov	r5,r17
  80cca0:	e009883a 	mov	r4,fp
  80cca4:	000f883a 	mov	r7,zero
  80cca8:	01800284 	movi	r6,10
  80ccac:	080e0a40 	call	80e0a4 <__multadd>
  80ccb0:	d9000c17 	ldw	r4,48(sp)
  80ccb4:	1023883a 	mov	r17,r2
  80ccb8:	0102040e 	bge	zero,r4,80d4cc <_dtoa_r+0x1600>
  80ccbc:	d9000615 	stw	r4,24(sp)
  80ccc0:	0500050e 	bge	zero,r20,80ccd8 <_dtoa_r+0xe0c>
  80ccc4:	880b883a 	mov	r5,r17
  80ccc8:	a00d883a 	mov	r6,r20
  80cccc:	e009883a 	mov	r4,fp
  80ccd0:	080e7540 	call	80e754 <__lshift>
  80ccd4:	1023883a 	mov	r17,r2
  80ccd8:	9801241e 	bne	r19,zero,80d16c <_dtoa_r+0x12a0>
  80ccdc:	8829883a 	mov	r20,r17
  80cce0:	d9000617 	ldw	r4,24(sp)
  80cce4:	dcc00717 	ldw	r19,28(sp)
  80cce8:	9480004c 	andi	r18,r18,1
  80ccec:	20bfffc4 	addi	r2,r4,-1
  80ccf0:	9885883a 	add	r2,r19,r2
  80ccf4:	d8800415 	stw	r2,16(sp)
  80ccf8:	dc800615 	stw	r18,24(sp)
  80ccfc:	a80b883a 	mov	r5,r21
  80cd00:	8009883a 	mov	r4,r16
  80cd04:	080bccc0 	call	80bccc <quorem>
  80cd08:	880b883a 	mov	r5,r17
  80cd0c:	8009883a 	mov	r4,r16
  80cd10:	102f883a 	mov	r23,r2
  80cd14:	080e89c0 	call	80e89c <__mcmp>
  80cd18:	a80b883a 	mov	r5,r21
  80cd1c:	a00d883a 	mov	r6,r20
  80cd20:	e009883a 	mov	r4,fp
  80cd24:	102d883a 	mov	r22,r2
  80cd28:	080e8fc0 	call	80e8fc <__mdiff>
  80cd2c:	1007883a 	mov	r3,r2
  80cd30:	10800317 	ldw	r2,12(r2)
  80cd34:	bc800c04 	addi	r18,r23,48
  80cd38:	180b883a 	mov	r5,r3
  80cd3c:	10004e1e 	bne	r2,zero,80ce78 <_dtoa_r+0xfac>
  80cd40:	8009883a 	mov	r4,r16
  80cd44:	d8c01615 	stw	r3,88(sp)
  80cd48:	080e89c0 	call	80e89c <__mcmp>
  80cd4c:	d8c01617 	ldw	r3,88(sp)
  80cd50:	e009883a 	mov	r4,fp
  80cd54:	d8801615 	stw	r2,88(sp)
  80cd58:	180b883a 	mov	r5,r3
  80cd5c:	080e07c0 	call	80e07c <_Bfree>
  80cd60:	d8801617 	ldw	r2,88(sp)
  80cd64:	1000041e 	bne	r2,zero,80cd78 <_dtoa_r+0xeac>
  80cd68:	d9800317 	ldw	r6,12(sp)
  80cd6c:	3000021e 	bne	r6,zero,80cd78 <_dtoa_r+0xeac>
  80cd70:	d8c00617 	ldw	r3,24(sp)
  80cd74:	18003726 	beq	r3,zero,80ce54 <_dtoa_r+0xf88>
  80cd78:	b0002016 	blt	r22,zero,80cdfc <_dtoa_r+0xf30>
  80cd7c:	b000041e 	bne	r22,zero,80cd90 <_dtoa_r+0xec4>
  80cd80:	d9000317 	ldw	r4,12(sp)
  80cd84:	2000021e 	bne	r4,zero,80cd90 <_dtoa_r+0xec4>
  80cd88:	d8c00617 	ldw	r3,24(sp)
  80cd8c:	18001b26 	beq	r3,zero,80cdfc <_dtoa_r+0xf30>
  80cd90:	00810716 	blt	zero,r2,80d1b0 <_dtoa_r+0x12e4>
  80cd94:	d8c00417 	ldw	r3,16(sp)
  80cd98:	9d800044 	addi	r22,r19,1
  80cd9c:	9c800005 	stb	r18,0(r19)
  80cda0:	b02f883a 	mov	r23,r22
  80cda4:	98c10626 	beq	r19,r3,80d1c0 <_dtoa_r+0x12f4>
  80cda8:	800b883a 	mov	r5,r16
  80cdac:	000f883a 	mov	r7,zero
  80cdb0:	01800284 	movi	r6,10
  80cdb4:	e009883a 	mov	r4,fp
  80cdb8:	080e0a40 	call	80e0a4 <__multadd>
  80cdbc:	1021883a 	mov	r16,r2
  80cdc0:	000f883a 	mov	r7,zero
  80cdc4:	01800284 	movi	r6,10
  80cdc8:	880b883a 	mov	r5,r17
  80cdcc:	e009883a 	mov	r4,fp
  80cdd0:	8d002526 	beq	r17,r20,80ce68 <_dtoa_r+0xf9c>
  80cdd4:	080e0a40 	call	80e0a4 <__multadd>
  80cdd8:	a00b883a 	mov	r5,r20
  80cddc:	000f883a 	mov	r7,zero
  80cde0:	01800284 	movi	r6,10
  80cde4:	e009883a 	mov	r4,fp
  80cde8:	1023883a 	mov	r17,r2
  80cdec:	080e0a40 	call	80e0a4 <__multadd>
  80cdf0:	1029883a 	mov	r20,r2
  80cdf4:	b027883a 	mov	r19,r22
  80cdf8:	003fc006 	br	80ccfc <__alt_mem_onchip_mem+0xff804cfc>
  80cdfc:	9011883a 	mov	r8,r18
  80ce00:	00800e0e 	bge	zero,r2,80ce3c <_dtoa_r+0xf70>
  80ce04:	800b883a 	mov	r5,r16
  80ce08:	01800044 	movi	r6,1
  80ce0c:	e009883a 	mov	r4,fp
  80ce10:	da001715 	stw	r8,92(sp)
  80ce14:	080e7540 	call	80e754 <__lshift>
  80ce18:	a80b883a 	mov	r5,r21
  80ce1c:	1009883a 	mov	r4,r2
  80ce20:	1021883a 	mov	r16,r2
  80ce24:	080e89c0 	call	80e89c <__mcmp>
  80ce28:	da001717 	ldw	r8,92(sp)
  80ce2c:	0081960e 	bge	zero,r2,80d488 <_dtoa_r+0x15bc>
  80ce30:	00800e44 	movi	r2,57
  80ce34:	40817026 	beq	r8,r2,80d3f8 <_dtoa_r+0x152c>
  80ce38:	ba000c44 	addi	r8,r23,49
  80ce3c:	8825883a 	mov	r18,r17
  80ce40:	9dc00044 	addi	r23,r19,1
  80ce44:	9a000005 	stb	r8,0(r19)
  80ce48:	a023883a 	mov	r17,r20
  80ce4c:	dc000915 	stw	r16,36(sp)
  80ce50:	003f2406 	br	80cae4 <__alt_mem_onchip_mem+0xff804ae4>
  80ce54:	00800e44 	movi	r2,57
  80ce58:	9011883a 	mov	r8,r18
  80ce5c:	90816626 	beq	r18,r2,80d3f8 <_dtoa_r+0x152c>
  80ce60:	05bff516 	blt	zero,r22,80ce38 <__alt_mem_onchip_mem+0xff804e38>
  80ce64:	003ff506 	br	80ce3c <__alt_mem_onchip_mem+0xff804e3c>
  80ce68:	080e0a40 	call	80e0a4 <__multadd>
  80ce6c:	1023883a 	mov	r17,r2
  80ce70:	1029883a 	mov	r20,r2
  80ce74:	003fdf06 	br	80cdf4 <__alt_mem_onchip_mem+0xff804df4>
  80ce78:	e009883a 	mov	r4,fp
  80ce7c:	080e07c0 	call	80e07c <_Bfree>
  80ce80:	00800044 	movi	r2,1
  80ce84:	003fbc06 	br	80cd78 <__alt_mem_onchip_mem+0xff804d78>
  80ce88:	a80b883a 	mov	r5,r21
  80ce8c:	8009883a 	mov	r4,r16
  80ce90:	080e89c0 	call	80e89c <__mcmp>
  80ce94:	103edb0e 	bge	r2,zero,80ca04 <__alt_mem_onchip_mem+0xff804a04>
  80ce98:	800b883a 	mov	r5,r16
  80ce9c:	000f883a 	mov	r7,zero
  80cea0:	01800284 	movi	r6,10
  80cea4:	e009883a 	mov	r4,fp
  80cea8:	080e0a40 	call	80e0a4 <__multadd>
  80ceac:	1021883a 	mov	r16,r2
  80ceb0:	d8800517 	ldw	r2,20(sp)
  80ceb4:	d8c00b17 	ldw	r3,44(sp)
  80ceb8:	10bfffc4 	addi	r2,r2,-1
  80cebc:	d8800515 	stw	r2,20(sp)
  80cec0:	183f761e 	bne	r3,zero,80cc9c <__alt_mem_onchip_mem+0xff804c9c>
  80cec4:	d9000c17 	ldw	r4,48(sp)
  80cec8:	0101730e 	bge	zero,r4,80d498 <_dtoa_r+0x15cc>
  80cecc:	d9000615 	stw	r4,24(sp)
  80ced0:	003ed006 	br	80ca14 <__alt_mem_onchip_mem+0xff804a14>
  80ced4:	00800084 	movi	r2,2
  80ced8:	3081861e 	bne	r6,r2,80d4f4 <_dtoa_r+0x1628>
  80cedc:	d8000b15 	stw	zero,44(sp)
  80cee0:	003f3c06 	br	80cbd4 <__alt_mem_onchip_mem+0xff804bd4>
  80cee4:	dc000917 	ldw	r16,36(sp)
  80cee8:	003e9206 	br	80c934 <__alt_mem_onchip_mem+0xff804934>
  80ceec:	d9c00317 	ldw	r7,12(sp)
  80cef0:	00800084 	movi	r2,2
  80cef4:	11fec50e 	bge	r2,r7,80ca0c <__alt_mem_onchip_mem+0xff804a0c>
  80cef8:	d9000617 	ldw	r4,24(sp)
  80cefc:	20013c1e 	bne	r4,zero,80d3f0 <_dtoa_r+0x1524>
  80cf00:	a80b883a 	mov	r5,r21
  80cf04:	000f883a 	mov	r7,zero
  80cf08:	01800144 	movi	r6,5
  80cf0c:	e009883a 	mov	r4,fp
  80cf10:	080e0a40 	call	80e0a4 <__multadd>
  80cf14:	100b883a 	mov	r5,r2
  80cf18:	8009883a 	mov	r4,r16
  80cf1c:	102b883a 	mov	r21,r2
  80cf20:	080e89c0 	call	80e89c <__mcmp>
  80cf24:	dc000915 	stw	r16,36(sp)
  80cf28:	00bf410e 	bge	zero,r2,80cc30 <__alt_mem_onchip_mem+0xff804c30>
  80cf2c:	d9c00717 	ldw	r7,28(sp)
  80cf30:	00800c44 	movi	r2,49
  80cf34:	38800005 	stb	r2,0(r7)
  80cf38:	d8800517 	ldw	r2,20(sp)
  80cf3c:	3dc00044 	addi	r23,r7,1
  80cf40:	10800044 	addi	r2,r2,1
  80cf44:	d8800515 	stw	r2,20(sp)
  80cf48:	003f3d06 	br	80cc40 <__alt_mem_onchip_mem+0xff804c40>
  80cf4c:	d9800517 	ldw	r6,20(sp)
  80cf50:	d9c00717 	ldw	r7,28(sp)
  80cf54:	00800c44 	movi	r2,49
  80cf58:	31800044 	addi	r6,r6,1
  80cf5c:	d9800515 	stw	r6,20(sp)
  80cf60:	38800005 	stb	r2,0(r7)
  80cf64:	003edf06 	br	80cae4 <__alt_mem_onchip_mem+0xff804ae4>
  80cf68:	d8000b15 	stw	zero,44(sp)
  80cf6c:	003c9f06 	br	80c1ec <__alt_mem_onchip_mem+0xff8041ec>
  80cf70:	903e7e1e 	bne	r18,zero,80c96c <__alt_mem_onchip_mem+0xff80496c>
  80cf74:	00800434 	movhi	r2,16
  80cf78:	10bfffc4 	addi	r2,r2,-1
  80cf7c:	9884703a 	and	r2,r19,r2
  80cf80:	1000ea1e 	bne	r2,zero,80d32c <_dtoa_r+0x1460>
  80cf84:	9cdffc2c 	andhi	r19,r19,32752
  80cf88:	9800e826 	beq	r19,zero,80d32c <_dtoa_r+0x1460>
  80cf8c:	d9c00817 	ldw	r7,32(sp)
  80cf90:	b5800044 	addi	r22,r22,1
  80cf94:	04c00044 	movi	r19,1
  80cf98:	39c00044 	addi	r7,r7,1
  80cf9c:	d9c00815 	stw	r7,32(sp)
  80cfa0:	d8800d17 	ldw	r2,52(sp)
  80cfa4:	103e721e 	bne	r2,zero,80c970 <__alt_mem_onchip_mem+0xff804970>
  80cfa8:	00800044 	movi	r2,1
  80cfac:	003e7906 	br	80c994 <__alt_mem_onchip_mem+0xff804994>
  80cfb0:	8009883a 	mov	r4,r16
  80cfb4:	0806fd80 	call	806fd8 <__floatsidf>
  80cfb8:	d9800f17 	ldw	r6,60(sp)
  80cfbc:	d9c01017 	ldw	r7,64(sp)
  80cfc0:	1009883a 	mov	r4,r2
  80cfc4:	180b883a 	mov	r5,r3
  80cfc8:	08127b40 	call	8127b4 <__muldf3>
  80cfcc:	000d883a 	mov	r6,zero
  80cfd0:	01d00734 	movhi	r7,16412
  80cfd4:	1009883a 	mov	r4,r2
  80cfd8:	180b883a 	mov	r5,r3
  80cfdc:	0805c600 	call	805c60 <__adddf3>
  80cfe0:	047f3034 	movhi	r17,64704
  80cfe4:	1021883a 	mov	r16,r2
  80cfe8:	1c63883a 	add	r17,r3,r17
  80cfec:	d9000f17 	ldw	r4,60(sp)
  80cff0:	d9401017 	ldw	r5,64(sp)
  80cff4:	000d883a 	mov	r6,zero
  80cff8:	01d00534 	movhi	r7,16404
  80cffc:	08066dc0 	call	8066dc <__subdf3>
  80d000:	800d883a 	mov	r6,r16
  80d004:	880f883a 	mov	r7,r17
  80d008:	1009883a 	mov	r4,r2
  80d00c:	180b883a 	mov	r5,r3
  80d010:	102b883a 	mov	r21,r2
  80d014:	1829883a 	mov	r20,r3
  80d018:	080650c0 	call	80650c <__gedf2>
  80d01c:	00806c16 	blt	zero,r2,80d1d0 <_dtoa_r+0x1304>
  80d020:	89e0003c 	xorhi	r7,r17,32768
  80d024:	800d883a 	mov	r6,r16
  80d028:	a809883a 	mov	r4,r21
  80d02c:	a00b883a 	mov	r5,r20
  80d030:	08065e80 	call	8065e8 <__ledf2>
  80d034:	103d7e0e 	bge	r2,zero,80c630 <__alt_mem_onchip_mem+0xff804630>
  80d038:	002b883a 	mov	r21,zero
  80d03c:	0023883a 	mov	r17,zero
  80d040:	003efb06 	br	80cc30 <__alt_mem_onchip_mem+0xff804c30>
  80d044:	d8800717 	ldw	r2,28(sp)
  80d048:	003bd006 	br	80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80d04c:	d9000a17 	ldw	r4,40(sp)
  80d050:	d9800d17 	ldw	r6,52(sp)
  80d054:	dd400a15 	stw	r21,40(sp)
  80d058:	a905c83a 	sub	r2,r21,r4
  80d05c:	308d883a 	add	r6,r6,r2
  80d060:	d9800d15 	stw	r6,52(sp)
  80d064:	002b883a 	mov	r21,zero
  80d068:	003e0606 	br	80c884 <__alt_mem_onchip_mem+0xff804884>
  80d06c:	9023883a 	mov	r17,r18
  80d070:	9829883a 	mov	r20,r19
  80d074:	04000084 	movi	r16,2
  80d078:	003c9206 	br	80c2c4 <__alt_mem_onchip_mem+0xff8042c4>
  80d07c:	04000044 	movi	r16,1
  80d080:	dc000c15 	stw	r16,48(sp)
  80d084:	dc000615 	stw	r16,24(sp)
  80d088:	dc002215 	stw	r16,136(sp)
  80d08c:	e0001115 	stw	zero,68(fp)
  80d090:	000b883a 	mov	r5,zero
  80d094:	003c6906 	br	80c23c <__alt_mem_onchip_mem+0xff80423c>
  80d098:	3021883a 	mov	r16,r6
  80d09c:	003ffb06 	br	80d08c <__alt_mem_onchip_mem+0xff80508c>
  80d0a0:	1000021e 	bne	r2,zero,80d0ac <_dtoa_r+0x11e0>
  80d0a4:	4200004c 	andi	r8,r8,1
  80d0a8:	403e7d1e 	bne	r8,zero,80caa0 <__alt_mem_onchip_mem+0xff804aa0>
  80d0ac:	01000c04 	movi	r4,48
  80d0b0:	00000106 	br	80d0b8 <_dtoa_r+0x11ec>
  80d0b4:	102f883a 	mov	r23,r2
  80d0b8:	b8bfffc4 	addi	r2,r23,-1
  80d0bc:	10c00007 	ldb	r3,0(r2)
  80d0c0:	193ffc26 	beq	r3,r4,80d0b4 <__alt_mem_onchip_mem+0xff8050b4>
  80d0c4:	003e8706 	br	80cae4 <__alt_mem_onchip_mem+0xff804ae4>
  80d0c8:	d8800517 	ldw	r2,20(sp)
  80d0cc:	00a3c83a 	sub	r17,zero,r2
  80d0d0:	8800a426 	beq	r17,zero,80d364 <_dtoa_r+0x1498>
  80d0d4:	888003cc 	andi	r2,r17,15
  80d0d8:	100490fa 	slli	r2,r2,3
  80d0dc:	00c02074 	movhi	r3,129
  80d0e0:	18dd4e04 	addi	r3,r3,30008
  80d0e4:	1885883a 	add	r2,r3,r2
  80d0e8:	11800017 	ldw	r6,0(r2)
  80d0ec:	11c00117 	ldw	r7,4(r2)
  80d0f0:	9009883a 	mov	r4,r18
  80d0f4:	980b883a 	mov	r5,r19
  80d0f8:	8823d13a 	srai	r17,r17,4
  80d0fc:	08127b40 	call	8127b4 <__muldf3>
  80d100:	d8800f15 	stw	r2,60(sp)
  80d104:	d8c01015 	stw	r3,64(sp)
  80d108:	8800e826 	beq	r17,zero,80d4ac <_dtoa_r+0x15e0>
  80d10c:	05002074 	movhi	r20,129
  80d110:	a51d4404 	addi	r20,r20,29968
  80d114:	04000084 	movi	r16,2
  80d118:	8980004c 	andi	r6,r17,1
  80d11c:	1009883a 	mov	r4,r2
  80d120:	8823d07a 	srai	r17,r17,1
  80d124:	180b883a 	mov	r5,r3
  80d128:	30000426 	beq	r6,zero,80d13c <_dtoa_r+0x1270>
  80d12c:	a1800017 	ldw	r6,0(r20)
  80d130:	a1c00117 	ldw	r7,4(r20)
  80d134:	84000044 	addi	r16,r16,1
  80d138:	08127b40 	call	8127b4 <__muldf3>
  80d13c:	a5000204 	addi	r20,r20,8
  80d140:	883ff51e 	bne	r17,zero,80d118 <__alt_mem_onchip_mem+0xff805118>
  80d144:	d8800f15 	stw	r2,60(sp)
  80d148:	d8c01015 	stw	r3,64(sp)
  80d14c:	003c7606 	br	80c328 <__alt_mem_onchip_mem+0xff804328>
  80d150:	00c00c04 	movi	r3,48
  80d154:	10c00005 	stb	r3,0(r2)
  80d158:	d8c00517 	ldw	r3,20(sp)
  80d15c:	bd3fffc3 	ldbu	r20,-1(r23)
  80d160:	18c00044 	addi	r3,r3,1
  80d164:	d8c00515 	stw	r3,20(sp)
  80d168:	003db906 	br	80c850 <__alt_mem_onchip_mem+0xff804850>
  80d16c:	89400117 	ldw	r5,4(r17)
  80d170:	e009883a 	mov	r4,fp
  80d174:	080dfd40 	call	80dfd4 <_Balloc>
  80d178:	89800417 	ldw	r6,16(r17)
  80d17c:	89400304 	addi	r5,r17,12
  80d180:	11000304 	addi	r4,r2,12
  80d184:	31800084 	addi	r6,r6,2
  80d188:	318d883a 	add	r6,r6,r6
  80d18c:	318d883a 	add	r6,r6,r6
  80d190:	1027883a 	mov	r19,r2
  80d194:	080dd300 	call	80dd30 <memcpy>
  80d198:	01800044 	movi	r6,1
  80d19c:	980b883a 	mov	r5,r19
  80d1a0:	e009883a 	mov	r4,fp
  80d1a4:	080e7540 	call	80e754 <__lshift>
  80d1a8:	1029883a 	mov	r20,r2
  80d1ac:	003ecc06 	br	80cce0 <__alt_mem_onchip_mem+0xff804ce0>
  80d1b0:	00800e44 	movi	r2,57
  80d1b4:	90809026 	beq	r18,r2,80d3f8 <_dtoa_r+0x152c>
  80d1b8:	92000044 	addi	r8,r18,1
  80d1bc:	003f1f06 	br	80ce3c <__alt_mem_onchip_mem+0xff804e3c>
  80d1c0:	9011883a 	mov	r8,r18
  80d1c4:	8825883a 	mov	r18,r17
  80d1c8:	a023883a 	mov	r17,r20
  80d1cc:	003e2906 	br	80ca74 <__alt_mem_onchip_mem+0xff804a74>
  80d1d0:	002b883a 	mov	r21,zero
  80d1d4:	0023883a 	mov	r17,zero
  80d1d8:	003f5406 	br	80cf2c <__alt_mem_onchip_mem+0xff804f2c>
  80d1dc:	61bfffc4 	addi	r6,r12,-1
  80d1e0:	300490fa 	slli	r2,r6,3
  80d1e4:	00c02074 	movhi	r3,129
  80d1e8:	18dd4e04 	addi	r3,r3,30008
  80d1ec:	1885883a 	add	r2,r3,r2
  80d1f0:	11000017 	ldw	r4,0(r2)
  80d1f4:	11400117 	ldw	r5,4(r2)
  80d1f8:	d8800717 	ldw	r2,28(sp)
  80d1fc:	880f883a 	mov	r7,r17
  80d200:	d9801215 	stw	r6,72(sp)
  80d204:	800d883a 	mov	r6,r16
  80d208:	db001615 	stw	r12,88(sp)
  80d20c:	15c00044 	addi	r23,r2,1
  80d210:	08127b40 	call	8127b4 <__muldf3>
  80d214:	d9401017 	ldw	r5,64(sp)
  80d218:	d9000f17 	ldw	r4,60(sp)
  80d21c:	d8c01515 	stw	r3,84(sp)
  80d220:	d8801415 	stw	r2,80(sp)
  80d224:	0812ecc0 	call	812ecc <__fixdfsi>
  80d228:	1009883a 	mov	r4,r2
  80d22c:	1021883a 	mov	r16,r2
  80d230:	0806fd80 	call	806fd8 <__floatsidf>
  80d234:	d9000f17 	ldw	r4,60(sp)
  80d238:	d9401017 	ldw	r5,64(sp)
  80d23c:	100d883a 	mov	r6,r2
  80d240:	180f883a 	mov	r7,r3
  80d244:	08066dc0 	call	8066dc <__subdf3>
  80d248:	1829883a 	mov	r20,r3
  80d24c:	d8c00717 	ldw	r3,28(sp)
  80d250:	84000c04 	addi	r16,r16,48
  80d254:	1023883a 	mov	r17,r2
  80d258:	1c000005 	stb	r16,0(r3)
  80d25c:	db001617 	ldw	r12,88(sp)
  80d260:	00800044 	movi	r2,1
  80d264:	60802226 	beq	r12,r2,80d2f0 <_dtoa_r+0x1424>
  80d268:	d9c00717 	ldw	r7,28(sp)
  80d26c:	8805883a 	mov	r2,r17
  80d270:	b82b883a 	mov	r21,r23
  80d274:	3b19883a 	add	r12,r7,r12
  80d278:	6023883a 	mov	r17,r12
  80d27c:	a007883a 	mov	r3,r20
  80d280:	dc800f15 	stw	r18,60(sp)
  80d284:	000d883a 	mov	r6,zero
  80d288:	01d00934 	movhi	r7,16420
  80d28c:	1009883a 	mov	r4,r2
  80d290:	180b883a 	mov	r5,r3
  80d294:	08127b40 	call	8127b4 <__muldf3>
  80d298:	180b883a 	mov	r5,r3
  80d29c:	1009883a 	mov	r4,r2
  80d2a0:	1829883a 	mov	r20,r3
  80d2a4:	1025883a 	mov	r18,r2
  80d2a8:	0812ecc0 	call	812ecc <__fixdfsi>
  80d2ac:	1009883a 	mov	r4,r2
  80d2b0:	1021883a 	mov	r16,r2
  80d2b4:	0806fd80 	call	806fd8 <__floatsidf>
  80d2b8:	100d883a 	mov	r6,r2
  80d2bc:	180f883a 	mov	r7,r3
  80d2c0:	9009883a 	mov	r4,r18
  80d2c4:	a00b883a 	mov	r5,r20
  80d2c8:	84000c04 	addi	r16,r16,48
  80d2cc:	08066dc0 	call	8066dc <__subdf3>
  80d2d0:	ad400044 	addi	r21,r21,1
  80d2d4:	ac3fffc5 	stb	r16,-1(r21)
  80d2d8:	ac7fea1e 	bne	r21,r17,80d284 <__alt_mem_onchip_mem+0xff805284>
  80d2dc:	1023883a 	mov	r17,r2
  80d2e0:	d8801217 	ldw	r2,72(sp)
  80d2e4:	dc800f17 	ldw	r18,60(sp)
  80d2e8:	1829883a 	mov	r20,r3
  80d2ec:	b8af883a 	add	r23,r23,r2
  80d2f0:	d9001417 	ldw	r4,80(sp)
  80d2f4:	d9401517 	ldw	r5,84(sp)
  80d2f8:	000d883a 	mov	r6,zero
  80d2fc:	01cff834 	movhi	r7,16352
  80d300:	0805c600 	call	805c60 <__adddf3>
  80d304:	880d883a 	mov	r6,r17
  80d308:	a00f883a 	mov	r7,r20
  80d30c:	1009883a 	mov	r4,r2
  80d310:	180b883a 	mov	r5,r3
  80d314:	08065e80 	call	8065e8 <__ledf2>
  80d318:	10003e0e 	bge	r2,zero,80d414 <_dtoa_r+0x1548>
  80d31c:	d9001317 	ldw	r4,76(sp)
  80d320:	bd3fffc3 	ldbu	r20,-1(r23)
  80d324:	d9000515 	stw	r4,20(sp)
  80d328:	003d3b06 	br	80c818 <__alt_mem_onchip_mem+0xff804818>
  80d32c:	0027883a 	mov	r19,zero
  80d330:	003f1b06 	br	80cfa0 <__alt_mem_onchip_mem+0xff804fa0>
  80d334:	d8800817 	ldw	r2,32(sp)
  80d338:	11e9c83a 	sub	r20,r2,r7
  80d33c:	0005883a 	mov	r2,zero
  80d340:	003d5406 	br	80c894 <__alt_mem_onchip_mem+0xff804894>
  80d344:	00800044 	movi	r2,1
  80d348:	003dc706 	br	80ca68 <__alt_mem_onchip_mem+0xff804a68>
  80d34c:	d8c00217 	ldw	r3,8(sp)
  80d350:	00800d84 	movi	r2,54
  80d354:	dd400a17 	ldw	r21,40(sp)
  80d358:	10c5c83a 	sub	r2,r2,r3
  80d35c:	dd000817 	ldw	r20,32(sp)
  80d360:	003d4c06 	br	80c894 <__alt_mem_onchip_mem+0xff804894>
  80d364:	dc800f15 	stw	r18,60(sp)
  80d368:	dcc01015 	stw	r19,64(sp)
  80d36c:	04000084 	movi	r16,2
  80d370:	003bed06 	br	80c328 <__alt_mem_onchip_mem+0xff804328>
  80d374:	d9000617 	ldw	r4,24(sp)
  80d378:	203f0d26 	beq	r4,zero,80cfb0 <__alt_mem_onchip_mem+0xff804fb0>
  80d37c:	d9800c17 	ldw	r6,48(sp)
  80d380:	01bcab0e 	bge	zero,r6,80c630 <__alt_mem_onchip_mem+0xff804630>
  80d384:	d9401017 	ldw	r5,64(sp)
  80d388:	d9000f17 	ldw	r4,60(sp)
  80d38c:	000d883a 	mov	r6,zero
  80d390:	01d00934 	movhi	r7,16420
  80d394:	08127b40 	call	8127b4 <__muldf3>
  80d398:	81000044 	addi	r4,r16,1
  80d39c:	d8800f15 	stw	r2,60(sp)
  80d3a0:	d8c01015 	stw	r3,64(sp)
  80d3a4:	0806fd80 	call	806fd8 <__floatsidf>
  80d3a8:	d9800f17 	ldw	r6,60(sp)
  80d3ac:	d9c01017 	ldw	r7,64(sp)
  80d3b0:	1009883a 	mov	r4,r2
  80d3b4:	180b883a 	mov	r5,r3
  80d3b8:	08127b40 	call	8127b4 <__muldf3>
  80d3bc:	01d00734 	movhi	r7,16412
  80d3c0:	000d883a 	mov	r6,zero
  80d3c4:	1009883a 	mov	r4,r2
  80d3c8:	180b883a 	mov	r5,r3
  80d3cc:	0805c600 	call	805c60 <__adddf3>
  80d3d0:	d9c00517 	ldw	r7,20(sp)
  80d3d4:	047f3034 	movhi	r17,64704
  80d3d8:	1021883a 	mov	r16,r2
  80d3dc:	39ffffc4 	addi	r7,r7,-1
  80d3e0:	d9c01315 	stw	r7,76(sp)
  80d3e4:	1c63883a 	add	r17,r3,r17
  80d3e8:	db000c17 	ldw	r12,48(sp)
  80d3ec:	003bea06 	br	80c398 <__alt_mem_onchip_mem+0xff804398>
  80d3f0:	dc000915 	stw	r16,36(sp)
  80d3f4:	003e0e06 	br	80cc30 <__alt_mem_onchip_mem+0xff804c30>
  80d3f8:	01000e44 	movi	r4,57
  80d3fc:	8825883a 	mov	r18,r17
  80d400:	9dc00044 	addi	r23,r19,1
  80d404:	99000005 	stb	r4,0(r19)
  80d408:	a023883a 	mov	r17,r20
  80d40c:	dc000915 	stw	r16,36(sp)
  80d410:	003da406 	br	80caa4 <__alt_mem_onchip_mem+0xff804aa4>
  80d414:	d9801417 	ldw	r6,80(sp)
  80d418:	d9c01517 	ldw	r7,84(sp)
  80d41c:	0009883a 	mov	r4,zero
  80d420:	014ff834 	movhi	r5,16352
  80d424:	08066dc0 	call	8066dc <__subdf3>
  80d428:	880d883a 	mov	r6,r17
  80d42c:	a00f883a 	mov	r7,r20
  80d430:	1009883a 	mov	r4,r2
  80d434:	180b883a 	mov	r5,r3
  80d438:	080650c0 	call	80650c <__gedf2>
  80d43c:	00bc7c0e 	bge	zero,r2,80c630 <__alt_mem_onchip_mem+0xff804630>
  80d440:	01000c04 	movi	r4,48
  80d444:	00000106 	br	80d44c <_dtoa_r+0x1580>
  80d448:	102f883a 	mov	r23,r2
  80d44c:	b8bfffc4 	addi	r2,r23,-1
  80d450:	10c00007 	ldb	r3,0(r2)
  80d454:	193ffc26 	beq	r3,r4,80d448 <__alt_mem_onchip_mem+0xff805448>
  80d458:	d9801317 	ldw	r6,76(sp)
  80d45c:	d9800515 	stw	r6,20(sp)
  80d460:	003c4406 	br	80c574 <__alt_mem_onchip_mem+0xff804574>
  80d464:	d9801317 	ldw	r6,76(sp)
  80d468:	d9800515 	stw	r6,20(sp)
  80d46c:	003cea06 	br	80c818 <__alt_mem_onchip_mem+0xff804818>
  80d470:	dd800f17 	ldw	r22,60(sp)
  80d474:	dcc01017 	ldw	r19,64(sp)
  80d478:	dc801217 	ldw	r18,72(sp)
  80d47c:	003c6c06 	br	80c630 <__alt_mem_onchip_mem+0xff804630>
  80d480:	903e031e 	bne	r18,zero,80cc90 <__alt_mem_onchip_mem+0xff804c90>
  80d484:	003ebb06 	br	80cf74 <__alt_mem_onchip_mem+0xff804f74>
  80d488:	103e6c1e 	bne	r2,zero,80ce3c <__alt_mem_onchip_mem+0xff804e3c>
  80d48c:	4080004c 	andi	r2,r8,1
  80d490:	103e6a26 	beq	r2,zero,80ce3c <__alt_mem_onchip_mem+0xff804e3c>
  80d494:	003e6606 	br	80ce30 <__alt_mem_onchip_mem+0xff804e30>
  80d498:	d8c00317 	ldw	r3,12(sp)
  80d49c:	00800084 	movi	r2,2
  80d4a0:	10c02916 	blt	r2,r3,80d548 <_dtoa_r+0x167c>
  80d4a4:	d9000c17 	ldw	r4,48(sp)
  80d4a8:	003e8806 	br	80cecc <__alt_mem_onchip_mem+0xff804ecc>
  80d4ac:	04000084 	movi	r16,2
  80d4b0:	003b9d06 	br	80c328 <__alt_mem_onchip_mem+0xff804328>
  80d4b4:	d9001317 	ldw	r4,76(sp)
  80d4b8:	d9000515 	stw	r4,20(sp)
  80d4bc:	003cd606 	br	80c818 <__alt_mem_onchip_mem+0xff804818>
  80d4c0:	d8801317 	ldw	r2,76(sp)
  80d4c4:	d8800515 	stw	r2,20(sp)
  80d4c8:	003c2a06 	br	80c574 <__alt_mem_onchip_mem+0xff804574>
  80d4cc:	d9800317 	ldw	r6,12(sp)
  80d4d0:	00800084 	movi	r2,2
  80d4d4:	11801516 	blt	r2,r6,80d52c <_dtoa_r+0x1660>
  80d4d8:	d9c00c17 	ldw	r7,48(sp)
  80d4dc:	d9c00615 	stw	r7,24(sp)
  80d4e0:	003df706 	br	80ccc0 <__alt_mem_onchip_mem+0xff804cc0>
  80d4e4:	193d3926 	beq	r3,r4,80c9cc <__alt_mem_onchip_mem+0xff8049cc>
  80d4e8:	00c00f04 	movi	r3,60
  80d4ec:	1885c83a 	sub	r2,r3,r2
  80d4f0:	003ddf06 	br	80cc70 <__alt_mem_onchip_mem+0xff804c70>
  80d4f4:	e009883a 	mov	r4,fp
  80d4f8:	e0001115 	stw	zero,68(fp)
  80d4fc:	000b883a 	mov	r5,zero
  80d500:	080dfd40 	call	80dfd4 <_Balloc>
  80d504:	d8800715 	stw	r2,28(sp)
  80d508:	d8c00717 	ldw	r3,28(sp)
  80d50c:	00bfffc4 	movi	r2,-1
  80d510:	01000044 	movi	r4,1
  80d514:	d8800c15 	stw	r2,48(sp)
  80d518:	e0c01015 	stw	r3,64(fp)
  80d51c:	d9000b15 	stw	r4,44(sp)
  80d520:	d8800615 	stw	r2,24(sp)
  80d524:	d8002215 	stw	zero,136(sp)
  80d528:	003c4106 	br	80c630 <__alt_mem_onchip_mem+0xff804630>
  80d52c:	d8c00c17 	ldw	r3,48(sp)
  80d530:	d8c00615 	stw	r3,24(sp)
  80d534:	003e7006 	br	80cef8 <__alt_mem_onchip_mem+0xff804ef8>
  80d538:	04400044 	movi	r17,1
  80d53c:	003b2006 	br	80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80d540:	000b883a 	mov	r5,zero
  80d544:	003b3d06 	br	80c23c <__alt_mem_onchip_mem+0xff80423c>
  80d548:	d8800c17 	ldw	r2,48(sp)
  80d54c:	d8800615 	stw	r2,24(sp)
  80d550:	003e6906 	br	80cef8 <__alt_mem_onchip_mem+0xff804ef8>

0080d554 <__sflags>:
  80d554:	28800007 	ldb	r2,0(r5)
  80d558:	00c01c84 	movi	r3,114
  80d55c:	10c02426 	beq	r2,r3,80d5f0 <__sflags+0x9c>
  80d560:	00c01dc4 	movi	r3,119
  80d564:	10c01e26 	beq	r2,r3,80d5e0 <__sflags+0x8c>
  80d568:	00c01844 	movi	r3,97
  80d56c:	10c00426 	beq	r2,r3,80d580 <__sflags+0x2c>
  80d570:	00800584 	movi	r2,22
  80d574:	20800015 	stw	r2,0(r4)
  80d578:	0005883a 	mov	r2,zero
  80d57c:	f800283a 	ret
  80d580:	02c08204 	movi	r11,520
  80d584:	01000044 	movi	r4,1
  80d588:	00804204 	movi	r2,264
  80d58c:	01c00ac4 	movi	r7,43
  80d590:	02bff8c4 	movi	r10,-29
  80d594:	027fff04 	movi	r9,-4
  80d598:	02001e04 	movi	r8,120
  80d59c:	29400044 	addi	r5,r5,1
  80d5a0:	28c00007 	ldb	r3,0(r5)
  80d5a4:	18000626 	beq	r3,zero,80d5c0 <__sflags+0x6c>
  80d5a8:	19c00826 	beq	r3,r7,80d5cc <__sflags+0x78>
  80d5ac:	1a3ffb1e 	bne	r3,r8,80d59c <__alt_mem_onchip_mem+0xff80559c>
  80d5b0:	29400044 	addi	r5,r5,1
  80d5b4:	28c00007 	ldb	r3,0(r5)
  80d5b8:	21020014 	ori	r4,r4,2048
  80d5bc:	183ffa1e 	bne	r3,zero,80d5a8 <__alt_mem_onchip_mem+0xff8055a8>
  80d5c0:	22c8b03a 	or	r4,r4,r11
  80d5c4:	31000015 	stw	r4,0(r6)
  80d5c8:	f800283a 	ret
  80d5cc:	1284703a 	and	r2,r2,r10
  80d5d0:	2248703a 	and	r4,r4,r9
  80d5d4:	10800414 	ori	r2,r2,16
  80d5d8:	21000094 	ori	r4,r4,2
  80d5dc:	003fef06 	br	80d59c <__alt_mem_onchip_mem+0xff80559c>
  80d5e0:	02c18004 	movi	r11,1536
  80d5e4:	01000044 	movi	r4,1
  80d5e8:	00800204 	movi	r2,8
  80d5ec:	003fe706 	br	80d58c <__alt_mem_onchip_mem+0xff80558c>
  80d5f0:	0017883a 	mov	r11,zero
  80d5f4:	0009883a 	mov	r4,zero
  80d5f8:	00800104 	movi	r2,4
  80d5fc:	003fe306 	br	80d58c <__alt_mem_onchip_mem+0xff80558c>

0080d600 <__sfvwrite_r>:
  80d600:	30800217 	ldw	r2,8(r6)
  80d604:	10006726 	beq	r2,zero,80d7a4 <__sfvwrite_r+0x1a4>
  80d608:	28c0030b 	ldhu	r3,12(r5)
  80d60c:	defff404 	addi	sp,sp,-48
  80d610:	dd400715 	stw	r21,28(sp)
  80d614:	dd000615 	stw	r20,24(sp)
  80d618:	dc000215 	stw	r16,8(sp)
  80d61c:	dfc00b15 	stw	ra,44(sp)
  80d620:	df000a15 	stw	fp,40(sp)
  80d624:	ddc00915 	stw	r23,36(sp)
  80d628:	dd800815 	stw	r22,32(sp)
  80d62c:	dcc00515 	stw	r19,20(sp)
  80d630:	dc800415 	stw	r18,16(sp)
  80d634:	dc400315 	stw	r17,12(sp)
  80d638:	1880020c 	andi	r2,r3,8
  80d63c:	2821883a 	mov	r16,r5
  80d640:	202b883a 	mov	r21,r4
  80d644:	3029883a 	mov	r20,r6
  80d648:	10002726 	beq	r2,zero,80d6e8 <__sfvwrite_r+0xe8>
  80d64c:	28800417 	ldw	r2,16(r5)
  80d650:	10002526 	beq	r2,zero,80d6e8 <__sfvwrite_r+0xe8>
  80d654:	1880008c 	andi	r2,r3,2
  80d658:	a4400017 	ldw	r17,0(r20)
  80d65c:	10002a26 	beq	r2,zero,80d708 <__sfvwrite_r+0x108>
  80d660:	05a00034 	movhi	r22,32768
  80d664:	0027883a 	mov	r19,zero
  80d668:	0025883a 	mov	r18,zero
  80d66c:	b5bf0004 	addi	r22,r22,-1024
  80d670:	980d883a 	mov	r6,r19
  80d674:	a809883a 	mov	r4,r21
  80d678:	90004626 	beq	r18,zero,80d794 <__sfvwrite_r+0x194>
  80d67c:	900f883a 	mov	r7,r18
  80d680:	b480022e 	bgeu	r22,r18,80d68c <__sfvwrite_r+0x8c>
  80d684:	01e00034 	movhi	r7,32768
  80d688:	39ff0004 	addi	r7,r7,-1024
  80d68c:	80800917 	ldw	r2,36(r16)
  80d690:	81400717 	ldw	r5,28(r16)
  80d694:	103ee83a 	callr	r2
  80d698:	0080570e 	bge	zero,r2,80d7f8 <__sfvwrite_r+0x1f8>
  80d69c:	a0c00217 	ldw	r3,8(r20)
  80d6a0:	98a7883a 	add	r19,r19,r2
  80d6a4:	90a5c83a 	sub	r18,r18,r2
  80d6a8:	1885c83a 	sub	r2,r3,r2
  80d6ac:	a0800215 	stw	r2,8(r20)
  80d6b0:	103fef1e 	bne	r2,zero,80d670 <__alt_mem_onchip_mem+0xff805670>
  80d6b4:	0005883a 	mov	r2,zero
  80d6b8:	dfc00b17 	ldw	ra,44(sp)
  80d6bc:	df000a17 	ldw	fp,40(sp)
  80d6c0:	ddc00917 	ldw	r23,36(sp)
  80d6c4:	dd800817 	ldw	r22,32(sp)
  80d6c8:	dd400717 	ldw	r21,28(sp)
  80d6cc:	dd000617 	ldw	r20,24(sp)
  80d6d0:	dcc00517 	ldw	r19,20(sp)
  80d6d4:	dc800417 	ldw	r18,16(sp)
  80d6d8:	dc400317 	ldw	r17,12(sp)
  80d6dc:	dc000217 	ldw	r16,8(sp)
  80d6e0:	dec00c04 	addi	sp,sp,48
  80d6e4:	f800283a 	ret
  80d6e8:	800b883a 	mov	r5,r16
  80d6ec:	a809883a 	mov	r4,r21
  80d6f0:	080bb240 	call	80bb24 <__swsetup_r>
  80d6f4:	1000eb1e 	bne	r2,zero,80daa4 <__sfvwrite_r+0x4a4>
  80d6f8:	80c0030b 	ldhu	r3,12(r16)
  80d6fc:	a4400017 	ldw	r17,0(r20)
  80d700:	1880008c 	andi	r2,r3,2
  80d704:	103fd61e 	bne	r2,zero,80d660 <__alt_mem_onchip_mem+0xff805660>
  80d708:	1880004c 	andi	r2,r3,1
  80d70c:	10003f1e 	bne	r2,zero,80d80c <__sfvwrite_r+0x20c>
  80d710:	0039883a 	mov	fp,zero
  80d714:	0025883a 	mov	r18,zero
  80d718:	90001a26 	beq	r18,zero,80d784 <__sfvwrite_r+0x184>
  80d71c:	1880800c 	andi	r2,r3,512
  80d720:	84c00217 	ldw	r19,8(r16)
  80d724:	10002126 	beq	r2,zero,80d7ac <__sfvwrite_r+0x1ac>
  80d728:	982f883a 	mov	r23,r19
  80d72c:	94c09336 	bltu	r18,r19,80d97c <__sfvwrite_r+0x37c>
  80d730:	1881200c 	andi	r2,r3,1152
  80d734:	10009e1e 	bne	r2,zero,80d9b0 <__sfvwrite_r+0x3b0>
  80d738:	81000017 	ldw	r4,0(r16)
  80d73c:	b80d883a 	mov	r6,r23
  80d740:	e00b883a 	mov	r5,fp
  80d744:	080de780 	call	80de78 <memmove>
  80d748:	80c00217 	ldw	r3,8(r16)
  80d74c:	81000017 	ldw	r4,0(r16)
  80d750:	9005883a 	mov	r2,r18
  80d754:	1ce7c83a 	sub	r19,r3,r19
  80d758:	25cf883a 	add	r7,r4,r23
  80d75c:	84c00215 	stw	r19,8(r16)
  80d760:	81c00015 	stw	r7,0(r16)
  80d764:	a0c00217 	ldw	r3,8(r20)
  80d768:	e0b9883a 	add	fp,fp,r2
  80d76c:	90a5c83a 	sub	r18,r18,r2
  80d770:	18a7c83a 	sub	r19,r3,r2
  80d774:	a4c00215 	stw	r19,8(r20)
  80d778:	983fce26 	beq	r19,zero,80d6b4 <__alt_mem_onchip_mem+0xff8056b4>
  80d77c:	80c0030b 	ldhu	r3,12(r16)
  80d780:	903fe61e 	bne	r18,zero,80d71c <__alt_mem_onchip_mem+0xff80571c>
  80d784:	8f000017 	ldw	fp,0(r17)
  80d788:	8c800117 	ldw	r18,4(r17)
  80d78c:	8c400204 	addi	r17,r17,8
  80d790:	003fe106 	br	80d718 <__alt_mem_onchip_mem+0xff805718>
  80d794:	8cc00017 	ldw	r19,0(r17)
  80d798:	8c800117 	ldw	r18,4(r17)
  80d79c:	8c400204 	addi	r17,r17,8
  80d7a0:	003fb306 	br	80d670 <__alt_mem_onchip_mem+0xff805670>
  80d7a4:	0005883a 	mov	r2,zero
  80d7a8:	f800283a 	ret
  80d7ac:	81000017 	ldw	r4,0(r16)
  80d7b0:	80800417 	ldw	r2,16(r16)
  80d7b4:	11005736 	bltu	r2,r4,80d914 <__sfvwrite_r+0x314>
  80d7b8:	85c00517 	ldw	r23,20(r16)
  80d7bc:	95c05536 	bltu	r18,r23,80d914 <__sfvwrite_r+0x314>
  80d7c0:	00a00034 	movhi	r2,32768
  80d7c4:	10bfffc4 	addi	r2,r2,-1
  80d7c8:	9009883a 	mov	r4,r18
  80d7cc:	1480012e 	bgeu	r2,r18,80d7d4 <__sfvwrite_r+0x1d4>
  80d7d0:	1009883a 	mov	r4,r2
  80d7d4:	b80b883a 	mov	r5,r23
  80d7d8:	0811c900 	call	811c90 <__divsi3>
  80d7dc:	15cf383a 	mul	r7,r2,r23
  80d7e0:	81400717 	ldw	r5,28(r16)
  80d7e4:	80800917 	ldw	r2,36(r16)
  80d7e8:	e00d883a 	mov	r6,fp
  80d7ec:	a809883a 	mov	r4,r21
  80d7f0:	103ee83a 	callr	r2
  80d7f4:	00bfdb16 	blt	zero,r2,80d764 <__alt_mem_onchip_mem+0xff805764>
  80d7f8:	8080030b 	ldhu	r2,12(r16)
  80d7fc:	10801014 	ori	r2,r2,64
  80d800:	8080030d 	sth	r2,12(r16)
  80d804:	00bfffc4 	movi	r2,-1
  80d808:	003fab06 	br	80d6b8 <__alt_mem_onchip_mem+0xff8056b8>
  80d80c:	0027883a 	mov	r19,zero
  80d810:	0011883a 	mov	r8,zero
  80d814:	0039883a 	mov	fp,zero
  80d818:	0025883a 	mov	r18,zero
  80d81c:	90001f26 	beq	r18,zero,80d89c <__sfvwrite_r+0x29c>
  80d820:	40005a26 	beq	r8,zero,80d98c <__sfvwrite_r+0x38c>
  80d824:	982d883a 	mov	r22,r19
  80d828:	94c0012e 	bgeu	r18,r19,80d830 <__sfvwrite_r+0x230>
  80d82c:	902d883a 	mov	r22,r18
  80d830:	81000017 	ldw	r4,0(r16)
  80d834:	80800417 	ldw	r2,16(r16)
  80d838:	b02f883a 	mov	r23,r22
  80d83c:	81c00517 	ldw	r7,20(r16)
  80d840:	1100032e 	bgeu	r2,r4,80d850 <__sfvwrite_r+0x250>
  80d844:	80c00217 	ldw	r3,8(r16)
  80d848:	38c7883a 	add	r3,r7,r3
  80d84c:	1d801816 	blt	r3,r22,80d8b0 <__sfvwrite_r+0x2b0>
  80d850:	b1c03e16 	blt	r22,r7,80d94c <__sfvwrite_r+0x34c>
  80d854:	80800917 	ldw	r2,36(r16)
  80d858:	81400717 	ldw	r5,28(r16)
  80d85c:	e00d883a 	mov	r6,fp
  80d860:	da000115 	stw	r8,4(sp)
  80d864:	a809883a 	mov	r4,r21
  80d868:	103ee83a 	callr	r2
  80d86c:	102f883a 	mov	r23,r2
  80d870:	da000117 	ldw	r8,4(sp)
  80d874:	00bfe00e 	bge	zero,r2,80d7f8 <__alt_mem_onchip_mem+0xff8057f8>
  80d878:	9de7c83a 	sub	r19,r19,r23
  80d87c:	98001f26 	beq	r19,zero,80d8fc <__sfvwrite_r+0x2fc>
  80d880:	a0800217 	ldw	r2,8(r20)
  80d884:	e5f9883a 	add	fp,fp,r23
  80d888:	95e5c83a 	sub	r18,r18,r23
  80d88c:	15efc83a 	sub	r23,r2,r23
  80d890:	a5c00215 	stw	r23,8(r20)
  80d894:	b83f8726 	beq	r23,zero,80d6b4 <__alt_mem_onchip_mem+0xff8056b4>
  80d898:	903fe11e 	bne	r18,zero,80d820 <__alt_mem_onchip_mem+0xff805820>
  80d89c:	8f000017 	ldw	fp,0(r17)
  80d8a0:	8c800117 	ldw	r18,4(r17)
  80d8a4:	0011883a 	mov	r8,zero
  80d8a8:	8c400204 	addi	r17,r17,8
  80d8ac:	003fdb06 	br	80d81c <__alt_mem_onchip_mem+0xff80581c>
  80d8b0:	180d883a 	mov	r6,r3
  80d8b4:	e00b883a 	mov	r5,fp
  80d8b8:	da000115 	stw	r8,4(sp)
  80d8bc:	d8c00015 	stw	r3,0(sp)
  80d8c0:	080de780 	call	80de78 <memmove>
  80d8c4:	d8c00017 	ldw	r3,0(sp)
  80d8c8:	80800017 	ldw	r2,0(r16)
  80d8cc:	800b883a 	mov	r5,r16
  80d8d0:	a809883a 	mov	r4,r21
  80d8d4:	10c5883a 	add	r2,r2,r3
  80d8d8:	80800015 	stw	r2,0(r16)
  80d8dc:	d8c00015 	stw	r3,0(sp)
  80d8e0:	08074380 	call	807438 <_fflush_r>
  80d8e4:	d8c00017 	ldw	r3,0(sp)
  80d8e8:	da000117 	ldw	r8,4(sp)
  80d8ec:	103fc21e 	bne	r2,zero,80d7f8 <__alt_mem_onchip_mem+0xff8057f8>
  80d8f0:	182f883a 	mov	r23,r3
  80d8f4:	9de7c83a 	sub	r19,r19,r23
  80d8f8:	983fe11e 	bne	r19,zero,80d880 <__alt_mem_onchip_mem+0xff805880>
  80d8fc:	800b883a 	mov	r5,r16
  80d900:	a809883a 	mov	r4,r21
  80d904:	08074380 	call	807438 <_fflush_r>
  80d908:	103fbb1e 	bne	r2,zero,80d7f8 <__alt_mem_onchip_mem+0xff8057f8>
  80d90c:	0011883a 	mov	r8,zero
  80d910:	003fdb06 	br	80d880 <__alt_mem_onchip_mem+0xff805880>
  80d914:	94c0012e 	bgeu	r18,r19,80d91c <__sfvwrite_r+0x31c>
  80d918:	9027883a 	mov	r19,r18
  80d91c:	980d883a 	mov	r6,r19
  80d920:	e00b883a 	mov	r5,fp
  80d924:	080de780 	call	80de78 <memmove>
  80d928:	80800217 	ldw	r2,8(r16)
  80d92c:	80c00017 	ldw	r3,0(r16)
  80d930:	14c5c83a 	sub	r2,r2,r19
  80d934:	1cc7883a 	add	r3,r3,r19
  80d938:	80800215 	stw	r2,8(r16)
  80d93c:	80c00015 	stw	r3,0(r16)
  80d940:	10004326 	beq	r2,zero,80da50 <__sfvwrite_r+0x450>
  80d944:	9805883a 	mov	r2,r19
  80d948:	003f8606 	br	80d764 <__alt_mem_onchip_mem+0xff805764>
  80d94c:	b00d883a 	mov	r6,r22
  80d950:	e00b883a 	mov	r5,fp
  80d954:	da000115 	stw	r8,4(sp)
  80d958:	080de780 	call	80de78 <memmove>
  80d95c:	80800217 	ldw	r2,8(r16)
  80d960:	80c00017 	ldw	r3,0(r16)
  80d964:	da000117 	ldw	r8,4(sp)
  80d968:	1585c83a 	sub	r2,r2,r22
  80d96c:	1dad883a 	add	r22,r3,r22
  80d970:	80800215 	stw	r2,8(r16)
  80d974:	85800015 	stw	r22,0(r16)
  80d978:	003fbf06 	br	80d878 <__alt_mem_onchip_mem+0xff805878>
  80d97c:	81000017 	ldw	r4,0(r16)
  80d980:	9027883a 	mov	r19,r18
  80d984:	902f883a 	mov	r23,r18
  80d988:	003f6c06 	br	80d73c <__alt_mem_onchip_mem+0xff80573c>
  80d98c:	900d883a 	mov	r6,r18
  80d990:	01400284 	movi	r5,10
  80d994:	e009883a 	mov	r4,fp
  80d998:	080dc4c0 	call	80dc4c <memchr>
  80d99c:	10003e26 	beq	r2,zero,80da98 <__sfvwrite_r+0x498>
  80d9a0:	10800044 	addi	r2,r2,1
  80d9a4:	1727c83a 	sub	r19,r2,fp
  80d9a8:	02000044 	movi	r8,1
  80d9ac:	003f9d06 	br	80d824 <__alt_mem_onchip_mem+0xff805824>
  80d9b0:	80800517 	ldw	r2,20(r16)
  80d9b4:	81400417 	ldw	r5,16(r16)
  80d9b8:	81c00017 	ldw	r7,0(r16)
  80d9bc:	10a7883a 	add	r19,r2,r2
  80d9c0:	9885883a 	add	r2,r19,r2
  80d9c4:	1026d7fa 	srli	r19,r2,31
  80d9c8:	396dc83a 	sub	r22,r7,r5
  80d9cc:	b1000044 	addi	r4,r22,1
  80d9d0:	9885883a 	add	r2,r19,r2
  80d9d4:	1027d07a 	srai	r19,r2,1
  80d9d8:	2485883a 	add	r2,r4,r18
  80d9dc:	980d883a 	mov	r6,r19
  80d9e0:	9880022e 	bgeu	r19,r2,80d9ec <__sfvwrite_r+0x3ec>
  80d9e4:	1027883a 	mov	r19,r2
  80d9e8:	100d883a 	mov	r6,r2
  80d9ec:	18c1000c 	andi	r3,r3,1024
  80d9f0:	18001c26 	beq	r3,zero,80da64 <__sfvwrite_r+0x464>
  80d9f4:	300b883a 	mov	r5,r6
  80d9f8:	a809883a 	mov	r4,r21
  80d9fc:	08086b00 	call	8086b0 <_malloc_r>
  80da00:	102f883a 	mov	r23,r2
  80da04:	10002926 	beq	r2,zero,80daac <__sfvwrite_r+0x4ac>
  80da08:	81400417 	ldw	r5,16(r16)
  80da0c:	b00d883a 	mov	r6,r22
  80da10:	1009883a 	mov	r4,r2
  80da14:	080dd300 	call	80dd30 <memcpy>
  80da18:	8080030b 	ldhu	r2,12(r16)
  80da1c:	00fedfc4 	movi	r3,-1153
  80da20:	10c4703a 	and	r2,r2,r3
  80da24:	10802014 	ori	r2,r2,128
  80da28:	8080030d 	sth	r2,12(r16)
  80da2c:	bd89883a 	add	r4,r23,r22
  80da30:	9d8fc83a 	sub	r7,r19,r22
  80da34:	85c00415 	stw	r23,16(r16)
  80da38:	84c00515 	stw	r19,20(r16)
  80da3c:	81000015 	stw	r4,0(r16)
  80da40:	9027883a 	mov	r19,r18
  80da44:	81c00215 	stw	r7,8(r16)
  80da48:	902f883a 	mov	r23,r18
  80da4c:	003f3b06 	br	80d73c <__alt_mem_onchip_mem+0xff80573c>
  80da50:	800b883a 	mov	r5,r16
  80da54:	a809883a 	mov	r4,r21
  80da58:	08074380 	call	807438 <_fflush_r>
  80da5c:	103fb926 	beq	r2,zero,80d944 <__alt_mem_onchip_mem+0xff805944>
  80da60:	003f6506 	br	80d7f8 <__alt_mem_onchip_mem+0xff8057f8>
  80da64:	a809883a 	mov	r4,r21
  80da68:	080f0300 	call	80f030 <_realloc_r>
  80da6c:	102f883a 	mov	r23,r2
  80da70:	103fee1e 	bne	r2,zero,80da2c <__alt_mem_onchip_mem+0xff805a2c>
  80da74:	81400417 	ldw	r5,16(r16)
  80da78:	a809883a 	mov	r4,r21
  80da7c:	0807b800 	call	807b80 <_free_r>
  80da80:	8080030b 	ldhu	r2,12(r16)
  80da84:	00ffdfc4 	movi	r3,-129
  80da88:	1884703a 	and	r2,r3,r2
  80da8c:	00c00304 	movi	r3,12
  80da90:	a8c00015 	stw	r3,0(r21)
  80da94:	003f5906 	br	80d7fc <__alt_mem_onchip_mem+0xff8057fc>
  80da98:	94c00044 	addi	r19,r18,1
  80da9c:	02000044 	movi	r8,1
  80daa0:	003f6006 	br	80d824 <__alt_mem_onchip_mem+0xff805824>
  80daa4:	00bfffc4 	movi	r2,-1
  80daa8:	003f0306 	br	80d6b8 <__alt_mem_onchip_mem+0xff8056b8>
  80daac:	00800304 	movi	r2,12
  80dab0:	a8800015 	stw	r2,0(r21)
  80dab4:	8080030b 	ldhu	r2,12(r16)
  80dab8:	003f5006 	br	80d7fc <__alt_mem_onchip_mem+0xff8057fc>

0080dabc <_isatty_r>:
  80dabc:	defffd04 	addi	sp,sp,-12
  80dac0:	dc000015 	stw	r16,0(sp)
  80dac4:	040020b4 	movhi	r16,130
  80dac8:	dc400115 	stw	r17,4(sp)
  80dacc:	842cd104 	addi	r16,r16,-19644
  80dad0:	2023883a 	mov	r17,r4
  80dad4:	2809883a 	mov	r4,r5
  80dad8:	dfc00215 	stw	ra,8(sp)
  80dadc:	80000015 	stw	zero,0(r16)
  80dae0:	08135000 	call	813500 <isatty>
  80dae4:	00ffffc4 	movi	r3,-1
  80dae8:	10c00526 	beq	r2,r3,80db00 <_isatty_r+0x44>
  80daec:	dfc00217 	ldw	ra,8(sp)
  80daf0:	dc400117 	ldw	r17,4(sp)
  80daf4:	dc000017 	ldw	r16,0(sp)
  80daf8:	dec00304 	addi	sp,sp,12
  80dafc:	f800283a 	ret
  80db00:	80c00017 	ldw	r3,0(r16)
  80db04:	183ff926 	beq	r3,zero,80daec <__alt_mem_onchip_mem+0xff805aec>
  80db08:	88c00015 	stw	r3,0(r17)
  80db0c:	003ff706 	br	80daec <__alt_mem_onchip_mem+0xff805aec>

0080db10 <_setlocale_r>:
  80db10:	30001b26 	beq	r6,zero,80db80 <_setlocale_r+0x70>
  80db14:	01402074 	movhi	r5,129
  80db18:	defffe04 	addi	sp,sp,-8
  80db1c:	295d3404 	addi	r5,r5,29904
  80db20:	3009883a 	mov	r4,r6
  80db24:	dc000015 	stw	r16,0(sp)
  80db28:	dfc00115 	stw	ra,4(sp)
  80db2c:	3021883a 	mov	r16,r6
  80db30:	080f6080 	call	80f608 <strcmp>
  80db34:	1000061e 	bne	r2,zero,80db50 <_setlocale_r+0x40>
  80db38:	00802074 	movhi	r2,129
  80db3c:	109d1504 	addi	r2,r2,29780
  80db40:	dfc00117 	ldw	ra,4(sp)
  80db44:	dc000017 	ldw	r16,0(sp)
  80db48:	dec00204 	addi	sp,sp,8
  80db4c:	f800283a 	ret
  80db50:	01402074 	movhi	r5,129
  80db54:	295d1504 	addi	r5,r5,29780
  80db58:	8009883a 	mov	r4,r16
  80db5c:	080f6080 	call	80f608 <strcmp>
  80db60:	103ff526 	beq	r2,zero,80db38 <__alt_mem_onchip_mem+0xff805b38>
  80db64:	01402074 	movhi	r5,129
  80db68:	295d1f04 	addi	r5,r5,29820
  80db6c:	8009883a 	mov	r4,r16
  80db70:	080f6080 	call	80f608 <strcmp>
  80db74:	103ff026 	beq	r2,zero,80db38 <__alt_mem_onchip_mem+0xff805b38>
  80db78:	0005883a 	mov	r2,zero
  80db7c:	003ff006 	br	80db40 <__alt_mem_onchip_mem+0xff805b40>
  80db80:	00802074 	movhi	r2,129
  80db84:	109d1504 	addi	r2,r2,29780
  80db88:	f800283a 	ret

0080db8c <__locale_charset>:
  80db8c:	008020b4 	movhi	r2,130
  80db90:	10a04c04 	addi	r2,r2,-32464
  80db94:	f800283a 	ret

0080db98 <__locale_mb_cur_max>:
  80db98:	008020b4 	movhi	r2,130
  80db9c:	10a56904 	addi	r2,r2,-27228
  80dba0:	10800017 	ldw	r2,0(r2)
  80dba4:	f800283a 	ret

0080dba8 <__locale_msgcharset>:
  80dba8:	008020b4 	movhi	r2,130
  80dbac:	10a04404 	addi	r2,r2,-32496
  80dbb0:	f800283a 	ret

0080dbb4 <__locale_cjk_lang>:
  80dbb4:	0005883a 	mov	r2,zero
  80dbb8:	f800283a 	ret

0080dbbc <_localeconv_r>:
  80dbbc:	008020b4 	movhi	r2,130
  80dbc0:	10a05404 	addi	r2,r2,-32432
  80dbc4:	f800283a 	ret

0080dbc8 <setlocale>:
  80dbc8:	008020b4 	movhi	r2,130
  80dbcc:	10a56604 	addi	r2,r2,-27240
  80dbd0:	280d883a 	mov	r6,r5
  80dbd4:	200b883a 	mov	r5,r4
  80dbd8:	11000017 	ldw	r4,0(r2)
  80dbdc:	080db101 	jmpi	80db10 <_setlocale_r>

0080dbe0 <localeconv>:
  80dbe0:	008020b4 	movhi	r2,130
  80dbe4:	10a05404 	addi	r2,r2,-32432
  80dbe8:	f800283a 	ret

0080dbec <_lseek_r>:
  80dbec:	defffd04 	addi	sp,sp,-12
  80dbf0:	2805883a 	mov	r2,r5
  80dbf4:	dc000015 	stw	r16,0(sp)
  80dbf8:	040020b4 	movhi	r16,130
  80dbfc:	dc400115 	stw	r17,4(sp)
  80dc00:	300b883a 	mov	r5,r6
  80dc04:	842cd104 	addi	r16,r16,-19644
  80dc08:	2023883a 	mov	r17,r4
  80dc0c:	380d883a 	mov	r6,r7
  80dc10:	1009883a 	mov	r4,r2
  80dc14:	dfc00215 	stw	ra,8(sp)
  80dc18:	80000015 	stw	zero,0(r16)
  80dc1c:	08136cc0 	call	8136cc <lseek>
  80dc20:	00ffffc4 	movi	r3,-1
  80dc24:	10c00526 	beq	r2,r3,80dc3c <_lseek_r+0x50>
  80dc28:	dfc00217 	ldw	ra,8(sp)
  80dc2c:	dc400117 	ldw	r17,4(sp)
  80dc30:	dc000017 	ldw	r16,0(sp)
  80dc34:	dec00304 	addi	sp,sp,12
  80dc38:	f800283a 	ret
  80dc3c:	80c00017 	ldw	r3,0(r16)
  80dc40:	183ff926 	beq	r3,zero,80dc28 <__alt_mem_onchip_mem+0xff805c28>
  80dc44:	88c00015 	stw	r3,0(r17)
  80dc48:	003ff706 	br	80dc28 <__alt_mem_onchip_mem+0xff805c28>

0080dc4c <memchr>:
  80dc4c:	208000cc 	andi	r2,r4,3
  80dc50:	280f883a 	mov	r7,r5
  80dc54:	10003426 	beq	r2,zero,80dd28 <memchr+0xdc>
  80dc58:	30bfffc4 	addi	r2,r6,-1
  80dc5c:	30001a26 	beq	r6,zero,80dcc8 <memchr+0x7c>
  80dc60:	20c00003 	ldbu	r3,0(r4)
  80dc64:	29803fcc 	andi	r6,r5,255
  80dc68:	30c0051e 	bne	r6,r3,80dc80 <memchr+0x34>
  80dc6c:	00001806 	br	80dcd0 <memchr+0x84>
  80dc70:	10001526 	beq	r2,zero,80dcc8 <memchr+0x7c>
  80dc74:	20c00003 	ldbu	r3,0(r4)
  80dc78:	10bfffc4 	addi	r2,r2,-1
  80dc7c:	30c01426 	beq	r6,r3,80dcd0 <memchr+0x84>
  80dc80:	21000044 	addi	r4,r4,1
  80dc84:	20c000cc 	andi	r3,r4,3
  80dc88:	183ff91e 	bne	r3,zero,80dc70 <__alt_mem_onchip_mem+0xff805c70>
  80dc8c:	020000c4 	movi	r8,3
  80dc90:	40801136 	bltu	r8,r2,80dcd8 <memchr+0x8c>
  80dc94:	10000c26 	beq	r2,zero,80dcc8 <memchr+0x7c>
  80dc98:	20c00003 	ldbu	r3,0(r4)
  80dc9c:	29403fcc 	andi	r5,r5,255
  80dca0:	28c00b26 	beq	r5,r3,80dcd0 <memchr+0x84>
  80dca4:	20c00044 	addi	r3,r4,1
  80dca8:	39803fcc 	andi	r6,r7,255
  80dcac:	2089883a 	add	r4,r4,r2
  80dcb0:	00000306 	br	80dcc0 <memchr+0x74>
  80dcb4:	18c00044 	addi	r3,r3,1
  80dcb8:	197fffc3 	ldbu	r5,-1(r3)
  80dcbc:	31400526 	beq	r6,r5,80dcd4 <memchr+0x88>
  80dcc0:	1805883a 	mov	r2,r3
  80dcc4:	20fffb1e 	bne	r4,r3,80dcb4 <__alt_mem_onchip_mem+0xff805cb4>
  80dcc8:	0005883a 	mov	r2,zero
  80dccc:	f800283a 	ret
  80dcd0:	2005883a 	mov	r2,r4
  80dcd4:	f800283a 	ret
  80dcd8:	28c03fcc 	andi	r3,r5,255
  80dcdc:	1812923a 	slli	r9,r3,8
  80dce0:	02ffbff4 	movhi	r11,65279
  80dce4:	02a02074 	movhi	r10,32897
  80dce8:	48d2b03a 	or	r9,r9,r3
  80dcec:	4806943a 	slli	r3,r9,16
  80dcf0:	5affbfc4 	addi	r11,r11,-257
  80dcf4:	52a02004 	addi	r10,r10,-32640
  80dcf8:	48d2b03a 	or	r9,r9,r3
  80dcfc:	20c00017 	ldw	r3,0(r4)
  80dd00:	48c6f03a 	xor	r3,r9,r3
  80dd04:	1acd883a 	add	r6,r3,r11
  80dd08:	00c6303a 	nor	r3,zero,r3
  80dd0c:	30c6703a 	and	r3,r6,r3
  80dd10:	1a86703a 	and	r3,r3,r10
  80dd14:	183fe01e 	bne	r3,zero,80dc98 <__alt_mem_onchip_mem+0xff805c98>
  80dd18:	10bfff04 	addi	r2,r2,-4
  80dd1c:	21000104 	addi	r4,r4,4
  80dd20:	40bff636 	bltu	r8,r2,80dcfc <__alt_mem_onchip_mem+0xff805cfc>
  80dd24:	003fdb06 	br	80dc94 <__alt_mem_onchip_mem+0xff805c94>
  80dd28:	3005883a 	mov	r2,r6
  80dd2c:	003fd706 	br	80dc8c <__alt_mem_onchip_mem+0xff805c8c>

0080dd30 <memcpy>:
  80dd30:	defffd04 	addi	sp,sp,-12
  80dd34:	dfc00215 	stw	ra,8(sp)
  80dd38:	dc400115 	stw	r17,4(sp)
  80dd3c:	dc000015 	stw	r16,0(sp)
  80dd40:	00c003c4 	movi	r3,15
  80dd44:	2005883a 	mov	r2,r4
  80dd48:	1980452e 	bgeu	r3,r6,80de60 <memcpy+0x130>
  80dd4c:	2906b03a 	or	r3,r5,r4
  80dd50:	18c000cc 	andi	r3,r3,3
  80dd54:	1800441e 	bne	r3,zero,80de68 <memcpy+0x138>
  80dd58:	347ffc04 	addi	r17,r6,-16
  80dd5c:	8822d13a 	srli	r17,r17,4
  80dd60:	28c00104 	addi	r3,r5,4
  80dd64:	23400104 	addi	r13,r4,4
  80dd68:	8820913a 	slli	r16,r17,4
  80dd6c:	2b000204 	addi	r12,r5,8
  80dd70:	22c00204 	addi	r11,r4,8
  80dd74:	84000504 	addi	r16,r16,20
  80dd78:	2a800304 	addi	r10,r5,12
  80dd7c:	22400304 	addi	r9,r4,12
  80dd80:	2c21883a 	add	r16,r5,r16
  80dd84:	2811883a 	mov	r8,r5
  80dd88:	200f883a 	mov	r7,r4
  80dd8c:	41000017 	ldw	r4,0(r8)
  80dd90:	1fc00017 	ldw	ra,0(r3)
  80dd94:	63c00017 	ldw	r15,0(r12)
  80dd98:	39000015 	stw	r4,0(r7)
  80dd9c:	53800017 	ldw	r14,0(r10)
  80dda0:	6fc00015 	stw	ra,0(r13)
  80dda4:	5bc00015 	stw	r15,0(r11)
  80dda8:	4b800015 	stw	r14,0(r9)
  80ddac:	18c00404 	addi	r3,r3,16
  80ddb0:	39c00404 	addi	r7,r7,16
  80ddb4:	42000404 	addi	r8,r8,16
  80ddb8:	6b400404 	addi	r13,r13,16
  80ddbc:	63000404 	addi	r12,r12,16
  80ddc0:	5ac00404 	addi	r11,r11,16
  80ddc4:	52800404 	addi	r10,r10,16
  80ddc8:	4a400404 	addi	r9,r9,16
  80ddcc:	1c3fef1e 	bne	r3,r16,80dd8c <__alt_mem_onchip_mem+0xff805d8c>
  80ddd0:	89c00044 	addi	r7,r17,1
  80ddd4:	380e913a 	slli	r7,r7,4
  80ddd8:	310003cc 	andi	r4,r6,15
  80dddc:	02c000c4 	movi	r11,3
  80dde0:	11c7883a 	add	r3,r2,r7
  80dde4:	29cb883a 	add	r5,r5,r7
  80dde8:	5900212e 	bgeu	r11,r4,80de70 <memcpy+0x140>
  80ddec:	1813883a 	mov	r9,r3
  80ddf0:	2811883a 	mov	r8,r5
  80ddf4:	200f883a 	mov	r7,r4
  80ddf8:	42800017 	ldw	r10,0(r8)
  80ddfc:	4a400104 	addi	r9,r9,4
  80de00:	39ffff04 	addi	r7,r7,-4
  80de04:	4abfff15 	stw	r10,-4(r9)
  80de08:	42000104 	addi	r8,r8,4
  80de0c:	59fffa36 	bltu	r11,r7,80ddf8 <__alt_mem_onchip_mem+0xff805df8>
  80de10:	213fff04 	addi	r4,r4,-4
  80de14:	2008d0ba 	srli	r4,r4,2
  80de18:	318000cc 	andi	r6,r6,3
  80de1c:	21000044 	addi	r4,r4,1
  80de20:	2109883a 	add	r4,r4,r4
  80de24:	2109883a 	add	r4,r4,r4
  80de28:	1907883a 	add	r3,r3,r4
  80de2c:	290b883a 	add	r5,r5,r4
  80de30:	30000626 	beq	r6,zero,80de4c <memcpy+0x11c>
  80de34:	198d883a 	add	r6,r3,r6
  80de38:	29c00003 	ldbu	r7,0(r5)
  80de3c:	18c00044 	addi	r3,r3,1
  80de40:	29400044 	addi	r5,r5,1
  80de44:	19ffffc5 	stb	r7,-1(r3)
  80de48:	19bffb1e 	bne	r3,r6,80de38 <__alt_mem_onchip_mem+0xff805e38>
  80de4c:	dfc00217 	ldw	ra,8(sp)
  80de50:	dc400117 	ldw	r17,4(sp)
  80de54:	dc000017 	ldw	r16,0(sp)
  80de58:	dec00304 	addi	sp,sp,12
  80de5c:	f800283a 	ret
  80de60:	2007883a 	mov	r3,r4
  80de64:	003ff206 	br	80de30 <__alt_mem_onchip_mem+0xff805e30>
  80de68:	2007883a 	mov	r3,r4
  80de6c:	003ff106 	br	80de34 <__alt_mem_onchip_mem+0xff805e34>
  80de70:	200d883a 	mov	r6,r4
  80de74:	003fee06 	br	80de30 <__alt_mem_onchip_mem+0xff805e30>

0080de78 <memmove>:
  80de78:	2005883a 	mov	r2,r4
  80de7c:	29000b2e 	bgeu	r5,r4,80deac <memmove+0x34>
  80de80:	298f883a 	add	r7,r5,r6
  80de84:	21c0092e 	bgeu	r4,r7,80deac <memmove+0x34>
  80de88:	2187883a 	add	r3,r4,r6
  80de8c:	198bc83a 	sub	r5,r3,r6
  80de90:	30004826 	beq	r6,zero,80dfb4 <memmove+0x13c>
  80de94:	39ffffc4 	addi	r7,r7,-1
  80de98:	39000003 	ldbu	r4,0(r7)
  80de9c:	18ffffc4 	addi	r3,r3,-1
  80dea0:	19000005 	stb	r4,0(r3)
  80dea4:	28fffb1e 	bne	r5,r3,80de94 <__alt_mem_onchip_mem+0xff805e94>
  80dea8:	f800283a 	ret
  80deac:	00c003c4 	movi	r3,15
  80deb0:	1980412e 	bgeu	r3,r6,80dfb8 <memmove+0x140>
  80deb4:	2886b03a 	or	r3,r5,r2
  80deb8:	18c000cc 	andi	r3,r3,3
  80debc:	1800401e 	bne	r3,zero,80dfc0 <memmove+0x148>
  80dec0:	33fffc04 	addi	r15,r6,-16
  80dec4:	781ed13a 	srli	r15,r15,4
  80dec8:	28c00104 	addi	r3,r5,4
  80decc:	13400104 	addi	r13,r2,4
  80ded0:	781c913a 	slli	r14,r15,4
  80ded4:	2b000204 	addi	r12,r5,8
  80ded8:	12c00204 	addi	r11,r2,8
  80dedc:	73800504 	addi	r14,r14,20
  80dee0:	2a800304 	addi	r10,r5,12
  80dee4:	12400304 	addi	r9,r2,12
  80dee8:	2b9d883a 	add	r14,r5,r14
  80deec:	2811883a 	mov	r8,r5
  80def0:	100f883a 	mov	r7,r2
  80def4:	41000017 	ldw	r4,0(r8)
  80def8:	39c00404 	addi	r7,r7,16
  80defc:	18c00404 	addi	r3,r3,16
  80df00:	393ffc15 	stw	r4,-16(r7)
  80df04:	193ffc17 	ldw	r4,-16(r3)
  80df08:	6b400404 	addi	r13,r13,16
  80df0c:	5ac00404 	addi	r11,r11,16
  80df10:	693ffc15 	stw	r4,-16(r13)
  80df14:	61000017 	ldw	r4,0(r12)
  80df18:	4a400404 	addi	r9,r9,16
  80df1c:	42000404 	addi	r8,r8,16
  80df20:	593ffc15 	stw	r4,-16(r11)
  80df24:	51000017 	ldw	r4,0(r10)
  80df28:	63000404 	addi	r12,r12,16
  80df2c:	52800404 	addi	r10,r10,16
  80df30:	493ffc15 	stw	r4,-16(r9)
  80df34:	1bbfef1e 	bne	r3,r14,80def4 <__alt_mem_onchip_mem+0xff805ef4>
  80df38:	79000044 	addi	r4,r15,1
  80df3c:	2008913a 	slli	r4,r4,4
  80df40:	328003cc 	andi	r10,r6,15
  80df44:	02c000c4 	movi	r11,3
  80df48:	1107883a 	add	r3,r2,r4
  80df4c:	290b883a 	add	r5,r5,r4
  80df50:	5a801e2e 	bgeu	r11,r10,80dfcc <memmove+0x154>
  80df54:	1813883a 	mov	r9,r3
  80df58:	2811883a 	mov	r8,r5
  80df5c:	500f883a 	mov	r7,r10
  80df60:	41000017 	ldw	r4,0(r8)
  80df64:	4a400104 	addi	r9,r9,4
  80df68:	39ffff04 	addi	r7,r7,-4
  80df6c:	493fff15 	stw	r4,-4(r9)
  80df70:	42000104 	addi	r8,r8,4
  80df74:	59fffa36 	bltu	r11,r7,80df60 <__alt_mem_onchip_mem+0xff805f60>
  80df78:	513fff04 	addi	r4,r10,-4
  80df7c:	2008d0ba 	srli	r4,r4,2
  80df80:	318000cc 	andi	r6,r6,3
  80df84:	21000044 	addi	r4,r4,1
  80df88:	2109883a 	add	r4,r4,r4
  80df8c:	2109883a 	add	r4,r4,r4
  80df90:	1907883a 	add	r3,r3,r4
  80df94:	290b883a 	add	r5,r5,r4
  80df98:	30000b26 	beq	r6,zero,80dfc8 <memmove+0x150>
  80df9c:	198d883a 	add	r6,r3,r6
  80dfa0:	29c00003 	ldbu	r7,0(r5)
  80dfa4:	18c00044 	addi	r3,r3,1
  80dfa8:	29400044 	addi	r5,r5,1
  80dfac:	19ffffc5 	stb	r7,-1(r3)
  80dfb0:	19bffb1e 	bne	r3,r6,80dfa0 <__alt_mem_onchip_mem+0xff805fa0>
  80dfb4:	f800283a 	ret
  80dfb8:	1007883a 	mov	r3,r2
  80dfbc:	003ff606 	br	80df98 <__alt_mem_onchip_mem+0xff805f98>
  80dfc0:	1007883a 	mov	r3,r2
  80dfc4:	003ff506 	br	80df9c <__alt_mem_onchip_mem+0xff805f9c>
  80dfc8:	f800283a 	ret
  80dfcc:	500d883a 	mov	r6,r10
  80dfd0:	003ff106 	br	80df98 <__alt_mem_onchip_mem+0xff805f98>

0080dfd4 <_Balloc>:
  80dfd4:	20801317 	ldw	r2,76(r4)
  80dfd8:	defffc04 	addi	sp,sp,-16
  80dfdc:	dc400115 	stw	r17,4(sp)
  80dfe0:	dc000015 	stw	r16,0(sp)
  80dfe4:	dfc00315 	stw	ra,12(sp)
  80dfe8:	dc800215 	stw	r18,8(sp)
  80dfec:	2023883a 	mov	r17,r4
  80dff0:	2821883a 	mov	r16,r5
  80dff4:	10000f26 	beq	r2,zero,80e034 <_Balloc+0x60>
  80dff8:	8407883a 	add	r3,r16,r16
  80dffc:	18c7883a 	add	r3,r3,r3
  80e000:	10c7883a 	add	r3,r2,r3
  80e004:	18800017 	ldw	r2,0(r3)
  80e008:	10001126 	beq	r2,zero,80e050 <_Balloc+0x7c>
  80e00c:	11000017 	ldw	r4,0(r2)
  80e010:	19000015 	stw	r4,0(r3)
  80e014:	10000415 	stw	zero,16(r2)
  80e018:	10000315 	stw	zero,12(r2)
  80e01c:	dfc00317 	ldw	ra,12(sp)
  80e020:	dc800217 	ldw	r18,8(sp)
  80e024:	dc400117 	ldw	r17,4(sp)
  80e028:	dc000017 	ldw	r16,0(sp)
  80e02c:	dec00404 	addi	sp,sp,16
  80e030:	f800283a 	ret
  80e034:	01800844 	movi	r6,33
  80e038:	01400104 	movi	r5,4
  80e03c:	0810d2c0 	call	810d2c <_calloc_r>
  80e040:	88801315 	stw	r2,76(r17)
  80e044:	103fec1e 	bne	r2,zero,80dff8 <__alt_mem_onchip_mem+0xff805ff8>
  80e048:	0005883a 	mov	r2,zero
  80e04c:	003ff306 	br	80e01c <__alt_mem_onchip_mem+0xff80601c>
  80e050:	01400044 	movi	r5,1
  80e054:	2c24983a 	sll	r18,r5,r16
  80e058:	8809883a 	mov	r4,r17
  80e05c:	91800144 	addi	r6,r18,5
  80e060:	318d883a 	add	r6,r6,r6
  80e064:	318d883a 	add	r6,r6,r6
  80e068:	0810d2c0 	call	810d2c <_calloc_r>
  80e06c:	103ff626 	beq	r2,zero,80e048 <__alt_mem_onchip_mem+0xff806048>
  80e070:	14000115 	stw	r16,4(r2)
  80e074:	14800215 	stw	r18,8(r2)
  80e078:	003fe606 	br	80e014 <__alt_mem_onchip_mem+0xff806014>

0080e07c <_Bfree>:
  80e07c:	28000826 	beq	r5,zero,80e0a0 <_Bfree+0x24>
  80e080:	28c00117 	ldw	r3,4(r5)
  80e084:	20801317 	ldw	r2,76(r4)
  80e088:	18c7883a 	add	r3,r3,r3
  80e08c:	18c7883a 	add	r3,r3,r3
  80e090:	10c5883a 	add	r2,r2,r3
  80e094:	10c00017 	ldw	r3,0(r2)
  80e098:	28c00015 	stw	r3,0(r5)
  80e09c:	11400015 	stw	r5,0(r2)
  80e0a0:	f800283a 	ret

0080e0a4 <__multadd>:
  80e0a4:	defffa04 	addi	sp,sp,-24
  80e0a8:	dc800315 	stw	r18,12(sp)
  80e0ac:	dc400215 	stw	r17,8(sp)
  80e0b0:	dc000115 	stw	r16,4(sp)
  80e0b4:	2823883a 	mov	r17,r5
  80e0b8:	2c000417 	ldw	r16,16(r5)
  80e0bc:	dfc00515 	stw	ra,20(sp)
  80e0c0:	dcc00415 	stw	r19,16(sp)
  80e0c4:	2025883a 	mov	r18,r4
  80e0c8:	29400504 	addi	r5,r5,20
  80e0cc:	0011883a 	mov	r8,zero
  80e0d0:	28c00017 	ldw	r3,0(r5)
  80e0d4:	29400104 	addi	r5,r5,4
  80e0d8:	42000044 	addi	r8,r8,1
  80e0dc:	18bfffcc 	andi	r2,r3,65535
  80e0e0:	1185383a 	mul	r2,r2,r6
  80e0e4:	1806d43a 	srli	r3,r3,16
  80e0e8:	11cf883a 	add	r7,r2,r7
  80e0ec:	3808d43a 	srli	r4,r7,16
  80e0f0:	1987383a 	mul	r3,r3,r6
  80e0f4:	38bfffcc 	andi	r2,r7,65535
  80e0f8:	1907883a 	add	r3,r3,r4
  80e0fc:	1808943a 	slli	r4,r3,16
  80e100:	180ed43a 	srli	r7,r3,16
  80e104:	2085883a 	add	r2,r4,r2
  80e108:	28bfff15 	stw	r2,-4(r5)
  80e10c:	443ff016 	blt	r8,r16,80e0d0 <__alt_mem_onchip_mem+0xff8060d0>
  80e110:	38000926 	beq	r7,zero,80e138 <__multadd+0x94>
  80e114:	88800217 	ldw	r2,8(r17)
  80e118:	80800f0e 	bge	r16,r2,80e158 <__multadd+0xb4>
  80e11c:	80800144 	addi	r2,r16,5
  80e120:	1085883a 	add	r2,r2,r2
  80e124:	1085883a 	add	r2,r2,r2
  80e128:	8885883a 	add	r2,r17,r2
  80e12c:	11c00015 	stw	r7,0(r2)
  80e130:	84000044 	addi	r16,r16,1
  80e134:	8c000415 	stw	r16,16(r17)
  80e138:	8805883a 	mov	r2,r17
  80e13c:	dfc00517 	ldw	ra,20(sp)
  80e140:	dcc00417 	ldw	r19,16(sp)
  80e144:	dc800317 	ldw	r18,12(sp)
  80e148:	dc400217 	ldw	r17,8(sp)
  80e14c:	dc000117 	ldw	r16,4(sp)
  80e150:	dec00604 	addi	sp,sp,24
  80e154:	f800283a 	ret
  80e158:	89400117 	ldw	r5,4(r17)
  80e15c:	9009883a 	mov	r4,r18
  80e160:	d9c00015 	stw	r7,0(sp)
  80e164:	29400044 	addi	r5,r5,1
  80e168:	080dfd40 	call	80dfd4 <_Balloc>
  80e16c:	89800417 	ldw	r6,16(r17)
  80e170:	89400304 	addi	r5,r17,12
  80e174:	11000304 	addi	r4,r2,12
  80e178:	31800084 	addi	r6,r6,2
  80e17c:	318d883a 	add	r6,r6,r6
  80e180:	318d883a 	add	r6,r6,r6
  80e184:	1027883a 	mov	r19,r2
  80e188:	080dd300 	call	80dd30 <memcpy>
  80e18c:	d9c00017 	ldw	r7,0(sp)
  80e190:	88000a26 	beq	r17,zero,80e1bc <__multadd+0x118>
  80e194:	88c00117 	ldw	r3,4(r17)
  80e198:	90801317 	ldw	r2,76(r18)
  80e19c:	18c7883a 	add	r3,r3,r3
  80e1a0:	18c7883a 	add	r3,r3,r3
  80e1a4:	10c5883a 	add	r2,r2,r3
  80e1a8:	10c00017 	ldw	r3,0(r2)
  80e1ac:	88c00015 	stw	r3,0(r17)
  80e1b0:	14400015 	stw	r17,0(r2)
  80e1b4:	9823883a 	mov	r17,r19
  80e1b8:	003fd806 	br	80e11c <__alt_mem_onchip_mem+0xff80611c>
  80e1bc:	9823883a 	mov	r17,r19
  80e1c0:	003fd606 	br	80e11c <__alt_mem_onchip_mem+0xff80611c>

0080e1c4 <__s2b>:
  80e1c4:	defff904 	addi	sp,sp,-28
  80e1c8:	dc400115 	stw	r17,4(sp)
  80e1cc:	dc000015 	stw	r16,0(sp)
  80e1d0:	2023883a 	mov	r17,r4
  80e1d4:	2821883a 	mov	r16,r5
  80e1d8:	39000204 	addi	r4,r7,8
  80e1dc:	01400244 	movi	r5,9
  80e1e0:	dcc00315 	stw	r19,12(sp)
  80e1e4:	dc800215 	stw	r18,8(sp)
  80e1e8:	dfc00615 	stw	ra,24(sp)
  80e1ec:	dd400515 	stw	r21,20(sp)
  80e1f0:	dd000415 	stw	r20,16(sp)
  80e1f4:	3825883a 	mov	r18,r7
  80e1f8:	3027883a 	mov	r19,r6
  80e1fc:	0811c900 	call	811c90 <__divsi3>
  80e200:	00c00044 	movi	r3,1
  80e204:	000b883a 	mov	r5,zero
  80e208:	1880030e 	bge	r3,r2,80e218 <__s2b+0x54>
  80e20c:	18c7883a 	add	r3,r3,r3
  80e210:	29400044 	addi	r5,r5,1
  80e214:	18bffd16 	blt	r3,r2,80e20c <__alt_mem_onchip_mem+0xff80620c>
  80e218:	8809883a 	mov	r4,r17
  80e21c:	080dfd40 	call	80dfd4 <_Balloc>
  80e220:	d8c00717 	ldw	r3,28(sp)
  80e224:	10c00515 	stw	r3,20(r2)
  80e228:	00c00044 	movi	r3,1
  80e22c:	10c00415 	stw	r3,16(r2)
  80e230:	00c00244 	movi	r3,9
  80e234:	1cc0210e 	bge	r3,r19,80e2bc <__s2b+0xf8>
  80e238:	80eb883a 	add	r21,r16,r3
  80e23c:	a829883a 	mov	r20,r21
  80e240:	84e1883a 	add	r16,r16,r19
  80e244:	a1c00007 	ldb	r7,0(r20)
  80e248:	01800284 	movi	r6,10
  80e24c:	a5000044 	addi	r20,r20,1
  80e250:	100b883a 	mov	r5,r2
  80e254:	39fff404 	addi	r7,r7,-48
  80e258:	8809883a 	mov	r4,r17
  80e25c:	080e0a40 	call	80e0a4 <__multadd>
  80e260:	a43ff81e 	bne	r20,r16,80e244 <__alt_mem_onchip_mem+0xff806244>
  80e264:	ace1883a 	add	r16,r21,r19
  80e268:	843ffe04 	addi	r16,r16,-8
  80e26c:	9c800a0e 	bge	r19,r18,80e298 <__s2b+0xd4>
  80e270:	94e5c83a 	sub	r18,r18,r19
  80e274:	84a5883a 	add	r18,r16,r18
  80e278:	81c00007 	ldb	r7,0(r16)
  80e27c:	01800284 	movi	r6,10
  80e280:	84000044 	addi	r16,r16,1
  80e284:	100b883a 	mov	r5,r2
  80e288:	39fff404 	addi	r7,r7,-48
  80e28c:	8809883a 	mov	r4,r17
  80e290:	080e0a40 	call	80e0a4 <__multadd>
  80e294:	84bff81e 	bne	r16,r18,80e278 <__alt_mem_onchip_mem+0xff806278>
  80e298:	dfc00617 	ldw	ra,24(sp)
  80e29c:	dd400517 	ldw	r21,20(sp)
  80e2a0:	dd000417 	ldw	r20,16(sp)
  80e2a4:	dcc00317 	ldw	r19,12(sp)
  80e2a8:	dc800217 	ldw	r18,8(sp)
  80e2ac:	dc400117 	ldw	r17,4(sp)
  80e2b0:	dc000017 	ldw	r16,0(sp)
  80e2b4:	dec00704 	addi	sp,sp,28
  80e2b8:	f800283a 	ret
  80e2bc:	84000284 	addi	r16,r16,10
  80e2c0:	1827883a 	mov	r19,r3
  80e2c4:	003fe906 	br	80e26c <__alt_mem_onchip_mem+0xff80626c>

0080e2c8 <__hi0bits>:
  80e2c8:	20bfffec 	andhi	r2,r4,65535
  80e2cc:	1000141e 	bne	r2,zero,80e320 <__hi0bits+0x58>
  80e2d0:	2008943a 	slli	r4,r4,16
  80e2d4:	00800404 	movi	r2,16
  80e2d8:	20ffc02c 	andhi	r3,r4,65280
  80e2dc:	1800021e 	bne	r3,zero,80e2e8 <__hi0bits+0x20>
  80e2e0:	2008923a 	slli	r4,r4,8
  80e2e4:	10800204 	addi	r2,r2,8
  80e2e8:	20fc002c 	andhi	r3,r4,61440
  80e2ec:	1800021e 	bne	r3,zero,80e2f8 <__hi0bits+0x30>
  80e2f0:	2008913a 	slli	r4,r4,4
  80e2f4:	10800104 	addi	r2,r2,4
  80e2f8:	20f0002c 	andhi	r3,r4,49152
  80e2fc:	1800031e 	bne	r3,zero,80e30c <__hi0bits+0x44>
  80e300:	2109883a 	add	r4,r4,r4
  80e304:	10800084 	addi	r2,r2,2
  80e308:	2109883a 	add	r4,r4,r4
  80e30c:	20000316 	blt	r4,zero,80e31c <__hi0bits+0x54>
  80e310:	2110002c 	andhi	r4,r4,16384
  80e314:	2000041e 	bne	r4,zero,80e328 <__hi0bits+0x60>
  80e318:	00800804 	movi	r2,32
  80e31c:	f800283a 	ret
  80e320:	0005883a 	mov	r2,zero
  80e324:	003fec06 	br	80e2d8 <__alt_mem_onchip_mem+0xff8062d8>
  80e328:	10800044 	addi	r2,r2,1
  80e32c:	f800283a 	ret

0080e330 <__lo0bits>:
  80e330:	20c00017 	ldw	r3,0(r4)
  80e334:	188001cc 	andi	r2,r3,7
  80e338:	10000826 	beq	r2,zero,80e35c <__lo0bits+0x2c>
  80e33c:	1880004c 	andi	r2,r3,1
  80e340:	1000211e 	bne	r2,zero,80e3c8 <__lo0bits+0x98>
  80e344:	1880008c 	andi	r2,r3,2
  80e348:	1000211e 	bne	r2,zero,80e3d0 <__lo0bits+0xa0>
  80e34c:	1806d0ba 	srli	r3,r3,2
  80e350:	00800084 	movi	r2,2
  80e354:	20c00015 	stw	r3,0(r4)
  80e358:	f800283a 	ret
  80e35c:	18bfffcc 	andi	r2,r3,65535
  80e360:	10001326 	beq	r2,zero,80e3b0 <__lo0bits+0x80>
  80e364:	0005883a 	mov	r2,zero
  80e368:	19403fcc 	andi	r5,r3,255
  80e36c:	2800021e 	bne	r5,zero,80e378 <__lo0bits+0x48>
  80e370:	1806d23a 	srli	r3,r3,8
  80e374:	10800204 	addi	r2,r2,8
  80e378:	194003cc 	andi	r5,r3,15
  80e37c:	2800021e 	bne	r5,zero,80e388 <__lo0bits+0x58>
  80e380:	1806d13a 	srli	r3,r3,4
  80e384:	10800104 	addi	r2,r2,4
  80e388:	194000cc 	andi	r5,r3,3
  80e38c:	2800021e 	bne	r5,zero,80e398 <__lo0bits+0x68>
  80e390:	1806d0ba 	srli	r3,r3,2
  80e394:	10800084 	addi	r2,r2,2
  80e398:	1940004c 	andi	r5,r3,1
  80e39c:	2800081e 	bne	r5,zero,80e3c0 <__lo0bits+0x90>
  80e3a0:	1806d07a 	srli	r3,r3,1
  80e3a4:	1800051e 	bne	r3,zero,80e3bc <__lo0bits+0x8c>
  80e3a8:	00800804 	movi	r2,32
  80e3ac:	f800283a 	ret
  80e3b0:	1806d43a 	srli	r3,r3,16
  80e3b4:	00800404 	movi	r2,16
  80e3b8:	003feb06 	br	80e368 <__alt_mem_onchip_mem+0xff806368>
  80e3bc:	10800044 	addi	r2,r2,1
  80e3c0:	20c00015 	stw	r3,0(r4)
  80e3c4:	f800283a 	ret
  80e3c8:	0005883a 	mov	r2,zero
  80e3cc:	f800283a 	ret
  80e3d0:	1806d07a 	srli	r3,r3,1
  80e3d4:	00800044 	movi	r2,1
  80e3d8:	20c00015 	stw	r3,0(r4)
  80e3dc:	f800283a 	ret

0080e3e0 <__i2b>:
  80e3e0:	defffd04 	addi	sp,sp,-12
  80e3e4:	dc000015 	stw	r16,0(sp)
  80e3e8:	04000044 	movi	r16,1
  80e3ec:	dc400115 	stw	r17,4(sp)
  80e3f0:	2823883a 	mov	r17,r5
  80e3f4:	800b883a 	mov	r5,r16
  80e3f8:	dfc00215 	stw	ra,8(sp)
  80e3fc:	080dfd40 	call	80dfd4 <_Balloc>
  80e400:	14400515 	stw	r17,20(r2)
  80e404:	14000415 	stw	r16,16(r2)
  80e408:	dfc00217 	ldw	ra,8(sp)
  80e40c:	dc400117 	ldw	r17,4(sp)
  80e410:	dc000017 	ldw	r16,0(sp)
  80e414:	dec00304 	addi	sp,sp,12
  80e418:	f800283a 	ret

0080e41c <__multiply>:
  80e41c:	defffa04 	addi	sp,sp,-24
  80e420:	dcc00315 	stw	r19,12(sp)
  80e424:	dc800215 	stw	r18,8(sp)
  80e428:	34c00417 	ldw	r19,16(r6)
  80e42c:	2c800417 	ldw	r18,16(r5)
  80e430:	dd000415 	stw	r20,16(sp)
  80e434:	dc400115 	stw	r17,4(sp)
  80e438:	dfc00515 	stw	ra,20(sp)
  80e43c:	dc000015 	stw	r16,0(sp)
  80e440:	2829883a 	mov	r20,r5
  80e444:	3023883a 	mov	r17,r6
  80e448:	94c0050e 	bge	r18,r19,80e460 <__multiply+0x44>
  80e44c:	9007883a 	mov	r3,r18
  80e450:	3029883a 	mov	r20,r6
  80e454:	9825883a 	mov	r18,r19
  80e458:	2823883a 	mov	r17,r5
  80e45c:	1827883a 	mov	r19,r3
  80e460:	a0800217 	ldw	r2,8(r20)
  80e464:	94e1883a 	add	r16,r18,r19
  80e468:	a1400117 	ldw	r5,4(r20)
  80e46c:	1400010e 	bge	r2,r16,80e474 <__multiply+0x58>
  80e470:	29400044 	addi	r5,r5,1
  80e474:	080dfd40 	call	80dfd4 <_Balloc>
  80e478:	8415883a 	add	r10,r16,r16
  80e47c:	12c00504 	addi	r11,r2,20
  80e480:	5295883a 	add	r10,r10,r10
  80e484:	5a95883a 	add	r10,r11,r10
  80e488:	5807883a 	mov	r3,r11
  80e48c:	5a80032e 	bgeu	r11,r10,80e49c <__multiply+0x80>
  80e490:	18000015 	stw	zero,0(r3)
  80e494:	18c00104 	addi	r3,r3,4
  80e498:	1abffd36 	bltu	r3,r10,80e490 <__alt_mem_onchip_mem+0xff806490>
  80e49c:	9ce7883a 	add	r19,r19,r19
  80e4a0:	94a5883a 	add	r18,r18,r18
  80e4a4:	89800504 	addi	r6,r17,20
  80e4a8:	9ce7883a 	add	r19,r19,r19
  80e4ac:	a3400504 	addi	r13,r20,20
  80e4b0:	94a5883a 	add	r18,r18,r18
  80e4b4:	34d9883a 	add	r12,r6,r19
  80e4b8:	6c93883a 	add	r9,r13,r18
  80e4bc:	3300422e 	bgeu	r6,r12,80e5c8 <__multiply+0x1ac>
  80e4c0:	37c00017 	ldw	ra,0(r6)
  80e4c4:	fbffffcc 	andi	r15,ra,65535
  80e4c8:	78001b26 	beq	r15,zero,80e538 <__multiply+0x11c>
  80e4cc:	5811883a 	mov	r8,r11
  80e4d0:	681d883a 	mov	r14,r13
  80e4d4:	000f883a 	mov	r7,zero
  80e4d8:	71000017 	ldw	r4,0(r14)
  80e4dc:	40c00017 	ldw	r3,0(r8)
  80e4e0:	73800104 	addi	r14,r14,4
  80e4e4:	217fffcc 	andi	r5,r4,65535
  80e4e8:	2bcb383a 	mul	r5,r5,r15
  80e4ec:	2008d43a 	srli	r4,r4,16
  80e4f0:	1c7fffcc 	andi	r17,r3,65535
  80e4f4:	2c4b883a 	add	r5,r5,r17
  80e4f8:	29cb883a 	add	r5,r5,r7
  80e4fc:	23c9383a 	mul	r4,r4,r15
  80e500:	1806d43a 	srli	r3,r3,16
  80e504:	280ed43a 	srli	r7,r5,16
  80e508:	297fffcc 	andi	r5,r5,65535
  80e50c:	20c7883a 	add	r3,r4,r3
  80e510:	19c7883a 	add	r3,r3,r7
  80e514:	1808943a 	slli	r4,r3,16
  80e518:	4023883a 	mov	r17,r8
  80e51c:	180ed43a 	srli	r7,r3,16
  80e520:	214ab03a 	or	r5,r4,r5
  80e524:	41400015 	stw	r5,0(r8)
  80e528:	42000104 	addi	r8,r8,4
  80e52c:	727fea36 	bltu	r14,r9,80e4d8 <__alt_mem_onchip_mem+0xff8064d8>
  80e530:	89c00115 	stw	r7,4(r17)
  80e534:	37c00017 	ldw	ra,0(r6)
  80e538:	f83ed43a 	srli	ra,ra,16
  80e53c:	f8001f26 	beq	ra,zero,80e5bc <__multiply+0x1a0>
  80e540:	58c00017 	ldw	r3,0(r11)
  80e544:	681d883a 	mov	r14,r13
  80e548:	581f883a 	mov	r15,r11
  80e54c:	1811883a 	mov	r8,r3
  80e550:	5825883a 	mov	r18,r11
  80e554:	000f883a 	mov	r7,zero
  80e558:	00000106 	br	80e560 <__multiply+0x144>
  80e55c:	8825883a 	mov	r18,r17
  80e560:	7140000b 	ldhu	r5,0(r14)
  80e564:	4010d43a 	srli	r8,r8,16
  80e568:	193fffcc 	andi	r4,r3,65535
  80e56c:	2fcb383a 	mul	r5,r5,ra
  80e570:	7bc00104 	addi	r15,r15,4
  80e574:	73800104 	addi	r14,r14,4
  80e578:	2a0b883a 	add	r5,r5,r8
  80e57c:	29cb883a 	add	r5,r5,r7
  80e580:	2806943a 	slli	r3,r5,16
  80e584:	94400104 	addi	r17,r18,4
  80e588:	280ad43a 	srli	r5,r5,16
  80e58c:	1908b03a 	or	r4,r3,r4
  80e590:	793fff15 	stw	r4,-4(r15)
  80e594:	70ffff17 	ldw	r3,-4(r14)
  80e598:	8a000017 	ldw	r8,0(r17)
  80e59c:	1806d43a 	srli	r3,r3,16
  80e5a0:	413fffcc 	andi	r4,r8,65535
  80e5a4:	1fc7383a 	mul	r3,r3,ra
  80e5a8:	1907883a 	add	r3,r3,r4
  80e5ac:	1947883a 	add	r3,r3,r5
  80e5b0:	180ed43a 	srli	r7,r3,16
  80e5b4:	727fe936 	bltu	r14,r9,80e55c <__alt_mem_onchip_mem+0xff80655c>
  80e5b8:	90c00115 	stw	r3,4(r18)
  80e5bc:	31800104 	addi	r6,r6,4
  80e5c0:	5ac00104 	addi	r11,r11,4
  80e5c4:	333fbe36 	bltu	r6,r12,80e4c0 <__alt_mem_onchip_mem+0xff8064c0>
  80e5c8:	0400090e 	bge	zero,r16,80e5f0 <__multiply+0x1d4>
  80e5cc:	50ffff17 	ldw	r3,-4(r10)
  80e5d0:	52bfff04 	addi	r10,r10,-4
  80e5d4:	18000326 	beq	r3,zero,80e5e4 <__multiply+0x1c8>
  80e5d8:	00000506 	br	80e5f0 <__multiply+0x1d4>
  80e5dc:	50c00017 	ldw	r3,0(r10)
  80e5e0:	1800031e 	bne	r3,zero,80e5f0 <__multiply+0x1d4>
  80e5e4:	843fffc4 	addi	r16,r16,-1
  80e5e8:	52bfff04 	addi	r10,r10,-4
  80e5ec:	803ffb1e 	bne	r16,zero,80e5dc <__alt_mem_onchip_mem+0xff8065dc>
  80e5f0:	14000415 	stw	r16,16(r2)
  80e5f4:	dfc00517 	ldw	ra,20(sp)
  80e5f8:	dd000417 	ldw	r20,16(sp)
  80e5fc:	dcc00317 	ldw	r19,12(sp)
  80e600:	dc800217 	ldw	r18,8(sp)
  80e604:	dc400117 	ldw	r17,4(sp)
  80e608:	dc000017 	ldw	r16,0(sp)
  80e60c:	dec00604 	addi	sp,sp,24
  80e610:	f800283a 	ret

0080e614 <__pow5mult>:
  80e614:	defffa04 	addi	sp,sp,-24
  80e618:	dcc00315 	stw	r19,12(sp)
  80e61c:	dc000015 	stw	r16,0(sp)
  80e620:	dfc00515 	stw	ra,20(sp)
  80e624:	dd000415 	stw	r20,16(sp)
  80e628:	dc800215 	stw	r18,8(sp)
  80e62c:	dc400115 	stw	r17,4(sp)
  80e630:	308000cc 	andi	r2,r6,3
  80e634:	3021883a 	mov	r16,r6
  80e638:	2027883a 	mov	r19,r4
  80e63c:	10002f1e 	bne	r2,zero,80e6fc <__pow5mult+0xe8>
  80e640:	2825883a 	mov	r18,r5
  80e644:	8021d0ba 	srai	r16,r16,2
  80e648:	80001a26 	beq	r16,zero,80e6b4 <__pow5mult+0xa0>
  80e64c:	9c401217 	ldw	r17,72(r19)
  80e650:	8800061e 	bne	r17,zero,80e66c <__pow5mult+0x58>
  80e654:	00003406 	br	80e728 <__pow5mult+0x114>
  80e658:	8021d07a 	srai	r16,r16,1
  80e65c:	80001526 	beq	r16,zero,80e6b4 <__pow5mult+0xa0>
  80e660:	88800017 	ldw	r2,0(r17)
  80e664:	10001c26 	beq	r2,zero,80e6d8 <__pow5mult+0xc4>
  80e668:	1023883a 	mov	r17,r2
  80e66c:	8080004c 	andi	r2,r16,1
  80e670:	103ff926 	beq	r2,zero,80e658 <__alt_mem_onchip_mem+0xff806658>
  80e674:	880d883a 	mov	r6,r17
  80e678:	900b883a 	mov	r5,r18
  80e67c:	9809883a 	mov	r4,r19
  80e680:	080e41c0 	call	80e41c <__multiply>
  80e684:	90001b26 	beq	r18,zero,80e6f4 <__pow5mult+0xe0>
  80e688:	91000117 	ldw	r4,4(r18)
  80e68c:	98c01317 	ldw	r3,76(r19)
  80e690:	8021d07a 	srai	r16,r16,1
  80e694:	2109883a 	add	r4,r4,r4
  80e698:	2109883a 	add	r4,r4,r4
  80e69c:	1907883a 	add	r3,r3,r4
  80e6a0:	19000017 	ldw	r4,0(r3)
  80e6a4:	91000015 	stw	r4,0(r18)
  80e6a8:	1c800015 	stw	r18,0(r3)
  80e6ac:	1025883a 	mov	r18,r2
  80e6b0:	803feb1e 	bne	r16,zero,80e660 <__alt_mem_onchip_mem+0xff806660>
  80e6b4:	9005883a 	mov	r2,r18
  80e6b8:	dfc00517 	ldw	ra,20(sp)
  80e6bc:	dd000417 	ldw	r20,16(sp)
  80e6c0:	dcc00317 	ldw	r19,12(sp)
  80e6c4:	dc800217 	ldw	r18,8(sp)
  80e6c8:	dc400117 	ldw	r17,4(sp)
  80e6cc:	dc000017 	ldw	r16,0(sp)
  80e6d0:	dec00604 	addi	sp,sp,24
  80e6d4:	f800283a 	ret
  80e6d8:	880d883a 	mov	r6,r17
  80e6dc:	880b883a 	mov	r5,r17
  80e6e0:	9809883a 	mov	r4,r19
  80e6e4:	080e41c0 	call	80e41c <__multiply>
  80e6e8:	88800015 	stw	r2,0(r17)
  80e6ec:	10000015 	stw	zero,0(r2)
  80e6f0:	003fdd06 	br	80e668 <__alt_mem_onchip_mem+0xff806668>
  80e6f4:	1025883a 	mov	r18,r2
  80e6f8:	003fd706 	br	80e658 <__alt_mem_onchip_mem+0xff806658>
  80e6fc:	10bfffc4 	addi	r2,r2,-1
  80e700:	1085883a 	add	r2,r2,r2
  80e704:	00c02074 	movhi	r3,129
  80e708:	18dd3704 	addi	r3,r3,29916
  80e70c:	1085883a 	add	r2,r2,r2
  80e710:	1885883a 	add	r2,r3,r2
  80e714:	11800017 	ldw	r6,0(r2)
  80e718:	000f883a 	mov	r7,zero
  80e71c:	080e0a40 	call	80e0a4 <__multadd>
  80e720:	1025883a 	mov	r18,r2
  80e724:	003fc706 	br	80e644 <__alt_mem_onchip_mem+0xff806644>
  80e728:	05000044 	movi	r20,1
  80e72c:	a00b883a 	mov	r5,r20
  80e730:	9809883a 	mov	r4,r19
  80e734:	080dfd40 	call	80dfd4 <_Balloc>
  80e738:	1023883a 	mov	r17,r2
  80e73c:	00809c44 	movi	r2,625
  80e740:	88800515 	stw	r2,20(r17)
  80e744:	8d000415 	stw	r20,16(r17)
  80e748:	9c401215 	stw	r17,72(r19)
  80e74c:	88000015 	stw	zero,0(r17)
  80e750:	003fc606 	br	80e66c <__alt_mem_onchip_mem+0xff80666c>

0080e754 <__lshift>:
  80e754:	defff904 	addi	sp,sp,-28
  80e758:	dd400515 	stw	r21,20(sp)
  80e75c:	dcc00315 	stw	r19,12(sp)
  80e760:	302bd17a 	srai	r21,r6,5
  80e764:	2cc00417 	ldw	r19,16(r5)
  80e768:	28800217 	ldw	r2,8(r5)
  80e76c:	dd000415 	stw	r20,16(sp)
  80e770:	ace7883a 	add	r19,r21,r19
  80e774:	dc800215 	stw	r18,8(sp)
  80e778:	dc400115 	stw	r17,4(sp)
  80e77c:	dc000015 	stw	r16,0(sp)
  80e780:	dfc00615 	stw	ra,24(sp)
  80e784:	9c000044 	addi	r16,r19,1
  80e788:	2823883a 	mov	r17,r5
  80e78c:	3029883a 	mov	r20,r6
  80e790:	2025883a 	mov	r18,r4
  80e794:	29400117 	ldw	r5,4(r5)
  80e798:	1400030e 	bge	r2,r16,80e7a8 <__lshift+0x54>
  80e79c:	1085883a 	add	r2,r2,r2
  80e7a0:	29400044 	addi	r5,r5,1
  80e7a4:	143ffd16 	blt	r2,r16,80e79c <__alt_mem_onchip_mem+0xff80679c>
  80e7a8:	9009883a 	mov	r4,r18
  80e7ac:	080dfd40 	call	80dfd4 <_Balloc>
  80e7b0:	10c00504 	addi	r3,r2,20
  80e7b4:	0540070e 	bge	zero,r21,80e7d4 <__lshift+0x80>
  80e7b8:	ad6b883a 	add	r21,r21,r21
  80e7bc:	ad6b883a 	add	r21,r21,r21
  80e7c0:	1809883a 	mov	r4,r3
  80e7c4:	1d47883a 	add	r3,r3,r21
  80e7c8:	20000015 	stw	zero,0(r4)
  80e7cc:	21000104 	addi	r4,r4,4
  80e7d0:	193ffd1e 	bne	r3,r4,80e7c8 <__alt_mem_onchip_mem+0xff8067c8>
  80e7d4:	8a000417 	ldw	r8,16(r17)
  80e7d8:	89000504 	addi	r4,r17,20
  80e7dc:	a18007cc 	andi	r6,r20,31
  80e7e0:	4211883a 	add	r8,r8,r8
  80e7e4:	4211883a 	add	r8,r8,r8
  80e7e8:	2211883a 	add	r8,r4,r8
  80e7ec:	30002326 	beq	r6,zero,80e87c <__lshift+0x128>
  80e7f0:	02400804 	movi	r9,32
  80e7f4:	4993c83a 	sub	r9,r9,r6
  80e7f8:	000b883a 	mov	r5,zero
  80e7fc:	21c00017 	ldw	r7,0(r4)
  80e800:	1815883a 	mov	r10,r3
  80e804:	18c00104 	addi	r3,r3,4
  80e808:	398e983a 	sll	r7,r7,r6
  80e80c:	21000104 	addi	r4,r4,4
  80e810:	394ab03a 	or	r5,r7,r5
  80e814:	197fff15 	stw	r5,-4(r3)
  80e818:	217fff17 	ldw	r5,-4(r4)
  80e81c:	2a4ad83a 	srl	r5,r5,r9
  80e820:	223ff636 	bltu	r4,r8,80e7fc <__alt_mem_onchip_mem+0xff8067fc>
  80e824:	51400115 	stw	r5,4(r10)
  80e828:	28001a1e 	bne	r5,zero,80e894 <__lshift+0x140>
  80e82c:	843fffc4 	addi	r16,r16,-1
  80e830:	14000415 	stw	r16,16(r2)
  80e834:	88000826 	beq	r17,zero,80e858 <__lshift+0x104>
  80e838:	89000117 	ldw	r4,4(r17)
  80e83c:	90c01317 	ldw	r3,76(r18)
  80e840:	2109883a 	add	r4,r4,r4
  80e844:	2109883a 	add	r4,r4,r4
  80e848:	1907883a 	add	r3,r3,r4
  80e84c:	19000017 	ldw	r4,0(r3)
  80e850:	89000015 	stw	r4,0(r17)
  80e854:	1c400015 	stw	r17,0(r3)
  80e858:	dfc00617 	ldw	ra,24(sp)
  80e85c:	dd400517 	ldw	r21,20(sp)
  80e860:	dd000417 	ldw	r20,16(sp)
  80e864:	dcc00317 	ldw	r19,12(sp)
  80e868:	dc800217 	ldw	r18,8(sp)
  80e86c:	dc400117 	ldw	r17,4(sp)
  80e870:	dc000017 	ldw	r16,0(sp)
  80e874:	dec00704 	addi	sp,sp,28
  80e878:	f800283a 	ret
  80e87c:	21400017 	ldw	r5,0(r4)
  80e880:	18c00104 	addi	r3,r3,4
  80e884:	21000104 	addi	r4,r4,4
  80e888:	197fff15 	stw	r5,-4(r3)
  80e88c:	223ffb36 	bltu	r4,r8,80e87c <__alt_mem_onchip_mem+0xff80687c>
  80e890:	003fe606 	br	80e82c <__alt_mem_onchip_mem+0xff80682c>
  80e894:	9c000084 	addi	r16,r19,2
  80e898:	003fe406 	br	80e82c <__alt_mem_onchip_mem+0xff80682c>

0080e89c <__mcmp>:
  80e89c:	20800417 	ldw	r2,16(r4)
  80e8a0:	28c00417 	ldw	r3,16(r5)
  80e8a4:	10c5c83a 	sub	r2,r2,r3
  80e8a8:	1000111e 	bne	r2,zero,80e8f0 <__mcmp+0x54>
  80e8ac:	18c7883a 	add	r3,r3,r3
  80e8b0:	18c7883a 	add	r3,r3,r3
  80e8b4:	21000504 	addi	r4,r4,20
  80e8b8:	29400504 	addi	r5,r5,20
  80e8bc:	20c5883a 	add	r2,r4,r3
  80e8c0:	28cb883a 	add	r5,r5,r3
  80e8c4:	00000106 	br	80e8cc <__mcmp+0x30>
  80e8c8:	20800a2e 	bgeu	r4,r2,80e8f4 <__mcmp+0x58>
  80e8cc:	10bfff04 	addi	r2,r2,-4
  80e8d0:	297fff04 	addi	r5,r5,-4
  80e8d4:	11800017 	ldw	r6,0(r2)
  80e8d8:	28c00017 	ldw	r3,0(r5)
  80e8dc:	30fffa26 	beq	r6,r3,80e8c8 <__alt_mem_onchip_mem+0xff8068c8>
  80e8e0:	30c00236 	bltu	r6,r3,80e8ec <__mcmp+0x50>
  80e8e4:	00800044 	movi	r2,1
  80e8e8:	f800283a 	ret
  80e8ec:	00bfffc4 	movi	r2,-1
  80e8f0:	f800283a 	ret
  80e8f4:	0005883a 	mov	r2,zero
  80e8f8:	f800283a 	ret

0080e8fc <__mdiff>:
  80e8fc:	28c00417 	ldw	r3,16(r5)
  80e900:	30800417 	ldw	r2,16(r6)
  80e904:	defffa04 	addi	sp,sp,-24
  80e908:	dcc00315 	stw	r19,12(sp)
  80e90c:	dc800215 	stw	r18,8(sp)
  80e910:	dfc00515 	stw	ra,20(sp)
  80e914:	dd000415 	stw	r20,16(sp)
  80e918:	dc400115 	stw	r17,4(sp)
  80e91c:	dc000015 	stw	r16,0(sp)
  80e920:	1887c83a 	sub	r3,r3,r2
  80e924:	2825883a 	mov	r18,r5
  80e928:	3027883a 	mov	r19,r6
  80e92c:	1800141e 	bne	r3,zero,80e980 <__mdiff+0x84>
  80e930:	1085883a 	add	r2,r2,r2
  80e934:	1085883a 	add	r2,r2,r2
  80e938:	2a000504 	addi	r8,r5,20
  80e93c:	34000504 	addi	r16,r6,20
  80e940:	4087883a 	add	r3,r8,r2
  80e944:	8085883a 	add	r2,r16,r2
  80e948:	00000106 	br	80e950 <__mdiff+0x54>
  80e94c:	40c0592e 	bgeu	r8,r3,80eab4 <__mdiff+0x1b8>
  80e950:	18ffff04 	addi	r3,r3,-4
  80e954:	10bfff04 	addi	r2,r2,-4
  80e958:	19c00017 	ldw	r7,0(r3)
  80e95c:	11400017 	ldw	r5,0(r2)
  80e960:	397ffa26 	beq	r7,r5,80e94c <__alt_mem_onchip_mem+0xff80694c>
  80e964:	3940592e 	bgeu	r7,r5,80eacc <__mdiff+0x1d0>
  80e968:	9005883a 	mov	r2,r18
  80e96c:	4023883a 	mov	r17,r8
  80e970:	9825883a 	mov	r18,r19
  80e974:	05000044 	movi	r20,1
  80e978:	1027883a 	mov	r19,r2
  80e97c:	00000406 	br	80e990 <__mdiff+0x94>
  80e980:	18005616 	blt	r3,zero,80eadc <__mdiff+0x1e0>
  80e984:	34400504 	addi	r17,r6,20
  80e988:	2c000504 	addi	r16,r5,20
  80e98c:	0029883a 	mov	r20,zero
  80e990:	91400117 	ldw	r5,4(r18)
  80e994:	080dfd40 	call	80dfd4 <_Balloc>
  80e998:	92400417 	ldw	r9,16(r18)
  80e99c:	9b000417 	ldw	r12,16(r19)
  80e9a0:	12c00504 	addi	r11,r2,20
  80e9a4:	4a51883a 	add	r8,r9,r9
  80e9a8:	6319883a 	add	r12,r12,r12
  80e9ac:	4211883a 	add	r8,r8,r8
  80e9b0:	6319883a 	add	r12,r12,r12
  80e9b4:	15000315 	stw	r20,12(r2)
  80e9b8:	8211883a 	add	r8,r16,r8
  80e9bc:	8b19883a 	add	r12,r17,r12
  80e9c0:	0007883a 	mov	r3,zero
  80e9c4:	81400017 	ldw	r5,0(r16)
  80e9c8:	89c00017 	ldw	r7,0(r17)
  80e9cc:	59800104 	addi	r6,r11,4
  80e9d0:	293fffcc 	andi	r4,r5,65535
  80e9d4:	20c7883a 	add	r3,r4,r3
  80e9d8:	393fffcc 	andi	r4,r7,65535
  80e9dc:	1909c83a 	sub	r4,r3,r4
  80e9e0:	280ad43a 	srli	r5,r5,16
  80e9e4:	380ed43a 	srli	r7,r7,16
  80e9e8:	2007d43a 	srai	r3,r4,16
  80e9ec:	213fffcc 	andi	r4,r4,65535
  80e9f0:	29cbc83a 	sub	r5,r5,r7
  80e9f4:	28c7883a 	add	r3,r5,r3
  80e9f8:	180a943a 	slli	r5,r3,16
  80e9fc:	8c400104 	addi	r17,r17,4
  80ea00:	84000104 	addi	r16,r16,4
  80ea04:	2908b03a 	or	r4,r5,r4
  80ea08:	59000015 	stw	r4,0(r11)
  80ea0c:	1807d43a 	srai	r3,r3,16
  80ea10:	3015883a 	mov	r10,r6
  80ea14:	3017883a 	mov	r11,r6
  80ea18:	8b3fea36 	bltu	r17,r12,80e9c4 <__alt_mem_onchip_mem+0xff8069c4>
  80ea1c:	8200162e 	bgeu	r16,r8,80ea78 <__mdiff+0x17c>
  80ea20:	8017883a 	mov	r11,r16
  80ea24:	59400017 	ldw	r5,0(r11)
  80ea28:	31800104 	addi	r6,r6,4
  80ea2c:	5ac00104 	addi	r11,r11,4
  80ea30:	293fffcc 	andi	r4,r5,65535
  80ea34:	20c7883a 	add	r3,r4,r3
  80ea38:	280ed43a 	srli	r7,r5,16
  80ea3c:	180bd43a 	srai	r5,r3,16
  80ea40:	193fffcc 	andi	r4,r3,65535
  80ea44:	3947883a 	add	r3,r7,r5
  80ea48:	180a943a 	slli	r5,r3,16
  80ea4c:	1807d43a 	srai	r3,r3,16
  80ea50:	2908b03a 	or	r4,r5,r4
  80ea54:	313fff15 	stw	r4,-4(r6)
  80ea58:	5a3ff236 	bltu	r11,r8,80ea24 <__alt_mem_onchip_mem+0xff806a24>
  80ea5c:	0406303a 	nor	r3,zero,r16
  80ea60:	1a07883a 	add	r3,r3,r8
  80ea64:	1806d0ba 	srli	r3,r3,2
  80ea68:	18c00044 	addi	r3,r3,1
  80ea6c:	18c7883a 	add	r3,r3,r3
  80ea70:	18c7883a 	add	r3,r3,r3
  80ea74:	50d5883a 	add	r10,r10,r3
  80ea78:	50ffff04 	addi	r3,r10,-4
  80ea7c:	2000041e 	bne	r4,zero,80ea90 <__mdiff+0x194>
  80ea80:	18ffff04 	addi	r3,r3,-4
  80ea84:	19000017 	ldw	r4,0(r3)
  80ea88:	4a7fffc4 	addi	r9,r9,-1
  80ea8c:	203ffc26 	beq	r4,zero,80ea80 <__alt_mem_onchip_mem+0xff806a80>
  80ea90:	12400415 	stw	r9,16(r2)
  80ea94:	dfc00517 	ldw	ra,20(sp)
  80ea98:	dd000417 	ldw	r20,16(sp)
  80ea9c:	dcc00317 	ldw	r19,12(sp)
  80eaa0:	dc800217 	ldw	r18,8(sp)
  80eaa4:	dc400117 	ldw	r17,4(sp)
  80eaa8:	dc000017 	ldw	r16,0(sp)
  80eaac:	dec00604 	addi	sp,sp,24
  80eab0:	f800283a 	ret
  80eab4:	000b883a 	mov	r5,zero
  80eab8:	080dfd40 	call	80dfd4 <_Balloc>
  80eabc:	00c00044 	movi	r3,1
  80eac0:	10c00415 	stw	r3,16(r2)
  80eac4:	10000515 	stw	zero,20(r2)
  80eac8:	003ff206 	br	80ea94 <__alt_mem_onchip_mem+0xff806a94>
  80eacc:	8023883a 	mov	r17,r16
  80ead0:	0029883a 	mov	r20,zero
  80ead4:	4021883a 	mov	r16,r8
  80ead8:	003fad06 	br	80e990 <__alt_mem_onchip_mem+0xff806990>
  80eadc:	9005883a 	mov	r2,r18
  80eae0:	94400504 	addi	r17,r18,20
  80eae4:	9c000504 	addi	r16,r19,20
  80eae8:	9825883a 	mov	r18,r19
  80eaec:	05000044 	movi	r20,1
  80eaf0:	1027883a 	mov	r19,r2
  80eaf4:	003fa606 	br	80e990 <__alt_mem_onchip_mem+0xff806990>

0080eaf8 <__ulp>:
  80eaf8:	295ffc2c 	andhi	r5,r5,32752
  80eafc:	00bf3034 	movhi	r2,64704
  80eb00:	2887883a 	add	r3,r5,r2
  80eb04:	00c0020e 	bge	zero,r3,80eb10 <__ulp+0x18>
  80eb08:	0005883a 	mov	r2,zero
  80eb0c:	f800283a 	ret
  80eb10:	00c7c83a 	sub	r3,zero,r3
  80eb14:	1807d53a 	srai	r3,r3,20
  80eb18:	008004c4 	movi	r2,19
  80eb1c:	10c00b0e 	bge	r2,r3,80eb4c <__ulp+0x54>
  80eb20:	18bffb04 	addi	r2,r3,-20
  80eb24:	01000784 	movi	r4,30
  80eb28:	0007883a 	mov	r3,zero
  80eb2c:	20800516 	blt	r4,r2,80eb44 <__ulp+0x4c>
  80eb30:	010007c4 	movi	r4,31
  80eb34:	2089c83a 	sub	r4,r4,r2
  80eb38:	00800044 	movi	r2,1
  80eb3c:	1104983a 	sll	r2,r2,r4
  80eb40:	f800283a 	ret
  80eb44:	00800044 	movi	r2,1
  80eb48:	f800283a 	ret
  80eb4c:	01400234 	movhi	r5,8
  80eb50:	28c7d83a 	sra	r3,r5,r3
  80eb54:	0005883a 	mov	r2,zero
  80eb58:	f800283a 	ret

0080eb5c <__b2d>:
  80eb5c:	defffa04 	addi	sp,sp,-24
  80eb60:	dc000015 	stw	r16,0(sp)
  80eb64:	24000417 	ldw	r16,16(r4)
  80eb68:	dc400115 	stw	r17,4(sp)
  80eb6c:	24400504 	addi	r17,r4,20
  80eb70:	8421883a 	add	r16,r16,r16
  80eb74:	8421883a 	add	r16,r16,r16
  80eb78:	8c21883a 	add	r16,r17,r16
  80eb7c:	dc800215 	stw	r18,8(sp)
  80eb80:	84bfff17 	ldw	r18,-4(r16)
  80eb84:	dd000415 	stw	r20,16(sp)
  80eb88:	dcc00315 	stw	r19,12(sp)
  80eb8c:	9009883a 	mov	r4,r18
  80eb90:	2829883a 	mov	r20,r5
  80eb94:	dfc00515 	stw	ra,20(sp)
  80eb98:	080e2c80 	call	80e2c8 <__hi0bits>
  80eb9c:	00c00804 	movi	r3,32
  80eba0:	1889c83a 	sub	r4,r3,r2
  80eba4:	a1000015 	stw	r4,0(r20)
  80eba8:	01000284 	movi	r4,10
  80ebac:	84ffff04 	addi	r19,r16,-4
  80ebb0:	20801216 	blt	r4,r2,80ebfc <__b2d+0xa0>
  80ebb4:	018002c4 	movi	r6,11
  80ebb8:	308dc83a 	sub	r6,r6,r2
  80ebbc:	9186d83a 	srl	r3,r18,r6
  80ebc0:	18cffc34 	orhi	r3,r3,16368
  80ebc4:	8cc0212e 	bgeu	r17,r19,80ec4c <__b2d+0xf0>
  80ebc8:	813ffe17 	ldw	r4,-8(r16)
  80ebcc:	218cd83a 	srl	r6,r4,r6
  80ebd0:	10800544 	addi	r2,r2,21
  80ebd4:	9084983a 	sll	r2,r18,r2
  80ebd8:	1184b03a 	or	r2,r2,r6
  80ebdc:	dfc00517 	ldw	ra,20(sp)
  80ebe0:	dd000417 	ldw	r20,16(sp)
  80ebe4:	dcc00317 	ldw	r19,12(sp)
  80ebe8:	dc800217 	ldw	r18,8(sp)
  80ebec:	dc400117 	ldw	r17,4(sp)
  80ebf0:	dc000017 	ldw	r16,0(sp)
  80ebf4:	dec00604 	addi	sp,sp,24
  80ebf8:	f800283a 	ret
  80ebfc:	8cc00f2e 	bgeu	r17,r19,80ec3c <__b2d+0xe0>
  80ec00:	117ffd44 	addi	r5,r2,-11
  80ec04:	80bffe17 	ldw	r2,-8(r16)
  80ec08:	28000e26 	beq	r5,zero,80ec44 <__b2d+0xe8>
  80ec0c:	1949c83a 	sub	r4,r3,r5
  80ec10:	9164983a 	sll	r18,r18,r5
  80ec14:	1106d83a 	srl	r3,r2,r4
  80ec18:	81bffe04 	addi	r6,r16,-8
  80ec1c:	948ffc34 	orhi	r18,r18,16368
  80ec20:	90c6b03a 	or	r3,r18,r3
  80ec24:	89800e2e 	bgeu	r17,r6,80ec60 <__b2d+0x104>
  80ec28:	81bffd17 	ldw	r6,-12(r16)
  80ec2c:	1144983a 	sll	r2,r2,r5
  80ec30:	310ad83a 	srl	r5,r6,r4
  80ec34:	2884b03a 	or	r2,r5,r2
  80ec38:	003fe806 	br	80ebdc <__alt_mem_onchip_mem+0xff806bdc>
  80ec3c:	10bffd44 	addi	r2,r2,-11
  80ec40:	1000041e 	bne	r2,zero,80ec54 <__b2d+0xf8>
  80ec44:	90cffc34 	orhi	r3,r18,16368
  80ec48:	003fe406 	br	80ebdc <__alt_mem_onchip_mem+0xff806bdc>
  80ec4c:	000d883a 	mov	r6,zero
  80ec50:	003fdf06 	br	80ebd0 <__alt_mem_onchip_mem+0xff806bd0>
  80ec54:	90a4983a 	sll	r18,r18,r2
  80ec58:	0005883a 	mov	r2,zero
  80ec5c:	003ff906 	br	80ec44 <__alt_mem_onchip_mem+0xff806c44>
  80ec60:	1144983a 	sll	r2,r2,r5
  80ec64:	003fdd06 	br	80ebdc <__alt_mem_onchip_mem+0xff806bdc>

0080ec68 <__d2b>:
  80ec68:	defff804 	addi	sp,sp,-32
  80ec6c:	dc000215 	stw	r16,8(sp)
  80ec70:	3021883a 	mov	r16,r6
  80ec74:	dc400315 	stw	r17,12(sp)
  80ec78:	8022907a 	slli	r17,r16,1
  80ec7c:	dd000615 	stw	r20,24(sp)
  80ec80:	2829883a 	mov	r20,r5
  80ec84:	01400044 	movi	r5,1
  80ec88:	dcc00515 	stw	r19,20(sp)
  80ec8c:	dc800415 	stw	r18,16(sp)
  80ec90:	dfc00715 	stw	ra,28(sp)
  80ec94:	3825883a 	mov	r18,r7
  80ec98:	8822d57a 	srli	r17,r17,21
  80ec9c:	080dfd40 	call	80dfd4 <_Balloc>
  80eca0:	1027883a 	mov	r19,r2
  80eca4:	00800434 	movhi	r2,16
  80eca8:	10bfffc4 	addi	r2,r2,-1
  80ecac:	808c703a 	and	r6,r16,r2
  80ecb0:	88000126 	beq	r17,zero,80ecb8 <__d2b+0x50>
  80ecb4:	31800434 	orhi	r6,r6,16
  80ecb8:	d9800015 	stw	r6,0(sp)
  80ecbc:	a0002426 	beq	r20,zero,80ed50 <__d2b+0xe8>
  80ecc0:	d9000104 	addi	r4,sp,4
  80ecc4:	dd000115 	stw	r20,4(sp)
  80ecc8:	080e3300 	call	80e330 <__lo0bits>
  80eccc:	d8c00017 	ldw	r3,0(sp)
  80ecd0:	10002f1e 	bne	r2,zero,80ed90 <__d2b+0x128>
  80ecd4:	d9000117 	ldw	r4,4(sp)
  80ecd8:	99000515 	stw	r4,20(r19)
  80ecdc:	1821003a 	cmpeq	r16,r3,zero
  80ece0:	01000084 	movi	r4,2
  80ece4:	2421c83a 	sub	r16,r4,r16
  80ece8:	98c00615 	stw	r3,24(r19)
  80ecec:	9c000415 	stw	r16,16(r19)
  80ecf0:	88001f1e 	bne	r17,zero,80ed70 <__d2b+0x108>
  80ecf4:	10bef384 	addi	r2,r2,-1074
  80ecf8:	90800015 	stw	r2,0(r18)
  80ecfc:	00900034 	movhi	r2,16384
  80ed00:	10bfffc4 	addi	r2,r2,-1
  80ed04:	8085883a 	add	r2,r16,r2
  80ed08:	1085883a 	add	r2,r2,r2
  80ed0c:	1085883a 	add	r2,r2,r2
  80ed10:	9885883a 	add	r2,r19,r2
  80ed14:	11000517 	ldw	r4,20(r2)
  80ed18:	8020917a 	slli	r16,r16,5
  80ed1c:	080e2c80 	call	80e2c8 <__hi0bits>
  80ed20:	d8c00817 	ldw	r3,32(sp)
  80ed24:	8085c83a 	sub	r2,r16,r2
  80ed28:	18800015 	stw	r2,0(r3)
  80ed2c:	9805883a 	mov	r2,r19
  80ed30:	dfc00717 	ldw	ra,28(sp)
  80ed34:	dd000617 	ldw	r20,24(sp)
  80ed38:	dcc00517 	ldw	r19,20(sp)
  80ed3c:	dc800417 	ldw	r18,16(sp)
  80ed40:	dc400317 	ldw	r17,12(sp)
  80ed44:	dc000217 	ldw	r16,8(sp)
  80ed48:	dec00804 	addi	sp,sp,32
  80ed4c:	f800283a 	ret
  80ed50:	d809883a 	mov	r4,sp
  80ed54:	080e3300 	call	80e330 <__lo0bits>
  80ed58:	d8c00017 	ldw	r3,0(sp)
  80ed5c:	04000044 	movi	r16,1
  80ed60:	9c000415 	stw	r16,16(r19)
  80ed64:	98c00515 	stw	r3,20(r19)
  80ed68:	10800804 	addi	r2,r2,32
  80ed6c:	883fe126 	beq	r17,zero,80ecf4 <__alt_mem_onchip_mem+0xff806cf4>
  80ed70:	00c00d44 	movi	r3,53
  80ed74:	8c7ef344 	addi	r17,r17,-1075
  80ed78:	88a3883a 	add	r17,r17,r2
  80ed7c:	1885c83a 	sub	r2,r3,r2
  80ed80:	d8c00817 	ldw	r3,32(sp)
  80ed84:	94400015 	stw	r17,0(r18)
  80ed88:	18800015 	stw	r2,0(r3)
  80ed8c:	003fe706 	br	80ed2c <__alt_mem_onchip_mem+0xff806d2c>
  80ed90:	01000804 	movi	r4,32
  80ed94:	2089c83a 	sub	r4,r4,r2
  80ed98:	1908983a 	sll	r4,r3,r4
  80ed9c:	d9400117 	ldw	r5,4(sp)
  80eda0:	1886d83a 	srl	r3,r3,r2
  80eda4:	2148b03a 	or	r4,r4,r5
  80eda8:	99000515 	stw	r4,20(r19)
  80edac:	d8c00015 	stw	r3,0(sp)
  80edb0:	003fca06 	br	80ecdc <__alt_mem_onchip_mem+0xff806cdc>

0080edb4 <__ratio>:
  80edb4:	defff904 	addi	sp,sp,-28
  80edb8:	dc400315 	stw	r17,12(sp)
  80edbc:	2823883a 	mov	r17,r5
  80edc0:	d9400104 	addi	r5,sp,4
  80edc4:	dfc00615 	stw	ra,24(sp)
  80edc8:	dcc00515 	stw	r19,20(sp)
  80edcc:	dc800415 	stw	r18,16(sp)
  80edd0:	2027883a 	mov	r19,r4
  80edd4:	dc000215 	stw	r16,8(sp)
  80edd8:	080eb5c0 	call	80eb5c <__b2d>
  80eddc:	d80b883a 	mov	r5,sp
  80ede0:	8809883a 	mov	r4,r17
  80ede4:	1025883a 	mov	r18,r2
  80ede8:	1821883a 	mov	r16,r3
  80edec:	080eb5c0 	call	80eb5c <__b2d>
  80edf0:	8a000417 	ldw	r8,16(r17)
  80edf4:	99000417 	ldw	r4,16(r19)
  80edf8:	d9400117 	ldw	r5,4(sp)
  80edfc:	2209c83a 	sub	r4,r4,r8
  80ee00:	2010917a 	slli	r8,r4,5
  80ee04:	d9000017 	ldw	r4,0(sp)
  80ee08:	2909c83a 	sub	r4,r5,r4
  80ee0c:	4109883a 	add	r4,r8,r4
  80ee10:	01000e0e 	bge	zero,r4,80ee4c <__ratio+0x98>
  80ee14:	2008953a 	slli	r4,r4,20
  80ee18:	2421883a 	add	r16,r4,r16
  80ee1c:	100d883a 	mov	r6,r2
  80ee20:	180f883a 	mov	r7,r3
  80ee24:	9009883a 	mov	r4,r18
  80ee28:	800b883a 	mov	r5,r16
  80ee2c:	0811e440 	call	811e44 <__divdf3>
  80ee30:	dfc00617 	ldw	ra,24(sp)
  80ee34:	dcc00517 	ldw	r19,20(sp)
  80ee38:	dc800417 	ldw	r18,16(sp)
  80ee3c:	dc400317 	ldw	r17,12(sp)
  80ee40:	dc000217 	ldw	r16,8(sp)
  80ee44:	dec00704 	addi	sp,sp,28
  80ee48:	f800283a 	ret
  80ee4c:	2008953a 	slli	r4,r4,20
  80ee50:	1907c83a 	sub	r3,r3,r4
  80ee54:	003ff106 	br	80ee1c <__alt_mem_onchip_mem+0xff806e1c>

0080ee58 <_mprec_log10>:
  80ee58:	defffe04 	addi	sp,sp,-8
  80ee5c:	dc000015 	stw	r16,0(sp)
  80ee60:	dfc00115 	stw	ra,4(sp)
  80ee64:	008005c4 	movi	r2,23
  80ee68:	2021883a 	mov	r16,r4
  80ee6c:	11000d0e 	bge	r2,r4,80eea4 <_mprec_log10+0x4c>
  80ee70:	0005883a 	mov	r2,zero
  80ee74:	00cffc34 	movhi	r3,16368
  80ee78:	843fffc4 	addi	r16,r16,-1
  80ee7c:	000d883a 	mov	r6,zero
  80ee80:	01d00934 	movhi	r7,16420
  80ee84:	1009883a 	mov	r4,r2
  80ee88:	180b883a 	mov	r5,r3
  80ee8c:	08127b40 	call	8127b4 <__muldf3>
  80ee90:	803ff91e 	bne	r16,zero,80ee78 <__alt_mem_onchip_mem+0xff806e78>
  80ee94:	dfc00117 	ldw	ra,4(sp)
  80ee98:	dc000017 	ldw	r16,0(sp)
  80ee9c:	dec00204 	addi	sp,sp,8
  80eea0:	f800283a 	ret
  80eea4:	202090fa 	slli	r16,r4,3
  80eea8:	00802074 	movhi	r2,129
  80eeac:	109d4e04 	addi	r2,r2,30008
  80eeb0:	1421883a 	add	r16,r2,r16
  80eeb4:	80800017 	ldw	r2,0(r16)
  80eeb8:	80c00117 	ldw	r3,4(r16)
  80eebc:	dfc00117 	ldw	ra,4(sp)
  80eec0:	dc000017 	ldw	r16,0(sp)
  80eec4:	dec00204 	addi	sp,sp,8
  80eec8:	f800283a 	ret

0080eecc <__copybits>:
  80eecc:	297fffc4 	addi	r5,r5,-1
  80eed0:	280fd17a 	srai	r7,r5,5
  80eed4:	30c00417 	ldw	r3,16(r6)
  80eed8:	30800504 	addi	r2,r6,20
  80eedc:	39c00044 	addi	r7,r7,1
  80eee0:	18c7883a 	add	r3,r3,r3
  80eee4:	39cf883a 	add	r7,r7,r7
  80eee8:	18c7883a 	add	r3,r3,r3
  80eeec:	39cf883a 	add	r7,r7,r7
  80eef0:	10c7883a 	add	r3,r2,r3
  80eef4:	21cf883a 	add	r7,r4,r7
  80eef8:	10c00d2e 	bgeu	r2,r3,80ef30 <__copybits+0x64>
  80eefc:	200b883a 	mov	r5,r4
  80ef00:	12000017 	ldw	r8,0(r2)
  80ef04:	29400104 	addi	r5,r5,4
  80ef08:	10800104 	addi	r2,r2,4
  80ef0c:	2a3fff15 	stw	r8,-4(r5)
  80ef10:	10fffb36 	bltu	r2,r3,80ef00 <__alt_mem_onchip_mem+0xff806f00>
  80ef14:	1985c83a 	sub	r2,r3,r6
  80ef18:	10bffac4 	addi	r2,r2,-21
  80ef1c:	1004d0ba 	srli	r2,r2,2
  80ef20:	10800044 	addi	r2,r2,1
  80ef24:	1085883a 	add	r2,r2,r2
  80ef28:	1085883a 	add	r2,r2,r2
  80ef2c:	2089883a 	add	r4,r4,r2
  80ef30:	21c0032e 	bgeu	r4,r7,80ef40 <__copybits+0x74>
  80ef34:	20000015 	stw	zero,0(r4)
  80ef38:	21000104 	addi	r4,r4,4
  80ef3c:	21fffd36 	bltu	r4,r7,80ef34 <__alt_mem_onchip_mem+0xff806f34>
  80ef40:	f800283a 	ret

0080ef44 <__any_on>:
  80ef44:	20c00417 	ldw	r3,16(r4)
  80ef48:	2805d17a 	srai	r2,r5,5
  80ef4c:	21000504 	addi	r4,r4,20
  80ef50:	18800d0e 	bge	r3,r2,80ef88 <__any_on+0x44>
  80ef54:	18c7883a 	add	r3,r3,r3
  80ef58:	18c7883a 	add	r3,r3,r3
  80ef5c:	20c7883a 	add	r3,r4,r3
  80ef60:	20c0192e 	bgeu	r4,r3,80efc8 <__any_on+0x84>
  80ef64:	18bfff17 	ldw	r2,-4(r3)
  80ef68:	18ffff04 	addi	r3,r3,-4
  80ef6c:	1000041e 	bne	r2,zero,80ef80 <__any_on+0x3c>
  80ef70:	20c0142e 	bgeu	r4,r3,80efc4 <__any_on+0x80>
  80ef74:	18ffff04 	addi	r3,r3,-4
  80ef78:	19400017 	ldw	r5,0(r3)
  80ef7c:	283ffc26 	beq	r5,zero,80ef70 <__alt_mem_onchip_mem+0xff806f70>
  80ef80:	00800044 	movi	r2,1
  80ef84:	f800283a 	ret
  80ef88:	10c00a0e 	bge	r2,r3,80efb4 <__any_on+0x70>
  80ef8c:	1085883a 	add	r2,r2,r2
  80ef90:	1085883a 	add	r2,r2,r2
  80ef94:	294007cc 	andi	r5,r5,31
  80ef98:	2087883a 	add	r3,r4,r2
  80ef9c:	283ff026 	beq	r5,zero,80ef60 <__alt_mem_onchip_mem+0xff806f60>
  80efa0:	19800017 	ldw	r6,0(r3)
  80efa4:	3144d83a 	srl	r2,r6,r5
  80efa8:	114a983a 	sll	r5,r2,r5
  80efac:	317ff41e 	bne	r6,r5,80ef80 <__alt_mem_onchip_mem+0xff806f80>
  80efb0:	003feb06 	br	80ef60 <__alt_mem_onchip_mem+0xff806f60>
  80efb4:	1085883a 	add	r2,r2,r2
  80efb8:	1085883a 	add	r2,r2,r2
  80efbc:	2087883a 	add	r3,r4,r2
  80efc0:	003fe706 	br	80ef60 <__alt_mem_onchip_mem+0xff806f60>
  80efc4:	f800283a 	ret
  80efc8:	0005883a 	mov	r2,zero
  80efcc:	f800283a 	ret

0080efd0 <_read_r>:
  80efd0:	defffd04 	addi	sp,sp,-12
  80efd4:	2805883a 	mov	r2,r5
  80efd8:	dc000015 	stw	r16,0(sp)
  80efdc:	040020b4 	movhi	r16,130
  80efe0:	dc400115 	stw	r17,4(sp)
  80efe4:	300b883a 	mov	r5,r6
  80efe8:	842cd104 	addi	r16,r16,-19644
  80efec:	2023883a 	mov	r17,r4
  80eff0:	380d883a 	mov	r6,r7
  80eff4:	1009883a 	mov	r4,r2
  80eff8:	dfc00215 	stw	ra,8(sp)
  80effc:	80000015 	stw	zero,0(r16)
  80f000:	0813af40 	call	813af4 <read>
  80f004:	00ffffc4 	movi	r3,-1
  80f008:	10c00526 	beq	r2,r3,80f020 <_read_r+0x50>
  80f00c:	dfc00217 	ldw	ra,8(sp)
  80f010:	dc400117 	ldw	r17,4(sp)
  80f014:	dc000017 	ldw	r16,0(sp)
  80f018:	dec00304 	addi	sp,sp,12
  80f01c:	f800283a 	ret
  80f020:	80c00017 	ldw	r3,0(r16)
  80f024:	183ff926 	beq	r3,zero,80f00c <__alt_mem_onchip_mem+0xff80700c>
  80f028:	88c00015 	stw	r3,0(r17)
  80f02c:	003ff706 	br	80f00c <__alt_mem_onchip_mem+0xff80700c>

0080f030 <_realloc_r>:
  80f030:	defff604 	addi	sp,sp,-40
  80f034:	dc800215 	stw	r18,8(sp)
  80f038:	dfc00915 	stw	ra,36(sp)
  80f03c:	df000815 	stw	fp,32(sp)
  80f040:	ddc00715 	stw	r23,28(sp)
  80f044:	dd800615 	stw	r22,24(sp)
  80f048:	dd400515 	stw	r21,20(sp)
  80f04c:	dd000415 	stw	r20,16(sp)
  80f050:	dcc00315 	stw	r19,12(sp)
  80f054:	dc400115 	stw	r17,4(sp)
  80f058:	dc000015 	stw	r16,0(sp)
  80f05c:	3025883a 	mov	r18,r6
  80f060:	2800b726 	beq	r5,zero,80f340 <_realloc_r+0x310>
  80f064:	282b883a 	mov	r21,r5
  80f068:	2029883a 	mov	r20,r4
  80f06c:	081381c0 	call	81381c <__malloc_lock>
  80f070:	a8bfff17 	ldw	r2,-4(r21)
  80f074:	043fff04 	movi	r16,-4
  80f078:	90c002c4 	addi	r3,r18,11
  80f07c:	01000584 	movi	r4,22
  80f080:	acfffe04 	addi	r19,r21,-8
  80f084:	1420703a 	and	r16,r2,r16
  80f088:	20c0332e 	bgeu	r4,r3,80f158 <_realloc_r+0x128>
  80f08c:	047ffe04 	movi	r17,-8
  80f090:	1c62703a 	and	r17,r3,r17
  80f094:	8807883a 	mov	r3,r17
  80f098:	88005816 	blt	r17,zero,80f1fc <_realloc_r+0x1cc>
  80f09c:	8c805736 	bltu	r17,r18,80f1fc <_realloc_r+0x1cc>
  80f0a0:	80c0300e 	bge	r16,r3,80f164 <_realloc_r+0x134>
  80f0a4:	07002074 	movhi	fp,129
  80f0a8:	e71f4204 	addi	fp,fp,32008
  80f0ac:	e1c00217 	ldw	r7,8(fp)
  80f0b0:	9c09883a 	add	r4,r19,r16
  80f0b4:	22000117 	ldw	r8,4(r4)
  80f0b8:	21c06326 	beq	r4,r7,80f248 <_realloc_r+0x218>
  80f0bc:	017fff84 	movi	r5,-2
  80f0c0:	414a703a 	and	r5,r8,r5
  80f0c4:	214b883a 	add	r5,r4,r5
  80f0c8:	29800117 	ldw	r6,4(r5)
  80f0cc:	3180004c 	andi	r6,r6,1
  80f0d0:	30003f26 	beq	r6,zero,80f1d0 <_realloc_r+0x1a0>
  80f0d4:	1080004c 	andi	r2,r2,1
  80f0d8:	10008326 	beq	r2,zero,80f2e8 <_realloc_r+0x2b8>
  80f0dc:	900b883a 	mov	r5,r18
  80f0e0:	a009883a 	mov	r4,r20
  80f0e4:	08086b00 	call	8086b0 <_malloc_r>
  80f0e8:	1025883a 	mov	r18,r2
  80f0ec:	10011e26 	beq	r2,zero,80f568 <_realloc_r+0x538>
  80f0f0:	a93fff17 	ldw	r4,-4(r21)
  80f0f4:	10fffe04 	addi	r3,r2,-8
  80f0f8:	00bfff84 	movi	r2,-2
  80f0fc:	2084703a 	and	r2,r4,r2
  80f100:	9885883a 	add	r2,r19,r2
  80f104:	1880ee26 	beq	r3,r2,80f4c0 <_realloc_r+0x490>
  80f108:	81bfff04 	addi	r6,r16,-4
  80f10c:	00800904 	movi	r2,36
  80f110:	1180b836 	bltu	r2,r6,80f3f4 <_realloc_r+0x3c4>
  80f114:	00c004c4 	movi	r3,19
  80f118:	19809636 	bltu	r3,r6,80f374 <_realloc_r+0x344>
  80f11c:	9005883a 	mov	r2,r18
  80f120:	a807883a 	mov	r3,r21
  80f124:	19000017 	ldw	r4,0(r3)
  80f128:	11000015 	stw	r4,0(r2)
  80f12c:	19000117 	ldw	r4,4(r3)
  80f130:	11000115 	stw	r4,4(r2)
  80f134:	18c00217 	ldw	r3,8(r3)
  80f138:	10c00215 	stw	r3,8(r2)
  80f13c:	a80b883a 	mov	r5,r21
  80f140:	a009883a 	mov	r4,r20
  80f144:	0807b800 	call	807b80 <_free_r>
  80f148:	a009883a 	mov	r4,r20
  80f14c:	08138400 	call	813840 <__malloc_unlock>
  80f150:	9005883a 	mov	r2,r18
  80f154:	00001206 	br	80f1a0 <_realloc_r+0x170>
  80f158:	00c00404 	movi	r3,16
  80f15c:	1823883a 	mov	r17,r3
  80f160:	003fce06 	br	80f09c <__alt_mem_onchip_mem+0xff80709c>
  80f164:	a825883a 	mov	r18,r21
  80f168:	8445c83a 	sub	r2,r16,r17
  80f16c:	00c003c4 	movi	r3,15
  80f170:	18802636 	bltu	r3,r2,80f20c <_realloc_r+0x1dc>
  80f174:	99800117 	ldw	r6,4(r19)
  80f178:	9c07883a 	add	r3,r19,r16
  80f17c:	3180004c 	andi	r6,r6,1
  80f180:	3420b03a 	or	r16,r6,r16
  80f184:	9c000115 	stw	r16,4(r19)
  80f188:	18800117 	ldw	r2,4(r3)
  80f18c:	10800054 	ori	r2,r2,1
  80f190:	18800115 	stw	r2,4(r3)
  80f194:	a009883a 	mov	r4,r20
  80f198:	08138400 	call	813840 <__malloc_unlock>
  80f19c:	9005883a 	mov	r2,r18
  80f1a0:	dfc00917 	ldw	ra,36(sp)
  80f1a4:	df000817 	ldw	fp,32(sp)
  80f1a8:	ddc00717 	ldw	r23,28(sp)
  80f1ac:	dd800617 	ldw	r22,24(sp)
  80f1b0:	dd400517 	ldw	r21,20(sp)
  80f1b4:	dd000417 	ldw	r20,16(sp)
  80f1b8:	dcc00317 	ldw	r19,12(sp)
  80f1bc:	dc800217 	ldw	r18,8(sp)
  80f1c0:	dc400117 	ldw	r17,4(sp)
  80f1c4:	dc000017 	ldw	r16,0(sp)
  80f1c8:	dec00a04 	addi	sp,sp,40
  80f1cc:	f800283a 	ret
  80f1d0:	017fff04 	movi	r5,-4
  80f1d4:	414a703a 	and	r5,r8,r5
  80f1d8:	814d883a 	add	r6,r16,r5
  80f1dc:	30c01f16 	blt	r6,r3,80f25c <_realloc_r+0x22c>
  80f1e0:	20800317 	ldw	r2,12(r4)
  80f1e4:	20c00217 	ldw	r3,8(r4)
  80f1e8:	a825883a 	mov	r18,r21
  80f1ec:	3021883a 	mov	r16,r6
  80f1f0:	18800315 	stw	r2,12(r3)
  80f1f4:	10c00215 	stw	r3,8(r2)
  80f1f8:	003fdb06 	br	80f168 <__alt_mem_onchip_mem+0xff807168>
  80f1fc:	00800304 	movi	r2,12
  80f200:	a0800015 	stw	r2,0(r20)
  80f204:	0005883a 	mov	r2,zero
  80f208:	003fe506 	br	80f1a0 <__alt_mem_onchip_mem+0xff8071a0>
  80f20c:	98c00117 	ldw	r3,4(r19)
  80f210:	9c4b883a 	add	r5,r19,r17
  80f214:	11000054 	ori	r4,r2,1
  80f218:	18c0004c 	andi	r3,r3,1
  80f21c:	1c62b03a 	or	r17,r3,r17
  80f220:	9c400115 	stw	r17,4(r19)
  80f224:	29000115 	stw	r4,4(r5)
  80f228:	2885883a 	add	r2,r5,r2
  80f22c:	10c00117 	ldw	r3,4(r2)
  80f230:	29400204 	addi	r5,r5,8
  80f234:	a009883a 	mov	r4,r20
  80f238:	18c00054 	ori	r3,r3,1
  80f23c:	10c00115 	stw	r3,4(r2)
  80f240:	0807b800 	call	807b80 <_free_r>
  80f244:	003fd306 	br	80f194 <__alt_mem_onchip_mem+0xff807194>
  80f248:	017fff04 	movi	r5,-4
  80f24c:	414a703a 	and	r5,r8,r5
  80f250:	89800404 	addi	r6,r17,16
  80f254:	8151883a 	add	r8,r16,r5
  80f258:	4180590e 	bge	r8,r6,80f3c0 <_realloc_r+0x390>
  80f25c:	1080004c 	andi	r2,r2,1
  80f260:	103f9e1e 	bne	r2,zero,80f0dc <__alt_mem_onchip_mem+0xff8070dc>
  80f264:	adbffe17 	ldw	r22,-8(r21)
  80f268:	00bfff04 	movi	r2,-4
  80f26c:	9dadc83a 	sub	r22,r19,r22
  80f270:	b1800117 	ldw	r6,4(r22)
  80f274:	3084703a 	and	r2,r6,r2
  80f278:	20002026 	beq	r4,zero,80f2fc <_realloc_r+0x2cc>
  80f27c:	80af883a 	add	r23,r16,r2
  80f280:	b96f883a 	add	r23,r23,r5
  80f284:	21c05f26 	beq	r4,r7,80f404 <_realloc_r+0x3d4>
  80f288:	b8c01c16 	blt	r23,r3,80f2fc <_realloc_r+0x2cc>
  80f28c:	20800317 	ldw	r2,12(r4)
  80f290:	20c00217 	ldw	r3,8(r4)
  80f294:	81bfff04 	addi	r6,r16,-4
  80f298:	01000904 	movi	r4,36
  80f29c:	18800315 	stw	r2,12(r3)
  80f2a0:	10c00215 	stw	r3,8(r2)
  80f2a4:	b0c00217 	ldw	r3,8(r22)
  80f2a8:	b0800317 	ldw	r2,12(r22)
  80f2ac:	b4800204 	addi	r18,r22,8
  80f2b0:	18800315 	stw	r2,12(r3)
  80f2b4:	10c00215 	stw	r3,8(r2)
  80f2b8:	21801b36 	bltu	r4,r6,80f328 <_realloc_r+0x2f8>
  80f2bc:	008004c4 	movi	r2,19
  80f2c0:	1180352e 	bgeu	r2,r6,80f398 <_realloc_r+0x368>
  80f2c4:	a8800017 	ldw	r2,0(r21)
  80f2c8:	b0800215 	stw	r2,8(r22)
  80f2cc:	a8800117 	ldw	r2,4(r21)
  80f2d0:	b0800315 	stw	r2,12(r22)
  80f2d4:	008006c4 	movi	r2,27
  80f2d8:	11807f36 	bltu	r2,r6,80f4d8 <_realloc_r+0x4a8>
  80f2dc:	b0800404 	addi	r2,r22,16
  80f2e0:	ad400204 	addi	r21,r21,8
  80f2e4:	00002d06 	br	80f39c <_realloc_r+0x36c>
  80f2e8:	adbffe17 	ldw	r22,-8(r21)
  80f2ec:	00bfff04 	movi	r2,-4
  80f2f0:	9dadc83a 	sub	r22,r19,r22
  80f2f4:	b1000117 	ldw	r4,4(r22)
  80f2f8:	2084703a 	and	r2,r4,r2
  80f2fc:	b03f7726 	beq	r22,zero,80f0dc <__alt_mem_onchip_mem+0xff8070dc>
  80f300:	80af883a 	add	r23,r16,r2
  80f304:	b8ff7516 	blt	r23,r3,80f0dc <__alt_mem_onchip_mem+0xff8070dc>
  80f308:	b0800317 	ldw	r2,12(r22)
  80f30c:	b0c00217 	ldw	r3,8(r22)
  80f310:	81bfff04 	addi	r6,r16,-4
  80f314:	01000904 	movi	r4,36
  80f318:	18800315 	stw	r2,12(r3)
  80f31c:	10c00215 	stw	r3,8(r2)
  80f320:	b4800204 	addi	r18,r22,8
  80f324:	21bfe52e 	bgeu	r4,r6,80f2bc <__alt_mem_onchip_mem+0xff8072bc>
  80f328:	a80b883a 	mov	r5,r21
  80f32c:	9009883a 	mov	r4,r18
  80f330:	080de780 	call	80de78 <memmove>
  80f334:	b821883a 	mov	r16,r23
  80f338:	b027883a 	mov	r19,r22
  80f33c:	003f8a06 	br	80f168 <__alt_mem_onchip_mem+0xff807168>
  80f340:	300b883a 	mov	r5,r6
  80f344:	dfc00917 	ldw	ra,36(sp)
  80f348:	df000817 	ldw	fp,32(sp)
  80f34c:	ddc00717 	ldw	r23,28(sp)
  80f350:	dd800617 	ldw	r22,24(sp)
  80f354:	dd400517 	ldw	r21,20(sp)
  80f358:	dd000417 	ldw	r20,16(sp)
  80f35c:	dcc00317 	ldw	r19,12(sp)
  80f360:	dc800217 	ldw	r18,8(sp)
  80f364:	dc400117 	ldw	r17,4(sp)
  80f368:	dc000017 	ldw	r16,0(sp)
  80f36c:	dec00a04 	addi	sp,sp,40
  80f370:	08086b01 	jmpi	8086b0 <_malloc_r>
  80f374:	a8c00017 	ldw	r3,0(r21)
  80f378:	90c00015 	stw	r3,0(r18)
  80f37c:	a8c00117 	ldw	r3,4(r21)
  80f380:	90c00115 	stw	r3,4(r18)
  80f384:	00c006c4 	movi	r3,27
  80f388:	19804536 	bltu	r3,r6,80f4a0 <_realloc_r+0x470>
  80f38c:	90800204 	addi	r2,r18,8
  80f390:	a8c00204 	addi	r3,r21,8
  80f394:	003f6306 	br	80f124 <__alt_mem_onchip_mem+0xff807124>
  80f398:	9005883a 	mov	r2,r18
  80f39c:	a8c00017 	ldw	r3,0(r21)
  80f3a0:	b821883a 	mov	r16,r23
  80f3a4:	b027883a 	mov	r19,r22
  80f3a8:	10c00015 	stw	r3,0(r2)
  80f3ac:	a8c00117 	ldw	r3,4(r21)
  80f3b0:	10c00115 	stw	r3,4(r2)
  80f3b4:	a8c00217 	ldw	r3,8(r21)
  80f3b8:	10c00215 	stw	r3,8(r2)
  80f3bc:	003f6a06 	br	80f168 <__alt_mem_onchip_mem+0xff807168>
  80f3c0:	9c67883a 	add	r19,r19,r17
  80f3c4:	4445c83a 	sub	r2,r8,r17
  80f3c8:	e4c00215 	stw	r19,8(fp)
  80f3cc:	10800054 	ori	r2,r2,1
  80f3d0:	98800115 	stw	r2,4(r19)
  80f3d4:	a8bfff17 	ldw	r2,-4(r21)
  80f3d8:	a009883a 	mov	r4,r20
  80f3dc:	1080004c 	andi	r2,r2,1
  80f3e0:	1462b03a 	or	r17,r2,r17
  80f3e4:	ac7fff15 	stw	r17,-4(r21)
  80f3e8:	08138400 	call	813840 <__malloc_unlock>
  80f3ec:	a805883a 	mov	r2,r21
  80f3f0:	003f6b06 	br	80f1a0 <__alt_mem_onchip_mem+0xff8071a0>
  80f3f4:	a80b883a 	mov	r5,r21
  80f3f8:	9009883a 	mov	r4,r18
  80f3fc:	080de780 	call	80de78 <memmove>
  80f400:	003f4e06 	br	80f13c <__alt_mem_onchip_mem+0xff80713c>
  80f404:	89000404 	addi	r4,r17,16
  80f408:	b93fbc16 	blt	r23,r4,80f2fc <__alt_mem_onchip_mem+0xff8072fc>
  80f40c:	b0800317 	ldw	r2,12(r22)
  80f410:	b0c00217 	ldw	r3,8(r22)
  80f414:	81bfff04 	addi	r6,r16,-4
  80f418:	01000904 	movi	r4,36
  80f41c:	18800315 	stw	r2,12(r3)
  80f420:	10c00215 	stw	r3,8(r2)
  80f424:	b4800204 	addi	r18,r22,8
  80f428:	21804336 	bltu	r4,r6,80f538 <_realloc_r+0x508>
  80f42c:	008004c4 	movi	r2,19
  80f430:	11803f2e 	bgeu	r2,r6,80f530 <_realloc_r+0x500>
  80f434:	a8800017 	ldw	r2,0(r21)
  80f438:	b0800215 	stw	r2,8(r22)
  80f43c:	a8800117 	ldw	r2,4(r21)
  80f440:	b0800315 	stw	r2,12(r22)
  80f444:	008006c4 	movi	r2,27
  80f448:	11803f36 	bltu	r2,r6,80f548 <_realloc_r+0x518>
  80f44c:	b0800404 	addi	r2,r22,16
  80f450:	ad400204 	addi	r21,r21,8
  80f454:	a8c00017 	ldw	r3,0(r21)
  80f458:	10c00015 	stw	r3,0(r2)
  80f45c:	a8c00117 	ldw	r3,4(r21)
  80f460:	10c00115 	stw	r3,4(r2)
  80f464:	a8c00217 	ldw	r3,8(r21)
  80f468:	10c00215 	stw	r3,8(r2)
  80f46c:	b447883a 	add	r3,r22,r17
  80f470:	bc45c83a 	sub	r2,r23,r17
  80f474:	e0c00215 	stw	r3,8(fp)
  80f478:	10800054 	ori	r2,r2,1
  80f47c:	18800115 	stw	r2,4(r3)
  80f480:	b0800117 	ldw	r2,4(r22)
  80f484:	a009883a 	mov	r4,r20
  80f488:	1080004c 	andi	r2,r2,1
  80f48c:	1462b03a 	or	r17,r2,r17
  80f490:	b4400115 	stw	r17,4(r22)
  80f494:	08138400 	call	813840 <__malloc_unlock>
  80f498:	9005883a 	mov	r2,r18
  80f49c:	003f4006 	br	80f1a0 <__alt_mem_onchip_mem+0xff8071a0>
  80f4a0:	a8c00217 	ldw	r3,8(r21)
  80f4a4:	90c00215 	stw	r3,8(r18)
  80f4a8:	a8c00317 	ldw	r3,12(r21)
  80f4ac:	90c00315 	stw	r3,12(r18)
  80f4b0:	30801126 	beq	r6,r2,80f4f8 <_realloc_r+0x4c8>
  80f4b4:	90800404 	addi	r2,r18,16
  80f4b8:	a8c00404 	addi	r3,r21,16
  80f4bc:	003f1906 	br	80f124 <__alt_mem_onchip_mem+0xff807124>
  80f4c0:	90ffff17 	ldw	r3,-4(r18)
  80f4c4:	00bfff04 	movi	r2,-4
  80f4c8:	a825883a 	mov	r18,r21
  80f4cc:	1884703a 	and	r2,r3,r2
  80f4d0:	80a1883a 	add	r16,r16,r2
  80f4d4:	003f2406 	br	80f168 <__alt_mem_onchip_mem+0xff807168>
  80f4d8:	a8800217 	ldw	r2,8(r21)
  80f4dc:	b0800415 	stw	r2,16(r22)
  80f4e0:	a8800317 	ldw	r2,12(r21)
  80f4e4:	b0800515 	stw	r2,20(r22)
  80f4e8:	31000a26 	beq	r6,r4,80f514 <_realloc_r+0x4e4>
  80f4ec:	b0800604 	addi	r2,r22,24
  80f4f0:	ad400404 	addi	r21,r21,16
  80f4f4:	003fa906 	br	80f39c <__alt_mem_onchip_mem+0xff80739c>
  80f4f8:	a9000417 	ldw	r4,16(r21)
  80f4fc:	90800604 	addi	r2,r18,24
  80f500:	a8c00604 	addi	r3,r21,24
  80f504:	91000415 	stw	r4,16(r18)
  80f508:	a9000517 	ldw	r4,20(r21)
  80f50c:	91000515 	stw	r4,20(r18)
  80f510:	003f0406 	br	80f124 <__alt_mem_onchip_mem+0xff807124>
  80f514:	a8c00417 	ldw	r3,16(r21)
  80f518:	ad400604 	addi	r21,r21,24
  80f51c:	b0800804 	addi	r2,r22,32
  80f520:	b0c00615 	stw	r3,24(r22)
  80f524:	a8ffff17 	ldw	r3,-4(r21)
  80f528:	b0c00715 	stw	r3,28(r22)
  80f52c:	003f9b06 	br	80f39c <__alt_mem_onchip_mem+0xff80739c>
  80f530:	9005883a 	mov	r2,r18
  80f534:	003fc706 	br	80f454 <__alt_mem_onchip_mem+0xff807454>
  80f538:	a80b883a 	mov	r5,r21
  80f53c:	9009883a 	mov	r4,r18
  80f540:	080de780 	call	80de78 <memmove>
  80f544:	003fc906 	br	80f46c <__alt_mem_onchip_mem+0xff80746c>
  80f548:	a8800217 	ldw	r2,8(r21)
  80f54c:	b0800415 	stw	r2,16(r22)
  80f550:	a8800317 	ldw	r2,12(r21)
  80f554:	b0800515 	stw	r2,20(r22)
  80f558:	31000726 	beq	r6,r4,80f578 <_realloc_r+0x548>
  80f55c:	b0800604 	addi	r2,r22,24
  80f560:	ad400404 	addi	r21,r21,16
  80f564:	003fbb06 	br	80f454 <__alt_mem_onchip_mem+0xff807454>
  80f568:	a009883a 	mov	r4,r20
  80f56c:	08138400 	call	813840 <__malloc_unlock>
  80f570:	0005883a 	mov	r2,zero
  80f574:	003f0a06 	br	80f1a0 <__alt_mem_onchip_mem+0xff8071a0>
  80f578:	a8c00417 	ldw	r3,16(r21)
  80f57c:	ad400604 	addi	r21,r21,24
  80f580:	b0800804 	addi	r2,r22,32
  80f584:	b0c00615 	stw	r3,24(r22)
  80f588:	a8ffff17 	ldw	r3,-4(r21)
  80f58c:	b0c00715 	stw	r3,28(r22)
  80f590:	003fb006 	br	80f454 <__alt_mem_onchip_mem+0xff807454>

0080f594 <__fpclassifyd>:
  80f594:	00a00034 	movhi	r2,32768
  80f598:	10bfffc4 	addi	r2,r2,-1
  80f59c:	2884703a 	and	r2,r5,r2
  80f5a0:	10000726 	beq	r2,zero,80f5c0 <__fpclassifyd+0x2c>
  80f5a4:	00fffc34 	movhi	r3,65520
  80f5a8:	019ff834 	movhi	r6,32736
  80f5ac:	28c7883a 	add	r3,r5,r3
  80f5b0:	31bfffc4 	addi	r6,r6,-1
  80f5b4:	30c00536 	bltu	r6,r3,80f5cc <__fpclassifyd+0x38>
  80f5b8:	00800104 	movi	r2,4
  80f5bc:	f800283a 	ret
  80f5c0:	2000021e 	bne	r4,zero,80f5cc <__fpclassifyd+0x38>
  80f5c4:	00800084 	movi	r2,2
  80f5c8:	f800283a 	ret
  80f5cc:	00dffc34 	movhi	r3,32752
  80f5d0:	019ff834 	movhi	r6,32736
  80f5d4:	28cb883a 	add	r5,r5,r3
  80f5d8:	31bfffc4 	addi	r6,r6,-1
  80f5dc:	317ff62e 	bgeu	r6,r5,80f5b8 <__alt_mem_onchip_mem+0xff8075b8>
  80f5e0:	01400434 	movhi	r5,16
  80f5e4:	297fffc4 	addi	r5,r5,-1
  80f5e8:	28800236 	bltu	r5,r2,80f5f4 <__fpclassifyd+0x60>
  80f5ec:	008000c4 	movi	r2,3
  80f5f0:	f800283a 	ret
  80f5f4:	10c00226 	beq	r2,r3,80f600 <__fpclassifyd+0x6c>
  80f5f8:	0005883a 	mov	r2,zero
  80f5fc:	f800283a 	ret
  80f600:	2005003a 	cmpeq	r2,r4,zero
  80f604:	f800283a 	ret

0080f608 <strcmp>:
  80f608:	2144b03a 	or	r2,r4,r5
  80f60c:	108000cc 	andi	r2,r2,3
  80f610:	1000171e 	bne	r2,zero,80f670 <strcmp+0x68>
  80f614:	20800017 	ldw	r2,0(r4)
  80f618:	28c00017 	ldw	r3,0(r5)
  80f61c:	10c0141e 	bne	r2,r3,80f670 <strcmp+0x68>
  80f620:	027fbff4 	movhi	r9,65279
  80f624:	4a7fbfc4 	addi	r9,r9,-257
  80f628:	0086303a 	nor	r3,zero,r2
  80f62c:	02202074 	movhi	r8,32897
  80f630:	1245883a 	add	r2,r2,r9
  80f634:	42202004 	addi	r8,r8,-32640
  80f638:	10c4703a 	and	r2,r2,r3
  80f63c:	1204703a 	and	r2,r2,r8
  80f640:	10000226 	beq	r2,zero,80f64c <strcmp+0x44>
  80f644:	00002306 	br	80f6d4 <strcmp+0xcc>
  80f648:	1000221e 	bne	r2,zero,80f6d4 <strcmp+0xcc>
  80f64c:	21000104 	addi	r4,r4,4
  80f650:	20c00017 	ldw	r3,0(r4)
  80f654:	29400104 	addi	r5,r5,4
  80f658:	29800017 	ldw	r6,0(r5)
  80f65c:	1a4f883a 	add	r7,r3,r9
  80f660:	00c4303a 	nor	r2,zero,r3
  80f664:	3884703a 	and	r2,r7,r2
  80f668:	1204703a 	and	r2,r2,r8
  80f66c:	19bff626 	beq	r3,r6,80f648 <__alt_mem_onchip_mem+0xff807648>
  80f670:	20800003 	ldbu	r2,0(r4)
  80f674:	10c03fcc 	andi	r3,r2,255
  80f678:	18c0201c 	xori	r3,r3,128
  80f67c:	18ffe004 	addi	r3,r3,-128
  80f680:	18000c26 	beq	r3,zero,80f6b4 <strcmp+0xac>
  80f684:	29800007 	ldb	r6,0(r5)
  80f688:	19800326 	beq	r3,r6,80f698 <strcmp+0x90>
  80f68c:	00001306 	br	80f6dc <strcmp+0xd4>
  80f690:	29800007 	ldb	r6,0(r5)
  80f694:	11800b1e 	bne	r2,r6,80f6c4 <strcmp+0xbc>
  80f698:	21000044 	addi	r4,r4,1
  80f69c:	20c00003 	ldbu	r3,0(r4)
  80f6a0:	29400044 	addi	r5,r5,1
  80f6a4:	18803fcc 	andi	r2,r3,255
  80f6a8:	1080201c 	xori	r2,r2,128
  80f6ac:	10bfe004 	addi	r2,r2,-128
  80f6b0:	103ff71e 	bne	r2,zero,80f690 <__alt_mem_onchip_mem+0xff807690>
  80f6b4:	0007883a 	mov	r3,zero
  80f6b8:	28800003 	ldbu	r2,0(r5)
  80f6bc:	1885c83a 	sub	r2,r3,r2
  80f6c0:	f800283a 	ret
  80f6c4:	28800003 	ldbu	r2,0(r5)
  80f6c8:	18c03fcc 	andi	r3,r3,255
  80f6cc:	1885c83a 	sub	r2,r3,r2
  80f6d0:	f800283a 	ret
  80f6d4:	0005883a 	mov	r2,zero
  80f6d8:	f800283a 	ret
  80f6dc:	10c03fcc 	andi	r3,r2,255
  80f6e0:	003ff506 	br	80f6b8 <__alt_mem_onchip_mem+0xff8076b8>

0080f6e4 <__sprint_r.part.0>:
  80f6e4:	28801917 	ldw	r2,100(r5)
  80f6e8:	defff604 	addi	sp,sp,-40
  80f6ec:	dd400515 	stw	r21,20(sp)
  80f6f0:	dfc00915 	stw	ra,36(sp)
  80f6f4:	df000815 	stw	fp,32(sp)
  80f6f8:	ddc00715 	stw	r23,28(sp)
  80f6fc:	dd800615 	stw	r22,24(sp)
  80f700:	dd000415 	stw	r20,16(sp)
  80f704:	dcc00315 	stw	r19,12(sp)
  80f708:	dc800215 	stw	r18,8(sp)
  80f70c:	dc400115 	stw	r17,4(sp)
  80f710:	dc000015 	stw	r16,0(sp)
  80f714:	1088000c 	andi	r2,r2,8192
  80f718:	302b883a 	mov	r21,r6
  80f71c:	10002e26 	beq	r2,zero,80f7d8 <__sprint_r.part.0+0xf4>
  80f720:	30800217 	ldw	r2,8(r6)
  80f724:	35800017 	ldw	r22,0(r6)
  80f728:	10002926 	beq	r2,zero,80f7d0 <__sprint_r.part.0+0xec>
  80f72c:	2827883a 	mov	r19,r5
  80f730:	2029883a 	mov	r20,r4
  80f734:	b5c00104 	addi	r23,r22,4
  80f738:	04bfffc4 	movi	r18,-1
  80f73c:	bc400017 	ldw	r17,0(r23)
  80f740:	b4000017 	ldw	r16,0(r22)
  80f744:	0039883a 	mov	fp,zero
  80f748:	8822d0ba 	srli	r17,r17,2
  80f74c:	8800031e 	bne	r17,zero,80f75c <__sprint_r.part.0+0x78>
  80f750:	00001806 	br	80f7b4 <__sprint_r.part.0+0xd0>
  80f754:	84000104 	addi	r16,r16,4
  80f758:	8f001526 	beq	r17,fp,80f7b0 <__sprint_r.part.0+0xcc>
  80f75c:	81400017 	ldw	r5,0(r16)
  80f760:	980d883a 	mov	r6,r19
  80f764:	a009883a 	mov	r4,r20
  80f768:	0810f540 	call	810f54 <_fputwc_r>
  80f76c:	e7000044 	addi	fp,fp,1
  80f770:	14bff81e 	bne	r2,r18,80f754 <__alt_mem_onchip_mem+0xff807754>
  80f774:	9005883a 	mov	r2,r18
  80f778:	a8000215 	stw	zero,8(r21)
  80f77c:	a8000115 	stw	zero,4(r21)
  80f780:	dfc00917 	ldw	ra,36(sp)
  80f784:	df000817 	ldw	fp,32(sp)
  80f788:	ddc00717 	ldw	r23,28(sp)
  80f78c:	dd800617 	ldw	r22,24(sp)
  80f790:	dd400517 	ldw	r21,20(sp)
  80f794:	dd000417 	ldw	r20,16(sp)
  80f798:	dcc00317 	ldw	r19,12(sp)
  80f79c:	dc800217 	ldw	r18,8(sp)
  80f7a0:	dc400117 	ldw	r17,4(sp)
  80f7a4:	dc000017 	ldw	r16,0(sp)
  80f7a8:	dec00a04 	addi	sp,sp,40
  80f7ac:	f800283a 	ret
  80f7b0:	a8800217 	ldw	r2,8(r21)
  80f7b4:	8c63883a 	add	r17,r17,r17
  80f7b8:	8c63883a 	add	r17,r17,r17
  80f7bc:	1445c83a 	sub	r2,r2,r17
  80f7c0:	a8800215 	stw	r2,8(r21)
  80f7c4:	b5800204 	addi	r22,r22,8
  80f7c8:	bdc00204 	addi	r23,r23,8
  80f7cc:	103fdb1e 	bne	r2,zero,80f73c <__alt_mem_onchip_mem+0xff80773c>
  80f7d0:	0005883a 	mov	r2,zero
  80f7d4:	003fe806 	br	80f778 <__alt_mem_onchip_mem+0xff807778>
  80f7d8:	080d6000 	call	80d600 <__sfvwrite_r>
  80f7dc:	003fe606 	br	80f778 <__alt_mem_onchip_mem+0xff807778>

0080f7e0 <__sprint_r>:
  80f7e0:	30c00217 	ldw	r3,8(r6)
  80f7e4:	18000126 	beq	r3,zero,80f7ec <__sprint_r+0xc>
  80f7e8:	080f6e41 	jmpi	80f6e4 <__sprint_r.part.0>
  80f7ec:	30000115 	stw	zero,4(r6)
  80f7f0:	0005883a 	mov	r2,zero
  80f7f4:	f800283a 	ret

0080f7f8 <___vfiprintf_internal_r>:
  80f7f8:	deffc904 	addi	sp,sp,-220
  80f7fc:	df003515 	stw	fp,212(sp)
  80f800:	dd003115 	stw	r20,196(sp)
  80f804:	dfc03615 	stw	ra,216(sp)
  80f808:	ddc03415 	stw	r23,208(sp)
  80f80c:	dd803315 	stw	r22,204(sp)
  80f810:	dd403215 	stw	r21,200(sp)
  80f814:	dcc03015 	stw	r19,192(sp)
  80f818:	dc802f15 	stw	r18,188(sp)
  80f81c:	dc402e15 	stw	r17,184(sp)
  80f820:	dc002d15 	stw	r16,180(sp)
  80f824:	d9002015 	stw	r4,128(sp)
  80f828:	d9c02215 	stw	r7,136(sp)
  80f82c:	2829883a 	mov	r20,r5
  80f830:	3039883a 	mov	fp,r6
  80f834:	20000226 	beq	r4,zero,80f840 <___vfiprintf_internal_r+0x48>
  80f838:	20800e17 	ldw	r2,56(r4)
  80f83c:	1000cf26 	beq	r2,zero,80fb7c <___vfiprintf_internal_r+0x384>
  80f840:	a080030b 	ldhu	r2,12(r20)
  80f844:	10c8000c 	andi	r3,r2,8192
  80f848:	1800061e 	bne	r3,zero,80f864 <___vfiprintf_internal_r+0x6c>
  80f84c:	a1001917 	ldw	r4,100(r20)
  80f850:	00f7ffc4 	movi	r3,-8193
  80f854:	10880014 	ori	r2,r2,8192
  80f858:	20c6703a 	and	r3,r4,r3
  80f85c:	a080030d 	sth	r2,12(r20)
  80f860:	a0c01915 	stw	r3,100(r20)
  80f864:	10c0020c 	andi	r3,r2,8
  80f868:	1800a926 	beq	r3,zero,80fb10 <___vfiprintf_internal_r+0x318>
  80f86c:	a0c00417 	ldw	r3,16(r20)
  80f870:	1800a726 	beq	r3,zero,80fb10 <___vfiprintf_internal_r+0x318>
  80f874:	1080068c 	andi	r2,r2,26
  80f878:	00c00284 	movi	r3,10
  80f87c:	10c0ac26 	beq	r2,r3,80fb30 <___vfiprintf_internal_r+0x338>
  80f880:	da801a04 	addi	r10,sp,104
  80f884:	da801e15 	stw	r10,120(sp)
  80f888:	d8801e17 	ldw	r2,120(sp)
  80f88c:	da8019c4 	addi	r10,sp,103
  80f890:	05802074 	movhi	r22,129
  80f894:	05c02074 	movhi	r23,129
  80f898:	da801f15 	stw	r10,124(sp)
  80f89c:	1295c83a 	sub	r10,r2,r10
  80f8a0:	b59d8404 	addi	r22,r22,30224
  80f8a4:	bddd8004 	addi	r23,r23,30208
  80f8a8:	dec01a15 	stw	sp,104(sp)
  80f8ac:	d8001c15 	stw	zero,112(sp)
  80f8b0:	d8001b15 	stw	zero,108(sp)
  80f8b4:	d8002615 	stw	zero,152(sp)
  80f8b8:	d8002315 	stw	zero,140(sp)
  80f8bc:	da802715 	stw	r10,156(sp)
  80f8c0:	d811883a 	mov	r8,sp
  80f8c4:	dd002115 	stw	r20,132(sp)
  80f8c8:	e021883a 	mov	r16,fp
  80f8cc:	80800007 	ldb	r2,0(r16)
  80f8d0:	1003ea26 	beq	r2,zero,81087c <___vfiprintf_internal_r+0x1084>
  80f8d4:	00c00944 	movi	r3,37
  80f8d8:	8025883a 	mov	r18,r16
  80f8dc:	10c0021e 	bne	r2,r3,80f8e8 <___vfiprintf_internal_r+0xf0>
  80f8e0:	00001606 	br	80f93c <___vfiprintf_internal_r+0x144>
  80f8e4:	10c00326 	beq	r2,r3,80f8f4 <___vfiprintf_internal_r+0xfc>
  80f8e8:	94800044 	addi	r18,r18,1
  80f8ec:	90800007 	ldb	r2,0(r18)
  80f8f0:	103ffc1e 	bne	r2,zero,80f8e4 <__alt_mem_onchip_mem+0xff8078e4>
  80f8f4:	9423c83a 	sub	r17,r18,r16
  80f8f8:	88001026 	beq	r17,zero,80f93c <___vfiprintf_internal_r+0x144>
  80f8fc:	d8c01c17 	ldw	r3,112(sp)
  80f900:	d8801b17 	ldw	r2,108(sp)
  80f904:	44000015 	stw	r16,0(r8)
  80f908:	88c7883a 	add	r3,r17,r3
  80f90c:	10800044 	addi	r2,r2,1
  80f910:	44400115 	stw	r17,4(r8)
  80f914:	d8c01c15 	stw	r3,112(sp)
  80f918:	d8801b15 	stw	r2,108(sp)
  80f91c:	010001c4 	movi	r4,7
  80f920:	2080760e 	bge	r4,r2,80fafc <___vfiprintf_internal_r+0x304>
  80f924:	1803821e 	bne	r3,zero,810730 <___vfiprintf_internal_r+0xf38>
  80f928:	da802317 	ldw	r10,140(sp)
  80f92c:	d8001b15 	stw	zero,108(sp)
  80f930:	d811883a 	mov	r8,sp
  80f934:	5455883a 	add	r10,r10,r17
  80f938:	da802315 	stw	r10,140(sp)
  80f93c:	90800007 	ldb	r2,0(r18)
  80f940:	10044626 	beq	r2,zero,810a5c <___vfiprintf_internal_r+0x1264>
  80f944:	90c00047 	ldb	r3,1(r18)
  80f948:	94000044 	addi	r16,r18,1
  80f94c:	d8001d85 	stb	zero,118(sp)
  80f950:	0009883a 	mov	r4,zero
  80f954:	000f883a 	mov	r7,zero
  80f958:	027fffc4 	movi	r9,-1
  80f95c:	0023883a 	mov	r17,zero
  80f960:	0029883a 	mov	r20,zero
  80f964:	01401604 	movi	r5,88
  80f968:	01800244 	movi	r6,9
  80f96c:	03400a84 	movi	r13,42
  80f970:	03001b04 	movi	r12,108
  80f974:	84000044 	addi	r16,r16,1
  80f978:	18bff804 	addi	r2,r3,-32
  80f97c:	28827336 	bltu	r5,r2,81034c <___vfiprintf_internal_r+0xb54>
  80f980:	100490ba 	slli	r2,r2,2
  80f984:	02802074 	movhi	r10,129
  80f988:	52be6604 	addi	r10,r10,-1640
  80f98c:	1285883a 	add	r2,r2,r10
  80f990:	10800017 	ldw	r2,0(r2)
  80f994:	1000683a 	jmp	r2
  80f998:	00810080 	call	81008 <__reset-0x77eff8>
  80f99c:	0081034c 	andi	r2,zero,1037
  80f9a0:	0081034c 	andi	r2,zero,1037
  80f9a4:	008100a0 	cmpeqi	r2,zero,1026
  80f9a8:	0081034c 	andi	r2,zero,1037
  80f9ac:	0081034c 	andi	r2,zero,1037
  80f9b0:	0081034c 	andi	r2,zero,1037
  80f9b4:	0081034c 	andi	r2,zero,1037
  80f9b8:	0081034c 	andi	r2,zero,1037
  80f9bc:	0081034c 	andi	r2,zero,1037
  80f9c0:	00810288 	cmpgei	r2,zero,1034
  80f9c4:	008102a4 	muli	r2,zero,1034
  80f9c8:	0081034c 	andi	r2,zero,1037
  80f9cc:	0080fb8c 	andi	r2,zero,1006
  80f9d0:	008102b4 	movhi	r2,1034
  80f9d4:	0081034c 	andi	r2,zero,1037
  80f9d8:	008100ac 	andhi	r2,zero,1026
  80f9dc:	008100b8 	rdprs	r2,zero,1026
  80f9e0:	008100b8 	rdprs	r2,zero,1026
  80f9e4:	008100b8 	rdprs	r2,zero,1026
  80f9e8:	008100b8 	rdprs	r2,zero,1026
  80f9ec:	008100b8 	rdprs	r2,zero,1026
  80f9f0:	008100b8 	rdprs	r2,zero,1026
  80f9f4:	008100b8 	rdprs	r2,zero,1026
  80f9f8:	008100b8 	rdprs	r2,zero,1026
  80f9fc:	008100b8 	rdprs	r2,zero,1026
  80fa00:	0081034c 	andi	r2,zero,1037
  80fa04:	0081034c 	andi	r2,zero,1037
  80fa08:	0081034c 	andi	r2,zero,1037
  80fa0c:	0081034c 	andi	r2,zero,1037
  80fa10:	0081034c 	andi	r2,zero,1037
  80fa14:	0081034c 	andi	r2,zero,1037
  80fa18:	0081034c 	andi	r2,zero,1037
  80fa1c:	0081034c 	andi	r2,zero,1037
  80fa20:	0081034c 	andi	r2,zero,1037
  80fa24:	0081034c 	andi	r2,zero,1037
  80fa28:	008100e4 	muli	r2,zero,1027
  80fa2c:	0081034c 	andi	r2,zero,1037
  80fa30:	0081034c 	andi	r2,zero,1037
  80fa34:	0081034c 	andi	r2,zero,1037
  80fa38:	0081034c 	andi	r2,zero,1037
  80fa3c:	0081034c 	andi	r2,zero,1037
  80fa40:	0081034c 	andi	r2,zero,1037
  80fa44:	0081034c 	andi	r2,zero,1037
  80fa48:	0081034c 	andi	r2,zero,1037
  80fa4c:	0081034c 	andi	r2,zero,1037
  80fa50:	0081034c 	andi	r2,zero,1037
  80fa54:	0081011c 	xori	r2,zero,1028
  80fa58:	0081034c 	andi	r2,zero,1037
  80fa5c:	0081034c 	andi	r2,zero,1037
  80fa60:	0081034c 	andi	r2,zero,1037
  80fa64:	0081034c 	andi	r2,zero,1037
  80fa68:	0081034c 	andi	r2,zero,1037
  80fa6c:	00810174 	movhi	r2,1029
  80fa70:	0081034c 	andi	r2,zero,1037
  80fa74:	0081034c 	andi	r2,zero,1037
  80fa78:	008101e4 	muli	r2,zero,1031
  80fa7c:	0081034c 	andi	r2,zero,1037
  80fa80:	0081034c 	andi	r2,zero,1037
  80fa84:	0081034c 	andi	r2,zero,1037
  80fa88:	0081034c 	andi	r2,zero,1037
  80fa8c:	0081034c 	andi	r2,zero,1037
  80fa90:	0081034c 	andi	r2,zero,1037
  80fa94:	0081034c 	andi	r2,zero,1037
  80fa98:	0081034c 	andi	r2,zero,1037
  80fa9c:	0081034c 	andi	r2,zero,1037
  80faa0:	0081034c 	andi	r2,zero,1037
  80faa4:	0080ff90 	cmplti	r2,zero,1022
  80faa8:	0080ffbc 	xorhi	r2,zero,1022
  80faac:	0081034c 	andi	r2,zero,1037
  80fab0:	0081034c 	andi	r2,zero,1037
  80fab4:	0081034c 	andi	r2,zero,1037
  80fab8:	008102f4 	movhi	r2,1035
  80fabc:	0080ffbc 	xorhi	r2,zero,1022
  80fac0:	0081034c 	andi	r2,zero,1037
  80fac4:	0081034c 	andi	r2,zero,1037
  80fac8:	0080fe50 	cmplti	r2,zero,1017
  80facc:	0081034c 	andi	r2,zero,1037
  80fad0:	0080fe60 	cmpeqi	r2,zero,1017
  80fad4:	0080fe9c 	xori	r2,zero,1018
  80fad8:	0080fb98 	cmpnei	r2,zero,1006
  80fadc:	0080fe44 	movi	r2,1017
  80fae0:	0081034c 	andi	r2,zero,1037
  80fae4:	00810220 	cmpeqi	r2,zero,1032
  80fae8:	0081034c 	andi	r2,zero,1037
  80faec:	00810278 	rdprs	r2,zero,1033
  80faf0:	0081034c 	andi	r2,zero,1037
  80faf4:	0081034c 	andi	r2,zero,1037
  80faf8:	0080ff3c 	xorhi	r2,zero,1020
  80fafc:	42000204 	addi	r8,r8,8
  80fb00:	da802317 	ldw	r10,140(sp)
  80fb04:	5455883a 	add	r10,r10,r17
  80fb08:	da802315 	stw	r10,140(sp)
  80fb0c:	003f8b06 	br	80f93c <__alt_mem_onchip_mem+0xff80793c>
  80fb10:	d9002017 	ldw	r4,128(sp)
  80fb14:	a00b883a 	mov	r5,r20
  80fb18:	080bb240 	call	80bb24 <__swsetup_r>
  80fb1c:	1003b11e 	bne	r2,zero,8109e4 <___vfiprintf_internal_r+0x11ec>
  80fb20:	a080030b 	ldhu	r2,12(r20)
  80fb24:	00c00284 	movi	r3,10
  80fb28:	1080068c 	andi	r2,r2,26
  80fb2c:	10ff541e 	bne	r2,r3,80f880 <__alt_mem_onchip_mem+0xff807880>
  80fb30:	a080038f 	ldh	r2,14(r20)
  80fb34:	103f5216 	blt	r2,zero,80f880 <__alt_mem_onchip_mem+0xff807880>
  80fb38:	d9c02217 	ldw	r7,136(sp)
  80fb3c:	d9002017 	ldw	r4,128(sp)
  80fb40:	e00d883a 	mov	r6,fp
  80fb44:	a00b883a 	mov	r5,r20
  80fb48:	0810c700 	call	810c70 <__sbprintf>
  80fb4c:	dfc03617 	ldw	ra,216(sp)
  80fb50:	df003517 	ldw	fp,212(sp)
  80fb54:	ddc03417 	ldw	r23,208(sp)
  80fb58:	dd803317 	ldw	r22,204(sp)
  80fb5c:	dd403217 	ldw	r21,200(sp)
  80fb60:	dd003117 	ldw	r20,196(sp)
  80fb64:	dcc03017 	ldw	r19,192(sp)
  80fb68:	dc802f17 	ldw	r18,188(sp)
  80fb6c:	dc402e17 	ldw	r17,184(sp)
  80fb70:	dc002d17 	ldw	r16,180(sp)
  80fb74:	dec03704 	addi	sp,sp,220
  80fb78:	f800283a 	ret
  80fb7c:	08078140 	call	807814 <__sinit>
  80fb80:	003f2f06 	br	80f840 <__alt_mem_onchip_mem+0xff807840>
  80fb84:	0463c83a 	sub	r17,zero,r17
  80fb88:	d8802215 	stw	r2,136(sp)
  80fb8c:	a5000114 	ori	r20,r20,4
  80fb90:	80c00007 	ldb	r3,0(r16)
  80fb94:	003f7706 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  80fb98:	00800c04 	movi	r2,48
  80fb9c:	da802217 	ldw	r10,136(sp)
  80fba0:	d8801d05 	stb	r2,116(sp)
  80fba4:	00801e04 	movi	r2,120
  80fba8:	d8801d45 	stb	r2,117(sp)
  80fbac:	d8001d85 	stb	zero,118(sp)
  80fbb0:	50c00104 	addi	r3,r10,4
  80fbb4:	54800017 	ldw	r18,0(r10)
  80fbb8:	0027883a 	mov	r19,zero
  80fbbc:	a0800094 	ori	r2,r20,2
  80fbc0:	48030b16 	blt	r9,zero,8107f0 <___vfiprintf_internal_r+0xff8>
  80fbc4:	00bfdfc4 	movi	r2,-129
  80fbc8:	a096703a 	and	r11,r20,r2
  80fbcc:	d8c02215 	stw	r3,136(sp)
  80fbd0:	5d000094 	ori	r20,r11,2
  80fbd4:	90032b1e 	bne	r18,zero,810884 <___vfiprintf_internal_r+0x108c>
  80fbd8:	00802074 	movhi	r2,129
  80fbdc:	109d2004 	addi	r2,r2,29824
  80fbe0:	d8802615 	stw	r2,152(sp)
  80fbe4:	0039883a 	mov	fp,zero
  80fbe8:	48017b1e 	bne	r9,zero,8101d8 <___vfiprintf_internal_r+0x9e0>
  80fbec:	0013883a 	mov	r9,zero
  80fbf0:	0027883a 	mov	r19,zero
  80fbf4:	dd401a04 	addi	r21,sp,104
  80fbf8:	4825883a 	mov	r18,r9
  80fbfc:	4cc0010e 	bge	r9,r19,80fc04 <___vfiprintf_internal_r+0x40c>
  80fc00:	9825883a 	mov	r18,r19
  80fc04:	e7003fcc 	andi	fp,fp,255
  80fc08:	e700201c 	xori	fp,fp,128
  80fc0c:	e73fe004 	addi	fp,fp,-128
  80fc10:	e0000126 	beq	fp,zero,80fc18 <___vfiprintf_internal_r+0x420>
  80fc14:	94800044 	addi	r18,r18,1
  80fc18:	a380008c 	andi	r14,r20,2
  80fc1c:	70000126 	beq	r14,zero,80fc24 <___vfiprintf_internal_r+0x42c>
  80fc20:	94800084 	addi	r18,r18,2
  80fc24:	a700210c 	andi	fp,r20,132
  80fc28:	e001df1e 	bne	fp,zero,8103a8 <___vfiprintf_internal_r+0xbb0>
  80fc2c:	8c87c83a 	sub	r3,r17,r18
  80fc30:	00c1dd0e 	bge	zero,r3,8103a8 <___vfiprintf_internal_r+0xbb0>
  80fc34:	01c00404 	movi	r7,16
  80fc38:	d8801c17 	ldw	r2,112(sp)
  80fc3c:	38c3ad0e 	bge	r7,r3,810af4 <___vfiprintf_internal_r+0x12fc>
  80fc40:	02802074 	movhi	r10,129
  80fc44:	529d8404 	addi	r10,r10,30224
  80fc48:	dc002915 	stw	r16,164(sp)
  80fc4c:	d9801b17 	ldw	r6,108(sp)
  80fc50:	da802415 	stw	r10,144(sp)
  80fc54:	03c001c4 	movi	r15,7
  80fc58:	da402515 	stw	r9,148(sp)
  80fc5c:	db802815 	stw	r14,160(sp)
  80fc60:	1821883a 	mov	r16,r3
  80fc64:	00000506 	br	80fc7c <___vfiprintf_internal_r+0x484>
  80fc68:	31400084 	addi	r5,r6,2
  80fc6c:	42000204 	addi	r8,r8,8
  80fc70:	200d883a 	mov	r6,r4
  80fc74:	843ffc04 	addi	r16,r16,-16
  80fc78:	3c000d0e 	bge	r7,r16,80fcb0 <___vfiprintf_internal_r+0x4b8>
  80fc7c:	10800404 	addi	r2,r2,16
  80fc80:	31000044 	addi	r4,r6,1
  80fc84:	45800015 	stw	r22,0(r8)
  80fc88:	41c00115 	stw	r7,4(r8)
  80fc8c:	d8801c15 	stw	r2,112(sp)
  80fc90:	d9001b15 	stw	r4,108(sp)
  80fc94:	793ff40e 	bge	r15,r4,80fc68 <__alt_mem_onchip_mem+0xff807c68>
  80fc98:	1001b51e 	bne	r2,zero,810370 <___vfiprintf_internal_r+0xb78>
  80fc9c:	843ffc04 	addi	r16,r16,-16
  80fca0:	000d883a 	mov	r6,zero
  80fca4:	01400044 	movi	r5,1
  80fca8:	d811883a 	mov	r8,sp
  80fcac:	3c3ff316 	blt	r7,r16,80fc7c <__alt_mem_onchip_mem+0xff807c7c>
  80fcb0:	8007883a 	mov	r3,r16
  80fcb4:	da402517 	ldw	r9,148(sp)
  80fcb8:	db802817 	ldw	r14,160(sp)
  80fcbc:	dc002917 	ldw	r16,164(sp)
  80fcc0:	da802417 	ldw	r10,144(sp)
  80fcc4:	1885883a 	add	r2,r3,r2
  80fcc8:	40c00115 	stw	r3,4(r8)
  80fccc:	42800015 	stw	r10,0(r8)
  80fcd0:	d8801c15 	stw	r2,112(sp)
  80fcd4:	d9401b15 	stw	r5,108(sp)
  80fcd8:	00c001c4 	movi	r3,7
  80fcdc:	19426016 	blt	r3,r5,810660 <___vfiprintf_internal_r+0xe68>
  80fce0:	d8c01d87 	ldb	r3,118(sp)
  80fce4:	42000204 	addi	r8,r8,8
  80fce8:	29000044 	addi	r4,r5,1
  80fcec:	1801b31e 	bne	r3,zero,8103bc <___vfiprintf_internal_r+0xbc4>
  80fcf0:	7001c026 	beq	r14,zero,8103f4 <___vfiprintf_internal_r+0xbfc>
  80fcf4:	d8c01d04 	addi	r3,sp,116
  80fcf8:	10800084 	addi	r2,r2,2
  80fcfc:	40c00015 	stw	r3,0(r8)
  80fd00:	00c00084 	movi	r3,2
  80fd04:	40c00115 	stw	r3,4(r8)
  80fd08:	d8801c15 	stw	r2,112(sp)
  80fd0c:	d9001b15 	stw	r4,108(sp)
  80fd10:	00c001c4 	movi	r3,7
  80fd14:	1902650e 	bge	r3,r4,8106ac <___vfiprintf_internal_r+0xeb4>
  80fd18:	10029a1e 	bne	r2,zero,810784 <___vfiprintf_internal_r+0xf8c>
  80fd1c:	00c02004 	movi	r3,128
  80fd20:	01000044 	movi	r4,1
  80fd24:	000b883a 	mov	r5,zero
  80fd28:	d811883a 	mov	r8,sp
  80fd2c:	e0c1b31e 	bne	fp,r3,8103fc <___vfiprintf_internal_r+0xc04>
  80fd30:	8cb9c83a 	sub	fp,r17,r18
  80fd34:	0701b10e 	bge	zero,fp,8103fc <___vfiprintf_internal_r+0xc04>
  80fd38:	01c00404 	movi	r7,16
  80fd3c:	3f03890e 	bge	r7,fp,810b64 <___vfiprintf_internal_r+0x136c>
  80fd40:	00c02074 	movhi	r3,129
  80fd44:	18dd8004 	addi	r3,r3,30208
  80fd48:	d8c02415 	stw	r3,144(sp)
  80fd4c:	8007883a 	mov	r3,r16
  80fd50:	034001c4 	movi	r13,7
  80fd54:	e021883a 	mov	r16,fp
  80fd58:	da402515 	stw	r9,148(sp)
  80fd5c:	1839883a 	mov	fp,r3
  80fd60:	00000506 	br	80fd78 <___vfiprintf_internal_r+0x580>
  80fd64:	29800084 	addi	r6,r5,2
  80fd68:	42000204 	addi	r8,r8,8
  80fd6c:	180b883a 	mov	r5,r3
  80fd70:	843ffc04 	addi	r16,r16,-16
  80fd74:	3c000d0e 	bge	r7,r16,80fdac <___vfiprintf_internal_r+0x5b4>
  80fd78:	10800404 	addi	r2,r2,16
  80fd7c:	28c00044 	addi	r3,r5,1
  80fd80:	45c00015 	stw	r23,0(r8)
  80fd84:	41c00115 	stw	r7,4(r8)
  80fd88:	d8801c15 	stw	r2,112(sp)
  80fd8c:	d8c01b15 	stw	r3,108(sp)
  80fd90:	68fff40e 	bge	r13,r3,80fd64 <__alt_mem_onchip_mem+0xff807d64>
  80fd94:	1002241e 	bne	r2,zero,810628 <___vfiprintf_internal_r+0xe30>
  80fd98:	843ffc04 	addi	r16,r16,-16
  80fd9c:	01800044 	movi	r6,1
  80fda0:	000b883a 	mov	r5,zero
  80fda4:	d811883a 	mov	r8,sp
  80fda8:	3c3ff316 	blt	r7,r16,80fd78 <__alt_mem_onchip_mem+0xff807d78>
  80fdac:	da402517 	ldw	r9,148(sp)
  80fdb0:	e007883a 	mov	r3,fp
  80fdb4:	8039883a 	mov	fp,r16
  80fdb8:	1821883a 	mov	r16,r3
  80fdbc:	d8c02417 	ldw	r3,144(sp)
  80fdc0:	1705883a 	add	r2,r2,fp
  80fdc4:	47000115 	stw	fp,4(r8)
  80fdc8:	40c00015 	stw	r3,0(r8)
  80fdcc:	d8801c15 	stw	r2,112(sp)
  80fdd0:	d9801b15 	stw	r6,108(sp)
  80fdd4:	00c001c4 	movi	r3,7
  80fdd8:	19827616 	blt	r3,r6,8107b4 <___vfiprintf_internal_r+0xfbc>
  80fddc:	4cf9c83a 	sub	fp,r9,r19
  80fde0:	42000204 	addi	r8,r8,8
  80fde4:	31000044 	addi	r4,r6,1
  80fde8:	300b883a 	mov	r5,r6
  80fdec:	07018516 	blt	zero,fp,810404 <___vfiprintf_internal_r+0xc0c>
  80fdf0:	9885883a 	add	r2,r19,r2
  80fdf4:	45400015 	stw	r21,0(r8)
  80fdf8:	44c00115 	stw	r19,4(r8)
  80fdfc:	d8801c15 	stw	r2,112(sp)
  80fe00:	d9001b15 	stw	r4,108(sp)
  80fe04:	00c001c4 	movi	r3,7
  80fe08:	1901dd0e 	bge	r3,r4,810580 <___vfiprintf_internal_r+0xd88>
  80fe0c:	1002401e 	bne	r2,zero,810710 <___vfiprintf_internal_r+0xf18>
  80fe10:	d8001b15 	stw	zero,108(sp)
  80fe14:	a2c0010c 	andi	r11,r20,4
  80fe18:	58000226 	beq	r11,zero,80fe24 <___vfiprintf_internal_r+0x62c>
  80fe1c:	8ca7c83a 	sub	r19,r17,r18
  80fe20:	04c2f216 	blt	zero,r19,8109ec <___vfiprintf_internal_r+0x11f4>
  80fe24:	8c80010e 	bge	r17,r18,80fe2c <___vfiprintf_internal_r+0x634>
  80fe28:	9023883a 	mov	r17,r18
  80fe2c:	da802317 	ldw	r10,140(sp)
  80fe30:	5455883a 	add	r10,r10,r17
  80fe34:	da802315 	stw	r10,140(sp)
  80fe38:	d8001b15 	stw	zero,108(sp)
  80fe3c:	d811883a 	mov	r8,sp
  80fe40:	003ea206 	br	80f8cc <__alt_mem_onchip_mem+0xff8078cc>
  80fe44:	a5000814 	ori	r20,r20,32
  80fe48:	80c00007 	ldb	r3,0(r16)
  80fe4c:	003ec906 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  80fe50:	80c00007 	ldb	r3,0(r16)
  80fe54:	1b030926 	beq	r3,r12,810a7c <___vfiprintf_internal_r+0x1284>
  80fe58:	a5000414 	ori	r20,r20,16
  80fe5c:	003ec506 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  80fe60:	21003fcc 	andi	r4,r4,255
  80fe64:	20035e1e 	bne	r4,zero,810be0 <___vfiprintf_internal_r+0x13e8>
  80fe68:	a080080c 	andi	r2,r20,32
  80fe6c:	1002a526 	beq	r2,zero,810904 <___vfiprintf_internal_r+0x110c>
  80fe70:	da802217 	ldw	r10,136(sp)
  80fe74:	50800017 	ldw	r2,0(r10)
  80fe78:	da802317 	ldw	r10,140(sp)
  80fe7c:	5007d7fa 	srai	r3,r10,31
  80fe80:	da802217 	ldw	r10,136(sp)
  80fe84:	10c00115 	stw	r3,4(r2)
  80fe88:	52800104 	addi	r10,r10,4
  80fe8c:	da802215 	stw	r10,136(sp)
  80fe90:	da802317 	ldw	r10,140(sp)
  80fe94:	12800015 	stw	r10,0(r2)
  80fe98:	003e8c06 	br	80f8cc <__alt_mem_onchip_mem+0xff8078cc>
  80fe9c:	21003fcc 	andi	r4,r4,255
  80fea0:	2003511e 	bne	r4,zero,810be8 <___vfiprintf_internal_r+0x13f0>
  80fea4:	a080080c 	andi	r2,r20,32
  80fea8:	1000a126 	beq	r2,zero,810130 <___vfiprintf_internal_r+0x938>
  80feac:	da802217 	ldw	r10,136(sp)
  80feb0:	d8001d85 	stb	zero,118(sp)
  80feb4:	50800204 	addi	r2,r10,8
  80feb8:	54800017 	ldw	r18,0(r10)
  80febc:	54c00117 	ldw	r19,4(r10)
  80fec0:	4802b416 	blt	r9,zero,810994 <___vfiprintf_internal_r+0x119c>
  80fec4:	013fdfc4 	movi	r4,-129
  80fec8:	94c6b03a 	or	r3,r18,r19
  80fecc:	d8802215 	stw	r2,136(sp)
  80fed0:	a128703a 	and	r20,r20,r4
  80fed4:	1800a226 	beq	r3,zero,810160 <___vfiprintf_internal_r+0x968>
  80fed8:	0039883a 	mov	fp,zero
  80fedc:	dd401a04 	addi	r21,sp,104
  80fee0:	9006d0fa 	srli	r3,r18,3
  80fee4:	9808977a 	slli	r4,r19,29
  80fee8:	9826d0fa 	srli	r19,r19,3
  80feec:	948001cc 	andi	r18,r18,7
  80fef0:	90800c04 	addi	r2,r18,48
  80fef4:	ad7fffc4 	addi	r21,r21,-1
  80fef8:	20e4b03a 	or	r18,r4,r3
  80fefc:	a8800005 	stb	r2,0(r21)
  80ff00:	94c6b03a 	or	r3,r18,r19
  80ff04:	183ff61e 	bne	r3,zero,80fee0 <__alt_mem_onchip_mem+0xff807ee0>
  80ff08:	a0c0004c 	andi	r3,r20,1
  80ff0c:	18005926 	beq	r3,zero,810074 <___vfiprintf_internal_r+0x87c>
  80ff10:	10803fcc 	andi	r2,r2,255
  80ff14:	1080201c 	xori	r2,r2,128
  80ff18:	10bfe004 	addi	r2,r2,-128
  80ff1c:	00c00c04 	movi	r3,48
  80ff20:	10c05426 	beq	r2,r3,810074 <___vfiprintf_internal_r+0x87c>
  80ff24:	da801e17 	ldw	r10,120(sp)
  80ff28:	a8bfffc4 	addi	r2,r21,-1
  80ff2c:	a8ffffc5 	stb	r3,-1(r21)
  80ff30:	50a7c83a 	sub	r19,r10,r2
  80ff34:	102b883a 	mov	r21,r2
  80ff38:	003f2f06 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  80ff3c:	21003fcc 	andi	r4,r4,255
  80ff40:	2003421e 	bne	r4,zero,810c4c <___vfiprintf_internal_r+0x1454>
  80ff44:	00802074 	movhi	r2,129
  80ff48:	109d2004 	addi	r2,r2,29824
  80ff4c:	d8802615 	stw	r2,152(sp)
  80ff50:	a080080c 	andi	r2,r20,32
  80ff54:	1000aa26 	beq	r2,zero,810200 <___vfiprintf_internal_r+0xa08>
  80ff58:	da802217 	ldw	r10,136(sp)
  80ff5c:	54800017 	ldw	r18,0(r10)
  80ff60:	54c00117 	ldw	r19,4(r10)
  80ff64:	52800204 	addi	r10,r10,8
  80ff68:	da802215 	stw	r10,136(sp)
  80ff6c:	a080004c 	andi	r2,r20,1
  80ff70:	1001d226 	beq	r2,zero,8106bc <___vfiprintf_internal_r+0xec4>
  80ff74:	94c4b03a 	or	r2,r18,r19
  80ff78:	1002351e 	bne	r2,zero,810850 <___vfiprintf_internal_r+0x1058>
  80ff7c:	d8001d85 	stb	zero,118(sp)
  80ff80:	48022216 	blt	r9,zero,81080c <___vfiprintf_internal_r+0x1014>
  80ff84:	00bfdfc4 	movi	r2,-129
  80ff88:	a0a8703a 	and	r20,r20,r2
  80ff8c:	003f1506 	br	80fbe4 <__alt_mem_onchip_mem+0xff807be4>
  80ff90:	da802217 	ldw	r10,136(sp)
  80ff94:	04800044 	movi	r18,1
  80ff98:	d8001d85 	stb	zero,118(sp)
  80ff9c:	50800017 	ldw	r2,0(r10)
  80ffa0:	52800104 	addi	r10,r10,4
  80ffa4:	da802215 	stw	r10,136(sp)
  80ffa8:	d8801005 	stb	r2,64(sp)
  80ffac:	9027883a 	mov	r19,r18
  80ffb0:	dd401004 	addi	r21,sp,64
  80ffb4:	0013883a 	mov	r9,zero
  80ffb8:	003f1706 	br	80fc18 <__alt_mem_onchip_mem+0xff807c18>
  80ffbc:	21003fcc 	andi	r4,r4,255
  80ffc0:	2003201e 	bne	r4,zero,810c44 <___vfiprintf_internal_r+0x144c>
  80ffc4:	a080080c 	andi	r2,r20,32
  80ffc8:	10004b26 	beq	r2,zero,8100f8 <___vfiprintf_internal_r+0x900>
  80ffcc:	da802217 	ldw	r10,136(sp)
  80ffd0:	50800117 	ldw	r2,4(r10)
  80ffd4:	54800017 	ldw	r18,0(r10)
  80ffd8:	52800204 	addi	r10,r10,8
  80ffdc:	da802215 	stw	r10,136(sp)
  80ffe0:	1027883a 	mov	r19,r2
  80ffe4:	10022c16 	blt	r2,zero,810898 <___vfiprintf_internal_r+0x10a0>
  80ffe8:	df001d83 	ldbu	fp,118(sp)
  80ffec:	48007216 	blt	r9,zero,8101b8 <___vfiprintf_internal_r+0x9c0>
  80fff0:	00ffdfc4 	movi	r3,-129
  80fff4:	94c4b03a 	or	r2,r18,r19
  80fff8:	a0e8703a 	and	r20,r20,r3
  80fffc:	1000cc26 	beq	r2,zero,810330 <___vfiprintf_internal_r+0xb38>
  810000:	98021026 	beq	r19,zero,810844 <___vfiprintf_internal_r+0x104c>
  810004:	dc402415 	stw	r17,144(sp)
  810008:	dc002515 	stw	r16,148(sp)
  81000c:	9823883a 	mov	r17,r19
  810010:	9021883a 	mov	r16,r18
  810014:	dd401a04 	addi	r21,sp,104
  810018:	4825883a 	mov	r18,r9
  81001c:	4027883a 	mov	r19,r8
  810020:	8009883a 	mov	r4,r16
  810024:	880b883a 	mov	r5,r17
  810028:	01800284 	movi	r6,10
  81002c:	000f883a 	mov	r7,zero
  810030:	08117580 	call	811758 <__umoddi3>
  810034:	10800c04 	addi	r2,r2,48
  810038:	ad7fffc4 	addi	r21,r21,-1
  81003c:	8009883a 	mov	r4,r16
  810040:	880b883a 	mov	r5,r17
  810044:	a8800005 	stb	r2,0(r21)
  810048:	01800284 	movi	r6,10
  81004c:	000f883a 	mov	r7,zero
  810050:	08111e00 	call	8111e0 <__udivdi3>
  810054:	1021883a 	mov	r16,r2
  810058:	10c4b03a 	or	r2,r2,r3
  81005c:	1823883a 	mov	r17,r3
  810060:	103fef1e 	bne	r2,zero,810020 <__alt_mem_onchip_mem+0xff808020>
  810064:	dc402417 	ldw	r17,144(sp)
  810068:	dc002517 	ldw	r16,148(sp)
  81006c:	9013883a 	mov	r9,r18
  810070:	9811883a 	mov	r8,r19
  810074:	da801e17 	ldw	r10,120(sp)
  810078:	5567c83a 	sub	r19,r10,r21
  81007c:	003ede06 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  810080:	38803fcc 	andi	r2,r7,255
  810084:	1080201c 	xori	r2,r2,128
  810088:	10bfe004 	addi	r2,r2,-128
  81008c:	1002371e 	bne	r2,zero,81096c <___vfiprintf_internal_r+0x1174>
  810090:	01000044 	movi	r4,1
  810094:	01c00804 	movi	r7,32
  810098:	80c00007 	ldb	r3,0(r16)
  81009c:	003e3506 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  8100a0:	a5000054 	ori	r20,r20,1
  8100a4:	80c00007 	ldb	r3,0(r16)
  8100a8:	003e3206 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  8100ac:	a5002014 	ori	r20,r20,128
  8100b0:	80c00007 	ldb	r3,0(r16)
  8100b4:	003e2f06 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  8100b8:	8015883a 	mov	r10,r16
  8100bc:	0023883a 	mov	r17,zero
  8100c0:	18bff404 	addi	r2,r3,-48
  8100c4:	50c00007 	ldb	r3,0(r10)
  8100c8:	8c4002a4 	muli	r17,r17,10
  8100cc:	84000044 	addi	r16,r16,1
  8100d0:	8015883a 	mov	r10,r16
  8100d4:	1463883a 	add	r17,r2,r17
  8100d8:	18bff404 	addi	r2,r3,-48
  8100dc:	30bff92e 	bgeu	r6,r2,8100c4 <__alt_mem_onchip_mem+0xff8080c4>
  8100e0:	003e2506 	br	80f978 <__alt_mem_onchip_mem+0xff807978>
  8100e4:	21003fcc 	andi	r4,r4,255
  8100e8:	2002d41e 	bne	r4,zero,810c3c <___vfiprintf_internal_r+0x1444>
  8100ec:	a5000414 	ori	r20,r20,16
  8100f0:	a080080c 	andi	r2,r20,32
  8100f4:	103fb51e 	bne	r2,zero,80ffcc <__alt_mem_onchip_mem+0xff807fcc>
  8100f8:	a080040c 	andi	r2,r20,16
  8100fc:	1001f826 	beq	r2,zero,8108e0 <___vfiprintf_internal_r+0x10e8>
  810100:	da802217 	ldw	r10,136(sp)
  810104:	54800017 	ldw	r18,0(r10)
  810108:	52800104 	addi	r10,r10,4
  81010c:	da802215 	stw	r10,136(sp)
  810110:	9027d7fa 	srai	r19,r18,31
  810114:	9805883a 	mov	r2,r19
  810118:	003fb206 	br	80ffe4 <__alt_mem_onchip_mem+0xff807fe4>
  81011c:	21003fcc 	andi	r4,r4,255
  810120:	2002c41e 	bne	r4,zero,810c34 <___vfiprintf_internal_r+0x143c>
  810124:	a5000414 	ori	r20,r20,16
  810128:	a080080c 	andi	r2,r20,32
  81012c:	103f5f1e 	bne	r2,zero,80feac <__alt_mem_onchip_mem+0xff807eac>
  810130:	a080040c 	andi	r2,r20,16
  810134:	10020f26 	beq	r2,zero,810974 <___vfiprintf_internal_r+0x117c>
  810138:	da802217 	ldw	r10,136(sp)
  81013c:	d8001d85 	stb	zero,118(sp)
  810140:	0027883a 	mov	r19,zero
  810144:	50800104 	addi	r2,r10,4
  810148:	54800017 	ldw	r18,0(r10)
  81014c:	48021116 	blt	r9,zero,810994 <___vfiprintf_internal_r+0x119c>
  810150:	00ffdfc4 	movi	r3,-129
  810154:	d8802215 	stw	r2,136(sp)
  810158:	a0e8703a 	and	r20,r20,r3
  81015c:	903f5e1e 	bne	r18,zero,80fed8 <__alt_mem_onchip_mem+0xff807ed8>
  810160:	0039883a 	mov	fp,zero
  810164:	4802a626 	beq	r9,zero,810c00 <___vfiprintf_internal_r+0x1408>
  810168:	0025883a 	mov	r18,zero
  81016c:	0027883a 	mov	r19,zero
  810170:	003f5a06 	br	80fedc <__alt_mem_onchip_mem+0xff807edc>
  810174:	21003fcc 	andi	r4,r4,255
  810178:	20029f1e 	bne	r4,zero,810bf8 <___vfiprintf_internal_r+0x1400>
  81017c:	a5000414 	ori	r20,r20,16
  810180:	a080080c 	andi	r2,r20,32
  810184:	10005e1e 	bne	r2,zero,810300 <___vfiprintf_internal_r+0xb08>
  810188:	a080040c 	andi	r2,r20,16
  81018c:	1001a21e 	bne	r2,zero,810818 <___vfiprintf_internal_r+0x1020>
  810190:	a080100c 	andi	r2,r20,64
  810194:	d8001d85 	stb	zero,118(sp)
  810198:	da802217 	ldw	r10,136(sp)
  81019c:	1002231e 	bne	r2,zero,810a2c <___vfiprintf_internal_r+0x1234>
  8101a0:	50800104 	addi	r2,r10,4
  8101a4:	54800017 	ldw	r18,0(r10)
  8101a8:	0027883a 	mov	r19,zero
  8101ac:	4801a00e 	bge	r9,zero,810830 <___vfiprintf_internal_r+0x1038>
  8101b0:	d8802215 	stw	r2,136(sp)
  8101b4:	0039883a 	mov	fp,zero
  8101b8:	94c4b03a 	or	r2,r18,r19
  8101bc:	103f901e 	bne	r2,zero,810000 <__alt_mem_onchip_mem+0xff808000>
  8101c0:	00800044 	movi	r2,1
  8101c4:	10803fcc 	andi	r2,r2,255
  8101c8:	00c00044 	movi	r3,1
  8101cc:	10c05926 	beq	r2,r3,810334 <___vfiprintf_internal_r+0xb3c>
  8101d0:	00c00084 	movi	r3,2
  8101d4:	10ffe41e 	bne	r2,r3,810168 <__alt_mem_onchip_mem+0xff808168>
  8101d8:	0025883a 	mov	r18,zero
  8101dc:	0027883a 	mov	r19,zero
  8101e0:	00013d06 	br	8106d8 <___vfiprintf_internal_r+0xee0>
  8101e4:	21003fcc 	andi	r4,r4,255
  8101e8:	2002811e 	bne	r4,zero,810bf0 <___vfiprintf_internal_r+0x13f8>
  8101ec:	00802074 	movhi	r2,129
  8101f0:	109d1b04 	addi	r2,r2,29804
  8101f4:	d8802615 	stw	r2,152(sp)
  8101f8:	a080080c 	andi	r2,r20,32
  8101fc:	103f561e 	bne	r2,zero,80ff58 <__alt_mem_onchip_mem+0xff807f58>
  810200:	a080040c 	andi	r2,r20,16
  810204:	1001d126 	beq	r2,zero,81094c <___vfiprintf_internal_r+0x1154>
  810208:	da802217 	ldw	r10,136(sp)
  81020c:	0027883a 	mov	r19,zero
  810210:	54800017 	ldw	r18,0(r10)
  810214:	52800104 	addi	r10,r10,4
  810218:	da802215 	stw	r10,136(sp)
  81021c:	003f5306 	br	80ff6c <__alt_mem_onchip_mem+0xff807f6c>
  810220:	da802217 	ldw	r10,136(sp)
  810224:	d8001d85 	stb	zero,118(sp)
  810228:	55400017 	ldw	r21,0(r10)
  81022c:	50c00104 	addi	r3,r10,4
  810230:	a8024226 	beq	r21,zero,810b3c <___vfiprintf_internal_r+0x1344>
  810234:	48021816 	blt	r9,zero,810a98 <___vfiprintf_internal_r+0x12a0>
  810238:	480d883a 	mov	r6,r9
  81023c:	000b883a 	mov	r5,zero
  810240:	a809883a 	mov	r4,r21
  810244:	d8c02a15 	stw	r3,168(sp)
  810248:	da002b15 	stw	r8,172(sp)
  81024c:	da402c15 	stw	r9,176(sp)
  810250:	080dc4c0 	call	80dc4c <memchr>
  810254:	d8c02a17 	ldw	r3,168(sp)
  810258:	da002b17 	ldw	r8,172(sp)
  81025c:	da402c17 	ldw	r9,176(sp)
  810260:	10024826 	beq	r2,zero,810b84 <___vfiprintf_internal_r+0x138c>
  810264:	1567c83a 	sub	r19,r2,r21
  810268:	df001d83 	ldbu	fp,118(sp)
  81026c:	d8c02215 	stw	r3,136(sp)
  810270:	0013883a 	mov	r9,zero
  810274:	003e6006 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  810278:	21003fcc 	andi	r4,r4,255
  81027c:	203fc026 	beq	r4,zero,810180 <__alt_mem_onchip_mem+0xff808180>
  810280:	d9c01d85 	stb	r7,118(sp)
  810284:	003fbe06 	br	810180 <__alt_mem_onchip_mem+0xff808180>
  810288:	da802217 	ldw	r10,136(sp)
  81028c:	54400017 	ldw	r17,0(r10)
  810290:	50800104 	addi	r2,r10,4
  810294:	883e3b16 	blt	r17,zero,80fb84 <__alt_mem_onchip_mem+0xff807b84>
  810298:	d8802215 	stw	r2,136(sp)
  81029c:	80c00007 	ldb	r3,0(r16)
  8102a0:	003db406 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  8102a4:	01000044 	movi	r4,1
  8102a8:	01c00ac4 	movi	r7,43
  8102ac:	80c00007 	ldb	r3,0(r16)
  8102b0:	003db006 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  8102b4:	80c00007 	ldb	r3,0(r16)
  8102b8:	82800044 	addi	r10,r16,1
  8102bc:	1b423c26 	beq	r3,r13,810bb0 <___vfiprintf_internal_r+0x13b8>
  8102c0:	18bff404 	addi	r2,r3,-48
  8102c4:	0013883a 	mov	r9,zero
  8102c8:	30822b36 	bltu	r6,r2,810b78 <___vfiprintf_internal_r+0x1380>
  8102cc:	50c00007 	ldb	r3,0(r10)
  8102d0:	4a4002a4 	muli	r9,r9,10
  8102d4:	54000044 	addi	r16,r10,1
  8102d8:	8015883a 	mov	r10,r16
  8102dc:	4893883a 	add	r9,r9,r2
  8102e0:	18bff404 	addi	r2,r3,-48
  8102e4:	30bff92e 	bgeu	r6,r2,8102cc <__alt_mem_onchip_mem+0xff8082cc>
  8102e8:	483da30e 	bge	r9,zero,80f978 <__alt_mem_onchip_mem+0xff807978>
  8102ec:	027fffc4 	movi	r9,-1
  8102f0:	003da106 	br	80f978 <__alt_mem_onchip_mem+0xff807978>
  8102f4:	a5001014 	ori	r20,r20,64
  8102f8:	80c00007 	ldb	r3,0(r16)
  8102fc:	003d9d06 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  810300:	da802217 	ldw	r10,136(sp)
  810304:	d8001d85 	stb	zero,118(sp)
  810308:	50c00204 	addi	r3,r10,8
  81030c:	54800017 	ldw	r18,0(r10)
  810310:	54c00117 	ldw	r19,4(r10)
  810314:	4801ca16 	blt	r9,zero,810a40 <___vfiprintf_internal_r+0x1248>
  810318:	013fdfc4 	movi	r4,-129
  81031c:	94c4b03a 	or	r2,r18,r19
  810320:	d8c02215 	stw	r3,136(sp)
  810324:	a128703a 	and	r20,r20,r4
  810328:	0039883a 	mov	fp,zero
  81032c:	103f341e 	bne	r2,zero,810000 <__alt_mem_onchip_mem+0xff808000>
  810330:	483e2e26 	beq	r9,zero,80fbec <__alt_mem_onchip_mem+0xff807bec>
  810334:	0025883a 	mov	r18,zero
  810338:	94800c04 	addi	r18,r18,48
  81033c:	dc8019c5 	stb	r18,103(sp)
  810340:	dcc02717 	ldw	r19,156(sp)
  810344:	dd4019c4 	addi	r21,sp,103
  810348:	003e2b06 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  81034c:	21003fcc 	andi	r4,r4,255
  810350:	2002361e 	bne	r4,zero,810c2c <___vfiprintf_internal_r+0x1434>
  810354:	1801c126 	beq	r3,zero,810a5c <___vfiprintf_internal_r+0x1264>
  810358:	04800044 	movi	r18,1
  81035c:	d8c01005 	stb	r3,64(sp)
  810360:	d8001d85 	stb	zero,118(sp)
  810364:	9027883a 	mov	r19,r18
  810368:	dd401004 	addi	r21,sp,64
  81036c:	003f1106 	br	80ffb4 <__alt_mem_onchip_mem+0xff807fb4>
  810370:	d9402117 	ldw	r5,132(sp)
  810374:	d9002017 	ldw	r4,128(sp)
  810378:	d9801a04 	addi	r6,sp,104
  81037c:	d9c02b15 	stw	r7,172(sp)
  810380:	dbc02a15 	stw	r15,168(sp)
  810384:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810388:	d9c02b17 	ldw	r7,172(sp)
  81038c:	dbc02a17 	ldw	r15,168(sp)
  810390:	10006d1e 	bne	r2,zero,810548 <___vfiprintf_internal_r+0xd50>
  810394:	d9801b17 	ldw	r6,108(sp)
  810398:	d8801c17 	ldw	r2,112(sp)
  81039c:	d811883a 	mov	r8,sp
  8103a0:	31400044 	addi	r5,r6,1
  8103a4:	003e3306 	br	80fc74 <__alt_mem_onchip_mem+0xff807c74>
  8103a8:	d9401b17 	ldw	r5,108(sp)
  8103ac:	d8801c17 	ldw	r2,112(sp)
  8103b0:	29000044 	addi	r4,r5,1
  8103b4:	d8c01d87 	ldb	r3,118(sp)
  8103b8:	183e4d26 	beq	r3,zero,80fcf0 <__alt_mem_onchip_mem+0xff807cf0>
  8103bc:	00c00044 	movi	r3,1
  8103c0:	d9401d84 	addi	r5,sp,118
  8103c4:	10c5883a 	add	r2,r2,r3
  8103c8:	41400015 	stw	r5,0(r8)
  8103cc:	40c00115 	stw	r3,4(r8)
  8103d0:	d8801c15 	stw	r2,112(sp)
  8103d4:	d9001b15 	stw	r4,108(sp)
  8103d8:	014001c4 	movi	r5,7
  8103dc:	2900a90e 	bge	r5,r4,810684 <___vfiprintf_internal_r+0xe8c>
  8103e0:	1000da1e 	bne	r2,zero,81074c <___vfiprintf_internal_r+0xf54>
  8103e4:	7000ab1e 	bne	r14,zero,810694 <___vfiprintf_internal_r+0xe9c>
  8103e8:	000b883a 	mov	r5,zero
  8103ec:	1809883a 	mov	r4,r3
  8103f0:	d811883a 	mov	r8,sp
  8103f4:	00c02004 	movi	r3,128
  8103f8:	e0fe4d26 	beq	fp,r3,80fd30 <__alt_mem_onchip_mem+0xff807d30>
  8103fc:	4cf9c83a 	sub	fp,r9,r19
  810400:	073e7b0e 	bge	zero,fp,80fdf0 <__alt_mem_onchip_mem+0xff807df0>
  810404:	01c00404 	movi	r7,16
  810408:	3f01900e 	bge	r7,fp,810a4c <___vfiprintf_internal_r+0x1254>
  81040c:	00c02074 	movhi	r3,129
  810410:	18dd8004 	addi	r3,r3,30208
  810414:	d8c02415 	stw	r3,144(sp)
  810418:	034001c4 	movi	r13,7
  81041c:	00000506 	br	810434 <___vfiprintf_internal_r+0xc3c>
  810420:	29000084 	addi	r4,r5,2
  810424:	42000204 	addi	r8,r8,8
  810428:	180b883a 	mov	r5,r3
  81042c:	e73ffc04 	addi	fp,fp,-16
  810430:	3f000d0e 	bge	r7,fp,810468 <___vfiprintf_internal_r+0xc70>
  810434:	10800404 	addi	r2,r2,16
  810438:	28c00044 	addi	r3,r5,1
  81043c:	45c00015 	stw	r23,0(r8)
  810440:	41c00115 	stw	r7,4(r8)
  810444:	d8801c15 	stw	r2,112(sp)
  810448:	d8c01b15 	stw	r3,108(sp)
  81044c:	68fff40e 	bge	r13,r3,810420 <__alt_mem_onchip_mem+0xff808420>
  810450:	1000101e 	bne	r2,zero,810494 <___vfiprintf_internal_r+0xc9c>
  810454:	e73ffc04 	addi	fp,fp,-16
  810458:	01000044 	movi	r4,1
  81045c:	000b883a 	mov	r5,zero
  810460:	d811883a 	mov	r8,sp
  810464:	3f3ff316 	blt	r7,fp,810434 <__alt_mem_onchip_mem+0xff808434>
  810468:	da802417 	ldw	r10,144(sp)
  81046c:	1705883a 	add	r2,r2,fp
  810470:	47000115 	stw	fp,4(r8)
  810474:	42800015 	stw	r10,0(r8)
  810478:	d8801c15 	stw	r2,112(sp)
  81047c:	d9001b15 	stw	r4,108(sp)
  810480:	00c001c4 	movi	r3,7
  810484:	19003616 	blt	r3,r4,810560 <___vfiprintf_internal_r+0xd68>
  810488:	42000204 	addi	r8,r8,8
  81048c:	21000044 	addi	r4,r4,1
  810490:	003e5706 	br	80fdf0 <__alt_mem_onchip_mem+0xff807df0>
  810494:	d9402117 	ldw	r5,132(sp)
  810498:	d9002017 	ldw	r4,128(sp)
  81049c:	d9801a04 	addi	r6,sp,104
  8104a0:	d9c02b15 	stw	r7,172(sp)
  8104a4:	db402a15 	stw	r13,168(sp)
  8104a8:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  8104ac:	d9c02b17 	ldw	r7,172(sp)
  8104b0:	db402a17 	ldw	r13,168(sp)
  8104b4:	1000241e 	bne	r2,zero,810548 <___vfiprintf_internal_r+0xd50>
  8104b8:	d9401b17 	ldw	r5,108(sp)
  8104bc:	d8801c17 	ldw	r2,112(sp)
  8104c0:	d811883a 	mov	r8,sp
  8104c4:	29000044 	addi	r4,r5,1
  8104c8:	003fd806 	br	81042c <__alt_mem_onchip_mem+0xff80842c>
  8104cc:	d9401b17 	ldw	r5,108(sp)
  8104d0:	00c02074 	movhi	r3,129
  8104d4:	18dd8404 	addi	r3,r3,30224
  8104d8:	d8c02415 	stw	r3,144(sp)
  8104dc:	29400044 	addi	r5,r5,1
  8104e0:	d8c02417 	ldw	r3,144(sp)
  8104e4:	14c5883a 	add	r2,r2,r19
  8104e8:	44c00115 	stw	r19,4(r8)
  8104ec:	40c00015 	stw	r3,0(r8)
  8104f0:	d8801c15 	stw	r2,112(sp)
  8104f4:	d9401b15 	stw	r5,108(sp)
  8104f8:	00c001c4 	movi	r3,7
  8104fc:	1940070e 	bge	r3,r5,81051c <___vfiprintf_internal_r+0xd24>
  810500:	103e4826 	beq	r2,zero,80fe24 <__alt_mem_onchip_mem+0xff807e24>
  810504:	d9402117 	ldw	r5,132(sp)
  810508:	d9002017 	ldw	r4,128(sp)
  81050c:	d9801a04 	addi	r6,sp,104
  810510:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810514:	10000c1e 	bne	r2,zero,810548 <___vfiprintf_internal_r+0xd50>
  810518:	d8801c17 	ldw	r2,112(sp)
  81051c:	8c80010e 	bge	r17,r18,810524 <___vfiprintf_internal_r+0xd2c>
  810520:	9023883a 	mov	r17,r18
  810524:	da802317 	ldw	r10,140(sp)
  810528:	5455883a 	add	r10,r10,r17
  81052c:	da802315 	stw	r10,140(sp)
  810530:	103e4126 	beq	r2,zero,80fe38 <__alt_mem_onchip_mem+0xff807e38>
  810534:	d9402117 	ldw	r5,132(sp)
  810538:	d9002017 	ldw	r4,128(sp)
  81053c:	d9801a04 	addi	r6,sp,104
  810540:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810544:	103e3c26 	beq	r2,zero,80fe38 <__alt_mem_onchip_mem+0xff807e38>
  810548:	dd002117 	ldw	r20,132(sp)
  81054c:	a080030b 	ldhu	r2,12(r20)
  810550:	1080100c 	andi	r2,r2,64
  810554:	1001231e 	bne	r2,zero,8109e4 <___vfiprintf_internal_r+0x11ec>
  810558:	d8802317 	ldw	r2,140(sp)
  81055c:	003d7b06 	br	80fb4c <__alt_mem_onchip_mem+0xff807b4c>
  810560:	1000991e 	bne	r2,zero,8107c8 <___vfiprintf_internal_r+0xfd0>
  810564:	00c00044 	movi	r3,1
  810568:	9805883a 	mov	r2,r19
  81056c:	dd400015 	stw	r21,0(sp)
  810570:	dcc00115 	stw	r19,4(sp)
  810574:	dcc01c15 	stw	r19,112(sp)
  810578:	d8c01b15 	stw	r3,108(sp)
  81057c:	d811883a 	mov	r8,sp
  810580:	42000204 	addi	r8,r8,8
  810584:	a2c0010c 	andi	r11,r20,4
  810588:	583fe426 	beq	r11,zero,81051c <__alt_mem_onchip_mem+0xff80851c>
  81058c:	8ca7c83a 	sub	r19,r17,r18
  810590:	04ffe20e 	bge	zero,r19,81051c <__alt_mem_onchip_mem+0xff80851c>
  810594:	01c00404 	movi	r7,16
  810598:	3cffcc0e 	bge	r7,r19,8104cc <__alt_mem_onchip_mem+0xff8084cc>
  81059c:	02802074 	movhi	r10,129
  8105a0:	529d8404 	addi	r10,r10,30224
  8105a4:	d9001b17 	ldw	r4,108(sp)
  8105a8:	da802415 	stw	r10,144(sp)
  8105ac:	382b883a 	mov	r21,r7
  8105b0:	050001c4 	movi	r20,7
  8105b4:	df002017 	ldw	fp,128(sp)
  8105b8:	00000506 	br	8105d0 <___vfiprintf_internal_r+0xdd8>
  8105bc:	21400084 	addi	r5,r4,2
  8105c0:	42000204 	addi	r8,r8,8
  8105c4:	1809883a 	mov	r4,r3
  8105c8:	9cfffc04 	addi	r19,r19,-16
  8105cc:	acffc40e 	bge	r21,r19,8104e0 <__alt_mem_onchip_mem+0xff8084e0>
  8105d0:	10800404 	addi	r2,r2,16
  8105d4:	20c00044 	addi	r3,r4,1
  8105d8:	45800015 	stw	r22,0(r8)
  8105dc:	45400115 	stw	r21,4(r8)
  8105e0:	d8801c15 	stw	r2,112(sp)
  8105e4:	d8c01b15 	stw	r3,108(sp)
  8105e8:	a0fff40e 	bge	r20,r3,8105bc <__alt_mem_onchip_mem+0xff8085bc>
  8105ec:	1000041e 	bne	r2,zero,810600 <___vfiprintf_internal_r+0xe08>
  8105f0:	01400044 	movi	r5,1
  8105f4:	0009883a 	mov	r4,zero
  8105f8:	d811883a 	mov	r8,sp
  8105fc:	003ff206 	br	8105c8 <__alt_mem_onchip_mem+0xff8085c8>
  810600:	d9402117 	ldw	r5,132(sp)
  810604:	d9801a04 	addi	r6,sp,104
  810608:	e009883a 	mov	r4,fp
  81060c:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810610:	103fcd1e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  810614:	d9001b17 	ldw	r4,108(sp)
  810618:	d8801c17 	ldw	r2,112(sp)
  81061c:	d811883a 	mov	r8,sp
  810620:	21400044 	addi	r5,r4,1
  810624:	003fe806 	br	8105c8 <__alt_mem_onchip_mem+0xff8085c8>
  810628:	d9402117 	ldw	r5,132(sp)
  81062c:	d9002017 	ldw	r4,128(sp)
  810630:	d9801a04 	addi	r6,sp,104
  810634:	d9c02b15 	stw	r7,172(sp)
  810638:	db402a15 	stw	r13,168(sp)
  81063c:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810640:	d9c02b17 	ldw	r7,172(sp)
  810644:	db402a17 	ldw	r13,168(sp)
  810648:	103fbf1e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  81064c:	d9401b17 	ldw	r5,108(sp)
  810650:	d8801c17 	ldw	r2,112(sp)
  810654:	d811883a 	mov	r8,sp
  810658:	29800044 	addi	r6,r5,1
  81065c:	003dc406 	br	80fd70 <__alt_mem_onchip_mem+0xff807d70>
  810660:	1000d21e 	bne	r2,zero,8109ac <___vfiprintf_internal_r+0x11b4>
  810664:	d8c01d87 	ldb	r3,118(sp)
  810668:	18009526 	beq	r3,zero,8108c0 <___vfiprintf_internal_r+0x10c8>
  81066c:	00800044 	movi	r2,1
  810670:	d8c01d84 	addi	r3,sp,118
  810674:	1009883a 	mov	r4,r2
  810678:	d8c00015 	stw	r3,0(sp)
  81067c:	d8800115 	stw	r2,4(sp)
  810680:	d811883a 	mov	r8,sp
  810684:	200b883a 	mov	r5,r4
  810688:	42000204 	addi	r8,r8,8
  81068c:	21000044 	addi	r4,r4,1
  810690:	003d9706 	br	80fcf0 <__alt_mem_onchip_mem+0xff807cf0>
  810694:	d9001d04 	addi	r4,sp,116
  810698:	00800084 	movi	r2,2
  81069c:	d9000015 	stw	r4,0(sp)
  8106a0:	d8800115 	stw	r2,4(sp)
  8106a4:	1809883a 	mov	r4,r3
  8106a8:	d811883a 	mov	r8,sp
  8106ac:	200b883a 	mov	r5,r4
  8106b0:	42000204 	addi	r8,r8,8
  8106b4:	21000044 	addi	r4,r4,1
  8106b8:	003f4e06 	br	8103f4 <__alt_mem_onchip_mem+0xff8083f4>
  8106bc:	d8001d85 	stb	zero,118(sp)
  8106c0:	48005016 	blt	r9,zero,810804 <___vfiprintf_internal_r+0x100c>
  8106c4:	00ffdfc4 	movi	r3,-129
  8106c8:	94c4b03a 	or	r2,r18,r19
  8106cc:	a0e8703a 	and	r20,r20,r3
  8106d0:	103d4426 	beq	r2,zero,80fbe4 <__alt_mem_onchip_mem+0xff807be4>
  8106d4:	0039883a 	mov	fp,zero
  8106d8:	d9002617 	ldw	r4,152(sp)
  8106dc:	dd401a04 	addi	r21,sp,104
  8106e0:	908003cc 	andi	r2,r18,15
  8106e4:	9806973a 	slli	r3,r19,28
  8106e8:	2085883a 	add	r2,r4,r2
  8106ec:	9024d13a 	srli	r18,r18,4
  8106f0:	10800003 	ldbu	r2,0(r2)
  8106f4:	9826d13a 	srli	r19,r19,4
  8106f8:	ad7fffc4 	addi	r21,r21,-1
  8106fc:	1ca4b03a 	or	r18,r3,r18
  810700:	a8800005 	stb	r2,0(r21)
  810704:	94c4b03a 	or	r2,r18,r19
  810708:	103ff51e 	bne	r2,zero,8106e0 <__alt_mem_onchip_mem+0xff8086e0>
  81070c:	003e5906 	br	810074 <__alt_mem_onchip_mem+0xff808074>
  810710:	d9402117 	ldw	r5,132(sp)
  810714:	d9002017 	ldw	r4,128(sp)
  810718:	d9801a04 	addi	r6,sp,104
  81071c:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810720:	103f891e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  810724:	d8801c17 	ldw	r2,112(sp)
  810728:	d811883a 	mov	r8,sp
  81072c:	003f9506 	br	810584 <__alt_mem_onchip_mem+0xff808584>
  810730:	d9402117 	ldw	r5,132(sp)
  810734:	d9002017 	ldw	r4,128(sp)
  810738:	d9801a04 	addi	r6,sp,104
  81073c:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810740:	103f811e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  810744:	d811883a 	mov	r8,sp
  810748:	003ced06 	br	80fb00 <__alt_mem_onchip_mem+0xff807b00>
  81074c:	d9402117 	ldw	r5,132(sp)
  810750:	d9002017 	ldw	r4,128(sp)
  810754:	d9801a04 	addi	r6,sp,104
  810758:	da402c15 	stw	r9,176(sp)
  81075c:	db802a15 	stw	r14,168(sp)
  810760:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810764:	da402c17 	ldw	r9,176(sp)
  810768:	db802a17 	ldw	r14,168(sp)
  81076c:	103f761e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  810770:	d9401b17 	ldw	r5,108(sp)
  810774:	d8801c17 	ldw	r2,112(sp)
  810778:	d811883a 	mov	r8,sp
  81077c:	29000044 	addi	r4,r5,1
  810780:	003d5b06 	br	80fcf0 <__alt_mem_onchip_mem+0xff807cf0>
  810784:	d9402117 	ldw	r5,132(sp)
  810788:	d9002017 	ldw	r4,128(sp)
  81078c:	d9801a04 	addi	r6,sp,104
  810790:	da402c15 	stw	r9,176(sp)
  810794:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810798:	da402c17 	ldw	r9,176(sp)
  81079c:	103f6a1e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  8107a0:	d9401b17 	ldw	r5,108(sp)
  8107a4:	d8801c17 	ldw	r2,112(sp)
  8107a8:	d811883a 	mov	r8,sp
  8107ac:	29000044 	addi	r4,r5,1
  8107b0:	003f1006 	br	8103f4 <__alt_mem_onchip_mem+0xff8083f4>
  8107b4:	1000c31e 	bne	r2,zero,810ac4 <___vfiprintf_internal_r+0x12cc>
  8107b8:	01000044 	movi	r4,1
  8107bc:	000b883a 	mov	r5,zero
  8107c0:	d811883a 	mov	r8,sp
  8107c4:	003f0d06 	br	8103fc <__alt_mem_onchip_mem+0xff8083fc>
  8107c8:	d9402117 	ldw	r5,132(sp)
  8107cc:	d9002017 	ldw	r4,128(sp)
  8107d0:	d9801a04 	addi	r6,sp,104
  8107d4:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  8107d8:	103f5b1e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  8107dc:	d9001b17 	ldw	r4,108(sp)
  8107e0:	d8801c17 	ldw	r2,112(sp)
  8107e4:	d811883a 	mov	r8,sp
  8107e8:	21000044 	addi	r4,r4,1
  8107ec:	003d8006 	br	80fdf0 <__alt_mem_onchip_mem+0xff807df0>
  8107f0:	01002074 	movhi	r4,129
  8107f4:	211d2004 	addi	r4,r4,29824
  8107f8:	d9002615 	stw	r4,152(sp)
  8107fc:	d8c02215 	stw	r3,136(sp)
  810800:	1029883a 	mov	r20,r2
  810804:	94c4b03a 	or	r2,r18,r19
  810808:	103fb21e 	bne	r2,zero,8106d4 <__alt_mem_onchip_mem+0xff8086d4>
  81080c:	0039883a 	mov	fp,zero
  810810:	00800084 	movi	r2,2
  810814:	003e6b06 	br	8101c4 <__alt_mem_onchip_mem+0xff8081c4>
  810818:	da802217 	ldw	r10,136(sp)
  81081c:	d8001d85 	stb	zero,118(sp)
  810820:	0027883a 	mov	r19,zero
  810824:	50800104 	addi	r2,r10,4
  810828:	54800017 	ldw	r18,0(r10)
  81082c:	483e6016 	blt	r9,zero,8101b0 <__alt_mem_onchip_mem+0xff8081b0>
  810830:	00ffdfc4 	movi	r3,-129
  810834:	d8802215 	stw	r2,136(sp)
  810838:	a0e8703a 	and	r20,r20,r3
  81083c:	0039883a 	mov	fp,zero
  810840:	903ebb26 	beq	r18,zero,810330 <__alt_mem_onchip_mem+0xff808330>
  810844:	00800244 	movi	r2,9
  810848:	14bdee36 	bltu	r2,r18,810004 <__alt_mem_onchip_mem+0xff808004>
  81084c:	003eba06 	br	810338 <__alt_mem_onchip_mem+0xff808338>
  810850:	00800c04 	movi	r2,48
  810854:	d8c01d45 	stb	r3,117(sp)
  810858:	d8801d05 	stb	r2,116(sp)
  81085c:	d8001d85 	stb	zero,118(sp)
  810860:	a0c00094 	ori	r3,r20,2
  810864:	4800a916 	blt	r9,zero,810b0c <___vfiprintf_internal_r+0x1314>
  810868:	00bfdfc4 	movi	r2,-129
  81086c:	a096703a 	and	r11,r20,r2
  810870:	5d000094 	ori	r20,r11,2
  810874:	0039883a 	mov	fp,zero
  810878:	003f9706 	br	8106d8 <__alt_mem_onchip_mem+0xff8086d8>
  81087c:	8025883a 	mov	r18,r16
  810880:	003c2e06 	br	80f93c <__alt_mem_onchip_mem+0xff80793c>
  810884:	00802074 	movhi	r2,129
  810888:	109d2004 	addi	r2,r2,29824
  81088c:	0039883a 	mov	fp,zero
  810890:	d8802615 	stw	r2,152(sp)
  810894:	003f9006 	br	8106d8 <__alt_mem_onchip_mem+0xff8086d8>
  810898:	04a5c83a 	sub	r18,zero,r18
  81089c:	07000b44 	movi	fp,45
  8108a0:	9004c03a 	cmpne	r2,r18,zero
  8108a4:	04e7c83a 	sub	r19,zero,r19
  8108a8:	df001d85 	stb	fp,118(sp)
  8108ac:	98a7c83a 	sub	r19,r19,r2
  8108b0:	48009f16 	blt	r9,zero,810b30 <___vfiprintf_internal_r+0x1338>
  8108b4:	00bfdfc4 	movi	r2,-129
  8108b8:	a0a8703a 	and	r20,r20,r2
  8108bc:	003dd006 	br	810000 <__alt_mem_onchip_mem+0xff808000>
  8108c0:	70004c26 	beq	r14,zero,8109f4 <___vfiprintf_internal_r+0x11fc>
  8108c4:	00800084 	movi	r2,2
  8108c8:	d8c01d04 	addi	r3,sp,116
  8108cc:	d8c00015 	stw	r3,0(sp)
  8108d0:	d8800115 	stw	r2,4(sp)
  8108d4:	01000044 	movi	r4,1
  8108d8:	d811883a 	mov	r8,sp
  8108dc:	003f7306 	br	8106ac <__alt_mem_onchip_mem+0xff8086ac>
  8108e0:	a080100c 	andi	r2,r20,64
  8108e4:	da802217 	ldw	r10,136(sp)
  8108e8:	103e0626 	beq	r2,zero,810104 <__alt_mem_onchip_mem+0xff808104>
  8108ec:	5480000f 	ldh	r18,0(r10)
  8108f0:	52800104 	addi	r10,r10,4
  8108f4:	da802215 	stw	r10,136(sp)
  8108f8:	9027d7fa 	srai	r19,r18,31
  8108fc:	9805883a 	mov	r2,r19
  810900:	003db806 	br	80ffe4 <__alt_mem_onchip_mem+0xff807fe4>
  810904:	a080040c 	andi	r2,r20,16
  810908:	1000091e 	bne	r2,zero,810930 <___vfiprintf_internal_r+0x1138>
  81090c:	a2c0100c 	andi	r11,r20,64
  810910:	58000726 	beq	r11,zero,810930 <___vfiprintf_internal_r+0x1138>
  810914:	da802217 	ldw	r10,136(sp)
  810918:	50800017 	ldw	r2,0(r10)
  81091c:	52800104 	addi	r10,r10,4
  810920:	da802215 	stw	r10,136(sp)
  810924:	da802317 	ldw	r10,140(sp)
  810928:	1280000d 	sth	r10,0(r2)
  81092c:	003be706 	br	80f8cc <__alt_mem_onchip_mem+0xff8078cc>
  810930:	da802217 	ldw	r10,136(sp)
  810934:	50800017 	ldw	r2,0(r10)
  810938:	52800104 	addi	r10,r10,4
  81093c:	da802215 	stw	r10,136(sp)
  810940:	da802317 	ldw	r10,140(sp)
  810944:	12800015 	stw	r10,0(r2)
  810948:	003be006 	br	80f8cc <__alt_mem_onchip_mem+0xff8078cc>
  81094c:	a080100c 	andi	r2,r20,64
  810950:	da802217 	ldw	r10,136(sp)
  810954:	10003026 	beq	r2,zero,810a18 <___vfiprintf_internal_r+0x1220>
  810958:	5480000b 	ldhu	r18,0(r10)
  81095c:	52800104 	addi	r10,r10,4
  810960:	0027883a 	mov	r19,zero
  810964:	da802215 	stw	r10,136(sp)
  810968:	003d8006 	br	80ff6c <__alt_mem_onchip_mem+0xff807f6c>
  81096c:	80c00007 	ldb	r3,0(r16)
  810970:	003c0006 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  810974:	a080100c 	andi	r2,r20,64
  810978:	d8001d85 	stb	zero,118(sp)
  81097c:	da802217 	ldw	r10,136(sp)
  810980:	1000201e 	bne	r2,zero,810a04 <___vfiprintf_internal_r+0x120c>
  810984:	50800104 	addi	r2,r10,4
  810988:	54800017 	ldw	r18,0(r10)
  81098c:	0027883a 	mov	r19,zero
  810990:	483def0e 	bge	r9,zero,810150 <__alt_mem_onchip_mem+0xff808150>
  810994:	94c6b03a 	or	r3,r18,r19
  810998:	d8802215 	stw	r2,136(sp)
  81099c:	183d4e1e 	bne	r3,zero,80fed8 <__alt_mem_onchip_mem+0xff807ed8>
  8109a0:	0039883a 	mov	fp,zero
  8109a4:	0005883a 	mov	r2,zero
  8109a8:	003e0606 	br	8101c4 <__alt_mem_onchip_mem+0xff8081c4>
  8109ac:	d9402117 	ldw	r5,132(sp)
  8109b0:	d9002017 	ldw	r4,128(sp)
  8109b4:	d9801a04 	addi	r6,sp,104
  8109b8:	da402c15 	stw	r9,176(sp)
  8109bc:	db802a15 	stw	r14,168(sp)
  8109c0:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  8109c4:	da402c17 	ldw	r9,176(sp)
  8109c8:	db802a17 	ldw	r14,168(sp)
  8109cc:	103ede1e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  8109d0:	d9401b17 	ldw	r5,108(sp)
  8109d4:	d8801c17 	ldw	r2,112(sp)
  8109d8:	d811883a 	mov	r8,sp
  8109dc:	29000044 	addi	r4,r5,1
  8109e0:	003e7406 	br	8103b4 <__alt_mem_onchip_mem+0xff8083b4>
  8109e4:	00bfffc4 	movi	r2,-1
  8109e8:	003c5806 	br	80fb4c <__alt_mem_onchip_mem+0xff807b4c>
  8109ec:	d811883a 	mov	r8,sp
  8109f0:	003ee806 	br	810594 <__alt_mem_onchip_mem+0xff808594>
  8109f4:	000b883a 	mov	r5,zero
  8109f8:	01000044 	movi	r4,1
  8109fc:	d811883a 	mov	r8,sp
  810a00:	003e7c06 	br	8103f4 <__alt_mem_onchip_mem+0xff8083f4>
  810a04:	50800104 	addi	r2,r10,4
  810a08:	5480000b 	ldhu	r18,0(r10)
  810a0c:	0027883a 	mov	r19,zero
  810a10:	483dcf0e 	bge	r9,zero,810150 <__alt_mem_onchip_mem+0xff808150>
  810a14:	003fdf06 	br	810994 <__alt_mem_onchip_mem+0xff808994>
  810a18:	54800017 	ldw	r18,0(r10)
  810a1c:	52800104 	addi	r10,r10,4
  810a20:	0027883a 	mov	r19,zero
  810a24:	da802215 	stw	r10,136(sp)
  810a28:	003d5006 	br	80ff6c <__alt_mem_onchip_mem+0xff807f6c>
  810a2c:	50800104 	addi	r2,r10,4
  810a30:	5480000b 	ldhu	r18,0(r10)
  810a34:	0027883a 	mov	r19,zero
  810a38:	483f7d0e 	bge	r9,zero,810830 <__alt_mem_onchip_mem+0xff808830>
  810a3c:	003ddc06 	br	8101b0 <__alt_mem_onchip_mem+0xff8081b0>
  810a40:	d8c02215 	stw	r3,136(sp)
  810a44:	0039883a 	mov	fp,zero
  810a48:	003ddb06 	br	8101b8 <__alt_mem_onchip_mem+0xff8081b8>
  810a4c:	02802074 	movhi	r10,129
  810a50:	529d8004 	addi	r10,r10,30208
  810a54:	da802415 	stw	r10,144(sp)
  810a58:	003e8306 	br	810468 <__alt_mem_onchip_mem+0xff808468>
  810a5c:	d8801c17 	ldw	r2,112(sp)
  810a60:	dd002117 	ldw	r20,132(sp)
  810a64:	103eb926 	beq	r2,zero,81054c <__alt_mem_onchip_mem+0xff80854c>
  810a68:	d9002017 	ldw	r4,128(sp)
  810a6c:	d9801a04 	addi	r6,sp,104
  810a70:	a00b883a 	mov	r5,r20
  810a74:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810a78:	003eb406 	br	81054c <__alt_mem_onchip_mem+0xff80854c>
  810a7c:	80c00043 	ldbu	r3,1(r16)
  810a80:	a5000814 	ori	r20,r20,32
  810a84:	84000044 	addi	r16,r16,1
  810a88:	18c03fcc 	andi	r3,r3,255
  810a8c:	18c0201c 	xori	r3,r3,128
  810a90:	18ffe004 	addi	r3,r3,-128
  810a94:	003bb706 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  810a98:	a809883a 	mov	r4,r21
  810a9c:	d8c02a15 	stw	r3,168(sp)
  810aa0:	da002b15 	stw	r8,172(sp)
  810aa4:	08096000 	call	809600 <strlen>
  810aa8:	d8c02a17 	ldw	r3,168(sp)
  810aac:	1027883a 	mov	r19,r2
  810ab0:	df001d83 	ldbu	fp,118(sp)
  810ab4:	d8c02215 	stw	r3,136(sp)
  810ab8:	0013883a 	mov	r9,zero
  810abc:	da002b17 	ldw	r8,172(sp)
  810ac0:	003c4d06 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  810ac4:	d9402117 	ldw	r5,132(sp)
  810ac8:	d9002017 	ldw	r4,128(sp)
  810acc:	d9801a04 	addi	r6,sp,104
  810ad0:	da402c15 	stw	r9,176(sp)
  810ad4:	080f6e40 	call	80f6e4 <__sprint_r.part.0>
  810ad8:	da402c17 	ldw	r9,176(sp)
  810adc:	103e9a1e 	bne	r2,zero,810548 <__alt_mem_onchip_mem+0xff808548>
  810ae0:	d9401b17 	ldw	r5,108(sp)
  810ae4:	d8801c17 	ldw	r2,112(sp)
  810ae8:	d811883a 	mov	r8,sp
  810aec:	29000044 	addi	r4,r5,1
  810af0:	003e4206 	br	8103fc <__alt_mem_onchip_mem+0xff8083fc>
  810af4:	d9401b17 	ldw	r5,108(sp)
  810af8:	01002074 	movhi	r4,129
  810afc:	211d8404 	addi	r4,r4,30224
  810b00:	d9002415 	stw	r4,144(sp)
  810b04:	29400044 	addi	r5,r5,1
  810b08:	003c6d06 	br	80fcc0 <__alt_mem_onchip_mem+0xff807cc0>
  810b0c:	0039883a 	mov	fp,zero
  810b10:	00800084 	movi	r2,2
  810b14:	10803fcc 	andi	r2,r2,255
  810b18:	01000044 	movi	r4,1
  810b1c:	11001e26 	beq	r2,r4,810b98 <___vfiprintf_internal_r+0x13a0>
  810b20:	01000084 	movi	r4,2
  810b24:	11001e1e 	bne	r2,r4,810ba0 <___vfiprintf_internal_r+0x13a8>
  810b28:	1829883a 	mov	r20,r3
  810b2c:	003eea06 	br	8106d8 <__alt_mem_onchip_mem+0xff8086d8>
  810b30:	a007883a 	mov	r3,r20
  810b34:	00800044 	movi	r2,1
  810b38:	003ff606 	br	810b14 <__alt_mem_onchip_mem+0xff808b14>
  810b3c:	00800184 	movi	r2,6
  810b40:	1240012e 	bgeu	r2,r9,810b48 <___vfiprintf_internal_r+0x1350>
  810b44:	1013883a 	mov	r9,r2
  810b48:	4827883a 	mov	r19,r9
  810b4c:	4825883a 	mov	r18,r9
  810b50:	48001516 	blt	r9,zero,810ba8 <___vfiprintf_internal_r+0x13b0>
  810b54:	05402074 	movhi	r21,129
  810b58:	d8c02215 	stw	r3,136(sp)
  810b5c:	ad5d2504 	addi	r21,r21,29844
  810b60:	003d1406 	br	80ffb4 <__alt_mem_onchip_mem+0xff807fb4>
  810b64:	02802074 	movhi	r10,129
  810b68:	529d8004 	addi	r10,r10,30208
  810b6c:	da802415 	stw	r10,144(sp)
  810b70:	200d883a 	mov	r6,r4
  810b74:	003c9106 	br	80fdbc <__alt_mem_onchip_mem+0xff807dbc>
  810b78:	5021883a 	mov	r16,r10
  810b7c:	0013883a 	mov	r9,zero
  810b80:	003b7d06 	br	80f978 <__alt_mem_onchip_mem+0xff807978>
  810b84:	4827883a 	mov	r19,r9
  810b88:	df001d83 	ldbu	fp,118(sp)
  810b8c:	d8c02215 	stw	r3,136(sp)
  810b90:	0013883a 	mov	r9,zero
  810b94:	003c1806 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  810b98:	1829883a 	mov	r20,r3
  810b9c:	003d1806 	br	810000 <__alt_mem_onchip_mem+0xff808000>
  810ba0:	1829883a 	mov	r20,r3
  810ba4:	003ccd06 	br	80fedc <__alt_mem_onchip_mem+0xff807edc>
  810ba8:	0025883a 	mov	r18,zero
  810bac:	003fe906 	br	810b54 <__alt_mem_onchip_mem+0xff808b54>
  810bb0:	d8802217 	ldw	r2,136(sp)
  810bb4:	80c00043 	ldbu	r3,1(r16)
  810bb8:	5021883a 	mov	r16,r10
  810bbc:	12400017 	ldw	r9,0(r2)
  810bc0:	10800104 	addi	r2,r2,4
  810bc4:	d8802215 	stw	r2,136(sp)
  810bc8:	483faf0e 	bge	r9,zero,810a88 <__alt_mem_onchip_mem+0xff808a88>
  810bcc:	18c03fcc 	andi	r3,r3,255
  810bd0:	18c0201c 	xori	r3,r3,128
  810bd4:	027fffc4 	movi	r9,-1
  810bd8:	18ffe004 	addi	r3,r3,-128
  810bdc:	003b6506 	br	80f974 <__alt_mem_onchip_mem+0xff807974>
  810be0:	d9c01d85 	stb	r7,118(sp)
  810be4:	003ca006 	br	80fe68 <__alt_mem_onchip_mem+0xff807e68>
  810be8:	d9c01d85 	stb	r7,118(sp)
  810bec:	003cad06 	br	80fea4 <__alt_mem_onchip_mem+0xff807ea4>
  810bf0:	d9c01d85 	stb	r7,118(sp)
  810bf4:	003d7d06 	br	8101ec <__alt_mem_onchip_mem+0xff8081ec>
  810bf8:	d9c01d85 	stb	r7,118(sp)
  810bfc:	003d5f06 	br	81017c <__alt_mem_onchip_mem+0xff80817c>
  810c00:	a080004c 	andi	r2,r20,1
  810c04:	0039883a 	mov	fp,zero
  810c08:	10000526 	beq	r2,zero,810c20 <___vfiprintf_internal_r+0x1428>
  810c0c:	00800c04 	movi	r2,48
  810c10:	d88019c5 	stb	r2,103(sp)
  810c14:	dcc02717 	ldw	r19,156(sp)
  810c18:	dd4019c4 	addi	r21,sp,103
  810c1c:	003bf606 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  810c20:	0027883a 	mov	r19,zero
  810c24:	dd401a04 	addi	r21,sp,104
  810c28:	003bf306 	br	80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  810c2c:	d9c01d85 	stb	r7,118(sp)
  810c30:	003dc806 	br	810354 <__alt_mem_onchip_mem+0xff808354>
  810c34:	d9c01d85 	stb	r7,118(sp)
  810c38:	003d3a06 	br	810124 <__alt_mem_onchip_mem+0xff808124>
  810c3c:	d9c01d85 	stb	r7,118(sp)
  810c40:	003d2a06 	br	8100ec <__alt_mem_onchip_mem+0xff8080ec>
  810c44:	d9c01d85 	stb	r7,118(sp)
  810c48:	003cde06 	br	80ffc4 <__alt_mem_onchip_mem+0xff807fc4>
  810c4c:	d9c01d85 	stb	r7,118(sp)
  810c50:	003cbc06 	br	80ff44 <__alt_mem_onchip_mem+0xff807f44>

00810c54 <__vfiprintf_internal>:
  810c54:	008020b4 	movhi	r2,130
  810c58:	10a56604 	addi	r2,r2,-27240
  810c5c:	300f883a 	mov	r7,r6
  810c60:	280d883a 	mov	r6,r5
  810c64:	200b883a 	mov	r5,r4
  810c68:	11000017 	ldw	r4,0(r2)
  810c6c:	080f7f81 	jmpi	80f7f8 <___vfiprintf_internal_r>

00810c70 <__sbprintf>:
  810c70:	2880030b 	ldhu	r2,12(r5)
  810c74:	2ac01917 	ldw	r11,100(r5)
  810c78:	2a80038b 	ldhu	r10,14(r5)
  810c7c:	2a400717 	ldw	r9,28(r5)
  810c80:	2a000917 	ldw	r8,36(r5)
  810c84:	defee204 	addi	sp,sp,-1144
  810c88:	00c10004 	movi	r3,1024
  810c8c:	dc011a15 	stw	r16,1128(sp)
  810c90:	10bfff4c 	andi	r2,r2,65533
  810c94:	2821883a 	mov	r16,r5
  810c98:	d8cb883a 	add	r5,sp,r3
  810c9c:	dc811c15 	stw	r18,1136(sp)
  810ca0:	dc411b15 	stw	r17,1132(sp)
  810ca4:	dfc11d15 	stw	ra,1140(sp)
  810ca8:	2025883a 	mov	r18,r4
  810cac:	d881030d 	sth	r2,1036(sp)
  810cb0:	dac11915 	stw	r11,1124(sp)
  810cb4:	da81038d 	sth	r10,1038(sp)
  810cb8:	da410715 	stw	r9,1052(sp)
  810cbc:	da010915 	stw	r8,1060(sp)
  810cc0:	dec10015 	stw	sp,1024(sp)
  810cc4:	dec10415 	stw	sp,1040(sp)
  810cc8:	d8c10215 	stw	r3,1032(sp)
  810ccc:	d8c10515 	stw	r3,1044(sp)
  810cd0:	d8010615 	stw	zero,1048(sp)
  810cd4:	080f7f80 	call	80f7f8 <___vfiprintf_internal_r>
  810cd8:	1023883a 	mov	r17,r2
  810cdc:	10000416 	blt	r2,zero,810cf0 <__sbprintf+0x80>
  810ce0:	d9410004 	addi	r5,sp,1024
  810ce4:	9009883a 	mov	r4,r18
  810ce8:	08074380 	call	807438 <_fflush_r>
  810cec:	10000d1e 	bne	r2,zero,810d24 <__sbprintf+0xb4>
  810cf0:	d881030b 	ldhu	r2,1036(sp)
  810cf4:	1080100c 	andi	r2,r2,64
  810cf8:	10000326 	beq	r2,zero,810d08 <__sbprintf+0x98>
  810cfc:	8080030b 	ldhu	r2,12(r16)
  810d00:	10801014 	ori	r2,r2,64
  810d04:	8080030d 	sth	r2,12(r16)
  810d08:	8805883a 	mov	r2,r17
  810d0c:	dfc11d17 	ldw	ra,1140(sp)
  810d10:	dc811c17 	ldw	r18,1136(sp)
  810d14:	dc411b17 	ldw	r17,1132(sp)
  810d18:	dc011a17 	ldw	r16,1128(sp)
  810d1c:	dec11e04 	addi	sp,sp,1144
  810d20:	f800283a 	ret
  810d24:	047fffc4 	movi	r17,-1
  810d28:	003ff106 	br	810cf0 <__alt_mem_onchip_mem+0xff808cf0>

00810d2c <_calloc_r>:
  810d2c:	298b383a 	mul	r5,r5,r6
  810d30:	defffe04 	addi	sp,sp,-8
  810d34:	dfc00115 	stw	ra,4(sp)
  810d38:	dc000015 	stw	r16,0(sp)
  810d3c:	08086b00 	call	8086b0 <_malloc_r>
  810d40:	10002926 	beq	r2,zero,810de8 <_calloc_r+0xbc>
  810d44:	11bfff17 	ldw	r6,-4(r2)
  810d48:	1021883a 	mov	r16,r2
  810d4c:	00bfff04 	movi	r2,-4
  810d50:	308c703a 	and	r6,r6,r2
  810d54:	00c00904 	movi	r3,36
  810d58:	308d883a 	add	r6,r6,r2
  810d5c:	19801636 	bltu	r3,r6,810db8 <_calloc_r+0x8c>
  810d60:	008004c4 	movi	r2,19
  810d64:	11800b2e 	bgeu	r2,r6,810d94 <_calloc_r+0x68>
  810d68:	80000015 	stw	zero,0(r16)
  810d6c:	80000115 	stw	zero,4(r16)
  810d70:	008006c4 	movi	r2,27
  810d74:	11801a2e 	bgeu	r2,r6,810de0 <_calloc_r+0xb4>
  810d78:	80000215 	stw	zero,8(r16)
  810d7c:	80000315 	stw	zero,12(r16)
  810d80:	30c0151e 	bne	r6,r3,810dd8 <_calloc_r+0xac>
  810d84:	80000415 	stw	zero,16(r16)
  810d88:	80800604 	addi	r2,r16,24
  810d8c:	80000515 	stw	zero,20(r16)
  810d90:	00000106 	br	810d98 <_calloc_r+0x6c>
  810d94:	8005883a 	mov	r2,r16
  810d98:	10000015 	stw	zero,0(r2)
  810d9c:	10000115 	stw	zero,4(r2)
  810da0:	10000215 	stw	zero,8(r2)
  810da4:	8005883a 	mov	r2,r16
  810da8:	dfc00117 	ldw	ra,4(sp)
  810dac:	dc000017 	ldw	r16,0(sp)
  810db0:	dec00204 	addi	sp,sp,8
  810db4:	f800283a 	ret
  810db8:	000b883a 	mov	r5,zero
  810dbc:	8009883a 	mov	r4,r16
  810dc0:	0808ebc0 	call	808ebc <memset>
  810dc4:	8005883a 	mov	r2,r16
  810dc8:	dfc00117 	ldw	ra,4(sp)
  810dcc:	dc000017 	ldw	r16,0(sp)
  810dd0:	dec00204 	addi	sp,sp,8
  810dd4:	f800283a 	ret
  810dd8:	80800404 	addi	r2,r16,16
  810ddc:	003fee06 	br	810d98 <__alt_mem_onchip_mem+0xff808d98>
  810de0:	80800204 	addi	r2,r16,8
  810de4:	003fec06 	br	810d98 <__alt_mem_onchip_mem+0xff808d98>
  810de8:	0005883a 	mov	r2,zero
  810dec:	003fee06 	br	810da8 <__alt_mem_onchip_mem+0xff808da8>

00810df0 <__fputwc>:
  810df0:	defff804 	addi	sp,sp,-32
  810df4:	dcc00415 	stw	r19,16(sp)
  810df8:	dc800315 	stw	r18,12(sp)
  810dfc:	dc000115 	stw	r16,4(sp)
  810e00:	dfc00715 	stw	ra,28(sp)
  810e04:	dd400615 	stw	r21,24(sp)
  810e08:	dd000515 	stw	r20,20(sp)
  810e0c:	dc400215 	stw	r17,8(sp)
  810e10:	2027883a 	mov	r19,r4
  810e14:	2825883a 	mov	r18,r5
  810e18:	3021883a 	mov	r16,r6
  810e1c:	080db980 	call	80db98 <__locale_mb_cur_max>
  810e20:	00c00044 	movi	r3,1
  810e24:	10c03e26 	beq	r2,r3,810f20 <__fputwc+0x130>
  810e28:	81c01704 	addi	r7,r16,92
  810e2c:	900d883a 	mov	r6,r18
  810e30:	d80b883a 	mov	r5,sp
  810e34:	9809883a 	mov	r4,r19
  810e38:	0810ff80 	call	810ff8 <_wcrtomb_r>
  810e3c:	1029883a 	mov	r20,r2
  810e40:	00bfffc4 	movi	r2,-1
  810e44:	a0802026 	beq	r20,r2,810ec8 <__fputwc+0xd8>
  810e48:	d9400003 	ldbu	r5,0(sp)
  810e4c:	a0001c26 	beq	r20,zero,810ec0 <__fputwc+0xd0>
  810e50:	0023883a 	mov	r17,zero
  810e54:	05400284 	movi	r21,10
  810e58:	00000906 	br	810e80 <__fputwc+0x90>
  810e5c:	80800017 	ldw	r2,0(r16)
  810e60:	11400005 	stb	r5,0(r2)
  810e64:	80c00017 	ldw	r3,0(r16)
  810e68:	18c00044 	addi	r3,r3,1
  810e6c:	80c00015 	stw	r3,0(r16)
  810e70:	8c400044 	addi	r17,r17,1
  810e74:	dc45883a 	add	r2,sp,r17
  810e78:	8d00112e 	bgeu	r17,r20,810ec0 <__fputwc+0xd0>
  810e7c:	11400003 	ldbu	r5,0(r2)
  810e80:	80c00217 	ldw	r3,8(r16)
  810e84:	18ffffc4 	addi	r3,r3,-1
  810e88:	80c00215 	stw	r3,8(r16)
  810e8c:	183ff30e 	bge	r3,zero,810e5c <__alt_mem_onchip_mem+0xff808e5c>
  810e90:	80800617 	ldw	r2,24(r16)
  810e94:	18801916 	blt	r3,r2,810efc <__fputwc+0x10c>
  810e98:	80800017 	ldw	r2,0(r16)
  810e9c:	11400005 	stb	r5,0(r2)
  810ea0:	80800017 	ldw	r2,0(r16)
  810ea4:	10c00003 	ldbu	r3,0(r2)
  810ea8:	10800044 	addi	r2,r2,1
  810eac:	1d402326 	beq	r3,r21,810f3c <__fputwc+0x14c>
  810eb0:	80800015 	stw	r2,0(r16)
  810eb4:	8c400044 	addi	r17,r17,1
  810eb8:	dc45883a 	add	r2,sp,r17
  810ebc:	8d3fef36 	bltu	r17,r20,810e7c <__alt_mem_onchip_mem+0xff808e7c>
  810ec0:	9005883a 	mov	r2,r18
  810ec4:	00000406 	br	810ed8 <__fputwc+0xe8>
  810ec8:	80c0030b 	ldhu	r3,12(r16)
  810ecc:	a005883a 	mov	r2,r20
  810ed0:	18c01014 	ori	r3,r3,64
  810ed4:	80c0030d 	sth	r3,12(r16)
  810ed8:	dfc00717 	ldw	ra,28(sp)
  810edc:	dd400617 	ldw	r21,24(sp)
  810ee0:	dd000517 	ldw	r20,20(sp)
  810ee4:	dcc00417 	ldw	r19,16(sp)
  810ee8:	dc800317 	ldw	r18,12(sp)
  810eec:	dc400217 	ldw	r17,8(sp)
  810ef0:	dc000117 	ldw	r16,4(sp)
  810ef4:	dec00804 	addi	sp,sp,32
  810ef8:	f800283a 	ret
  810efc:	800d883a 	mov	r6,r16
  810f00:	29403fcc 	andi	r5,r5,255
  810f04:	9809883a 	mov	r4,r19
  810f08:	080b96c0 	call	80b96c <__swbuf_r>
  810f0c:	10bfffe0 	cmpeqi	r2,r2,-1
  810f10:	10803fcc 	andi	r2,r2,255
  810f14:	103fd626 	beq	r2,zero,810e70 <__alt_mem_onchip_mem+0xff808e70>
  810f18:	00bfffc4 	movi	r2,-1
  810f1c:	003fee06 	br	810ed8 <__alt_mem_onchip_mem+0xff808ed8>
  810f20:	90ffffc4 	addi	r3,r18,-1
  810f24:	01003f84 	movi	r4,254
  810f28:	20ffbf36 	bltu	r4,r3,810e28 <__alt_mem_onchip_mem+0xff808e28>
  810f2c:	900b883a 	mov	r5,r18
  810f30:	dc800005 	stb	r18,0(sp)
  810f34:	1029883a 	mov	r20,r2
  810f38:	003fc506 	br	810e50 <__alt_mem_onchip_mem+0xff808e50>
  810f3c:	800d883a 	mov	r6,r16
  810f40:	a80b883a 	mov	r5,r21
  810f44:	9809883a 	mov	r4,r19
  810f48:	080b96c0 	call	80b96c <__swbuf_r>
  810f4c:	10bfffe0 	cmpeqi	r2,r2,-1
  810f50:	003fef06 	br	810f10 <__alt_mem_onchip_mem+0xff808f10>

00810f54 <_fputwc_r>:
  810f54:	3080030b 	ldhu	r2,12(r6)
  810f58:	10c8000c 	andi	r3,r2,8192
  810f5c:	1800051e 	bne	r3,zero,810f74 <_fputwc_r+0x20>
  810f60:	30c01917 	ldw	r3,100(r6)
  810f64:	10880014 	ori	r2,r2,8192
  810f68:	3080030d 	sth	r2,12(r6)
  810f6c:	18880014 	ori	r2,r3,8192
  810f70:	30801915 	stw	r2,100(r6)
  810f74:	0810df01 	jmpi	810df0 <__fputwc>

00810f78 <fputwc>:
  810f78:	008020b4 	movhi	r2,130
  810f7c:	defffc04 	addi	sp,sp,-16
  810f80:	10a56604 	addi	r2,r2,-27240
  810f84:	dc000115 	stw	r16,4(sp)
  810f88:	14000017 	ldw	r16,0(r2)
  810f8c:	dc400215 	stw	r17,8(sp)
  810f90:	dfc00315 	stw	ra,12(sp)
  810f94:	2023883a 	mov	r17,r4
  810f98:	80000226 	beq	r16,zero,810fa4 <fputwc+0x2c>
  810f9c:	80800e17 	ldw	r2,56(r16)
  810fa0:	10001026 	beq	r2,zero,810fe4 <fputwc+0x6c>
  810fa4:	2880030b 	ldhu	r2,12(r5)
  810fa8:	10c8000c 	andi	r3,r2,8192
  810fac:	1800051e 	bne	r3,zero,810fc4 <fputwc+0x4c>
  810fb0:	28c01917 	ldw	r3,100(r5)
  810fb4:	10880014 	ori	r2,r2,8192
  810fb8:	2880030d 	sth	r2,12(r5)
  810fbc:	18880014 	ori	r2,r3,8192
  810fc0:	28801915 	stw	r2,100(r5)
  810fc4:	280d883a 	mov	r6,r5
  810fc8:	8009883a 	mov	r4,r16
  810fcc:	880b883a 	mov	r5,r17
  810fd0:	dfc00317 	ldw	ra,12(sp)
  810fd4:	dc400217 	ldw	r17,8(sp)
  810fd8:	dc000117 	ldw	r16,4(sp)
  810fdc:	dec00404 	addi	sp,sp,16
  810fe0:	0810df01 	jmpi	810df0 <__fputwc>
  810fe4:	8009883a 	mov	r4,r16
  810fe8:	d9400015 	stw	r5,0(sp)
  810fec:	08078140 	call	807814 <__sinit>
  810ff0:	d9400017 	ldw	r5,0(sp)
  810ff4:	003feb06 	br	810fa4 <__alt_mem_onchip_mem+0xff808fa4>

00810ff8 <_wcrtomb_r>:
  810ff8:	defff604 	addi	sp,sp,-40
  810ffc:	008020b4 	movhi	r2,130
  811000:	dc800815 	stw	r18,32(sp)
  811004:	dc400715 	stw	r17,28(sp)
  811008:	dc000615 	stw	r16,24(sp)
  81100c:	10a56a04 	addi	r2,r2,-27224
  811010:	dfc00915 	stw	ra,36(sp)
  811014:	2021883a 	mov	r16,r4
  811018:	3823883a 	mov	r17,r7
  81101c:	14800017 	ldw	r18,0(r2)
  811020:	28001426 	beq	r5,zero,811074 <_wcrtomb_r+0x7c>
  811024:	d9400415 	stw	r5,16(sp)
  811028:	d9800515 	stw	r6,20(sp)
  81102c:	080db8c0 	call	80db8c <__locale_charset>
  811030:	d9800517 	ldw	r6,20(sp)
  811034:	d9400417 	ldw	r5,16(sp)
  811038:	100f883a 	mov	r7,r2
  81103c:	dc400015 	stw	r17,0(sp)
  811040:	8009883a 	mov	r4,r16
  811044:	903ee83a 	callr	r18
  811048:	00ffffc4 	movi	r3,-1
  81104c:	10c0031e 	bne	r2,r3,81105c <_wcrtomb_r+0x64>
  811050:	88000015 	stw	zero,0(r17)
  811054:	00c02284 	movi	r3,138
  811058:	80c00015 	stw	r3,0(r16)
  81105c:	dfc00917 	ldw	ra,36(sp)
  811060:	dc800817 	ldw	r18,32(sp)
  811064:	dc400717 	ldw	r17,28(sp)
  811068:	dc000617 	ldw	r16,24(sp)
  81106c:	dec00a04 	addi	sp,sp,40
  811070:	f800283a 	ret
  811074:	080db8c0 	call	80db8c <__locale_charset>
  811078:	100f883a 	mov	r7,r2
  81107c:	dc400015 	stw	r17,0(sp)
  811080:	000d883a 	mov	r6,zero
  811084:	d9400104 	addi	r5,sp,4
  811088:	8009883a 	mov	r4,r16
  81108c:	903ee83a 	callr	r18
  811090:	003fed06 	br	811048 <__alt_mem_onchip_mem+0xff809048>

00811094 <wcrtomb>:
  811094:	defff604 	addi	sp,sp,-40
  811098:	008020b4 	movhi	r2,130
  81109c:	dc800615 	stw	r18,24(sp)
  8110a0:	dc400515 	stw	r17,20(sp)
  8110a4:	10a56604 	addi	r2,r2,-27240
  8110a8:	dfc00915 	stw	ra,36(sp)
  8110ac:	dd000815 	stw	r20,32(sp)
  8110b0:	dcc00715 	stw	r19,28(sp)
  8110b4:	dc000415 	stw	r16,16(sp)
  8110b8:	3025883a 	mov	r18,r6
  8110bc:	14400017 	ldw	r17,0(r2)
  8110c0:	20001926 	beq	r4,zero,811128 <wcrtomb+0x94>
  8110c4:	008020b4 	movhi	r2,130
  8110c8:	10a56a04 	addi	r2,r2,-27224
  8110cc:	15000017 	ldw	r20,0(r2)
  8110d0:	2021883a 	mov	r16,r4
  8110d4:	2827883a 	mov	r19,r5
  8110d8:	080db8c0 	call	80db8c <__locale_charset>
  8110dc:	100f883a 	mov	r7,r2
  8110e0:	dc800015 	stw	r18,0(sp)
  8110e4:	980d883a 	mov	r6,r19
  8110e8:	800b883a 	mov	r5,r16
  8110ec:	8809883a 	mov	r4,r17
  8110f0:	a03ee83a 	callr	r20
  8110f4:	00ffffc4 	movi	r3,-1
  8110f8:	10c0031e 	bne	r2,r3,811108 <wcrtomb+0x74>
  8110fc:	90000015 	stw	zero,0(r18)
  811100:	00c02284 	movi	r3,138
  811104:	88c00015 	stw	r3,0(r17)
  811108:	dfc00917 	ldw	ra,36(sp)
  81110c:	dd000817 	ldw	r20,32(sp)
  811110:	dcc00717 	ldw	r19,28(sp)
  811114:	dc800617 	ldw	r18,24(sp)
  811118:	dc400517 	ldw	r17,20(sp)
  81111c:	dc000417 	ldw	r16,16(sp)
  811120:	dec00a04 	addi	sp,sp,40
  811124:	f800283a 	ret
  811128:	008020b4 	movhi	r2,130
  81112c:	10a56a04 	addi	r2,r2,-27224
  811130:	14000017 	ldw	r16,0(r2)
  811134:	080db8c0 	call	80db8c <__locale_charset>
  811138:	100f883a 	mov	r7,r2
  81113c:	dc800015 	stw	r18,0(sp)
  811140:	000d883a 	mov	r6,zero
  811144:	d9400104 	addi	r5,sp,4
  811148:	8809883a 	mov	r4,r17
  81114c:	803ee83a 	callr	r16
  811150:	003fe806 	br	8110f4 <__alt_mem_onchip_mem+0xff8090f4>

00811154 <__ascii_wctomb>:
  811154:	28000526 	beq	r5,zero,81116c <__ascii_wctomb+0x18>
  811158:	00803fc4 	movi	r2,255
  81115c:	11800536 	bltu	r2,r6,811174 <__ascii_wctomb+0x20>
  811160:	29800005 	stb	r6,0(r5)
  811164:	00800044 	movi	r2,1
  811168:	f800283a 	ret
  81116c:	0005883a 	mov	r2,zero
  811170:	f800283a 	ret
  811174:	00802284 	movi	r2,138
  811178:	20800015 	stw	r2,0(r4)
  81117c:	00bfffc4 	movi	r2,-1
  811180:	f800283a 	ret

00811184 <_wctomb_r>:
  811184:	008020b4 	movhi	r2,130
  811188:	defff904 	addi	sp,sp,-28
  81118c:	10a56a04 	addi	r2,r2,-27224
  811190:	dfc00615 	stw	ra,24(sp)
  811194:	dc400515 	stw	r17,20(sp)
  811198:	dc000415 	stw	r16,16(sp)
  81119c:	3823883a 	mov	r17,r7
  8111a0:	14000017 	ldw	r16,0(r2)
  8111a4:	d9000115 	stw	r4,4(sp)
  8111a8:	d9400215 	stw	r5,8(sp)
  8111ac:	d9800315 	stw	r6,12(sp)
  8111b0:	080db8c0 	call	80db8c <__locale_charset>
  8111b4:	d9800317 	ldw	r6,12(sp)
  8111b8:	d9400217 	ldw	r5,8(sp)
  8111bc:	d9000117 	ldw	r4,4(sp)
  8111c0:	100f883a 	mov	r7,r2
  8111c4:	dc400015 	stw	r17,0(sp)
  8111c8:	803ee83a 	callr	r16
  8111cc:	dfc00617 	ldw	ra,24(sp)
  8111d0:	dc400517 	ldw	r17,20(sp)
  8111d4:	dc000417 	ldw	r16,16(sp)
  8111d8:	dec00704 	addi	sp,sp,28
  8111dc:	f800283a 	ret

008111e0 <__udivdi3>:
  8111e0:	defff504 	addi	sp,sp,-44
  8111e4:	dcc00415 	stw	r19,16(sp)
  8111e8:	dc000115 	stw	r16,4(sp)
  8111ec:	dfc00a15 	stw	ra,40(sp)
  8111f0:	df000915 	stw	fp,36(sp)
  8111f4:	ddc00815 	stw	r23,32(sp)
  8111f8:	dd800715 	stw	r22,28(sp)
  8111fc:	dd400615 	stw	r21,24(sp)
  811200:	dd000515 	stw	r20,20(sp)
  811204:	dc800315 	stw	r18,12(sp)
  811208:	dc400215 	stw	r17,8(sp)
  81120c:	2027883a 	mov	r19,r4
  811210:	2821883a 	mov	r16,r5
  811214:	3800411e 	bne	r7,zero,81131c <__udivdi3+0x13c>
  811218:	3023883a 	mov	r17,r6
  81121c:	2025883a 	mov	r18,r4
  811220:	2980522e 	bgeu	r5,r6,81136c <__udivdi3+0x18c>
  811224:	00bfffd4 	movui	r2,65535
  811228:	282d883a 	mov	r22,r5
  81122c:	1180a836 	bltu	r2,r6,8114d0 <__udivdi3+0x2f0>
  811230:	00803fc4 	movi	r2,255
  811234:	1185803a 	cmpltu	r2,r2,r6
  811238:	100490fa 	slli	r2,r2,3
  81123c:	3086d83a 	srl	r3,r6,r2
  811240:	01002074 	movhi	r4,129
  811244:	211cd4c4 	addi	r4,r4,29523
  811248:	20c7883a 	add	r3,r4,r3
  81124c:	18c00003 	ldbu	r3,0(r3)
  811250:	1885883a 	add	r2,r3,r2
  811254:	00c00804 	movi	r3,32
  811258:	1887c83a 	sub	r3,r3,r2
  81125c:	18000526 	beq	r3,zero,811274 <__udivdi3+0x94>
  811260:	80e0983a 	sll	r16,r16,r3
  811264:	9884d83a 	srl	r2,r19,r2
  811268:	30e2983a 	sll	r17,r6,r3
  81126c:	98e4983a 	sll	r18,r19,r3
  811270:	142cb03a 	or	r22,r2,r16
  811274:	882ad43a 	srli	r21,r17,16
  811278:	b009883a 	mov	r4,r22
  81127c:	8d3fffcc 	andi	r20,r17,65535
  811280:	a80b883a 	mov	r5,r21
  811284:	0811dec0 	call	811dec <__umodsi3>
  811288:	b009883a 	mov	r4,r22
  81128c:	a80b883a 	mov	r5,r21
  811290:	1027883a 	mov	r19,r2
  811294:	0811d880 	call	811d88 <__udivsi3>
  811298:	102d883a 	mov	r22,r2
  81129c:	9826943a 	slli	r19,r19,16
  8112a0:	9004d43a 	srli	r2,r18,16
  8112a4:	a5a1383a 	mul	r16,r20,r22
  8112a8:	14c4b03a 	or	r2,r2,r19
  8112ac:	1400052e 	bgeu	r2,r16,8112c4 <__udivdi3+0xe4>
  8112b0:	1445883a 	add	r2,r2,r17
  8112b4:	b0ffffc4 	addi	r3,r22,-1
  8112b8:	14400136 	bltu	r2,r17,8112c0 <__udivdi3+0xe0>
  8112bc:	14012336 	bltu	r2,r16,81174c <__udivdi3+0x56c>
  8112c0:	182d883a 	mov	r22,r3
  8112c4:	1421c83a 	sub	r16,r2,r16
  8112c8:	a80b883a 	mov	r5,r21
  8112cc:	8009883a 	mov	r4,r16
  8112d0:	0811dec0 	call	811dec <__umodsi3>
  8112d4:	1027883a 	mov	r19,r2
  8112d8:	a80b883a 	mov	r5,r21
  8112dc:	8009883a 	mov	r4,r16
  8112e0:	0811d880 	call	811d88 <__udivsi3>
  8112e4:	9826943a 	slli	r19,r19,16
  8112e8:	a0a9383a 	mul	r20,r20,r2
  8112ec:	94bfffcc 	andi	r18,r18,65535
  8112f0:	94e4b03a 	or	r18,r18,r19
  8112f4:	9500052e 	bgeu	r18,r20,81130c <__udivdi3+0x12c>
  8112f8:	8ca5883a 	add	r18,r17,r18
  8112fc:	10ffffc4 	addi	r3,r2,-1
  811300:	9440f136 	bltu	r18,r17,8116c8 <__udivdi3+0x4e8>
  811304:	9500f02e 	bgeu	r18,r20,8116c8 <__udivdi3+0x4e8>
  811308:	10bfff84 	addi	r2,r2,-2
  81130c:	b00c943a 	slli	r6,r22,16
  811310:	0007883a 	mov	r3,zero
  811314:	3084b03a 	or	r2,r6,r2
  811318:	00005906 	br	811480 <__udivdi3+0x2a0>
  81131c:	29c05636 	bltu	r5,r7,811478 <__udivdi3+0x298>
  811320:	00bfffd4 	movui	r2,65535
  811324:	11c0622e 	bgeu	r2,r7,8114b0 <__udivdi3+0x2d0>
  811328:	00804034 	movhi	r2,256
  81132c:	10bfffc4 	addi	r2,r2,-1
  811330:	11c0ee36 	bltu	r2,r7,8116ec <__udivdi3+0x50c>
  811334:	00800404 	movi	r2,16
  811338:	3886d83a 	srl	r3,r7,r2
  81133c:	01002074 	movhi	r4,129
  811340:	211cd4c4 	addi	r4,r4,29523
  811344:	20c7883a 	add	r3,r4,r3
  811348:	18c00003 	ldbu	r3,0(r3)
  81134c:	05400804 	movi	r21,32
  811350:	1885883a 	add	r2,r3,r2
  811354:	a8abc83a 	sub	r21,r21,r2
  811358:	a800621e 	bne	r21,zero,8114e4 <__udivdi3+0x304>
  81135c:	3c00e936 	bltu	r7,r16,811704 <__udivdi3+0x524>
  811360:	9985403a 	cmpgeu	r2,r19,r6
  811364:	0007883a 	mov	r3,zero
  811368:	00004506 	br	811480 <__udivdi3+0x2a0>
  81136c:	3000041e 	bne	r6,zero,811380 <__udivdi3+0x1a0>
  811370:	000b883a 	mov	r5,zero
  811374:	01000044 	movi	r4,1
  811378:	0811d880 	call	811d88 <__udivsi3>
  81137c:	1023883a 	mov	r17,r2
  811380:	00bfffd4 	movui	r2,65535
  811384:	14404e2e 	bgeu	r2,r17,8114c0 <__udivdi3+0x2e0>
  811388:	00804034 	movhi	r2,256
  81138c:	10bfffc4 	addi	r2,r2,-1
  811390:	1440d836 	bltu	r2,r17,8116f4 <__udivdi3+0x514>
  811394:	00800404 	movi	r2,16
  811398:	8886d83a 	srl	r3,r17,r2
  81139c:	01002074 	movhi	r4,129
  8113a0:	211cd4c4 	addi	r4,r4,29523
  8113a4:	20c7883a 	add	r3,r4,r3
  8113a8:	18c00003 	ldbu	r3,0(r3)
  8113ac:	1885883a 	add	r2,r3,r2
  8113b0:	00c00804 	movi	r3,32
  8113b4:	1887c83a 	sub	r3,r3,r2
  8113b8:	18008f1e 	bne	r3,zero,8115f8 <__udivdi3+0x418>
  8113bc:	882ad43a 	srli	r21,r17,16
  8113c0:	8461c83a 	sub	r16,r16,r17
  8113c4:	8d3fffcc 	andi	r20,r17,65535
  8113c8:	00c00044 	movi	r3,1
  8113cc:	8009883a 	mov	r4,r16
  8113d0:	a80b883a 	mov	r5,r21
  8113d4:	d8c00015 	stw	r3,0(sp)
  8113d8:	0811dec0 	call	811dec <__umodsi3>
  8113dc:	8009883a 	mov	r4,r16
  8113e0:	a80b883a 	mov	r5,r21
  8113e4:	1027883a 	mov	r19,r2
  8113e8:	0811d880 	call	811d88 <__udivsi3>
  8113ec:	9826943a 	slli	r19,r19,16
  8113f0:	9008d43a 	srli	r4,r18,16
  8113f4:	1521383a 	mul	r16,r2,r20
  8113f8:	102d883a 	mov	r22,r2
  8113fc:	24c8b03a 	or	r4,r4,r19
  811400:	d8c00017 	ldw	r3,0(sp)
  811404:	2400052e 	bgeu	r4,r16,81141c <__udivdi3+0x23c>
  811408:	2449883a 	add	r4,r4,r17
  81140c:	b0bfffc4 	addi	r2,r22,-1
  811410:	24400136 	bltu	r4,r17,811418 <__udivdi3+0x238>
  811414:	2400ca36 	bltu	r4,r16,811740 <__udivdi3+0x560>
  811418:	102d883a 	mov	r22,r2
  81141c:	2421c83a 	sub	r16,r4,r16
  811420:	a80b883a 	mov	r5,r21
  811424:	8009883a 	mov	r4,r16
  811428:	d8c00015 	stw	r3,0(sp)
  81142c:	0811dec0 	call	811dec <__umodsi3>
  811430:	1027883a 	mov	r19,r2
  811434:	a80b883a 	mov	r5,r21
  811438:	8009883a 	mov	r4,r16
  81143c:	0811d880 	call	811d88 <__udivsi3>
  811440:	9826943a 	slli	r19,r19,16
  811444:	1529383a 	mul	r20,r2,r20
  811448:	94bfffcc 	andi	r18,r18,65535
  81144c:	94e4b03a 	or	r18,r18,r19
  811450:	d8c00017 	ldw	r3,0(sp)
  811454:	9500052e 	bgeu	r18,r20,81146c <__udivdi3+0x28c>
  811458:	8ca5883a 	add	r18,r17,r18
  81145c:	113fffc4 	addi	r4,r2,-1
  811460:	94409736 	bltu	r18,r17,8116c0 <__udivdi3+0x4e0>
  811464:	9500962e 	bgeu	r18,r20,8116c0 <__udivdi3+0x4e0>
  811468:	10bfff84 	addi	r2,r2,-2
  81146c:	b00c943a 	slli	r6,r22,16
  811470:	3084b03a 	or	r2,r6,r2
  811474:	00000206 	br	811480 <__udivdi3+0x2a0>
  811478:	0007883a 	mov	r3,zero
  81147c:	0005883a 	mov	r2,zero
  811480:	dfc00a17 	ldw	ra,40(sp)
  811484:	df000917 	ldw	fp,36(sp)
  811488:	ddc00817 	ldw	r23,32(sp)
  81148c:	dd800717 	ldw	r22,28(sp)
  811490:	dd400617 	ldw	r21,24(sp)
  811494:	dd000517 	ldw	r20,20(sp)
  811498:	dcc00417 	ldw	r19,16(sp)
  81149c:	dc800317 	ldw	r18,12(sp)
  8114a0:	dc400217 	ldw	r17,8(sp)
  8114a4:	dc000117 	ldw	r16,4(sp)
  8114a8:	dec00b04 	addi	sp,sp,44
  8114ac:	f800283a 	ret
  8114b0:	00803fc4 	movi	r2,255
  8114b4:	11c5803a 	cmpltu	r2,r2,r7
  8114b8:	100490fa 	slli	r2,r2,3
  8114bc:	003f9e06 	br	811338 <__alt_mem_onchip_mem+0xff809338>
  8114c0:	00803fc4 	movi	r2,255
  8114c4:	1445803a 	cmpltu	r2,r2,r17
  8114c8:	100490fa 	slli	r2,r2,3
  8114cc:	003fb206 	br	811398 <__alt_mem_onchip_mem+0xff809398>
  8114d0:	00804034 	movhi	r2,256
  8114d4:	10bfffc4 	addi	r2,r2,-1
  8114d8:	11808836 	bltu	r2,r6,8116fc <__udivdi3+0x51c>
  8114dc:	00800404 	movi	r2,16
  8114e0:	003f5606 	br	81123c <__alt_mem_onchip_mem+0xff80923c>
  8114e4:	30aed83a 	srl	r23,r6,r2
  8114e8:	3d4e983a 	sll	r7,r7,r21
  8114ec:	80acd83a 	srl	r22,r16,r2
  8114f0:	9884d83a 	srl	r2,r19,r2
  8114f4:	3deeb03a 	or	r23,r7,r23
  8114f8:	b824d43a 	srli	r18,r23,16
  8114fc:	8560983a 	sll	r16,r16,r21
  811500:	b009883a 	mov	r4,r22
  811504:	900b883a 	mov	r5,r18
  811508:	3568983a 	sll	r20,r6,r21
  81150c:	1420b03a 	or	r16,r2,r16
  811510:	0811dec0 	call	811dec <__umodsi3>
  811514:	b009883a 	mov	r4,r22
  811518:	900b883a 	mov	r5,r18
  81151c:	1023883a 	mov	r17,r2
  811520:	0811d880 	call	811d88 <__udivsi3>
  811524:	8808943a 	slli	r4,r17,16
  811528:	bf3fffcc 	andi	fp,r23,65535
  81152c:	8006d43a 	srli	r3,r16,16
  811530:	e0a3383a 	mul	r17,fp,r2
  811534:	100d883a 	mov	r6,r2
  811538:	1906b03a 	or	r3,r3,r4
  81153c:	1c40042e 	bgeu	r3,r17,811550 <__udivdi3+0x370>
  811540:	1dc7883a 	add	r3,r3,r23
  811544:	10bfffc4 	addi	r2,r2,-1
  811548:	1dc0752e 	bgeu	r3,r23,811720 <__udivdi3+0x540>
  81154c:	100d883a 	mov	r6,r2
  811550:	1c63c83a 	sub	r17,r3,r17
  811554:	900b883a 	mov	r5,r18
  811558:	8809883a 	mov	r4,r17
  81155c:	d9800015 	stw	r6,0(sp)
  811560:	0811dec0 	call	811dec <__umodsi3>
  811564:	102d883a 	mov	r22,r2
  811568:	8809883a 	mov	r4,r17
  81156c:	900b883a 	mov	r5,r18
  811570:	0811d880 	call	811d88 <__udivsi3>
  811574:	b02c943a 	slli	r22,r22,16
  811578:	e089383a 	mul	r4,fp,r2
  81157c:	843fffcc 	andi	r16,r16,65535
  811580:	85a0b03a 	or	r16,r16,r22
  811584:	d9800017 	ldw	r6,0(sp)
  811588:	8100042e 	bgeu	r16,r4,81159c <__udivdi3+0x3bc>
  81158c:	85e1883a 	add	r16,r16,r23
  811590:	10ffffc4 	addi	r3,r2,-1
  811594:	85c05e2e 	bgeu	r16,r23,811710 <__udivdi3+0x530>
  811598:	1805883a 	mov	r2,r3
  81159c:	300c943a 	slli	r6,r6,16
  8115a0:	a17fffcc 	andi	r5,r20,65535
  8115a4:	a028d43a 	srli	r20,r20,16
  8115a8:	3084b03a 	or	r2,r6,r2
  8115ac:	10ffffcc 	andi	r3,r2,65535
  8115b0:	100cd43a 	srli	r6,r2,16
  8115b4:	194f383a 	mul	r7,r3,r5
  8115b8:	1d07383a 	mul	r3,r3,r20
  8115bc:	314b383a 	mul	r5,r6,r5
  8115c0:	3810d43a 	srli	r8,r7,16
  8115c4:	8121c83a 	sub	r16,r16,r4
  8115c8:	1947883a 	add	r3,r3,r5
  8115cc:	40c7883a 	add	r3,r8,r3
  8115d0:	350d383a 	mul	r6,r6,r20
  8115d4:	1940022e 	bgeu	r3,r5,8115e0 <__udivdi3+0x400>
  8115d8:	01000074 	movhi	r4,1
  8115dc:	310d883a 	add	r6,r6,r4
  8115e0:	1828d43a 	srli	r20,r3,16
  8115e4:	a18d883a 	add	r6,r20,r6
  8115e8:	81803e36 	bltu	r16,r6,8116e4 <__udivdi3+0x504>
  8115ec:	81803826 	beq	r16,r6,8116d0 <__udivdi3+0x4f0>
  8115f0:	0007883a 	mov	r3,zero
  8115f4:	003fa206 	br	811480 <__alt_mem_onchip_mem+0xff809480>
  8115f8:	88e2983a 	sll	r17,r17,r3
  8115fc:	80a8d83a 	srl	r20,r16,r2
  811600:	80e0983a 	sll	r16,r16,r3
  811604:	882ad43a 	srli	r21,r17,16
  811608:	9884d83a 	srl	r2,r19,r2
  81160c:	a009883a 	mov	r4,r20
  811610:	a80b883a 	mov	r5,r21
  811614:	142eb03a 	or	r23,r2,r16
  811618:	98e4983a 	sll	r18,r19,r3
  81161c:	0811dec0 	call	811dec <__umodsi3>
  811620:	a009883a 	mov	r4,r20
  811624:	a80b883a 	mov	r5,r21
  811628:	1021883a 	mov	r16,r2
  81162c:	0811d880 	call	811d88 <__udivsi3>
  811630:	1039883a 	mov	fp,r2
  811634:	8d3fffcc 	andi	r20,r17,65535
  811638:	8020943a 	slli	r16,r16,16
  81163c:	b804d43a 	srli	r2,r23,16
  811640:	a72d383a 	mul	r22,r20,fp
  811644:	1404b03a 	or	r2,r2,r16
  811648:	1580062e 	bgeu	r2,r22,811664 <__udivdi3+0x484>
  81164c:	1445883a 	add	r2,r2,r17
  811650:	e0ffffc4 	addi	r3,fp,-1
  811654:	14403836 	bltu	r2,r17,811738 <__udivdi3+0x558>
  811658:	1580372e 	bgeu	r2,r22,811738 <__udivdi3+0x558>
  81165c:	e73fff84 	addi	fp,fp,-2
  811660:	1445883a 	add	r2,r2,r17
  811664:	15adc83a 	sub	r22,r2,r22
  811668:	a80b883a 	mov	r5,r21
  81166c:	b009883a 	mov	r4,r22
  811670:	0811dec0 	call	811dec <__umodsi3>
  811674:	1027883a 	mov	r19,r2
  811678:	b009883a 	mov	r4,r22
  81167c:	a80b883a 	mov	r5,r21
  811680:	0811d880 	call	811d88 <__udivsi3>
  811684:	9826943a 	slli	r19,r19,16
  811688:	a0a1383a 	mul	r16,r20,r2
  81168c:	b93fffcc 	andi	r4,r23,65535
  811690:	24c8b03a 	or	r4,r4,r19
  811694:	2400062e 	bgeu	r4,r16,8116b0 <__udivdi3+0x4d0>
  811698:	2449883a 	add	r4,r4,r17
  81169c:	10ffffc4 	addi	r3,r2,-1
  8116a0:	24402336 	bltu	r4,r17,811730 <__udivdi3+0x550>
  8116a4:	2400222e 	bgeu	r4,r16,811730 <__udivdi3+0x550>
  8116a8:	10bfff84 	addi	r2,r2,-2
  8116ac:	2449883a 	add	r4,r4,r17
  8116b0:	e038943a 	slli	fp,fp,16
  8116b4:	2421c83a 	sub	r16,r4,r16
  8116b8:	e086b03a 	or	r3,fp,r2
  8116bc:	003f4306 	br	8113cc <__alt_mem_onchip_mem+0xff8093cc>
  8116c0:	2005883a 	mov	r2,r4
  8116c4:	003f6906 	br	81146c <__alt_mem_onchip_mem+0xff80946c>
  8116c8:	1805883a 	mov	r2,r3
  8116cc:	003f0f06 	br	81130c <__alt_mem_onchip_mem+0xff80930c>
  8116d0:	1806943a 	slli	r3,r3,16
  8116d4:	9d66983a 	sll	r19,r19,r21
  8116d8:	39ffffcc 	andi	r7,r7,65535
  8116dc:	19c7883a 	add	r3,r3,r7
  8116e0:	98ffc32e 	bgeu	r19,r3,8115f0 <__alt_mem_onchip_mem+0xff8095f0>
  8116e4:	10bfffc4 	addi	r2,r2,-1
  8116e8:	003fc106 	br	8115f0 <__alt_mem_onchip_mem+0xff8095f0>
  8116ec:	00800604 	movi	r2,24
  8116f0:	003f1106 	br	811338 <__alt_mem_onchip_mem+0xff809338>
  8116f4:	00800604 	movi	r2,24
  8116f8:	003f2706 	br	811398 <__alt_mem_onchip_mem+0xff809398>
  8116fc:	00800604 	movi	r2,24
  811700:	003ece06 	br	81123c <__alt_mem_onchip_mem+0xff80923c>
  811704:	0007883a 	mov	r3,zero
  811708:	00800044 	movi	r2,1
  81170c:	003f5c06 	br	811480 <__alt_mem_onchip_mem+0xff809480>
  811710:	813fa12e 	bgeu	r16,r4,811598 <__alt_mem_onchip_mem+0xff809598>
  811714:	10bfff84 	addi	r2,r2,-2
  811718:	85e1883a 	add	r16,r16,r23
  81171c:	003f9f06 	br	81159c <__alt_mem_onchip_mem+0xff80959c>
  811720:	1c7f8a2e 	bgeu	r3,r17,81154c <__alt_mem_onchip_mem+0xff80954c>
  811724:	31bfff84 	addi	r6,r6,-2
  811728:	1dc7883a 	add	r3,r3,r23
  81172c:	003f8806 	br	811550 <__alt_mem_onchip_mem+0xff809550>
  811730:	1805883a 	mov	r2,r3
  811734:	003fde06 	br	8116b0 <__alt_mem_onchip_mem+0xff8096b0>
  811738:	1839883a 	mov	fp,r3
  81173c:	003fc906 	br	811664 <__alt_mem_onchip_mem+0xff809664>
  811740:	b5bfff84 	addi	r22,r22,-2
  811744:	2449883a 	add	r4,r4,r17
  811748:	003f3406 	br	81141c <__alt_mem_onchip_mem+0xff80941c>
  81174c:	b5bfff84 	addi	r22,r22,-2
  811750:	1445883a 	add	r2,r2,r17
  811754:	003edb06 	br	8112c4 <__alt_mem_onchip_mem+0xff8092c4>

00811758 <__umoddi3>:
  811758:	defff404 	addi	sp,sp,-48
  81175c:	df000a15 	stw	fp,40(sp)
  811760:	dc400315 	stw	r17,12(sp)
  811764:	dc000215 	stw	r16,8(sp)
  811768:	dfc00b15 	stw	ra,44(sp)
  81176c:	ddc00915 	stw	r23,36(sp)
  811770:	dd800815 	stw	r22,32(sp)
  811774:	dd400715 	stw	r21,28(sp)
  811778:	dd000615 	stw	r20,24(sp)
  81177c:	dcc00515 	stw	r19,20(sp)
  811780:	dc800415 	stw	r18,16(sp)
  811784:	2021883a 	mov	r16,r4
  811788:	2823883a 	mov	r17,r5
  81178c:	2839883a 	mov	fp,r5
  811790:	38003c1e 	bne	r7,zero,811884 <__umoddi3+0x12c>
  811794:	3027883a 	mov	r19,r6
  811798:	2029883a 	mov	r20,r4
  81179c:	2980512e 	bgeu	r5,r6,8118e4 <__umoddi3+0x18c>
  8117a0:	00bfffd4 	movui	r2,65535
  8117a4:	11809a36 	bltu	r2,r6,811a10 <__umoddi3+0x2b8>
  8117a8:	01003fc4 	movi	r4,255
  8117ac:	2189803a 	cmpltu	r4,r4,r6
  8117b0:	200890fa 	slli	r4,r4,3
  8117b4:	3104d83a 	srl	r2,r6,r4
  8117b8:	00c02074 	movhi	r3,129
  8117bc:	18dcd4c4 	addi	r3,r3,29523
  8117c0:	1885883a 	add	r2,r3,r2
  8117c4:	10c00003 	ldbu	r3,0(r2)
  8117c8:	00800804 	movi	r2,32
  8117cc:	1909883a 	add	r4,r3,r4
  8117d0:	1125c83a 	sub	r18,r2,r4
  8117d4:	90000526 	beq	r18,zero,8117ec <__umoddi3+0x94>
  8117d8:	8ca2983a 	sll	r17,r17,r18
  8117dc:	8108d83a 	srl	r4,r16,r4
  8117e0:	34a6983a 	sll	r19,r6,r18
  8117e4:	84a8983a 	sll	r20,r16,r18
  8117e8:	2478b03a 	or	fp,r4,r17
  8117ec:	982ed43a 	srli	r23,r19,16
  8117f0:	e009883a 	mov	r4,fp
  8117f4:	9dbfffcc 	andi	r22,r19,65535
  8117f8:	b80b883a 	mov	r5,r23
  8117fc:	0811dec0 	call	811dec <__umodsi3>
  811800:	e009883a 	mov	r4,fp
  811804:	b80b883a 	mov	r5,r23
  811808:	102b883a 	mov	r21,r2
  81180c:	0811d880 	call	811d88 <__udivsi3>
  811810:	a806943a 	slli	r3,r21,16
  811814:	a008d43a 	srli	r4,r20,16
  811818:	b085383a 	mul	r2,r22,r2
  81181c:	20c8b03a 	or	r4,r4,r3
  811820:	2080032e 	bgeu	r4,r2,811830 <__umoddi3+0xd8>
  811824:	24c9883a 	add	r4,r4,r19
  811828:	24c00136 	bltu	r4,r19,811830 <__umoddi3+0xd8>
  81182c:	20811036 	bltu	r4,r2,811c70 <__umoddi3+0x518>
  811830:	20abc83a 	sub	r21,r4,r2
  811834:	b80b883a 	mov	r5,r23
  811838:	a809883a 	mov	r4,r21
  81183c:	0811dec0 	call	811dec <__umodsi3>
  811840:	1023883a 	mov	r17,r2
  811844:	b80b883a 	mov	r5,r23
  811848:	a809883a 	mov	r4,r21
  81184c:	0811d880 	call	811d88 <__udivsi3>
  811850:	8822943a 	slli	r17,r17,16
  811854:	b085383a 	mul	r2,r22,r2
  811858:	a0ffffcc 	andi	r3,r20,65535
  81185c:	1c46b03a 	or	r3,r3,r17
  811860:	1880042e 	bgeu	r3,r2,811874 <__umoddi3+0x11c>
  811864:	1cc7883a 	add	r3,r3,r19
  811868:	1cc00236 	bltu	r3,r19,811874 <__umoddi3+0x11c>
  81186c:	1880012e 	bgeu	r3,r2,811874 <__umoddi3+0x11c>
  811870:	1cc7883a 	add	r3,r3,r19
  811874:	1885c83a 	sub	r2,r3,r2
  811878:	1484d83a 	srl	r2,r2,r18
  81187c:	0007883a 	mov	r3,zero
  811880:	00004f06 	br	8119c0 <__umoddi3+0x268>
  811884:	29c04c36 	bltu	r5,r7,8119b8 <__umoddi3+0x260>
  811888:	00bfffd4 	movui	r2,65535
  81188c:	11c0582e 	bgeu	r2,r7,8119f0 <__umoddi3+0x298>
  811890:	00804034 	movhi	r2,256
  811894:	10bfffc4 	addi	r2,r2,-1
  811898:	11c0e736 	bltu	r2,r7,811c38 <__umoddi3+0x4e0>
  81189c:	01000404 	movi	r4,16
  8118a0:	3904d83a 	srl	r2,r7,r4
  8118a4:	00c02074 	movhi	r3,129
  8118a8:	18dcd4c4 	addi	r3,r3,29523
  8118ac:	1885883a 	add	r2,r3,r2
  8118b0:	14c00003 	ldbu	r19,0(r2)
  8118b4:	00c00804 	movi	r3,32
  8118b8:	9927883a 	add	r19,r19,r4
  8118bc:	1ce9c83a 	sub	r20,r3,r19
  8118c0:	a000581e 	bne	r20,zero,811a24 <__umoddi3+0x2cc>
  8118c4:	3c400136 	bltu	r7,r17,8118cc <__umoddi3+0x174>
  8118c8:	8180eb36 	bltu	r16,r6,811c78 <__umoddi3+0x520>
  8118cc:	8185c83a 	sub	r2,r16,r6
  8118d0:	89e3c83a 	sub	r17,r17,r7
  8118d4:	8089803a 	cmpltu	r4,r16,r2
  8118d8:	8939c83a 	sub	fp,r17,r4
  8118dc:	e007883a 	mov	r3,fp
  8118e0:	00003706 	br	8119c0 <__umoddi3+0x268>
  8118e4:	3000041e 	bne	r6,zero,8118f8 <__umoddi3+0x1a0>
  8118e8:	000b883a 	mov	r5,zero
  8118ec:	01000044 	movi	r4,1
  8118f0:	0811d880 	call	811d88 <__udivsi3>
  8118f4:	1027883a 	mov	r19,r2
  8118f8:	00bfffd4 	movui	r2,65535
  8118fc:	14c0402e 	bgeu	r2,r19,811a00 <__umoddi3+0x2a8>
  811900:	00804034 	movhi	r2,256
  811904:	10bfffc4 	addi	r2,r2,-1
  811908:	14c0cd36 	bltu	r2,r19,811c40 <__umoddi3+0x4e8>
  81190c:	00800404 	movi	r2,16
  811910:	9886d83a 	srl	r3,r19,r2
  811914:	01002074 	movhi	r4,129
  811918:	211cd4c4 	addi	r4,r4,29523
  81191c:	20c7883a 	add	r3,r4,r3
  811920:	18c00003 	ldbu	r3,0(r3)
  811924:	1887883a 	add	r3,r3,r2
  811928:	00800804 	movi	r2,32
  81192c:	10e5c83a 	sub	r18,r2,r3
  811930:	9000901e 	bne	r18,zero,811b74 <__umoddi3+0x41c>
  811934:	982cd43a 	srli	r22,r19,16
  811938:	8ce3c83a 	sub	r17,r17,r19
  81193c:	9d7fffcc 	andi	r21,r19,65535
  811940:	b00b883a 	mov	r5,r22
  811944:	8809883a 	mov	r4,r17
  811948:	0811dec0 	call	811dec <__umodsi3>
  81194c:	8809883a 	mov	r4,r17
  811950:	b00b883a 	mov	r5,r22
  811954:	1021883a 	mov	r16,r2
  811958:	0811d880 	call	811d88 <__udivsi3>
  81195c:	8006943a 	slli	r3,r16,16
  811960:	a008d43a 	srli	r4,r20,16
  811964:	1545383a 	mul	r2,r2,r21
  811968:	20c8b03a 	or	r4,r4,r3
  81196c:	2080042e 	bgeu	r4,r2,811980 <__umoddi3+0x228>
  811970:	24c9883a 	add	r4,r4,r19
  811974:	24c00236 	bltu	r4,r19,811980 <__umoddi3+0x228>
  811978:	2080012e 	bgeu	r4,r2,811980 <__umoddi3+0x228>
  81197c:	24c9883a 	add	r4,r4,r19
  811980:	20a1c83a 	sub	r16,r4,r2
  811984:	b00b883a 	mov	r5,r22
  811988:	8009883a 	mov	r4,r16
  81198c:	0811dec0 	call	811dec <__umodsi3>
  811990:	1023883a 	mov	r17,r2
  811994:	b00b883a 	mov	r5,r22
  811998:	8009883a 	mov	r4,r16
  81199c:	0811d880 	call	811d88 <__udivsi3>
  8119a0:	8822943a 	slli	r17,r17,16
  8119a4:	1545383a 	mul	r2,r2,r21
  8119a8:	a53fffcc 	andi	r20,r20,65535
  8119ac:	a446b03a 	or	r3,r20,r17
  8119b0:	18bfb02e 	bgeu	r3,r2,811874 <__alt_mem_onchip_mem+0xff809874>
  8119b4:	003fab06 	br	811864 <__alt_mem_onchip_mem+0xff809864>
  8119b8:	2005883a 	mov	r2,r4
  8119bc:	2807883a 	mov	r3,r5
  8119c0:	dfc00b17 	ldw	ra,44(sp)
  8119c4:	df000a17 	ldw	fp,40(sp)
  8119c8:	ddc00917 	ldw	r23,36(sp)
  8119cc:	dd800817 	ldw	r22,32(sp)
  8119d0:	dd400717 	ldw	r21,28(sp)
  8119d4:	dd000617 	ldw	r20,24(sp)
  8119d8:	dcc00517 	ldw	r19,20(sp)
  8119dc:	dc800417 	ldw	r18,16(sp)
  8119e0:	dc400317 	ldw	r17,12(sp)
  8119e4:	dc000217 	ldw	r16,8(sp)
  8119e8:	dec00c04 	addi	sp,sp,48
  8119ec:	f800283a 	ret
  8119f0:	04c03fc4 	movi	r19,255
  8119f4:	99c9803a 	cmpltu	r4,r19,r7
  8119f8:	200890fa 	slli	r4,r4,3
  8119fc:	003fa806 	br	8118a0 <__alt_mem_onchip_mem+0xff8098a0>
  811a00:	00803fc4 	movi	r2,255
  811a04:	14c5803a 	cmpltu	r2,r2,r19
  811a08:	100490fa 	slli	r2,r2,3
  811a0c:	003fc006 	br	811910 <__alt_mem_onchip_mem+0xff809910>
  811a10:	00804034 	movhi	r2,256
  811a14:	10bfffc4 	addi	r2,r2,-1
  811a18:	11808b36 	bltu	r2,r6,811c48 <__umoddi3+0x4f0>
  811a1c:	01000404 	movi	r4,16
  811a20:	003f6406 	br	8117b4 <__alt_mem_onchip_mem+0xff8097b4>
  811a24:	34c4d83a 	srl	r2,r6,r19
  811a28:	3d0e983a 	sll	r7,r7,r20
  811a2c:	8cf8d83a 	srl	fp,r17,r19
  811a30:	8d10983a 	sll	r8,r17,r20
  811a34:	38aab03a 	or	r21,r7,r2
  811a38:	a82cd43a 	srli	r22,r21,16
  811a3c:	84e2d83a 	srl	r17,r16,r19
  811a40:	e009883a 	mov	r4,fp
  811a44:	b00b883a 	mov	r5,r22
  811a48:	8a22b03a 	or	r17,r17,r8
  811a4c:	3524983a 	sll	r18,r6,r20
  811a50:	0811dec0 	call	811dec <__umodsi3>
  811a54:	e009883a 	mov	r4,fp
  811a58:	b00b883a 	mov	r5,r22
  811a5c:	102f883a 	mov	r23,r2
  811a60:	0811d880 	call	811d88 <__udivsi3>
  811a64:	100d883a 	mov	r6,r2
  811a68:	b808943a 	slli	r4,r23,16
  811a6c:	aa3fffcc 	andi	r8,r21,65535
  811a70:	8804d43a 	srli	r2,r17,16
  811a74:	41af383a 	mul	r23,r8,r6
  811a78:	8520983a 	sll	r16,r16,r20
  811a7c:	1104b03a 	or	r2,r2,r4
  811a80:	15c0042e 	bgeu	r2,r23,811a94 <__umoddi3+0x33c>
  811a84:	1545883a 	add	r2,r2,r21
  811a88:	30ffffc4 	addi	r3,r6,-1
  811a8c:	1540742e 	bgeu	r2,r21,811c60 <__umoddi3+0x508>
  811a90:	180d883a 	mov	r6,r3
  811a94:	15efc83a 	sub	r23,r2,r23
  811a98:	b00b883a 	mov	r5,r22
  811a9c:	b809883a 	mov	r4,r23
  811aa0:	d9800115 	stw	r6,4(sp)
  811aa4:	da000015 	stw	r8,0(sp)
  811aa8:	0811dec0 	call	811dec <__umodsi3>
  811aac:	b00b883a 	mov	r5,r22
  811ab0:	b809883a 	mov	r4,r23
  811ab4:	1039883a 	mov	fp,r2
  811ab8:	0811d880 	call	811d88 <__udivsi3>
  811abc:	da000017 	ldw	r8,0(sp)
  811ac0:	e038943a 	slli	fp,fp,16
  811ac4:	100b883a 	mov	r5,r2
  811ac8:	4089383a 	mul	r4,r8,r2
  811acc:	8a3fffcc 	andi	r8,r17,65535
  811ad0:	4710b03a 	or	r8,r8,fp
  811ad4:	d9800117 	ldw	r6,4(sp)
  811ad8:	4100042e 	bgeu	r8,r4,811aec <__umoddi3+0x394>
  811adc:	4551883a 	add	r8,r8,r21
  811ae0:	10bfffc4 	addi	r2,r2,-1
  811ae4:	45405a2e 	bgeu	r8,r21,811c50 <__umoddi3+0x4f8>
  811ae8:	100b883a 	mov	r5,r2
  811aec:	300c943a 	slli	r6,r6,16
  811af0:	91ffffcc 	andi	r7,r18,65535
  811af4:	9004d43a 	srli	r2,r18,16
  811af8:	314cb03a 	or	r6,r6,r5
  811afc:	317fffcc 	andi	r5,r6,65535
  811b00:	300cd43a 	srli	r6,r6,16
  811b04:	29d3383a 	mul	r9,r5,r7
  811b08:	288b383a 	mul	r5,r5,r2
  811b0c:	31cf383a 	mul	r7,r6,r7
  811b10:	4806d43a 	srli	r3,r9,16
  811b14:	4111c83a 	sub	r8,r8,r4
  811b18:	29cb883a 	add	r5,r5,r7
  811b1c:	194b883a 	add	r5,r3,r5
  811b20:	3085383a 	mul	r2,r6,r2
  811b24:	29c0022e 	bgeu	r5,r7,811b30 <__umoddi3+0x3d8>
  811b28:	00c00074 	movhi	r3,1
  811b2c:	10c5883a 	add	r2,r2,r3
  811b30:	2808d43a 	srli	r4,r5,16
  811b34:	280a943a 	slli	r5,r5,16
  811b38:	4a7fffcc 	andi	r9,r9,65535
  811b3c:	2085883a 	add	r2,r4,r2
  811b40:	2a4b883a 	add	r5,r5,r9
  811b44:	40803636 	bltu	r8,r2,811c20 <__umoddi3+0x4c8>
  811b48:	40804d26 	beq	r8,r2,811c80 <__umoddi3+0x528>
  811b4c:	4089c83a 	sub	r4,r8,r2
  811b50:	280f883a 	mov	r7,r5
  811b54:	81cfc83a 	sub	r7,r16,r7
  811b58:	81c7803a 	cmpltu	r3,r16,r7
  811b5c:	20c7c83a 	sub	r3,r4,r3
  811b60:	1cc4983a 	sll	r2,r3,r19
  811b64:	3d0ed83a 	srl	r7,r7,r20
  811b68:	1d06d83a 	srl	r3,r3,r20
  811b6c:	11c4b03a 	or	r2,r2,r7
  811b70:	003f9306 	br	8119c0 <__alt_mem_onchip_mem+0xff8099c0>
  811b74:	9ca6983a 	sll	r19,r19,r18
  811b78:	88e8d83a 	srl	r20,r17,r3
  811b7c:	80c4d83a 	srl	r2,r16,r3
  811b80:	982cd43a 	srli	r22,r19,16
  811b84:	8ca2983a 	sll	r17,r17,r18
  811b88:	a009883a 	mov	r4,r20
  811b8c:	b00b883a 	mov	r5,r22
  811b90:	1478b03a 	or	fp,r2,r17
  811b94:	0811dec0 	call	811dec <__umodsi3>
  811b98:	a009883a 	mov	r4,r20
  811b9c:	b00b883a 	mov	r5,r22
  811ba0:	1023883a 	mov	r17,r2
  811ba4:	0811d880 	call	811d88 <__udivsi3>
  811ba8:	9d7fffcc 	andi	r21,r19,65535
  811bac:	880a943a 	slli	r5,r17,16
  811bb0:	e008d43a 	srli	r4,fp,16
  811bb4:	a885383a 	mul	r2,r21,r2
  811bb8:	84a8983a 	sll	r20,r16,r18
  811bbc:	2148b03a 	or	r4,r4,r5
  811bc0:	2080042e 	bgeu	r4,r2,811bd4 <__umoddi3+0x47c>
  811bc4:	24c9883a 	add	r4,r4,r19
  811bc8:	24c00236 	bltu	r4,r19,811bd4 <__umoddi3+0x47c>
  811bcc:	2080012e 	bgeu	r4,r2,811bd4 <__umoddi3+0x47c>
  811bd0:	24c9883a 	add	r4,r4,r19
  811bd4:	20a3c83a 	sub	r17,r4,r2
  811bd8:	b00b883a 	mov	r5,r22
  811bdc:	8809883a 	mov	r4,r17
  811be0:	0811dec0 	call	811dec <__umodsi3>
  811be4:	102f883a 	mov	r23,r2
  811be8:	8809883a 	mov	r4,r17
  811bec:	b00b883a 	mov	r5,r22
  811bf0:	0811d880 	call	811d88 <__udivsi3>
  811bf4:	b82e943a 	slli	r23,r23,16
  811bf8:	a885383a 	mul	r2,r21,r2
  811bfc:	e13fffcc 	andi	r4,fp,65535
  811c00:	25c8b03a 	or	r4,r4,r23
  811c04:	2080042e 	bgeu	r4,r2,811c18 <__umoddi3+0x4c0>
  811c08:	24c9883a 	add	r4,r4,r19
  811c0c:	24c00236 	bltu	r4,r19,811c18 <__umoddi3+0x4c0>
  811c10:	2080012e 	bgeu	r4,r2,811c18 <__umoddi3+0x4c0>
  811c14:	24c9883a 	add	r4,r4,r19
  811c18:	20a3c83a 	sub	r17,r4,r2
  811c1c:	003f4806 	br	811940 <__alt_mem_onchip_mem+0xff809940>
  811c20:	2c8fc83a 	sub	r7,r5,r18
  811c24:	1545c83a 	sub	r2,r2,r21
  811c28:	29cb803a 	cmpltu	r5,r5,r7
  811c2c:	1145c83a 	sub	r2,r2,r5
  811c30:	4089c83a 	sub	r4,r8,r2
  811c34:	003fc706 	br	811b54 <__alt_mem_onchip_mem+0xff809b54>
  811c38:	01000604 	movi	r4,24
  811c3c:	003f1806 	br	8118a0 <__alt_mem_onchip_mem+0xff8098a0>
  811c40:	00800604 	movi	r2,24
  811c44:	003f3206 	br	811910 <__alt_mem_onchip_mem+0xff809910>
  811c48:	01000604 	movi	r4,24
  811c4c:	003ed906 	br	8117b4 <__alt_mem_onchip_mem+0xff8097b4>
  811c50:	413fa52e 	bgeu	r8,r4,811ae8 <__alt_mem_onchip_mem+0xff809ae8>
  811c54:	297fff84 	addi	r5,r5,-2
  811c58:	4551883a 	add	r8,r8,r21
  811c5c:	003fa306 	br	811aec <__alt_mem_onchip_mem+0xff809aec>
  811c60:	15ff8b2e 	bgeu	r2,r23,811a90 <__alt_mem_onchip_mem+0xff809a90>
  811c64:	31bfff84 	addi	r6,r6,-2
  811c68:	1545883a 	add	r2,r2,r21
  811c6c:	003f8906 	br	811a94 <__alt_mem_onchip_mem+0xff809a94>
  811c70:	24c9883a 	add	r4,r4,r19
  811c74:	003eee06 	br	811830 <__alt_mem_onchip_mem+0xff809830>
  811c78:	8005883a 	mov	r2,r16
  811c7c:	003f1706 	br	8118dc <__alt_mem_onchip_mem+0xff8098dc>
  811c80:	817fe736 	bltu	r16,r5,811c20 <__alt_mem_onchip_mem+0xff809c20>
  811c84:	280f883a 	mov	r7,r5
  811c88:	0009883a 	mov	r4,zero
  811c8c:	003fb106 	br	811b54 <__alt_mem_onchip_mem+0xff809b54>

00811c90 <__divsi3>:
  811c90:	20001b16 	blt	r4,zero,811d00 <__divsi3+0x70>
  811c94:	000f883a 	mov	r7,zero
  811c98:	28001616 	blt	r5,zero,811cf4 <__divsi3+0x64>
  811c9c:	200d883a 	mov	r6,r4
  811ca0:	29001a2e 	bgeu	r5,r4,811d0c <__divsi3+0x7c>
  811ca4:	00800804 	movi	r2,32
  811ca8:	00c00044 	movi	r3,1
  811cac:	00000106 	br	811cb4 <__divsi3+0x24>
  811cb0:	10000d26 	beq	r2,zero,811ce8 <__divsi3+0x58>
  811cb4:	294b883a 	add	r5,r5,r5
  811cb8:	10bfffc4 	addi	r2,r2,-1
  811cbc:	18c7883a 	add	r3,r3,r3
  811cc0:	293ffb36 	bltu	r5,r4,811cb0 <__alt_mem_onchip_mem+0xff809cb0>
  811cc4:	0005883a 	mov	r2,zero
  811cc8:	18000726 	beq	r3,zero,811ce8 <__divsi3+0x58>
  811ccc:	0005883a 	mov	r2,zero
  811cd0:	31400236 	bltu	r6,r5,811cdc <__divsi3+0x4c>
  811cd4:	314dc83a 	sub	r6,r6,r5
  811cd8:	10c4b03a 	or	r2,r2,r3
  811cdc:	1806d07a 	srli	r3,r3,1
  811ce0:	280ad07a 	srli	r5,r5,1
  811ce4:	183ffa1e 	bne	r3,zero,811cd0 <__alt_mem_onchip_mem+0xff809cd0>
  811ce8:	38000126 	beq	r7,zero,811cf0 <__divsi3+0x60>
  811cec:	0085c83a 	sub	r2,zero,r2
  811cf0:	f800283a 	ret
  811cf4:	014bc83a 	sub	r5,zero,r5
  811cf8:	39c0005c 	xori	r7,r7,1
  811cfc:	003fe706 	br	811c9c <__alt_mem_onchip_mem+0xff809c9c>
  811d00:	0109c83a 	sub	r4,zero,r4
  811d04:	01c00044 	movi	r7,1
  811d08:	003fe306 	br	811c98 <__alt_mem_onchip_mem+0xff809c98>
  811d0c:	00c00044 	movi	r3,1
  811d10:	003fee06 	br	811ccc <__alt_mem_onchip_mem+0xff809ccc>

00811d14 <__modsi3>:
  811d14:	20001716 	blt	r4,zero,811d74 <__modsi3+0x60>
  811d18:	000f883a 	mov	r7,zero
  811d1c:	2005883a 	mov	r2,r4
  811d20:	28001216 	blt	r5,zero,811d6c <__modsi3+0x58>
  811d24:	2900162e 	bgeu	r5,r4,811d80 <__modsi3+0x6c>
  811d28:	01800804 	movi	r6,32
  811d2c:	00c00044 	movi	r3,1
  811d30:	00000106 	br	811d38 <__modsi3+0x24>
  811d34:	30000a26 	beq	r6,zero,811d60 <__modsi3+0x4c>
  811d38:	294b883a 	add	r5,r5,r5
  811d3c:	31bfffc4 	addi	r6,r6,-1
  811d40:	18c7883a 	add	r3,r3,r3
  811d44:	293ffb36 	bltu	r5,r4,811d34 <__alt_mem_onchip_mem+0xff809d34>
  811d48:	18000526 	beq	r3,zero,811d60 <__modsi3+0x4c>
  811d4c:	1806d07a 	srli	r3,r3,1
  811d50:	11400136 	bltu	r2,r5,811d58 <__modsi3+0x44>
  811d54:	1145c83a 	sub	r2,r2,r5
  811d58:	280ad07a 	srli	r5,r5,1
  811d5c:	183ffb1e 	bne	r3,zero,811d4c <__alt_mem_onchip_mem+0xff809d4c>
  811d60:	38000126 	beq	r7,zero,811d68 <__modsi3+0x54>
  811d64:	0085c83a 	sub	r2,zero,r2
  811d68:	f800283a 	ret
  811d6c:	014bc83a 	sub	r5,zero,r5
  811d70:	003fec06 	br	811d24 <__alt_mem_onchip_mem+0xff809d24>
  811d74:	0109c83a 	sub	r4,zero,r4
  811d78:	01c00044 	movi	r7,1
  811d7c:	003fe706 	br	811d1c <__alt_mem_onchip_mem+0xff809d1c>
  811d80:	00c00044 	movi	r3,1
  811d84:	003ff106 	br	811d4c <__alt_mem_onchip_mem+0xff809d4c>

00811d88 <__udivsi3>:
  811d88:	200d883a 	mov	r6,r4
  811d8c:	2900152e 	bgeu	r5,r4,811de4 <__udivsi3+0x5c>
  811d90:	28001416 	blt	r5,zero,811de4 <__udivsi3+0x5c>
  811d94:	00800804 	movi	r2,32
  811d98:	00c00044 	movi	r3,1
  811d9c:	00000206 	br	811da8 <__udivsi3+0x20>
  811da0:	10000e26 	beq	r2,zero,811ddc <__udivsi3+0x54>
  811da4:	28000516 	blt	r5,zero,811dbc <__udivsi3+0x34>
  811da8:	294b883a 	add	r5,r5,r5
  811dac:	10bfffc4 	addi	r2,r2,-1
  811db0:	18c7883a 	add	r3,r3,r3
  811db4:	293ffa36 	bltu	r5,r4,811da0 <__alt_mem_onchip_mem+0xff809da0>
  811db8:	18000826 	beq	r3,zero,811ddc <__udivsi3+0x54>
  811dbc:	0005883a 	mov	r2,zero
  811dc0:	31400236 	bltu	r6,r5,811dcc <__udivsi3+0x44>
  811dc4:	314dc83a 	sub	r6,r6,r5
  811dc8:	10c4b03a 	or	r2,r2,r3
  811dcc:	1806d07a 	srli	r3,r3,1
  811dd0:	280ad07a 	srli	r5,r5,1
  811dd4:	183ffa1e 	bne	r3,zero,811dc0 <__alt_mem_onchip_mem+0xff809dc0>
  811dd8:	f800283a 	ret
  811ddc:	0005883a 	mov	r2,zero
  811de0:	f800283a 	ret
  811de4:	00c00044 	movi	r3,1
  811de8:	003ff406 	br	811dbc <__alt_mem_onchip_mem+0xff809dbc>

00811dec <__umodsi3>:
  811dec:	2005883a 	mov	r2,r4
  811df0:	2900122e 	bgeu	r5,r4,811e3c <__umodsi3+0x50>
  811df4:	28001116 	blt	r5,zero,811e3c <__umodsi3+0x50>
  811df8:	01800804 	movi	r6,32
  811dfc:	00c00044 	movi	r3,1
  811e00:	00000206 	br	811e0c <__umodsi3+0x20>
  811e04:	30000c26 	beq	r6,zero,811e38 <__umodsi3+0x4c>
  811e08:	28000516 	blt	r5,zero,811e20 <__umodsi3+0x34>
  811e0c:	294b883a 	add	r5,r5,r5
  811e10:	31bfffc4 	addi	r6,r6,-1
  811e14:	18c7883a 	add	r3,r3,r3
  811e18:	293ffa36 	bltu	r5,r4,811e04 <__alt_mem_onchip_mem+0xff809e04>
  811e1c:	18000626 	beq	r3,zero,811e38 <__umodsi3+0x4c>
  811e20:	1806d07a 	srli	r3,r3,1
  811e24:	11400136 	bltu	r2,r5,811e2c <__umodsi3+0x40>
  811e28:	1145c83a 	sub	r2,r2,r5
  811e2c:	280ad07a 	srli	r5,r5,1
  811e30:	183ffb1e 	bne	r3,zero,811e20 <__alt_mem_onchip_mem+0xff809e20>
  811e34:	f800283a 	ret
  811e38:	f800283a 	ret
  811e3c:	00c00044 	movi	r3,1
  811e40:	003ff706 	br	811e20 <__alt_mem_onchip_mem+0xff809e20>

00811e44 <__divdf3>:
  811e44:	defff204 	addi	sp,sp,-56
  811e48:	dd400915 	stw	r21,36(sp)
  811e4c:	282ad53a 	srli	r21,r5,20
  811e50:	dd000815 	stw	r20,32(sp)
  811e54:	2828d7fa 	srli	r20,r5,31
  811e58:	dc000415 	stw	r16,16(sp)
  811e5c:	04000434 	movhi	r16,16
  811e60:	df000c15 	stw	fp,48(sp)
  811e64:	843fffc4 	addi	r16,r16,-1
  811e68:	dfc00d15 	stw	ra,52(sp)
  811e6c:	ddc00b15 	stw	r23,44(sp)
  811e70:	dd800a15 	stw	r22,40(sp)
  811e74:	dcc00715 	stw	r19,28(sp)
  811e78:	dc800615 	stw	r18,24(sp)
  811e7c:	dc400515 	stw	r17,20(sp)
  811e80:	ad41ffcc 	andi	r21,r21,2047
  811e84:	2c20703a 	and	r16,r5,r16
  811e88:	a7003fcc 	andi	fp,r20,255
  811e8c:	a8006126 	beq	r21,zero,812014 <__divdf3+0x1d0>
  811e90:	0081ffc4 	movi	r2,2047
  811e94:	2025883a 	mov	r18,r4
  811e98:	a8803726 	beq	r21,r2,811f78 <__divdf3+0x134>
  811e9c:	80800434 	orhi	r2,r16,16
  811ea0:	100490fa 	slli	r2,r2,3
  811ea4:	2020d77a 	srli	r16,r4,29
  811ea8:	202490fa 	slli	r18,r4,3
  811eac:	ad7f0044 	addi	r21,r21,-1023
  811eb0:	80a0b03a 	or	r16,r16,r2
  811eb4:	0027883a 	mov	r19,zero
  811eb8:	0013883a 	mov	r9,zero
  811ebc:	3804d53a 	srli	r2,r7,20
  811ec0:	382cd7fa 	srli	r22,r7,31
  811ec4:	04400434 	movhi	r17,16
  811ec8:	8c7fffc4 	addi	r17,r17,-1
  811ecc:	1081ffcc 	andi	r2,r2,2047
  811ed0:	3011883a 	mov	r8,r6
  811ed4:	3c62703a 	and	r17,r7,r17
  811ed8:	b5c03fcc 	andi	r23,r22,255
  811edc:	10006c26 	beq	r2,zero,812090 <__divdf3+0x24c>
  811ee0:	00c1ffc4 	movi	r3,2047
  811ee4:	10c06426 	beq	r2,r3,812078 <__divdf3+0x234>
  811ee8:	88c00434 	orhi	r3,r17,16
  811eec:	180690fa 	slli	r3,r3,3
  811ef0:	3022d77a 	srli	r17,r6,29
  811ef4:	301090fa 	slli	r8,r6,3
  811ef8:	10bf0044 	addi	r2,r2,-1023
  811efc:	88e2b03a 	or	r17,r17,r3
  811f00:	000f883a 	mov	r7,zero
  811f04:	a58cf03a 	xor	r6,r20,r22
  811f08:	3cc8b03a 	or	r4,r7,r19
  811f0c:	a8abc83a 	sub	r21,r21,r2
  811f10:	008003c4 	movi	r2,15
  811f14:	3007883a 	mov	r3,r6
  811f18:	34c03fcc 	andi	r19,r6,255
  811f1c:	11009036 	bltu	r2,r4,812160 <__divdf3+0x31c>
  811f20:	200890ba 	slli	r4,r4,2
  811f24:	00802074 	movhi	r2,129
  811f28:	1087ce04 	addi	r2,r2,7992
  811f2c:	2089883a 	add	r4,r4,r2
  811f30:	20800017 	ldw	r2,0(r4)
  811f34:	1000683a 	jmp	r2
  811f38:	00812160 	cmpeqi	r2,zero,1157
  811f3c:	00811fb0 	cmpltui	r2,zero,1150
  811f40:	00812150 	cmplti	r2,zero,1157
  811f44:	00811fa4 	muli	r2,zero,1150
  811f48:	00812150 	cmplti	r2,zero,1157
  811f4c:	00812124 	muli	r2,zero,1156
  811f50:	00812150 	cmplti	r2,zero,1157
  811f54:	00811fa4 	muli	r2,zero,1150
  811f58:	00811fb0 	cmpltui	r2,zero,1150
  811f5c:	00811fb0 	cmpltui	r2,zero,1150
  811f60:	00812124 	muli	r2,zero,1156
  811f64:	00811fa4 	muli	r2,zero,1150
  811f68:	00811f94 	movui	r2,1150
  811f6c:	00811f94 	movui	r2,1150
  811f70:	00811f94 	movui	r2,1150
  811f74:	00812444 	movi	r2,1169
  811f78:	2404b03a 	or	r2,r4,r16
  811f7c:	1000661e 	bne	r2,zero,812118 <__divdf3+0x2d4>
  811f80:	04c00204 	movi	r19,8
  811f84:	0021883a 	mov	r16,zero
  811f88:	0025883a 	mov	r18,zero
  811f8c:	02400084 	movi	r9,2
  811f90:	003fca06 	br	811ebc <__alt_mem_onchip_mem+0xff809ebc>
  811f94:	8023883a 	mov	r17,r16
  811f98:	9011883a 	mov	r8,r18
  811f9c:	e02f883a 	mov	r23,fp
  811fa0:	480f883a 	mov	r7,r9
  811fa4:	00800084 	movi	r2,2
  811fa8:	3881311e 	bne	r7,r2,812470 <__divdf3+0x62c>
  811fac:	b827883a 	mov	r19,r23
  811fb0:	98c0004c 	andi	r3,r19,1
  811fb4:	0081ffc4 	movi	r2,2047
  811fb8:	000b883a 	mov	r5,zero
  811fbc:	0025883a 	mov	r18,zero
  811fc0:	1004953a 	slli	r2,r2,20
  811fc4:	18c03fcc 	andi	r3,r3,255
  811fc8:	04400434 	movhi	r17,16
  811fcc:	8c7fffc4 	addi	r17,r17,-1
  811fd0:	180697fa 	slli	r3,r3,31
  811fd4:	2c4a703a 	and	r5,r5,r17
  811fd8:	288ab03a 	or	r5,r5,r2
  811fdc:	28c6b03a 	or	r3,r5,r3
  811fe0:	9005883a 	mov	r2,r18
  811fe4:	dfc00d17 	ldw	ra,52(sp)
  811fe8:	df000c17 	ldw	fp,48(sp)
  811fec:	ddc00b17 	ldw	r23,44(sp)
  811ff0:	dd800a17 	ldw	r22,40(sp)
  811ff4:	dd400917 	ldw	r21,36(sp)
  811ff8:	dd000817 	ldw	r20,32(sp)
  811ffc:	dcc00717 	ldw	r19,28(sp)
  812000:	dc800617 	ldw	r18,24(sp)
  812004:	dc400517 	ldw	r17,20(sp)
  812008:	dc000417 	ldw	r16,16(sp)
  81200c:	dec00e04 	addi	sp,sp,56
  812010:	f800283a 	ret
  812014:	2404b03a 	or	r2,r4,r16
  812018:	2027883a 	mov	r19,r4
  81201c:	10003926 	beq	r2,zero,812104 <__divdf3+0x2c0>
  812020:	80012e26 	beq	r16,zero,8124dc <__divdf3+0x698>
  812024:	8009883a 	mov	r4,r16
  812028:	d9800315 	stw	r6,12(sp)
  81202c:	d9c00215 	stw	r7,8(sp)
  812030:	08070b40 	call	8070b4 <__clzsi2>
  812034:	d9800317 	ldw	r6,12(sp)
  812038:	d9c00217 	ldw	r7,8(sp)
  81203c:	113ffd44 	addi	r4,r2,-11
  812040:	00c00704 	movi	r3,28
  812044:	19012116 	blt	r3,r4,8124cc <__divdf3+0x688>
  812048:	00c00744 	movi	r3,29
  81204c:	147ffe04 	addi	r17,r2,-8
  812050:	1907c83a 	sub	r3,r3,r4
  812054:	8460983a 	sll	r16,r16,r17
  812058:	98c6d83a 	srl	r3,r19,r3
  81205c:	9c64983a 	sll	r18,r19,r17
  812060:	1c20b03a 	or	r16,r3,r16
  812064:	1080fcc4 	addi	r2,r2,1011
  812068:	00abc83a 	sub	r21,zero,r2
  81206c:	0027883a 	mov	r19,zero
  812070:	0013883a 	mov	r9,zero
  812074:	003f9106 	br	811ebc <__alt_mem_onchip_mem+0xff809ebc>
  812078:	3446b03a 	or	r3,r6,r17
  81207c:	18001f1e 	bne	r3,zero,8120fc <__divdf3+0x2b8>
  812080:	0023883a 	mov	r17,zero
  812084:	0011883a 	mov	r8,zero
  812088:	01c00084 	movi	r7,2
  81208c:	003f9d06 	br	811f04 <__alt_mem_onchip_mem+0xff809f04>
  812090:	3446b03a 	or	r3,r6,r17
  812094:	18001526 	beq	r3,zero,8120ec <__divdf3+0x2a8>
  812098:	88011b26 	beq	r17,zero,812508 <__divdf3+0x6c4>
  81209c:	8809883a 	mov	r4,r17
  8120a0:	d9800315 	stw	r6,12(sp)
  8120a4:	da400115 	stw	r9,4(sp)
  8120a8:	08070b40 	call	8070b4 <__clzsi2>
  8120ac:	d9800317 	ldw	r6,12(sp)
  8120b0:	da400117 	ldw	r9,4(sp)
  8120b4:	113ffd44 	addi	r4,r2,-11
  8120b8:	00c00704 	movi	r3,28
  8120bc:	19010e16 	blt	r3,r4,8124f8 <__divdf3+0x6b4>
  8120c0:	00c00744 	movi	r3,29
  8120c4:	123ffe04 	addi	r8,r2,-8
  8120c8:	1907c83a 	sub	r3,r3,r4
  8120cc:	8a22983a 	sll	r17,r17,r8
  8120d0:	30c6d83a 	srl	r3,r6,r3
  8120d4:	3210983a 	sll	r8,r6,r8
  8120d8:	1c62b03a 	or	r17,r3,r17
  8120dc:	1080fcc4 	addi	r2,r2,1011
  8120e0:	0085c83a 	sub	r2,zero,r2
  8120e4:	000f883a 	mov	r7,zero
  8120e8:	003f8606 	br	811f04 <__alt_mem_onchip_mem+0xff809f04>
  8120ec:	0023883a 	mov	r17,zero
  8120f0:	0011883a 	mov	r8,zero
  8120f4:	01c00044 	movi	r7,1
  8120f8:	003f8206 	br	811f04 <__alt_mem_onchip_mem+0xff809f04>
  8120fc:	01c000c4 	movi	r7,3
  812100:	003f8006 	br	811f04 <__alt_mem_onchip_mem+0xff809f04>
  812104:	04c00104 	movi	r19,4
  812108:	0021883a 	mov	r16,zero
  81210c:	0025883a 	mov	r18,zero
  812110:	02400044 	movi	r9,1
  812114:	003f6906 	br	811ebc <__alt_mem_onchip_mem+0xff809ebc>
  812118:	04c00304 	movi	r19,12
  81211c:	024000c4 	movi	r9,3
  812120:	003f6606 	br	811ebc <__alt_mem_onchip_mem+0xff809ebc>
  812124:	01400434 	movhi	r5,16
  812128:	0007883a 	mov	r3,zero
  81212c:	297fffc4 	addi	r5,r5,-1
  812130:	04bfffc4 	movi	r18,-1
  812134:	0081ffc4 	movi	r2,2047
  812138:	003fa106 	br	811fc0 <__alt_mem_onchip_mem+0xff809fc0>
  81213c:	00c00044 	movi	r3,1
  812140:	1887c83a 	sub	r3,r3,r2
  812144:	01000e04 	movi	r4,56
  812148:	20c1210e 	bge	r4,r3,8125d0 <__divdf3+0x78c>
  81214c:	98c0004c 	andi	r3,r19,1
  812150:	0005883a 	mov	r2,zero
  812154:	000b883a 	mov	r5,zero
  812158:	0025883a 	mov	r18,zero
  81215c:	003f9806 	br	811fc0 <__alt_mem_onchip_mem+0xff809fc0>
  812160:	8c00fd36 	bltu	r17,r16,812558 <__divdf3+0x714>
  812164:	8440fb26 	beq	r16,r17,812554 <__divdf3+0x710>
  812168:	8007883a 	mov	r3,r16
  81216c:	ad7fffc4 	addi	r21,r21,-1
  812170:	0021883a 	mov	r16,zero
  812174:	4004d63a 	srli	r2,r8,24
  812178:	8822923a 	slli	r17,r17,8
  81217c:	1809883a 	mov	r4,r3
  812180:	402c923a 	slli	r22,r8,8
  812184:	88b8b03a 	or	fp,r17,r2
  812188:	e028d43a 	srli	r20,fp,16
  81218c:	d8c00015 	stw	r3,0(sp)
  812190:	e5ffffcc 	andi	r23,fp,65535
  812194:	a00b883a 	mov	r5,r20
  812198:	0811d880 	call	811d88 <__udivsi3>
  81219c:	d8c00017 	ldw	r3,0(sp)
  8121a0:	a00b883a 	mov	r5,r20
  8121a4:	d8800315 	stw	r2,12(sp)
  8121a8:	1809883a 	mov	r4,r3
  8121ac:	0811dec0 	call	811dec <__umodsi3>
  8121b0:	d9800317 	ldw	r6,12(sp)
  8121b4:	1006943a 	slli	r3,r2,16
  8121b8:	9004d43a 	srli	r2,r18,16
  8121bc:	b9a3383a 	mul	r17,r23,r6
  8121c0:	10c4b03a 	or	r2,r2,r3
  8121c4:	1440062e 	bgeu	r2,r17,8121e0 <__divdf3+0x39c>
  8121c8:	1705883a 	add	r2,r2,fp
  8121cc:	30ffffc4 	addi	r3,r6,-1
  8121d0:	1700ee36 	bltu	r2,fp,81258c <__divdf3+0x748>
  8121d4:	1440ed2e 	bgeu	r2,r17,81258c <__divdf3+0x748>
  8121d8:	31bfff84 	addi	r6,r6,-2
  8121dc:	1705883a 	add	r2,r2,fp
  8121e0:	1463c83a 	sub	r17,r2,r17
  8121e4:	a00b883a 	mov	r5,r20
  8121e8:	8809883a 	mov	r4,r17
  8121ec:	d9800315 	stw	r6,12(sp)
  8121f0:	0811d880 	call	811d88 <__udivsi3>
  8121f4:	a00b883a 	mov	r5,r20
  8121f8:	8809883a 	mov	r4,r17
  8121fc:	d8800215 	stw	r2,8(sp)
  812200:	0811dec0 	call	811dec <__umodsi3>
  812204:	d9c00217 	ldw	r7,8(sp)
  812208:	1004943a 	slli	r2,r2,16
  81220c:	94bfffcc 	andi	r18,r18,65535
  812210:	b9d1383a 	mul	r8,r23,r7
  812214:	90a4b03a 	or	r18,r18,r2
  812218:	d9800317 	ldw	r6,12(sp)
  81221c:	9200062e 	bgeu	r18,r8,812238 <__divdf3+0x3f4>
  812220:	9725883a 	add	r18,r18,fp
  812224:	38bfffc4 	addi	r2,r7,-1
  812228:	9700d636 	bltu	r18,fp,812584 <__divdf3+0x740>
  81222c:	9200d52e 	bgeu	r18,r8,812584 <__divdf3+0x740>
  812230:	39ffff84 	addi	r7,r7,-2
  812234:	9725883a 	add	r18,r18,fp
  812238:	3004943a 	slli	r2,r6,16
  81223c:	b012d43a 	srli	r9,r22,16
  812240:	b1bfffcc 	andi	r6,r22,65535
  812244:	11e2b03a 	or	r17,r2,r7
  812248:	8806d43a 	srli	r3,r17,16
  81224c:	893fffcc 	andi	r4,r17,65535
  812250:	218b383a 	mul	r5,r4,r6
  812254:	30c5383a 	mul	r2,r6,r3
  812258:	2249383a 	mul	r4,r4,r9
  81225c:	280ed43a 	srli	r7,r5,16
  812260:	9225c83a 	sub	r18,r18,r8
  812264:	2089883a 	add	r4,r4,r2
  812268:	3909883a 	add	r4,r7,r4
  81226c:	1a47383a 	mul	r3,r3,r9
  812270:	2080022e 	bgeu	r4,r2,81227c <__divdf3+0x438>
  812274:	00800074 	movhi	r2,1
  812278:	1887883a 	add	r3,r3,r2
  81227c:	2004d43a 	srli	r2,r4,16
  812280:	2008943a 	slli	r4,r4,16
  812284:	297fffcc 	andi	r5,r5,65535
  812288:	10c7883a 	add	r3,r2,r3
  81228c:	2149883a 	add	r4,r4,r5
  812290:	90c0a536 	bltu	r18,r3,812528 <__divdf3+0x6e4>
  812294:	90c0bf26 	beq	r18,r3,812594 <__divdf3+0x750>
  812298:	90c7c83a 	sub	r3,r18,r3
  81229c:	810fc83a 	sub	r7,r16,r4
  8122a0:	81e5803a 	cmpltu	r18,r16,r7
  8122a4:	1ca5c83a 	sub	r18,r3,r18
  8122a8:	e480c126 	beq	fp,r18,8125b0 <__divdf3+0x76c>
  8122ac:	a00b883a 	mov	r5,r20
  8122b0:	9009883a 	mov	r4,r18
  8122b4:	d9800315 	stw	r6,12(sp)
  8122b8:	d9c00215 	stw	r7,8(sp)
  8122bc:	da400115 	stw	r9,4(sp)
  8122c0:	0811d880 	call	811d88 <__udivsi3>
  8122c4:	a00b883a 	mov	r5,r20
  8122c8:	9009883a 	mov	r4,r18
  8122cc:	d8800015 	stw	r2,0(sp)
  8122d0:	0811dec0 	call	811dec <__umodsi3>
  8122d4:	d9c00217 	ldw	r7,8(sp)
  8122d8:	da000017 	ldw	r8,0(sp)
  8122dc:	1006943a 	slli	r3,r2,16
  8122e0:	3804d43a 	srli	r2,r7,16
  8122e4:	ba21383a 	mul	r16,r23,r8
  8122e8:	d9800317 	ldw	r6,12(sp)
  8122ec:	10c4b03a 	or	r2,r2,r3
  8122f0:	da400117 	ldw	r9,4(sp)
  8122f4:	1400062e 	bgeu	r2,r16,812310 <__divdf3+0x4cc>
  8122f8:	1705883a 	add	r2,r2,fp
  8122fc:	40ffffc4 	addi	r3,r8,-1
  812300:	1700ad36 	bltu	r2,fp,8125b8 <__divdf3+0x774>
  812304:	1400ac2e 	bgeu	r2,r16,8125b8 <__divdf3+0x774>
  812308:	423fff84 	addi	r8,r8,-2
  81230c:	1705883a 	add	r2,r2,fp
  812310:	1421c83a 	sub	r16,r2,r16
  812314:	a00b883a 	mov	r5,r20
  812318:	8009883a 	mov	r4,r16
  81231c:	d9800315 	stw	r6,12(sp)
  812320:	d9c00215 	stw	r7,8(sp)
  812324:	da000015 	stw	r8,0(sp)
  812328:	da400115 	stw	r9,4(sp)
  81232c:	0811d880 	call	811d88 <__udivsi3>
  812330:	8009883a 	mov	r4,r16
  812334:	a00b883a 	mov	r5,r20
  812338:	1025883a 	mov	r18,r2
  81233c:	0811dec0 	call	811dec <__umodsi3>
  812340:	d9c00217 	ldw	r7,8(sp)
  812344:	1004943a 	slli	r2,r2,16
  812348:	bcaf383a 	mul	r23,r23,r18
  81234c:	393fffcc 	andi	r4,r7,65535
  812350:	2088b03a 	or	r4,r4,r2
  812354:	d9800317 	ldw	r6,12(sp)
  812358:	da000017 	ldw	r8,0(sp)
  81235c:	da400117 	ldw	r9,4(sp)
  812360:	25c0062e 	bgeu	r4,r23,81237c <__divdf3+0x538>
  812364:	2709883a 	add	r4,r4,fp
  812368:	90bfffc4 	addi	r2,r18,-1
  81236c:	27009436 	bltu	r4,fp,8125c0 <__divdf3+0x77c>
  812370:	25c0932e 	bgeu	r4,r23,8125c0 <__divdf3+0x77c>
  812374:	94bfff84 	addi	r18,r18,-2
  812378:	2709883a 	add	r4,r4,fp
  81237c:	4004943a 	slli	r2,r8,16
  812380:	25efc83a 	sub	r23,r4,r23
  812384:	1490b03a 	or	r8,r2,r18
  812388:	4008d43a 	srli	r4,r8,16
  81238c:	40ffffcc 	andi	r3,r8,65535
  812390:	30c5383a 	mul	r2,r6,r3
  812394:	1a47383a 	mul	r3,r3,r9
  812398:	310d383a 	mul	r6,r6,r4
  81239c:	100ad43a 	srli	r5,r2,16
  8123a0:	4913383a 	mul	r9,r9,r4
  8123a4:	1987883a 	add	r3,r3,r6
  8123a8:	28c7883a 	add	r3,r5,r3
  8123ac:	1980022e 	bgeu	r3,r6,8123b8 <__divdf3+0x574>
  8123b0:	01000074 	movhi	r4,1
  8123b4:	4913883a 	add	r9,r9,r4
  8123b8:	1808d43a 	srli	r4,r3,16
  8123bc:	1806943a 	slli	r3,r3,16
  8123c0:	10bfffcc 	andi	r2,r2,65535
  8123c4:	2253883a 	add	r9,r4,r9
  8123c8:	1887883a 	add	r3,r3,r2
  8123cc:	ba403836 	bltu	r23,r9,8124b0 <__divdf3+0x66c>
  8123d0:	ba403626 	beq	r23,r9,8124ac <__divdf3+0x668>
  8123d4:	42000054 	ori	r8,r8,1
  8123d8:	a880ffc4 	addi	r2,r21,1023
  8123dc:	00bf570e 	bge	zero,r2,81213c <__alt_mem_onchip_mem+0xff80a13c>
  8123e0:	40c001cc 	andi	r3,r8,7
  8123e4:	18000726 	beq	r3,zero,812404 <__divdf3+0x5c0>
  8123e8:	40c003cc 	andi	r3,r8,15
  8123ec:	01000104 	movi	r4,4
  8123f0:	19000426 	beq	r3,r4,812404 <__divdf3+0x5c0>
  8123f4:	4107883a 	add	r3,r8,r4
  8123f8:	1a11803a 	cmpltu	r8,r3,r8
  8123fc:	8a23883a 	add	r17,r17,r8
  812400:	1811883a 	mov	r8,r3
  812404:	88c0402c 	andhi	r3,r17,256
  812408:	18000426 	beq	r3,zero,81241c <__divdf3+0x5d8>
  81240c:	00ffc034 	movhi	r3,65280
  812410:	18ffffc4 	addi	r3,r3,-1
  812414:	a8810004 	addi	r2,r21,1024
  812418:	88e2703a 	and	r17,r17,r3
  81241c:	00c1ff84 	movi	r3,2046
  812420:	18bee316 	blt	r3,r2,811fb0 <__alt_mem_onchip_mem+0xff809fb0>
  812424:	8824977a 	slli	r18,r17,29
  812428:	4010d0fa 	srli	r8,r8,3
  81242c:	8822927a 	slli	r17,r17,9
  812430:	1081ffcc 	andi	r2,r2,2047
  812434:	9224b03a 	or	r18,r18,r8
  812438:	880ad33a 	srli	r5,r17,12
  81243c:	98c0004c 	andi	r3,r19,1
  812440:	003edf06 	br	811fc0 <__alt_mem_onchip_mem+0xff809fc0>
  812444:	8080022c 	andhi	r2,r16,8
  812448:	10001226 	beq	r2,zero,812494 <__divdf3+0x650>
  81244c:	8880022c 	andhi	r2,r17,8
  812450:	1000101e 	bne	r2,zero,812494 <__divdf3+0x650>
  812454:	00800434 	movhi	r2,16
  812458:	89400234 	orhi	r5,r17,8
  81245c:	10bfffc4 	addi	r2,r2,-1
  812460:	b007883a 	mov	r3,r22
  812464:	288a703a 	and	r5,r5,r2
  812468:	4025883a 	mov	r18,r8
  81246c:	003f3106 	br	812134 <__alt_mem_onchip_mem+0xff80a134>
  812470:	008000c4 	movi	r2,3
  812474:	3880a626 	beq	r7,r2,812710 <__divdf3+0x8cc>
  812478:	00800044 	movi	r2,1
  81247c:	3880521e 	bne	r7,r2,8125c8 <__divdf3+0x784>
  812480:	b807883a 	mov	r3,r23
  812484:	0005883a 	mov	r2,zero
  812488:	000b883a 	mov	r5,zero
  81248c:	0025883a 	mov	r18,zero
  812490:	003ecb06 	br	811fc0 <__alt_mem_onchip_mem+0xff809fc0>
  812494:	00800434 	movhi	r2,16
  812498:	81400234 	orhi	r5,r16,8
  81249c:	10bfffc4 	addi	r2,r2,-1
  8124a0:	a007883a 	mov	r3,r20
  8124a4:	288a703a 	and	r5,r5,r2
  8124a8:	003f2206 	br	812134 <__alt_mem_onchip_mem+0xff80a134>
  8124ac:	183fca26 	beq	r3,zero,8123d8 <__alt_mem_onchip_mem+0xff80a3d8>
  8124b0:	e5ef883a 	add	r23,fp,r23
  8124b4:	40bfffc4 	addi	r2,r8,-1
  8124b8:	bf00392e 	bgeu	r23,fp,8125a0 <__divdf3+0x75c>
  8124bc:	1011883a 	mov	r8,r2
  8124c0:	ba7fc41e 	bne	r23,r9,8123d4 <__alt_mem_onchip_mem+0xff80a3d4>
  8124c4:	b0ffc31e 	bne	r22,r3,8123d4 <__alt_mem_onchip_mem+0xff80a3d4>
  8124c8:	003fc306 	br	8123d8 <__alt_mem_onchip_mem+0xff80a3d8>
  8124cc:	143ff604 	addi	r16,r2,-40
  8124d0:	9c20983a 	sll	r16,r19,r16
  8124d4:	0025883a 	mov	r18,zero
  8124d8:	003ee206 	br	812064 <__alt_mem_onchip_mem+0xff80a064>
  8124dc:	d9800315 	stw	r6,12(sp)
  8124e0:	d9c00215 	stw	r7,8(sp)
  8124e4:	08070b40 	call	8070b4 <__clzsi2>
  8124e8:	10800804 	addi	r2,r2,32
  8124ec:	d9c00217 	ldw	r7,8(sp)
  8124f0:	d9800317 	ldw	r6,12(sp)
  8124f4:	003ed106 	br	81203c <__alt_mem_onchip_mem+0xff80a03c>
  8124f8:	147ff604 	addi	r17,r2,-40
  8124fc:	3462983a 	sll	r17,r6,r17
  812500:	0011883a 	mov	r8,zero
  812504:	003ef506 	br	8120dc <__alt_mem_onchip_mem+0xff80a0dc>
  812508:	3009883a 	mov	r4,r6
  81250c:	d9800315 	stw	r6,12(sp)
  812510:	da400115 	stw	r9,4(sp)
  812514:	08070b40 	call	8070b4 <__clzsi2>
  812518:	10800804 	addi	r2,r2,32
  81251c:	da400117 	ldw	r9,4(sp)
  812520:	d9800317 	ldw	r6,12(sp)
  812524:	003ee306 	br	8120b4 <__alt_mem_onchip_mem+0xff80a0b4>
  812528:	85a1883a 	add	r16,r16,r22
  81252c:	8585803a 	cmpltu	r2,r16,r22
  812530:	1705883a 	add	r2,r2,fp
  812534:	14a5883a 	add	r18,r2,r18
  812538:	88bfffc4 	addi	r2,r17,-1
  81253c:	e4800c2e 	bgeu	fp,r18,812570 <__divdf3+0x72c>
  812540:	90c03e36 	bltu	r18,r3,81263c <__divdf3+0x7f8>
  812544:	1c806926 	beq	r3,r18,8126ec <__divdf3+0x8a8>
  812548:	90c7c83a 	sub	r3,r18,r3
  81254c:	1023883a 	mov	r17,r2
  812550:	003f5206 	br	81229c <__alt_mem_onchip_mem+0xff80a29c>
  812554:	923f0436 	bltu	r18,r8,812168 <__alt_mem_onchip_mem+0xff80a168>
  812558:	800897fa 	slli	r4,r16,31
  81255c:	9004d07a 	srli	r2,r18,1
  812560:	8006d07a 	srli	r3,r16,1
  812564:	902097fa 	slli	r16,r18,31
  812568:	20a4b03a 	or	r18,r4,r2
  81256c:	003f0106 	br	812174 <__alt_mem_onchip_mem+0xff80a174>
  812570:	e4bff51e 	bne	fp,r18,812548 <__alt_mem_onchip_mem+0xff80a548>
  812574:	85bff22e 	bgeu	r16,r22,812540 <__alt_mem_onchip_mem+0xff80a540>
  812578:	e0c7c83a 	sub	r3,fp,r3
  81257c:	1023883a 	mov	r17,r2
  812580:	003f4606 	br	81229c <__alt_mem_onchip_mem+0xff80a29c>
  812584:	100f883a 	mov	r7,r2
  812588:	003f2b06 	br	812238 <__alt_mem_onchip_mem+0xff80a238>
  81258c:	180d883a 	mov	r6,r3
  812590:	003f1306 	br	8121e0 <__alt_mem_onchip_mem+0xff80a1e0>
  812594:	813fe436 	bltu	r16,r4,812528 <__alt_mem_onchip_mem+0xff80a528>
  812598:	0007883a 	mov	r3,zero
  81259c:	003f3f06 	br	81229c <__alt_mem_onchip_mem+0xff80a29c>
  8125a0:	ba402c36 	bltu	r23,r9,812654 <__divdf3+0x810>
  8125a4:	4dc05426 	beq	r9,r23,8126f8 <__divdf3+0x8b4>
  8125a8:	1011883a 	mov	r8,r2
  8125ac:	003f8906 	br	8123d4 <__alt_mem_onchip_mem+0xff80a3d4>
  8125b0:	023fffc4 	movi	r8,-1
  8125b4:	003f8806 	br	8123d8 <__alt_mem_onchip_mem+0xff80a3d8>
  8125b8:	1811883a 	mov	r8,r3
  8125bc:	003f5406 	br	812310 <__alt_mem_onchip_mem+0xff80a310>
  8125c0:	1025883a 	mov	r18,r2
  8125c4:	003f6d06 	br	81237c <__alt_mem_onchip_mem+0xff80a37c>
  8125c8:	b827883a 	mov	r19,r23
  8125cc:	003f8206 	br	8123d8 <__alt_mem_onchip_mem+0xff80a3d8>
  8125d0:	010007c4 	movi	r4,31
  8125d4:	20c02616 	blt	r4,r3,812670 <__divdf3+0x82c>
  8125d8:	00800804 	movi	r2,32
  8125dc:	10c5c83a 	sub	r2,r2,r3
  8125e0:	888a983a 	sll	r5,r17,r2
  8125e4:	40c8d83a 	srl	r4,r8,r3
  8125e8:	4084983a 	sll	r2,r8,r2
  8125ec:	88e2d83a 	srl	r17,r17,r3
  8125f0:	2906b03a 	or	r3,r5,r4
  8125f4:	1004c03a 	cmpne	r2,r2,zero
  8125f8:	1886b03a 	or	r3,r3,r2
  8125fc:	188001cc 	andi	r2,r3,7
  812600:	10000726 	beq	r2,zero,812620 <__divdf3+0x7dc>
  812604:	188003cc 	andi	r2,r3,15
  812608:	01000104 	movi	r4,4
  81260c:	11000426 	beq	r2,r4,812620 <__divdf3+0x7dc>
  812610:	1805883a 	mov	r2,r3
  812614:	10c00104 	addi	r3,r2,4
  812618:	1885803a 	cmpltu	r2,r3,r2
  81261c:	88a3883a 	add	r17,r17,r2
  812620:	8880202c 	andhi	r2,r17,128
  812624:	10002726 	beq	r2,zero,8126c4 <__divdf3+0x880>
  812628:	98c0004c 	andi	r3,r19,1
  81262c:	00800044 	movi	r2,1
  812630:	000b883a 	mov	r5,zero
  812634:	0025883a 	mov	r18,zero
  812638:	003e6106 	br	811fc0 <__alt_mem_onchip_mem+0xff809fc0>
  81263c:	85a1883a 	add	r16,r16,r22
  812640:	8585803a 	cmpltu	r2,r16,r22
  812644:	1705883a 	add	r2,r2,fp
  812648:	14a5883a 	add	r18,r2,r18
  81264c:	8c7fff84 	addi	r17,r17,-2
  812650:	003f1106 	br	812298 <__alt_mem_onchip_mem+0xff80a298>
  812654:	b589883a 	add	r4,r22,r22
  812658:	25ad803a 	cmpltu	r22,r4,r22
  81265c:	b739883a 	add	fp,r22,fp
  812660:	40bfff84 	addi	r2,r8,-2
  812664:	bf2f883a 	add	r23,r23,fp
  812668:	202d883a 	mov	r22,r4
  81266c:	003f9306 	br	8124bc <__alt_mem_onchip_mem+0xff80a4bc>
  812670:	013ff844 	movi	r4,-31
  812674:	2085c83a 	sub	r2,r4,r2
  812678:	8888d83a 	srl	r4,r17,r2
  81267c:	00800804 	movi	r2,32
  812680:	18802126 	beq	r3,r2,812708 <__divdf3+0x8c4>
  812684:	00801004 	movi	r2,64
  812688:	10c5c83a 	sub	r2,r2,r3
  81268c:	8884983a 	sll	r2,r17,r2
  812690:	1204b03a 	or	r2,r2,r8
  812694:	1004c03a 	cmpne	r2,r2,zero
  812698:	2084b03a 	or	r2,r4,r2
  81269c:	144001cc 	andi	r17,r2,7
  8126a0:	88000d1e 	bne	r17,zero,8126d8 <__divdf3+0x894>
  8126a4:	000b883a 	mov	r5,zero
  8126a8:	1024d0fa 	srli	r18,r2,3
  8126ac:	98c0004c 	andi	r3,r19,1
  8126b0:	0005883a 	mov	r2,zero
  8126b4:	9464b03a 	or	r18,r18,r17
  8126b8:	003e4106 	br	811fc0 <__alt_mem_onchip_mem+0xff809fc0>
  8126bc:	1007883a 	mov	r3,r2
  8126c0:	0023883a 	mov	r17,zero
  8126c4:	880a927a 	slli	r5,r17,9
  8126c8:	1805883a 	mov	r2,r3
  8126cc:	8822977a 	slli	r17,r17,29
  8126d0:	280ad33a 	srli	r5,r5,12
  8126d4:	003ff406 	br	8126a8 <__alt_mem_onchip_mem+0xff80a6a8>
  8126d8:	10c003cc 	andi	r3,r2,15
  8126dc:	01000104 	movi	r4,4
  8126e0:	193ff626 	beq	r3,r4,8126bc <__alt_mem_onchip_mem+0xff80a6bc>
  8126e4:	0023883a 	mov	r17,zero
  8126e8:	003fca06 	br	812614 <__alt_mem_onchip_mem+0xff80a614>
  8126ec:	813fd336 	bltu	r16,r4,81263c <__alt_mem_onchip_mem+0xff80a63c>
  8126f0:	1023883a 	mov	r17,r2
  8126f4:	003fa806 	br	812598 <__alt_mem_onchip_mem+0xff80a598>
  8126f8:	b0ffd636 	bltu	r22,r3,812654 <__alt_mem_onchip_mem+0xff80a654>
  8126fc:	1011883a 	mov	r8,r2
  812700:	b0ff341e 	bne	r22,r3,8123d4 <__alt_mem_onchip_mem+0xff80a3d4>
  812704:	003f3406 	br	8123d8 <__alt_mem_onchip_mem+0xff80a3d8>
  812708:	0005883a 	mov	r2,zero
  81270c:	003fe006 	br	812690 <__alt_mem_onchip_mem+0xff80a690>
  812710:	00800434 	movhi	r2,16
  812714:	89400234 	orhi	r5,r17,8
  812718:	10bfffc4 	addi	r2,r2,-1
  81271c:	b807883a 	mov	r3,r23
  812720:	288a703a 	and	r5,r5,r2
  812724:	4025883a 	mov	r18,r8
  812728:	003e8206 	br	812134 <__alt_mem_onchip_mem+0xff80a134>

0081272c <__eqdf2>:
  81272c:	2804d53a 	srli	r2,r5,20
  812730:	3806d53a 	srli	r3,r7,20
  812734:	02000434 	movhi	r8,16
  812738:	423fffc4 	addi	r8,r8,-1
  81273c:	1081ffcc 	andi	r2,r2,2047
  812740:	0281ffc4 	movi	r10,2047
  812744:	2a12703a 	and	r9,r5,r8
  812748:	18c1ffcc 	andi	r3,r3,2047
  81274c:	3a10703a 	and	r8,r7,r8
  812750:	280ad7fa 	srli	r5,r5,31
  812754:	380ed7fa 	srli	r7,r7,31
  812758:	12801026 	beq	r2,r10,81279c <__eqdf2+0x70>
  81275c:	0281ffc4 	movi	r10,2047
  812760:	1a800a26 	beq	r3,r10,81278c <__eqdf2+0x60>
  812764:	10c00226 	beq	r2,r3,812770 <__eqdf2+0x44>
  812768:	00800044 	movi	r2,1
  81276c:	f800283a 	ret
  812770:	4a3ffd1e 	bne	r9,r8,812768 <__alt_mem_onchip_mem+0xff80a768>
  812774:	21bffc1e 	bne	r4,r6,812768 <__alt_mem_onchip_mem+0xff80a768>
  812778:	29c00c26 	beq	r5,r7,8127ac <__eqdf2+0x80>
  81277c:	103ffa1e 	bne	r2,zero,812768 <__alt_mem_onchip_mem+0xff80a768>
  812780:	2244b03a 	or	r2,r4,r9
  812784:	1004c03a 	cmpne	r2,r2,zero
  812788:	f800283a 	ret
  81278c:	3214b03a 	or	r10,r6,r8
  812790:	503ff426 	beq	r10,zero,812764 <__alt_mem_onchip_mem+0xff80a764>
  812794:	00800044 	movi	r2,1
  812798:	f800283a 	ret
  81279c:	2254b03a 	or	r10,r4,r9
  8127a0:	503fee26 	beq	r10,zero,81275c <__alt_mem_onchip_mem+0xff80a75c>
  8127a4:	00800044 	movi	r2,1
  8127a8:	f800283a 	ret
  8127ac:	0005883a 	mov	r2,zero
  8127b0:	f800283a 	ret

008127b4 <__muldf3>:
  8127b4:	defff304 	addi	sp,sp,-52
  8127b8:	2804d53a 	srli	r2,r5,20
  8127bc:	dd800915 	stw	r22,36(sp)
  8127c0:	282cd7fa 	srli	r22,r5,31
  8127c4:	dc000315 	stw	r16,12(sp)
  8127c8:	04000434 	movhi	r16,16
  8127cc:	dd400815 	stw	r21,32(sp)
  8127d0:	dc800515 	stw	r18,20(sp)
  8127d4:	843fffc4 	addi	r16,r16,-1
  8127d8:	dfc00c15 	stw	ra,48(sp)
  8127dc:	df000b15 	stw	fp,44(sp)
  8127e0:	ddc00a15 	stw	r23,40(sp)
  8127e4:	dd000715 	stw	r20,28(sp)
  8127e8:	dcc00615 	stw	r19,24(sp)
  8127ec:	dc400415 	stw	r17,16(sp)
  8127f0:	1481ffcc 	andi	r18,r2,2047
  8127f4:	2c20703a 	and	r16,r5,r16
  8127f8:	b02b883a 	mov	r21,r22
  8127fc:	b2403fcc 	andi	r9,r22,255
  812800:	90006026 	beq	r18,zero,812984 <__muldf3+0x1d0>
  812804:	0081ffc4 	movi	r2,2047
  812808:	2029883a 	mov	r20,r4
  81280c:	90803626 	beq	r18,r2,8128e8 <__muldf3+0x134>
  812810:	80800434 	orhi	r2,r16,16
  812814:	100490fa 	slli	r2,r2,3
  812818:	2020d77a 	srli	r16,r4,29
  81281c:	202890fa 	slli	r20,r4,3
  812820:	94bf0044 	addi	r18,r18,-1023
  812824:	80a0b03a 	or	r16,r16,r2
  812828:	0027883a 	mov	r19,zero
  81282c:	0039883a 	mov	fp,zero
  812830:	3804d53a 	srli	r2,r7,20
  812834:	382ed7fa 	srli	r23,r7,31
  812838:	04400434 	movhi	r17,16
  81283c:	8c7fffc4 	addi	r17,r17,-1
  812840:	1081ffcc 	andi	r2,r2,2047
  812844:	3011883a 	mov	r8,r6
  812848:	3c62703a 	and	r17,r7,r17
  81284c:	ba803fcc 	andi	r10,r23,255
  812850:	10006d26 	beq	r2,zero,812a08 <__muldf3+0x254>
  812854:	00c1ffc4 	movi	r3,2047
  812858:	10c06526 	beq	r2,r3,8129f0 <__muldf3+0x23c>
  81285c:	88c00434 	orhi	r3,r17,16
  812860:	180690fa 	slli	r3,r3,3
  812864:	3022d77a 	srli	r17,r6,29
  812868:	301090fa 	slli	r8,r6,3
  81286c:	10bf0044 	addi	r2,r2,-1023
  812870:	88e2b03a 	or	r17,r17,r3
  812874:	000b883a 	mov	r5,zero
  812878:	9085883a 	add	r2,r18,r2
  81287c:	2cc8b03a 	or	r4,r5,r19
  812880:	00c003c4 	movi	r3,15
  812884:	bdacf03a 	xor	r22,r23,r22
  812888:	12c00044 	addi	r11,r2,1
  81288c:	19009936 	bltu	r3,r4,812af4 <__muldf3+0x340>
  812890:	200890ba 	slli	r4,r4,2
  812894:	00c02074 	movhi	r3,129
  812898:	18ca2a04 	addi	r3,r3,10408
  81289c:	20c9883a 	add	r4,r4,r3
  8128a0:	20c00017 	ldw	r3,0(r4)
  8128a4:	1800683a 	jmp	r3
  8128a8:	00812af4 	movhi	r2,1195
  8128ac:	00812908 	cmpgei	r2,zero,1188
  8128b0:	00812908 	cmpgei	r2,zero,1188
  8128b4:	00812904 	movi	r2,1188
  8128b8:	00812ad0 	cmplti	r2,zero,1195
  8128bc:	00812ad0 	cmplti	r2,zero,1195
  8128c0:	00812ab8 	rdprs	r2,zero,1194
  8128c4:	00812904 	movi	r2,1188
  8128c8:	00812ad0 	cmplti	r2,zero,1195
  8128cc:	00812ab8 	rdprs	r2,zero,1194
  8128d0:	00812ad0 	cmplti	r2,zero,1195
  8128d4:	00812904 	movi	r2,1188
  8128d8:	00812ae0 	cmpeqi	r2,zero,1195
  8128dc:	00812ae0 	cmpeqi	r2,zero,1195
  8128e0:	00812ae0 	cmpeqi	r2,zero,1195
  8128e4:	00812cfc 	xorhi	r2,zero,1203
  8128e8:	2404b03a 	or	r2,r4,r16
  8128ec:	10006f1e 	bne	r2,zero,812aac <__muldf3+0x2f8>
  8128f0:	04c00204 	movi	r19,8
  8128f4:	0021883a 	mov	r16,zero
  8128f8:	0029883a 	mov	r20,zero
  8128fc:	07000084 	movi	fp,2
  812900:	003fcb06 	br	812830 <__alt_mem_onchip_mem+0xff80a830>
  812904:	502d883a 	mov	r22,r10
  812908:	00800084 	movi	r2,2
  81290c:	28805726 	beq	r5,r2,812a6c <__muldf3+0x2b8>
  812910:	008000c4 	movi	r2,3
  812914:	28816626 	beq	r5,r2,812eb0 <__muldf3+0x6fc>
  812918:	00800044 	movi	r2,1
  81291c:	2881411e 	bne	r5,r2,812e24 <__muldf3+0x670>
  812920:	b02b883a 	mov	r21,r22
  812924:	0005883a 	mov	r2,zero
  812928:	000b883a 	mov	r5,zero
  81292c:	0029883a 	mov	r20,zero
  812930:	1004953a 	slli	r2,r2,20
  812934:	a8c03fcc 	andi	r3,r21,255
  812938:	04400434 	movhi	r17,16
  81293c:	8c7fffc4 	addi	r17,r17,-1
  812940:	180697fa 	slli	r3,r3,31
  812944:	2c4a703a 	and	r5,r5,r17
  812948:	288ab03a 	or	r5,r5,r2
  81294c:	28c6b03a 	or	r3,r5,r3
  812950:	a005883a 	mov	r2,r20
  812954:	dfc00c17 	ldw	ra,48(sp)
  812958:	df000b17 	ldw	fp,44(sp)
  81295c:	ddc00a17 	ldw	r23,40(sp)
  812960:	dd800917 	ldw	r22,36(sp)
  812964:	dd400817 	ldw	r21,32(sp)
  812968:	dd000717 	ldw	r20,28(sp)
  81296c:	dcc00617 	ldw	r19,24(sp)
  812970:	dc800517 	ldw	r18,20(sp)
  812974:	dc400417 	ldw	r17,16(sp)
  812978:	dc000317 	ldw	r16,12(sp)
  81297c:	dec00d04 	addi	sp,sp,52
  812980:	f800283a 	ret
  812984:	2404b03a 	or	r2,r4,r16
  812988:	2027883a 	mov	r19,r4
  81298c:	10004226 	beq	r2,zero,812a98 <__muldf3+0x2e4>
  812990:	8000fc26 	beq	r16,zero,812d84 <__muldf3+0x5d0>
  812994:	8009883a 	mov	r4,r16
  812998:	d9800215 	stw	r6,8(sp)
  81299c:	d9c00015 	stw	r7,0(sp)
  8129a0:	da400115 	stw	r9,4(sp)
  8129a4:	08070b40 	call	8070b4 <__clzsi2>
  8129a8:	d9800217 	ldw	r6,8(sp)
  8129ac:	d9c00017 	ldw	r7,0(sp)
  8129b0:	da400117 	ldw	r9,4(sp)
  8129b4:	113ffd44 	addi	r4,r2,-11
  8129b8:	00c00704 	movi	r3,28
  8129bc:	1900ed16 	blt	r3,r4,812d74 <__muldf3+0x5c0>
  8129c0:	00c00744 	movi	r3,29
  8129c4:	147ffe04 	addi	r17,r2,-8
  8129c8:	1907c83a 	sub	r3,r3,r4
  8129cc:	8460983a 	sll	r16,r16,r17
  8129d0:	98c6d83a 	srl	r3,r19,r3
  8129d4:	9c68983a 	sll	r20,r19,r17
  8129d8:	1c20b03a 	or	r16,r3,r16
  8129dc:	1080fcc4 	addi	r2,r2,1011
  8129e0:	00a5c83a 	sub	r18,zero,r2
  8129e4:	0027883a 	mov	r19,zero
  8129e8:	0039883a 	mov	fp,zero
  8129ec:	003f9006 	br	812830 <__alt_mem_onchip_mem+0xff80a830>
  8129f0:	3446b03a 	or	r3,r6,r17
  8129f4:	1800261e 	bne	r3,zero,812a90 <__muldf3+0x2dc>
  8129f8:	0023883a 	mov	r17,zero
  8129fc:	0011883a 	mov	r8,zero
  812a00:	01400084 	movi	r5,2
  812a04:	003f9c06 	br	812878 <__alt_mem_onchip_mem+0xff80a878>
  812a08:	3446b03a 	or	r3,r6,r17
  812a0c:	18001c26 	beq	r3,zero,812a80 <__muldf3+0x2cc>
  812a10:	8800ce26 	beq	r17,zero,812d4c <__muldf3+0x598>
  812a14:	8809883a 	mov	r4,r17
  812a18:	d9800215 	stw	r6,8(sp)
  812a1c:	da400115 	stw	r9,4(sp)
  812a20:	da800015 	stw	r10,0(sp)
  812a24:	08070b40 	call	8070b4 <__clzsi2>
  812a28:	d9800217 	ldw	r6,8(sp)
  812a2c:	da400117 	ldw	r9,4(sp)
  812a30:	da800017 	ldw	r10,0(sp)
  812a34:	113ffd44 	addi	r4,r2,-11
  812a38:	00c00704 	movi	r3,28
  812a3c:	1900bf16 	blt	r3,r4,812d3c <__muldf3+0x588>
  812a40:	00c00744 	movi	r3,29
  812a44:	123ffe04 	addi	r8,r2,-8
  812a48:	1907c83a 	sub	r3,r3,r4
  812a4c:	8a22983a 	sll	r17,r17,r8
  812a50:	30c6d83a 	srl	r3,r6,r3
  812a54:	3210983a 	sll	r8,r6,r8
  812a58:	1c62b03a 	or	r17,r3,r17
  812a5c:	1080fcc4 	addi	r2,r2,1011
  812a60:	0085c83a 	sub	r2,zero,r2
  812a64:	000b883a 	mov	r5,zero
  812a68:	003f8306 	br	812878 <__alt_mem_onchip_mem+0xff80a878>
  812a6c:	b02b883a 	mov	r21,r22
  812a70:	0081ffc4 	movi	r2,2047
  812a74:	000b883a 	mov	r5,zero
  812a78:	0029883a 	mov	r20,zero
  812a7c:	003fac06 	br	812930 <__alt_mem_onchip_mem+0xff80a930>
  812a80:	0023883a 	mov	r17,zero
  812a84:	0011883a 	mov	r8,zero
  812a88:	01400044 	movi	r5,1
  812a8c:	003f7a06 	br	812878 <__alt_mem_onchip_mem+0xff80a878>
  812a90:	014000c4 	movi	r5,3
  812a94:	003f7806 	br	812878 <__alt_mem_onchip_mem+0xff80a878>
  812a98:	04c00104 	movi	r19,4
  812a9c:	0021883a 	mov	r16,zero
  812aa0:	0029883a 	mov	r20,zero
  812aa4:	07000044 	movi	fp,1
  812aa8:	003f6106 	br	812830 <__alt_mem_onchip_mem+0xff80a830>
  812aac:	04c00304 	movi	r19,12
  812ab0:	070000c4 	movi	fp,3
  812ab4:	003f5e06 	br	812830 <__alt_mem_onchip_mem+0xff80a830>
  812ab8:	01400434 	movhi	r5,16
  812abc:	002b883a 	mov	r21,zero
  812ac0:	297fffc4 	addi	r5,r5,-1
  812ac4:	053fffc4 	movi	r20,-1
  812ac8:	0081ffc4 	movi	r2,2047
  812acc:	003f9806 	br	812930 <__alt_mem_onchip_mem+0xff80a930>
  812ad0:	8023883a 	mov	r17,r16
  812ad4:	a011883a 	mov	r8,r20
  812ad8:	e00b883a 	mov	r5,fp
  812adc:	003f8a06 	br	812908 <__alt_mem_onchip_mem+0xff80a908>
  812ae0:	8023883a 	mov	r17,r16
  812ae4:	a011883a 	mov	r8,r20
  812ae8:	482d883a 	mov	r22,r9
  812aec:	e00b883a 	mov	r5,fp
  812af0:	003f8506 	br	812908 <__alt_mem_onchip_mem+0xff80a908>
  812af4:	a00ad43a 	srli	r5,r20,16
  812af8:	401ad43a 	srli	r13,r8,16
  812afc:	a53fffcc 	andi	r20,r20,65535
  812b00:	423fffcc 	andi	r8,r8,65535
  812b04:	4519383a 	mul	r12,r8,r20
  812b08:	4147383a 	mul	r3,r8,r5
  812b0c:	6d09383a 	mul	r4,r13,r20
  812b10:	600cd43a 	srli	r6,r12,16
  812b14:	2b5d383a 	mul	r14,r5,r13
  812b18:	20c9883a 	add	r4,r4,r3
  812b1c:	310d883a 	add	r6,r6,r4
  812b20:	30c0022e 	bgeu	r6,r3,812b2c <__muldf3+0x378>
  812b24:	00c00074 	movhi	r3,1
  812b28:	70dd883a 	add	r14,r14,r3
  812b2c:	8826d43a 	srli	r19,r17,16
  812b30:	8bffffcc 	andi	r15,r17,65535
  812b34:	7d23383a 	mul	r17,r15,r20
  812b38:	7949383a 	mul	r4,r15,r5
  812b3c:	9d29383a 	mul	r20,r19,r20
  812b40:	8814d43a 	srli	r10,r17,16
  812b44:	3012943a 	slli	r9,r6,16
  812b48:	a129883a 	add	r20,r20,r4
  812b4c:	633fffcc 	andi	r12,r12,65535
  812b50:	5515883a 	add	r10,r10,r20
  812b54:	3006d43a 	srli	r3,r6,16
  812b58:	4b13883a 	add	r9,r9,r12
  812b5c:	2ccb383a 	mul	r5,r5,r19
  812b60:	5100022e 	bgeu	r10,r4,812b6c <__muldf3+0x3b8>
  812b64:	01000074 	movhi	r4,1
  812b68:	290b883a 	add	r5,r5,r4
  812b6c:	802ad43a 	srli	r21,r16,16
  812b70:	843fffcc 	andi	r16,r16,65535
  812b74:	440d383a 	mul	r6,r8,r16
  812b78:	4565383a 	mul	r18,r8,r21
  812b7c:	8349383a 	mul	r4,r16,r13
  812b80:	500e943a 	slli	r7,r10,16
  812b84:	3010d43a 	srli	r8,r6,16
  812b88:	5028d43a 	srli	r20,r10,16
  812b8c:	2489883a 	add	r4,r4,r18
  812b90:	8abfffcc 	andi	r10,r17,65535
  812b94:	3a95883a 	add	r10,r7,r10
  812b98:	4119883a 	add	r12,r8,r4
  812b9c:	a169883a 	add	r20,r20,r5
  812ba0:	1a87883a 	add	r3,r3,r10
  812ba4:	6d5b383a 	mul	r13,r13,r21
  812ba8:	6480022e 	bgeu	r12,r18,812bb4 <__muldf3+0x400>
  812bac:	01000074 	movhi	r4,1
  812bb0:	691b883a 	add	r13,r13,r4
  812bb4:	7c25383a 	mul	r18,r15,r16
  812bb8:	7d4b383a 	mul	r5,r15,r21
  812bbc:	84cf383a 	mul	r7,r16,r19
  812bc0:	901ed43a 	srli	r15,r18,16
  812bc4:	6008d43a 	srli	r4,r12,16
  812bc8:	6010943a 	slli	r8,r12,16
  812bcc:	394f883a 	add	r7,r7,r5
  812bd0:	333fffcc 	andi	r12,r6,65535
  812bd4:	79df883a 	add	r15,r15,r7
  812bd8:	235b883a 	add	r13,r4,r13
  812bdc:	9d63383a 	mul	r17,r19,r21
  812be0:	4309883a 	add	r4,r8,r12
  812be4:	7940022e 	bgeu	r15,r5,812bf0 <__muldf3+0x43c>
  812be8:	01400074 	movhi	r5,1
  812bec:	8963883a 	add	r17,r17,r5
  812bf0:	780a943a 	slli	r5,r15,16
  812bf4:	91bfffcc 	andi	r6,r18,65535
  812bf8:	70c7883a 	add	r3,r14,r3
  812bfc:	298d883a 	add	r6,r5,r6
  812c00:	1a8f803a 	cmpltu	r7,r3,r10
  812c04:	350b883a 	add	r5,r6,r20
  812c08:	20c7883a 	add	r3,r4,r3
  812c0c:	3955883a 	add	r10,r7,r5
  812c10:	1909803a 	cmpltu	r4,r3,r4
  812c14:	6a91883a 	add	r8,r13,r10
  812c18:	780cd43a 	srli	r6,r15,16
  812c1c:	2219883a 	add	r12,r4,r8
  812c20:	2d0b803a 	cmpltu	r5,r5,r20
  812c24:	51cf803a 	cmpltu	r7,r10,r7
  812c28:	29ceb03a 	or	r7,r5,r7
  812c2c:	4351803a 	cmpltu	r8,r8,r13
  812c30:	610b803a 	cmpltu	r5,r12,r4
  812c34:	4148b03a 	or	r4,r8,r5
  812c38:	398f883a 	add	r7,r7,r6
  812c3c:	3909883a 	add	r4,r7,r4
  812c40:	1810927a 	slli	r8,r3,9
  812c44:	2449883a 	add	r4,r4,r17
  812c48:	2008927a 	slli	r4,r4,9
  812c4c:	6022d5fa 	srli	r17,r12,23
  812c50:	1806d5fa 	srli	r3,r3,23
  812c54:	4252b03a 	or	r9,r8,r9
  812c58:	600a927a 	slli	r5,r12,9
  812c5c:	4810c03a 	cmpne	r8,r9,zero
  812c60:	2462b03a 	or	r17,r4,r17
  812c64:	40c6b03a 	or	r3,r8,r3
  812c68:	8900402c 	andhi	r4,r17,256
  812c6c:	1950b03a 	or	r8,r3,r5
  812c70:	20000726 	beq	r4,zero,812c90 <__muldf3+0x4dc>
  812c74:	4006d07a 	srli	r3,r8,1
  812c78:	880497fa 	slli	r2,r17,31
  812c7c:	4200004c 	andi	r8,r8,1
  812c80:	8822d07a 	srli	r17,r17,1
  812c84:	1a10b03a 	or	r8,r3,r8
  812c88:	1210b03a 	or	r8,r2,r8
  812c8c:	5805883a 	mov	r2,r11
  812c90:	1140ffc4 	addi	r5,r2,1023
  812c94:	0140440e 	bge	zero,r5,812da8 <__muldf3+0x5f4>
  812c98:	40c001cc 	andi	r3,r8,7
  812c9c:	18000726 	beq	r3,zero,812cbc <__muldf3+0x508>
  812ca0:	40c003cc 	andi	r3,r8,15
  812ca4:	01000104 	movi	r4,4
  812ca8:	19000426 	beq	r3,r4,812cbc <__muldf3+0x508>
  812cac:	4107883a 	add	r3,r8,r4
  812cb0:	1a11803a 	cmpltu	r8,r3,r8
  812cb4:	8a23883a 	add	r17,r17,r8
  812cb8:	1811883a 	mov	r8,r3
  812cbc:	88c0402c 	andhi	r3,r17,256
  812cc0:	18000426 	beq	r3,zero,812cd4 <__muldf3+0x520>
  812cc4:	11410004 	addi	r5,r2,1024
  812cc8:	00bfc034 	movhi	r2,65280
  812ccc:	10bfffc4 	addi	r2,r2,-1
  812cd0:	88a2703a 	and	r17,r17,r2
  812cd4:	0081ff84 	movi	r2,2046
  812cd8:	117f6416 	blt	r2,r5,812a6c <__alt_mem_onchip_mem+0xff80aa6c>
  812cdc:	8828977a 	slli	r20,r17,29
  812ce0:	4010d0fa 	srli	r8,r8,3
  812ce4:	8822927a 	slli	r17,r17,9
  812ce8:	2881ffcc 	andi	r2,r5,2047
  812cec:	a228b03a 	or	r20,r20,r8
  812cf0:	880ad33a 	srli	r5,r17,12
  812cf4:	b02b883a 	mov	r21,r22
  812cf8:	003f0d06 	br	812930 <__alt_mem_onchip_mem+0xff80a930>
  812cfc:	8080022c 	andhi	r2,r16,8
  812d00:	10000926 	beq	r2,zero,812d28 <__muldf3+0x574>
  812d04:	8880022c 	andhi	r2,r17,8
  812d08:	1000071e 	bne	r2,zero,812d28 <__muldf3+0x574>
  812d0c:	00800434 	movhi	r2,16
  812d10:	89400234 	orhi	r5,r17,8
  812d14:	10bfffc4 	addi	r2,r2,-1
  812d18:	b82b883a 	mov	r21,r23
  812d1c:	288a703a 	and	r5,r5,r2
  812d20:	4029883a 	mov	r20,r8
  812d24:	003f6806 	br	812ac8 <__alt_mem_onchip_mem+0xff80aac8>
  812d28:	00800434 	movhi	r2,16
  812d2c:	81400234 	orhi	r5,r16,8
  812d30:	10bfffc4 	addi	r2,r2,-1
  812d34:	288a703a 	and	r5,r5,r2
  812d38:	003f6306 	br	812ac8 <__alt_mem_onchip_mem+0xff80aac8>
  812d3c:	147ff604 	addi	r17,r2,-40
  812d40:	3462983a 	sll	r17,r6,r17
  812d44:	0011883a 	mov	r8,zero
  812d48:	003f4406 	br	812a5c <__alt_mem_onchip_mem+0xff80aa5c>
  812d4c:	3009883a 	mov	r4,r6
  812d50:	d9800215 	stw	r6,8(sp)
  812d54:	da400115 	stw	r9,4(sp)
  812d58:	da800015 	stw	r10,0(sp)
  812d5c:	08070b40 	call	8070b4 <__clzsi2>
  812d60:	10800804 	addi	r2,r2,32
  812d64:	da800017 	ldw	r10,0(sp)
  812d68:	da400117 	ldw	r9,4(sp)
  812d6c:	d9800217 	ldw	r6,8(sp)
  812d70:	003f3006 	br	812a34 <__alt_mem_onchip_mem+0xff80aa34>
  812d74:	143ff604 	addi	r16,r2,-40
  812d78:	9c20983a 	sll	r16,r19,r16
  812d7c:	0029883a 	mov	r20,zero
  812d80:	003f1606 	br	8129dc <__alt_mem_onchip_mem+0xff80a9dc>
  812d84:	d9800215 	stw	r6,8(sp)
  812d88:	d9c00015 	stw	r7,0(sp)
  812d8c:	da400115 	stw	r9,4(sp)
  812d90:	08070b40 	call	8070b4 <__clzsi2>
  812d94:	10800804 	addi	r2,r2,32
  812d98:	da400117 	ldw	r9,4(sp)
  812d9c:	d9c00017 	ldw	r7,0(sp)
  812da0:	d9800217 	ldw	r6,8(sp)
  812da4:	003f0306 	br	8129b4 <__alt_mem_onchip_mem+0xff80a9b4>
  812da8:	00c00044 	movi	r3,1
  812dac:	1947c83a 	sub	r3,r3,r5
  812db0:	00800e04 	movi	r2,56
  812db4:	10feda16 	blt	r2,r3,812920 <__alt_mem_onchip_mem+0xff80a920>
  812db8:	008007c4 	movi	r2,31
  812dbc:	10c01b16 	blt	r2,r3,812e2c <__muldf3+0x678>
  812dc0:	00800804 	movi	r2,32
  812dc4:	10c5c83a 	sub	r2,r2,r3
  812dc8:	888a983a 	sll	r5,r17,r2
  812dcc:	40c8d83a 	srl	r4,r8,r3
  812dd0:	4084983a 	sll	r2,r8,r2
  812dd4:	88e2d83a 	srl	r17,r17,r3
  812dd8:	2906b03a 	or	r3,r5,r4
  812ddc:	1004c03a 	cmpne	r2,r2,zero
  812de0:	1886b03a 	or	r3,r3,r2
  812de4:	188001cc 	andi	r2,r3,7
  812de8:	10000726 	beq	r2,zero,812e08 <__muldf3+0x654>
  812dec:	188003cc 	andi	r2,r3,15
  812df0:	01000104 	movi	r4,4
  812df4:	11000426 	beq	r2,r4,812e08 <__muldf3+0x654>
  812df8:	1805883a 	mov	r2,r3
  812dfc:	10c00104 	addi	r3,r2,4
  812e00:	1885803a 	cmpltu	r2,r3,r2
  812e04:	88a3883a 	add	r17,r17,r2
  812e08:	8880202c 	andhi	r2,r17,128
  812e0c:	10001c26 	beq	r2,zero,812e80 <__muldf3+0x6cc>
  812e10:	b02b883a 	mov	r21,r22
  812e14:	00800044 	movi	r2,1
  812e18:	000b883a 	mov	r5,zero
  812e1c:	0029883a 	mov	r20,zero
  812e20:	003ec306 	br	812930 <__alt_mem_onchip_mem+0xff80a930>
  812e24:	5805883a 	mov	r2,r11
  812e28:	003f9906 	br	812c90 <__alt_mem_onchip_mem+0xff80ac90>
  812e2c:	00bff844 	movi	r2,-31
  812e30:	1145c83a 	sub	r2,r2,r5
  812e34:	8888d83a 	srl	r4,r17,r2
  812e38:	00800804 	movi	r2,32
  812e3c:	18801a26 	beq	r3,r2,812ea8 <__muldf3+0x6f4>
  812e40:	00801004 	movi	r2,64
  812e44:	10c5c83a 	sub	r2,r2,r3
  812e48:	8884983a 	sll	r2,r17,r2
  812e4c:	1204b03a 	or	r2,r2,r8
  812e50:	1004c03a 	cmpne	r2,r2,zero
  812e54:	2084b03a 	or	r2,r4,r2
  812e58:	144001cc 	andi	r17,r2,7
  812e5c:	88000d1e 	bne	r17,zero,812e94 <__muldf3+0x6e0>
  812e60:	000b883a 	mov	r5,zero
  812e64:	1028d0fa 	srli	r20,r2,3
  812e68:	b02b883a 	mov	r21,r22
  812e6c:	0005883a 	mov	r2,zero
  812e70:	a468b03a 	or	r20,r20,r17
  812e74:	003eae06 	br	812930 <__alt_mem_onchip_mem+0xff80a930>
  812e78:	1007883a 	mov	r3,r2
  812e7c:	0023883a 	mov	r17,zero
  812e80:	880a927a 	slli	r5,r17,9
  812e84:	1805883a 	mov	r2,r3
  812e88:	8822977a 	slli	r17,r17,29
  812e8c:	280ad33a 	srli	r5,r5,12
  812e90:	003ff406 	br	812e64 <__alt_mem_onchip_mem+0xff80ae64>
  812e94:	10c003cc 	andi	r3,r2,15
  812e98:	01000104 	movi	r4,4
  812e9c:	193ff626 	beq	r3,r4,812e78 <__alt_mem_onchip_mem+0xff80ae78>
  812ea0:	0023883a 	mov	r17,zero
  812ea4:	003fd506 	br	812dfc <__alt_mem_onchip_mem+0xff80adfc>
  812ea8:	0005883a 	mov	r2,zero
  812eac:	003fe706 	br	812e4c <__alt_mem_onchip_mem+0xff80ae4c>
  812eb0:	00800434 	movhi	r2,16
  812eb4:	89400234 	orhi	r5,r17,8
  812eb8:	10bfffc4 	addi	r2,r2,-1
  812ebc:	b02b883a 	mov	r21,r22
  812ec0:	288a703a 	and	r5,r5,r2
  812ec4:	4029883a 	mov	r20,r8
  812ec8:	003eff06 	br	812ac8 <__alt_mem_onchip_mem+0xff80aac8>

00812ecc <__fixdfsi>:
  812ecc:	280cd53a 	srli	r6,r5,20
  812ed0:	00c00434 	movhi	r3,16
  812ed4:	18ffffc4 	addi	r3,r3,-1
  812ed8:	3181ffcc 	andi	r6,r6,2047
  812edc:	01c0ff84 	movi	r7,1022
  812ee0:	28c6703a 	and	r3,r5,r3
  812ee4:	280ad7fa 	srli	r5,r5,31
  812ee8:	3980120e 	bge	r7,r6,812f34 <__fixdfsi+0x68>
  812eec:	00810744 	movi	r2,1053
  812ef0:	11800c16 	blt	r2,r6,812f24 <__fixdfsi+0x58>
  812ef4:	00810cc4 	movi	r2,1075
  812ef8:	1185c83a 	sub	r2,r2,r6
  812efc:	01c007c4 	movi	r7,31
  812f00:	18c00434 	orhi	r3,r3,16
  812f04:	38800d16 	blt	r7,r2,812f3c <__fixdfsi+0x70>
  812f08:	31befb44 	addi	r6,r6,-1043
  812f0c:	2084d83a 	srl	r2,r4,r2
  812f10:	1986983a 	sll	r3,r3,r6
  812f14:	1884b03a 	or	r2,r3,r2
  812f18:	28000726 	beq	r5,zero,812f38 <__fixdfsi+0x6c>
  812f1c:	0085c83a 	sub	r2,zero,r2
  812f20:	f800283a 	ret
  812f24:	00a00034 	movhi	r2,32768
  812f28:	10bfffc4 	addi	r2,r2,-1
  812f2c:	2885883a 	add	r2,r5,r2
  812f30:	f800283a 	ret
  812f34:	0005883a 	mov	r2,zero
  812f38:	f800283a 	ret
  812f3c:	008104c4 	movi	r2,1043
  812f40:	1185c83a 	sub	r2,r2,r6
  812f44:	1884d83a 	srl	r2,r3,r2
  812f48:	003ff306 	br	812f18 <__alt_mem_onchip_mem+0xff80af18>

00812f4c <__floatunsidf>:
  812f4c:	defffe04 	addi	sp,sp,-8
  812f50:	dc000015 	stw	r16,0(sp)
  812f54:	dfc00115 	stw	ra,4(sp)
  812f58:	2021883a 	mov	r16,r4
  812f5c:	20002226 	beq	r4,zero,812fe8 <__floatunsidf+0x9c>
  812f60:	08070b40 	call	8070b4 <__clzsi2>
  812f64:	01010784 	movi	r4,1054
  812f68:	2089c83a 	sub	r4,r4,r2
  812f6c:	01810cc4 	movi	r6,1075
  812f70:	310dc83a 	sub	r6,r6,r4
  812f74:	00c007c4 	movi	r3,31
  812f78:	1980120e 	bge	r3,r6,812fc4 <__floatunsidf+0x78>
  812f7c:	00c104c4 	movi	r3,1043
  812f80:	1907c83a 	sub	r3,r3,r4
  812f84:	80ca983a 	sll	r5,r16,r3
  812f88:	00800434 	movhi	r2,16
  812f8c:	10bfffc4 	addi	r2,r2,-1
  812f90:	2101ffcc 	andi	r4,r4,2047
  812f94:	0021883a 	mov	r16,zero
  812f98:	288a703a 	and	r5,r5,r2
  812f9c:	2008953a 	slli	r4,r4,20
  812fa0:	00c00434 	movhi	r3,16
  812fa4:	18ffffc4 	addi	r3,r3,-1
  812fa8:	28c6703a 	and	r3,r5,r3
  812fac:	8005883a 	mov	r2,r16
  812fb0:	1906b03a 	or	r3,r3,r4
  812fb4:	dfc00117 	ldw	ra,4(sp)
  812fb8:	dc000017 	ldw	r16,0(sp)
  812fbc:	dec00204 	addi	sp,sp,8
  812fc0:	f800283a 	ret
  812fc4:	00c002c4 	movi	r3,11
  812fc8:	188bc83a 	sub	r5,r3,r2
  812fcc:	814ad83a 	srl	r5,r16,r5
  812fd0:	00c00434 	movhi	r3,16
  812fd4:	18ffffc4 	addi	r3,r3,-1
  812fd8:	81a0983a 	sll	r16,r16,r6
  812fdc:	2101ffcc 	andi	r4,r4,2047
  812fe0:	28ca703a 	and	r5,r5,r3
  812fe4:	003fed06 	br	812f9c <__alt_mem_onchip_mem+0xff80af9c>
  812fe8:	0009883a 	mov	r4,zero
  812fec:	000b883a 	mov	r5,zero
  812ff0:	003fea06 	br	812f9c <__alt_mem_onchip_mem+0xff80af9c>

00812ff4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812ff4:	defff504 	addi	sp,sp,-44
  812ff8:	df000a15 	stw	fp,40(sp)
  812ffc:	df000a04 	addi	fp,sp,40
  813000:	e13ffc15 	stw	r4,-16(fp)
  813004:	e17ffd15 	stw	r5,-12(fp)
  813008:	e1bffe15 	stw	r6,-8(fp)
  81300c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  813010:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813014:	d0a77f17 	ldw	r2,-25092(gp)
  
  if (alt_ticks_per_second ())
  813018:	10003c26 	beq	r2,zero,81310c <alt_alarm_start+0x118>
  {
    if (alarm)
  81301c:	e0bffc17 	ldw	r2,-16(fp)
  813020:	10003826 	beq	r2,zero,813104 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  813024:	e0bffc17 	ldw	r2,-16(fp)
  813028:	e0fffe17 	ldw	r3,-8(fp)
  81302c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  813030:	e0bffc17 	ldw	r2,-16(fp)
  813034:	e0ffff17 	ldw	r3,-4(fp)
  813038:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81303c:	0005303a 	rdctl	r2,status
  813040:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813044:	e0fff917 	ldw	r3,-28(fp)
  813048:	00bfff84 	movi	r2,-2
  81304c:	1884703a 	and	r2,r3,r2
  813050:	1001703a 	wrctl	status,r2
  
  return context;
  813054:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  813058:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81305c:	d0a78017 	ldw	r2,-25088(gp)
      
      current_nticks = alt_nticks();
  813060:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  813064:	e0fffd17 	ldw	r3,-12(fp)
  813068:	e0bff617 	ldw	r2,-40(fp)
  81306c:	1885883a 	add	r2,r3,r2
  813070:	10c00044 	addi	r3,r2,1
  813074:	e0bffc17 	ldw	r2,-16(fp)
  813078:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81307c:	e0bffc17 	ldw	r2,-16(fp)
  813080:	10c00217 	ldw	r3,8(r2)
  813084:	e0bff617 	ldw	r2,-40(fp)
  813088:	1880042e 	bgeu	r3,r2,81309c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  81308c:	e0bffc17 	ldw	r2,-16(fp)
  813090:	00c00044 	movi	r3,1
  813094:	10c00405 	stb	r3,16(r2)
  813098:	00000206 	br	8130a4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  81309c:	e0bffc17 	ldw	r2,-16(fp)
  8130a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8130a4:	e0bffc17 	ldw	r2,-16(fp)
  8130a8:	d0e01604 	addi	r3,gp,-32680
  8130ac:	e0fffa15 	stw	r3,-24(fp)
  8130b0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8130b4:	e0bffb17 	ldw	r2,-20(fp)
  8130b8:	e0fffa17 	ldw	r3,-24(fp)
  8130bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8130c0:	e0bffa17 	ldw	r2,-24(fp)
  8130c4:	10c00017 	ldw	r3,0(r2)
  8130c8:	e0bffb17 	ldw	r2,-20(fp)
  8130cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8130d0:	e0bffa17 	ldw	r2,-24(fp)
  8130d4:	10800017 	ldw	r2,0(r2)
  8130d8:	e0fffb17 	ldw	r3,-20(fp)
  8130dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8130e0:	e0bffa17 	ldw	r2,-24(fp)
  8130e4:	e0fffb17 	ldw	r3,-20(fp)
  8130e8:	10c00015 	stw	r3,0(r2)
  8130ec:	e0bff817 	ldw	r2,-32(fp)
  8130f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8130f4:	e0bff717 	ldw	r2,-36(fp)
  8130f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8130fc:	0005883a 	mov	r2,zero
  813100:	00000306 	br	813110 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  813104:	00bffa84 	movi	r2,-22
  813108:	00000106 	br	813110 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  81310c:	00bfde84 	movi	r2,-134
  }
}
  813110:	e037883a 	mov	sp,fp
  813114:	df000017 	ldw	fp,0(sp)
  813118:	dec00104 	addi	sp,sp,4
  81311c:	f800283a 	ret

00813120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813120:	defffe04 	addi	sp,sp,-8
  813124:	dfc00115 	stw	ra,4(sp)
  813128:	df000015 	stw	fp,0(sp)
  81312c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813130:	d0a01317 	ldw	r2,-32692(gp)
  813134:	10000326 	beq	r2,zero,813144 <alt_get_errno+0x24>
  813138:	d0a01317 	ldw	r2,-32692(gp)
  81313c:	103ee83a 	callr	r2
  813140:	00000106 	br	813148 <alt_get_errno+0x28>
  813144:	d0a77404 	addi	r2,gp,-25136
}
  813148:	e037883a 	mov	sp,fp
  81314c:	dfc00117 	ldw	ra,4(sp)
  813150:	df000017 	ldw	fp,0(sp)
  813154:	dec00204 	addi	sp,sp,8
  813158:	f800283a 	ret

0081315c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  81315c:	defffb04 	addi	sp,sp,-20
  813160:	dfc00415 	stw	ra,16(sp)
  813164:	df000315 	stw	fp,12(sp)
  813168:	df000304 	addi	fp,sp,12
  81316c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  813170:	e0bfff17 	ldw	r2,-4(fp)
  813174:	10000616 	blt	r2,zero,813190 <close+0x34>
  813178:	e0bfff17 	ldw	r2,-4(fp)
  81317c:	10c00324 	muli	r3,r2,12
  813180:	008020b4 	movhi	r2,130
  813184:	10a06c04 	addi	r2,r2,-32336
  813188:	1885883a 	add	r2,r3,r2
  81318c:	00000106 	br	813194 <close+0x38>
  813190:	0005883a 	mov	r2,zero
  813194:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  813198:	e0bffd17 	ldw	r2,-12(fp)
  81319c:	10001926 	beq	r2,zero,813204 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8131a0:	e0bffd17 	ldw	r2,-12(fp)
  8131a4:	10800017 	ldw	r2,0(r2)
  8131a8:	10800417 	ldw	r2,16(r2)
  8131ac:	10000626 	beq	r2,zero,8131c8 <close+0x6c>
  8131b0:	e0bffd17 	ldw	r2,-12(fp)
  8131b4:	10800017 	ldw	r2,0(r2)
  8131b8:	10800417 	ldw	r2,16(r2)
  8131bc:	e13ffd17 	ldw	r4,-12(fp)
  8131c0:	103ee83a 	callr	r2
  8131c4:	00000106 	br	8131cc <close+0x70>
  8131c8:	0005883a 	mov	r2,zero
  8131cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8131d0:	e13fff17 	ldw	r4,-4(fp)
  8131d4:	0813bf00 	call	813bf0 <alt_release_fd>
    if (rval < 0)
  8131d8:	e0bffe17 	ldw	r2,-8(fp)
  8131dc:	1000070e 	bge	r2,zero,8131fc <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8131e0:	08131200 	call	813120 <alt_get_errno>
  8131e4:	1007883a 	mov	r3,r2
  8131e8:	e0bffe17 	ldw	r2,-8(fp)
  8131ec:	0085c83a 	sub	r2,zero,r2
  8131f0:	18800015 	stw	r2,0(r3)
      return -1;
  8131f4:	00bfffc4 	movi	r2,-1
  8131f8:	00000706 	br	813218 <close+0xbc>
    }
    return 0;
  8131fc:	0005883a 	mov	r2,zero
  813200:	00000506 	br	813218 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  813204:	08131200 	call	813120 <alt_get_errno>
  813208:	1007883a 	mov	r3,r2
  81320c:	00801444 	movi	r2,81
  813210:	18800015 	stw	r2,0(r3)
    return -1;
  813214:	00bfffc4 	movi	r2,-1
  }
}
  813218:	e037883a 	mov	sp,fp
  81321c:	dfc00117 	ldw	ra,4(sp)
  813220:	df000017 	ldw	fp,0(sp)
  813224:	dec00204 	addi	sp,sp,8
  813228:	f800283a 	ret

0081322c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81322c:	defffc04 	addi	sp,sp,-16
  813230:	df000315 	stw	fp,12(sp)
  813234:	df000304 	addi	fp,sp,12
  813238:	e13ffd15 	stw	r4,-12(fp)
  81323c:	e17ffe15 	stw	r5,-8(fp)
  813240:	e1bfff15 	stw	r6,-4(fp)
  return len;
  813244:	e0bfff17 	ldw	r2,-4(fp)
}
  813248:	e037883a 	mov	sp,fp
  81324c:	df000017 	ldw	fp,0(sp)
  813250:	dec00104 	addi	sp,sp,4
  813254:	f800283a 	ret

00813258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813258:	defffe04 	addi	sp,sp,-8
  81325c:	dfc00115 	stw	ra,4(sp)
  813260:	df000015 	stw	fp,0(sp)
  813264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813268:	d0a01317 	ldw	r2,-32692(gp)
  81326c:	10000326 	beq	r2,zero,81327c <alt_get_errno+0x24>
  813270:	d0a01317 	ldw	r2,-32692(gp)
  813274:	103ee83a 	callr	r2
  813278:	00000106 	br	813280 <alt_get_errno+0x28>
  81327c:	d0a77404 	addi	r2,gp,-25136
}
  813280:	e037883a 	mov	sp,fp
  813284:	dfc00117 	ldw	ra,4(sp)
  813288:	df000017 	ldw	fp,0(sp)
  81328c:	dec00204 	addi	sp,sp,8
  813290:	f800283a 	ret

00813294 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  813294:	defffb04 	addi	sp,sp,-20
  813298:	dfc00415 	stw	ra,16(sp)
  81329c:	df000315 	stw	fp,12(sp)
  8132a0:	df000304 	addi	fp,sp,12
  8132a4:	e13ffe15 	stw	r4,-8(fp)
  8132a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8132ac:	e0bffe17 	ldw	r2,-8(fp)
  8132b0:	10000616 	blt	r2,zero,8132cc <fstat+0x38>
  8132b4:	e0bffe17 	ldw	r2,-8(fp)
  8132b8:	10c00324 	muli	r3,r2,12
  8132bc:	008020b4 	movhi	r2,130
  8132c0:	10a06c04 	addi	r2,r2,-32336
  8132c4:	1885883a 	add	r2,r3,r2
  8132c8:	00000106 	br	8132d0 <fstat+0x3c>
  8132cc:	0005883a 	mov	r2,zero
  8132d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8132d4:	e0bffd17 	ldw	r2,-12(fp)
  8132d8:	10001026 	beq	r2,zero,81331c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8132dc:	e0bffd17 	ldw	r2,-12(fp)
  8132e0:	10800017 	ldw	r2,0(r2)
  8132e4:	10800817 	ldw	r2,32(r2)
  8132e8:	10000726 	beq	r2,zero,813308 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  8132ec:	e0bffd17 	ldw	r2,-12(fp)
  8132f0:	10800017 	ldw	r2,0(r2)
  8132f4:	10800817 	ldw	r2,32(r2)
  8132f8:	e17fff17 	ldw	r5,-4(fp)
  8132fc:	e13ffd17 	ldw	r4,-12(fp)
  813300:	103ee83a 	callr	r2
  813304:	00000a06 	br	813330 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  813308:	e0bfff17 	ldw	r2,-4(fp)
  81330c:	00c80004 	movi	r3,8192
  813310:	10c00115 	stw	r3,4(r2)
      return 0;
  813314:	0005883a 	mov	r2,zero
  813318:	00000506 	br	813330 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81331c:	08132580 	call	813258 <alt_get_errno>
  813320:	1007883a 	mov	r3,r2
  813324:	00801444 	movi	r2,81
  813328:	18800015 	stw	r2,0(r3)
    return -1;
  81332c:	00bfffc4 	movi	r2,-1
  }
}
  813330:	e037883a 	mov	sp,fp
  813334:	dfc00117 	ldw	ra,4(sp)
  813338:	df000017 	ldw	fp,0(sp)
  81333c:	dec00204 	addi	sp,sp,8
  813340:	f800283a 	ret

00813344 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  813344:	defff004 	addi	sp,sp,-64
  813348:	df000f15 	stw	fp,60(sp)
  81334c:	df000f04 	addi	fp,sp,60
  813350:	e13ffd15 	stw	r4,-12(fp)
  813354:	e17ffe15 	stw	r5,-8(fp)
  813358:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  81335c:	00bffa84 	movi	r2,-22
  813360:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  813364:	e0bffd17 	ldw	r2,-12(fp)
  813368:	10800828 	cmpgeui	r2,r2,32
  81336c:	1000501e 	bne	r2,zero,8134b0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813370:	0005303a 	rdctl	r2,status
  813374:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813378:	e0fff617 	ldw	r3,-40(fp)
  81337c:	00bfff84 	movi	r2,-2
  813380:	1884703a 	and	r2,r3,r2
  813384:	1001703a 	wrctl	status,r2
  
  return context;
  813388:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81338c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  813390:	008020b4 	movhi	r2,130
  813394:	10ad4d04 	addi	r2,r2,-19148
  813398:	e0fffd17 	ldw	r3,-12(fp)
  81339c:	180690fa 	slli	r3,r3,3
  8133a0:	10c5883a 	add	r2,r2,r3
  8133a4:	e0ffff17 	ldw	r3,-4(fp)
  8133a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  8133ac:	008020b4 	movhi	r2,130
  8133b0:	10ad4d04 	addi	r2,r2,-19148
  8133b4:	e0fffd17 	ldw	r3,-12(fp)
  8133b8:	180690fa 	slli	r3,r3,3
  8133bc:	10c5883a 	add	r2,r2,r3
  8133c0:	10800104 	addi	r2,r2,4
  8133c4:	e0fffe17 	ldw	r3,-8(fp)
  8133c8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8133cc:	e0bfff17 	ldw	r2,-4(fp)
  8133d0:	10001926 	beq	r2,zero,813438 <alt_irq_register+0xf4>
  8133d4:	e0bffd17 	ldw	r2,-12(fp)
  8133d8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133dc:	0005303a 	rdctl	r2,status
  8133e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133e4:	e0fff717 	ldw	r3,-36(fp)
  8133e8:	00bfff84 	movi	r2,-2
  8133ec:	1884703a 	and	r2,r3,r2
  8133f0:	1001703a 	wrctl	status,r2
  
  return context;
  8133f4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8133f8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8133fc:	00c00044 	movi	r3,1
  813400:	e0bff217 	ldw	r2,-56(fp)
  813404:	1884983a 	sll	r2,r3,r2
  813408:	1007883a 	mov	r3,r2
  81340c:	d0a77b17 	ldw	r2,-25108(gp)
  813410:	1884b03a 	or	r2,r3,r2
  813414:	d0a77b15 	stw	r2,-25108(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813418:	d0a77b17 	ldw	r2,-25108(gp)
  81341c:	100170fa 	wrctl	ienable,r2
  813420:	e0bff817 	ldw	r2,-32(fp)
  813424:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813428:	e0bff917 	ldw	r2,-28(fp)
  81342c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813430:	0005883a 	mov	r2,zero
  813434:	00001906 	br	81349c <alt_irq_register+0x158>
  813438:	e0bffd17 	ldw	r2,-12(fp)
  81343c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813440:	0005303a 	rdctl	r2,status
  813444:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813448:	e0fffa17 	ldw	r3,-24(fp)
  81344c:	00bfff84 	movi	r2,-2
  813450:	1884703a 	and	r2,r3,r2
  813454:	1001703a 	wrctl	status,r2
  
  return context;
  813458:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81345c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  813460:	00c00044 	movi	r3,1
  813464:	e0bff417 	ldw	r2,-48(fp)
  813468:	1884983a 	sll	r2,r3,r2
  81346c:	0084303a 	nor	r2,zero,r2
  813470:	1007883a 	mov	r3,r2
  813474:	d0a77b17 	ldw	r2,-25108(gp)
  813478:	1884703a 	and	r2,r3,r2
  81347c:	d0a77b15 	stw	r2,-25108(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813480:	d0a77b17 	ldw	r2,-25108(gp)
  813484:	100170fa 	wrctl	ienable,r2
  813488:	e0bffb17 	ldw	r2,-20(fp)
  81348c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813490:	e0bffc17 	ldw	r2,-16(fp)
  813494:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813498:	0005883a 	mov	r2,zero
  81349c:	e0bff115 	stw	r2,-60(fp)
  8134a0:	e0bff317 	ldw	r2,-52(fp)
  8134a4:	e0bff515 	stw	r2,-44(fp)
  8134a8:	e0bff517 	ldw	r2,-44(fp)
  8134ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8134b0:	e0bff117 	ldw	r2,-60(fp)
}
  8134b4:	e037883a 	mov	sp,fp
  8134b8:	df000017 	ldw	fp,0(sp)
  8134bc:	dec00104 	addi	sp,sp,4
  8134c0:	f800283a 	ret

008134c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8134c4:	defffe04 	addi	sp,sp,-8
  8134c8:	dfc00115 	stw	ra,4(sp)
  8134cc:	df000015 	stw	fp,0(sp)
  8134d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8134d4:	d0a01317 	ldw	r2,-32692(gp)
  8134d8:	10000326 	beq	r2,zero,8134e8 <alt_get_errno+0x24>
  8134dc:	d0a01317 	ldw	r2,-32692(gp)
  8134e0:	103ee83a 	callr	r2
  8134e4:	00000106 	br	8134ec <alt_get_errno+0x28>
  8134e8:	d0a77404 	addi	r2,gp,-25136
}
  8134ec:	e037883a 	mov	sp,fp
  8134f0:	dfc00117 	ldw	ra,4(sp)
  8134f4:	df000017 	ldw	fp,0(sp)
  8134f8:	dec00204 	addi	sp,sp,8
  8134fc:	f800283a 	ret

00813500 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  813500:	deffed04 	addi	sp,sp,-76
  813504:	dfc01215 	stw	ra,72(sp)
  813508:	df001115 	stw	fp,68(sp)
  81350c:	df001104 	addi	fp,sp,68
  813510:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813514:	e0bfff17 	ldw	r2,-4(fp)
  813518:	10000616 	blt	r2,zero,813534 <isatty+0x34>
  81351c:	e0bfff17 	ldw	r2,-4(fp)
  813520:	10c00324 	muli	r3,r2,12
  813524:	008020b4 	movhi	r2,130
  813528:	10a06c04 	addi	r2,r2,-32336
  81352c:	1885883a 	add	r2,r3,r2
  813530:	00000106 	br	813538 <isatty+0x38>
  813534:	0005883a 	mov	r2,zero
  813538:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  81353c:	e0bfef17 	ldw	r2,-68(fp)
  813540:	10000e26 	beq	r2,zero,81357c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  813544:	e0bfef17 	ldw	r2,-68(fp)
  813548:	10800017 	ldw	r2,0(r2)
  81354c:	10800817 	ldw	r2,32(r2)
  813550:	1000021e 	bne	r2,zero,81355c <isatty+0x5c>
    {
      return 1;
  813554:	00800044 	movi	r2,1
  813558:	00000d06 	br	813590 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81355c:	e0bff004 	addi	r2,fp,-64
  813560:	100b883a 	mov	r5,r2
  813564:	e13fff17 	ldw	r4,-4(fp)
  813568:	08132940 	call	813294 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  81356c:	e0bff117 	ldw	r2,-60(fp)
  813570:	10880020 	cmpeqi	r2,r2,8192
  813574:	10803fcc 	andi	r2,r2,255
  813578:	00000506 	br	813590 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81357c:	08134c40 	call	8134c4 <alt_get_errno>
  813580:	1007883a 	mov	r3,r2
  813584:	00801444 	movi	r2,81
  813588:	18800015 	stw	r2,0(r3)
    return 0;
  81358c:	0005883a 	mov	r2,zero
  }
}
  813590:	e037883a 	mov	sp,fp
  813594:	dfc00117 	ldw	ra,4(sp)
  813598:	df000017 	ldw	fp,0(sp)
  81359c:	dec00204 	addi	sp,sp,8
  8135a0:	f800283a 	ret

008135a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8135a4:	defffc04 	addi	sp,sp,-16
  8135a8:	df000315 	stw	fp,12(sp)
  8135ac:	df000304 	addi	fp,sp,12
  8135b0:	e13ffd15 	stw	r4,-12(fp)
  8135b4:	e17ffe15 	stw	r5,-8(fp)
  8135b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8135bc:	e0fffe17 	ldw	r3,-8(fp)
  8135c0:	e0bffd17 	ldw	r2,-12(fp)
  8135c4:	18800c26 	beq	r3,r2,8135f8 <alt_load_section+0x54>
  {
    while( to != end )
  8135c8:	00000806 	br	8135ec <alt_load_section+0x48>
    {
      *to++ = *from++;
  8135cc:	e0bffe17 	ldw	r2,-8(fp)
  8135d0:	10c00104 	addi	r3,r2,4
  8135d4:	e0fffe15 	stw	r3,-8(fp)
  8135d8:	e0fffd17 	ldw	r3,-12(fp)
  8135dc:	19000104 	addi	r4,r3,4
  8135e0:	e13ffd15 	stw	r4,-12(fp)
  8135e4:	18c00017 	ldw	r3,0(r3)
  8135e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8135ec:	e0fffe17 	ldw	r3,-8(fp)
  8135f0:	e0bfff17 	ldw	r2,-4(fp)
  8135f4:	18bff51e 	bne	r3,r2,8135cc <__alt_mem_onchip_mem+0xff80b5cc>
    {
      *to++ = *from++;
    }
  }
}
  8135f8:	0001883a 	nop
  8135fc:	e037883a 	mov	sp,fp
  813600:	df000017 	ldw	fp,0(sp)
  813604:	dec00104 	addi	sp,sp,4
  813608:	f800283a 	ret

0081360c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  81360c:	defffe04 	addi	sp,sp,-8
  813610:	dfc00115 	stw	ra,4(sp)
  813614:	df000015 	stw	fp,0(sp)
  813618:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  81361c:	018020b4 	movhi	r6,130
  813620:	31a57704 	addi	r6,r6,-27172
  813624:	01402074 	movhi	r5,129
  813628:	295e3904 	addi	r5,r5,30948
  81362c:	010020b4 	movhi	r4,130
  813630:	21257704 	addi	r4,r4,-27172
  813634:	08135a40 	call	8135a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  813638:	01802034 	movhi	r6,128
  81363c:	31809104 	addi	r6,r6,580
  813640:	01402034 	movhi	r5,128
  813644:	29400804 	addi	r5,r5,32
  813648:	01002034 	movhi	r4,128
  81364c:	21000804 	addi	r4,r4,32
  813650:	08135a40 	call	8135a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  813654:	01802074 	movhi	r6,129
  813658:	319e3904 	addi	r6,r6,30948
  81365c:	01402074 	movhi	r5,129
  813660:	295ca504 	addi	r5,r5,29332
  813664:	01002074 	movhi	r4,129
  813668:	211ca504 	addi	r4,r4,29332
  81366c:	08135a40 	call	8135a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  813670:	08165780 	call	816578 <alt_dcache_flush_all>
  alt_icache_flush_all();
  813674:	081699c0 	call	81699c <alt_icache_flush_all>
}
  813678:	0001883a 	nop
  81367c:	e037883a 	mov	sp,fp
  813680:	dfc00117 	ldw	ra,4(sp)
  813684:	df000017 	ldw	fp,0(sp)
  813688:	dec00204 	addi	sp,sp,8
  81368c:	f800283a 	ret

00813690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813690:	defffe04 	addi	sp,sp,-8
  813694:	dfc00115 	stw	ra,4(sp)
  813698:	df000015 	stw	fp,0(sp)
  81369c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8136a0:	d0a01317 	ldw	r2,-32692(gp)
  8136a4:	10000326 	beq	r2,zero,8136b4 <alt_get_errno+0x24>
  8136a8:	d0a01317 	ldw	r2,-32692(gp)
  8136ac:	103ee83a 	callr	r2
  8136b0:	00000106 	br	8136b8 <alt_get_errno+0x28>
  8136b4:	d0a77404 	addi	r2,gp,-25136
}
  8136b8:	e037883a 	mov	sp,fp
  8136bc:	dfc00117 	ldw	ra,4(sp)
  8136c0:	df000017 	ldw	fp,0(sp)
  8136c4:	dec00204 	addi	sp,sp,8
  8136c8:	f800283a 	ret

008136cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8136cc:	defff904 	addi	sp,sp,-28
  8136d0:	dfc00615 	stw	ra,24(sp)
  8136d4:	df000515 	stw	fp,20(sp)
  8136d8:	df000504 	addi	fp,sp,20
  8136dc:	e13ffd15 	stw	r4,-12(fp)
  8136e0:	e17ffe15 	stw	r5,-8(fp)
  8136e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8136e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8136ec:	e0bffd17 	ldw	r2,-12(fp)
  8136f0:	10000616 	blt	r2,zero,81370c <lseek+0x40>
  8136f4:	e0bffd17 	ldw	r2,-12(fp)
  8136f8:	10c00324 	muli	r3,r2,12
  8136fc:	008020b4 	movhi	r2,130
  813700:	10a06c04 	addi	r2,r2,-32336
  813704:	1885883a 	add	r2,r3,r2
  813708:	00000106 	br	813710 <lseek+0x44>
  81370c:	0005883a 	mov	r2,zero
  813710:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  813714:	e0bffc17 	ldw	r2,-16(fp)
  813718:	10001026 	beq	r2,zero,81375c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  81371c:	e0bffc17 	ldw	r2,-16(fp)
  813720:	10800017 	ldw	r2,0(r2)
  813724:	10800717 	ldw	r2,28(r2)
  813728:	10000926 	beq	r2,zero,813750 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81372c:	e0bffc17 	ldw	r2,-16(fp)
  813730:	10800017 	ldw	r2,0(r2)
  813734:	10800717 	ldw	r2,28(r2)
  813738:	e1bfff17 	ldw	r6,-4(fp)
  81373c:	e17ffe17 	ldw	r5,-8(fp)
  813740:	e13ffc17 	ldw	r4,-16(fp)
  813744:	103ee83a 	callr	r2
  813748:	e0bffb15 	stw	r2,-20(fp)
  81374c:	00000506 	br	813764 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  813750:	00bfde84 	movi	r2,-134
  813754:	e0bffb15 	stw	r2,-20(fp)
  813758:	00000206 	br	813764 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  81375c:	00bfebc4 	movi	r2,-81
  813760:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  813764:	e0bffb17 	ldw	r2,-20(fp)
  813768:	1000070e 	bge	r2,zero,813788 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  81376c:	08136900 	call	813690 <alt_get_errno>
  813770:	1007883a 	mov	r3,r2
  813774:	e0bffb17 	ldw	r2,-20(fp)
  813778:	0085c83a 	sub	r2,zero,r2
  81377c:	18800015 	stw	r2,0(r3)
    rc = -1;
  813780:	00bfffc4 	movi	r2,-1
  813784:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  813788:	e0bffb17 	ldw	r2,-20(fp)
}
  81378c:	e037883a 	mov	sp,fp
  813790:	dfc00117 	ldw	ra,4(sp)
  813794:	df000017 	ldw	fp,0(sp)
  813798:	dec00204 	addi	sp,sp,8
  81379c:	f800283a 	ret

008137a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8137a0:	defffd04 	addi	sp,sp,-12
  8137a4:	dfc00215 	stw	ra,8(sp)
  8137a8:	df000115 	stw	fp,4(sp)
  8137ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8137b0:	0009883a 	mov	r4,zero
  8137b4:	08140400 	call	814040 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8137b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8137bc:	08140780 	call	814078 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8137c0:	01802074 	movhi	r6,129
  8137c4:	319d8b04 	addi	r6,r6,30252
  8137c8:	01402074 	movhi	r5,129
  8137cc:	295d8b04 	addi	r5,r5,30252
  8137d0:	01002074 	movhi	r4,129
  8137d4:	211d8b04 	addi	r4,r4,30252
  8137d8:	0816d340 	call	816d34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8137dc:	08166a00 	call	8166a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8137e0:	01002074 	movhi	r4,129
  8137e4:	2119c004 	addi	r4,r4,26368
  8137e8:	0816f000 	call	816f00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8137ec:	d0a77c17 	ldw	r2,-25104(gp)
  8137f0:	d0e77d17 	ldw	r3,-25100(gp)
  8137f4:	d1277e17 	ldw	r4,-25096(gp)
  8137f8:	200d883a 	mov	r6,r4
  8137fc:	180b883a 	mov	r5,r3
  813800:	1009883a 	mov	r4,r2
  813804:	080038c0 	call	80038c <main>
  813808:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  81380c:	01000044 	movi	r4,1
  813810:	081315c0 	call	81315c <close>
  exit (result);
  813814:	e13fff17 	ldw	r4,-4(fp)
  813818:	0816f140 	call	816f14 <exit>

0081381c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  81381c:	defffe04 	addi	sp,sp,-8
  813820:	df000115 	stw	fp,4(sp)
  813824:	df000104 	addi	fp,sp,4
  813828:	e13fff15 	stw	r4,-4(fp)
}
  81382c:	0001883a 	nop
  813830:	e037883a 	mov	sp,fp
  813834:	df000017 	ldw	fp,0(sp)
  813838:	dec00104 	addi	sp,sp,4
  81383c:	f800283a 	ret

00813840 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  813840:	defffe04 	addi	sp,sp,-8
  813844:	df000115 	stw	fp,4(sp)
  813848:	df000104 	addi	fp,sp,4
  81384c:	e13fff15 	stw	r4,-4(fp)
}
  813850:	0001883a 	nop
  813854:	e037883a 	mov	sp,fp
  813858:	df000017 	ldw	fp,0(sp)
  81385c:	dec00104 	addi	sp,sp,4
  813860:	f800283a 	ret

00813864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813864:	defffe04 	addi	sp,sp,-8
  813868:	dfc00115 	stw	ra,4(sp)
  81386c:	df000015 	stw	fp,0(sp)
  813870:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813874:	d0a01317 	ldw	r2,-32692(gp)
  813878:	10000326 	beq	r2,zero,813888 <alt_get_errno+0x24>
  81387c:	d0a01317 	ldw	r2,-32692(gp)
  813880:	103ee83a 	callr	r2
  813884:	00000106 	br	81388c <alt_get_errno+0x28>
  813888:	d0a77404 	addi	r2,gp,-25136
}
  81388c:	e037883a 	mov	sp,fp
  813890:	dfc00117 	ldw	ra,4(sp)
  813894:	df000017 	ldw	fp,0(sp)
  813898:	dec00204 	addi	sp,sp,8
  81389c:	f800283a 	ret

008138a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8138a0:	defffd04 	addi	sp,sp,-12
  8138a4:	df000215 	stw	fp,8(sp)
  8138a8:	df000204 	addi	fp,sp,8
  8138ac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8138b0:	e0bfff17 	ldw	r2,-4(fp)
  8138b4:	10800217 	ldw	r2,8(r2)
  8138b8:	10d00034 	orhi	r3,r2,16384
  8138bc:	e0bfff17 	ldw	r2,-4(fp)
  8138c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8138c4:	e03ffe15 	stw	zero,-8(fp)
  8138c8:	00001d06 	br	813940 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8138cc:	008020b4 	movhi	r2,130
  8138d0:	10a06c04 	addi	r2,r2,-32336
  8138d4:	e0fffe17 	ldw	r3,-8(fp)
  8138d8:	18c00324 	muli	r3,r3,12
  8138dc:	10c5883a 	add	r2,r2,r3
  8138e0:	10c00017 	ldw	r3,0(r2)
  8138e4:	e0bfff17 	ldw	r2,-4(fp)
  8138e8:	10800017 	ldw	r2,0(r2)
  8138ec:	1880111e 	bne	r3,r2,813934 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8138f0:	008020b4 	movhi	r2,130
  8138f4:	10a06c04 	addi	r2,r2,-32336
  8138f8:	e0fffe17 	ldw	r3,-8(fp)
  8138fc:	18c00324 	muli	r3,r3,12
  813900:	10c5883a 	add	r2,r2,r3
  813904:	10800204 	addi	r2,r2,8
  813908:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81390c:	1000090e 	bge	r2,zero,813934 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  813910:	e0bffe17 	ldw	r2,-8(fp)
  813914:	10c00324 	muli	r3,r2,12
  813918:	008020b4 	movhi	r2,130
  81391c:	10a06c04 	addi	r2,r2,-32336
  813920:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813924:	e0bfff17 	ldw	r2,-4(fp)
  813928:	18800226 	beq	r3,r2,813934 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81392c:	00bffcc4 	movi	r2,-13
  813930:	00000806 	br	813954 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813934:	e0bffe17 	ldw	r2,-8(fp)
  813938:	10800044 	addi	r2,r2,1
  81393c:	e0bffe15 	stw	r2,-8(fp)
  813940:	d0a01217 	ldw	r2,-32696(gp)
  813944:	1007883a 	mov	r3,r2
  813948:	e0bffe17 	ldw	r2,-8(fp)
  81394c:	18bfdf2e 	bgeu	r3,r2,8138cc <__alt_mem_onchip_mem+0xff80b8cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813950:	0005883a 	mov	r2,zero
}
  813954:	e037883a 	mov	sp,fp
  813958:	df000017 	ldw	fp,0(sp)
  81395c:	dec00104 	addi	sp,sp,4
  813960:	f800283a 	ret

00813964 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813964:	defff604 	addi	sp,sp,-40
  813968:	dfc00915 	stw	ra,36(sp)
  81396c:	df000815 	stw	fp,32(sp)
  813970:	df000804 	addi	fp,sp,32
  813974:	e13ffd15 	stw	r4,-12(fp)
  813978:	e17ffe15 	stw	r5,-8(fp)
  81397c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  813980:	00bfffc4 	movi	r2,-1
  813984:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  813988:	00bffb44 	movi	r2,-19
  81398c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  813990:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813994:	d1601004 	addi	r5,gp,-32704
  813998:	e13ffd17 	ldw	r4,-12(fp)
  81399c:	08167600 	call	816760 <alt_find_dev>
  8139a0:	e0bff815 	stw	r2,-32(fp)
  8139a4:	e0bff817 	ldw	r2,-32(fp)
  8139a8:	1000051e 	bne	r2,zero,8139c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8139ac:	e13ffd17 	ldw	r4,-12(fp)
  8139b0:	08167f00 	call	8167f0 <alt_find_file>
  8139b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8139b8:	00800044 	movi	r2,1
  8139bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8139c0:	e0bff817 	ldw	r2,-32(fp)
  8139c4:	10002926 	beq	r2,zero,813a6c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8139c8:	e13ff817 	ldw	r4,-32(fp)
  8139cc:	08168f80 	call	8168f8 <alt_get_fd>
  8139d0:	e0bff915 	stw	r2,-28(fp)
  8139d4:	e0bff917 	ldw	r2,-28(fp)
  8139d8:	1000030e 	bge	r2,zero,8139e8 <open+0x84>
    {
      status = index;
  8139dc:	e0bff917 	ldw	r2,-28(fp)
  8139e0:	e0bffa15 	stw	r2,-24(fp)
  8139e4:	00002306 	br	813a74 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8139e8:	e0bff917 	ldw	r2,-28(fp)
  8139ec:	10c00324 	muli	r3,r2,12
  8139f0:	008020b4 	movhi	r2,130
  8139f4:	10a06c04 	addi	r2,r2,-32336
  8139f8:	1885883a 	add	r2,r3,r2
  8139fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813a00:	e0fffe17 	ldw	r3,-8(fp)
  813a04:	00900034 	movhi	r2,16384
  813a08:	10bfffc4 	addi	r2,r2,-1
  813a0c:	1886703a 	and	r3,r3,r2
  813a10:	e0bffc17 	ldw	r2,-16(fp)
  813a14:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813a18:	e0bffb17 	ldw	r2,-20(fp)
  813a1c:	1000051e 	bne	r2,zero,813a34 <open+0xd0>
  813a20:	e13ffc17 	ldw	r4,-16(fp)
  813a24:	08138a00 	call	8138a0 <alt_file_locked>
  813a28:	e0bffa15 	stw	r2,-24(fp)
  813a2c:	e0bffa17 	ldw	r2,-24(fp)
  813a30:	10001016 	blt	r2,zero,813a74 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813a34:	e0bff817 	ldw	r2,-32(fp)
  813a38:	10800317 	ldw	r2,12(r2)
  813a3c:	10000826 	beq	r2,zero,813a60 <open+0xfc>
  813a40:	e0bff817 	ldw	r2,-32(fp)
  813a44:	10800317 	ldw	r2,12(r2)
  813a48:	e1ffff17 	ldw	r7,-4(fp)
  813a4c:	e1bffe17 	ldw	r6,-8(fp)
  813a50:	e17ffd17 	ldw	r5,-12(fp)
  813a54:	e13ffc17 	ldw	r4,-16(fp)
  813a58:	103ee83a 	callr	r2
  813a5c:	00000106 	br	813a64 <open+0x100>
  813a60:	0005883a 	mov	r2,zero
  813a64:	e0bffa15 	stw	r2,-24(fp)
  813a68:	00000206 	br	813a74 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  813a6c:	00bffb44 	movi	r2,-19
  813a70:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813a74:	e0bffa17 	ldw	r2,-24(fp)
  813a78:	1000090e 	bge	r2,zero,813aa0 <open+0x13c>
  {
    alt_release_fd (index);  
  813a7c:	e13ff917 	ldw	r4,-28(fp)
  813a80:	0813bf00 	call	813bf0 <alt_release_fd>
    ALT_ERRNO = -status;
  813a84:	08138640 	call	813864 <alt_get_errno>
  813a88:	1007883a 	mov	r3,r2
  813a8c:	e0bffa17 	ldw	r2,-24(fp)
  813a90:	0085c83a 	sub	r2,zero,r2
  813a94:	18800015 	stw	r2,0(r3)
    return -1;
  813a98:	00bfffc4 	movi	r2,-1
  813a9c:	00000106 	br	813aa4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  813aa0:	e0bff917 	ldw	r2,-28(fp)
}
  813aa4:	e037883a 	mov	sp,fp
  813aa8:	dfc00117 	ldw	ra,4(sp)
  813aac:	df000017 	ldw	fp,0(sp)
  813ab0:	dec00204 	addi	sp,sp,8
  813ab4:	f800283a 	ret

00813ab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813ab8:	defffe04 	addi	sp,sp,-8
  813abc:	dfc00115 	stw	ra,4(sp)
  813ac0:	df000015 	stw	fp,0(sp)
  813ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813ac8:	d0a01317 	ldw	r2,-32692(gp)
  813acc:	10000326 	beq	r2,zero,813adc <alt_get_errno+0x24>
  813ad0:	d0a01317 	ldw	r2,-32692(gp)
  813ad4:	103ee83a 	callr	r2
  813ad8:	00000106 	br	813ae0 <alt_get_errno+0x28>
  813adc:	d0a77404 	addi	r2,gp,-25136
}
  813ae0:	e037883a 	mov	sp,fp
  813ae4:	dfc00117 	ldw	ra,4(sp)
  813ae8:	df000017 	ldw	fp,0(sp)
  813aec:	dec00204 	addi	sp,sp,8
  813af0:	f800283a 	ret

00813af4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  813af4:	defff904 	addi	sp,sp,-28
  813af8:	dfc00615 	stw	ra,24(sp)
  813afc:	df000515 	stw	fp,20(sp)
  813b00:	df000504 	addi	fp,sp,20
  813b04:	e13ffd15 	stw	r4,-12(fp)
  813b08:	e17ffe15 	stw	r5,-8(fp)
  813b0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813b10:	e0bffd17 	ldw	r2,-12(fp)
  813b14:	10000616 	blt	r2,zero,813b30 <read+0x3c>
  813b18:	e0bffd17 	ldw	r2,-12(fp)
  813b1c:	10c00324 	muli	r3,r2,12
  813b20:	008020b4 	movhi	r2,130
  813b24:	10a06c04 	addi	r2,r2,-32336
  813b28:	1885883a 	add	r2,r3,r2
  813b2c:	00000106 	br	813b34 <read+0x40>
  813b30:	0005883a 	mov	r2,zero
  813b34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813b38:	e0bffb17 	ldw	r2,-20(fp)
  813b3c:	10002226 	beq	r2,zero,813bc8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  813b40:	e0bffb17 	ldw	r2,-20(fp)
  813b44:	10800217 	ldw	r2,8(r2)
  813b48:	108000cc 	andi	r2,r2,3
  813b4c:	10800060 	cmpeqi	r2,r2,1
  813b50:	1000181e 	bne	r2,zero,813bb4 <read+0xc0>
        (fd->dev->read))
  813b54:	e0bffb17 	ldw	r2,-20(fp)
  813b58:	10800017 	ldw	r2,0(r2)
  813b5c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  813b60:	10001426 	beq	r2,zero,813bb4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  813b64:	e0bffb17 	ldw	r2,-20(fp)
  813b68:	10800017 	ldw	r2,0(r2)
  813b6c:	10800517 	ldw	r2,20(r2)
  813b70:	e0ffff17 	ldw	r3,-4(fp)
  813b74:	180d883a 	mov	r6,r3
  813b78:	e17ffe17 	ldw	r5,-8(fp)
  813b7c:	e13ffb17 	ldw	r4,-20(fp)
  813b80:	103ee83a 	callr	r2
  813b84:	e0bffc15 	stw	r2,-16(fp)
  813b88:	e0bffc17 	ldw	r2,-16(fp)
  813b8c:	1000070e 	bge	r2,zero,813bac <read+0xb8>
        {
          ALT_ERRNO = -rval;
  813b90:	0813ab80 	call	813ab8 <alt_get_errno>
  813b94:	1007883a 	mov	r3,r2
  813b98:	e0bffc17 	ldw	r2,-16(fp)
  813b9c:	0085c83a 	sub	r2,zero,r2
  813ba0:	18800015 	stw	r2,0(r3)
          return -1;
  813ba4:	00bfffc4 	movi	r2,-1
  813ba8:	00000c06 	br	813bdc <read+0xe8>
        }
        return rval;
  813bac:	e0bffc17 	ldw	r2,-16(fp)
  813bb0:	00000a06 	br	813bdc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  813bb4:	0813ab80 	call	813ab8 <alt_get_errno>
  813bb8:	1007883a 	mov	r3,r2
  813bbc:	00800344 	movi	r2,13
  813bc0:	18800015 	stw	r2,0(r3)
  813bc4:	00000406 	br	813bd8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  813bc8:	0813ab80 	call	813ab8 <alt_get_errno>
  813bcc:	1007883a 	mov	r3,r2
  813bd0:	00801444 	movi	r2,81
  813bd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  813bd8:	00bfffc4 	movi	r2,-1
}
  813bdc:	e037883a 	mov	sp,fp
  813be0:	dfc00117 	ldw	ra,4(sp)
  813be4:	df000017 	ldw	fp,0(sp)
  813be8:	dec00204 	addi	sp,sp,8
  813bec:	f800283a 	ret

00813bf0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  813bf0:	defffe04 	addi	sp,sp,-8
  813bf4:	df000115 	stw	fp,4(sp)
  813bf8:	df000104 	addi	fp,sp,4
  813bfc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  813c00:	e0bfff17 	ldw	r2,-4(fp)
  813c04:	108000d0 	cmplti	r2,r2,3
  813c08:	10000d1e 	bne	r2,zero,813c40 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  813c0c:	008020b4 	movhi	r2,130
  813c10:	10a06c04 	addi	r2,r2,-32336
  813c14:	e0ffff17 	ldw	r3,-4(fp)
  813c18:	18c00324 	muli	r3,r3,12
  813c1c:	10c5883a 	add	r2,r2,r3
  813c20:	10800204 	addi	r2,r2,8
  813c24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  813c28:	008020b4 	movhi	r2,130
  813c2c:	10a06c04 	addi	r2,r2,-32336
  813c30:	e0ffff17 	ldw	r3,-4(fp)
  813c34:	18c00324 	muli	r3,r3,12
  813c38:	10c5883a 	add	r2,r2,r3
  813c3c:	10000015 	stw	zero,0(r2)
  }
}
  813c40:	0001883a 	nop
  813c44:	e037883a 	mov	sp,fp
  813c48:	df000017 	ldw	fp,0(sp)
  813c4c:	dec00104 	addi	sp,sp,4
  813c50:	f800283a 	ret

00813c54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  813c54:	defff904 	addi	sp,sp,-28
  813c58:	df000615 	stw	fp,24(sp)
  813c5c:	df000604 	addi	fp,sp,24
  813c60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c64:	0005303a 	rdctl	r2,status
  813c68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c6c:	e0fffe17 	ldw	r3,-8(fp)
  813c70:	00bfff84 	movi	r2,-2
  813c74:	1884703a 	and	r2,r3,r2
  813c78:	1001703a 	wrctl	status,r2
  
  return context;
  813c7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  813c80:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  813c84:	d0a01517 	ldw	r2,-32684(gp)
  813c88:	10c000c4 	addi	r3,r2,3
  813c8c:	00bfff04 	movi	r2,-4
  813c90:	1884703a 	and	r2,r3,r2
  813c94:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  813c98:	d0e01517 	ldw	r3,-32684(gp)
  813c9c:	e0bfff17 	ldw	r2,-4(fp)
  813ca0:	1887883a 	add	r3,r3,r2
  813ca4:	00804034 	movhi	r2,256
  813ca8:	10800004 	addi	r2,r2,0
  813cac:	10c0062e 	bgeu	r2,r3,813cc8 <sbrk+0x74>
  813cb0:	e0bffb17 	ldw	r2,-20(fp)
  813cb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813cb8:	e0bffa17 	ldw	r2,-24(fp)
  813cbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  813cc0:	00bfffc4 	movi	r2,-1
  813cc4:	00000b06 	br	813cf4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  813cc8:	d0a01517 	ldw	r2,-32684(gp)
  813ccc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  813cd0:	d0e01517 	ldw	r3,-32684(gp)
  813cd4:	e0bfff17 	ldw	r2,-4(fp)
  813cd8:	1885883a 	add	r2,r3,r2
  813cdc:	d0a01515 	stw	r2,-32684(gp)
  813ce0:	e0bffb17 	ldw	r2,-20(fp)
  813ce4:	e0bffc15 	stw	r2,-16(fp)
  813ce8:	e0bffc17 	ldw	r2,-16(fp)
  813cec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  813cf0:	e0bffd17 	ldw	r2,-12(fp)
} 
  813cf4:	e037883a 	mov	sp,fp
  813cf8:	df000017 	ldw	fp,0(sp)
  813cfc:	dec00104 	addi	sp,sp,4
  813d00:	f800283a 	ret

00813d04 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  813d04:	defffa04 	addi	sp,sp,-24
  813d08:	df000515 	stw	fp,20(sp)
  813d0c:	df000504 	addi	fp,sp,20
  813d10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d14:	0005303a 	rdctl	r2,status
  813d18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d1c:	e0fffc17 	ldw	r3,-16(fp)
  813d20:	00bfff84 	movi	r2,-2
  813d24:	1884703a 	and	r2,r3,r2
  813d28:	1001703a 	wrctl	status,r2
  
  return context;
  813d2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  813d30:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  813d34:	e0bfff17 	ldw	r2,-4(fp)
  813d38:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  813d3c:	e0bffd17 	ldw	r2,-12(fp)
  813d40:	10800017 	ldw	r2,0(r2)
  813d44:	e0fffd17 	ldw	r3,-12(fp)
  813d48:	18c00117 	ldw	r3,4(r3)
  813d4c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  813d50:	e0bffd17 	ldw	r2,-12(fp)
  813d54:	10800117 	ldw	r2,4(r2)
  813d58:	e0fffd17 	ldw	r3,-12(fp)
  813d5c:	18c00017 	ldw	r3,0(r3)
  813d60:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813d64:	e0bffd17 	ldw	r2,-12(fp)
  813d68:	e0fffd17 	ldw	r3,-12(fp)
  813d6c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  813d70:	e0bffd17 	ldw	r2,-12(fp)
  813d74:	e0fffd17 	ldw	r3,-12(fp)
  813d78:	10c00015 	stw	r3,0(r2)
  813d7c:	e0bffb17 	ldw	r2,-20(fp)
  813d80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813d84:	e0bffe17 	ldw	r2,-8(fp)
  813d88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  813d8c:	0001883a 	nop
  813d90:	e037883a 	mov	sp,fp
  813d94:	df000017 	ldw	fp,0(sp)
  813d98:	dec00104 	addi	sp,sp,4
  813d9c:	f800283a 	ret

00813da0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813da0:	defffb04 	addi	sp,sp,-20
  813da4:	dfc00415 	stw	ra,16(sp)
  813da8:	df000315 	stw	fp,12(sp)
  813dac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  813db0:	d0a01617 	ldw	r2,-32680(gp)
  813db4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813db8:	d0a78017 	ldw	r2,-25088(gp)
  813dbc:	10800044 	addi	r2,r2,1
  813dc0:	d0a78015 	stw	r2,-25088(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813dc4:	00002e06 	br	813e80 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  813dc8:	e0bffd17 	ldw	r2,-12(fp)
  813dcc:	10800017 	ldw	r2,0(r2)
  813dd0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813dd4:	e0bffd17 	ldw	r2,-12(fp)
  813dd8:	10800403 	ldbu	r2,16(r2)
  813ddc:	10803fcc 	andi	r2,r2,255
  813de0:	10000426 	beq	r2,zero,813df4 <alt_tick+0x54>
  813de4:	d0a78017 	ldw	r2,-25088(gp)
  813de8:	1000021e 	bne	r2,zero,813df4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  813dec:	e0bffd17 	ldw	r2,-12(fp)
  813df0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  813df4:	e0bffd17 	ldw	r2,-12(fp)
  813df8:	10800217 	ldw	r2,8(r2)
  813dfc:	d0e78017 	ldw	r3,-25088(gp)
  813e00:	18801d36 	bltu	r3,r2,813e78 <alt_tick+0xd8>
  813e04:	e0bffd17 	ldw	r2,-12(fp)
  813e08:	10800403 	ldbu	r2,16(r2)
  813e0c:	10803fcc 	andi	r2,r2,255
  813e10:	1000191e 	bne	r2,zero,813e78 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  813e14:	e0bffd17 	ldw	r2,-12(fp)
  813e18:	10800317 	ldw	r2,12(r2)
  813e1c:	e0fffd17 	ldw	r3,-12(fp)
  813e20:	18c00517 	ldw	r3,20(r3)
  813e24:	1809883a 	mov	r4,r3
  813e28:	103ee83a 	callr	r2
  813e2c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  813e30:	e0bfff17 	ldw	r2,-4(fp)
  813e34:	1000031e 	bne	r2,zero,813e44 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  813e38:	e13ffd17 	ldw	r4,-12(fp)
  813e3c:	0813d040 	call	813d04 <alt_alarm_stop>
  813e40:	00000d06 	br	813e78 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  813e44:	e0bffd17 	ldw	r2,-12(fp)
  813e48:	10c00217 	ldw	r3,8(r2)
  813e4c:	e0bfff17 	ldw	r2,-4(fp)
  813e50:	1887883a 	add	r3,r3,r2
  813e54:	e0bffd17 	ldw	r2,-12(fp)
  813e58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  813e5c:	e0bffd17 	ldw	r2,-12(fp)
  813e60:	10c00217 	ldw	r3,8(r2)
  813e64:	d0a78017 	ldw	r2,-25088(gp)
  813e68:	1880032e 	bgeu	r3,r2,813e78 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  813e6c:	e0bffd17 	ldw	r2,-12(fp)
  813e70:	00c00044 	movi	r3,1
  813e74:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  813e78:	e0bffe17 	ldw	r2,-8(fp)
  813e7c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813e80:	e0fffd17 	ldw	r3,-12(fp)
  813e84:	d0a01604 	addi	r2,gp,-32680
  813e88:	18bfcf1e 	bne	r3,r2,813dc8 <__alt_mem_onchip_mem+0xff80bdc8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  813e8c:	0001883a 	nop
}
  813e90:	0001883a 	nop
  813e94:	e037883a 	mov	sp,fp
  813e98:	dfc00117 	ldw	ra,4(sp)
  813e9c:	df000017 	ldw	fp,0(sp)
  813ea0:	dec00204 	addi	sp,sp,8
  813ea4:	f800283a 	ret

00813ea8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  813ea8:	defffd04 	addi	sp,sp,-12
  813eac:	dfc00215 	stw	ra,8(sp)
  813eb0:	df000115 	stw	fp,4(sp)
  813eb4:	df000104 	addi	fp,sp,4
  813eb8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  813ebc:	e13fff17 	ldw	r4,-4(fp)
  813ec0:	08164200 	call	816420 <alt_busy_sleep>
}
  813ec4:	e037883a 	mov	sp,fp
  813ec8:	dfc00117 	ldw	ra,4(sp)
  813ecc:	df000017 	ldw	fp,0(sp)
  813ed0:	dec00204 	addi	sp,sp,8
  813ed4:	f800283a 	ret

00813ed8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813ed8:	defffe04 	addi	sp,sp,-8
  813edc:	dfc00115 	stw	ra,4(sp)
  813ee0:	df000015 	stw	fp,0(sp)
  813ee4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813ee8:	d0a01317 	ldw	r2,-32692(gp)
  813eec:	10000326 	beq	r2,zero,813efc <alt_get_errno+0x24>
  813ef0:	d0a01317 	ldw	r2,-32692(gp)
  813ef4:	103ee83a 	callr	r2
  813ef8:	00000106 	br	813f00 <alt_get_errno+0x28>
  813efc:	d0a77404 	addi	r2,gp,-25136
}
  813f00:	e037883a 	mov	sp,fp
  813f04:	dfc00117 	ldw	ra,4(sp)
  813f08:	df000017 	ldw	fp,0(sp)
  813f0c:	dec00204 	addi	sp,sp,8
  813f10:	f800283a 	ret

00813f14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  813f14:	defff904 	addi	sp,sp,-28
  813f18:	dfc00615 	stw	ra,24(sp)
  813f1c:	df000515 	stw	fp,20(sp)
  813f20:	df000504 	addi	fp,sp,20
  813f24:	e13ffd15 	stw	r4,-12(fp)
  813f28:	e17ffe15 	stw	r5,-8(fp)
  813f2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813f30:	e0bffd17 	ldw	r2,-12(fp)
  813f34:	10000616 	blt	r2,zero,813f50 <write+0x3c>
  813f38:	e0bffd17 	ldw	r2,-12(fp)
  813f3c:	10c00324 	muli	r3,r2,12
  813f40:	008020b4 	movhi	r2,130
  813f44:	10a06c04 	addi	r2,r2,-32336
  813f48:	1885883a 	add	r2,r3,r2
  813f4c:	00000106 	br	813f54 <write+0x40>
  813f50:	0005883a 	mov	r2,zero
  813f54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813f58:	e0bffb17 	ldw	r2,-20(fp)
  813f5c:	10002126 	beq	r2,zero,813fe4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  813f60:	e0bffb17 	ldw	r2,-20(fp)
  813f64:	10800217 	ldw	r2,8(r2)
  813f68:	108000cc 	andi	r2,r2,3
  813f6c:	10001826 	beq	r2,zero,813fd0 <write+0xbc>
  813f70:	e0bffb17 	ldw	r2,-20(fp)
  813f74:	10800017 	ldw	r2,0(r2)
  813f78:	10800617 	ldw	r2,24(r2)
  813f7c:	10001426 	beq	r2,zero,813fd0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  813f80:	e0bffb17 	ldw	r2,-20(fp)
  813f84:	10800017 	ldw	r2,0(r2)
  813f88:	10800617 	ldw	r2,24(r2)
  813f8c:	e0ffff17 	ldw	r3,-4(fp)
  813f90:	180d883a 	mov	r6,r3
  813f94:	e17ffe17 	ldw	r5,-8(fp)
  813f98:	e13ffb17 	ldw	r4,-20(fp)
  813f9c:	103ee83a 	callr	r2
  813fa0:	e0bffc15 	stw	r2,-16(fp)
  813fa4:	e0bffc17 	ldw	r2,-16(fp)
  813fa8:	1000070e 	bge	r2,zero,813fc8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  813fac:	0813ed80 	call	813ed8 <alt_get_errno>
  813fb0:	1007883a 	mov	r3,r2
  813fb4:	e0bffc17 	ldw	r2,-16(fp)
  813fb8:	0085c83a 	sub	r2,zero,r2
  813fbc:	18800015 	stw	r2,0(r3)
        return -1;
  813fc0:	00bfffc4 	movi	r2,-1
  813fc4:	00000c06 	br	813ff8 <write+0xe4>
      }
      return rval;
  813fc8:	e0bffc17 	ldw	r2,-16(fp)
  813fcc:	00000a06 	br	813ff8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  813fd0:	0813ed80 	call	813ed8 <alt_get_errno>
  813fd4:	1007883a 	mov	r3,r2
  813fd8:	00800344 	movi	r2,13
  813fdc:	18800015 	stw	r2,0(r3)
  813fe0:	00000406 	br	813ff4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  813fe4:	0813ed80 	call	813ed8 <alt_get_errno>
  813fe8:	1007883a 	mov	r3,r2
  813fec:	00801444 	movi	r2,81
  813ff0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  813ff4:	00bfffc4 	movi	r2,-1
}
  813ff8:	e037883a 	mov	sp,fp
  813ffc:	dfc00117 	ldw	ra,4(sp)
  814000:	df000017 	ldw	fp,0(sp)
  814004:	dec00204 	addi	sp,sp,8
  814008:	f800283a 	ret

0081400c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81400c:	defffd04 	addi	sp,sp,-12
  814010:	dfc00215 	stw	ra,8(sp)
  814014:	df000115 	stw	fp,4(sp)
  814018:	df000104 	addi	fp,sp,4
  81401c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  814020:	d1601004 	addi	r5,gp,-32704
  814024:	e13fff17 	ldw	r4,-4(fp)
  814028:	08165fc0 	call	8165fc <alt_dev_llist_insert>
}
  81402c:	e037883a 	mov	sp,fp
  814030:	dfc00117 	ldw	ra,4(sp)
  814034:	df000017 	ldw	fp,0(sp)
  814038:	dec00204 	addi	sp,sp,8
  81403c:	f800283a 	ret

00814040 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  814040:	defffd04 	addi	sp,sp,-12
  814044:	dfc00215 	stw	ra,8(sp)
  814048:	df000115 	stw	fp,4(sp)
  81404c:	df000104 	addi	fp,sp,4
  814050:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  814054:	0816db00 	call	816db0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  814058:	00800044 	movi	r2,1
  81405c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  814060:	0001883a 	nop
  814064:	e037883a 	mov	sp,fp
  814068:	dfc00117 	ldw	ra,4(sp)
  81406c:	df000017 	ldw	fp,0(sp)
  814070:	dec00204 	addi	sp,sp,8
  814074:	f800283a 	ret

00814078 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  814078:	defffe04 	addi	sp,sp,-8
  81407c:	dfc00115 	stw	ra,4(sp)
  814080:	df000015 	stw	fp,0(sp)
  814084:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  814088:	01c0fa04 	movi	r7,1000
  81408c:	01800084 	movi	r6,2
  814090:	000b883a 	mov	r5,zero
  814094:	01004074 	movhi	r4,257
  814098:	21040804 	addi	r4,r4,4128
  81409c:	0815acc0 	call	815acc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8140a0:	01800044 	movi	r6,1
  8140a4:	000b883a 	mov	r5,zero
  8140a8:	010020b4 	movhi	r4,130
  8140ac:	2120d604 	addi	r4,r4,-31912
  8140b0:	08142740 	call	814274 <altera_avalon_jtag_uart_init>
  8140b4:	010020b4 	movhi	r4,130
  8140b8:	2120cc04 	addi	r4,r4,-31952
  8140bc:	081400c0 	call	81400c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8140c0:	010020b4 	movhi	r4,130
  8140c4:	2124ee04 	addi	r4,r4,-27720
  8140c8:	08158c00 	call	8158c0 <altera_avalon_lcd_16207_init>
  8140cc:	010020b4 	movhi	r4,130
  8140d0:	2124e404 	addi	r4,r4,-27760
  8140d4:	081400c0 	call	81400c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8140d8:	000d883a 	mov	r6,zero
  8140dc:	000b883a 	mov	r5,zero
  8140e0:	010020b4 	movhi	r4,130
  8140e4:	21253604 	addi	r4,r4,-27432
  8140e8:	0815c580 	call	815c58 <altera_avalon_uart_init>
  8140ec:	010020b4 	movhi	r4,130
  8140f0:	21252c04 	addi	r4,r4,-27472
  8140f4:	081400c0 	call	81400c <alt_dev_reg>
}
  8140f8:	0001883a 	nop
  8140fc:	e037883a 	mov	sp,fp
  814100:	dfc00117 	ldw	ra,4(sp)
  814104:	df000017 	ldw	fp,0(sp)
  814108:	dec00204 	addi	sp,sp,8
  81410c:	f800283a 	ret

00814110 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  814110:	defffa04 	addi	sp,sp,-24
  814114:	dfc00515 	stw	ra,20(sp)
  814118:	df000415 	stw	fp,16(sp)
  81411c:	df000404 	addi	fp,sp,16
  814120:	e13ffd15 	stw	r4,-12(fp)
  814124:	e17ffe15 	stw	r5,-8(fp)
  814128:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81412c:	e0bffd17 	ldw	r2,-12(fp)
  814130:	10800017 	ldw	r2,0(r2)
  814134:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  814138:	e0bffc17 	ldw	r2,-16(fp)
  81413c:	10c00a04 	addi	r3,r2,40
  814140:	e0bffd17 	ldw	r2,-12(fp)
  814144:	10800217 	ldw	r2,8(r2)
  814148:	100f883a 	mov	r7,r2
  81414c:	e1bfff17 	ldw	r6,-4(fp)
  814150:	e17ffe17 	ldw	r5,-8(fp)
  814154:	1809883a 	mov	r4,r3
  814158:	08147380 	call	814738 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81415c:	e037883a 	mov	sp,fp
  814160:	dfc00117 	ldw	ra,4(sp)
  814164:	df000017 	ldw	fp,0(sp)
  814168:	dec00204 	addi	sp,sp,8
  81416c:	f800283a 	ret

00814170 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  814170:	defffa04 	addi	sp,sp,-24
  814174:	dfc00515 	stw	ra,20(sp)
  814178:	df000415 	stw	fp,16(sp)
  81417c:	df000404 	addi	fp,sp,16
  814180:	e13ffd15 	stw	r4,-12(fp)
  814184:	e17ffe15 	stw	r5,-8(fp)
  814188:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81418c:	e0bffd17 	ldw	r2,-12(fp)
  814190:	10800017 	ldw	r2,0(r2)
  814194:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  814198:	e0bffc17 	ldw	r2,-16(fp)
  81419c:	10c00a04 	addi	r3,r2,40
  8141a0:	e0bffd17 	ldw	r2,-12(fp)
  8141a4:	10800217 	ldw	r2,8(r2)
  8141a8:	100f883a 	mov	r7,r2
  8141ac:	e1bfff17 	ldw	r6,-4(fp)
  8141b0:	e17ffe17 	ldw	r5,-8(fp)
  8141b4:	1809883a 	mov	r4,r3
  8141b8:	08149540 	call	814954 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8141bc:	e037883a 	mov	sp,fp
  8141c0:	dfc00117 	ldw	ra,4(sp)
  8141c4:	df000017 	ldw	fp,0(sp)
  8141c8:	dec00204 	addi	sp,sp,8
  8141cc:	f800283a 	ret

008141d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8141d0:	defffc04 	addi	sp,sp,-16
  8141d4:	dfc00315 	stw	ra,12(sp)
  8141d8:	df000215 	stw	fp,8(sp)
  8141dc:	df000204 	addi	fp,sp,8
  8141e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8141e4:	e0bfff17 	ldw	r2,-4(fp)
  8141e8:	10800017 	ldw	r2,0(r2)
  8141ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8141f0:	e0bffe17 	ldw	r2,-8(fp)
  8141f4:	10c00a04 	addi	r3,r2,40
  8141f8:	e0bfff17 	ldw	r2,-4(fp)
  8141fc:	10800217 	ldw	r2,8(r2)
  814200:	100b883a 	mov	r5,r2
  814204:	1809883a 	mov	r4,r3
  814208:	08145e00 	call	8145e0 <altera_avalon_jtag_uart_close>
}
  81420c:	e037883a 	mov	sp,fp
  814210:	dfc00117 	ldw	ra,4(sp)
  814214:	df000017 	ldw	fp,0(sp)
  814218:	dec00204 	addi	sp,sp,8
  81421c:	f800283a 	ret

00814220 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  814220:	defffa04 	addi	sp,sp,-24
  814224:	dfc00515 	stw	ra,20(sp)
  814228:	df000415 	stw	fp,16(sp)
  81422c:	df000404 	addi	fp,sp,16
  814230:	e13ffd15 	stw	r4,-12(fp)
  814234:	e17ffe15 	stw	r5,-8(fp)
  814238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81423c:	e0bffd17 	ldw	r2,-12(fp)
  814240:	10800017 	ldw	r2,0(r2)
  814244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  814248:	e0bffc17 	ldw	r2,-16(fp)
  81424c:	10800a04 	addi	r2,r2,40
  814250:	e1bfff17 	ldw	r6,-4(fp)
  814254:	e17ffe17 	ldw	r5,-8(fp)
  814258:	1009883a 	mov	r4,r2
  81425c:	08146480 	call	814648 <altera_avalon_jtag_uart_ioctl>
}
  814260:	e037883a 	mov	sp,fp
  814264:	dfc00117 	ldw	ra,4(sp)
  814268:	df000017 	ldw	fp,0(sp)
  81426c:	dec00204 	addi	sp,sp,8
  814270:	f800283a 	ret

00814274 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  814274:	defffa04 	addi	sp,sp,-24
  814278:	dfc00515 	stw	ra,20(sp)
  81427c:	df000415 	stw	fp,16(sp)
  814280:	df000404 	addi	fp,sp,16
  814284:	e13ffd15 	stw	r4,-12(fp)
  814288:	e17ffe15 	stw	r5,-8(fp)
  81428c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814290:	e0bffd17 	ldw	r2,-12(fp)
  814294:	00c00044 	movi	r3,1
  814298:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81429c:	e0bffd17 	ldw	r2,-12(fp)
  8142a0:	10800017 	ldw	r2,0(r2)
  8142a4:	10800104 	addi	r2,r2,4
  8142a8:	1007883a 	mov	r3,r2
  8142ac:	e0bffd17 	ldw	r2,-12(fp)
  8142b0:	10800817 	ldw	r2,32(r2)
  8142b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8142b8:	e0bffe17 	ldw	r2,-8(fp)
  8142bc:	e0ffff17 	ldw	r3,-4(fp)
  8142c0:	d8000015 	stw	zero,0(sp)
  8142c4:	e1fffd17 	ldw	r7,-12(fp)
  8142c8:	01802074 	movhi	r6,129
  8142cc:	3190cd04 	addi	r6,r6,17204
  8142d0:	180b883a 	mov	r5,r3
  8142d4:	1009883a 	mov	r4,r2
  8142d8:	08169d00 	call	8169d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8142dc:	e0bffd17 	ldw	r2,-12(fp)
  8142e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8142e4:	e0bffd17 	ldw	r2,-12(fp)
  8142e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8142ec:	d0e77f17 	ldw	r3,-25092(gp)
  8142f0:	e1fffd17 	ldw	r7,-12(fp)
  8142f4:	01802074 	movhi	r6,129
  8142f8:	31915004 	addi	r6,r6,17728
  8142fc:	180b883a 	mov	r5,r3
  814300:	1009883a 	mov	r4,r2
  814304:	0812ff40 	call	812ff4 <alt_alarm_start>
  814308:	1000040e 	bge	r2,zero,81431c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  81430c:	e0fffd17 	ldw	r3,-12(fp)
  814310:	00a00034 	movhi	r2,32768
  814314:	10bfffc4 	addi	r2,r2,-1
  814318:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  81431c:	0001883a 	nop
  814320:	e037883a 	mov	sp,fp
  814324:	dfc00117 	ldw	ra,4(sp)
  814328:	df000017 	ldw	fp,0(sp)
  81432c:	dec00204 	addi	sp,sp,8
  814330:	f800283a 	ret

00814334 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  814334:	defff804 	addi	sp,sp,-32
  814338:	df000715 	stw	fp,28(sp)
  81433c:	df000704 	addi	fp,sp,28
  814340:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  814344:	e0bfff17 	ldw	r2,-4(fp)
  814348:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  81434c:	e0bffb17 	ldw	r2,-20(fp)
  814350:	10800017 	ldw	r2,0(r2)
  814354:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814358:	e0bffc17 	ldw	r2,-16(fp)
  81435c:	10800104 	addi	r2,r2,4
  814360:	10800037 	ldwio	r2,0(r2)
  814364:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  814368:	e0bffd17 	ldw	r2,-12(fp)
  81436c:	1080c00c 	andi	r2,r2,768
  814370:	10006d26 	beq	r2,zero,814528 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  814374:	e0bffd17 	ldw	r2,-12(fp)
  814378:	1080400c 	andi	r2,r2,256
  81437c:	10003526 	beq	r2,zero,814454 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  814380:	00800074 	movhi	r2,1
  814384:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814388:	e0bffb17 	ldw	r2,-20(fp)
  81438c:	10800a17 	ldw	r2,40(r2)
  814390:	10800044 	addi	r2,r2,1
  814394:	1081ffcc 	andi	r2,r2,2047
  814398:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  81439c:	e0bffb17 	ldw	r2,-20(fp)
  8143a0:	10c00b17 	ldw	r3,44(r2)
  8143a4:	e0bffe17 	ldw	r2,-8(fp)
  8143a8:	18801526 	beq	r3,r2,814400 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8143ac:	e0bffc17 	ldw	r2,-16(fp)
  8143b0:	10800037 	ldwio	r2,0(r2)
  8143b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8143b8:	e0bff917 	ldw	r2,-28(fp)
  8143bc:	10a0000c 	andi	r2,r2,32768
  8143c0:	10001126 	beq	r2,zero,814408 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8143c4:	e0bffb17 	ldw	r2,-20(fp)
  8143c8:	10800a17 	ldw	r2,40(r2)
  8143cc:	e0fff917 	ldw	r3,-28(fp)
  8143d0:	1809883a 	mov	r4,r3
  8143d4:	e0fffb17 	ldw	r3,-20(fp)
  8143d8:	1885883a 	add	r2,r3,r2
  8143dc:	10800e04 	addi	r2,r2,56
  8143e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8143e4:	e0bffb17 	ldw	r2,-20(fp)
  8143e8:	10800a17 	ldw	r2,40(r2)
  8143ec:	10800044 	addi	r2,r2,1
  8143f0:	10c1ffcc 	andi	r3,r2,2047
  8143f4:	e0bffb17 	ldw	r2,-20(fp)
  8143f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8143fc:	003fe206 	br	814388 <__alt_mem_onchip_mem+0xff80c388>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  814400:	0001883a 	nop
  814404:	00000106 	br	81440c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  814408:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81440c:	e0bff917 	ldw	r2,-28(fp)
  814410:	10bfffec 	andhi	r2,r2,65535
  814414:	10000f26 	beq	r2,zero,814454 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814418:	e0bffb17 	ldw	r2,-20(fp)
  81441c:	10c00817 	ldw	r3,32(r2)
  814420:	00bfff84 	movi	r2,-2
  814424:	1886703a 	and	r3,r3,r2
  814428:	e0bffb17 	ldw	r2,-20(fp)
  81442c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  814430:	e0bffc17 	ldw	r2,-16(fp)
  814434:	10800104 	addi	r2,r2,4
  814438:	1007883a 	mov	r3,r2
  81443c:	e0bffb17 	ldw	r2,-20(fp)
  814440:	10800817 	ldw	r2,32(r2)
  814444:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814448:	e0bffc17 	ldw	r2,-16(fp)
  81444c:	10800104 	addi	r2,r2,4
  814450:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  814454:	e0bffd17 	ldw	r2,-12(fp)
  814458:	1080800c 	andi	r2,r2,512
  81445c:	103fbe26 	beq	r2,zero,814358 <__alt_mem_onchip_mem+0xff80c358>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  814460:	e0bffd17 	ldw	r2,-12(fp)
  814464:	1004d43a 	srli	r2,r2,16
  814468:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81446c:	00001406 	br	8144c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  814470:	e0bffc17 	ldw	r2,-16(fp)
  814474:	e0fffb17 	ldw	r3,-20(fp)
  814478:	18c00d17 	ldw	r3,52(r3)
  81447c:	e13ffb17 	ldw	r4,-20(fp)
  814480:	20c7883a 	add	r3,r4,r3
  814484:	18c20e04 	addi	r3,r3,2104
  814488:	18c00003 	ldbu	r3,0(r3)
  81448c:	18c03fcc 	andi	r3,r3,255
  814490:	18c0201c 	xori	r3,r3,128
  814494:	18ffe004 	addi	r3,r3,-128
  814498:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81449c:	e0bffb17 	ldw	r2,-20(fp)
  8144a0:	10800d17 	ldw	r2,52(r2)
  8144a4:	10800044 	addi	r2,r2,1
  8144a8:	10c1ffcc 	andi	r3,r2,2047
  8144ac:	e0bffb17 	ldw	r2,-20(fp)
  8144b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8144b4:	e0bffa17 	ldw	r2,-24(fp)
  8144b8:	10bfffc4 	addi	r2,r2,-1
  8144bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8144c0:	e0bffa17 	ldw	r2,-24(fp)
  8144c4:	10000526 	beq	r2,zero,8144dc <altera_avalon_jtag_uart_irq+0x1a8>
  8144c8:	e0bffb17 	ldw	r2,-20(fp)
  8144cc:	10c00d17 	ldw	r3,52(r2)
  8144d0:	e0bffb17 	ldw	r2,-20(fp)
  8144d4:	10800c17 	ldw	r2,48(r2)
  8144d8:	18bfe51e 	bne	r3,r2,814470 <__alt_mem_onchip_mem+0xff80c470>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8144dc:	e0bffa17 	ldw	r2,-24(fp)
  8144e0:	103f9d26 	beq	r2,zero,814358 <__alt_mem_onchip_mem+0xff80c358>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8144e4:	e0bffb17 	ldw	r2,-20(fp)
  8144e8:	10c00817 	ldw	r3,32(r2)
  8144ec:	00bfff44 	movi	r2,-3
  8144f0:	1886703a 	and	r3,r3,r2
  8144f4:	e0bffb17 	ldw	r2,-20(fp)
  8144f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8144fc:	e0bffb17 	ldw	r2,-20(fp)
  814500:	10800017 	ldw	r2,0(r2)
  814504:	10800104 	addi	r2,r2,4
  814508:	1007883a 	mov	r3,r2
  81450c:	e0bffb17 	ldw	r2,-20(fp)
  814510:	10800817 	ldw	r2,32(r2)
  814514:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814518:	e0bffc17 	ldw	r2,-16(fp)
  81451c:	10800104 	addi	r2,r2,4
  814520:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  814524:	003f8c06 	br	814358 <__alt_mem_onchip_mem+0xff80c358>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  814528:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  81452c:	0001883a 	nop
  814530:	e037883a 	mov	sp,fp
  814534:	df000017 	ldw	fp,0(sp)
  814538:	dec00104 	addi	sp,sp,4
  81453c:	f800283a 	ret

00814540 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  814540:	defff804 	addi	sp,sp,-32
  814544:	df000715 	stw	fp,28(sp)
  814548:	df000704 	addi	fp,sp,28
  81454c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  814550:	e0bffb17 	ldw	r2,-20(fp)
  814554:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  814558:	e0bff917 	ldw	r2,-28(fp)
  81455c:	10800017 	ldw	r2,0(r2)
  814560:	10800104 	addi	r2,r2,4
  814564:	10800037 	ldwio	r2,0(r2)
  814568:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81456c:	e0bffa17 	ldw	r2,-24(fp)
  814570:	1081000c 	andi	r2,r2,1024
  814574:	10000b26 	beq	r2,zero,8145a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  814578:	e0bff917 	ldw	r2,-28(fp)
  81457c:	10800017 	ldw	r2,0(r2)
  814580:	10800104 	addi	r2,r2,4
  814584:	1007883a 	mov	r3,r2
  814588:	e0bff917 	ldw	r2,-28(fp)
  81458c:	10800817 	ldw	r2,32(r2)
  814590:	10810014 	ori	r2,r2,1024
  814594:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  814598:	e0bff917 	ldw	r2,-28(fp)
  81459c:	10000915 	stw	zero,36(r2)
  8145a0:	00000a06 	br	8145cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8145a4:	e0bff917 	ldw	r2,-28(fp)
  8145a8:	10c00917 	ldw	r3,36(r2)
  8145ac:	00a00034 	movhi	r2,32768
  8145b0:	10bfff04 	addi	r2,r2,-4
  8145b4:	10c00536 	bltu	r2,r3,8145cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8145b8:	e0bff917 	ldw	r2,-28(fp)
  8145bc:	10800917 	ldw	r2,36(r2)
  8145c0:	10c00044 	addi	r3,r2,1
  8145c4:	e0bff917 	ldw	r2,-28(fp)
  8145c8:	10c00915 	stw	r3,36(r2)
  8145cc:	d0a77f17 	ldw	r2,-25092(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8145d0:	e037883a 	mov	sp,fp
  8145d4:	df000017 	ldw	fp,0(sp)
  8145d8:	dec00104 	addi	sp,sp,4
  8145dc:	f800283a 	ret

008145e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8145e0:	defffd04 	addi	sp,sp,-12
  8145e4:	df000215 	stw	fp,8(sp)
  8145e8:	df000204 	addi	fp,sp,8
  8145ec:	e13ffe15 	stw	r4,-8(fp)
  8145f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8145f4:	00000506 	br	81460c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8145f8:	e0bfff17 	ldw	r2,-4(fp)
  8145fc:	1090000c 	andi	r2,r2,16384
  814600:	10000226 	beq	r2,zero,81460c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  814604:	00bffd44 	movi	r2,-11
  814608:	00000b06 	br	814638 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81460c:	e0bffe17 	ldw	r2,-8(fp)
  814610:	10c00d17 	ldw	r3,52(r2)
  814614:	e0bffe17 	ldw	r2,-8(fp)
  814618:	10800c17 	ldw	r2,48(r2)
  81461c:	18800526 	beq	r3,r2,814634 <altera_avalon_jtag_uart_close+0x54>
  814620:	e0bffe17 	ldw	r2,-8(fp)
  814624:	10c00917 	ldw	r3,36(r2)
  814628:	e0bffe17 	ldw	r2,-8(fp)
  81462c:	10800117 	ldw	r2,4(r2)
  814630:	18bff136 	bltu	r3,r2,8145f8 <__alt_mem_onchip_mem+0xff80c5f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  814634:	0005883a 	mov	r2,zero
}
  814638:	e037883a 	mov	sp,fp
  81463c:	df000017 	ldw	fp,0(sp)
  814640:	dec00104 	addi	sp,sp,4
  814644:	f800283a 	ret

00814648 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  814648:	defffa04 	addi	sp,sp,-24
  81464c:	df000515 	stw	fp,20(sp)
  814650:	df000504 	addi	fp,sp,20
  814654:	e13ffd15 	stw	r4,-12(fp)
  814658:	e17ffe15 	stw	r5,-8(fp)
  81465c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  814660:	00bff9c4 	movi	r2,-25
  814664:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  814668:	e0bffe17 	ldw	r2,-8(fp)
  81466c:	10da8060 	cmpeqi	r3,r2,27137
  814670:	1800031e 	bne	r3,zero,814680 <altera_avalon_jtag_uart_ioctl+0x38>
  814674:	109a80a0 	cmpeqi	r2,r2,27138
  814678:	1000181e 	bne	r2,zero,8146dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  81467c:	00002906 	br	814724 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  814680:	e0bffd17 	ldw	r2,-12(fp)
  814684:	10c00117 	ldw	r3,4(r2)
  814688:	00a00034 	movhi	r2,32768
  81468c:	10bfffc4 	addi	r2,r2,-1
  814690:	18802126 	beq	r3,r2,814718 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  814694:	e0bfff17 	ldw	r2,-4(fp)
  814698:	10800017 	ldw	r2,0(r2)
  81469c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8146a0:	e0bffc17 	ldw	r2,-16(fp)
  8146a4:	10800090 	cmplti	r2,r2,2
  8146a8:	1000061e 	bne	r2,zero,8146c4 <altera_avalon_jtag_uart_ioctl+0x7c>
  8146ac:	e0fffc17 	ldw	r3,-16(fp)
  8146b0:	00a00034 	movhi	r2,32768
  8146b4:	10bfffc4 	addi	r2,r2,-1
  8146b8:	18800226 	beq	r3,r2,8146c4 <altera_avalon_jtag_uart_ioctl+0x7c>
  8146bc:	e0bffc17 	ldw	r2,-16(fp)
  8146c0:	00000206 	br	8146cc <altera_avalon_jtag_uart_ioctl+0x84>
  8146c4:	00a00034 	movhi	r2,32768
  8146c8:	10bfff84 	addi	r2,r2,-2
  8146cc:	e0fffd17 	ldw	r3,-12(fp)
  8146d0:	18800115 	stw	r2,4(r3)
      rc = 0;
  8146d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8146d8:	00000f06 	br	814718 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8146dc:	e0bffd17 	ldw	r2,-12(fp)
  8146e0:	10c00117 	ldw	r3,4(r2)
  8146e4:	00a00034 	movhi	r2,32768
  8146e8:	10bfffc4 	addi	r2,r2,-1
  8146ec:	18800c26 	beq	r3,r2,814720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8146f0:	e0bffd17 	ldw	r2,-12(fp)
  8146f4:	10c00917 	ldw	r3,36(r2)
  8146f8:	e0bffd17 	ldw	r2,-12(fp)
  8146fc:	10800117 	ldw	r2,4(r2)
  814700:	1885803a 	cmpltu	r2,r3,r2
  814704:	10c03fcc 	andi	r3,r2,255
  814708:	e0bfff17 	ldw	r2,-4(fp)
  81470c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  814710:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  814714:	00000206 	br	814720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  814718:	0001883a 	nop
  81471c:	00000106 	br	814724 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  814720:	0001883a 	nop

  default:
    break;
  }

  return rc;
  814724:	e0bffb17 	ldw	r2,-20(fp)
}
  814728:	e037883a 	mov	sp,fp
  81472c:	df000017 	ldw	fp,0(sp)
  814730:	dec00104 	addi	sp,sp,4
  814734:	f800283a 	ret

00814738 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  814738:	defff304 	addi	sp,sp,-52
  81473c:	dfc00c15 	stw	ra,48(sp)
  814740:	df000b15 	stw	fp,44(sp)
  814744:	df000b04 	addi	fp,sp,44
  814748:	e13ffc15 	stw	r4,-16(fp)
  81474c:	e17ffd15 	stw	r5,-12(fp)
  814750:	e1bffe15 	stw	r6,-8(fp)
  814754:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  814758:	e0bffd17 	ldw	r2,-12(fp)
  81475c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  814760:	00004706 	br	814880 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  814764:	e0bffc17 	ldw	r2,-16(fp)
  814768:	10800a17 	ldw	r2,40(r2)
  81476c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  814770:	e0bffc17 	ldw	r2,-16(fp)
  814774:	10800b17 	ldw	r2,44(r2)
  814778:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  81477c:	e0fff717 	ldw	r3,-36(fp)
  814780:	e0bff817 	ldw	r2,-32(fp)
  814784:	18800536 	bltu	r3,r2,81479c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  814788:	e0fff717 	ldw	r3,-36(fp)
  81478c:	e0bff817 	ldw	r2,-32(fp)
  814790:	1885c83a 	sub	r2,r3,r2
  814794:	e0bff615 	stw	r2,-40(fp)
  814798:	00000406 	br	8147ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81479c:	00c20004 	movi	r3,2048
  8147a0:	e0bff817 	ldw	r2,-32(fp)
  8147a4:	1885c83a 	sub	r2,r3,r2
  8147a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8147ac:	e0bff617 	ldw	r2,-40(fp)
  8147b0:	10001e26 	beq	r2,zero,81482c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8147b4:	e0fffe17 	ldw	r3,-8(fp)
  8147b8:	e0bff617 	ldw	r2,-40(fp)
  8147bc:	1880022e 	bgeu	r3,r2,8147c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8147c0:	e0bffe17 	ldw	r2,-8(fp)
  8147c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8147c8:	e0bffc17 	ldw	r2,-16(fp)
  8147cc:	10c00e04 	addi	r3,r2,56
  8147d0:	e0bff817 	ldw	r2,-32(fp)
  8147d4:	1885883a 	add	r2,r3,r2
  8147d8:	e1bff617 	ldw	r6,-40(fp)
  8147dc:	100b883a 	mov	r5,r2
  8147e0:	e13ff517 	ldw	r4,-44(fp)
  8147e4:	080dd300 	call	80dd30 <memcpy>
      ptr   += n;
  8147e8:	e0fff517 	ldw	r3,-44(fp)
  8147ec:	e0bff617 	ldw	r2,-40(fp)
  8147f0:	1885883a 	add	r2,r3,r2
  8147f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8147f8:	e0fffe17 	ldw	r3,-8(fp)
  8147fc:	e0bff617 	ldw	r2,-40(fp)
  814800:	1885c83a 	sub	r2,r3,r2
  814804:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814808:	e0fff817 	ldw	r3,-32(fp)
  81480c:	e0bff617 	ldw	r2,-40(fp)
  814810:	1885883a 	add	r2,r3,r2
  814814:	10c1ffcc 	andi	r3,r2,2047
  814818:	e0bffc17 	ldw	r2,-16(fp)
  81481c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  814820:	e0bffe17 	ldw	r2,-8(fp)
  814824:	00bfcf16 	blt	zero,r2,814764 <__alt_mem_onchip_mem+0xff80c764>
  814828:	00000106 	br	814830 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  81482c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  814830:	e0fff517 	ldw	r3,-44(fp)
  814834:	e0bffd17 	ldw	r2,-12(fp)
  814838:	1880141e 	bne	r3,r2,81488c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81483c:	e0bfff17 	ldw	r2,-4(fp)
  814840:	1090000c 	andi	r2,r2,16384
  814844:	1000131e 	bne	r2,zero,814894 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  814848:	0001883a 	nop
  81484c:	e0bffc17 	ldw	r2,-16(fp)
  814850:	10c00a17 	ldw	r3,40(r2)
  814854:	e0bff717 	ldw	r2,-36(fp)
  814858:	1880051e 	bne	r3,r2,814870 <altera_avalon_jtag_uart_read+0x138>
  81485c:	e0bffc17 	ldw	r2,-16(fp)
  814860:	10c00917 	ldw	r3,36(r2)
  814864:	e0bffc17 	ldw	r2,-16(fp)
  814868:	10800117 	ldw	r2,4(r2)
  81486c:	18bff736 	bltu	r3,r2,81484c <__alt_mem_onchip_mem+0xff80c84c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  814870:	e0bffc17 	ldw	r2,-16(fp)
  814874:	10c00a17 	ldw	r3,40(r2)
  814878:	e0bff717 	ldw	r2,-36(fp)
  81487c:	18800726 	beq	r3,r2,81489c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  814880:	e0bffe17 	ldw	r2,-8(fp)
  814884:	00bfb716 	blt	zero,r2,814764 <__alt_mem_onchip_mem+0xff80c764>
  814888:	00000506 	br	8148a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  81488c:	0001883a 	nop
  814890:	00000306 	br	8148a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  814894:	0001883a 	nop
  814898:	00000106 	br	8148a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  81489c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8148a0:	e0fff517 	ldw	r3,-44(fp)
  8148a4:	e0bffd17 	ldw	r2,-12(fp)
  8148a8:	18801826 	beq	r3,r2,81490c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8148ac:	0005303a 	rdctl	r2,status
  8148b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8148b4:	e0fffb17 	ldw	r3,-20(fp)
  8148b8:	00bfff84 	movi	r2,-2
  8148bc:	1884703a 	and	r2,r3,r2
  8148c0:	1001703a 	wrctl	status,r2
  
  return context;
  8148c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8148c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8148cc:	e0bffc17 	ldw	r2,-16(fp)
  8148d0:	10800817 	ldw	r2,32(r2)
  8148d4:	10c00054 	ori	r3,r2,1
  8148d8:	e0bffc17 	ldw	r2,-16(fp)
  8148dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8148e0:	e0bffc17 	ldw	r2,-16(fp)
  8148e4:	10800017 	ldw	r2,0(r2)
  8148e8:	10800104 	addi	r2,r2,4
  8148ec:	1007883a 	mov	r3,r2
  8148f0:	e0bffc17 	ldw	r2,-16(fp)
  8148f4:	10800817 	ldw	r2,32(r2)
  8148f8:	18800035 	stwio	r2,0(r3)
  8148fc:	e0bffa17 	ldw	r2,-24(fp)
  814900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814904:	e0bff917 	ldw	r2,-28(fp)
  814908:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81490c:	e0fff517 	ldw	r3,-44(fp)
  814910:	e0bffd17 	ldw	r2,-12(fp)
  814914:	18800426 	beq	r3,r2,814928 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  814918:	e0fff517 	ldw	r3,-44(fp)
  81491c:	e0bffd17 	ldw	r2,-12(fp)
  814920:	1885c83a 	sub	r2,r3,r2
  814924:	00000606 	br	814940 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  814928:	e0bfff17 	ldw	r2,-4(fp)
  81492c:	1090000c 	andi	r2,r2,16384
  814930:	10000226 	beq	r2,zero,81493c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  814934:	00bffd44 	movi	r2,-11
  814938:	00000106 	br	814940 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  81493c:	00bffec4 	movi	r2,-5
}
  814940:	e037883a 	mov	sp,fp
  814944:	dfc00117 	ldw	ra,4(sp)
  814948:	df000017 	ldw	fp,0(sp)
  81494c:	dec00204 	addi	sp,sp,8
  814950:	f800283a 	ret

00814954 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  814954:	defff304 	addi	sp,sp,-52
  814958:	dfc00c15 	stw	ra,48(sp)
  81495c:	df000b15 	stw	fp,44(sp)
  814960:	df000b04 	addi	fp,sp,44
  814964:	e13ffc15 	stw	r4,-16(fp)
  814968:	e17ffd15 	stw	r5,-12(fp)
  81496c:	e1bffe15 	stw	r6,-8(fp)
  814970:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  814974:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  814978:	e0bffd17 	ldw	r2,-12(fp)
  81497c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  814980:	00003706 	br	814a60 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  814984:	e0bffc17 	ldw	r2,-16(fp)
  814988:	10800c17 	ldw	r2,48(r2)
  81498c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  814990:	e0bffc17 	ldw	r2,-16(fp)
  814994:	10800d17 	ldw	r2,52(r2)
  814998:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  81499c:	e0fff917 	ldw	r3,-28(fp)
  8149a0:	e0bff517 	ldw	r2,-44(fp)
  8149a4:	1880062e 	bgeu	r3,r2,8149c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8149a8:	e0fff517 	ldw	r3,-44(fp)
  8149ac:	e0bff917 	ldw	r2,-28(fp)
  8149b0:	1885c83a 	sub	r2,r3,r2
  8149b4:	10bfffc4 	addi	r2,r2,-1
  8149b8:	e0bff615 	stw	r2,-40(fp)
  8149bc:	00000b06 	br	8149ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8149c0:	e0bff517 	ldw	r2,-44(fp)
  8149c4:	10000526 	beq	r2,zero,8149dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8149c8:	00c20004 	movi	r3,2048
  8149cc:	e0bff917 	ldw	r2,-28(fp)
  8149d0:	1885c83a 	sub	r2,r3,r2
  8149d4:	e0bff615 	stw	r2,-40(fp)
  8149d8:	00000406 	br	8149ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8149dc:	00c1ffc4 	movi	r3,2047
  8149e0:	e0bff917 	ldw	r2,-28(fp)
  8149e4:	1885c83a 	sub	r2,r3,r2
  8149e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8149ec:	e0bff617 	ldw	r2,-40(fp)
  8149f0:	10001e26 	beq	r2,zero,814a6c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8149f4:	e0fffe17 	ldw	r3,-8(fp)
  8149f8:	e0bff617 	ldw	r2,-40(fp)
  8149fc:	1880022e 	bgeu	r3,r2,814a08 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  814a00:	e0bffe17 	ldw	r2,-8(fp)
  814a04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  814a08:	e0bffc17 	ldw	r2,-16(fp)
  814a0c:	10c20e04 	addi	r3,r2,2104
  814a10:	e0bff917 	ldw	r2,-28(fp)
  814a14:	1885883a 	add	r2,r3,r2
  814a18:	e1bff617 	ldw	r6,-40(fp)
  814a1c:	e17ffd17 	ldw	r5,-12(fp)
  814a20:	1009883a 	mov	r4,r2
  814a24:	080dd300 	call	80dd30 <memcpy>
      ptr   += n;
  814a28:	e0fffd17 	ldw	r3,-12(fp)
  814a2c:	e0bff617 	ldw	r2,-40(fp)
  814a30:	1885883a 	add	r2,r3,r2
  814a34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  814a38:	e0fffe17 	ldw	r3,-8(fp)
  814a3c:	e0bff617 	ldw	r2,-40(fp)
  814a40:	1885c83a 	sub	r2,r3,r2
  814a44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814a48:	e0fff917 	ldw	r3,-28(fp)
  814a4c:	e0bff617 	ldw	r2,-40(fp)
  814a50:	1885883a 	add	r2,r3,r2
  814a54:	10c1ffcc 	andi	r3,r2,2047
  814a58:	e0bffc17 	ldw	r2,-16(fp)
  814a5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  814a60:	e0bffe17 	ldw	r2,-8(fp)
  814a64:	00bfc716 	blt	zero,r2,814984 <__alt_mem_onchip_mem+0xff80c984>
  814a68:	00000106 	br	814a70 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  814a6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814a70:	0005303a 	rdctl	r2,status
  814a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814a78:	e0fffb17 	ldw	r3,-20(fp)
  814a7c:	00bfff84 	movi	r2,-2
  814a80:	1884703a 	and	r2,r3,r2
  814a84:	1001703a 	wrctl	status,r2
  
  return context;
  814a88:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  814a8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  814a90:	e0bffc17 	ldw	r2,-16(fp)
  814a94:	10800817 	ldw	r2,32(r2)
  814a98:	10c00094 	ori	r3,r2,2
  814a9c:	e0bffc17 	ldw	r2,-16(fp)
  814aa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814aa4:	e0bffc17 	ldw	r2,-16(fp)
  814aa8:	10800017 	ldw	r2,0(r2)
  814aac:	10800104 	addi	r2,r2,4
  814ab0:	1007883a 	mov	r3,r2
  814ab4:	e0bffc17 	ldw	r2,-16(fp)
  814ab8:	10800817 	ldw	r2,32(r2)
  814abc:	18800035 	stwio	r2,0(r3)
  814ac0:	e0bffa17 	ldw	r2,-24(fp)
  814ac4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814ac8:	e0bff817 	ldw	r2,-32(fp)
  814acc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  814ad0:	e0bffe17 	ldw	r2,-8(fp)
  814ad4:	0080100e 	bge	zero,r2,814b18 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  814ad8:	e0bfff17 	ldw	r2,-4(fp)
  814adc:	1090000c 	andi	r2,r2,16384
  814ae0:	1000101e 	bne	r2,zero,814b24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814ae4:	0001883a 	nop
  814ae8:	e0bffc17 	ldw	r2,-16(fp)
  814aec:	10c00d17 	ldw	r3,52(r2)
  814af0:	e0bff517 	ldw	r2,-44(fp)
  814af4:	1880051e 	bne	r3,r2,814b0c <altera_avalon_jtag_uart_write+0x1b8>
  814af8:	e0bffc17 	ldw	r2,-16(fp)
  814afc:	10c00917 	ldw	r3,36(r2)
  814b00:	e0bffc17 	ldw	r2,-16(fp)
  814b04:	10800117 	ldw	r2,4(r2)
  814b08:	18bff736 	bltu	r3,r2,814ae8 <__alt_mem_onchip_mem+0xff80cae8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  814b0c:	e0bffc17 	ldw	r2,-16(fp)
  814b10:	10800917 	ldw	r2,36(r2)
  814b14:	1000051e 	bne	r2,zero,814b2c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  814b18:	e0bffe17 	ldw	r2,-8(fp)
  814b1c:	00bfd016 	blt	zero,r2,814a60 <__alt_mem_onchip_mem+0xff80ca60>
  814b20:	00000306 	br	814b30 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  814b24:	0001883a 	nop
  814b28:	00000106 	br	814b30 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  814b2c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  814b30:	e0fffd17 	ldw	r3,-12(fp)
  814b34:	e0bff717 	ldw	r2,-36(fp)
  814b38:	18800426 	beq	r3,r2,814b4c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  814b3c:	e0fffd17 	ldw	r3,-12(fp)
  814b40:	e0bff717 	ldw	r2,-36(fp)
  814b44:	1885c83a 	sub	r2,r3,r2
  814b48:	00000606 	br	814b64 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  814b4c:	e0bfff17 	ldw	r2,-4(fp)
  814b50:	1090000c 	andi	r2,r2,16384
  814b54:	10000226 	beq	r2,zero,814b60 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  814b58:	00bffd44 	movi	r2,-11
  814b5c:	00000106 	br	814b64 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  814b60:	00bffec4 	movi	r2,-5
}
  814b64:	e037883a 	mov	sp,fp
  814b68:	dfc00117 	ldw	ra,4(sp)
  814b6c:	df000017 	ldw	fp,0(sp)
  814b70:	dec00204 	addi	sp,sp,8
  814b74:	f800283a 	ret

00814b78 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  814b78:	defffa04 	addi	sp,sp,-24
  814b7c:	dfc00515 	stw	ra,20(sp)
  814b80:	df000415 	stw	fp,16(sp)
  814b84:	df000404 	addi	fp,sp,16
  814b88:	e13ffe15 	stw	r4,-8(fp)
  814b8c:	2805883a 	mov	r2,r5
  814b90:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  814b94:	e0bffe17 	ldw	r2,-8(fp)
  814b98:	10800017 	ldw	r2,0(r2)
  814b9c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  814ba0:	008003f4 	movhi	r2,15
  814ba4:	10909004 	addi	r2,r2,16960
  814ba8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  814bac:	e0bffe17 	ldw	r2,-8(fp)
  814bb0:	10800803 	ldbu	r2,32(r2)
  814bb4:	10803fcc 	andi	r2,r2,255
  814bb8:	1080201c 	xori	r2,r2,128
  814bbc:	10bfe004 	addi	r2,r2,-128
  814bc0:	1000151e 	bne	r2,zero,814c18 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814bc4:	00000906 	br	814bec <lcd_write_command+0x74>
    if (--i == 0)
  814bc8:	e0bffc17 	ldw	r2,-16(fp)
  814bcc:	10bfffc4 	addi	r2,r2,-1
  814bd0:	e0bffc15 	stw	r2,-16(fp)
  814bd4:	e0bffc17 	ldw	r2,-16(fp)
  814bd8:	1000041e 	bne	r2,zero,814bec <lcd_write_command+0x74>
    {
      sp->broken = 1;
  814bdc:	e0bffe17 	ldw	r2,-8(fp)
  814be0:	00c00044 	movi	r3,1
  814be4:	10c00805 	stb	r3,32(r2)
      return;
  814be8:	00000c06 	br	814c1c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814bec:	e0bffd17 	ldw	r2,-12(fp)
  814bf0:	10800104 	addi	r2,r2,4
  814bf4:	10800037 	ldwio	r2,0(r2)
  814bf8:	1080200c 	andi	r2,r2,128
  814bfc:	103ff21e 	bne	r2,zero,814bc8 <__alt_mem_onchip_mem+0xff80cbc8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  814c00:	01001904 	movi	r4,100
  814c04:	0813ea80 	call	813ea8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  814c08:	e0bffd17 	ldw	r2,-12(fp)
  814c0c:	e0ffff03 	ldbu	r3,-4(fp)
  814c10:	10c00035 	stwio	r3,0(r2)
  814c14:	00000106 	br	814c1c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  814c18:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  814c1c:	e037883a 	mov	sp,fp
  814c20:	dfc00117 	ldw	ra,4(sp)
  814c24:	df000017 	ldw	fp,0(sp)
  814c28:	dec00204 	addi	sp,sp,8
  814c2c:	f800283a 	ret

00814c30 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  814c30:	defffa04 	addi	sp,sp,-24
  814c34:	dfc00515 	stw	ra,20(sp)
  814c38:	df000415 	stw	fp,16(sp)
  814c3c:	df000404 	addi	fp,sp,16
  814c40:	e13ffe15 	stw	r4,-8(fp)
  814c44:	2805883a 	mov	r2,r5
  814c48:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  814c4c:	e0bffe17 	ldw	r2,-8(fp)
  814c50:	10800017 	ldw	r2,0(r2)
  814c54:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  814c58:	008003f4 	movhi	r2,15
  814c5c:	10909004 	addi	r2,r2,16960
  814c60:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  814c64:	e0bffe17 	ldw	r2,-8(fp)
  814c68:	10800803 	ldbu	r2,32(r2)
  814c6c:	10803fcc 	andi	r2,r2,255
  814c70:	1080201c 	xori	r2,r2,128
  814c74:	10bfe004 	addi	r2,r2,-128
  814c78:	10001d1e 	bne	r2,zero,814cf0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814c7c:	00000906 	br	814ca4 <lcd_write_data+0x74>
    if (--i == 0)
  814c80:	e0bffc17 	ldw	r2,-16(fp)
  814c84:	10bfffc4 	addi	r2,r2,-1
  814c88:	e0bffc15 	stw	r2,-16(fp)
  814c8c:	e0bffc17 	ldw	r2,-16(fp)
  814c90:	1000041e 	bne	r2,zero,814ca4 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  814c94:	e0bffe17 	ldw	r2,-8(fp)
  814c98:	00c00044 	movi	r3,1
  814c9c:	10c00805 	stb	r3,32(r2)
      return;
  814ca0:	00001406 	br	814cf4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814ca4:	e0bffd17 	ldw	r2,-12(fp)
  814ca8:	10800104 	addi	r2,r2,4
  814cac:	10800037 	ldwio	r2,0(r2)
  814cb0:	1080200c 	andi	r2,r2,128
  814cb4:	103ff21e 	bne	r2,zero,814c80 <__alt_mem_onchip_mem+0xff80cc80>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  814cb8:	01001904 	movi	r4,100
  814cbc:	0813ea80 	call	813ea8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  814cc0:	e0bffd17 	ldw	r2,-12(fp)
  814cc4:	10800204 	addi	r2,r2,8
  814cc8:	1007883a 	mov	r3,r2
  814ccc:	e0bfff03 	ldbu	r2,-4(fp)
  814cd0:	18800035 	stwio	r2,0(r3)

  sp->address++;
  814cd4:	e0bffe17 	ldw	r2,-8(fp)
  814cd8:	108008c3 	ldbu	r2,35(r2)
  814cdc:	10800044 	addi	r2,r2,1
  814ce0:	1007883a 	mov	r3,r2
  814ce4:	e0bffe17 	ldw	r2,-8(fp)
  814ce8:	10c008c5 	stb	r3,35(r2)
  814cec:	00000106 	br	814cf4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  814cf0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  814cf4:	e037883a 	mov	sp,fp
  814cf8:	dfc00117 	ldw	ra,4(sp)
  814cfc:	df000017 	ldw	fp,0(sp)
  814d00:	dec00204 	addi	sp,sp,8
  814d04:	f800283a 	ret

00814d08 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  814d08:	defffc04 	addi	sp,sp,-16
  814d0c:	dfc00315 	stw	ra,12(sp)
  814d10:	df000215 	stw	fp,8(sp)
  814d14:	df000204 	addi	fp,sp,8
  814d18:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  814d1c:	01400044 	movi	r5,1
  814d20:	e13fff17 	ldw	r4,-4(fp)
  814d24:	0814b780 	call	814b78 <lcd_write_command>

  sp->x = 0;
  814d28:	e0bfff17 	ldw	r2,-4(fp)
  814d2c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  814d30:	e0bfff17 	ldw	r2,-4(fp)
  814d34:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  814d38:	e0bfff17 	ldw	r2,-4(fp)
  814d3c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814d40:	e03ffe15 	stw	zero,-8(fp)
  814d44:	00001b06 	br	814db4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  814d48:	e0bffe17 	ldw	r2,-8(fp)
  814d4c:	108018e4 	muli	r2,r2,99
  814d50:	10801004 	addi	r2,r2,64
  814d54:	e0ffff17 	ldw	r3,-4(fp)
  814d58:	1885883a 	add	r2,r3,r2
  814d5c:	01801444 	movi	r6,81
  814d60:	01400804 	movi	r5,32
  814d64:	1009883a 	mov	r4,r2
  814d68:	0808ebc0 	call	808ebc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  814d6c:	e0bffe17 	ldw	r2,-8(fp)
  814d70:	108018e4 	muli	r2,r2,99
  814d74:	10800c04 	addi	r2,r2,48
  814d78:	e0ffff17 	ldw	r3,-4(fp)
  814d7c:	1885883a 	add	r2,r3,r2
  814d80:	01800404 	movi	r6,16
  814d84:	01400804 	movi	r5,32
  814d88:	1009883a 	mov	r4,r2
  814d8c:	0808ebc0 	call	808ebc <memset>
    sp->line[y].width = 0;
  814d90:	e0ffff17 	ldw	r3,-4(fp)
  814d94:	e0bffe17 	ldw	r2,-8(fp)
  814d98:	108018e4 	muli	r2,r2,99
  814d9c:	1885883a 	add	r2,r3,r2
  814da0:	10802444 	addi	r2,r2,145
  814da4:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814da8:	e0bffe17 	ldw	r2,-8(fp)
  814dac:	10800044 	addi	r2,r2,1
  814db0:	e0bffe15 	stw	r2,-8(fp)
  814db4:	e0bffe17 	ldw	r2,-8(fp)
  814db8:	10800090 	cmplti	r2,r2,2
  814dbc:	103fe21e 	bne	r2,zero,814d48 <__alt_mem_onchip_mem+0xff80cd48>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  814dc0:	0001883a 	nop
  814dc4:	e037883a 	mov	sp,fp
  814dc8:	dfc00117 	ldw	ra,4(sp)
  814dcc:	df000017 	ldw	fp,0(sp)
  814dd0:	dec00204 	addi	sp,sp,8
  814dd4:	f800283a 	ret

00814dd8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  814dd8:	defff704 	addi	sp,sp,-36
  814ddc:	dfc00815 	stw	ra,32(sp)
  814de0:	df000715 	stw	fp,28(sp)
  814de4:	df000704 	addi	fp,sp,28
  814de8:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  814dec:	e0bfff17 	ldw	r2,-4(fp)
  814df0:	10800943 	ldbu	r2,37(r2)
  814df4:	10803fcc 	andi	r2,r2,255
  814df8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814dfc:	e03ff915 	stw	zero,-28(fp)
  814e00:	00006706 	br	814fa0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  814e04:	e0ffff17 	ldw	r3,-4(fp)
  814e08:	e0bff917 	ldw	r2,-28(fp)
  814e0c:	108018e4 	muli	r2,r2,99
  814e10:	1885883a 	add	r2,r3,r2
  814e14:	10802444 	addi	r2,r2,145
  814e18:	10800003 	ldbu	r2,0(r2)
  814e1c:	10803fcc 	andi	r2,r2,255
  814e20:	1080201c 	xori	r2,r2,128
  814e24:	10bfe004 	addi	r2,r2,-128
  814e28:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  814e2c:	e0ffff17 	ldw	r3,-4(fp)
  814e30:	e0bff917 	ldw	r2,-28(fp)
  814e34:	108018e4 	muli	r2,r2,99
  814e38:	1885883a 	add	r2,r3,r2
  814e3c:	10802484 	addi	r2,r2,146
  814e40:	10800003 	ldbu	r2,0(r2)
  814e44:	10c03fcc 	andi	r3,r2,255
  814e48:	e0bffc17 	ldw	r2,-16(fp)
  814e4c:	1885383a 	mul	r2,r3,r2
  814e50:	1005d23a 	srai	r2,r2,8
  814e54:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  814e58:	e0fffb17 	ldw	r3,-20(fp)
  814e5c:	e0bffd17 	ldw	r2,-12(fp)
  814e60:	18800116 	blt	r3,r2,814e68 <lcd_repaint_screen+0x90>
      offset = 0;
  814e64:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  814e68:	e03ffa15 	stw	zero,-24(fp)
  814e6c:	00004606 	br	814f88 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  814e70:	e0fffa17 	ldw	r3,-24(fp)
  814e74:	e0bffb17 	ldw	r2,-20(fp)
  814e78:	1885883a 	add	r2,r3,r2
  814e7c:	e17ffd17 	ldw	r5,-12(fp)
  814e80:	1009883a 	mov	r4,r2
  814e84:	0811d140 	call	811d14 <__modsi3>
  814e88:	1009883a 	mov	r4,r2
  814e8c:	e0ffff17 	ldw	r3,-4(fp)
  814e90:	e0bff917 	ldw	r2,-28(fp)
  814e94:	108018e4 	muli	r2,r2,99
  814e98:	1885883a 	add	r2,r3,r2
  814e9c:	1105883a 	add	r2,r2,r4
  814ea0:	10801004 	addi	r2,r2,64
  814ea4:	10800003 	ldbu	r2,0(r2)
  814ea8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  814eac:	e0ffff17 	ldw	r3,-4(fp)
  814eb0:	e0bff917 	ldw	r2,-28(fp)
  814eb4:	108018e4 	muli	r2,r2,99
  814eb8:	1887883a 	add	r3,r3,r2
  814ebc:	e0bffa17 	ldw	r2,-24(fp)
  814ec0:	1885883a 	add	r2,r3,r2
  814ec4:	10800c04 	addi	r2,r2,48
  814ec8:	10800003 	ldbu	r2,0(r2)
  814ecc:	10c03fcc 	andi	r3,r2,255
  814ed0:	18c0201c 	xori	r3,r3,128
  814ed4:	18ffe004 	addi	r3,r3,-128
  814ed8:	e0bffe07 	ldb	r2,-8(fp)
  814edc:	18802726 	beq	r3,r2,814f7c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  814ee0:	e0fff917 	ldw	r3,-28(fp)
  814ee4:	d0a01804 	addi	r2,gp,-32672
  814ee8:	1885883a 	add	r2,r3,r2
  814eec:	10800003 	ldbu	r2,0(r2)
  814ef0:	1007883a 	mov	r3,r2
  814ef4:	e0bffa17 	ldw	r2,-24(fp)
  814ef8:	1885883a 	add	r2,r3,r2
  814efc:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  814f00:	e0fffe43 	ldbu	r3,-7(fp)
  814f04:	e0bfff17 	ldw	r2,-4(fp)
  814f08:	108008c3 	ldbu	r2,35(r2)
  814f0c:	10803fcc 	andi	r2,r2,255
  814f10:	1080201c 	xori	r2,r2,128
  814f14:	10bfe004 	addi	r2,r2,-128
  814f18:	18800a26 	beq	r3,r2,814f44 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  814f1c:	e0fffe43 	ldbu	r3,-7(fp)
  814f20:	00bfe004 	movi	r2,-128
  814f24:	1884b03a 	or	r2,r3,r2
  814f28:	10803fcc 	andi	r2,r2,255
  814f2c:	100b883a 	mov	r5,r2
  814f30:	e13fff17 	ldw	r4,-4(fp)
  814f34:	0814b780 	call	814b78 <lcd_write_command>
          sp->address = address;
  814f38:	e0fffe43 	ldbu	r3,-7(fp)
  814f3c:	e0bfff17 	ldw	r2,-4(fp)
  814f40:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  814f44:	e0bffe03 	ldbu	r2,-8(fp)
  814f48:	10803fcc 	andi	r2,r2,255
  814f4c:	100b883a 	mov	r5,r2
  814f50:	e13fff17 	ldw	r4,-4(fp)
  814f54:	0814c300 	call	814c30 <lcd_write_data>
        sp->line[y].visible[x] = c;
  814f58:	e0ffff17 	ldw	r3,-4(fp)
  814f5c:	e0bff917 	ldw	r2,-28(fp)
  814f60:	108018e4 	muli	r2,r2,99
  814f64:	1887883a 	add	r3,r3,r2
  814f68:	e0bffa17 	ldw	r2,-24(fp)
  814f6c:	1885883a 	add	r2,r3,r2
  814f70:	10800c04 	addi	r2,r2,48
  814f74:	e0fffe03 	ldbu	r3,-8(fp)
  814f78:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  814f7c:	e0bffa17 	ldw	r2,-24(fp)
  814f80:	10800044 	addi	r2,r2,1
  814f84:	e0bffa15 	stw	r2,-24(fp)
  814f88:	e0bffa17 	ldw	r2,-24(fp)
  814f8c:	10800410 	cmplti	r2,r2,16
  814f90:	103fb71e 	bne	r2,zero,814e70 <__alt_mem_onchip_mem+0xff80ce70>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814f94:	e0bff917 	ldw	r2,-28(fp)
  814f98:	10800044 	addi	r2,r2,1
  814f9c:	e0bff915 	stw	r2,-28(fp)
  814fa0:	e0bff917 	ldw	r2,-28(fp)
  814fa4:	10800090 	cmplti	r2,r2,2
  814fa8:	103f961e 	bne	r2,zero,814e04 <__alt_mem_onchip_mem+0xff80ce04>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  814fac:	0001883a 	nop
  814fb0:	e037883a 	mov	sp,fp
  814fb4:	dfc00117 	ldw	ra,4(sp)
  814fb8:	df000017 	ldw	fp,0(sp)
  814fbc:	dec00204 	addi	sp,sp,8
  814fc0:	f800283a 	ret

00814fc4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  814fc4:	defffc04 	addi	sp,sp,-16
  814fc8:	dfc00315 	stw	ra,12(sp)
  814fcc:	df000215 	stw	fp,8(sp)
  814fd0:	df000204 	addi	fp,sp,8
  814fd4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814fd8:	e03ffe15 	stw	zero,-8(fp)
  814fdc:	00001d06 	br	815054 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  814fe0:	e0bffe17 	ldw	r2,-8(fp)
  814fe4:	00800f16 	blt	zero,r2,815024 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  814fe8:	e0bffe17 	ldw	r2,-8(fp)
  814fec:	108018e4 	muli	r2,r2,99
  814ff0:	10801004 	addi	r2,r2,64
  814ff4:	e0ffff17 	ldw	r3,-4(fp)
  814ff8:	1889883a 	add	r4,r3,r2
  814ffc:	e0bffe17 	ldw	r2,-8(fp)
  815000:	10800044 	addi	r2,r2,1
  815004:	108018e4 	muli	r2,r2,99
  815008:	10801004 	addi	r2,r2,64
  81500c:	e0ffff17 	ldw	r3,-4(fp)
  815010:	1885883a 	add	r2,r3,r2
  815014:	01801404 	movi	r6,80
  815018:	100b883a 	mov	r5,r2
  81501c:	080dd300 	call	80dd30 <memcpy>
  815020:	00000906 	br	815048 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  815024:	e0bffe17 	ldw	r2,-8(fp)
  815028:	108018e4 	muli	r2,r2,99
  81502c:	10801004 	addi	r2,r2,64
  815030:	e0ffff17 	ldw	r3,-4(fp)
  815034:	1885883a 	add	r2,r3,r2
  815038:	01801404 	movi	r6,80
  81503c:	01400804 	movi	r5,32
  815040:	1009883a 	mov	r4,r2
  815044:	0808ebc0 	call	808ebc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815048:	e0bffe17 	ldw	r2,-8(fp)
  81504c:	10800044 	addi	r2,r2,1
  815050:	e0bffe15 	stw	r2,-8(fp)
  815054:	e0bffe17 	ldw	r2,-8(fp)
  815058:	10800090 	cmplti	r2,r2,2
  81505c:	103fe01e 	bne	r2,zero,814fe0 <__alt_mem_onchip_mem+0xff80cfe0>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  815060:	e0bfff17 	ldw	r2,-4(fp)
  815064:	10800883 	ldbu	r2,34(r2)
  815068:	10bfffc4 	addi	r2,r2,-1
  81506c:	1007883a 	mov	r3,r2
  815070:	e0bfff17 	ldw	r2,-4(fp)
  815074:	10c00885 	stb	r3,34(r2)
}
  815078:	0001883a 	nop
  81507c:	e037883a 	mov	sp,fp
  815080:	dfc00117 	ldw	ra,4(sp)
  815084:	df000017 	ldw	fp,0(sp)
  815088:	dec00204 	addi	sp,sp,8
  81508c:	f800283a 	ret

00815090 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  815090:	defff904 	addi	sp,sp,-28
  815094:	dfc00615 	stw	ra,24(sp)
  815098:	df000515 	stw	fp,20(sp)
  81509c:	df000504 	addi	fp,sp,20
  8150a0:	e13ffe15 	stw	r4,-8(fp)
  8150a4:	2805883a 	mov	r2,r5
  8150a8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8150ac:	e03ffb15 	stw	zero,-20(fp)
  8150b0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8150b4:	e0bffe17 	ldw	r2,-8(fp)
  8150b8:	10800a03 	ldbu	r2,40(r2)
  8150bc:	10803fcc 	andi	r2,r2,255
  8150c0:	1080201c 	xori	r2,r2,128
  8150c4:	10bfe004 	addi	r2,r2,-128
  8150c8:	108016d8 	cmpnei	r2,r2,91
  8150cc:	1000411e 	bne	r2,zero,8151d4 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8150d0:	e0bffe17 	ldw	r2,-8(fp)
  8150d4:	10800a04 	addi	r2,r2,40
  8150d8:	10800044 	addi	r2,r2,1
  8150dc:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8150e0:	00000c06 	br	815114 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8150e4:	e0bffb17 	ldw	r2,-20(fp)
  8150e8:	10c002a4 	muli	r3,r2,10
  8150ec:	e0bffd17 	ldw	r2,-12(fp)
  8150f0:	11000044 	addi	r4,r2,1
  8150f4:	e13ffd15 	stw	r4,-12(fp)
  8150f8:	10800003 	ldbu	r2,0(r2)
  8150fc:	10803fcc 	andi	r2,r2,255
  815100:	1080201c 	xori	r2,r2,128
  815104:	10bfe004 	addi	r2,r2,-128
  815108:	10bff404 	addi	r2,r2,-48
  81510c:	1885883a 	add	r2,r3,r2
  815110:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  815114:	d0e01917 	ldw	r3,-32668(gp)
  815118:	e0bffd17 	ldw	r2,-12(fp)
  81511c:	10800003 	ldbu	r2,0(r2)
  815120:	10803fcc 	andi	r2,r2,255
  815124:	1080201c 	xori	r2,r2,128
  815128:	10bfe004 	addi	r2,r2,-128
  81512c:	10800044 	addi	r2,r2,1
  815130:	1885883a 	add	r2,r3,r2
  815134:	10800003 	ldbu	r2,0(r2)
  815138:	10803fcc 	andi	r2,r2,255
  81513c:	1080010c 	andi	r2,r2,4
  815140:	103fe81e 	bne	r2,zero,8150e4 <__alt_mem_onchip_mem+0xff80d0e4>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  815144:	e0bffd17 	ldw	r2,-12(fp)
  815148:	10800003 	ldbu	r2,0(r2)
  81514c:	10803fcc 	andi	r2,r2,255
  815150:	1080201c 	xori	r2,r2,128
  815154:	10bfe004 	addi	r2,r2,-128
  815158:	10800ed8 	cmpnei	r2,r2,59
  81515c:	10001f1e 	bne	r2,zero,8151dc <lcd_handle_escape+0x14c>
    {
      ptr++;
  815160:	e0bffd17 	ldw	r2,-12(fp)
  815164:	10800044 	addi	r2,r2,1
  815168:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  81516c:	00000c06 	br	8151a0 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  815170:	e0bffc17 	ldw	r2,-16(fp)
  815174:	10c002a4 	muli	r3,r2,10
  815178:	e0bffd17 	ldw	r2,-12(fp)
  81517c:	11000044 	addi	r4,r2,1
  815180:	e13ffd15 	stw	r4,-12(fp)
  815184:	10800003 	ldbu	r2,0(r2)
  815188:	10803fcc 	andi	r2,r2,255
  81518c:	1080201c 	xori	r2,r2,128
  815190:	10bfe004 	addi	r2,r2,-128
  815194:	10bff404 	addi	r2,r2,-48
  815198:	1885883a 	add	r2,r3,r2
  81519c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8151a0:	d0e01917 	ldw	r3,-32668(gp)
  8151a4:	e0bffd17 	ldw	r2,-12(fp)
  8151a8:	10800003 	ldbu	r2,0(r2)
  8151ac:	10803fcc 	andi	r2,r2,255
  8151b0:	1080201c 	xori	r2,r2,128
  8151b4:	10bfe004 	addi	r2,r2,-128
  8151b8:	10800044 	addi	r2,r2,1
  8151bc:	1885883a 	add	r2,r3,r2
  8151c0:	10800003 	ldbu	r2,0(r2)
  8151c4:	10803fcc 	andi	r2,r2,255
  8151c8:	1080010c 	andi	r2,r2,4
  8151cc:	103fe81e 	bne	r2,zero,815170 <__alt_mem_onchip_mem+0xff80d170>
  8151d0:	00000206 	br	8151dc <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8151d4:	00bfffc4 	movi	r2,-1
  8151d8:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  8151dc:	e0bfff07 	ldb	r2,-4(fp)
  8151e0:	10c012a0 	cmpeqi	r3,r2,74
  8151e4:	1800291e 	bne	r3,zero,81528c <lcd_handle_escape+0x1fc>
  8151e8:	10c012c8 	cmpgei	r3,r2,75
  8151ec:	1800031e 	bne	r3,zero,8151fc <lcd_handle_escape+0x16c>
  8151f0:	10801220 	cmpeqi	r2,r2,72
  8151f4:	1000061e 	bne	r2,zero,815210 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8151f8:	00004a06 	br	815324 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  8151fc:	10c012e0 	cmpeqi	r3,r2,75
  815200:	1800281e 	bne	r3,zero,8152a4 <lcd_handle_escape+0x214>
  815204:	108019a0 	cmpeqi	r2,r2,102
  815208:	1000011e 	bne	r2,zero,815210 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  81520c:	00004506 	br	815324 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  815210:	e0bffc17 	ldw	r2,-16(fp)
  815214:	0080050e 	bge	zero,r2,81522c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  815218:	e0bffc17 	ldw	r2,-16(fp)
  81521c:	10bfffc4 	addi	r2,r2,-1
  815220:	1007883a 	mov	r3,r2
  815224:	e0bffe17 	ldw	r2,-8(fp)
  815228:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  81522c:	e0bffb17 	ldw	r2,-20(fp)
  815230:	0080370e 	bge	zero,r2,815310 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  815234:	e0bffb17 	ldw	r2,-20(fp)
  815238:	10bfffc4 	addi	r2,r2,-1
  81523c:	1007883a 	mov	r3,r2
  815240:	e0bffe17 	ldw	r2,-8(fp)
  815244:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  815248:	e0bffe17 	ldw	r2,-8(fp)
  81524c:	10800883 	ldbu	r2,34(r2)
  815250:	10803fcc 	andi	r2,r2,255
  815254:	10800170 	cmpltui	r2,r2,5
  815258:	1000061e 	bne	r2,zero,815274 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  81525c:	e0bffe17 	ldw	r2,-8(fp)
  815260:	00c00104 	movi	r3,4
  815264:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  815268:	00000206 	br	815274 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  81526c:	e13ffe17 	ldw	r4,-8(fp)
  815270:	0814fc40 	call	814fc4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  815274:	e0bffe17 	ldw	r2,-8(fp)
  815278:	10800883 	ldbu	r2,34(r2)
  81527c:	10803fcc 	andi	r2,r2,255
  815280:	108000e8 	cmpgeui	r2,r2,3
  815284:	103ff91e 	bne	r2,zero,81526c <__alt_mem_onchip_mem+0xff80d26c>
        lcd_scroll_up(sp);
    }
    break;
  815288:	00002106 	br	815310 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  81528c:	e0bffb17 	ldw	r2,-20(fp)
  815290:	10800098 	cmpnei	r2,r2,2
  815294:	1000201e 	bne	r2,zero,815318 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  815298:	e13ffe17 	ldw	r4,-8(fp)
  81529c:	0814d080 	call	814d08 <lcd_clear_screen>
    break;
  8152a0:	00001d06 	br	815318 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8152a4:	e0bffb17 	ldw	r2,-20(fp)
  8152a8:	00801d16 	blt	zero,r2,815320 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8152ac:	e0bffe17 	ldw	r2,-8(fp)
  8152b0:	10800843 	ldbu	r2,33(r2)
  8152b4:	10803fcc 	andi	r2,r2,255
  8152b8:	10801428 	cmpgeui	r2,r2,80
  8152bc:	1000181e 	bne	r2,zero,815320 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8152c0:	e0bffe17 	ldw	r2,-8(fp)
  8152c4:	10800883 	ldbu	r2,34(r2)
  8152c8:	10803fcc 	andi	r2,r2,255
  8152cc:	108018e4 	muli	r2,r2,99
  8152d0:	10801004 	addi	r2,r2,64
  8152d4:	e0fffe17 	ldw	r3,-8(fp)
  8152d8:	1887883a 	add	r3,r3,r2
  8152dc:	e0bffe17 	ldw	r2,-8(fp)
  8152e0:	10800843 	ldbu	r2,33(r2)
  8152e4:	10803fcc 	andi	r2,r2,255
  8152e8:	1889883a 	add	r4,r3,r2
  8152ec:	e0bffe17 	ldw	r2,-8(fp)
  8152f0:	10800843 	ldbu	r2,33(r2)
  8152f4:	10803fcc 	andi	r2,r2,255
  8152f8:	00c01404 	movi	r3,80
  8152fc:	1885c83a 	sub	r2,r3,r2
  815300:	100d883a 	mov	r6,r2
  815304:	01400804 	movi	r5,32
  815308:	0808ebc0 	call	808ebc <memset>
    }
    break;
  81530c:	00000406 	br	815320 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  815310:	0001883a 	nop
  815314:	00000306 	br	815324 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  815318:	0001883a 	nop
  81531c:	00000106 	br	815324 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  815320:	0001883a 	nop
  }
}
  815324:	0001883a 	nop
  815328:	e037883a 	mov	sp,fp
  81532c:	dfc00117 	ldw	ra,4(sp)
  815330:	df000017 	ldw	fp,0(sp)
  815334:	dec00204 	addi	sp,sp,8
  815338:	f800283a 	ret

0081533c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  81533c:	defff304 	addi	sp,sp,-52
  815340:	dfc00c15 	stw	ra,48(sp)
  815344:	df000b15 	stw	fp,44(sp)
  815348:	df000b04 	addi	fp,sp,44
  81534c:	e13ffc15 	stw	r4,-16(fp)
  815350:	e17ffd15 	stw	r5,-12(fp)
  815354:	e1bffe15 	stw	r6,-8(fp)
  815358:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  81535c:	e0bffe17 	ldw	r2,-8(fp)
  815360:	e0fffd17 	ldw	r3,-12(fp)
  815364:	1885883a 	add	r2,r3,r2
  815368:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  81536c:	e0bffc17 	ldw	r2,-16(fp)
  815370:	00c00044 	movi	r3,1
  815374:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  815378:	00009906 	br	8155e0 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  81537c:	e0bffd17 	ldw	r2,-12(fp)
  815380:	10800003 	ldbu	r2,0(r2)
  815384:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  815388:	e0bffc17 	ldw	r2,-16(fp)
  81538c:	10800903 	ldbu	r2,36(r2)
  815390:	10803fcc 	andi	r2,r2,255
  815394:	1080201c 	xori	r2,r2,128
  815398:	10bfe004 	addi	r2,r2,-128
  81539c:	10003716 	blt	r2,zero,81547c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8153a0:	e0bffc17 	ldw	r2,-16(fp)
  8153a4:	10800903 	ldbu	r2,36(r2)
  8153a8:	10803fcc 	andi	r2,r2,255
  8153ac:	1080201c 	xori	r2,r2,128
  8153b0:	10bfe004 	addi	r2,r2,-128
  8153b4:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8153b8:	e0bffa17 	ldw	r2,-24(fp)
  8153bc:	1000031e 	bne	r2,zero,8153cc <altera_avalon_lcd_16207_write+0x90>
  8153c0:	e0bff907 	ldb	r2,-28(fp)
  8153c4:	108016d8 	cmpnei	r2,r2,91
  8153c8:	10000d1e 	bne	r2,zero,815400 <altera_avalon_lcd_16207_write+0xc4>
  8153cc:	e0bffa17 	ldw	r2,-24(fp)
  8153d0:	10001826 	beq	r2,zero,815434 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8153d4:	d0e01917 	ldw	r3,-32668(gp)
  8153d8:	e0bff907 	ldb	r2,-28(fp)
  8153dc:	10800044 	addi	r2,r2,1
  8153e0:	1885883a 	add	r2,r3,r2
  8153e4:	10800003 	ldbu	r2,0(r2)
  8153e8:	10803fcc 	andi	r2,r2,255
  8153ec:	1080010c 	andi	r2,r2,4
  8153f0:	1000101e 	bne	r2,zero,815434 <altera_avalon_lcd_16207_write+0xf8>
  8153f4:	e0bff907 	ldb	r2,-28(fp)
  8153f8:	10800ee0 	cmpeqi	r2,r2,59
  8153fc:	10000d1e 	bne	r2,zero,815434 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  815400:	e0fffc17 	ldw	r3,-16(fp)
  815404:	e0bffa17 	ldw	r2,-24(fp)
  815408:	1885883a 	add	r2,r3,r2
  81540c:	10800a04 	addi	r2,r2,40
  815410:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  815414:	e0bff907 	ldb	r2,-28(fp)
  815418:	100b883a 	mov	r5,r2
  81541c:	e13ffc17 	ldw	r4,-16(fp)
  815420:	08150900 	call	815090 <lcd_handle_escape>

        sp->esccount = -1;
  815424:	e0bffc17 	ldw	r2,-16(fp)
  815428:	00ffffc4 	movi	r3,-1
  81542c:	10c00905 	stb	r3,36(r2)
  815430:	00006806 	br	8155d4 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  815434:	e0bffc17 	ldw	r2,-16(fp)
  815438:	10800903 	ldbu	r2,36(r2)
  81543c:	10803fcc 	andi	r2,r2,255
  815440:	108001e8 	cmpgeui	r2,r2,7
  815444:	1000631e 	bne	r2,zero,8155d4 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  815448:	e0fffc17 	ldw	r3,-16(fp)
  81544c:	e0bffa17 	ldw	r2,-24(fp)
  815450:	1885883a 	add	r2,r3,r2
  815454:	10800a04 	addi	r2,r2,40
  815458:	e0fff903 	ldbu	r3,-28(fp)
  81545c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  815460:	e0bffc17 	ldw	r2,-16(fp)
  815464:	10800903 	ldbu	r2,36(r2)
  815468:	10800044 	addi	r2,r2,1
  81546c:	1007883a 	mov	r3,r2
  815470:	e0bffc17 	ldw	r2,-16(fp)
  815474:	10c00905 	stb	r3,36(r2)
  815478:	00005606 	br	8155d4 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  81547c:	e0bff907 	ldb	r2,-28(fp)
  815480:	108006d8 	cmpnei	r2,r2,27
  815484:	1000031e 	bne	r2,zero,815494 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  815488:	e0bffc17 	ldw	r2,-16(fp)
  81548c:	10000905 	stb	zero,36(r2)
  815490:	00005006 	br	8155d4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  815494:	e0bff907 	ldb	r2,-28(fp)
  815498:	10800358 	cmpnei	r2,r2,13
  81549c:	1000031e 	bne	r2,zero,8154ac <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8154a0:	e0bffc17 	ldw	r2,-16(fp)
  8154a4:	10000845 	stb	zero,33(r2)
  8154a8:	00004a06 	br	8155d4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8154ac:	e0bff907 	ldb	r2,-28(fp)
  8154b0:	10800298 	cmpnei	r2,r2,10
  8154b4:	1000101e 	bne	r2,zero,8154f8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8154b8:	e0bffc17 	ldw	r2,-16(fp)
  8154bc:	10000845 	stb	zero,33(r2)
      sp->y++;
  8154c0:	e0bffc17 	ldw	r2,-16(fp)
  8154c4:	10800883 	ldbu	r2,34(r2)
  8154c8:	10800044 	addi	r2,r2,1
  8154cc:	1007883a 	mov	r3,r2
  8154d0:	e0bffc17 	ldw	r2,-16(fp)
  8154d4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8154d8:	e0bffc17 	ldw	r2,-16(fp)
  8154dc:	10800883 	ldbu	r2,34(r2)
  8154e0:	10803fcc 	andi	r2,r2,255
  8154e4:	108000f0 	cmpltui	r2,r2,3
  8154e8:	10003a1e 	bne	r2,zero,8155d4 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8154ec:	e13ffc17 	ldw	r4,-16(fp)
  8154f0:	0814fc40 	call	814fc4 <lcd_scroll_up>
  8154f4:	00003706 	br	8155d4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8154f8:	e0bff907 	ldb	r2,-28(fp)
  8154fc:	10800218 	cmpnei	r2,r2,8
  815500:	10000b1e 	bne	r2,zero,815530 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  815504:	e0bffc17 	ldw	r2,-16(fp)
  815508:	10800843 	ldbu	r2,33(r2)
  81550c:	10803fcc 	andi	r2,r2,255
  815510:	10003026 	beq	r2,zero,8155d4 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  815514:	e0bffc17 	ldw	r2,-16(fp)
  815518:	10800843 	ldbu	r2,33(r2)
  81551c:	10bfffc4 	addi	r2,r2,-1
  815520:	1007883a 	mov	r3,r2
  815524:	e0bffc17 	ldw	r2,-16(fp)
  815528:	10c00845 	stb	r3,33(r2)
  81552c:	00002906 	br	8155d4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  815530:	d0e01917 	ldw	r3,-32668(gp)
  815534:	e0bff907 	ldb	r2,-28(fp)
  815538:	10800044 	addi	r2,r2,1
  81553c:	1885883a 	add	r2,r3,r2
  815540:	10800003 	ldbu	r2,0(r2)
  815544:	10803fcc 	andi	r2,r2,255
  815548:	1080201c 	xori	r2,r2,128
  81554c:	10bfe004 	addi	r2,r2,-128
  815550:	108025cc 	andi	r2,r2,151
  815554:	10001f26 	beq	r2,zero,8155d4 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  815558:	e0bffc17 	ldw	r2,-16(fp)
  81555c:	10800883 	ldbu	r2,34(r2)
  815560:	10803fcc 	andi	r2,r2,255
  815564:	108000b0 	cmpltui	r2,r2,2
  815568:	1000021e 	bne	r2,zero,815574 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  81556c:	e13ffc17 	ldw	r4,-16(fp)
  815570:	0814fc40 	call	814fc4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  815574:	e0bffc17 	ldw	r2,-16(fp)
  815578:	10800843 	ldbu	r2,33(r2)
  81557c:	10803fcc 	andi	r2,r2,255
  815580:	10801428 	cmpgeui	r2,r2,80
  815584:	10000d1e 	bne	r2,zero,8155bc <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  815588:	e0bffc17 	ldw	r2,-16(fp)
  81558c:	10800883 	ldbu	r2,34(r2)
  815590:	10c03fcc 	andi	r3,r2,255
  815594:	e0bffc17 	ldw	r2,-16(fp)
  815598:	10800843 	ldbu	r2,33(r2)
  81559c:	10803fcc 	andi	r2,r2,255
  8155a0:	e13ffc17 	ldw	r4,-16(fp)
  8155a4:	18c018e4 	muli	r3,r3,99
  8155a8:	20c7883a 	add	r3,r4,r3
  8155ac:	1885883a 	add	r2,r3,r2
  8155b0:	10801004 	addi	r2,r2,64
  8155b4:	e0fff903 	ldbu	r3,-28(fp)
  8155b8:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8155bc:	e0bffc17 	ldw	r2,-16(fp)
  8155c0:	10800843 	ldbu	r2,33(r2)
  8155c4:	10800044 	addi	r2,r2,1
  8155c8:	1007883a 	mov	r3,r2
  8155cc:	e0bffc17 	ldw	r2,-16(fp)
  8155d0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8155d4:	e0bffd17 	ldw	r2,-12(fp)
  8155d8:	10800044 	addi	r2,r2,1
  8155dc:	e0bffd15 	stw	r2,-12(fp)
  8155e0:	e0fffd17 	ldw	r3,-12(fp)
  8155e4:	e0bff817 	ldw	r2,-32(fp)
  8155e8:	18bf6436 	bltu	r3,r2,81537c <__alt_mem_onchip_mem+0xff80d37c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8155ec:	00800404 	movi	r2,16
  8155f0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8155f4:	e03ff515 	stw	zero,-44(fp)
  8155f8:	00003706 	br	8156d8 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8155fc:	00801404 	movi	r2,80
  815600:	e0bff715 	stw	r2,-36(fp)
  815604:	00001106 	br	81564c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  815608:	e0bff717 	ldw	r2,-36(fp)
  81560c:	10bfffc4 	addi	r2,r2,-1
  815610:	e13ffc17 	ldw	r4,-16(fp)
  815614:	e0fff517 	ldw	r3,-44(fp)
  815618:	18c018e4 	muli	r3,r3,99
  81561c:	20c7883a 	add	r3,r4,r3
  815620:	1885883a 	add	r2,r3,r2
  815624:	10801004 	addi	r2,r2,64
  815628:	10800003 	ldbu	r2,0(r2)
  81562c:	10803fcc 	andi	r2,r2,255
  815630:	1080201c 	xori	r2,r2,128
  815634:	10bfe004 	addi	r2,r2,-128
  815638:	10800820 	cmpeqi	r2,r2,32
  81563c:	10000626 	beq	r2,zero,815658 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  815640:	e0bff717 	ldw	r2,-36(fp)
  815644:	10bfffc4 	addi	r2,r2,-1
  815648:	e0bff715 	stw	r2,-36(fp)
  81564c:	e0bff717 	ldw	r2,-36(fp)
  815650:	00bfed16 	blt	zero,r2,815608 <__alt_mem_onchip_mem+0xff80d608>
  815654:	00000106 	br	81565c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  815658:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81565c:	e0bff717 	ldw	r2,-36(fp)
  815660:	10800448 	cmpgei	r2,r2,17
  815664:	1000031e 	bne	r2,zero,815674 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  815668:	00800404 	movi	r2,16
  81566c:	e0bff715 	stw	r2,-36(fp)
  815670:	00000306 	br	815680 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  815674:	e0bff717 	ldw	r2,-36(fp)
  815678:	10800044 	addi	r2,r2,1
  81567c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  815680:	e0bff717 	ldw	r2,-36(fp)
  815684:	1009883a 	mov	r4,r2
  815688:	e0fffc17 	ldw	r3,-16(fp)
  81568c:	e0bff517 	ldw	r2,-44(fp)
  815690:	108018e4 	muli	r2,r2,99
  815694:	1885883a 	add	r2,r3,r2
  815698:	10802444 	addi	r2,r2,145
  81569c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8156a0:	e0fff617 	ldw	r3,-40(fp)
  8156a4:	e0bff717 	ldw	r2,-36(fp)
  8156a8:	1880020e 	bge	r3,r2,8156b4 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8156ac:	e0bff717 	ldw	r2,-36(fp)
  8156b0:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8156b4:	e0fffc17 	ldw	r3,-16(fp)
  8156b8:	e0bff517 	ldw	r2,-44(fp)
  8156bc:	108018e4 	muli	r2,r2,99
  8156c0:	1885883a 	add	r2,r3,r2
  8156c4:	10802484 	addi	r2,r2,146
  8156c8:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8156cc:	e0bff517 	ldw	r2,-44(fp)
  8156d0:	10800044 	addi	r2,r2,1
  8156d4:	e0bff515 	stw	r2,-44(fp)
  8156d8:	e0bff517 	ldw	r2,-44(fp)
  8156dc:	10800090 	cmplti	r2,r2,2
  8156e0:	103fc61e 	bne	r2,zero,8155fc <__alt_mem_onchip_mem+0xff80d5fc>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8156e4:	e0bff617 	ldw	r2,-40(fp)
  8156e8:	10800448 	cmpgei	r2,r2,17
  8156ec:	1000031e 	bne	r2,zero,8156fc <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8156f0:	e0bffc17 	ldw	r2,-16(fp)
  8156f4:	10000985 	stb	zero,38(r2)
  8156f8:	00002e06 	br	8157b4 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8156fc:	e0bff617 	ldw	r2,-40(fp)
  815700:	1085883a 	add	r2,r2,r2
  815704:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  815708:	e0bff617 	ldw	r2,-40(fp)
  81570c:	1007883a 	mov	r3,r2
  815710:	e0bffc17 	ldw	r2,-16(fp)
  815714:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815718:	e03ff515 	stw	zero,-44(fp)
  81571c:	00002206 	br	8157a8 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  815720:	e0fffc17 	ldw	r3,-16(fp)
  815724:	e0bff517 	ldw	r2,-44(fp)
  815728:	108018e4 	muli	r2,r2,99
  81572c:	1885883a 	add	r2,r3,r2
  815730:	10802444 	addi	r2,r2,145
  815734:	10800003 	ldbu	r2,0(r2)
  815738:	10803fcc 	andi	r2,r2,255
  81573c:	1080201c 	xori	r2,r2,128
  815740:	10bfe004 	addi	r2,r2,-128
  815744:	10800450 	cmplti	r2,r2,17
  815748:	1000141e 	bne	r2,zero,81579c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81574c:	e0fffc17 	ldw	r3,-16(fp)
  815750:	e0bff517 	ldw	r2,-44(fp)
  815754:	108018e4 	muli	r2,r2,99
  815758:	1885883a 	add	r2,r3,r2
  81575c:	10802444 	addi	r2,r2,145
  815760:	10800003 	ldbu	r2,0(r2)
  815764:	10803fcc 	andi	r2,r2,255
  815768:	1080201c 	xori	r2,r2,128
  81576c:	10bfe004 	addi	r2,r2,-128
  815770:	1004923a 	slli	r2,r2,8
  815774:	e17ff617 	ldw	r5,-40(fp)
  815778:	1009883a 	mov	r4,r2
  81577c:	0811c900 	call	811c90 <__divsi3>
  815780:	1009883a 	mov	r4,r2
  815784:	e0fffc17 	ldw	r3,-16(fp)
  815788:	e0bff517 	ldw	r2,-44(fp)
  81578c:	108018e4 	muli	r2,r2,99
  815790:	1885883a 	add	r2,r3,r2
  815794:	10802484 	addi	r2,r2,146
  815798:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81579c:	e0bff517 	ldw	r2,-44(fp)
  8157a0:	10800044 	addi	r2,r2,1
  8157a4:	e0bff515 	stw	r2,-44(fp)
  8157a8:	e0bff517 	ldw	r2,-44(fp)
  8157ac:	10800090 	cmplti	r2,r2,2
  8157b0:	103fdb1e 	bne	r2,zero,815720 <__alt_mem_onchip_mem+0xff80d720>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8157b4:	e0bffc17 	ldw	r2,-16(fp)
  8157b8:	10800943 	ldbu	r2,37(r2)
  8157bc:	10803fcc 	andi	r2,r2,255
  8157c0:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8157c4:	e13ffc17 	ldw	r4,-16(fp)
  8157c8:	0814dd80 	call	814dd8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8157cc:	e0bffc17 	ldw	r2,-16(fp)
  8157d0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8157d4:	e0bffc17 	ldw	r2,-16(fp)
  8157d8:	10800943 	ldbu	r2,37(r2)
  8157dc:	10c03fcc 	andi	r3,r2,255
  8157e0:	e0bffb17 	ldw	r2,-20(fp)
  8157e4:	18800426 	beq	r3,r2,8157f8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8157e8:	e0bffc17 	ldw	r2,-16(fp)
  8157ec:	00c00044 	movi	r3,1
  8157f0:	10c009c5 	stb	r3,39(r2)
  }
  8157f4:	003fef06 	br	8157b4 <__alt_mem_onchip_mem+0xff80d7b4>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8157f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8157fc:	e0bffe17 	ldw	r2,-8(fp)
}
  815800:	e037883a 	mov	sp,fp
  815804:	dfc00117 	ldw	ra,4(sp)
  815808:	df000017 	ldw	fp,0(sp)
  81580c:	dec00204 	addi	sp,sp,8
  815810:	f800283a 	ret

00815814 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  815814:	defffc04 	addi	sp,sp,-16
  815818:	dfc00315 	stw	ra,12(sp)
  81581c:	df000215 	stw	fp,8(sp)
  815820:	df000204 	addi	fp,sp,8
  815824:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  815828:	e0bfff17 	ldw	r2,-4(fp)
  81582c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  815830:	e0bffe17 	ldw	r2,-8(fp)
  815834:	10800943 	ldbu	r2,37(r2)
  815838:	10803fcc 	andi	r2,r2,255
  81583c:	10c00044 	addi	r3,r2,1
  815840:	e0bffe17 	ldw	r2,-8(fp)
  815844:	10800983 	ldbu	r2,38(r2)
  815848:	10803fcc 	andi	r2,r2,255
  81584c:	18800316 	blt	r3,r2,81585c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  815850:	e0bffe17 	ldw	r2,-8(fp)
  815854:	10000945 	stb	zero,37(r2)
  815858:	00000606 	br	815874 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81585c:	e0bffe17 	ldw	r2,-8(fp)
  815860:	10800943 	ldbu	r2,37(r2)
  815864:	10800044 	addi	r2,r2,1
  815868:	1007883a 	mov	r3,r2
  81586c:	e0bffe17 	ldw	r2,-8(fp)
  815870:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  815874:	e0bffe17 	ldw	r2,-8(fp)
  815878:	10800983 	ldbu	r2,38(r2)
  81587c:	10803fcc 	andi	r2,r2,255
  815880:	10000826 	beq	r2,zero,8158a4 <alt_lcd_16207_timeout+0x90>
  815884:	e0bffe17 	ldw	r2,-8(fp)
  815888:	108009c3 	ldbu	r2,39(r2)
  81588c:	10803fcc 	andi	r2,r2,255
  815890:	1080201c 	xori	r2,r2,128
  815894:	10bfe004 	addi	r2,r2,-128
  815898:	1000021e 	bne	r2,zero,8158a4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  81589c:	e13ffe17 	ldw	r4,-8(fp)
  8158a0:	0814dd80 	call	814dd8 <lcd_repaint_screen>

  return sp->period;
  8158a4:	e0bffe17 	ldw	r2,-8(fp)
  8158a8:	10800717 	ldw	r2,28(r2)
}
  8158ac:	e037883a 	mov	sp,fp
  8158b0:	dfc00117 	ldw	ra,4(sp)
  8158b4:	df000017 	ldw	fp,0(sp)
  8158b8:	dec00204 	addi	sp,sp,8
  8158bc:	f800283a 	ret

008158c0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8158c0:	defffc04 	addi	sp,sp,-16
  8158c4:	dfc00315 	stw	ra,12(sp)
  8158c8:	df000215 	stw	fp,8(sp)
  8158cc:	df000204 	addi	fp,sp,8
  8158d0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8158d4:	e0bfff17 	ldw	r2,-4(fp)
  8158d8:	10800017 	ldw	r2,0(r2)
  8158dc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8158e0:	e0bfff17 	ldw	r2,-4(fp)
  8158e4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8158e8:	010ea604 	movi	r4,15000
  8158ec:	0813ea80 	call	813ea8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8158f0:	e0bffe17 	ldw	r2,-8(fp)
  8158f4:	00c00c04 	movi	r3,48
  8158f8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8158fc:	01040104 	movi	r4,4100
  815900:	0813ea80 	call	813ea8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815904:	e0bffe17 	ldw	r2,-8(fp)
  815908:	00c00c04 	movi	r3,48
  81590c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  815910:	0100fa04 	movi	r4,1000
  815914:	0813ea80 	call	813ea8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815918:	e0bffe17 	ldw	r2,-8(fp)
  81591c:	00c00c04 	movi	r3,48
  815920:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  815924:	01400e04 	movi	r5,56
  815928:	e13fff17 	ldw	r4,-4(fp)
  81592c:	0814b780 	call	814b78 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  815930:	01400204 	movi	r5,8
  815934:	e13fff17 	ldw	r4,-4(fp)
  815938:	0814b780 	call	814b78 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81593c:	e13fff17 	ldw	r4,-4(fp)
  815940:	0814d080 	call	814d08 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  815944:	01400184 	movi	r5,6
  815948:	e13fff17 	ldw	r4,-4(fp)
  81594c:	0814b780 	call	814b78 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  815950:	01400304 	movi	r5,12
  815954:	e13fff17 	ldw	r4,-4(fp)
  815958:	0814b780 	call	814b78 <lcd_write_command>

  sp->esccount = -1;
  81595c:	e0bfff17 	ldw	r2,-4(fp)
  815960:	00ffffc4 	movi	r3,-1
  815964:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  815968:	e0bfff17 	ldw	r2,-4(fp)
  81596c:	10800a04 	addi	r2,r2,40
  815970:	01800204 	movi	r6,8
  815974:	000b883a 	mov	r5,zero
  815978:	1009883a 	mov	r4,r2
  81597c:	0808ebc0 	call	808ebc <memset>

  sp->scrollpos = 0;
  815980:	e0bfff17 	ldw	r2,-4(fp)
  815984:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  815988:	e0bfff17 	ldw	r2,-4(fp)
  81598c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  815990:	e0bfff17 	ldw	r2,-4(fp)
  815994:	100009c5 	stb	zero,39(r2)
  815998:	d0a77f17 	ldw	r2,-25092(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  81599c:	01400284 	movi	r5,10
  8159a0:	1009883a 	mov	r4,r2
  8159a4:	0811d880 	call	811d88 <__udivsi3>
  8159a8:	1007883a 	mov	r3,r2
  8159ac:	e0bfff17 	ldw	r2,-4(fp)
  8159b0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8159b4:	e0bfff17 	ldw	r2,-4(fp)
  8159b8:	10c00104 	addi	r3,r2,4
  8159bc:	e0bfff17 	ldw	r2,-4(fp)
  8159c0:	10800717 	ldw	r2,28(r2)
  8159c4:	e1ffff17 	ldw	r7,-4(fp)
  8159c8:	01802074 	movhi	r6,129
  8159cc:	31960504 	addi	r6,r6,22548
  8159d0:	100b883a 	mov	r5,r2
  8159d4:	1809883a 	mov	r4,r3
  8159d8:	0812ff40 	call	812ff4 <alt_alarm_start>
}
  8159dc:	0001883a 	nop
  8159e0:	e037883a 	mov	sp,fp
  8159e4:	dfc00117 	ldw	ra,4(sp)
  8159e8:	df000017 	ldw	fp,0(sp)
  8159ec:	dec00204 	addi	sp,sp,8
  8159f0:	f800283a 	ret

008159f4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8159f4:	defffa04 	addi	sp,sp,-24
  8159f8:	dfc00515 	stw	ra,20(sp)
  8159fc:	df000415 	stw	fp,16(sp)
  815a00:	df000404 	addi	fp,sp,16
  815a04:	e13ffd15 	stw	r4,-12(fp)
  815a08:	e17ffe15 	stw	r5,-8(fp)
  815a0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  815a10:	e0bffd17 	ldw	r2,-12(fp)
  815a14:	10800017 	ldw	r2,0(r2)
  815a18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  815a1c:	e0bffc17 	ldw	r2,-16(fp)
  815a20:	10c00a04 	addi	r3,r2,40
  815a24:	e0bffd17 	ldw	r2,-12(fp)
  815a28:	10800217 	ldw	r2,8(r2)
  815a2c:	100f883a 	mov	r7,r2
  815a30:	e1bfff17 	ldw	r6,-4(fp)
  815a34:	e17ffe17 	ldw	r5,-8(fp)
  815a38:	1809883a 	mov	r4,r3
  815a3c:	081533c0 	call	81533c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  815a40:	e037883a 	mov	sp,fp
  815a44:	dfc00117 	ldw	ra,4(sp)
  815a48:	df000017 	ldw	fp,0(sp)
  815a4c:	dec00204 	addi	sp,sp,8
  815a50:	f800283a 	ret

00815a54 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  815a54:	defffa04 	addi	sp,sp,-24
  815a58:	dfc00515 	stw	ra,20(sp)
  815a5c:	df000415 	stw	fp,16(sp)
  815a60:	df000404 	addi	fp,sp,16
  815a64:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  815a68:	0007883a 	mov	r3,zero
  815a6c:	e0bfff17 	ldw	r2,-4(fp)
  815a70:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  815a74:	e0bfff17 	ldw	r2,-4(fp)
  815a78:	10800104 	addi	r2,r2,4
  815a7c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a80:	0005303a 	rdctl	r2,status
  815a84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a88:	e0fffd17 	ldw	r3,-12(fp)
  815a8c:	00bfff84 	movi	r2,-2
  815a90:	1884703a 	and	r2,r3,r2
  815a94:	1001703a 	wrctl	status,r2
  
  return context;
  815a98:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  815a9c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  815aa0:	0813da00 	call	813da0 <alt_tick>
  815aa4:	e0bffc17 	ldw	r2,-16(fp)
  815aa8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815aac:	e0bffe17 	ldw	r2,-8(fp)
  815ab0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  815ab4:	0001883a 	nop
  815ab8:	e037883a 	mov	sp,fp
  815abc:	dfc00117 	ldw	ra,4(sp)
  815ac0:	df000017 	ldw	fp,0(sp)
  815ac4:	dec00204 	addi	sp,sp,8
  815ac8:	f800283a 	ret

00815acc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  815acc:	defff804 	addi	sp,sp,-32
  815ad0:	dfc00715 	stw	ra,28(sp)
  815ad4:	df000615 	stw	fp,24(sp)
  815ad8:	df000604 	addi	fp,sp,24
  815adc:	e13ffc15 	stw	r4,-16(fp)
  815ae0:	e17ffd15 	stw	r5,-12(fp)
  815ae4:	e1bffe15 	stw	r6,-8(fp)
  815ae8:	e1ffff15 	stw	r7,-4(fp)
  815aec:	e0bfff17 	ldw	r2,-4(fp)
  815af0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  815af4:	d0a77f17 	ldw	r2,-25092(gp)
  815af8:	1000021e 	bne	r2,zero,815b04 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  815afc:	e0bffb17 	ldw	r2,-20(fp)
  815b00:	d0a77f15 	stw	r2,-25092(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  815b04:	e0bffc17 	ldw	r2,-16(fp)
  815b08:	10800104 	addi	r2,r2,4
  815b0c:	00c001c4 	movi	r3,7
  815b10:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  815b14:	d8000015 	stw	zero,0(sp)
  815b18:	e1fffc17 	ldw	r7,-16(fp)
  815b1c:	01802074 	movhi	r6,129
  815b20:	31969504 	addi	r6,r6,23124
  815b24:	e17ffe17 	ldw	r5,-8(fp)
  815b28:	e13ffd17 	ldw	r4,-12(fp)
  815b2c:	08169d00 	call	8169d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  815b30:	0001883a 	nop
  815b34:	e037883a 	mov	sp,fp
  815b38:	dfc00117 	ldw	ra,4(sp)
  815b3c:	df000017 	ldw	fp,0(sp)
  815b40:	dec00204 	addi	sp,sp,8
  815b44:	f800283a 	ret

00815b48 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  815b48:	defffa04 	addi	sp,sp,-24
  815b4c:	dfc00515 	stw	ra,20(sp)
  815b50:	df000415 	stw	fp,16(sp)
  815b54:	df000404 	addi	fp,sp,16
  815b58:	e13ffd15 	stw	r4,-12(fp)
  815b5c:	e17ffe15 	stw	r5,-8(fp)
  815b60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815b64:	e0bffd17 	ldw	r2,-12(fp)
  815b68:	10800017 	ldw	r2,0(r2)
  815b6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  815b70:	e0bffc17 	ldw	r2,-16(fp)
  815b74:	10c00a04 	addi	r3,r2,40
  815b78:	e0bffd17 	ldw	r2,-12(fp)
  815b7c:	10800217 	ldw	r2,8(r2)
  815b80:	100f883a 	mov	r7,r2
  815b84:	e1bfff17 	ldw	r6,-4(fp)
  815b88:	e17ffe17 	ldw	r5,-8(fp)
  815b8c:	1809883a 	mov	r4,r3
  815b90:	081605c0 	call	81605c <altera_avalon_uart_read>
      fd->fd_flags);
}
  815b94:	e037883a 	mov	sp,fp
  815b98:	dfc00117 	ldw	ra,4(sp)
  815b9c:	df000017 	ldw	fp,0(sp)
  815ba0:	dec00204 	addi	sp,sp,8
  815ba4:	f800283a 	ret

00815ba8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815ba8:	defffa04 	addi	sp,sp,-24
  815bac:	dfc00515 	stw	ra,20(sp)
  815bb0:	df000415 	stw	fp,16(sp)
  815bb4:	df000404 	addi	fp,sp,16
  815bb8:	e13ffd15 	stw	r4,-12(fp)
  815bbc:	e17ffe15 	stw	r5,-8(fp)
  815bc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815bc4:	e0bffd17 	ldw	r2,-12(fp)
  815bc8:	10800017 	ldw	r2,0(r2)
  815bcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  815bd0:	e0bffc17 	ldw	r2,-16(fp)
  815bd4:	10c00a04 	addi	r3,r2,40
  815bd8:	e0bffd17 	ldw	r2,-12(fp)
  815bdc:	10800217 	ldw	r2,8(r2)
  815be0:	100f883a 	mov	r7,r2
  815be4:	e1bfff17 	ldw	r6,-4(fp)
  815be8:	e17ffe17 	ldw	r5,-8(fp)
  815bec:	1809883a 	mov	r4,r3
  815bf0:	08162740 	call	816274 <altera_avalon_uart_write>
      fd->fd_flags);
}
  815bf4:	e037883a 	mov	sp,fp
  815bf8:	dfc00117 	ldw	ra,4(sp)
  815bfc:	df000017 	ldw	fp,0(sp)
  815c00:	dec00204 	addi	sp,sp,8
  815c04:	f800283a 	ret

00815c08 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  815c08:	defffc04 	addi	sp,sp,-16
  815c0c:	dfc00315 	stw	ra,12(sp)
  815c10:	df000215 	stw	fp,8(sp)
  815c14:	df000204 	addi	fp,sp,8
  815c18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815c1c:	e0bfff17 	ldw	r2,-4(fp)
  815c20:	10800017 	ldw	r2,0(r2)
  815c24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  815c28:	e0bffe17 	ldw	r2,-8(fp)
  815c2c:	10c00a04 	addi	r3,r2,40
  815c30:	e0bfff17 	ldw	r2,-4(fp)
  815c34:	10800217 	ldw	r2,8(r2)
  815c38:	100b883a 	mov	r5,r2
  815c3c:	1809883a 	mov	r4,r3
  815c40:	0815fcc0 	call	815fcc <altera_avalon_uart_close>
}
  815c44:	e037883a 	mov	sp,fp
  815c48:	dfc00117 	ldw	ra,4(sp)
  815c4c:	df000017 	ldw	fp,0(sp)
  815c50:	dec00204 	addi	sp,sp,8
  815c54:	f800283a 	ret

00815c58 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  815c58:	defff804 	addi	sp,sp,-32
  815c5c:	dfc00715 	stw	ra,28(sp)
  815c60:	df000615 	stw	fp,24(sp)
  815c64:	df000604 	addi	fp,sp,24
  815c68:	e13ffd15 	stw	r4,-12(fp)
  815c6c:	e17ffe15 	stw	r5,-8(fp)
  815c70:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  815c74:	e0bffd17 	ldw	r2,-12(fp)
  815c78:	10800017 	ldw	r2,0(r2)
  815c7c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  815c80:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815c84:	1000041e 	bne	r2,zero,815c98 <altera_avalon_uart_init+0x40>
  815c88:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  815c8c:	1000021e 	bne	r2,zero,815c98 <altera_avalon_uart_init+0x40>
  815c90:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815c94:	10000226 	beq	r2,zero,815ca0 <altera_avalon_uart_init+0x48>
  815c98:	00800044 	movi	r2,1
  815c9c:	00000106 	br	815ca4 <altera_avalon_uart_init+0x4c>
  815ca0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  815ca4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  815ca8:	e0bffc17 	ldw	r2,-16(fp)
  815cac:	10000f1e 	bne	r2,zero,815cec <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  815cb0:	e0bffd17 	ldw	r2,-12(fp)
  815cb4:	00c32004 	movi	r3,3200
  815cb8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  815cbc:	e0bffb17 	ldw	r2,-20(fp)
  815cc0:	10800304 	addi	r2,r2,12
  815cc4:	e0fffd17 	ldw	r3,-12(fp)
  815cc8:	18c00117 	ldw	r3,4(r3)
  815ccc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  815cd0:	d8000015 	stw	zero,0(sp)
  815cd4:	e1fffd17 	ldw	r7,-12(fp)
  815cd8:	01802074 	movhi	r6,129
  815cdc:	31974104 	addi	r6,r6,23812
  815ce0:	e17fff17 	ldw	r5,-4(fp)
  815ce4:	e13ffe17 	ldw	r4,-8(fp)
  815ce8:	08169d00 	call	8169d0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  815cec:	0001883a 	nop
  815cf0:	e037883a 	mov	sp,fp
  815cf4:	dfc00117 	ldw	ra,4(sp)
  815cf8:	df000017 	ldw	fp,0(sp)
  815cfc:	dec00204 	addi	sp,sp,8
  815d00:	f800283a 	ret

00815d04 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  815d04:	defffa04 	addi	sp,sp,-24
  815d08:	dfc00515 	stw	ra,20(sp)
  815d0c:	df000415 	stw	fp,16(sp)
  815d10:	df000404 	addi	fp,sp,16
  815d14:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  815d18:	e0bfff17 	ldw	r2,-4(fp)
  815d1c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  815d20:	e0bffc17 	ldw	r2,-16(fp)
  815d24:	10800017 	ldw	r2,0(r2)
  815d28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  815d2c:	e0bffd17 	ldw	r2,-12(fp)
  815d30:	10800204 	addi	r2,r2,8
  815d34:	10800037 	ldwio	r2,0(r2)
  815d38:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  815d3c:	e0bffd17 	ldw	r2,-12(fp)
  815d40:	10800204 	addi	r2,r2,8
  815d44:	0007883a 	mov	r3,zero
  815d48:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  815d4c:	e0bffd17 	ldw	r2,-12(fp)
  815d50:	10800204 	addi	r2,r2,8
  815d54:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  815d58:	e0bffe17 	ldw	r2,-8(fp)
  815d5c:	1080200c 	andi	r2,r2,128
  815d60:	10000326 	beq	r2,zero,815d70 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  815d64:	e17ffe17 	ldw	r5,-8(fp)
  815d68:	e13ffc17 	ldw	r4,-16(fp)
  815d6c:	0815da00 	call	815da0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  815d70:	e0bffe17 	ldw	r2,-8(fp)
  815d74:	1081100c 	andi	r2,r2,1088
  815d78:	10000326 	beq	r2,zero,815d88 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  815d7c:	e17ffe17 	ldw	r5,-8(fp)
  815d80:	e13ffc17 	ldw	r4,-16(fp)
  815d84:	0815e840 	call	815e84 <altera_avalon_uart_txirq>
  }
  

}
  815d88:	0001883a 	nop
  815d8c:	e037883a 	mov	sp,fp
  815d90:	dfc00117 	ldw	ra,4(sp)
  815d94:	df000017 	ldw	fp,0(sp)
  815d98:	dec00204 	addi	sp,sp,8
  815d9c:	f800283a 	ret

00815da0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  815da0:	defffc04 	addi	sp,sp,-16
  815da4:	df000315 	stw	fp,12(sp)
  815da8:	df000304 	addi	fp,sp,12
  815dac:	e13ffe15 	stw	r4,-8(fp)
  815db0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  815db4:	e0bfff17 	ldw	r2,-4(fp)
  815db8:	108000cc 	andi	r2,r2,3
  815dbc:	10002c1e 	bne	r2,zero,815e70 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  815dc0:	e0bffe17 	ldw	r2,-8(fp)
  815dc4:	10800317 	ldw	r2,12(r2)
  815dc8:	e0bffe17 	ldw	r2,-8(fp)
  815dcc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815dd0:	e0bffe17 	ldw	r2,-8(fp)
  815dd4:	10800317 	ldw	r2,12(r2)
  815dd8:	10800044 	addi	r2,r2,1
  815ddc:	10800fcc 	andi	r2,r2,63
  815de0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  815de4:	e0bffe17 	ldw	r2,-8(fp)
  815de8:	10800317 	ldw	r2,12(r2)
  815dec:	e0fffe17 	ldw	r3,-8(fp)
  815df0:	18c00017 	ldw	r3,0(r3)
  815df4:	18c00037 	ldwio	r3,0(r3)
  815df8:	1809883a 	mov	r4,r3
  815dfc:	e0fffe17 	ldw	r3,-8(fp)
  815e00:	1885883a 	add	r2,r3,r2
  815e04:	10800704 	addi	r2,r2,28
  815e08:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  815e0c:	e0bffe17 	ldw	r2,-8(fp)
  815e10:	e0fffd17 	ldw	r3,-12(fp)
  815e14:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815e18:	e0bffe17 	ldw	r2,-8(fp)
  815e1c:	10800317 	ldw	r2,12(r2)
  815e20:	10800044 	addi	r2,r2,1
  815e24:	10800fcc 	andi	r2,r2,63
  815e28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  815e2c:	e0bffe17 	ldw	r2,-8(fp)
  815e30:	10c00217 	ldw	r3,8(r2)
  815e34:	e0bffd17 	ldw	r2,-12(fp)
  815e38:	18800e1e 	bne	r3,r2,815e74 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815e3c:	e0bffe17 	ldw	r2,-8(fp)
  815e40:	10c00117 	ldw	r3,4(r2)
  815e44:	00bfdfc4 	movi	r2,-129
  815e48:	1886703a 	and	r3,r3,r2
  815e4c:	e0bffe17 	ldw	r2,-8(fp)
  815e50:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  815e54:	e0bffe17 	ldw	r2,-8(fp)
  815e58:	10800017 	ldw	r2,0(r2)
  815e5c:	10800304 	addi	r2,r2,12
  815e60:	e0fffe17 	ldw	r3,-8(fp)
  815e64:	18c00117 	ldw	r3,4(r3)
  815e68:	10c00035 	stwio	r3,0(r2)
  815e6c:	00000106 	br	815e74 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  815e70:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  815e74:	e037883a 	mov	sp,fp
  815e78:	df000017 	ldw	fp,0(sp)
  815e7c:	dec00104 	addi	sp,sp,4
  815e80:	f800283a 	ret

00815e84 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  815e84:	defffb04 	addi	sp,sp,-20
  815e88:	df000415 	stw	fp,16(sp)
  815e8c:	df000404 	addi	fp,sp,16
  815e90:	e13ffc15 	stw	r4,-16(fp)
  815e94:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  815e98:	e0bffc17 	ldw	r2,-16(fp)
  815e9c:	10c00417 	ldw	r3,16(r2)
  815ea0:	e0bffc17 	ldw	r2,-16(fp)
  815ea4:	10800517 	ldw	r2,20(r2)
  815ea8:	18803226 	beq	r3,r2,815f74 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815eac:	e0bffc17 	ldw	r2,-16(fp)
  815eb0:	10800617 	ldw	r2,24(r2)
  815eb4:	1080008c 	andi	r2,r2,2
  815eb8:	10000326 	beq	r2,zero,815ec8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815ebc:	e0bffd17 	ldw	r2,-12(fp)
  815ec0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815ec4:	10001d26 	beq	r2,zero,815f3c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  815ec8:	e0bffc17 	ldw	r2,-16(fp)
  815ecc:	10800417 	ldw	r2,16(r2)
  815ed0:	e0bffc17 	ldw	r2,-16(fp)
  815ed4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  815ed8:	e0bffc17 	ldw	r2,-16(fp)
  815edc:	10800017 	ldw	r2,0(r2)
  815ee0:	10800104 	addi	r2,r2,4
  815ee4:	e0fffc17 	ldw	r3,-16(fp)
  815ee8:	18c00417 	ldw	r3,16(r3)
  815eec:	e13ffc17 	ldw	r4,-16(fp)
  815ef0:	20c7883a 	add	r3,r4,r3
  815ef4:	18c01704 	addi	r3,r3,92
  815ef8:	18c00003 	ldbu	r3,0(r3)
  815efc:	18c03fcc 	andi	r3,r3,255
  815f00:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  815f04:	e0bffc17 	ldw	r2,-16(fp)
  815f08:	10800417 	ldw	r2,16(r2)
  815f0c:	10800044 	addi	r2,r2,1
  815f10:	e0fffc17 	ldw	r3,-16(fp)
  815f14:	18800415 	stw	r2,16(r3)
  815f18:	10c00fcc 	andi	r3,r2,63
  815f1c:	e0bffc17 	ldw	r2,-16(fp)
  815f20:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  815f24:	e0bffc17 	ldw	r2,-16(fp)
  815f28:	10800117 	ldw	r2,4(r2)
  815f2c:	10c01014 	ori	r3,r2,64
  815f30:	e0bffc17 	ldw	r2,-16(fp)
  815f34:	10c00115 	stw	r3,4(r2)
  815f38:	00000e06 	br	815f74 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  815f3c:	e0bffc17 	ldw	r2,-16(fp)
  815f40:	10800017 	ldw	r2,0(r2)
  815f44:	10800204 	addi	r2,r2,8
  815f48:	10800037 	ldwio	r2,0(r2)
  815f4c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815f50:	e0bffd17 	ldw	r2,-12(fp)
  815f54:	1082000c 	andi	r2,r2,2048
  815f58:	1000061e 	bne	r2,zero,815f74 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  815f5c:	e0bffc17 	ldw	r2,-16(fp)
  815f60:	10c00117 	ldw	r3,4(r2)
  815f64:	00bfefc4 	movi	r2,-65
  815f68:	1886703a 	and	r3,r3,r2
  815f6c:	e0bffc17 	ldw	r2,-16(fp)
  815f70:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  815f74:	e0bffc17 	ldw	r2,-16(fp)
  815f78:	10c00417 	ldw	r3,16(r2)
  815f7c:	e0bffc17 	ldw	r2,-16(fp)
  815f80:	10800517 	ldw	r2,20(r2)
  815f84:	1880061e 	bne	r3,r2,815fa0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815f88:	e0bffc17 	ldw	r2,-16(fp)
  815f8c:	10c00117 	ldw	r3,4(r2)
  815f90:	00beefc4 	movi	r2,-1089
  815f94:	1886703a 	and	r3,r3,r2
  815f98:	e0bffc17 	ldw	r2,-16(fp)
  815f9c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815fa0:	e0bffc17 	ldw	r2,-16(fp)
  815fa4:	10800017 	ldw	r2,0(r2)
  815fa8:	10800304 	addi	r2,r2,12
  815fac:	e0fffc17 	ldw	r3,-16(fp)
  815fb0:	18c00117 	ldw	r3,4(r3)
  815fb4:	10c00035 	stwio	r3,0(r2)
}
  815fb8:	0001883a 	nop
  815fbc:	e037883a 	mov	sp,fp
  815fc0:	df000017 	ldw	fp,0(sp)
  815fc4:	dec00104 	addi	sp,sp,4
  815fc8:	f800283a 	ret

00815fcc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  815fcc:	defffd04 	addi	sp,sp,-12
  815fd0:	df000215 	stw	fp,8(sp)
  815fd4:	df000204 	addi	fp,sp,8
  815fd8:	e13ffe15 	stw	r4,-8(fp)
  815fdc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815fe0:	00000506 	br	815ff8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  815fe4:	e0bfff17 	ldw	r2,-4(fp)
  815fe8:	1090000c 	andi	r2,r2,16384
  815fec:	10000226 	beq	r2,zero,815ff8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  815ff0:	00bffd44 	movi	r2,-11
  815ff4:	00000606 	br	816010 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815ff8:	e0bffe17 	ldw	r2,-8(fp)
  815ffc:	10c00417 	ldw	r3,16(r2)
  816000:	e0bffe17 	ldw	r2,-8(fp)
  816004:	10800517 	ldw	r2,20(r2)
  816008:	18bff61e 	bne	r3,r2,815fe4 <__alt_mem_onchip_mem+0xff80dfe4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81600c:	0005883a 	mov	r2,zero
}
  816010:	e037883a 	mov	sp,fp
  816014:	df000017 	ldw	fp,0(sp)
  816018:	dec00104 	addi	sp,sp,4
  81601c:	f800283a 	ret

00816020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816020:	defffe04 	addi	sp,sp,-8
  816024:	dfc00115 	stw	ra,4(sp)
  816028:	df000015 	stw	fp,0(sp)
  81602c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  816030:	d0a01317 	ldw	r2,-32692(gp)
  816034:	10000326 	beq	r2,zero,816044 <alt_get_errno+0x24>
  816038:	d0a01317 	ldw	r2,-32692(gp)
  81603c:	103ee83a 	callr	r2
  816040:	00000106 	br	816048 <alt_get_errno+0x28>
  816044:	d0a77404 	addi	r2,gp,-25136
}
  816048:	e037883a 	mov	sp,fp
  81604c:	dfc00117 	ldw	ra,4(sp)
  816050:	df000017 	ldw	fp,0(sp)
  816054:	dec00204 	addi	sp,sp,8
  816058:	f800283a 	ret

0081605c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  81605c:	defff204 	addi	sp,sp,-56
  816060:	dfc00d15 	stw	ra,52(sp)
  816064:	df000c15 	stw	fp,48(sp)
  816068:	df000c04 	addi	fp,sp,48
  81606c:	e13ffc15 	stw	r4,-16(fp)
  816070:	e17ffd15 	stw	r5,-12(fp)
  816074:	e1bffe15 	stw	r6,-8(fp)
  816078:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  81607c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  816080:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  816084:	e0bfff17 	ldw	r2,-4(fp)
  816088:	1090000c 	andi	r2,r2,16384
  81608c:	1005003a 	cmpeq	r2,r2,zero
  816090:	10803fcc 	andi	r2,r2,255
  816094:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  816098:	00001306 	br	8160e8 <altera_avalon_uart_read+0x8c>
    {
      count++;
  81609c:	e0bff517 	ldw	r2,-44(fp)
  8160a0:	10800044 	addi	r2,r2,1
  8160a4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8160a8:	e0bffd17 	ldw	r2,-12(fp)
  8160ac:	10c00044 	addi	r3,r2,1
  8160b0:	e0fffd15 	stw	r3,-12(fp)
  8160b4:	e0fffc17 	ldw	r3,-16(fp)
  8160b8:	18c00217 	ldw	r3,8(r3)
  8160bc:	e13ffc17 	ldw	r4,-16(fp)
  8160c0:	20c7883a 	add	r3,r4,r3
  8160c4:	18c00704 	addi	r3,r3,28
  8160c8:	18c00003 	ldbu	r3,0(r3)
  8160cc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8160d0:	e0bffc17 	ldw	r2,-16(fp)
  8160d4:	10800217 	ldw	r2,8(r2)
  8160d8:	10800044 	addi	r2,r2,1
  8160dc:	10c00fcc 	andi	r3,r2,63
  8160e0:	e0bffc17 	ldw	r2,-16(fp)
  8160e4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8160e8:	e0fff517 	ldw	r3,-44(fp)
  8160ec:	e0bffe17 	ldw	r2,-8(fp)
  8160f0:	1880050e 	bge	r3,r2,816108 <altera_avalon_uart_read+0xac>
  8160f4:	e0bffc17 	ldw	r2,-16(fp)
  8160f8:	10c00217 	ldw	r3,8(r2)
  8160fc:	e0bffc17 	ldw	r2,-16(fp)
  816100:	10800317 	ldw	r2,12(r2)
  816104:	18bfe51e 	bne	r3,r2,81609c <__alt_mem_onchip_mem+0xff80e09c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  816108:	e0bff517 	ldw	r2,-44(fp)
  81610c:	1000251e 	bne	r2,zero,8161a4 <altera_avalon_uart_read+0x148>
  816110:	e0bffc17 	ldw	r2,-16(fp)
  816114:	10c00217 	ldw	r3,8(r2)
  816118:	e0bffc17 	ldw	r2,-16(fp)
  81611c:	10800317 	ldw	r2,12(r2)
  816120:	1880201e 	bne	r3,r2,8161a4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  816124:	e0bff617 	ldw	r2,-40(fp)
  816128:	1000071e 	bne	r2,zero,816148 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  81612c:	08160200 	call	816020 <alt_get_errno>
  816130:	1007883a 	mov	r3,r2
  816134:	008002c4 	movi	r2,11
  816138:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  81613c:	00800044 	movi	r2,1
  816140:	e0bff405 	stb	r2,-48(fp)
        break;
  816144:	00001b06 	br	8161b4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816148:	0005303a 	rdctl	r2,status
  81614c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816150:	e0fff917 	ldw	r3,-28(fp)
  816154:	00bfff84 	movi	r2,-2
  816158:	1884703a 	and	r2,r3,r2
  81615c:	1001703a 	wrctl	status,r2
  
  return context;
  816160:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  816164:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  816168:	e0bffc17 	ldw	r2,-16(fp)
  81616c:	10800117 	ldw	r2,4(r2)
  816170:	10c02014 	ori	r3,r2,128
  816174:	e0bffc17 	ldw	r2,-16(fp)
  816178:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81617c:	e0bffc17 	ldw	r2,-16(fp)
  816180:	10800017 	ldw	r2,0(r2)
  816184:	10800304 	addi	r2,r2,12
  816188:	e0fffc17 	ldw	r3,-16(fp)
  81618c:	18c00117 	ldw	r3,4(r3)
  816190:	10c00035 	stwio	r3,0(r2)
  816194:	e0bff817 	ldw	r2,-32(fp)
  816198:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81619c:	e0bffa17 	ldw	r2,-24(fp)
  8161a0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8161a4:	e0bff517 	ldw	r2,-44(fp)
  8161a8:	1000021e 	bne	r2,zero,8161b4 <altera_avalon_uart_read+0x158>
  8161ac:	e0bffe17 	ldw	r2,-8(fp)
  8161b0:	103fcd1e 	bne	r2,zero,8160e8 <__alt_mem_onchip_mem+0xff80e0e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8161b4:	0005303a 	rdctl	r2,status
  8161b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8161bc:	e0fffb17 	ldw	r3,-20(fp)
  8161c0:	00bfff84 	movi	r2,-2
  8161c4:	1884703a 	and	r2,r3,r2
  8161c8:	1001703a 	wrctl	status,r2
  
  return context;
  8161cc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8161d0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8161d4:	e0bffc17 	ldw	r2,-16(fp)
  8161d8:	10800117 	ldw	r2,4(r2)
  8161dc:	10c02014 	ori	r3,r2,128
  8161e0:	e0bffc17 	ldw	r2,-16(fp)
  8161e4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8161e8:	e0bffc17 	ldw	r2,-16(fp)
  8161ec:	10800017 	ldw	r2,0(r2)
  8161f0:	10800304 	addi	r2,r2,12
  8161f4:	e0fffc17 	ldw	r3,-16(fp)
  8161f8:	18c00117 	ldw	r3,4(r3)
  8161fc:	10c00035 	stwio	r3,0(r2)
  816200:	e0bff817 	ldw	r2,-32(fp)
  816204:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816208:	e0bff717 	ldw	r2,-36(fp)
  81620c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  816210:	e0bff403 	ldbu	r2,-48(fp)
  816214:	10000226 	beq	r2,zero,816220 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  816218:	00bffd44 	movi	r2,-11
  81621c:	00000106 	br	816224 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  816220:	e0bff517 	ldw	r2,-44(fp)
  }
}
  816224:	e037883a 	mov	sp,fp
  816228:	dfc00117 	ldw	ra,4(sp)
  81622c:	df000017 	ldw	fp,0(sp)
  816230:	dec00204 	addi	sp,sp,8
  816234:	f800283a 	ret

00816238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816238:	defffe04 	addi	sp,sp,-8
  81623c:	dfc00115 	stw	ra,4(sp)
  816240:	df000015 	stw	fp,0(sp)
  816244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  816248:	d0a01317 	ldw	r2,-32692(gp)
  81624c:	10000326 	beq	r2,zero,81625c <alt_get_errno+0x24>
  816250:	d0a01317 	ldw	r2,-32692(gp)
  816254:	103ee83a 	callr	r2
  816258:	00000106 	br	816260 <alt_get_errno+0x28>
  81625c:	d0a77404 	addi	r2,gp,-25136
}
  816260:	e037883a 	mov	sp,fp
  816264:	dfc00117 	ldw	ra,4(sp)
  816268:	df000017 	ldw	fp,0(sp)
  81626c:	dec00204 	addi	sp,sp,8
  816270:	f800283a 	ret

00816274 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  816274:	defff204 	addi	sp,sp,-56
  816278:	dfc00d15 	stw	ra,52(sp)
  81627c:	df000c15 	stw	fp,48(sp)
  816280:	df000c04 	addi	fp,sp,48
  816284:	e13ffc15 	stw	r4,-16(fp)
  816288:	e17ffd15 	stw	r5,-12(fp)
  81628c:	e1bffe15 	stw	r6,-8(fp)
  816290:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  816294:	e0bffe17 	ldw	r2,-8(fp)
  816298:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  81629c:	e0bfff17 	ldw	r2,-4(fp)
  8162a0:	1090000c 	andi	r2,r2,16384
  8162a4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8162a8:	00003c06 	br	81639c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8162ac:	e0bffc17 	ldw	r2,-16(fp)
  8162b0:	10800517 	ldw	r2,20(r2)
  8162b4:	10800044 	addi	r2,r2,1
  8162b8:	10800fcc 	andi	r2,r2,63
  8162bc:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8162c0:	e0bffc17 	ldw	r2,-16(fp)
  8162c4:	10c00417 	ldw	r3,16(r2)
  8162c8:	e0bff717 	ldw	r2,-36(fp)
  8162cc:	1880221e 	bne	r3,r2,816358 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8162d0:	e0bff517 	ldw	r2,-44(fp)
  8162d4:	10000526 	beq	r2,zero,8162ec <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8162d8:	08162380 	call	816238 <alt_get_errno>
  8162dc:	1007883a 	mov	r3,r2
  8162e0:	008002c4 	movi	r2,11
  8162e4:	18800015 	stw	r2,0(r3)
        break;
  8162e8:	00002e06 	br	8163a4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8162ec:	0005303a 	rdctl	r2,status
  8162f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8162f4:	e0fff917 	ldw	r3,-28(fp)
  8162f8:	00bfff84 	movi	r2,-2
  8162fc:	1884703a 	and	r2,r3,r2
  816300:	1001703a 	wrctl	status,r2
  
  return context;
  816304:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  816308:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81630c:	e0bffc17 	ldw	r2,-16(fp)
  816310:	10800117 	ldw	r2,4(r2)
  816314:	10c11014 	ori	r3,r2,1088
  816318:	e0bffc17 	ldw	r2,-16(fp)
  81631c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816320:	e0bffc17 	ldw	r2,-16(fp)
  816324:	10800017 	ldw	r2,0(r2)
  816328:	10800304 	addi	r2,r2,12
  81632c:	e0fffc17 	ldw	r3,-16(fp)
  816330:	18c00117 	ldw	r3,4(r3)
  816334:	10c00035 	stwio	r3,0(r2)
  816338:	e0bff817 	ldw	r2,-32(fp)
  81633c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816340:	e0bff617 	ldw	r2,-40(fp)
  816344:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  816348:	e0bffc17 	ldw	r2,-16(fp)
  81634c:	10c00417 	ldw	r3,16(r2)
  816350:	e0bff717 	ldw	r2,-36(fp)
  816354:	18bffc26 	beq	r3,r2,816348 <__alt_mem_onchip_mem+0xff80e348>
      }
    }

    count--;
  816358:	e0bff417 	ldw	r2,-48(fp)
  81635c:	10bfffc4 	addi	r2,r2,-1
  816360:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  816364:	e0bffc17 	ldw	r2,-16(fp)
  816368:	10c00517 	ldw	r3,20(r2)
  81636c:	e0bffd17 	ldw	r2,-12(fp)
  816370:	11000044 	addi	r4,r2,1
  816374:	e13ffd15 	stw	r4,-12(fp)
  816378:	10800003 	ldbu	r2,0(r2)
  81637c:	1009883a 	mov	r4,r2
  816380:	e0bffc17 	ldw	r2,-16(fp)
  816384:	10c5883a 	add	r2,r2,r3
  816388:	10801704 	addi	r2,r2,92
  81638c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  816390:	e0bffc17 	ldw	r2,-16(fp)
  816394:	e0fff717 	ldw	r3,-36(fp)
  816398:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81639c:	e0bff417 	ldw	r2,-48(fp)
  8163a0:	103fc21e 	bne	r2,zero,8162ac <__alt_mem_onchip_mem+0xff80e2ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8163a4:	0005303a 	rdctl	r2,status
  8163a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8163ac:	e0fffb17 	ldw	r3,-20(fp)
  8163b0:	00bfff84 	movi	r2,-2
  8163b4:	1884703a 	and	r2,r3,r2
  8163b8:	1001703a 	wrctl	status,r2
  
  return context;
  8163bc:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8163c0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8163c4:	e0bffc17 	ldw	r2,-16(fp)
  8163c8:	10800117 	ldw	r2,4(r2)
  8163cc:	10c11014 	ori	r3,r2,1088
  8163d0:	e0bffc17 	ldw	r2,-16(fp)
  8163d4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8163d8:	e0bffc17 	ldw	r2,-16(fp)
  8163dc:	10800017 	ldw	r2,0(r2)
  8163e0:	10800304 	addi	r2,r2,12
  8163e4:	e0fffc17 	ldw	r3,-16(fp)
  8163e8:	18c00117 	ldw	r3,4(r3)
  8163ec:	10c00035 	stwio	r3,0(r2)
  8163f0:	e0bff817 	ldw	r2,-32(fp)
  8163f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8163f8:	e0bffa17 	ldw	r2,-24(fp)
  8163fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  816400:	e0fffe17 	ldw	r3,-8(fp)
  816404:	e0bff417 	ldw	r2,-48(fp)
  816408:	1885c83a 	sub	r2,r3,r2
}
  81640c:	e037883a 	mov	sp,fp
  816410:	dfc00117 	ldw	ra,4(sp)
  816414:	df000017 	ldw	fp,0(sp)
  816418:	dec00204 	addi	sp,sp,8
  81641c:	f800283a 	ret

00816420 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  816420:	defffa04 	addi	sp,sp,-24
  816424:	dfc00515 	stw	ra,20(sp)
  816428:	df000415 	stw	fp,16(sp)
  81642c:	df000404 	addi	fp,sp,16
  816430:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  816434:	008000c4 	movi	r2,3
  816438:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  81643c:	e0fffd17 	ldw	r3,-12(fp)
  816440:	008003f4 	movhi	r2,15
  816444:	10909004 	addi	r2,r2,16960
  816448:	1885383a 	mul	r2,r3,r2
  81644c:	100b883a 	mov	r5,r2
  816450:	0100bef4 	movhi	r4,763
  816454:	213c2004 	addi	r4,r4,-3968
  816458:	0811d880 	call	811d88 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  81645c:	100b883a 	mov	r5,r2
  816460:	01200034 	movhi	r4,32768
  816464:	213fffc4 	addi	r4,r4,-1
  816468:	0811d880 	call	811d88 <__udivsi3>
  81646c:	100b883a 	mov	r5,r2
  816470:	e13fff17 	ldw	r4,-4(fp)
  816474:	0811d880 	call	811d88 <__udivsi3>
  816478:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81647c:	e0bffe17 	ldw	r2,-8(fp)
  816480:	10002a26 	beq	r2,zero,81652c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  816484:	e03ffc15 	stw	zero,-16(fp)
  816488:	00001706 	br	8164e8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81648c:	00a00034 	movhi	r2,32768
  816490:	10bfffc4 	addi	r2,r2,-1
  816494:	10bfffc4 	addi	r2,r2,-1
  816498:	103ffe1e 	bne	r2,zero,816494 <__alt_mem_onchip_mem+0xff80e494>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  81649c:	e0fffd17 	ldw	r3,-12(fp)
  8164a0:	008003f4 	movhi	r2,15
  8164a4:	10909004 	addi	r2,r2,16960
  8164a8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8164ac:	100b883a 	mov	r5,r2
  8164b0:	0100bef4 	movhi	r4,763
  8164b4:	213c2004 	addi	r4,r4,-3968
  8164b8:	0811d880 	call	811d88 <__udivsi3>
  8164bc:	100b883a 	mov	r5,r2
  8164c0:	01200034 	movhi	r4,32768
  8164c4:	213fffc4 	addi	r4,r4,-1
  8164c8:	0811d880 	call	811d88 <__udivsi3>
  8164cc:	1007883a 	mov	r3,r2
  8164d0:	e0bfff17 	ldw	r2,-4(fp)
  8164d4:	10c5c83a 	sub	r2,r2,r3
  8164d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8164dc:	e0bffc17 	ldw	r2,-16(fp)
  8164e0:	10800044 	addi	r2,r2,1
  8164e4:	e0bffc15 	stw	r2,-16(fp)
  8164e8:	e0fffc17 	ldw	r3,-16(fp)
  8164ec:	e0bffe17 	ldw	r2,-8(fp)
  8164f0:	18bfe616 	blt	r3,r2,81648c <__alt_mem_onchip_mem+0xff80e48c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8164f4:	e0fffd17 	ldw	r3,-12(fp)
  8164f8:	008003f4 	movhi	r2,15
  8164fc:	10909004 	addi	r2,r2,16960
  816500:	1885383a 	mul	r2,r3,r2
  816504:	100b883a 	mov	r5,r2
  816508:	0100bef4 	movhi	r4,763
  81650c:	213c2004 	addi	r4,r4,-3968
  816510:	0811d880 	call	811d88 <__udivsi3>
  816514:	1007883a 	mov	r3,r2
  816518:	e0bfff17 	ldw	r2,-4(fp)
  81651c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816520:	10bfffc4 	addi	r2,r2,-1
  816524:	103ffe1e 	bne	r2,zero,816520 <__alt_mem_onchip_mem+0xff80e520>
  816528:	00000d06 	br	816560 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81652c:	e0fffd17 	ldw	r3,-12(fp)
  816530:	008003f4 	movhi	r2,15
  816534:	10909004 	addi	r2,r2,16960
  816538:	1885383a 	mul	r2,r3,r2
  81653c:	100b883a 	mov	r5,r2
  816540:	0100bef4 	movhi	r4,763
  816544:	213c2004 	addi	r4,r4,-3968
  816548:	0811d880 	call	811d88 <__udivsi3>
  81654c:	1007883a 	mov	r3,r2
  816550:	e0bfff17 	ldw	r2,-4(fp)
  816554:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816558:	10bfffc4 	addi	r2,r2,-1
  81655c:	00bffe16 	blt	zero,r2,816558 <__alt_mem_onchip_mem+0xff80e558>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  816560:	0005883a 	mov	r2,zero
}
  816564:	e037883a 	mov	sp,fp
  816568:	dfc00117 	ldw	ra,4(sp)
  81656c:	df000017 	ldw	fp,0(sp)
  816570:	dec00204 	addi	sp,sp,8
  816574:	f800283a 	ret

00816578 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  816578:	defffe04 	addi	sp,sp,-8
  81657c:	df000115 	stw	fp,4(sp)
  816580:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  816584:	e03fff15 	stw	zero,-4(fp)
  816588:	00000506 	br	8165a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81658c:	e0bfff17 	ldw	r2,-4(fp)
  816590:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  816594:	e0bfff17 	ldw	r2,-4(fp)
  816598:	10800804 	addi	r2,r2,32
  81659c:	e0bfff15 	stw	r2,-4(fp)
  8165a0:	e0bfff17 	ldw	r2,-4(fp)
  8165a4:	10820030 	cmpltui	r2,r2,2048
  8165a8:	103ff81e 	bne	r2,zero,81658c <__alt_mem_onchip_mem+0xff80e58c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8165ac:	0001883a 	nop
  8165b0:	e037883a 	mov	sp,fp
  8165b4:	df000017 	ldw	fp,0(sp)
  8165b8:	dec00104 	addi	sp,sp,4
  8165bc:	f800283a 	ret

008165c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8165c0:	defffe04 	addi	sp,sp,-8
  8165c4:	dfc00115 	stw	ra,4(sp)
  8165c8:	df000015 	stw	fp,0(sp)
  8165cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8165d0:	d0a01317 	ldw	r2,-32692(gp)
  8165d4:	10000326 	beq	r2,zero,8165e4 <alt_get_errno+0x24>
  8165d8:	d0a01317 	ldw	r2,-32692(gp)
  8165dc:	103ee83a 	callr	r2
  8165e0:	00000106 	br	8165e8 <alt_get_errno+0x28>
  8165e4:	d0a77404 	addi	r2,gp,-25136
}
  8165e8:	e037883a 	mov	sp,fp
  8165ec:	dfc00117 	ldw	ra,4(sp)
  8165f0:	df000017 	ldw	fp,0(sp)
  8165f4:	dec00204 	addi	sp,sp,8
  8165f8:	f800283a 	ret

008165fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8165fc:	defffa04 	addi	sp,sp,-24
  816600:	dfc00515 	stw	ra,20(sp)
  816604:	df000415 	stw	fp,16(sp)
  816608:	df000404 	addi	fp,sp,16
  81660c:	e13ffe15 	stw	r4,-8(fp)
  816610:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  816614:	e0bffe17 	ldw	r2,-8(fp)
  816618:	10000326 	beq	r2,zero,816628 <alt_dev_llist_insert+0x2c>
  81661c:	e0bffe17 	ldw	r2,-8(fp)
  816620:	10800217 	ldw	r2,8(r2)
  816624:	1000061e 	bne	r2,zero,816640 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  816628:	08165c00 	call	8165c0 <alt_get_errno>
  81662c:	1007883a 	mov	r3,r2
  816630:	00800584 	movi	r2,22
  816634:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  816638:	00bffa84 	movi	r2,-22
  81663c:	00001306 	br	81668c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  816640:	e0bffe17 	ldw	r2,-8(fp)
  816644:	e0ffff17 	ldw	r3,-4(fp)
  816648:	e0fffc15 	stw	r3,-16(fp)
  81664c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  816650:	e0bffd17 	ldw	r2,-12(fp)
  816654:	e0fffc17 	ldw	r3,-16(fp)
  816658:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81665c:	e0bffc17 	ldw	r2,-16(fp)
  816660:	10c00017 	ldw	r3,0(r2)
  816664:	e0bffd17 	ldw	r2,-12(fp)
  816668:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81666c:	e0bffc17 	ldw	r2,-16(fp)
  816670:	10800017 	ldw	r2,0(r2)
  816674:	e0fffd17 	ldw	r3,-12(fp)
  816678:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81667c:	e0bffc17 	ldw	r2,-16(fp)
  816680:	e0fffd17 	ldw	r3,-12(fp)
  816684:	10c00015 	stw	r3,0(r2)

  return 0;  
  816688:	0005883a 	mov	r2,zero
}
  81668c:	e037883a 	mov	sp,fp
  816690:	dfc00117 	ldw	ra,4(sp)
  816694:	df000017 	ldw	fp,0(sp)
  816698:	dec00204 	addi	sp,sp,8
  81669c:	f800283a 	ret

008166a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8166a0:	defffd04 	addi	sp,sp,-12
  8166a4:	dfc00215 	stw	ra,8(sp)
  8166a8:	df000115 	stw	fp,4(sp)
  8166ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8166b0:	00802074 	movhi	r2,129
  8166b4:	109ca404 	addi	r2,r2,29328
  8166b8:	e0bfff15 	stw	r2,-4(fp)
  8166bc:	00000606 	br	8166d8 <_do_ctors+0x38>
        (*ctor) (); 
  8166c0:	e0bfff17 	ldw	r2,-4(fp)
  8166c4:	10800017 	ldw	r2,0(r2)
  8166c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8166cc:	e0bfff17 	ldw	r2,-4(fp)
  8166d0:	10bfff04 	addi	r2,r2,-4
  8166d4:	e0bfff15 	stw	r2,-4(fp)
  8166d8:	e0ffff17 	ldw	r3,-4(fp)
  8166dc:	00802074 	movhi	r2,129
  8166e0:	109ca504 	addi	r2,r2,29332
  8166e4:	18bff62e 	bgeu	r3,r2,8166c0 <__alt_mem_onchip_mem+0xff80e6c0>
        (*ctor) (); 
}
  8166e8:	0001883a 	nop
  8166ec:	e037883a 	mov	sp,fp
  8166f0:	dfc00117 	ldw	ra,4(sp)
  8166f4:	df000017 	ldw	fp,0(sp)
  8166f8:	dec00204 	addi	sp,sp,8
  8166fc:	f800283a 	ret

00816700 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  816700:	defffd04 	addi	sp,sp,-12
  816704:	dfc00215 	stw	ra,8(sp)
  816708:	df000115 	stw	fp,4(sp)
  81670c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816710:	00802074 	movhi	r2,129
  816714:	109ca404 	addi	r2,r2,29328
  816718:	e0bfff15 	stw	r2,-4(fp)
  81671c:	00000606 	br	816738 <_do_dtors+0x38>
        (*dtor) (); 
  816720:	e0bfff17 	ldw	r2,-4(fp)
  816724:	10800017 	ldw	r2,0(r2)
  816728:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81672c:	e0bfff17 	ldw	r2,-4(fp)
  816730:	10bfff04 	addi	r2,r2,-4
  816734:	e0bfff15 	stw	r2,-4(fp)
  816738:	e0ffff17 	ldw	r3,-4(fp)
  81673c:	00802074 	movhi	r2,129
  816740:	109ca504 	addi	r2,r2,29332
  816744:	18bff62e 	bgeu	r3,r2,816720 <__alt_mem_onchip_mem+0xff80e720>
        (*dtor) (); 
}
  816748:	0001883a 	nop
  81674c:	e037883a 	mov	sp,fp
  816750:	dfc00117 	ldw	ra,4(sp)
  816754:	df000017 	ldw	fp,0(sp)
  816758:	dec00204 	addi	sp,sp,8
  81675c:	f800283a 	ret

00816760 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  816760:	defffa04 	addi	sp,sp,-24
  816764:	dfc00515 	stw	ra,20(sp)
  816768:	df000415 	stw	fp,16(sp)
  81676c:	df000404 	addi	fp,sp,16
  816770:	e13ffe15 	stw	r4,-8(fp)
  816774:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  816778:	e0bfff17 	ldw	r2,-4(fp)
  81677c:	10800017 	ldw	r2,0(r2)
  816780:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  816784:	e13ffe17 	ldw	r4,-8(fp)
  816788:	08096000 	call	809600 <strlen>
  81678c:	10800044 	addi	r2,r2,1
  816790:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  816794:	00000d06 	br	8167cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  816798:	e0bffc17 	ldw	r2,-16(fp)
  81679c:	10800217 	ldw	r2,8(r2)
  8167a0:	e0fffd17 	ldw	r3,-12(fp)
  8167a4:	180d883a 	mov	r6,r3
  8167a8:	e17ffe17 	ldw	r5,-8(fp)
  8167ac:	1009883a 	mov	r4,r2
  8167b0:	0816f4c0 	call	816f4c <memcmp>
  8167b4:	1000021e 	bne	r2,zero,8167c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8167b8:	e0bffc17 	ldw	r2,-16(fp)
  8167bc:	00000706 	br	8167dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8167c0:	e0bffc17 	ldw	r2,-16(fp)
  8167c4:	10800017 	ldw	r2,0(r2)
  8167c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8167cc:	e0fffc17 	ldw	r3,-16(fp)
  8167d0:	e0bfff17 	ldw	r2,-4(fp)
  8167d4:	18bff01e 	bne	r3,r2,816798 <__alt_mem_onchip_mem+0xff80e798>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8167d8:	0005883a 	mov	r2,zero
}
  8167dc:	e037883a 	mov	sp,fp
  8167e0:	dfc00117 	ldw	ra,4(sp)
  8167e4:	df000017 	ldw	fp,0(sp)
  8167e8:	dec00204 	addi	sp,sp,8
  8167ec:	f800283a 	ret

008167f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8167f0:	defffb04 	addi	sp,sp,-20
  8167f4:	dfc00415 	stw	ra,16(sp)
  8167f8:	df000315 	stw	fp,12(sp)
  8167fc:	df000304 	addi	fp,sp,12
  816800:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  816804:	d0a00e17 	ldw	r2,-32712(gp)
  816808:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81680c:	00003106 	br	8168d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  816810:	e0bffd17 	ldw	r2,-12(fp)
  816814:	10800217 	ldw	r2,8(r2)
  816818:	1009883a 	mov	r4,r2
  81681c:	08096000 	call	809600 <strlen>
  816820:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  816824:	e0bffd17 	ldw	r2,-12(fp)
  816828:	10c00217 	ldw	r3,8(r2)
  81682c:	e0bffe17 	ldw	r2,-8(fp)
  816830:	10bfffc4 	addi	r2,r2,-1
  816834:	1885883a 	add	r2,r3,r2
  816838:	10800003 	ldbu	r2,0(r2)
  81683c:	10803fcc 	andi	r2,r2,255
  816840:	1080201c 	xori	r2,r2,128
  816844:	10bfe004 	addi	r2,r2,-128
  816848:	10800bd8 	cmpnei	r2,r2,47
  81684c:	1000031e 	bne	r2,zero,81685c <alt_find_file+0x6c>
    {
      len -= 1;
  816850:	e0bffe17 	ldw	r2,-8(fp)
  816854:	10bfffc4 	addi	r2,r2,-1
  816858:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81685c:	e0bffe17 	ldw	r2,-8(fp)
  816860:	e0ffff17 	ldw	r3,-4(fp)
  816864:	1885883a 	add	r2,r3,r2
  816868:	10800003 	ldbu	r2,0(r2)
  81686c:	10803fcc 	andi	r2,r2,255
  816870:	1080201c 	xori	r2,r2,128
  816874:	10bfe004 	addi	r2,r2,-128
  816878:	10800be0 	cmpeqi	r2,r2,47
  81687c:	1000081e 	bne	r2,zero,8168a0 <alt_find_file+0xb0>
  816880:	e0bffe17 	ldw	r2,-8(fp)
  816884:	e0ffff17 	ldw	r3,-4(fp)
  816888:	1885883a 	add	r2,r3,r2
  81688c:	10800003 	ldbu	r2,0(r2)
  816890:	10803fcc 	andi	r2,r2,255
  816894:	1080201c 	xori	r2,r2,128
  816898:	10bfe004 	addi	r2,r2,-128
  81689c:	10000a1e 	bne	r2,zero,8168c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8168a0:	e0bffd17 	ldw	r2,-12(fp)
  8168a4:	10800217 	ldw	r2,8(r2)
  8168a8:	e0fffe17 	ldw	r3,-8(fp)
  8168ac:	180d883a 	mov	r6,r3
  8168b0:	e17fff17 	ldw	r5,-4(fp)
  8168b4:	1009883a 	mov	r4,r2
  8168b8:	0816f4c0 	call	816f4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8168bc:	1000021e 	bne	r2,zero,8168c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8168c0:	e0bffd17 	ldw	r2,-12(fp)
  8168c4:	00000706 	br	8168e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8168c8:	e0bffd17 	ldw	r2,-12(fp)
  8168cc:	10800017 	ldw	r2,0(r2)
  8168d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8168d4:	e0fffd17 	ldw	r3,-12(fp)
  8168d8:	d0a00e04 	addi	r2,gp,-32712
  8168dc:	18bfcc1e 	bne	r3,r2,816810 <__alt_mem_onchip_mem+0xff80e810>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8168e0:	0005883a 	mov	r2,zero
}
  8168e4:	e037883a 	mov	sp,fp
  8168e8:	dfc00117 	ldw	ra,4(sp)
  8168ec:	df000017 	ldw	fp,0(sp)
  8168f0:	dec00204 	addi	sp,sp,8
  8168f4:	f800283a 	ret

008168f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8168f8:	defffc04 	addi	sp,sp,-16
  8168fc:	df000315 	stw	fp,12(sp)
  816900:	df000304 	addi	fp,sp,12
  816904:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  816908:	00bffa04 	movi	r2,-24
  81690c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  816910:	e03ffd15 	stw	zero,-12(fp)
  816914:	00001906 	br	81697c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  816918:	008020b4 	movhi	r2,130
  81691c:	10a06c04 	addi	r2,r2,-32336
  816920:	e0fffd17 	ldw	r3,-12(fp)
  816924:	18c00324 	muli	r3,r3,12
  816928:	10c5883a 	add	r2,r2,r3
  81692c:	10800017 	ldw	r2,0(r2)
  816930:	10000f1e 	bne	r2,zero,816970 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  816934:	008020b4 	movhi	r2,130
  816938:	10a06c04 	addi	r2,r2,-32336
  81693c:	e0fffd17 	ldw	r3,-12(fp)
  816940:	18c00324 	muli	r3,r3,12
  816944:	10c5883a 	add	r2,r2,r3
  816948:	e0ffff17 	ldw	r3,-4(fp)
  81694c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  816950:	d0e01217 	ldw	r3,-32696(gp)
  816954:	e0bffd17 	ldw	r2,-12(fp)
  816958:	1880020e 	bge	r3,r2,816964 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  81695c:	e0bffd17 	ldw	r2,-12(fp)
  816960:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
  816964:	e0bffd17 	ldw	r2,-12(fp)
  816968:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  81696c:	00000606 	br	816988 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  816970:	e0bffd17 	ldw	r2,-12(fp)
  816974:	10800044 	addi	r2,r2,1
  816978:	e0bffd15 	stw	r2,-12(fp)
  81697c:	e0bffd17 	ldw	r2,-12(fp)
  816980:	10800810 	cmplti	r2,r2,32
  816984:	103fe41e 	bne	r2,zero,816918 <__alt_mem_onchip_mem+0xff80e918>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  816988:	e0bffe17 	ldw	r2,-8(fp)
}
  81698c:	e037883a 	mov	sp,fp
  816990:	df000017 	ldw	fp,0(sp)
  816994:	dec00104 	addi	sp,sp,4
  816998:	f800283a 	ret

0081699c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81699c:	defffe04 	addi	sp,sp,-8
  8169a0:	dfc00115 	stw	ra,4(sp)
  8169a4:	df000015 	stw	fp,0(sp)
  8169a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8169ac:	01440004 	movi	r5,4096
  8169b0:	0009883a 	mov	r4,zero
  8169b4:	0816dd40 	call	816dd4 <alt_icache_flush>
#endif
}
  8169b8:	0001883a 	nop
  8169bc:	e037883a 	mov	sp,fp
  8169c0:	dfc00117 	ldw	ra,4(sp)
  8169c4:	df000017 	ldw	fp,0(sp)
  8169c8:	dec00204 	addi	sp,sp,8
  8169cc:	f800283a 	ret

008169d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8169d0:	defff904 	addi	sp,sp,-28
  8169d4:	dfc00615 	stw	ra,24(sp)
  8169d8:	df000515 	stw	fp,20(sp)
  8169dc:	df000504 	addi	fp,sp,20
  8169e0:	e13ffc15 	stw	r4,-16(fp)
  8169e4:	e17ffd15 	stw	r5,-12(fp)
  8169e8:	e1bffe15 	stw	r6,-8(fp)
  8169ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8169f0:	e0800217 	ldw	r2,8(fp)
  8169f4:	d8800015 	stw	r2,0(sp)
  8169f8:	e1ffff17 	ldw	r7,-4(fp)
  8169fc:	e1bffe17 	ldw	r6,-8(fp)
  816a00:	e17ffd17 	ldw	r5,-12(fp)
  816a04:	e13ffc17 	ldw	r4,-16(fp)
  816a08:	0816b800 	call	816b80 <alt_iic_isr_register>
}  
  816a0c:	e037883a 	mov	sp,fp
  816a10:	dfc00117 	ldw	ra,4(sp)
  816a14:	df000017 	ldw	fp,0(sp)
  816a18:	dec00204 	addi	sp,sp,8
  816a1c:	f800283a 	ret

00816a20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  816a20:	defff904 	addi	sp,sp,-28
  816a24:	df000615 	stw	fp,24(sp)
  816a28:	df000604 	addi	fp,sp,24
  816a2c:	e13ffe15 	stw	r4,-8(fp)
  816a30:	e17fff15 	stw	r5,-4(fp)
  816a34:	e0bfff17 	ldw	r2,-4(fp)
  816a38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816a3c:	0005303a 	rdctl	r2,status
  816a40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816a44:	e0fffb17 	ldw	r3,-20(fp)
  816a48:	00bfff84 	movi	r2,-2
  816a4c:	1884703a 	and	r2,r3,r2
  816a50:	1001703a 	wrctl	status,r2
  
  return context;
  816a54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816a58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  816a5c:	00c00044 	movi	r3,1
  816a60:	e0bffa17 	ldw	r2,-24(fp)
  816a64:	1884983a 	sll	r2,r3,r2
  816a68:	1007883a 	mov	r3,r2
  816a6c:	d0a77b17 	ldw	r2,-25108(gp)
  816a70:	1884b03a 	or	r2,r3,r2
  816a74:	d0a77b15 	stw	r2,-25108(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  816a78:	d0a77b17 	ldw	r2,-25108(gp)
  816a7c:	100170fa 	wrctl	ienable,r2
  816a80:	e0bffc17 	ldw	r2,-16(fp)
  816a84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816a88:	e0bffd17 	ldw	r2,-12(fp)
  816a8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816a90:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  816a94:	0001883a 	nop
}
  816a98:	e037883a 	mov	sp,fp
  816a9c:	df000017 	ldw	fp,0(sp)
  816aa0:	dec00104 	addi	sp,sp,4
  816aa4:	f800283a 	ret

00816aa8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  816aa8:	defff904 	addi	sp,sp,-28
  816aac:	df000615 	stw	fp,24(sp)
  816ab0:	df000604 	addi	fp,sp,24
  816ab4:	e13ffe15 	stw	r4,-8(fp)
  816ab8:	e17fff15 	stw	r5,-4(fp)
  816abc:	e0bfff17 	ldw	r2,-4(fp)
  816ac0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816ac4:	0005303a 	rdctl	r2,status
  816ac8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816acc:	e0fffb17 	ldw	r3,-20(fp)
  816ad0:	00bfff84 	movi	r2,-2
  816ad4:	1884703a 	and	r2,r3,r2
  816ad8:	1001703a 	wrctl	status,r2
  
  return context;
  816adc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816ae0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  816ae4:	00c00044 	movi	r3,1
  816ae8:	e0bffa17 	ldw	r2,-24(fp)
  816aec:	1884983a 	sll	r2,r3,r2
  816af0:	0084303a 	nor	r2,zero,r2
  816af4:	1007883a 	mov	r3,r2
  816af8:	d0a77b17 	ldw	r2,-25108(gp)
  816afc:	1884703a 	and	r2,r3,r2
  816b00:	d0a77b15 	stw	r2,-25108(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  816b04:	d0a77b17 	ldw	r2,-25108(gp)
  816b08:	100170fa 	wrctl	ienable,r2
  816b0c:	e0bffc17 	ldw	r2,-16(fp)
  816b10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816b14:	e0bffd17 	ldw	r2,-12(fp)
  816b18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816b1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  816b20:	0001883a 	nop
}
  816b24:	e037883a 	mov	sp,fp
  816b28:	df000017 	ldw	fp,0(sp)
  816b2c:	dec00104 	addi	sp,sp,4
  816b30:	f800283a 	ret

00816b34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  816b34:	defffc04 	addi	sp,sp,-16
  816b38:	df000315 	stw	fp,12(sp)
  816b3c:	df000304 	addi	fp,sp,12
  816b40:	e13ffe15 	stw	r4,-8(fp)
  816b44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  816b48:	000530fa 	rdctl	r2,ienable
  816b4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  816b50:	00c00044 	movi	r3,1
  816b54:	e0bfff17 	ldw	r2,-4(fp)
  816b58:	1884983a 	sll	r2,r3,r2
  816b5c:	1007883a 	mov	r3,r2
  816b60:	e0bffd17 	ldw	r2,-12(fp)
  816b64:	1884703a 	and	r2,r3,r2
  816b68:	1004c03a 	cmpne	r2,r2,zero
  816b6c:	10803fcc 	andi	r2,r2,255
}
  816b70:	e037883a 	mov	sp,fp
  816b74:	df000017 	ldw	fp,0(sp)
  816b78:	dec00104 	addi	sp,sp,4
  816b7c:	f800283a 	ret

00816b80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  816b80:	defff504 	addi	sp,sp,-44
  816b84:	dfc00a15 	stw	ra,40(sp)
  816b88:	df000915 	stw	fp,36(sp)
  816b8c:	df000904 	addi	fp,sp,36
  816b90:	e13ffc15 	stw	r4,-16(fp)
  816b94:	e17ffd15 	stw	r5,-12(fp)
  816b98:	e1bffe15 	stw	r6,-8(fp)
  816b9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  816ba0:	00bffa84 	movi	r2,-22
  816ba4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  816ba8:	e0bffd17 	ldw	r2,-12(fp)
  816bac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  816bb0:	e0bff817 	ldw	r2,-32(fp)
  816bb4:	10800808 	cmpgei	r2,r2,32
  816bb8:	1000271e 	bne	r2,zero,816c58 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816bbc:	0005303a 	rdctl	r2,status
  816bc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816bc4:	e0fffb17 	ldw	r3,-20(fp)
  816bc8:	00bfff84 	movi	r2,-2
  816bcc:	1884703a 	and	r2,r3,r2
  816bd0:	1001703a 	wrctl	status,r2
  
  return context;
  816bd4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  816bd8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  816bdc:	008020b4 	movhi	r2,130
  816be0:	10ad4d04 	addi	r2,r2,-19148
  816be4:	e0fff817 	ldw	r3,-32(fp)
  816be8:	180690fa 	slli	r3,r3,3
  816bec:	10c5883a 	add	r2,r2,r3
  816bf0:	e0fffe17 	ldw	r3,-8(fp)
  816bf4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  816bf8:	008020b4 	movhi	r2,130
  816bfc:	10ad4d04 	addi	r2,r2,-19148
  816c00:	e0fff817 	ldw	r3,-32(fp)
  816c04:	180690fa 	slli	r3,r3,3
  816c08:	10c5883a 	add	r2,r2,r3
  816c0c:	10800104 	addi	r2,r2,4
  816c10:	e0ffff17 	ldw	r3,-4(fp)
  816c14:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  816c18:	e0bffe17 	ldw	r2,-8(fp)
  816c1c:	10000526 	beq	r2,zero,816c34 <alt_iic_isr_register+0xb4>
  816c20:	e0bff817 	ldw	r2,-32(fp)
  816c24:	100b883a 	mov	r5,r2
  816c28:	e13ffc17 	ldw	r4,-16(fp)
  816c2c:	0816a200 	call	816a20 <alt_ic_irq_enable>
  816c30:	00000406 	br	816c44 <alt_iic_isr_register+0xc4>
  816c34:	e0bff817 	ldw	r2,-32(fp)
  816c38:	100b883a 	mov	r5,r2
  816c3c:	e13ffc17 	ldw	r4,-16(fp)
  816c40:	0816aa80 	call	816aa8 <alt_ic_irq_disable>
  816c44:	e0bff715 	stw	r2,-36(fp)
  816c48:	e0bffa17 	ldw	r2,-24(fp)
  816c4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816c50:	e0bff917 	ldw	r2,-28(fp)
  816c54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  816c58:	e0bff717 	ldw	r2,-36(fp)
}
  816c5c:	e037883a 	mov	sp,fp
  816c60:	dfc00117 	ldw	ra,4(sp)
  816c64:	df000017 	ldw	fp,0(sp)
  816c68:	dec00204 	addi	sp,sp,8
  816c6c:	f800283a 	ret

00816c70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  816c70:	defff904 	addi	sp,sp,-28
  816c74:	dfc00615 	stw	ra,24(sp)
  816c78:	df000515 	stw	fp,20(sp)
  816c7c:	df000504 	addi	fp,sp,20
  816c80:	e13ffc15 	stw	r4,-16(fp)
  816c84:	e17ffd15 	stw	r5,-12(fp)
  816c88:	e1bffe15 	stw	r6,-8(fp)
  816c8c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  816c90:	e1bfff17 	ldw	r6,-4(fp)
  816c94:	e17ffe17 	ldw	r5,-8(fp)
  816c98:	e13ffd17 	ldw	r4,-12(fp)
  816c9c:	08139640 	call	813964 <open>
  816ca0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  816ca4:	e0bffb17 	ldw	r2,-20(fp)
  816ca8:	10001c16 	blt	r2,zero,816d1c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  816cac:	008020b4 	movhi	r2,130
  816cb0:	10a06c04 	addi	r2,r2,-32336
  816cb4:	e0fffb17 	ldw	r3,-20(fp)
  816cb8:	18c00324 	muli	r3,r3,12
  816cbc:	10c5883a 	add	r2,r2,r3
  816cc0:	10c00017 	ldw	r3,0(r2)
  816cc4:	e0bffc17 	ldw	r2,-16(fp)
  816cc8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  816ccc:	008020b4 	movhi	r2,130
  816cd0:	10a06c04 	addi	r2,r2,-32336
  816cd4:	e0fffb17 	ldw	r3,-20(fp)
  816cd8:	18c00324 	muli	r3,r3,12
  816cdc:	10c5883a 	add	r2,r2,r3
  816ce0:	10800104 	addi	r2,r2,4
  816ce4:	10c00017 	ldw	r3,0(r2)
  816ce8:	e0bffc17 	ldw	r2,-16(fp)
  816cec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  816cf0:	008020b4 	movhi	r2,130
  816cf4:	10a06c04 	addi	r2,r2,-32336
  816cf8:	e0fffb17 	ldw	r3,-20(fp)
  816cfc:	18c00324 	muli	r3,r3,12
  816d00:	10c5883a 	add	r2,r2,r3
  816d04:	10800204 	addi	r2,r2,8
  816d08:	10c00017 	ldw	r3,0(r2)
  816d0c:	e0bffc17 	ldw	r2,-16(fp)
  816d10:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  816d14:	e13ffb17 	ldw	r4,-20(fp)
  816d18:	0813bf00 	call	813bf0 <alt_release_fd>
  }
} 
  816d1c:	0001883a 	nop
  816d20:	e037883a 	mov	sp,fp
  816d24:	dfc00117 	ldw	ra,4(sp)
  816d28:	df000017 	ldw	fp,0(sp)
  816d2c:	dec00204 	addi	sp,sp,8
  816d30:	f800283a 	ret

00816d34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  816d34:	defffb04 	addi	sp,sp,-20
  816d38:	dfc00415 	stw	ra,16(sp)
  816d3c:	df000315 	stw	fp,12(sp)
  816d40:	df000304 	addi	fp,sp,12
  816d44:	e13ffd15 	stw	r4,-12(fp)
  816d48:	e17ffe15 	stw	r5,-8(fp)
  816d4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  816d50:	01c07fc4 	movi	r7,511
  816d54:	01800044 	movi	r6,1
  816d58:	e17ffd17 	ldw	r5,-12(fp)
  816d5c:	010020b4 	movhi	r4,130
  816d60:	21206f04 	addi	r4,r4,-32324
  816d64:	0816c700 	call	816c70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  816d68:	01c07fc4 	movi	r7,511
  816d6c:	000d883a 	mov	r6,zero
  816d70:	e17ffe17 	ldw	r5,-8(fp)
  816d74:	010020b4 	movhi	r4,130
  816d78:	21206c04 	addi	r4,r4,-32336
  816d7c:	0816c700 	call	816c70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  816d80:	01c07fc4 	movi	r7,511
  816d84:	01800044 	movi	r6,1
  816d88:	e17fff17 	ldw	r5,-4(fp)
  816d8c:	010020b4 	movhi	r4,130
  816d90:	21207204 	addi	r4,r4,-32312
  816d94:	0816c700 	call	816c70 <alt_open_fd>
}  
  816d98:	0001883a 	nop
  816d9c:	e037883a 	mov	sp,fp
  816da0:	dfc00117 	ldw	ra,4(sp)
  816da4:	df000017 	ldw	fp,0(sp)
  816da8:	dec00204 	addi	sp,sp,8
  816dac:	f800283a 	ret

00816db0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  816db0:	deffff04 	addi	sp,sp,-4
  816db4:	df000015 	stw	fp,0(sp)
  816db8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  816dbc:	000170fa 	wrctl	ienable,zero
}
  816dc0:	0001883a 	nop
  816dc4:	e037883a 	mov	sp,fp
  816dc8:	df000017 	ldw	fp,0(sp)
  816dcc:	dec00104 	addi	sp,sp,4
  816dd0:	f800283a 	ret

00816dd4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  816dd4:	defffb04 	addi	sp,sp,-20
  816dd8:	df000415 	stw	fp,16(sp)
  816ddc:	df000404 	addi	fp,sp,16
  816de0:	e13ffe15 	stw	r4,-8(fp)
  816de4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  816de8:	e0bfff17 	ldw	r2,-4(fp)
  816dec:	10840070 	cmpltui	r2,r2,4097
  816df0:	1000021e 	bne	r2,zero,816dfc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  816df4:	00840004 	movi	r2,4096
  816df8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  816dfc:	e0fffe17 	ldw	r3,-8(fp)
  816e00:	e0bfff17 	ldw	r2,-4(fp)
  816e04:	1885883a 	add	r2,r3,r2
  816e08:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  816e0c:	e0bffe17 	ldw	r2,-8(fp)
  816e10:	e0bffc15 	stw	r2,-16(fp)
  816e14:	00000506 	br	816e2c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  816e18:	e0bffc17 	ldw	r2,-16(fp)
  816e1c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  816e20:	e0bffc17 	ldw	r2,-16(fp)
  816e24:	10800804 	addi	r2,r2,32
  816e28:	e0bffc15 	stw	r2,-16(fp)
  816e2c:	e0fffc17 	ldw	r3,-16(fp)
  816e30:	e0bffd17 	ldw	r2,-12(fp)
  816e34:	18bff836 	bltu	r3,r2,816e18 <__alt_mem_onchip_mem+0xff80ee18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  816e38:	e0bffe17 	ldw	r2,-8(fp)
  816e3c:	108007cc 	andi	r2,r2,31
  816e40:	10000226 	beq	r2,zero,816e4c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  816e44:	e0bffc17 	ldw	r2,-16(fp)
  816e48:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  816e4c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  816e50:	0001883a 	nop
  816e54:	e037883a 	mov	sp,fp
  816e58:	df000017 	ldw	fp,0(sp)
  816e5c:	dec00104 	addi	sp,sp,4
  816e60:	f800283a 	ret

00816e64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  816e64:	defffe04 	addi	sp,sp,-8
  816e68:	df000115 	stw	fp,4(sp)
  816e6c:	df000104 	addi	fp,sp,4
  816e70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  816e74:	e0bfff17 	ldw	r2,-4(fp)
  816e78:	10bffe84 	addi	r2,r2,-6
  816e7c:	10c00428 	cmpgeui	r3,r2,16
  816e80:	18001a1e 	bne	r3,zero,816eec <alt_exception_cause_generated_bad_addr+0x88>
  816e84:	100690ba 	slli	r3,r2,2
  816e88:	00802074 	movhi	r2,129
  816e8c:	109ba704 	addi	r2,r2,28316
  816e90:	1885883a 	add	r2,r3,r2
  816e94:	10800017 	ldw	r2,0(r2)
  816e98:	1000683a 	jmp	r2
  816e9c:	00816edc 	xori	r2,zero,1467
  816ea0:	00816edc 	xori	r2,zero,1467
  816ea4:	00816eec 	andhi	r2,zero,1467
  816ea8:	00816eec 	andhi	r2,zero,1467
  816eac:	00816eec 	andhi	r2,zero,1467
  816eb0:	00816edc 	xori	r2,zero,1467
  816eb4:	00816ee4 	muli	r2,zero,1467
  816eb8:	00816eec 	andhi	r2,zero,1467
  816ebc:	00816edc 	xori	r2,zero,1467
  816ec0:	00816edc 	xori	r2,zero,1467
  816ec4:	00816eec 	andhi	r2,zero,1467
  816ec8:	00816edc 	xori	r2,zero,1467
  816ecc:	00816ee4 	muli	r2,zero,1467
  816ed0:	00816eec 	andhi	r2,zero,1467
  816ed4:	00816eec 	andhi	r2,zero,1467
  816ed8:	00816edc 	xori	r2,zero,1467
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  816edc:	00800044 	movi	r2,1
  816ee0:	00000306 	br	816ef0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  816ee4:	0005883a 	mov	r2,zero
  816ee8:	00000106 	br	816ef0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  816eec:	0005883a 	mov	r2,zero
  }
}
  816ef0:	e037883a 	mov	sp,fp
  816ef4:	df000017 	ldw	fp,0(sp)
  816ef8:	dec00104 	addi	sp,sp,4
  816efc:	f800283a 	ret

00816f00 <atexit>:
  816f00:	200b883a 	mov	r5,r4
  816f04:	000f883a 	mov	r7,zero
  816f08:	000d883a 	mov	r6,zero
  816f0c:	0009883a 	mov	r4,zero
  816f10:	0816fc81 	jmpi	816fc8 <__register_exitproc>

00816f14 <exit>:
  816f14:	defffe04 	addi	sp,sp,-8
  816f18:	000b883a 	mov	r5,zero
  816f1c:	dc000015 	stw	r16,0(sp)
  816f20:	dfc00115 	stw	ra,4(sp)
  816f24:	2021883a 	mov	r16,r4
  816f28:	08170e00 	call	8170e0 <__call_exitprocs>
  816f2c:	008020b4 	movhi	r2,130
  816f30:	10a56504 	addi	r2,r2,-27244
  816f34:	11000017 	ldw	r4,0(r2)
  816f38:	20800f17 	ldw	r2,60(r4)
  816f3c:	10000126 	beq	r2,zero,816f44 <exit+0x30>
  816f40:	103ee83a 	callr	r2
  816f44:	8009883a 	mov	r4,r16
  816f48:	08172600 	call	817260 <_exit>

00816f4c <memcmp>:
  816f4c:	01c000c4 	movi	r7,3
  816f50:	3980192e 	bgeu	r7,r6,816fb8 <memcmp+0x6c>
  816f54:	2144b03a 	or	r2,r4,r5
  816f58:	11c4703a 	and	r2,r2,r7
  816f5c:	10000f26 	beq	r2,zero,816f9c <memcmp+0x50>
  816f60:	20800003 	ldbu	r2,0(r4)
  816f64:	28c00003 	ldbu	r3,0(r5)
  816f68:	10c0151e 	bne	r2,r3,816fc0 <memcmp+0x74>
  816f6c:	31bfff84 	addi	r6,r6,-2
  816f70:	01ffffc4 	movi	r7,-1
  816f74:	00000406 	br	816f88 <memcmp+0x3c>
  816f78:	20800003 	ldbu	r2,0(r4)
  816f7c:	28c00003 	ldbu	r3,0(r5)
  816f80:	31bfffc4 	addi	r6,r6,-1
  816f84:	10c00e1e 	bne	r2,r3,816fc0 <memcmp+0x74>
  816f88:	21000044 	addi	r4,r4,1
  816f8c:	29400044 	addi	r5,r5,1
  816f90:	31fff91e 	bne	r6,r7,816f78 <__alt_mem_onchip_mem+0xff80ef78>
  816f94:	0005883a 	mov	r2,zero
  816f98:	f800283a 	ret
  816f9c:	20c00017 	ldw	r3,0(r4)
  816fa0:	28800017 	ldw	r2,0(r5)
  816fa4:	18bfee1e 	bne	r3,r2,816f60 <__alt_mem_onchip_mem+0xff80ef60>
  816fa8:	31bfff04 	addi	r6,r6,-4
  816fac:	21000104 	addi	r4,r4,4
  816fb0:	29400104 	addi	r5,r5,4
  816fb4:	39bff936 	bltu	r7,r6,816f9c <__alt_mem_onchip_mem+0xff80ef9c>
  816fb8:	303fe91e 	bne	r6,zero,816f60 <__alt_mem_onchip_mem+0xff80ef60>
  816fbc:	003ff506 	br	816f94 <__alt_mem_onchip_mem+0xff80ef94>
  816fc0:	10c5c83a 	sub	r2,r2,r3
  816fc4:	f800283a 	ret

00816fc8 <__register_exitproc>:
  816fc8:	defffa04 	addi	sp,sp,-24
  816fcc:	dc000315 	stw	r16,12(sp)
  816fd0:	040020b4 	movhi	r16,130
  816fd4:	84256504 	addi	r16,r16,-27244
  816fd8:	80c00017 	ldw	r3,0(r16)
  816fdc:	dc400415 	stw	r17,16(sp)
  816fe0:	dfc00515 	stw	ra,20(sp)
  816fe4:	18805217 	ldw	r2,328(r3)
  816fe8:	2023883a 	mov	r17,r4
  816fec:	10003726 	beq	r2,zero,8170cc <__register_exitproc+0x104>
  816ff0:	10c00117 	ldw	r3,4(r2)
  816ff4:	010007c4 	movi	r4,31
  816ff8:	20c00e16 	blt	r4,r3,817034 <__register_exitproc+0x6c>
  816ffc:	1a000044 	addi	r8,r3,1
  817000:	8800221e 	bne	r17,zero,81708c <__register_exitproc+0xc4>
  817004:	18c00084 	addi	r3,r3,2
  817008:	18c7883a 	add	r3,r3,r3
  81700c:	18c7883a 	add	r3,r3,r3
  817010:	12000115 	stw	r8,4(r2)
  817014:	10c7883a 	add	r3,r2,r3
  817018:	19400015 	stw	r5,0(r3)
  81701c:	0005883a 	mov	r2,zero
  817020:	dfc00517 	ldw	ra,20(sp)
  817024:	dc400417 	ldw	r17,16(sp)
  817028:	dc000317 	ldw	r16,12(sp)
  81702c:	dec00604 	addi	sp,sp,24
  817030:	f800283a 	ret
  817034:	00800034 	movhi	r2,0
  817038:	10800004 	addi	r2,r2,0
  81703c:	10002626 	beq	r2,zero,8170d8 <__register_exitproc+0x110>
  817040:	01006404 	movi	r4,400
  817044:	d9400015 	stw	r5,0(sp)
  817048:	d9800115 	stw	r6,4(sp)
  81704c:	d9c00215 	stw	r7,8(sp)
  817050:	00000000 	call	0 <__reset-0x800000>
  817054:	d9400017 	ldw	r5,0(sp)
  817058:	d9800117 	ldw	r6,4(sp)
  81705c:	d9c00217 	ldw	r7,8(sp)
  817060:	10001d26 	beq	r2,zero,8170d8 <__register_exitproc+0x110>
  817064:	81000017 	ldw	r4,0(r16)
  817068:	10000115 	stw	zero,4(r2)
  81706c:	02000044 	movi	r8,1
  817070:	22405217 	ldw	r9,328(r4)
  817074:	0007883a 	mov	r3,zero
  817078:	12400015 	stw	r9,0(r2)
  81707c:	20805215 	stw	r2,328(r4)
  817080:	10006215 	stw	zero,392(r2)
  817084:	10006315 	stw	zero,396(r2)
  817088:	883fde26 	beq	r17,zero,817004 <__alt_mem_onchip_mem+0xff80f004>
  81708c:	18c9883a 	add	r4,r3,r3
  817090:	2109883a 	add	r4,r4,r4
  817094:	1109883a 	add	r4,r2,r4
  817098:	21802215 	stw	r6,136(r4)
  81709c:	01800044 	movi	r6,1
  8170a0:	12406217 	ldw	r9,392(r2)
  8170a4:	30cc983a 	sll	r6,r6,r3
  8170a8:	4992b03a 	or	r9,r9,r6
  8170ac:	12406215 	stw	r9,392(r2)
  8170b0:	21c04215 	stw	r7,264(r4)
  8170b4:	01000084 	movi	r4,2
  8170b8:	893fd21e 	bne	r17,r4,817004 <__alt_mem_onchip_mem+0xff80f004>
  8170bc:	11006317 	ldw	r4,396(r2)
  8170c0:	218cb03a 	or	r6,r4,r6
  8170c4:	11806315 	stw	r6,396(r2)
  8170c8:	003fce06 	br	817004 <__alt_mem_onchip_mem+0xff80f004>
  8170cc:	18805304 	addi	r2,r3,332
  8170d0:	18805215 	stw	r2,328(r3)
  8170d4:	003fc606 	br	816ff0 <__alt_mem_onchip_mem+0xff80eff0>
  8170d8:	00bfffc4 	movi	r2,-1
  8170dc:	003fd006 	br	817020 <__alt_mem_onchip_mem+0xff80f020>

008170e0 <__call_exitprocs>:
  8170e0:	defff504 	addi	sp,sp,-44
  8170e4:	df000915 	stw	fp,36(sp)
  8170e8:	dd400615 	stw	r21,24(sp)
  8170ec:	dc800315 	stw	r18,12(sp)
  8170f0:	dfc00a15 	stw	ra,40(sp)
  8170f4:	ddc00815 	stw	r23,32(sp)
  8170f8:	dd800715 	stw	r22,28(sp)
  8170fc:	dd000515 	stw	r20,20(sp)
  817100:	dcc00415 	stw	r19,16(sp)
  817104:	dc400215 	stw	r17,8(sp)
  817108:	dc000115 	stw	r16,4(sp)
  81710c:	d9000015 	stw	r4,0(sp)
  817110:	2839883a 	mov	fp,r5
  817114:	04800044 	movi	r18,1
  817118:	057fffc4 	movi	r21,-1
  81711c:	008020b4 	movhi	r2,130
  817120:	10a56504 	addi	r2,r2,-27244
  817124:	12000017 	ldw	r8,0(r2)
  817128:	45005217 	ldw	r20,328(r8)
  81712c:	44c05204 	addi	r19,r8,328
  817130:	a0001c26 	beq	r20,zero,8171a4 <__call_exitprocs+0xc4>
  817134:	a0800117 	ldw	r2,4(r20)
  817138:	15ffffc4 	addi	r23,r2,-1
  81713c:	b8000d16 	blt	r23,zero,817174 <__call_exitprocs+0x94>
  817140:	14000044 	addi	r16,r2,1
  817144:	8421883a 	add	r16,r16,r16
  817148:	8421883a 	add	r16,r16,r16
  81714c:	84402004 	addi	r17,r16,128
  817150:	a463883a 	add	r17,r20,r17
  817154:	a421883a 	add	r16,r20,r16
  817158:	e0001e26 	beq	fp,zero,8171d4 <__call_exitprocs+0xf4>
  81715c:	80804017 	ldw	r2,256(r16)
  817160:	e0801c26 	beq	fp,r2,8171d4 <__call_exitprocs+0xf4>
  817164:	bdffffc4 	addi	r23,r23,-1
  817168:	843fff04 	addi	r16,r16,-4
  81716c:	8c7fff04 	addi	r17,r17,-4
  817170:	bd7ff91e 	bne	r23,r21,817158 <__alt_mem_onchip_mem+0xff80f158>
  817174:	00800034 	movhi	r2,0
  817178:	10800004 	addi	r2,r2,0
  81717c:	10000926 	beq	r2,zero,8171a4 <__call_exitprocs+0xc4>
  817180:	a0800117 	ldw	r2,4(r20)
  817184:	1000301e 	bne	r2,zero,817248 <__call_exitprocs+0x168>
  817188:	a0800017 	ldw	r2,0(r20)
  81718c:	10003226 	beq	r2,zero,817258 <__call_exitprocs+0x178>
  817190:	a009883a 	mov	r4,r20
  817194:	98800015 	stw	r2,0(r19)
  817198:	00000000 	call	0 <__reset-0x800000>
  81719c:	9d000017 	ldw	r20,0(r19)
  8171a0:	a03fe41e 	bne	r20,zero,817134 <__alt_mem_onchip_mem+0xff80f134>
  8171a4:	dfc00a17 	ldw	ra,40(sp)
  8171a8:	df000917 	ldw	fp,36(sp)
  8171ac:	ddc00817 	ldw	r23,32(sp)
  8171b0:	dd800717 	ldw	r22,28(sp)
  8171b4:	dd400617 	ldw	r21,24(sp)
  8171b8:	dd000517 	ldw	r20,20(sp)
  8171bc:	dcc00417 	ldw	r19,16(sp)
  8171c0:	dc800317 	ldw	r18,12(sp)
  8171c4:	dc400217 	ldw	r17,8(sp)
  8171c8:	dc000117 	ldw	r16,4(sp)
  8171cc:	dec00b04 	addi	sp,sp,44
  8171d0:	f800283a 	ret
  8171d4:	a0800117 	ldw	r2,4(r20)
  8171d8:	80c00017 	ldw	r3,0(r16)
  8171dc:	10bfffc4 	addi	r2,r2,-1
  8171e0:	15c01426 	beq	r2,r23,817234 <__call_exitprocs+0x154>
  8171e4:	80000015 	stw	zero,0(r16)
  8171e8:	183fde26 	beq	r3,zero,817164 <__alt_mem_onchip_mem+0xff80f164>
  8171ec:	95c8983a 	sll	r4,r18,r23
  8171f0:	a0806217 	ldw	r2,392(r20)
  8171f4:	a5800117 	ldw	r22,4(r20)
  8171f8:	2084703a 	and	r2,r4,r2
  8171fc:	10000b26 	beq	r2,zero,81722c <__call_exitprocs+0x14c>
  817200:	a0806317 	ldw	r2,396(r20)
  817204:	2088703a 	and	r4,r4,r2
  817208:	20000c1e 	bne	r4,zero,81723c <__call_exitprocs+0x15c>
  81720c:	89400017 	ldw	r5,0(r17)
  817210:	d9000017 	ldw	r4,0(sp)
  817214:	183ee83a 	callr	r3
  817218:	a0800117 	ldw	r2,4(r20)
  81721c:	15bfbf1e 	bne	r2,r22,81711c <__alt_mem_onchip_mem+0xff80f11c>
  817220:	98800017 	ldw	r2,0(r19)
  817224:	153fcf26 	beq	r2,r20,817164 <__alt_mem_onchip_mem+0xff80f164>
  817228:	003fbc06 	br	81711c <__alt_mem_onchip_mem+0xff80f11c>
  81722c:	183ee83a 	callr	r3
  817230:	003ff906 	br	817218 <__alt_mem_onchip_mem+0xff80f218>
  817234:	a5c00115 	stw	r23,4(r20)
  817238:	003feb06 	br	8171e8 <__alt_mem_onchip_mem+0xff80f1e8>
  81723c:	89000017 	ldw	r4,0(r17)
  817240:	183ee83a 	callr	r3
  817244:	003ff406 	br	817218 <__alt_mem_onchip_mem+0xff80f218>
  817248:	a0800017 	ldw	r2,0(r20)
  81724c:	a027883a 	mov	r19,r20
  817250:	1029883a 	mov	r20,r2
  817254:	003fb606 	br	817130 <__alt_mem_onchip_mem+0xff80f130>
  817258:	0005883a 	mov	r2,zero
  81725c:	003ffb06 	br	81724c <__alt_mem_onchip_mem+0xff80f24c>

00817260 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  817260:	defffd04 	addi	sp,sp,-12
  817264:	df000215 	stw	fp,8(sp)
  817268:	df000204 	addi	fp,sp,8
  81726c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  817270:	0001883a 	nop
  817274:	e0bfff17 	ldw	r2,-4(fp)
  817278:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  81727c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  817280:	10000226 	beq	r2,zero,81728c <_exit+0x2c>
    ALT_SIM_FAIL();
  817284:	002af070 	cmpltui	zero,zero,43969
  817288:	00000106 	br	817290 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  81728c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  817290:	003fff06 	br	817290 <__alt_mem_onchip_mem+0xff80f290>
