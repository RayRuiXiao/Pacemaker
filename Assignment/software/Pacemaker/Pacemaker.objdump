
Pacemaker.elf:     file format elf32-littlenios2
Pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001786c memsz 0x0001786c flags r-x
    LOAD off    0x0001888c vaddr 0x0081788c paddr 0x00819584 align 2**12
         filesz 0x00001cf8 memsz 0x00001cf8 flags rw-
    LOAD off    0x0001b27c vaddr 0x0081b27c paddr 0x0081b27c align 2**12
         filesz 0x00000000 memsz 0x00000348 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016ff8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000650  0081723c  0081723c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf8  0081788c  00819584  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000348  0081b27c  0081b27c  0001b27c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081b5c4  0081b5c4  0001a584  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0001a584  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001a584  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011e0  00000000  00000000  0001a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e35e  00000000  00000000  0001b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b718  00000000  00000000  00049ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f255  00000000  00000000  000551fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b14  00000000  00000000  00064454  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004a85  00000000  00000000  00066f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000185e9  00000000  00000000  0006b9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00083fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a10  00000000  00000000  00084038  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000898ad  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000898b0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000898b3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000898b4  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  000898b5  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  000898be  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  000898c7  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  000898d0  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  000898dc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  00089917  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0081723c l    d  .rodata	00000000 .rodata
0081788c l    d  .rwdata	00000000 .rwdata
0081b27c l    d  .bss	00000000 .bss
0081b5c4 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080746c l     F .text	00000008 __fp_unlock
00807480 l     F .text	0000019c __sinit.part.1
0080761c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081788c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00809228 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00817446 l     O .rodata	00000010 zeroes.4404
0080b854 l     F .text	000000bc __sbprintf
00817456 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfprintf_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080bc74 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
008180d8 l     O .rwdata	00000020 lc_ctype_charset
008180b8 l     O .rwdata	00000020 lc_message_charset
008180f8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00817484 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080f68c l     F .text	000000fc __sprint_r.part.0
008175b8 l     O .rodata	00000010 blanks.4348
008175a8 l     O .rodata	00000010 zeroes.4349
00810c18 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008130c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008131d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00813200 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0081346c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0081354c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00813638 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0081380c l     F .text	0000003c alt_get_errno
00813848 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00813a60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00819570 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00813e80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00813fb4 l     F .text	00000034 alt_dev_reg
008182d8 l     O .rwdata	00001060 jtag_uart
00819338 l     O .rwdata	00000120 lcd
00819458 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008142dc l     F .text	0000020c altera_avalon_jtag_uart_irq
008144e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081957c l     O .rwdata	00000004 colstart
00814b20 l     F .text	000000b8 lcd_write_command
00814bd8 l     F .text	000000d8 lcd_write_data
00814cb0 l     F .text	000000d0 lcd_clear_screen
00814d80 l     F .text	000001ec lcd_repaint_screen
00814f6c l     F .text	000000cc lcd_scroll_up
00815038 l     F .text	000002ac lcd_handle_escape
008157bc l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008159fc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00815cac l     F .text	0000009c altera_avalon_uart_irq
00815d48 l     F .text	000000e4 altera_avalon_uart_rxirq
00815e2c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00815fc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008161e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00816568 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00816c18 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081770b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081b308 g     O .bss	00000004 alt_instruction_exception_handler
0080ee00 g     F .text	00000074 _mprec_log10
0080eeec g     F .text	0000008c __any_on
0080da64 g     F .text	00000054 _isatty_r
00817490 g     O .rodata	00000028 __mprec_tinytens
00813748 g     F .text	0000007c alt_main
0081b298 g     O .bss	00000004 cAEI
00809154 g     F .text	000000c0 _puts_r
0081b4c4 g     O .bss	00000100 alt_irq
0080db94 g     F .text	00000060 _lseek_r
00819584 g       *ABS*	00000000 __flash_rwdata_start
0080d4fc g     F .text	000000ac __sflags
008126d4 g     F .text	00000088 .hidden __eqdf2
00800290 g     F .text	00000040 setup_lcd
0081b5c4 g       *ABS*	00000000 __alt_heap_start
0081b334 g     O .bss	00000018 ticker
00810fa0 g     F .text	0000009c _wcrtomb_r
00809544 g     F .text	0000005c __sseek
008077bc g     F .text	00000010 __sinit
0080b914 g     F .text	00000140 __swbuf_r
0081b27c g     O .bss	00000004 lcd
0080dab8 g     F .text	0000007c _setlocale_r
00807624 g     F .text	00000068 __sfmoreglue
008007d0 g     F .text	00000050 c_reset
008137e8 g     F .text	00000024 __malloc_unlock
0080de20 g     F .text	0000015c memmove
00800358 g     F .text	00000034 close_lcd
008077a4 g     F .text	00000018 _cleanup
0080df7c g     F .text	000000a8 _Balloc
008064b4 g     F .text	000000dc .hidden __gtdf2
00816d58 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008082b8 g     F .text	0000005c _fstat_r
00800820 g     F .text	00000320 c_tick
0081b2d4 g     O .bss	00000004 errno
008094c0 g     F .text	00000008 __seofread
0081b2f8 g     O .bss	00000004 alt_argv
0082151c g       *ABS*	00000000 _gp
00813e50 g     F .text	00000030 usleep
00805418 g     F .text	00000200 reset
00818158 g     O .rwdata	00000180 alt_fd_list
00816708 g     F .text	00000090 alt_find_dev
0080dcd8 g     F .text	00000148 memcpy
0081b494 g     O .bss	00000018 timer_ap
00807474 g     F .text	0000000c _cleanup_r
00806f80 g     F .text	000000dc .hidden __floatsidf
00816cdc g     F .text	0000007c alt_io_redirect
00806590 g     F .text	000000f4 .hidden __ltdf2
0081723c g       *ABS*	00000000 __DTOR_END__
00809214 g     F .text	00000014 puts
00816e0c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0081b2bc g     O .bss	00000004 VS
008006e0 g     F .text	00000084 key_interrupt
0080f53c g     F .text	00000074 __fpclassifyd
0080ed5c g     F .text	000000a4 __ratio
00810bfc g     F .text	0000001c __vfiprintf_internal
008146e0 g     F .text	0000021c altera_avalon_jtag_uart_read
00811d30 g     F .text	00000064 .hidden __udivsi3
008134a8 g     F .text	000000a4 isatty
0081952c g     O .rwdata	00000004 VRP_Constraint
008174e0 g     O .rodata	000000c8 __mprec_tens
0080db34 g     F .text	0000000c __locale_charset
00816d7c g     F .text	00000090 alt_icache_flush
0081b2e0 g     O .bss	00000004 __malloc_top_pad
00819520 g     O .rwdata	00000004 implementation
0081b2ac g     O .bss	00000004 VRPState
0081954c g     O .rwdata	00000004 __mb_cur_max
0080db64 g     F .text	0000000c _localeconv_r
0080e388 g     F .text	0000003c __i2b
0080d5a8 g     F .text	000004bc __sfvwrite_r
00809418 g     F .text	00000054 _sbrk_r
008002d0 g     F .text	00000088 write_to_lcd
0080ef78 g     F .text	00000060 _read_r
00819564 g     O .rwdata	00000004 alt_max_fd
008070c0 g     F .text	000000f0 _fclose_r
0080743c g     F .text	00000030 fflush
0081b2dc g     O .bss	00000004 __malloc_max_sbrked_mem
008132ec g     F .text	00000180 alt_irq_register
00805c08 g     F .text	000008ac .hidden __adddf3
0081b290 g     O .bss	00000004 cPVARP
0080eb04 g     F .text	0000010c __b2d
00811700 g     F .text	00000538 .hidden __umoddi3
00813674 g     F .text	000000d4 lseek
0081953c g     O .rwdata	00000004 _global_impure_ptr
0080efd8 g     F .text	00000564 _realloc_r
0081b5c4 g       *ABS*	00000000 __bss_end
00816b28 g     F .text	000000f0 alt_iic_isr_register
00813d48 g     F .text	00000108 alt_tick
00811188 g     F .text	00000578 .hidden __udivdi3
00810efc g     F .text	00000024 _fputwc_r
008174b8 g     O .rodata	00000028 __mprec_bigtens
0080e16c g     F .text	00000104 __s2b
00805998 g     F .text	00000074 ap_light_timer
00812ef4 g     F .text	000000a8 .hidden __floatunsidf
0080e844 g     F .text	00000060 __mcmp
00815c00 g     F .text	000000ac altera_avalon_uart_init
008077dc g     F .text	00000018 __fp_lock_all
00816adc g     F .text	0000004c alt_ic_irq_enabled
00813cac g     F .text	0000009c alt_alarm_stop
0081b2f0 g     O .bss	00000004 alt_irq_active
00807e58 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00818130 g     O .rwdata	00000028 alt_dev_null
0081b2b0 g     O .bss	00000004 AEIState
00816520 g     F .text	00000048 alt_dcache_flush_all
0080e270 g     F .text	00000068 __hi0bits
00812e74 g     F .text	00000080 .hidden __fixdfsi
00819584 g       *ABS*	00000000 __ram_rwdata_end
008004d4 g     F .text	00000084 start_ticker
0081955c g     O .rwdata	00000008 alt_dev_list
00807964 g     F .text	00000044 _fputc_r
00813ebc g     F .text	000000f8 write
00805b84 g     F .text	00000050 print_a
00808fec g     F .text	000000a0 _putc_r
0081788c g       *ABS*	00000000 __ram_rodata_end
0081323c g     F .text	000000b0 fstat
00807940 g     F .text	00000024 fprintf
0081b2cd g     O .bss	00000001 VSBuffer
00806590 g     F .text	000000f4 .hidden __ledf2
0080e5bc g     F .text	00000140 __pow5mult
0080f7a0 g     F .text	0000145c ___vfiprintf_internal_r
0081b2ec g     O .bss	00000004 __nlocale_changed
00811d94 g     F .text	00000058 .hidden __umodsi3
0081b5c4 g       *ABS*	00000000 end
008152e4 g     F .text	000004d8 altera_avalon_lcd_16207_write
0080829c g     F .text	0000001c fseeko
0081951c g     O .rwdata	00000004 mode
0081621c g     F .text	000001ac altera_avalon_uart_write
0081b29c g     O .bss	00000004 cURI
00807e3c g     F .text	0000001c fseek
00800558 g     F .text	00000034 stop_ticker
0081421c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0081723c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00815a74 g     F .text	0000007c alt_avalon_timer_sc_init
00815b50 g     F .text	00000060 altera_avalon_uart_write_fd
0080705c g     F .text	00000064 .hidden __clzsi2
00815bb0 g     F .text	00000050 altera_avalon_uart_close_fd
0081b28c g     O .bss	00000004 cAVI
008148fc g     F .text	00000224 altera_avalon_jtag_uart_write
008077cc g     F .text	00000004 __sfp_lock_acquire
0080dbf4 g     F .text	000000e4 memchr
00809640 g     F .text	000021f8 ___vfprintf_internal_r
00807b28 g     F .text	00000310 _free_r
0080db40 g     F .text	00000010 __locale_mb_cur_max
0081b2a4 g     O .bss	00000004 AVIState
00817088 g     F .text	00000180 __call_exitprocs
0081b2b4 g     O .bss	00000004 URIState
0081b2e8 g     O .bss	00000004 __mlocale_changed
0081b294 g     O .bss	00000004 cVRP
00819544 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081b300 g     O .bss	00000004 _alt_tick_rate
0080e6fc g     F .text	00000148 __lshift
0081b304 g     O .bss	00000004 _alt_nticks
00813a9c g     F .text	000000fc read
00814020 g     F .text	00000098 alt_sys_init
00808f8c g     F .text	00000060 _open_r
00816f70 g     F .text	00000118 __register_exitproc
0080e3c4 g     F .text	000001f8 __multiply
00814588 g     F .text	00000068 altera_avalon_jtag_uart_close
0081788c g       *ABS*	00000000 __ram_rwdata_start
0081723c g       *ABS*	00000000 __ram_rodata_start
0081b30c g     O .bss	00000028 __malloc_current_mallinfo
0080ec10 g     F .text	0000014c __d2b
008140b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008168a0 g     F .text	000000a4 alt_get_fd
008163c8 g     F .text	00000158 alt_busy_sleep
0080bc20 g     F .text	00000054 _close_r
00805924 g     F .text	00000074 vp_light_timer
00816ef4 g     F .text	0000007c memcmp
00805894 g     F .text	00000048 vp_light_timer_isr
00814178 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081b5c4 g       *ABS*	00000000 __alt_stack_base
008141c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080bacc g     F .text	00000154 __swsetup_r
00805618 g     F .text	0000027c tick
00811dec g     F .text	000008e8 .hidden __divdf3
0080768c g     F .text	00000118 __sfp
0080ee74 g     F .text	00000078 __copybits
00817cb0 g     O .rwdata	00000408 __malloc_av_
008077d8 g     F .text	00000004 __sinit_lock_release
0081275c g     F .text	00000718 .hidden __muldf3
0080946c g     F .text	00000054 __sread
00816798 g     F .text	00000108 alt_find_file
008165a4 g     F .text	000000a4 alt_dev_llist_insert
008137c4 g     F .text	00000024 __malloc_lock
00807918 g     F .text	00000028 _fprintf_r
00813bfc g     F .text	000000b0 sbrk
00819530 g     O .rwdata	00000004 AEI_Constraint
008073e0 g     F .text	0000005c _fflush_r
0081b284 g     O .bss	00000004 C_VP
00810cd4 g     F .text	000000c4 _calloc_r
00807900 g     F .text	00000018 fopen
0081b27c g       *ABS*	00000000 __bss_start
00808e64 g     F .text	00000128 memset
0080038c g     F .text	00000148 main
0081b2fc g     O .bss	00000004 alt_envp
0081b2d8 g     O .bss	00000004 __malloc_max_total_mem
0081b288 g     O .bss	00000004 C_AP
00814118 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080ba54 g     F .text	00000018 __swbuf
008006a0 g     F .text	00000040 reset_leds
0081b2cc g     O .bss	00000001 ASBuffer
00815868 g     F .text	00000134 altera_avalon_lcd_16207_init
008095a0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008071b0 g     F .text	00000014 fclose
0080be74 g     F .text	00001688 _dtoa_r
00808658 g     F .text	0000080c _malloc_r
008110fc g     F .text	00000030 __ascii_wctomb
00805b34 g     F .text	00000050 print_v
00819568 g     O .rwdata	00000004 alt_errno
0081b34c g     O .bss	00000148 tickData
00808314 g     F .text	000000c4 _fwalk
0080908c g     F .text	000000c8 putc
00811c38 g     F .text	00000084 .hidden __divsi3
00805a0c g     F .text	00000060 setup_uart
00807a04 g     F .text	00000124 _malloc_trim_r
0081723c g       *ABS*	00000000 __CTOR_END__
0080f5b0 g     F .text	000000dc strcmp
0081723c g       *ABS*	00000000 __flash_rodata_start
0081723c g       *ABS*	00000000 __DTOR_LIST__
008126d4 g     F .text	00000088 .hidden __nedf2
0081b2c4 g     O .bss	00000004 vp_timer_started
00813fe8 g     F .text	00000038 alt_irq_init
00813b98 g     F .text	00000064 alt_release_fd
008172fb g     O .rodata	00000100 .hidden __clz_tab
0081b2e4 g     O .bss	00000004 _PathLocale
00816ea8 g     F .text	00000014 atexit
0080ba6c g     F .text	00000060 _write_r
0080db70 g     F .text	00000018 setlocale
00819534 g     O .rwdata	00000004 LRI_Constraint
0081b4ac g     O .bss	00000018 timer_vp
00819540 g     O .rwdata	00000004 _impure_ptr
0081b2f4 g     O .bss	00000004 alt_argc
008071c4 g     F .text	0000021c __sflush_r
008166a8 g     F .text	00000060 _do_dtors
0080db5c g     F .text	00000008 __locale_cjk_lang
00807e38 g     F .text	00000004 _fseek_r
00805a6c g     F .text	000000c8 check_uart
00809244 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0081b2a0 g     O .bss	00000004 cLRI
0080eaa0 g     F .text	00000064 __ulp
008077f4 g     F .text	00000018 __fp_unlock_all
0081599c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008079a8 g     F .text	0000005c fputc
00819554 g     O .rwdata	00000008 alt_fs_list
0081b280 g     O .bss	00000001 VP
0081b2a8 g     O .bss	00000004 PVARPState
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080db88 g     F .text	0000000c localeconv
0081b2c8 g     O .bss	00000004 ap_timer_started
00805bd4 g     F .text	00000034 close_uart
0080058c g     F .text	00000114 timerISR
00816978 g     F .text	00000050 alt_ic_isr_register
0081b2b8 g     O .bss	00000004 LRIState
00819584 g       *ABS*	00000000 _edata
00815af0 g     F .text	00000060 altera_avalon_uart_read_fd
0081b5c4 g       *ABS*	00000000 _end
00810d98 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
008145f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00816a50 g     F .text	0000008c alt_ic_irq_disable
008094c8 g     F .text	0000007c __swrite
00819548 g     O .rwdata	00000004 __malloc_trim_threshold
0080db50 g     F .text	0000000c __locale_msgcharset
00816ebc g     F .text	00000038 exit
008083d8 g     F .text	000000c4 _fwalk_reent
0080e8a4 g     F .text	000001fc __mdiff
0081b2c0 g     O .bss	00000004 AS
00811cbc g     F .text	00000074 .hidden __modsi3
00800b40 g     F .text	000048d8 logic
00819580 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0081b2d0 g     O .bss	00000004 uart
008077d0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081760a g     O .rodata	00000101 _ctype_
00800764 g     F .text	0000006c setup_keys
008058dc g     F .text	00000048 ap_light_timer_isr
00815f74 g     F .text	00000054 altera_avalon_uart_close
0080780c g     F .text	000000f4 _fopen_r
00817208 g     F .text	00000034 _exit
00812f9c g     F .text	0000012c alt_alarm_start
0080849c g     F .text	000001bc __smakebuf_r
0081b281 g     O .bss	00000001 AP
008095a8 g     F .text	00000098 strlen
0081390c g     F .text	00000154 open
008064b4 g     F .text	000000dc .hidden __gedf2
00819528 g     O .rwdata	00000004 PVARP_Constraint
00819550 g     O .rwdata	00000004 __wctomb
0080f788 g     F .text	00000018 __sprint_r
00816944 g     F .text	00000034 alt_icache_flush_all
0081956c g     O .rwdata	00000004 alt_priority_mask
008169c8 g     F .text	00000088 alt_ic_irq_enable
0080b838 g     F .text	0000001c __vfprintf_internal
00816004 g     F .text	000001dc altera_avalon_uart_read
0081112c g     F .text	0000005c _wctomb_r
00806684 g     F .text	000008fc .hidden __subdf3
0080e2d8 g     F .text	000000b0 __lo0bits
00819574 g     O .rwdata	00000008 alt_alarm_list
00816648 g     F .text	00000060 _do_ctors
0081103c g     F .text	000000c0 wcrtomb
00813104 g     F .text	000000d0 close
00819524 g     O .rwdata	00000004 AVI_Constraint
008135b4 g     F .text	00000084 alt_load
00819538 g     O .rwdata	00000004 URI_Constraint
0080b910 g     F .text	00000004 vfprintf
00810f20 g     F .text	00000080 fputwc
008077d4 g     F .text	00000004 __sinit_lock_acquire
0080e04c g     F .text	00000120 __multadd
0080e024 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10ad3104 	addi	r2,r2,-19260
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10ad3104 	addi	r2,r2,-19260
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a77b17 	ldw	r2,-25108(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a77b17 	ldw	r2,-25108(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d6854714 	ori	gp,gp,5404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10ac9f14 	ori	r2,r2,45692

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18ed7114 	ori	r3,r3,46532

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08135b40 	call	8135b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08137480 	call	813748 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <setup_lcd>:
 */
#include "lcd.h"

FILE *lcd;

void setup_lcd(){
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
	lcd = fopen(LCD_NAME, "w");
  8002a0:	01402074 	movhi	r5,129
  8002a4:	295c8f04 	addi	r5,r5,29244
  8002a8:	01002074 	movhi	r4,129
  8002ac:	211c9004 	addi	r4,r4,29248
  8002b0:	08079000 	call	807900 <fopen>
  8002b4:	d0a75815 	stw	r2,-25248(gp)
}
  8002b8:	0001883a 	nop
  8002bc:	e037883a 	mov	sp,fp
  8002c0:	dfc00117 	ldw	ra,4(sp)
  8002c4:	df000017 	ldw	fp,0(sp)
  8002c8:	dec00204 	addi	sp,sp,8
  8002cc:	f800283a 	ret

008002d0 <write_to_lcd>:

void write_to_lcd(const char *format, ...){
  8002d0:	defff904 	addi	sp,sp,-28
  8002d4:	dfc00315 	stw	ra,12(sp)
  8002d8:	df000215 	stw	fp,8(sp)
  8002dc:	df000204 	addi	fp,sp,8
  8002e0:	e13fff15 	stw	r4,-4(fp)
  8002e4:	e1400215 	stw	r5,8(fp)
  8002e8:	e1800315 	stw	r6,12(fp)
  8002ec:	e1c00415 	stw	r7,16(fp)
	#define ESC 27
	#define CLEAR_LCD_STRING "[2J"

    // Print the ESC and CLEAR_LCD_STRING
	fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8002f0:	d0a75817 	ldw	r2,-25248(gp)
  8002f4:	01c02074 	movhi	r7,129
  8002f8:	39dc9304 	addi	r7,r7,29260
  8002fc:	018006c4 	movi	r6,27
  800300:	01402074 	movhi	r5,129
  800304:	295c9404 	addi	r5,r5,29264
  800308:	1009883a 	mov	r4,r2
  80030c:	08079400 	call	807940 <fprintf>

	// Use variadic arguments to print the formatted string
	va_list args;
	va_start(args, format);
  800310:	e0800204 	addi	r2,fp,8
  800314:	e0bffe15 	stw	r2,-8(fp)
	vfprintf(lcd, format, args);
  800318:	d0a75817 	ldw	r2,-25248(gp)
  80031c:	e0fffe17 	ldw	r3,-8(fp)
  800320:	180d883a 	mov	r6,r3
  800324:	e17fff17 	ldw	r5,-4(fp)
  800328:	1009883a 	mov	r4,r2
  80032c:	080b9100 	call	80b910 <vfprintf>
	va_end(args);

	// Print a newline character
	fprintf(lcd, "\n");
  800330:	d0a75817 	ldw	r2,-25248(gp)
  800334:	100b883a 	mov	r5,r2
  800338:	01000284 	movi	r4,10
  80033c:	08079a80 	call	8079a8 <fputc>
}
  800340:	0001883a 	nop
  800344:	e037883a 	mov	sp,fp
  800348:	dfc00117 	ldw	ra,4(sp)
  80034c:	df000017 	ldw	fp,0(sp)
  800350:	dec00504 	addi	sp,sp,20
  800354:	f800283a 	ret

00800358 <close_lcd>:

void close_lcd(){
  800358:	defffe04 	addi	sp,sp,-8
  80035c:	dfc00115 	stw	ra,4(sp)
  800360:	df000015 	stw	fp,0(sp)
  800364:	d839883a 	mov	fp,sp
	fclose(lcd);
  800368:	d0a75817 	ldw	r2,-25248(gp)
  80036c:	1009883a 	mov	r4,r2
  800370:	08071b00 	call	8071b0 <fclose>
}
  800374:	0001883a 	nop
  800378:	e037883a 	mov	sp,fp
  80037c:	dfc00117 	ldw	ra,4(sp)
  800380:	df000017 	ldw	fp,0(sp)
  800384:	dec00204 	addi	sp,sp,8
  800388:	f800283a 	ret

0080038c <main>:
enum MODE mode = UNSET;
enum IMPLEMENTATIONS implementation = PURE_C;


int main()
{
  80038c:	defffe04 	addi	sp,sp,-8
  800390:	dfc00115 	stw	ra,4(sp)
  800394:	df000015 	stw	fp,0(sp)
  800398:	d839883a 	mov	fp,sp
	reset_leds();
  80039c:	08006a00 	call	8006a0 <reset_leds>
	printf("Hello from Nios II!\n");
  8003a0:	01002074 	movhi	r4,129
  8003a4:	211c9604 	addi	r4,r4,29272
  8003a8:	08092140 	call	809214 <puts>
	// start a non blocking UART with read and write
	setup_keys();
  8003ac:	08007640 	call	800764 <setup_keys>
	setup_lcd();
  8003b0:	08002900 	call	800290 <setup_lcd>

	write_to_lcd("hello \n%s %s", "joshua", "morley");
  8003b4:	01802074 	movhi	r6,129
  8003b8:	319c9b04 	addi	r6,r6,29292
  8003bc:	01402074 	movhi	r5,129
  8003c0:	295c9d04 	addi	r5,r5,29300
  8003c4:	01002074 	movhi	r4,129
  8003c8:	211c9f04 	addi	r4,r4,29308
  8003cc:	08002d00 	call	8002d0 <write_to_lcd>


	while(1) {
		if (UART_MODE) {
  8003d0:	00804074 	movhi	r2,257
  8003d4:	10842404 	addi	r2,r2,4240
  8003d8:	10800037 	ldwio	r2,0(r2)
  8003dc:	1080004c 	andi	r2,r2,1
  8003e0:	10001726 	beq	r2,zero,800440 <main+0xb4>
			if (mode != UART){
  8003e4:	d0a00017 	ldw	r2,-32768(gp)
  8003e8:	10001326 	beq	r2,zero,800438 <main+0xac>
				stop_ticker();
  8003ec:	08005580 	call	800558 <stop_ticker>
				close_uart();
  8003f0:	0805bd40 	call	805bd4 <close_uart>
				// disable interrupts for all buttons
				IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x0);
  8003f4:	0007883a 	mov	r3,zero
  8003f8:	00804074 	movhi	r2,257
  8003fc:	10842a04 	addi	r2,r2,4264
  800400:	10c00035 	stwio	r3,0(r2)

				write_to_lcd("PaceMaker\n%s mode", "UART");
  800404:	01402074 	movhi	r5,129
  800408:	295ca304 	addi	r5,r5,29324
  80040c:	01002074 	movhi	r4,129
  800410:	211ca504 	addi	r4,r4,29332
  800414:	08002d00 	call	8002d0 <write_to_lcd>
				printf("UART Enabled\n");
  800418:	01002074 	movhi	r4,129
  80041c:	211caa04 	addi	r4,r4,29352
  800420:	08092140 	call	809214 <puts>

				mode = UART;
  800424:	d0200015 	stw	zero,-32768(gp)


				usleep(50); // To remove bouncing
  800428:	01000c84 	movi	r4,50
  80042c:	0813e500 	call	813e50 <usleep>
				setup_uart();
  800430:	0805a0c0 	call	805a0c <setup_uart>
				start_ticker();
  800434:	08004d40 	call	8004d4 <start_ticker>
			}
			check_uart();
  800438:	0805a6c0 	call	805a6c <check_uart>
  80043c:	00001a06 	br	8004a8 <main+0x11c>
		} else {
			if (mode != BUTTON){
  800440:	d0a00017 	ldw	r2,-32768(gp)
  800444:	10800060 	cmpeqi	r2,r2,1
  800448:	1000171e 	bne	r2,zero,8004a8 <main+0x11c>
				close_uart();
  80044c:	0805bd40 	call	805bd4 <close_uart>
				stop_ticker();
  800450:	08005580 	call	800558 <stop_ticker>
				// clears the edge capture register
				IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  800454:	0007883a 	mov	r3,zero
  800458:	00804074 	movhi	r2,257
  80045c:	10842b04 	addi	r2,r2,4268
  800460:	10c00035 	stwio	r3,0(r2)
				// enable interrupts for all buttons
				IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  800464:	00c001c4 	movi	r3,7
  800468:	00804074 	movhi	r2,257
  80046c:	10842a04 	addi	r2,r2,4264
  800470:	10c00035 	stwio	r3,0(r2)

				printf("UART Disabled\n");
  800474:	01002074 	movhi	r4,129
  800478:	211cae04 	addi	r4,r4,29368
  80047c:	08092140 	call	809214 <puts>
				write_to_lcd("PaceMaker\n%s mode", "BUTTON");
  800480:	01402074 	movhi	r5,129
  800484:	295cb204 	addi	r5,r5,29384
  800488:	01002074 	movhi	r4,129
  80048c:	211ca504 	addi	r4,r4,29332
  800490:	08002d00 	call	8002d0 <write_to_lcd>

				mode = BUTTON;
  800494:	00800044 	movi	r2,1
  800498:	d0a00015 	stw	r2,-32768(gp)

				usleep(50); // To remove bouncing
  80049c:	01000c84 	movi	r4,50
  8004a0:	0813e500 	call	813e50 <usleep>
				start_ticker();
  8004a4:	08004d40 	call	8004d4 <start_ticker>
			}
		}

		if (AP) {
  8004a8:	d0a75943 	ldbu	r2,-25243(gp)
  8004ac:	10803fcc 	andi	r2,r2,255
  8004b0:	10000226 	beq	r2,zero,8004bc <main+0x130>
			//print_uart("A\n");
			print_a();
  8004b4:	0805b840 	call	805b84 <print_a>
			AP = false;
  8004b8:	d0275945 	stb	zero,-25243(gp)
		}


		if (VP) {
  8004bc:	d0a75903 	ldbu	r2,-25244(gp)
  8004c0:	10803fcc 	andi	r2,r2,255
  8004c4:	103fc226 	beq	r2,zero,8003d0 <__alt_mem_onchip_mem+0xff7f83d0>
			print_v();
  8004c8:	0805b340 	call	805b34 <print_v>
			VP = false;
  8004cc:	d0275905 	stb	zero,-25244(gp)
		}
	}
  8004d0:	003fbf06 	br	8003d0 <__alt_mem_onchip_mem+0xff7f83d0>

008004d4 <start_ticker>:
	close_uart();
	close_lcd();
	return 0;
}

void start_ticker(){
  8004d4:	defffb04 	addi	sp,sp,-20
  8004d8:	dfc00415 	stw	ra,16(sp)
  8004dc:	df000315 	stw	fp,12(sp)
  8004e0:	df000304 	addi	fp,sp,12
	reset(&tickData);
  8004e4:	010020b4 	movhi	r4,130
  8004e8:	212cd304 	addi	r4,r4,-19636
  8004ec:	08054180 	call	805418 <reset>
	tick(&tickData); // init tick
  8004f0:	010020b4 	movhi	r4,130
  8004f4:	212cd304 	addi	r4,r4,-19636
  8004f8:	08056180 	call	805618 <tick>
	c_reset();
  8004fc:	08007d00 	call	8007d0 <c_reset>

	// Timer Init
	uint64_t systemTime = 0;
  800500:	e03ffe15 	stw	zero,-8(fp)
  800504:	e03fff15 	stw	zero,-4(fp)
	void* timerContext = (void*) &systemTime;
  800508:	e0bffe04 	addi	r2,fp,-8
  80050c:	e0bffd15 	stw	r2,-12(fp)
	alt_alarm_start(&ticker, 1, timerISR, timerContext);
  800510:	e1fffd17 	ldw	r7,-12(fp)
  800514:	01802034 	movhi	r6,128
  800518:	31816304 	addi	r6,r6,1420
  80051c:	01400044 	movi	r5,1
  800520:	010020b4 	movhi	r4,130
  800524:	212ccd04 	addi	r4,r4,-19660
  800528:	0812f9c0 	call	812f9c <alt_alarm_start>
	tickData.deltaT = 1;
  80052c:	008020b4 	movhi	r2,130
  800530:	10acd304 	addi	r2,r2,-19636
  800534:	10001315 	stw	zero,76(r2)
  800538:	00cffc34 	movhi	r3,16368
  80053c:	10c01415 	stw	r3,80(r2)


}
  800540:	0001883a 	nop
  800544:	e037883a 	mov	sp,fp
  800548:	dfc00117 	ldw	ra,4(sp)
  80054c:	df000017 	ldw	fp,0(sp)
  800550:	dec00204 	addi	sp,sp,8
  800554:	f800283a 	ret

00800558 <stop_ticker>:

void stop_ticker(){
  800558:	defffe04 	addi	sp,sp,-8
  80055c:	dfc00115 	stw	ra,4(sp)
  800560:	df000015 	stw	fp,0(sp)
  800564:	d839883a 	mov	fp,sp
	alt_alarm_stop(&ticker);
  800568:	010020b4 	movhi	r4,130
  80056c:	212ccd04 	addi	r4,r4,-19660
  800570:	0813cac0 	call	813cac <alt_alarm_stop>
}
  800574:	0001883a 	nop
  800578:	e037883a 	mov	sp,fp
  80057c:	dfc00117 	ldw	ra,4(sp)
  800580:	df000017 	ldw	fp,0(sp)
  800584:	dec00204 	addi	sp,sp,8
  800588:	f800283a 	ret

0080058c <timerISR>:


alt_u32 timerISR(void* context){
  80058c:	defffd04 	addi	sp,sp,-12
  800590:	dfc00215 	stw	ra,8(sp)
  800594:	df000115 	stw	fp,4(sp)
  800598:	df000104 	addi	fp,sp,4
  80059c:	e13fff15 	stw	r4,-4(fp)

	switch (implementation){
  8005a0:	d0a00117 	ldw	r2,-32764(gp)
  8005a4:	10000326 	beq	r2,zero,8005b4 <timerISR+0x28>
  8005a8:	10800060 	cmpeqi	r2,r2,1
  8005ac:	1000231e 	bne	r2,zero,80063c <timerISR+0xb0>
  8005b0:	00003306 	br	800680 <timerISR+0xf4>
	case SCCHARTS:
		tickData.VS = VSBuffer;
  8005b4:	d0a76c43 	ldbu	r2,-25167(gp)
  8005b8:	1007883a 	mov	r3,r2
  8005bc:	008020b4 	movhi	r2,130
  8005c0:	10acd304 	addi	r2,r2,-19636
  8005c4:	10c00045 	stb	r3,1(r2)
		tickData.AS = ASBuffer;
  8005c8:	d0a76c03 	ldbu	r2,-25168(gp)
  8005cc:	1007883a 	mov	r3,r2
  8005d0:	008020b4 	movhi	r2,130
  8005d4:	10acd304 	addi	r2,r2,-19636
  8005d8:	10c00005 	stb	r3,0(r2)



		tick(&tickData);
  8005dc:	010020b4 	movhi	r4,130
  8005e0:	212cd304 	addi	r4,r4,-19636
  8005e4:	08056180 	call	805618 <tick>


		if (tickData.AP){
  8005e8:	008020b4 	movhi	r2,130
  8005ec:	10acd304 	addi	r2,r2,-19636
  8005f0:	10801703 	ldbu	r2,92(r2)
  8005f4:	10803fcc 	andi	r2,r2,255
  8005f8:	1080201c 	xori	r2,r2,128
  8005fc:	10bfe004 	addi	r2,r2,-128
  800600:	10000326 	beq	r2,zero,800610 <timerISR+0x84>
			ap_light_timer();
  800604:	08059980 	call	805998 <ap_light_timer>
			AP = true;
  800608:	00800044 	movi	r2,1
  80060c:	d0a75945 	stb	r2,-25243(gp)
		}

		if (tickData.VP){
  800610:	008020b4 	movhi	r2,130
  800614:	10acd304 	addi	r2,r2,-19636
  800618:	10801743 	ldbu	r2,93(r2)
  80061c:	10803fcc 	andi	r2,r2,255
  800620:	1080201c 	xori	r2,r2,128
  800624:	10bfe004 	addi	r2,r2,-128
  800628:	10001226 	beq	r2,zero,800674 <timerISR+0xe8>
			vp_light_timer();
  80062c:	08059240 	call	805924 <vp_light_timer>
			VP = true;
  800630:	00800044 	movi	r2,1
  800634:	d0a75905 	stb	r2,-25244(gp)
		}
		break;
  800638:	00000e06 	br	800674 <timerISR+0xe8>
	case PURE_C:
		c_tick();
  80063c:	08008200 	call	800820 <c_tick>

		if (C_AP){
  800640:	d0a75b17 	ldw	r2,-25236(gp)
  800644:	10000426 	beq	r2,zero,800658 <timerISR+0xcc>
			ap_light_timer();
  800648:	08059980 	call	805998 <ap_light_timer>
			AP = true;
  80064c:	00800044 	movi	r2,1
  800650:	d0a75945 	stb	r2,-25243(gp)
			C_AP = 0;
  800654:	d0275b15 	stw	zero,-25236(gp)
		}

		if (C_VP){
  800658:	d0a75a17 	ldw	r2,-25240(gp)
  80065c:	10000726 	beq	r2,zero,80067c <timerISR+0xf0>
			vp_light_timer();
  800660:	08059240 	call	805924 <vp_light_timer>
			VP = true;
  800664:	00800044 	movi	r2,1
  800668:	d0a75905 	stb	r2,-25244(gp)
			C_VP = 0;
  80066c:	d0275a15 	stw	zero,-25240(gp)

		}

		break;
  800670:	00000206 	br	80067c <timerISR+0xf0>

		if (tickData.VP){
			vp_light_timer();
			VP = true;
		}
		break;
  800674:	0001883a 	nop
  800678:	00000106 	br	800680 <timerISR+0xf4>
			VP = true;
			C_VP = 0;

		}

		break;
  80067c:	0001883a 	nop
	}


	VSBuffer = 0;
  800680:	d0276c45 	stb	zero,-25167(gp)
	ASBuffer = 0;
  800684:	d0276c05 	stb	zero,-25168(gp)


	return 1; // next tick is a fter 1ms
  800688:	00800044 	movi	r2,1
}
  80068c:	e037883a 	mov	sp,fp
  800690:	dfc00117 	ldw	ra,4(sp)
  800694:	df000017 	ldw	fp,0(sp)
  800698:	dec00204 	addi	sp,sp,8
  80069c:	f800283a 	ret

008006a0 <reset_leds>:

void reset_leds(){
  8006a0:	deffff04 	addi	sp,sp,-4
  8006a4:	df000015 	stw	fp,0(sp)
  8006a8:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x0);
  8006ac:	0007883a 	mov	r3,zero
  8006b0:	00804074 	movhi	r2,257
  8006b4:	10842004 	addi	r2,r2,4224
  8006b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0);
  8006bc:	0007883a 	mov	r3,zero
  8006c0:	00804074 	movhi	r2,257
  8006c4:	10841c04 	addi	r2,r2,4208
  8006c8:	10c00035 	stwio	r3,0(r2)
}
  8006cc:	0001883a 	nop
  8006d0:	e037883a 	mov	sp,fp
  8006d4:	df000017 	ldw	fp,0(sp)
  8006d8:	dec00104 	addi	sp,sp,4
  8006dc:	f800283a 	ret

008006e0 <key_interrupt>:


void key_interrupt(void* context, alt_u32 id) {
  8006e0:	defffc04 	addi	sp,sp,-16
  8006e4:	df000315 	stw	fp,12(sp)
  8006e8:	df000304 	addi	fp,sp,12
  8006ec:	e13ffe15 	stw	r4,-8(fp)
  8006f0:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // need to cast the context first before using it
  8006f4:	e0bffe17 	ldw	r2,-8(fp)
  8006f8:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8006fc:	00804074 	movhi	r2,257
  800700:	10842b04 	addi	r2,r2,4268
  800704:	10c00037 	ldwio	r3,0(r2)
  800708:	e0bffd17 	ldw	r2,-12(fp)
  80070c:	10c00015 	stw	r3,0(r2)
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  800710:	0007883a 	mov	r3,zero
  800714:	00804074 	movhi	r2,257
  800718:	10842b04 	addi	r2,r2,4268
  80071c:	10c00035 	stwio	r3,0(r2)
	if (*temp == 1){
  800720:	e0bffd17 	ldw	r2,-12(fp)
  800724:	10800017 	ldw	r2,0(r2)
  800728:	10800058 	cmpnei	r2,r2,1
  80072c:	1000021e 	bne	r2,zero,800738 <key_interrupt+0x58>
		VSBuffer = 1;
  800730:	00800044 	movi	r2,1
  800734:	d0a76c45 	stb	r2,-25167(gp)
	}
	if (*temp == 2){
  800738:	e0bffd17 	ldw	r2,-12(fp)
  80073c:	10800017 	ldw	r2,0(r2)
  800740:	10800098 	cmpnei	r2,r2,2
  800744:	1000021e 	bne	r2,zero,800750 <key_interrupt+0x70>
		ASBuffer = 1;
  800748:	00800044 	movi	r2,1
  80074c:	d0a76c05 	stb	r2,-25168(gp)
	}
}
  800750:	0001883a 	nop
  800754:	e037883a 	mov	sp,fp
  800758:	df000017 	ldw	fp,0(sp)
  80075c:	dec00104 	addi	sp,sp,4
  800760:	f800283a 	ret

00800764 <setup_keys>:

void setup_keys(){
  800764:	defffc04 	addi	sp,sp,-16
  800768:	dfc00315 	stw	ra,12(sp)
  80076c:	df000215 	stw	fp,8(sp)
  800770:	df000204 	addi	fp,sp,8
	int keyValue = 1;
  800774:	00800044 	movi	r2,1
  800778:	e0bfff15 	stw	r2,-4(fp)
	void* contextKeyInterrupt =(void*) &keyValue; // cast before passing to ISR
  80077c:	e0bfff04 	addi	r2,fp,-4
  800780:	e0bffe15 	stw	r2,-8(fp)


	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  800784:	0007883a 	mov	r3,zero
  800788:	00804074 	movhi	r2,257
  80078c:	10842b04 	addi	r2,r2,4268
  800790:	10c00035 	stwio	r3,0(r2)

	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  800794:	00c001c4 	movi	r3,7
  800798:	00804074 	movhi	r2,257
  80079c:	10842a04 	addi	r2,r2,4264
  8007a0:	10c00035 	stwio	r3,0(r2)

	// register the ISR
	alt_irq_register(KEYS_IRQ, contextKeyInterrupt, key_interrupt);
  8007a4:	01802034 	movhi	r6,128
  8007a8:	3181b804 	addi	r6,r6,1760
  8007ac:	e17ffe17 	ldw	r5,-8(fp)
  8007b0:	01000104 	movi	r4,4
  8007b4:	08132ec0 	call	8132ec <alt_irq_register>
}
  8007b8:	0001883a 	nop
  8007bc:	e037883a 	mov	sp,fp
  8007c0:	dfc00117 	ldw	ra,4(sp)
  8007c4:	df000017 	ldw	fp,0(sp)
  8007c8:	dec00204 	addi	sp,sp,8
  8007cc:	f800283a 	ret

008007d0 <c_reset>:
enum AEIStates   AEIState = wAEI;
enum URIStates   URIState = wURI;
enum LRIStates   LRIState = wLRI;

// Reset program function
void c_reset() {
  8007d0:	deffff04 	addi	sp,sp,-4
  8007d4:	df000015 	stw	fp,0(sp)
  8007d8:	d839883a 	mov	fp,sp
	// initialize waiting states
	AVIState = wAVI;
  8007dc:	d0276215 	stw	zero,-25208(gp)
	PVARPState = wPVARP;
  8007e0:	d0276315 	stw	zero,-25204(gp)
	VRPState = wVRP;
  8007e4:	d0276415 	stw	zero,-25200(gp)
	AEIState = wAEI;
  8007e8:	d0276515 	stw	zero,-25196(gp)
	URIState = wURI;
  8007ec:	d0276615 	stw	zero,-25192(gp)
	LRIState = wLRI;
  8007f0:	d0276715 	stw	zero,-25188(gp)

	// initialize counters
	cAVI = 0;
  8007f4:	d0275c15 	stw	zero,-25232(gp)
	cPVARP = 0;
  8007f8:	d0275d15 	stw	zero,-25228(gp)
	cVRP = 0;
  8007fc:	d0275e15 	stw	zero,-25224(gp)
	cAEI = 0;
  800800:	d0275f15 	stw	zero,-25220(gp)
	cURI = 0;
  800804:	d0276015 	stw	zero,-25216(gp)
	cLRI = 0;
  800808:	d0276115 	stw	zero,-25212(gp)
}
  80080c:	0001883a 	nop
  800810:	e037883a 	mov	sp,fp
  800814:	df000017 	ldw	fp,0(sp)
  800818:	dec00104 	addi	sp,sp,4
  80081c:	f800283a 	ret

00800820 <c_tick>:

void c_tick() {
  800820:	deffff04 	addi	sp,sp,-4
  800824:	df000015 	stw	fp,0(sp)
  800828:	d839883a 	mov	fp,sp

	AS = ASBuffer;
  80082c:	d0a76c03 	ldbu	r2,-25168(gp)
  800830:	10803fcc 	andi	r2,r2,255
  800834:	d0a76915 	stw	r2,-25180(gp)
	VS = VSBuffer;
  800838:	d0a76c43 	ldbu	r2,-25167(gp)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	d0a76815 	stw	r2,-25184(gp)

	//print_v();

    // -------------- AVIState ---------------
    switch (AVIState) {
  800844:	d0a76217 	ldw	r2,-25208(gp)
  800848:	10000326 	beq	r2,zero,800858 <c_tick+0x38>
  80084c:	10800060 	cmpeqi	r2,r2,1
  800850:	10000c1e 	bne	r2,zero,800884 <c_tick+0x64>
  800854:	00002106 	br	8008dc <c_tick+0xbc>
    case wAVI:
        if ((AS || C_AP) && PVARPState != dPVARP) {
  800858:	d0a76917 	ldw	r2,-25180(gp)
  80085c:	1000021e 	bne	r2,zero,800868 <c_tick+0x48>
  800860:	d0a75b17 	ldw	r2,-25236(gp)
  800864:	10001c26 	beq	r2,zero,8008d8 <c_tick+0xb8>
  800868:	d0a76317 	ldw	r2,-25204(gp)
  80086c:	10800060 	cmpeqi	r2,r2,1
  800870:	1000191e 	bne	r2,zero,8008d8 <c_tick+0xb8>
            AVIState = dAVI;
  800874:	00800044 	movi	r2,1
  800878:	d0a76215 	stw	r2,-25208(gp)
            cAVI = 0;
  80087c:	d0275c15 	stw	zero,-25232(gp)
        }
        break;
  800880:	00001506 	br	8008d8 <c_tick+0xb8>
    case dAVI:
        if ((cAVI >= AVI_Constraint && URIState != dURI) || LRIState != dLRI) {
  800884:	d0e75c17 	ldw	r3,-25232(gp)
  800888:	d0a00217 	ldw	r2,-32760(gp)
  80088c:	18800316 	blt	r3,r2,80089c <c_tick+0x7c>
  800890:	d0a76617 	ldw	r2,-25192(gp)
  800894:	10800058 	cmpnei	r2,r2,1
  800898:	1000031e 	bne	r2,zero,8008a8 <c_tick+0x88>
  80089c:	d0a76717 	ldw	r2,-25188(gp)
  8008a0:	10800060 	cmpeqi	r2,r2,1
  8008a4:	1000041e 	bne	r2,zero,8008b8 <c_tick+0x98>
            C_VP = 1;
  8008a8:	00800044 	movi	r2,1
  8008ac:	d0a75a15 	stw	r2,-25240(gp)
            AVIState = wAVI;
  8008b0:	d0276215 	stw	zero,-25208(gp)
  8008b4:	00000406 	br	8008c8 <c_tick+0xa8>
        } else if (VS == 1){
  8008b8:	d0a76817 	ldw	r2,-25184(gp)
  8008bc:	10800058 	cmpnei	r2,r2,1
  8008c0:	1000011e 	bne	r2,zero,8008c8 <c_tick+0xa8>
        	AVIState = wAVI;
  8008c4:	d0276215 	stw	zero,-25208(gp)
        }
        cAVI += 1;
  8008c8:	d0a75c17 	ldw	r2,-25232(gp)
  8008cc:	10800044 	addi	r2,r2,1
  8008d0:	d0a75c15 	stw	r2,-25232(gp)
        break;
  8008d4:	00000106 	br	8008dc <c_tick+0xbc>
    case wAVI:
        if ((AS || C_AP) && PVARPState != dPVARP) {
            AVIState = dAVI;
            cAVI = 0;
        }
        break;
  8008d8:	0001883a 	nop
        break;
    }
    // ------------- End AVIState -------------

    // -------------- PVARPState ---------------
    switch (PVARPState) {
  8008dc:	d0a76317 	ldw	r2,-25204(gp)
  8008e0:	10000326 	beq	r2,zero,8008f0 <c_tick+0xd0>
  8008e4:	10800060 	cmpeqi	r2,r2,1
  8008e8:	10000a1e 	bne	r2,zero,800914 <c_tick+0xf4>
  8008ec:	00001206 	br	800938 <c_tick+0x118>
    case wPVARP:
        if (VS || C_VP) {
  8008f0:	d0a76817 	ldw	r2,-25184(gp)
  8008f4:	1000021e 	bne	r2,zero,800900 <c_tick+0xe0>
  8008f8:	d0a75a17 	ldw	r2,-25240(gp)
  8008fc:	10000d26 	beq	r2,zero,800934 <c_tick+0x114>
            PVARPState = dPVARP;
  800900:	00800044 	movi	r2,1
  800904:	d0a76315 	stw	r2,-25204(gp)
            cPVARP = 0;
  800908:	d0275d15 	stw	zero,-25228(gp)
            VS = 0;
  80090c:	d0276815 	stw	zero,-25184(gp)
        }
        break;
  800910:	00000806 	br	800934 <c_tick+0x114>
    case dPVARP:
        if (cPVARP >= AVI_Constraint) {
  800914:	d0e75d17 	ldw	r3,-25228(gp)
  800918:	d0a00217 	ldw	r2,-32760(gp)
  80091c:	18800116 	blt	r3,r2,800924 <c_tick+0x104>
            PVARPState = wPVARP;
  800920:	d0276315 	stw	zero,-25204(gp)
        }
        cPVARP += 1;
  800924:	d0a75d17 	ldw	r2,-25228(gp)
  800928:	10800044 	addi	r2,r2,1
  80092c:	d0a75d15 	stw	r2,-25228(gp)
        break;
  800930:	00000106 	br	800938 <c_tick+0x118>
        if (VS || C_VP) {
            PVARPState = dPVARP;
            cPVARP = 0;
            VS = 0;
        }
        break;
  800934:	0001883a 	nop
    }
    // ------------- End PVARPState -------------


    // -------------- VRPState ---------------
    switch (VRPState) {
  800938:	d0a76417 	ldw	r2,-25200(gp)
  80093c:	10000326 	beq	r2,zero,80094c <c_tick+0x12c>
  800940:	10800060 	cmpeqi	r2,r2,1
  800944:	1000091e 	bne	r2,zero,80096c <c_tick+0x14c>
  800948:	00001106 	br	800990 <c_tick+0x170>
    case wVRP:
        if (VS || C_VP) {
  80094c:	d0a76817 	ldw	r2,-25184(gp)
  800950:	1000021e 	bne	r2,zero,80095c <c_tick+0x13c>
  800954:	d0a75a17 	ldw	r2,-25240(gp)
  800958:	10000c26 	beq	r2,zero,80098c <c_tick+0x16c>
            VRPState = dVRP;
  80095c:	00800044 	movi	r2,1
  800960:	d0a76415 	stw	r2,-25200(gp)
            cVRP = 0;
  800964:	d0275e15 	stw	zero,-25224(gp)
        }
        break;
  800968:	00000806 	br	80098c <c_tick+0x16c>
    case dVRP:
        if (cVRP >= VRP_Constraint) {
  80096c:	d0e75e17 	ldw	r3,-25224(gp)
  800970:	d0a00417 	ldw	r2,-32752(gp)
  800974:	18800116 	blt	r3,r2,80097c <c_tick+0x15c>
            VRPState = wVRP;
  800978:	d0276415 	stw	zero,-25200(gp)
        }
        cVRP += 1;
  80097c:	d0a75e17 	ldw	r2,-25224(gp)
  800980:	10800044 	addi	r2,r2,1
  800984:	d0a75e15 	stw	r2,-25224(gp)
        break;
  800988:	00000106 	br	800990 <c_tick+0x170>
    case wVRP:
        if (VS || C_VP) {
            VRPState = dVRP;
            cVRP = 0;
        }
        break;
  80098c:	0001883a 	nop
    }
    // ------------- End VRPState -------------


    // -------------- AEIState ---------------
    switch (AEIState) {
  800990:	d0a76517 	ldw	r2,-25196(gp)
  800994:	10000326 	beq	r2,zero,8009a4 <c_tick+0x184>
  800998:	10800060 	cmpeqi	r2,r2,1
  80099c:	10000c1e 	bne	r2,zero,8009d0 <c_tick+0x1b0>
  8009a0:	00001e06 	br	800a1c <c_tick+0x1fc>
    case wAEI:
        if ((VS || C_VP) && VRPState != dVRP) {
  8009a4:	d0a76817 	ldw	r2,-25184(gp)
  8009a8:	1000021e 	bne	r2,zero,8009b4 <c_tick+0x194>
  8009ac:	d0a75a17 	ldw	r2,-25240(gp)
  8009b0:	10001926 	beq	r2,zero,800a18 <c_tick+0x1f8>
  8009b4:	d0a76417 	ldw	r2,-25200(gp)
  8009b8:	10800060 	cmpeqi	r2,r2,1
  8009bc:	1000161e 	bne	r2,zero,800a18 <c_tick+0x1f8>
            AEIState = dAEI;
  8009c0:	00800044 	movi	r2,1
  8009c4:	d0a76515 	stw	r2,-25196(gp)
            cAEI = 0;
  8009c8:	d0275f15 	stw	zero,-25220(gp)
        }
        break;
  8009cc:	00001206 	br	800a18 <c_tick+0x1f8>
    case dAEI:
        if (cAEI >= AEI_Constraint) {
  8009d0:	d0e75f17 	ldw	r3,-25220(gp)
  8009d4:	d0a00517 	ldw	r2,-32748(gp)
  8009d8:	18800416 	blt	r3,r2,8009ec <c_tick+0x1cc>
            C_AP = 1;
  8009dc:	00800044 	movi	r2,1
  8009e0:	d0a75b15 	stw	r2,-25236(gp)
            AEIState = wAEI;
  8009e4:	d0276515 	stw	zero,-25196(gp)
  8009e8:	00000706 	br	800a08 <c_tick+0x1e8>
        } else if (AS == 1 && PVARPState != dPVARP){
  8009ec:	d0a76917 	ldw	r2,-25180(gp)
  8009f0:	10800058 	cmpnei	r2,r2,1
  8009f4:	1000041e 	bne	r2,zero,800a08 <c_tick+0x1e8>
  8009f8:	d0a76317 	ldw	r2,-25204(gp)
  8009fc:	10800060 	cmpeqi	r2,r2,1
  800a00:	1000011e 	bne	r2,zero,800a08 <c_tick+0x1e8>
			AEIState = wAEI;
  800a04:	d0276515 	stw	zero,-25196(gp)
        }
        cAEI += 1;
  800a08:	d0a75f17 	ldw	r2,-25220(gp)
  800a0c:	10800044 	addi	r2,r2,1
  800a10:	d0a75f15 	stw	r2,-25220(gp)
        break;
  800a14:	00000106 	br	800a1c <c_tick+0x1fc>
    case wAEI:
        if ((VS || C_VP) && VRPState != dVRP) {
            AEIState = dAEI;
            cAEI = 0;
        }
        break;
  800a18:	0001883a 	nop
    }
    // ------------- End AEIState -------------


    // -------------- LRIState ---------------
    switch (LRIState) {
  800a1c:	d0a76717 	ldw	r2,-25188(gp)
  800a20:	10000326 	beq	r2,zero,800a30 <c_tick+0x210>
  800a24:	10800060 	cmpeqi	r2,r2,1
  800a28:	10000c1e 	bne	r2,zero,800a5c <c_tick+0x23c>
  800a2c:	00002606 	br	800ac8 <c_tick+0x2a8>
    case wLRI:
        if ((VS || C_VP) && VRPState != dVRP) {
  800a30:	d0a76817 	ldw	r2,-25184(gp)
  800a34:	1000021e 	bne	r2,zero,800a40 <c_tick+0x220>
  800a38:	d0a75a17 	ldw	r2,-25240(gp)
  800a3c:	10002126 	beq	r2,zero,800ac4 <c_tick+0x2a4>
  800a40:	d0a76417 	ldw	r2,-25200(gp)
  800a44:	10800060 	cmpeqi	r2,r2,1
  800a48:	10001e1e 	bne	r2,zero,800ac4 <c_tick+0x2a4>
            LRIState = dLRI;
  800a4c:	00800044 	movi	r2,1
  800a50:	d0a76715 	stw	r2,-25188(gp)
            cLRI = 0;
  800a54:	d0276115 	stw	zero,-25212(gp)
        }
        break;
  800a58:	00001a06 	br	800ac4 <c_tick+0x2a4>
    case dLRI:
        if (cLRI >= LRI_Constraint) {
  800a5c:	d0e76117 	ldw	r3,-25212(gp)
  800a60:	d0a00617 	ldw	r2,-32744(gp)
  800a64:	18800516 	blt	r3,r2,800a7c <c_tick+0x25c>
            C_VP = 1;
  800a68:	00800044 	movi	r2,1
  800a6c:	d0a75a15 	stw	r2,-25240(gp)
            LRIState = dLRI;
  800a70:	00800044 	movi	r2,1
  800a74:	d0a76715 	stw	r2,-25188(gp)
  800a78:	00000e06 	br	800ab4 <c_tick+0x294>
        } else if ((VS || C_VP) && VRPState != dVRP){
  800a7c:	d0a76817 	ldw	r2,-25184(gp)
  800a80:	1000021e 	bne	r2,zero,800a8c <c_tick+0x26c>
  800a84:	d0a75a17 	ldw	r2,-25240(gp)
  800a88:	10000626 	beq	r2,zero,800aa4 <c_tick+0x284>
  800a8c:	d0a76417 	ldw	r2,-25200(gp)
  800a90:	10800060 	cmpeqi	r2,r2,1
  800a94:	1000031e 	bne	r2,zero,800aa4 <c_tick+0x284>
        	LRIState = dLRI;
  800a98:	00800044 	movi	r2,1
  800a9c:	d0a76715 	stw	r2,-25188(gp)
  800aa0:	00000406 	br	800ab4 <c_tick+0x294>
        } else if (cLRI >= LRI_VALUE){
  800aa4:	d0a76117 	ldw	r2,-25212(gp)
  800aa8:	1080ed90 	cmplti	r2,r2,950
  800aac:	1000011e 	bne	r2,zero,800ab4 <c_tick+0x294>
        	cLRI = 0;
  800ab0:	d0276115 	stw	zero,-25212(gp)
        }
        cLRI += 1;
  800ab4:	d0a76117 	ldw	r2,-25212(gp)
  800ab8:	10800044 	addi	r2,r2,1
  800abc:	d0a76115 	stw	r2,-25212(gp)
        break;
  800ac0:	00000106 	br	800ac8 <c_tick+0x2a8>
    case wLRI:
        if ((VS || C_VP) && VRPState != dVRP) {
            LRIState = dLRI;
            cLRI = 0;
        }
        break;
  800ac4:	0001883a 	nop
    }
    // ------------- End LRIState -------------


    // -------------- URIState ---------------
    switch (URIState) {
  800ac8:	d0a76617 	ldw	r2,-25192(gp)
  800acc:	10000326 	beq	r2,zero,800adc <c_tick+0x2bc>
  800ad0:	10800060 	cmpeqi	r2,r2,1
  800ad4:	10000c1e 	bne	r2,zero,800b08 <c_tick+0x2e8>
        break;
    }
    // ------------- End URIState -------------


}
  800ad8:	00001406 	br	800b2c <c_tick+0x30c>


    // -------------- URIState ---------------
    switch (URIState) {
    case wURI:
        if ((VS || C_VP) && VRPState != dVRP) {
  800adc:	d0a76817 	ldw	r2,-25184(gp)
  800ae0:	1000021e 	bne	r2,zero,800aec <c_tick+0x2cc>
  800ae4:	d0a75a17 	ldw	r2,-25240(gp)
  800ae8:	10000f26 	beq	r2,zero,800b28 <c_tick+0x308>
  800aec:	d0a76417 	ldw	r2,-25200(gp)
  800af0:	10800060 	cmpeqi	r2,r2,1
  800af4:	10000c1e 	bne	r2,zero,800b28 <c_tick+0x308>
            URIState = dURI;
  800af8:	00800044 	movi	r2,1
  800afc:	d0a76615 	stw	r2,-25192(gp)
            cURI = 0;
  800b00:	d0276015 	stw	zero,-25216(gp)
        }
        break;
  800b04:	00000806 	br	800b28 <c_tick+0x308>
    case dURI:
        if (cURI >= URI_Constraint) {
  800b08:	d0e76017 	ldw	r3,-25216(gp)
  800b0c:	d0a00717 	ldw	r2,-32740(gp)
  800b10:	18800116 	blt	r3,r2,800b18 <c_tick+0x2f8>
            URIState = wURI;
  800b14:	d0276615 	stw	zero,-25192(gp)
        }
        cURI += 1;
  800b18:	d0a76017 	ldw	r2,-25216(gp)
  800b1c:	10800044 	addi	r2,r2,1
  800b20:	d0a76015 	stw	r2,-25216(gp)
        break;
  800b24:	00000106 	br	800b2c <c_tick+0x30c>
    case wURI:
        if ((VS || C_VP) && VRPState != dVRP) {
            URIState = dURI;
            cURI = 0;
        }
        break;
  800b28:	0001883a 	nop
        break;
    }
    // ------------- End URIState -------------


}
  800b2c:	0001883a 	nop
  800b30:	e037883a 	mov	sp,fp
  800b34:	df000017 	ldw	fp,0(sp)
  800b38:	dec00104 	addi	sp,sp,4
  800b3c:	f800283a 	ret

00800b40 <logic>:

#include "timing.h"

#include "sccharts.h"

void logic(TickData* d) {
  800b40:	defffa04 	addi	sp,sp,-24
  800b44:	dfc00515 	stw	ra,20(sp)
  800b48:	df000415 	stw	fp,16(sp)
  800b4c:	dc800315 	stw	r18,12(sp)
  800b50:	dc400215 	stw	r17,8(sp)
  800b54:	dc000115 	stw	r16,4(sp)
  800b58:	df000404 	addi	fp,sp,16
  800b5c:	e13ffc15 	stw	r4,-16(fp)
  d->AP = 0;
  800b60:	e0bffc17 	ldw	r2,-16(fp)
  800b64:	10001705 	stb	zero,92(r2)
  d->VP = 0;
  800b68:	e0bffc17 	ldw	r2,-16(fp)
  800b6c:	10001745 	stb	zero,93(r2)
  d->AVI = 0;
  800b70:	e0bffc17 	ldw	r2,-16(fp)
  800b74:	10001785 	stb	zero,94(r2)
  d->PVARP = 0;
  800b78:	e0bffc17 	ldw	r2,-16(fp)
  800b7c:	100017c5 	stb	zero,95(r2)
  d->VRP = 0;
  800b80:	e0bffc17 	ldw	r2,-16(fp)
  800b84:	10001805 	stb	zero,96(r2)
  d->AEI = 0;
  800b88:	e0bffc17 	ldw	r2,-16(fp)
  800b8c:	10001845 	stb	zero,97(r2)
  d->LRI = 0;
  800b90:	e0bffc17 	ldw	r2,-16(fp)
  800b94:	10001885 	stb	zero,98(r2)
  d->URI = 0;
  800b98:	e0bffc17 	ldw	r2,-16(fp)
  800b9c:	100018c5 	stb	zero,99(r2)
  d->_g8 = d->_pg93;
  800ba0:	e0bffc17 	ldw	r2,-16(fp)
  800ba4:	10c04843 	ldbu	r3,289(r2)
  800ba8:	e0bffc17 	ldw	r2,-16(fp)
  800bac:	10c01bc5 	stb	r3,111(r2)
  d->_g9_e1 = !d->_g8;
  800bb0:	e0bffc17 	ldw	r2,-16(fp)
  800bb4:	10801bc3 	ldbu	r2,111(r2)
  800bb8:	10803fcc 	andi	r2,r2,255
  800bbc:	1080201c 	xori	r2,r2,128
  800bc0:	10bfe004 	addi	r2,r2,-128
  800bc4:	1005003a 	cmpeq	r2,r2,zero
  800bc8:	1007883a 	mov	r3,r2
  800bcc:	e0bffc17 	ldw	r2,-16(fp)
  800bd0:	10c04385 	stb	r3,270(r2)
  if (d->_g8) {
  800bd4:	e0bffc17 	ldw	r2,-16(fp)
  800bd8:	10801bc3 	ldbu	r2,111(r2)
  800bdc:	10803fcc 	andi	r2,r2,255
  800be0:	1080201c 	xori	r2,r2,128
  800be4:	10bfe004 	addi	r2,r2,-128
  800be8:	10000626 	beq	r2,zero,800c04 <logic+0xc4>
    d->AVI |= 1;
  800bec:	e0bffc17 	ldw	r2,-16(fp)
  800bf0:	10801783 	ldbu	r2,94(r2)
  800bf4:	10800054 	ori	r2,r2,1
  800bf8:	1007883a 	mov	r3,r2
  800bfc:	e0bffc17 	ldw	r2,-16(fp)
  800c00:	10c01785 	stb	r3,94(r2)
  }
  d->_g145 = d->_pg126;
  800c04:	e0bffc17 	ldw	r2,-16(fp)
  800c08:	10c04883 	ldbu	r3,290(r2)
  800c0c:	e0bffc17 	ldw	r2,-16(fp)
  800c10:	10c03285 	stb	r3,202(r2)
  if (d->_g145) {
  800c14:	e0bffc17 	ldw	r2,-16(fp)
  800c18:	10803283 	ldbu	r2,202(r2)
  800c1c:	10803fcc 	andi	r2,r2,255
  800c20:	1080201c 	xori	r2,r2,128
  800c24:	10bfe004 	addi	r2,r2,-128
  800c28:	10000626 	beq	r2,zero,800c44 <logic+0x104>
    d->URI |= 1;
  800c2c:	e0bffc17 	ldw	r2,-16(fp)
  800c30:	108018c3 	ldbu	r2,99(r2)
  800c34:	10800054 	ori	r2,r2,1
  800c38:	1007883a 	mov	r3,r2
  800c3c:	e0bffc17 	ldw	r2,-16(fp)
  800c40:	10c018c5 	stb	r3,99(r2)
  }
  d->_g167 = d->_pg143;
  800c44:	e0bffc17 	ldw	r2,-16(fp)
  800c48:	10c048c3 	ldbu	r3,291(r2)
  800c4c:	e0bffc17 	ldw	r2,-16(fp)
  800c50:	10c03545 	stb	r3,213(r2)
  if (d->_g167) {
  800c54:	e0bffc17 	ldw	r2,-16(fp)
  800c58:	10803543 	ldbu	r2,213(r2)
  800c5c:	10803fcc 	andi	r2,r2,255
  800c60:	1080201c 	xori	r2,r2,128
  800c64:	10bfe004 	addi	r2,r2,-128
  800c68:	10001226 	beq	r2,zero,800cb4 <logic+0x174>
    d->_region0_AVI_cAVI += d->deltaT;
  800c6c:	e13ffc17 	ldw	r4,-16(fp)
  800c70:	20800717 	ldw	r2,28(r4)
  800c74:	20c00817 	ldw	r3,32(r4)
  800c78:	e1bffc17 	ldw	r6,-16(fp)
  800c7c:	31001317 	ldw	r4,76(r6)
  800c80:	31401417 	ldw	r5,80(r6)
  800c84:	200d883a 	mov	r6,r4
  800c88:	280f883a 	mov	r7,r5
  800c8c:	1009883a 	mov	r4,r2
  800c90:	180b883a 	mov	r5,r3
  800c94:	0805c080 	call	805c08 <__adddf3>
  800c98:	1009883a 	mov	r4,r2
  800c9c:	180b883a 	mov	r5,r3
  800ca0:	2005883a 	mov	r2,r4
  800ca4:	2807883a 	mov	r3,r5
  800ca8:	e13ffc17 	ldw	r4,-16(fp)
  800cac:	20800715 	stw	r2,28(r4)
  800cb0:	20c00815 	stw	r3,32(r4)
  }
  d->_g23 = d->_pg8;
  800cb4:	e0bffc17 	ldw	r2,-16(fp)
  800cb8:	10c04903 	ldbu	r3,292(r2)
  800cbc:	e0bffc17 	ldw	r2,-16(fp)
  800cc0:	10c01e45 	stb	r3,121(r2)
  d->_cg23 = d->_region0_AVI_cAVI >= d->AVI_Constraint && !d->URI;
  800cc4:	e0bffc17 	ldw	r2,-16(fp)
  800cc8:	14000717 	ldw	r16,28(r2)
  800ccc:	14400817 	ldw	r17,32(r2)
  800cd0:	e0bffc17 	ldw	r2,-16(fp)
  800cd4:	10800117 	ldw	r2,4(r2)
  800cd8:	1009883a 	mov	r4,r2
  800cdc:	0806f800 	call	806f80 <__floatsidf>
  800ce0:	1009883a 	mov	r4,r2
  800ce4:	180b883a 	mov	r5,r3
  800ce8:	200d883a 	mov	r6,r4
  800cec:	280f883a 	mov	r7,r5
  800cf0:	8009883a 	mov	r4,r16
  800cf4:	880b883a 	mov	r5,r17
  800cf8:	08064b40 	call	8064b4 <__gedf2>
  800cfc:	10000816 	blt	r2,zero,800d20 <logic+0x1e0>
  800d00:	e0bffc17 	ldw	r2,-16(fp)
  800d04:	108018c3 	ldbu	r2,99(r2)
  800d08:	10803fcc 	andi	r2,r2,255
  800d0c:	1080201c 	xori	r2,r2,128
  800d10:	10bfe004 	addi	r2,r2,-128
  800d14:	1000021e 	bne	r2,zero,800d20 <logic+0x1e0>
  800d18:	00800044 	movi	r2,1
  800d1c:	00000106 	br	800d24 <logic+0x1e4>
  800d20:	0005883a 	mov	r2,zero
  800d24:	1007883a 	mov	r3,r2
  800d28:	e0bffc17 	ldw	r2,-16(fp)
  800d2c:	10c038c5 	stb	r3,227(r2)
  d->_g24 = d->_g23 && d->_cg23;
  800d30:	e0bffc17 	ldw	r2,-16(fp)
  800d34:	10801e43 	ldbu	r2,121(r2)
  800d38:	10803fcc 	andi	r2,r2,255
  800d3c:	1080201c 	xori	r2,r2,128
  800d40:	10bfe004 	addi	r2,r2,-128
  800d44:	10000826 	beq	r2,zero,800d68 <logic+0x228>
  800d48:	e0bffc17 	ldw	r2,-16(fp)
  800d4c:	108038c3 	ldbu	r2,227(r2)
  800d50:	10803fcc 	andi	r2,r2,255
  800d54:	1080201c 	xori	r2,r2,128
  800d58:	10bfe004 	addi	r2,r2,-128
  800d5c:	10000226 	beq	r2,zero,800d68 <logic+0x228>
  800d60:	00800044 	movi	r2,1
  800d64:	00000106 	br	800d6c <logic+0x22c>
  800d68:	0005883a 	mov	r2,zero
  800d6c:	1007883a 	mov	r3,r2
  800d70:	e0bffc17 	ldw	r2,-16(fp)
  800d74:	10c01e85 	stb	r3,122(r2)
  if (d->_g24) {
  800d78:	e0bffc17 	ldw	r2,-16(fp)
  800d7c:	10801e83 	ldbu	r2,122(r2)
  800d80:	10803fcc 	andi	r2,r2,255
  800d84:	1080201c 	xori	r2,r2,128
  800d88:	10bfe004 	addi	r2,r2,-128
  800d8c:	10000326 	beq	r2,zero,800d9c <logic+0x25c>
    d->_Pacemaker_local__Atrig = 1;
  800d90:	e0bffc17 	ldw	r2,-16(fp)
  800d94:	00c00044 	movi	r3,1
  800d98:	10c01905 	stb	r3,100(r2)
  }
  d->_g26 = d->_g23 && !d->_cg23;
  800d9c:	e0bffc17 	ldw	r2,-16(fp)
  800da0:	10801e43 	ldbu	r2,121(r2)
  800da4:	10803fcc 	andi	r2,r2,255
  800da8:	1080201c 	xori	r2,r2,128
  800dac:	10bfe004 	addi	r2,r2,-128
  800db0:	10000826 	beq	r2,zero,800dd4 <logic+0x294>
  800db4:	e0bffc17 	ldw	r2,-16(fp)
  800db8:	108038c3 	ldbu	r2,227(r2)
  800dbc:	10803fcc 	andi	r2,r2,255
  800dc0:	1080201c 	xori	r2,r2,128
  800dc4:	10bfe004 	addi	r2,r2,-128
  800dc8:	1000021e 	bne	r2,zero,800dd4 <logic+0x294>
  800dcc:	00800044 	movi	r2,1
  800dd0:	00000106 	br	800dd8 <logic+0x298>
  800dd4:	0005883a 	mov	r2,zero
  800dd8:	1007883a 	mov	r3,r2
  800ddc:	e0bffc17 	ldw	r2,-16(fp)
  800de0:	10c01f05 	stb	r3,124(r2)
  d->_g27 = d->_g26 && d->VS;
  800de4:	e0bffc17 	ldw	r2,-16(fp)
  800de8:	10801f03 	ldbu	r2,124(r2)
  800dec:	10803fcc 	andi	r2,r2,255
  800df0:	1080201c 	xori	r2,r2,128
  800df4:	10bfe004 	addi	r2,r2,-128
  800df8:	10000826 	beq	r2,zero,800e1c <logic+0x2dc>
  800dfc:	e0bffc17 	ldw	r2,-16(fp)
  800e00:	10800043 	ldbu	r2,1(r2)
  800e04:	10803fcc 	andi	r2,r2,255
  800e08:	1080201c 	xori	r2,r2,128
  800e0c:	10bfe004 	addi	r2,r2,-128
  800e10:	10000226 	beq	r2,zero,800e1c <logic+0x2dc>
  800e14:	00800044 	movi	r2,1
  800e18:	00000106 	br	800e20 <logic+0x2e0>
  800e1c:	0005883a 	mov	r2,zero
  800e20:	1007883a 	mov	r3,r2
  800e24:	e0bffc17 	ldw	r2,-16(fp)
  800e28:	10c01f45 	stb	r3,125(r2)
  if (d->_g27) {
  800e2c:	e0bffc17 	ldw	r2,-16(fp)
  800e30:	10801f43 	ldbu	r2,125(r2)
  800e34:	10803fcc 	andi	r2,r2,255
  800e38:	1080201c 	xori	r2,r2,128
  800e3c:	10bfe004 	addi	r2,r2,-128
  800e40:	10000326 	beq	r2,zero,800e50 <logic+0x310>
    d->_Pacemaker_local__Atrig1 = 1;
  800e44:	e0bffc17 	ldw	r2,-16(fp)
  800e48:	00c00044 	movi	r3,1
  800e4c:	10c01945 	stb	r3,101(r2)
  }
  d->_cg8 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  800e50:	e0bffc17 	ldw	r2,-16(fp)
  800e54:	10801903 	ldbu	r2,100(r2)
  800e58:	10803fcc 	andi	r2,r2,255
  800e5c:	1080201c 	xori	r2,r2,128
  800e60:	10bfe004 	addi	r2,r2,-128
  800e64:	1000061e 	bne	r2,zero,800e80 <logic+0x340>
  800e68:	e0bffc17 	ldw	r2,-16(fp)
  800e6c:	10801943 	ldbu	r2,101(r2)
  800e70:	10803fcc 	andi	r2,r2,255
  800e74:	1080201c 	xori	r2,r2,128
  800e78:	10bfe004 	addi	r2,r2,-128
  800e7c:	10000226 	beq	r2,zero,800e88 <logic+0x348>
  800e80:	00800044 	movi	r2,1
  800e84:	00000106 	br	800e8c <logic+0x34c>
  800e88:	0005883a 	mov	r2,zero
  800e8c:	1007883a 	mov	r3,r2
  800e90:	e0bffc17 	ldw	r2,-16(fp)
  800e94:	10c036c5 	stb	r3,219(r2)
  d->_g9 = d->_g8 && d->_cg8;
  800e98:	e0bffc17 	ldw	r2,-16(fp)
  800e9c:	10801bc3 	ldbu	r2,111(r2)
  800ea0:	10803fcc 	andi	r2,r2,255
  800ea4:	1080201c 	xori	r2,r2,128
  800ea8:	10bfe004 	addi	r2,r2,-128
  800eac:	10000826 	beq	r2,zero,800ed0 <logic+0x390>
  800eb0:	e0bffc17 	ldw	r2,-16(fp)
  800eb4:	108036c3 	ldbu	r2,219(r2)
  800eb8:	10803fcc 	andi	r2,r2,255
  800ebc:	1080201c 	xori	r2,r2,128
  800ec0:	10bfe004 	addi	r2,r2,-128
  800ec4:	10000226 	beq	r2,zero,800ed0 <logic+0x390>
  800ec8:	00800044 	movi	r2,1
  800ecc:	00000106 	br	800ed4 <logic+0x394>
  800ed0:	0005883a 	mov	r2,zero
  800ed4:	1007883a 	mov	r3,r2
  800ed8:	e0bffc17 	ldw	r2,-16(fp)
  800edc:	10c01c05 	stb	r3,112(r2)
  d->_g19 = d->_pg4;
  800ee0:	e0bffc17 	ldw	r2,-16(fp)
  800ee4:	10c04943 	ldbu	r3,293(r2)
  800ee8:	e0bffc17 	ldw	r2,-16(fp)
  800eec:	10c01dc5 	stb	r3,119(r2)
  d->_g13 = d->_pg28;
  800ef0:	e0bffc17 	ldw	r2,-16(fp)
  800ef4:	10c04983 	ldbu	r3,294(r2)
  800ef8:	e0bffc17 	ldw	r2,-16(fp)
  800efc:	10c01c85 	stb	r3,114(r2)
  d->_g16_e2 = !(d->_g19 || d->_g13);
  800f00:	e0bffc17 	ldw	r2,-16(fp)
  800f04:	10801dc3 	ldbu	r2,119(r2)
  800f08:	10803fcc 	andi	r2,r2,255
  800f0c:	1080201c 	xori	r2,r2,128
  800f10:	10bfe004 	addi	r2,r2,-128
  800f14:	1000081e 	bne	r2,zero,800f38 <logic+0x3f8>
  800f18:	e0bffc17 	ldw	r2,-16(fp)
  800f1c:	10801c83 	ldbu	r2,114(r2)
  800f20:	10803fcc 	andi	r2,r2,255
  800f24:	1080201c 	xori	r2,r2,128
  800f28:	10bfe004 	addi	r2,r2,-128
  800f2c:	1000021e 	bne	r2,zero,800f38 <logic+0x3f8>
  800f30:	00800044 	movi	r2,1
  800f34:	00000106 	br	800f3c <logic+0x3fc>
  800f38:	0005883a 	mov	r2,zero
  800f3c:	1007883a 	mov	r3,r2
  800f40:	e0bffc17 	ldw	r2,-16(fp)
  800f44:	10c043c5 	stb	r3,271(r2)
  d->sleepT = 1000.0;
  800f48:	e0fffc17 	ldw	r3,-16(fp)
  800f4c:	18001515 	stw	zero,84(r3)
  800f50:	009023f4 	movhi	r2,16527
  800f54:	10900004 	addi	r2,r2,16384
  800f58:	18801615 	stw	r2,88(r3)
  d->_g19 = d->_g13 || d->_g19;
  800f5c:	e0bffc17 	ldw	r2,-16(fp)
  800f60:	10801c83 	ldbu	r2,114(r2)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080201c 	xori	r2,r2,128
  800f6c:	10bfe004 	addi	r2,r2,-128
  800f70:	1000061e 	bne	r2,zero,800f8c <logic+0x44c>
  800f74:	e0bffc17 	ldw	r2,-16(fp)
  800f78:	10801dc3 	ldbu	r2,119(r2)
  800f7c:	10803fcc 	andi	r2,r2,255
  800f80:	1080201c 	xori	r2,r2,128
  800f84:	10bfe004 	addi	r2,r2,-128
  800f88:	10000226 	beq	r2,zero,800f94 <logic+0x454>
  800f8c:	00800044 	movi	r2,1
  800f90:	00000106 	br	800f98 <logic+0x458>
  800f94:	0005883a 	mov	r2,zero
  800f98:	1007883a 	mov	r3,r2
  800f9c:	e0bffc17 	ldw	r2,-16(fp)
  800fa0:	10c01dc5 	stb	r3,119(r2)
  d->_cg14 = d->_region0_AVI_cAVI < d->AVI_Constraint;
  800fa4:	e0bffc17 	ldw	r2,-16(fp)
  800fa8:	14000717 	ldw	r16,28(r2)
  800fac:	14400817 	ldw	r17,32(r2)
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	10800117 	ldw	r2,4(r2)
  800fb8:	1009883a 	mov	r4,r2
  800fbc:	0806f800 	call	806f80 <__floatsidf>
  800fc0:	1009883a 	mov	r4,r2
  800fc4:	180b883a 	mov	r5,r3
  800fc8:	04800044 	movi	r18,1
  800fcc:	200d883a 	mov	r6,r4
  800fd0:	280f883a 	mov	r7,r5
  800fd4:	8009883a 	mov	r4,r16
  800fd8:	880b883a 	mov	r5,r17
  800fdc:	08065900 	call	806590 <__ledf2>
  800fe0:	10000116 	blt	r2,zero,800fe8 <logic+0x4a8>
  800fe4:	0025883a 	mov	r18,zero
  800fe8:	9007883a 	mov	r3,r18
  800fec:	e0bffc17 	ldw	r2,-16(fp)
  800ff0:	10c037c5 	stb	r3,223(r2)
  d->_g13 = d->_g19 && d->_cg14;
  800ff4:	e0bffc17 	ldw	r2,-16(fp)
  800ff8:	10801dc3 	ldbu	r2,119(r2)
  800ffc:	10803fcc 	andi	r2,r2,255
  801000:	1080201c 	xori	r2,r2,128
  801004:	10bfe004 	addi	r2,r2,-128
  801008:	10000826 	beq	r2,zero,80102c <logic+0x4ec>
  80100c:	e0bffc17 	ldw	r2,-16(fp)
  801010:	108037c3 	ldbu	r2,223(r2)
  801014:	10803fcc 	andi	r2,r2,255
  801018:	1080201c 	xori	r2,r2,128
  80101c:	10bfe004 	addi	r2,r2,-128
  801020:	10000226 	beq	r2,zero,80102c <logic+0x4ec>
  801024:	00800044 	movi	r2,1
  801028:	00000106 	br	801030 <logic+0x4f0>
  80102c:	0005883a 	mov	r2,zero
  801030:	1007883a 	mov	r3,r2
  801034:	e0bffc17 	ldw	r2,-16(fp)
  801038:	10c01c85 	stb	r3,114(r2)
  if (d->_g13) {
  80103c:	e0bffc17 	ldw	r2,-16(fp)
  801040:	10801c83 	ldbu	r2,114(r2)
  801044:	10803fcc 	andi	r2,r2,255
  801048:	1080201c 	xori	r2,r2,128
  80104c:	10bfe004 	addi	r2,r2,-128
  801050:	10003426 	beq	r2,zero,801124 <logic+0x5e4>
    d->sleepT = (d->sleepT < (d->AVI_Constraint - d->_region0_AVI_cAVI)) ? d->sleepT : (d->AVI_Constraint - d->_region0_AVI_cAVI);
  801054:	e0bffc17 	ldw	r2,-16(fp)
  801058:	14001517 	ldw	r16,84(r2)
  80105c:	14401617 	ldw	r17,88(r2)
  801060:	e0bffc17 	ldw	r2,-16(fp)
  801064:	10800117 	ldw	r2,4(r2)
  801068:	1009883a 	mov	r4,r2
  80106c:	0806f800 	call	806f80 <__floatsidf>
  801070:	1011883a 	mov	r8,r2
  801074:	1813883a 	mov	r9,r3
  801078:	e13ffc17 	ldw	r4,-16(fp)
  80107c:	20800717 	ldw	r2,28(r4)
  801080:	20c00817 	ldw	r3,32(r4)
  801084:	100d883a 	mov	r6,r2
  801088:	180f883a 	mov	r7,r3
  80108c:	4009883a 	mov	r4,r8
  801090:	480b883a 	mov	r5,r9
  801094:	08066840 	call	806684 <__subdf3>
  801098:	1009883a 	mov	r4,r2
  80109c:	180b883a 	mov	r5,r3
  8010a0:	2005883a 	mov	r2,r4
  8010a4:	2807883a 	mov	r3,r5
  8010a8:	100d883a 	mov	r6,r2
  8010ac:	180f883a 	mov	r7,r3
  8010b0:	8009883a 	mov	r4,r16
  8010b4:	880b883a 	mov	r5,r17
  8010b8:	08065900 	call	806590 <__ledf2>
  8010bc:	1000040e 	bge	r2,zero,8010d0 <logic+0x590>
  8010c0:	e13ffc17 	ldw	r4,-16(fp)
  8010c4:	20801517 	ldw	r2,84(r4)
  8010c8:	20c01617 	ldw	r3,88(r4)
  8010cc:	00001206 	br	801118 <logic+0x5d8>
  8010d0:	e0bffc17 	ldw	r2,-16(fp)
  8010d4:	10800117 	ldw	r2,4(r2)
  8010d8:	1009883a 	mov	r4,r2
  8010dc:	0806f800 	call	806f80 <__floatsidf>
  8010e0:	1011883a 	mov	r8,r2
  8010e4:	1813883a 	mov	r9,r3
  8010e8:	e13ffc17 	ldw	r4,-16(fp)
  8010ec:	20800717 	ldw	r2,28(r4)
  8010f0:	20c00817 	ldw	r3,32(r4)
  8010f4:	100d883a 	mov	r6,r2
  8010f8:	180f883a 	mov	r7,r3
  8010fc:	4009883a 	mov	r4,r8
  801100:	480b883a 	mov	r5,r9
  801104:	08066840 	call	806684 <__subdf3>
  801108:	1009883a 	mov	r4,r2
  80110c:	180b883a 	mov	r5,r3
  801110:	2005883a 	mov	r2,r4
  801114:	2807883a 	mov	r3,r5
  801118:	e13ffc17 	ldw	r4,-16(fp)
  80111c:	20801515 	stw	r2,84(r4)
  801120:	20c01615 	stw	r3,88(r4)
  }
  d->_cg15 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801124:	e0bffc17 	ldw	r2,-16(fp)
  801128:	10801903 	ldbu	r2,100(r2)
  80112c:	10803fcc 	andi	r2,r2,255
  801130:	1080201c 	xori	r2,r2,128
  801134:	10bfe004 	addi	r2,r2,-128
  801138:	1000061e 	bne	r2,zero,801154 <logic+0x614>
  80113c:	e0bffc17 	ldw	r2,-16(fp)
  801140:	10801943 	ldbu	r2,101(r2)
  801144:	10803fcc 	andi	r2,r2,255
  801148:	1080201c 	xori	r2,r2,128
  80114c:	10bfe004 	addi	r2,r2,-128
  801150:	10000226 	beq	r2,zero,80115c <logic+0x61c>
  801154:	00800044 	movi	r2,1
  801158:	00000106 	br	801160 <logic+0x620>
  80115c:	0005883a 	mov	r2,zero
  801160:	1007883a 	mov	r3,r2
  801164:	e0bffc17 	ldw	r2,-16(fp)
  801168:	10c03785 	stb	r3,222(r2)
  d->_g14 = d->_g19 && !d->_cg14;
  80116c:	e0bffc17 	ldw	r2,-16(fp)
  801170:	10801dc3 	ldbu	r2,119(r2)
  801174:	10803fcc 	andi	r2,r2,255
  801178:	1080201c 	xori	r2,r2,128
  80117c:	10bfe004 	addi	r2,r2,-128
  801180:	10000826 	beq	r2,zero,8011a4 <logic+0x664>
  801184:	e0bffc17 	ldw	r2,-16(fp)
  801188:	108037c3 	ldbu	r2,223(r2)
  80118c:	10803fcc 	andi	r2,r2,255
  801190:	1080201c 	xori	r2,r2,128
  801194:	10bfe004 	addi	r2,r2,-128
  801198:	1000021e 	bne	r2,zero,8011a4 <logic+0x664>
  80119c:	00800044 	movi	r2,1
  8011a0:	00000106 	br	8011a8 <logic+0x668>
  8011a4:	0005883a 	mov	r2,zero
  8011a8:	1007883a 	mov	r3,r2
  8011ac:	e0bffc17 	ldw	r2,-16(fp)
  8011b0:	10c01cc5 	stb	r3,115(r2)
  d->_cg17 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8011b4:	e0bffc17 	ldw	r2,-16(fp)
  8011b8:	10801903 	ldbu	r2,100(r2)
  8011bc:	10803fcc 	andi	r2,r2,255
  8011c0:	1080201c 	xori	r2,r2,128
  8011c4:	10bfe004 	addi	r2,r2,-128
  8011c8:	1000061e 	bne	r2,zero,8011e4 <logic+0x6a4>
  8011cc:	e0bffc17 	ldw	r2,-16(fp)
  8011d0:	10801943 	ldbu	r2,101(r2)
  8011d4:	10803fcc 	andi	r2,r2,255
  8011d8:	1080201c 	xori	r2,r2,128
  8011dc:	10bfe004 	addi	r2,r2,-128
  8011e0:	10000226 	beq	r2,zero,8011ec <logic+0x6ac>
  8011e4:	00800044 	movi	r2,1
  8011e8:	00000106 	br	8011f0 <logic+0x6b0>
  8011ec:	0005883a 	mov	r2,zero
  8011f0:	1007883a 	mov	r3,r2
  8011f4:	e0bffc17 	ldw	r2,-16(fp)
  8011f8:	10c03805 	stb	r3,224(r2)
  d->_g16 = d->_g13 && d->_cg15 || d->_g14 && d->_cg17;
  8011fc:	e0bffc17 	ldw	r2,-16(fp)
  801200:	10801c83 	ldbu	r2,114(r2)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1080201c 	xori	r2,r2,128
  80120c:	10bfe004 	addi	r2,r2,-128
  801210:	10000626 	beq	r2,zero,80122c <logic+0x6ec>
  801214:	e0bffc17 	ldw	r2,-16(fp)
  801218:	10803783 	ldbu	r2,222(r2)
  80121c:	10803fcc 	andi	r2,r2,255
  801220:	1080201c 	xori	r2,r2,128
  801224:	10bfe004 	addi	r2,r2,-128
  801228:	10000c1e 	bne	r2,zero,80125c <logic+0x71c>
  80122c:	e0bffc17 	ldw	r2,-16(fp)
  801230:	10801cc3 	ldbu	r2,115(r2)
  801234:	10803fcc 	andi	r2,r2,255
  801238:	1080201c 	xori	r2,r2,128
  80123c:	10bfe004 	addi	r2,r2,-128
  801240:	10000826 	beq	r2,zero,801264 <logic+0x724>
  801244:	e0bffc17 	ldw	r2,-16(fp)
  801248:	10803803 	ldbu	r2,224(r2)
  80124c:	10803fcc 	andi	r2,r2,255
  801250:	1080201c 	xori	r2,r2,128
  801254:	10bfe004 	addi	r2,r2,-128
  801258:	10000226 	beq	r2,zero,801264 <logic+0x724>
  80125c:	00800044 	movi	r2,1
  801260:	00000106 	br	801268 <logic+0x728>
  801264:	0005883a 	mov	r2,zero
  801268:	1007883a 	mov	r3,r2
  80126c:	e0bffc17 	ldw	r2,-16(fp)
  801270:	10c01d45 	stb	r3,117(r2)
  d->_g23 = !d->_g23;
  801274:	e0bffc17 	ldw	r2,-16(fp)
  801278:	10801e43 	ldbu	r2,121(r2)
  80127c:	10803fcc 	andi	r2,r2,255
  801280:	1080201c 	xori	r2,r2,128
  801284:	10bfe004 	addi	r2,r2,-128
  801288:	1005003a 	cmpeq	r2,r2,zero
  80128c:	1007883a 	mov	r3,r2
  801290:	e0bffc17 	ldw	r2,-16(fp)
  801294:	10c01e45 	stb	r3,121(r2)
  d->_g27 = d->_g24 || d->_g27;
  801298:	e0bffc17 	ldw	r2,-16(fp)
  80129c:	10801e83 	ldbu	r2,122(r2)
  8012a0:	10803fcc 	andi	r2,r2,255
  8012a4:	1080201c 	xori	r2,r2,128
  8012a8:	10bfe004 	addi	r2,r2,-128
  8012ac:	1000061e 	bne	r2,zero,8012c8 <logic+0x788>
  8012b0:	e0bffc17 	ldw	r2,-16(fp)
  8012b4:	10801f43 	ldbu	r2,125(r2)
  8012b8:	10803fcc 	andi	r2,r2,255
  8012bc:	1080201c 	xori	r2,r2,128
  8012c0:	10bfe004 	addi	r2,r2,-128
  8012c4:	10000226 	beq	r2,zero,8012d0 <logic+0x790>
  8012c8:	00800044 	movi	r2,1
  8012cc:	00000106 	br	8012d4 <logic+0x794>
  8012d0:	0005883a 	mov	r2,zero
  8012d4:	1007883a 	mov	r3,r2
  8012d8:	e0bffc17 	ldw	r2,-16(fp)
  8012dc:	10c01f45 	stb	r3,125(r2)
  d->_g24 = (d->_g9_e1 || d->_g9) && (d->_g16_e2 || d->_g16) && (d->_g23 || d->_g27) && (d->_g9 || d->_g16 || d->_g27);
  8012e0:	e0bffc17 	ldw	r2,-16(fp)
  8012e4:	10804383 	ldbu	r2,270(r2)
  8012e8:	10803fcc 	andi	r2,r2,255
  8012ec:	1080201c 	xori	r2,r2,128
  8012f0:	10bfe004 	addi	r2,r2,-128
  8012f4:	1000061e 	bne	r2,zero,801310 <logic+0x7d0>
  8012f8:	e0bffc17 	ldw	r2,-16(fp)
  8012fc:	10801c03 	ldbu	r2,112(r2)
  801300:	10803fcc 	andi	r2,r2,255
  801304:	1080201c 	xori	r2,r2,128
  801308:	10bfe004 	addi	r2,r2,-128
  80130c:	10002c26 	beq	r2,zero,8013c0 <logic+0x880>
  801310:	e0bffc17 	ldw	r2,-16(fp)
  801314:	108043c3 	ldbu	r2,271(r2)
  801318:	10803fcc 	andi	r2,r2,255
  80131c:	1080201c 	xori	r2,r2,128
  801320:	10bfe004 	addi	r2,r2,-128
  801324:	1000061e 	bne	r2,zero,801340 <logic+0x800>
  801328:	e0bffc17 	ldw	r2,-16(fp)
  80132c:	10801d43 	ldbu	r2,117(r2)
  801330:	10803fcc 	andi	r2,r2,255
  801334:	1080201c 	xori	r2,r2,128
  801338:	10bfe004 	addi	r2,r2,-128
  80133c:	10002026 	beq	r2,zero,8013c0 <logic+0x880>
  801340:	e0bffc17 	ldw	r2,-16(fp)
  801344:	10801e43 	ldbu	r2,121(r2)
  801348:	10803fcc 	andi	r2,r2,255
  80134c:	1080201c 	xori	r2,r2,128
  801350:	10bfe004 	addi	r2,r2,-128
  801354:	1000061e 	bne	r2,zero,801370 <logic+0x830>
  801358:	e0bffc17 	ldw	r2,-16(fp)
  80135c:	10801f43 	ldbu	r2,125(r2)
  801360:	10803fcc 	andi	r2,r2,255
  801364:	1080201c 	xori	r2,r2,128
  801368:	10bfe004 	addi	r2,r2,-128
  80136c:	10001426 	beq	r2,zero,8013c0 <logic+0x880>
  801370:	e0bffc17 	ldw	r2,-16(fp)
  801374:	10801c03 	ldbu	r2,112(r2)
  801378:	10803fcc 	andi	r2,r2,255
  80137c:	1080201c 	xori	r2,r2,128
  801380:	10bfe004 	addi	r2,r2,-128
  801384:	10000c1e 	bne	r2,zero,8013b8 <logic+0x878>
  801388:	e0bffc17 	ldw	r2,-16(fp)
  80138c:	10801d43 	ldbu	r2,117(r2)
  801390:	10803fcc 	andi	r2,r2,255
  801394:	1080201c 	xori	r2,r2,128
  801398:	10bfe004 	addi	r2,r2,-128
  80139c:	1000061e 	bne	r2,zero,8013b8 <logic+0x878>
  8013a0:	e0bffc17 	ldw	r2,-16(fp)
  8013a4:	10801f43 	ldbu	r2,125(r2)
  8013a8:	10803fcc 	andi	r2,r2,255
  8013ac:	1080201c 	xori	r2,r2,128
  8013b0:	10bfe004 	addi	r2,r2,-128
  8013b4:	10000226 	beq	r2,zero,8013c0 <logic+0x880>
  8013b8:	00800044 	movi	r2,1
  8013bc:	00000106 	br	8013c4 <logic+0x884>
  8013c0:	0005883a 	mov	r2,zero
  8013c4:	1007883a 	mov	r3,r2
  8013c8:	e0bffc17 	ldw	r2,-16(fp)
  8013cc:	10c01e85 	stb	r3,122(r2)
  d->_cg28 = d->_Pacemaker_local__Atrig;
  8013d0:	e0bffc17 	ldw	r2,-16(fp)
  8013d4:	10c01903 	ldbu	r3,100(r2)
  8013d8:	e0bffc17 	ldw	r2,-16(fp)
  8013dc:	10c03605 	stb	r3,216(r2)
  d->_g16_e2 = d->_g24 && d->_cg28;
  8013e0:	e0bffc17 	ldw	r2,-16(fp)
  8013e4:	10801e83 	ldbu	r2,122(r2)
  8013e8:	10803fcc 	andi	r2,r2,255
  8013ec:	1080201c 	xori	r2,r2,128
  8013f0:	10bfe004 	addi	r2,r2,-128
  8013f4:	10000826 	beq	r2,zero,801418 <logic+0x8d8>
  8013f8:	e0bffc17 	ldw	r2,-16(fp)
  8013fc:	10803603 	ldbu	r2,216(r2)
  801400:	10803fcc 	andi	r2,r2,255
  801404:	1080201c 	xori	r2,r2,128
  801408:	10bfe004 	addi	r2,r2,-128
  80140c:	10000226 	beq	r2,zero,801418 <logic+0x8d8>
  801410:	00800044 	movi	r2,1
  801414:	00000106 	br	80141c <logic+0x8dc>
  801418:	0005883a 	mov	r2,zero
  80141c:	1007883a 	mov	r3,r2
  801420:	e0bffc17 	ldw	r2,-16(fp)
  801424:	10c043c5 	stb	r3,271(r2)
  if (d->_g16_e2) {
  801428:	e0bffc17 	ldw	r2,-16(fp)
  80142c:	108043c3 	ldbu	r2,271(r2)
  801430:	10803fcc 	andi	r2,r2,255
  801434:	1080201c 	xori	r2,r2,128
  801438:	10bfe004 	addi	r2,r2,-128
  80143c:	10000626 	beq	r2,zero,801458 <logic+0x918>
    d->VP |= 1;
  801440:	e0bffc17 	ldw	r2,-16(fp)
  801444:	10801743 	ldbu	r2,93(r2)
  801448:	10800054 	ori	r2,r2,1
  80144c:	1007883a 	mov	r3,r2
  801450:	e0bffc17 	ldw	r2,-16(fp)
  801454:	10c01745 	stb	r3,93(r2)
  }
  d->_g9 = d->_pg131;
  801458:	e0bffc17 	ldw	r2,-16(fp)
  80145c:	10c049c3 	ldbu	r3,295(r2)
  801460:	e0bffc17 	ldw	r2,-16(fp)
  801464:	10c01c05 	stb	r3,112(r2)
  if (d->_g9) {
  801468:	e0bffc17 	ldw	r2,-16(fp)
  80146c:	10801c03 	ldbu	r2,112(r2)
  801470:	10803fcc 	andi	r2,r2,255
  801474:	1080201c 	xori	r2,r2,128
  801478:	10bfe004 	addi	r2,r2,-128
  80147c:	10000626 	beq	r2,zero,801498 <logic+0x958>
    d->PVARP |= 1;
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	108017c3 	ldbu	r2,95(r2)
  801488:	10800054 	ori	r2,r2,1
  80148c:	1007883a 	mov	r3,r2
  801490:	e0bffc17 	ldw	r2,-16(fp)
  801494:	10c017c5 	stb	r3,95(r2)
  }
  d->_g16 = d->_pg67;
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	10c04a03 	ldbu	r3,296(r2)
  8014a0:	e0bffc17 	ldw	r2,-16(fp)
  8014a4:	10c01d45 	stb	r3,117(r2)
  d->_g9_e1 = !d->_g16;
  8014a8:	e0bffc17 	ldw	r2,-16(fp)
  8014ac:	10801d43 	ldbu	r2,117(r2)
  8014b0:	10803fcc 	andi	r2,r2,255
  8014b4:	1080201c 	xori	r2,r2,128
  8014b8:	10bfe004 	addi	r2,r2,-128
  8014bc:	1005003a 	cmpeq	r2,r2,zero
  8014c0:	1007883a 	mov	r3,r2
  8014c4:	e0bffc17 	ldw	r2,-16(fp)
  8014c8:	10c04385 	stb	r3,270(r2)
  if (d->_g16) {
  8014cc:	e0bffc17 	ldw	r2,-16(fp)
  8014d0:	10801d43 	ldbu	r2,117(r2)
  8014d4:	10803fcc 	andi	r2,r2,255
  8014d8:	1080201c 	xori	r2,r2,128
  8014dc:	10bfe004 	addi	r2,r2,-128
  8014e0:	10000626 	beq	r2,zero,8014fc <logic+0x9bc>
    d->AEI |= 1;
  8014e4:	e0bffc17 	ldw	r2,-16(fp)
  8014e8:	10801843 	ldbu	r2,97(r2)
  8014ec:	10800054 	ori	r2,r2,1
  8014f0:	1007883a 	mov	r3,r2
  8014f4:	e0bffc17 	ldw	r2,-16(fp)
  8014f8:	10c01845 	stb	r3,97(r2)
  }
  d->_g25 = d->_pg158;
  8014fc:	e0bffc17 	ldw	r2,-16(fp)
  801500:	10c04a43 	ldbu	r3,297(r2)
  801504:	e0bffc17 	ldw	r2,-16(fp)
  801508:	10c01ec5 	stb	r3,123(r2)
  if (d->_g25) {
  80150c:	e0bffc17 	ldw	r2,-16(fp)
  801510:	10801ec3 	ldbu	r2,123(r2)
  801514:	10803fcc 	andi	r2,r2,255
  801518:	1080201c 	xori	r2,r2,128
  80151c:	10bfe004 	addi	r2,r2,-128
  801520:	10001226 	beq	r2,zero,80156c <logic+0xa2c>
    d->_region3_AEI_cAEI += d->deltaT;
  801524:	e13ffc17 	ldw	r4,-16(fp)
  801528:	20800d17 	ldw	r2,52(r4)
  80152c:	20c00e17 	ldw	r3,56(r4)
  801530:	e1bffc17 	ldw	r6,-16(fp)
  801534:	31001317 	ldw	r4,76(r6)
  801538:	31401417 	ldw	r5,80(r6)
  80153c:	200d883a 	mov	r6,r4
  801540:	280f883a 	mov	r7,r5
  801544:	1009883a 	mov	r4,r2
  801548:	180b883a 	mov	r5,r3
  80154c:	0805c080 	call	805c08 <__adddf3>
  801550:	1009883a 	mov	r4,r2
  801554:	180b883a 	mov	r5,r3
  801558:	2005883a 	mov	r2,r4
  80155c:	2807883a 	mov	r3,r5
  801560:	e13ffc17 	ldw	r4,-16(fp)
  801564:	20800d15 	stw	r2,52(r4)
  801568:	20c00e15 	stw	r3,56(r4)
  }
  d->_g25_e3 = d->_pg106;
  80156c:	e0bffc17 	ldw	r2,-16(fp)
  801570:	10c04a83 	ldbu	r3,298(r2)
  801574:	e0bffc17 	ldw	r2,-16(fp)
  801578:	10c04405 	stb	r3,272(r2)
  d->_cg100 = d->_region3_AEI_cAEI >= d->AEI_Constraint;
  80157c:	e0bffc17 	ldw	r2,-16(fp)
  801580:	14000d17 	ldw	r16,52(r2)
  801584:	14400e17 	ldw	r17,56(r2)
  801588:	e0bffc17 	ldw	r2,-16(fp)
  80158c:	10800417 	ldw	r2,16(r2)
  801590:	1009883a 	mov	r4,r2
  801594:	0806f800 	call	806f80 <__floatsidf>
  801598:	1009883a 	mov	r4,r2
  80159c:	180b883a 	mov	r5,r3
  8015a0:	04800044 	movi	r18,1
  8015a4:	200d883a 	mov	r6,r4
  8015a8:	280f883a 	mov	r7,r5
  8015ac:	8009883a 	mov	r4,r16
  8015b0:	880b883a 	mov	r5,r17
  8015b4:	08064b40 	call	8064b4 <__gedf2>
  8015b8:	1000010e 	bge	r2,zero,8015c0 <logic+0xa80>
  8015bc:	0025883a 	mov	r18,zero
  8015c0:	9007883a 	mov	r3,r18
  8015c4:	e0bffc17 	ldw	r2,-16(fp)
  8015c8:	10c03ec5 	stb	r3,251(r2)
  d->_g101 = d->_g25_e3 && d->_cg100;
  8015cc:	e0bffc17 	ldw	r2,-16(fp)
  8015d0:	10804403 	ldbu	r2,272(r2)
  8015d4:	10803fcc 	andi	r2,r2,255
  8015d8:	1080201c 	xori	r2,r2,128
  8015dc:	10bfe004 	addi	r2,r2,-128
  8015e0:	10000826 	beq	r2,zero,801604 <logic+0xac4>
  8015e4:	e0bffc17 	ldw	r2,-16(fp)
  8015e8:	10803ec3 	ldbu	r2,251(r2)
  8015ec:	10803fcc 	andi	r2,r2,255
  8015f0:	1080201c 	xori	r2,r2,128
  8015f4:	10bfe004 	addi	r2,r2,-128
  8015f8:	10000226 	beq	r2,zero,801604 <logic+0xac4>
  8015fc:	00800044 	movi	r2,1
  801600:	00000106 	br	801608 <logic+0xac8>
  801604:	0005883a 	mov	r2,zero
  801608:	1007883a 	mov	r3,r2
  80160c:	e0bffc17 	ldw	r2,-16(fp)
  801610:	10c02b45 	stb	r3,173(r2)
  if (d->_g101) {
  801614:	e0bffc17 	ldw	r2,-16(fp)
  801618:	10802b43 	ldbu	r2,173(r2)
  80161c:	10803fcc 	andi	r2,r2,255
  801620:	1080201c 	xori	r2,r2,128
  801624:	10bfe004 	addi	r2,r2,-128
  801628:	10000326 	beq	r2,zero,801638 <logic+0xaf8>
    d->_Pacemaker_local__Atrig4 = 1;
  80162c:	e0bffc17 	ldw	r2,-16(fp)
  801630:	00c00044 	movi	r3,1
  801634:	10c01a05 	stb	r3,104(r2)
  }
  d->_g103 = d->_g25_e3 && !d->_cg100;
  801638:	e0bffc17 	ldw	r2,-16(fp)
  80163c:	10804403 	ldbu	r2,272(r2)
  801640:	10803fcc 	andi	r2,r2,255
  801644:	1080201c 	xori	r2,r2,128
  801648:	10bfe004 	addi	r2,r2,-128
  80164c:	10000826 	beq	r2,zero,801670 <logic+0xb30>
  801650:	e0bffc17 	ldw	r2,-16(fp)
  801654:	10803ec3 	ldbu	r2,251(r2)
  801658:	10803fcc 	andi	r2,r2,255
  80165c:	1080201c 	xori	r2,r2,128
  801660:	10bfe004 	addi	r2,r2,-128
  801664:	1000021e 	bne	r2,zero,801670 <logic+0xb30>
  801668:	00800044 	movi	r2,1
  80166c:	00000106 	br	801674 <logic+0xb34>
  801670:	0005883a 	mov	r2,zero
  801674:	1007883a 	mov	r3,r2
  801678:	e0bffc17 	ldw	r2,-16(fp)
  80167c:	10c02bc5 	stb	r3,175(r2)
  d->_cg103 = d->AS && !d->PVARP;
  801680:	e0bffc17 	ldw	r2,-16(fp)
  801684:	10800003 	ldbu	r2,0(r2)
  801688:	10803fcc 	andi	r2,r2,255
  80168c:	1080201c 	xori	r2,r2,128
  801690:	10bfe004 	addi	r2,r2,-128
  801694:	10000826 	beq	r2,zero,8016b8 <logic+0xb78>
  801698:	e0bffc17 	ldw	r2,-16(fp)
  80169c:	108017c3 	ldbu	r2,95(r2)
  8016a0:	10803fcc 	andi	r2,r2,255
  8016a4:	1080201c 	xori	r2,r2,128
  8016a8:	10bfe004 	addi	r2,r2,-128
  8016ac:	1000021e 	bne	r2,zero,8016b8 <logic+0xb78>
  8016b0:	00800044 	movi	r2,1
  8016b4:	00000106 	br	8016bc <logic+0xb7c>
  8016b8:	0005883a 	mov	r2,zero
  8016bc:	1007883a 	mov	r3,r2
  8016c0:	e0bffc17 	ldw	r2,-16(fp)
  8016c4:	10c03e85 	stb	r3,250(r2)
  d->_g104 = d->_g103 && d->_cg103;
  8016c8:	e0bffc17 	ldw	r2,-16(fp)
  8016cc:	10802bc3 	ldbu	r2,175(r2)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	10000826 	beq	r2,zero,801700 <logic+0xbc0>
  8016e0:	e0bffc17 	ldw	r2,-16(fp)
  8016e4:	10803e83 	ldbu	r2,250(r2)
  8016e8:	10803fcc 	andi	r2,r2,255
  8016ec:	1080201c 	xori	r2,r2,128
  8016f0:	10bfe004 	addi	r2,r2,-128
  8016f4:	10000226 	beq	r2,zero,801700 <logic+0xbc0>
  8016f8:	00800044 	movi	r2,1
  8016fc:	00000106 	br	801704 <logic+0xbc4>
  801700:	0005883a 	mov	r2,zero
  801704:	1007883a 	mov	r3,r2
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	10c02c05 	stb	r3,176(r2)
  if (d->_g104) {
  801710:	e0bffc17 	ldw	r2,-16(fp)
  801714:	10802c03 	ldbu	r2,176(r2)
  801718:	10803fcc 	andi	r2,r2,255
  80171c:	1080201c 	xori	r2,r2,128
  801720:	10bfe004 	addi	r2,r2,-128
  801724:	10000326 	beq	r2,zero,801734 <logic+0xbf4>
    d->_Pacemaker_local__Atrig5 = 1;
  801728:	e0bffc17 	ldw	r2,-16(fp)
  80172c:	00c00044 	movi	r3,1
  801730:	10c01a45 	stb	r3,105(r2)
  }
  d->_cg85 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  801734:	e0bffc17 	ldw	r2,-16(fp)
  801738:	10801a03 	ldbu	r2,104(r2)
  80173c:	10803fcc 	andi	r2,r2,255
  801740:	1080201c 	xori	r2,r2,128
  801744:	10bfe004 	addi	r2,r2,-128
  801748:	1000061e 	bne	r2,zero,801764 <logic+0xc24>
  80174c:	e0bffc17 	ldw	r2,-16(fp)
  801750:	10801a43 	ldbu	r2,105(r2)
  801754:	10803fcc 	andi	r2,r2,255
  801758:	1080201c 	xori	r2,r2,128
  80175c:	10bfe004 	addi	r2,r2,-128
  801760:	10000226 	beq	r2,zero,80176c <logic+0xc2c>
  801764:	00800044 	movi	r2,1
  801768:	00000106 	br	801770 <logic+0xc30>
  80176c:	0005883a 	mov	r2,zero
  801770:	1007883a 	mov	r3,r2
  801774:	e0bffc17 	ldw	r2,-16(fp)
  801778:	10c03cc5 	stb	r3,243(r2)
  d->_g86 = d->_g16 && d->_cg85;
  80177c:	e0bffc17 	ldw	r2,-16(fp)
  801780:	10801d43 	ldbu	r2,117(r2)
  801784:	10803fcc 	andi	r2,r2,255
  801788:	1080201c 	xori	r2,r2,128
  80178c:	10bfe004 	addi	r2,r2,-128
  801790:	10000826 	beq	r2,zero,8017b4 <logic+0xc74>
  801794:	e0bffc17 	ldw	r2,-16(fp)
  801798:	10803cc3 	ldbu	r2,243(r2)
  80179c:	10803fcc 	andi	r2,r2,255
  8017a0:	1080201c 	xori	r2,r2,128
  8017a4:	10bfe004 	addi	r2,r2,-128
  8017a8:	10000226 	beq	r2,zero,8017b4 <logic+0xc74>
  8017ac:	00800044 	movi	r2,1
  8017b0:	00000106 	br	8017b8 <logic+0xc78>
  8017b4:	0005883a 	mov	r2,zero
  8017b8:	1007883a 	mov	r3,r2
  8017bc:	e0bffc17 	ldw	r2,-16(fp)
  8017c0:	10c028c5 	stb	r3,163(r2)
  d->_g96 = d->_pg105;
  8017c4:	e0bffc17 	ldw	r2,-16(fp)
  8017c8:	10c04ac3 	ldbu	r3,299(r2)
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10c02a85 	stb	r3,170(r2)
  d->_g90 = d->_pg77;
  8017d4:	e0bffc17 	ldw	r2,-16(fp)
  8017d8:	10c04b03 	ldbu	r3,300(r2)
  8017dc:	e0bffc17 	ldw	r2,-16(fp)
  8017e0:	10c02945 	stb	r3,165(r2)
  d->_g93_e2 = !(d->_g96 || d->_g90);
  8017e4:	e0bffc17 	ldw	r2,-16(fp)
  8017e8:	10802a83 	ldbu	r2,170(r2)
  8017ec:	10803fcc 	andi	r2,r2,255
  8017f0:	1080201c 	xori	r2,r2,128
  8017f4:	10bfe004 	addi	r2,r2,-128
  8017f8:	1000081e 	bne	r2,zero,80181c <logic+0xcdc>
  8017fc:	e0bffc17 	ldw	r2,-16(fp)
  801800:	10802943 	ldbu	r2,165(r2)
  801804:	10803fcc 	andi	r2,r2,255
  801808:	1080201c 	xori	r2,r2,128
  80180c:	10bfe004 	addi	r2,r2,-128
  801810:	1000021e 	bne	r2,zero,80181c <logic+0xcdc>
  801814:	00800044 	movi	r2,1
  801818:	00000106 	br	801820 <logic+0xce0>
  80181c:	0005883a 	mov	r2,zero
  801820:	1007883a 	mov	r3,r2
  801824:	e0bffc17 	ldw	r2,-16(fp)
  801828:	10c04605 	stb	r3,280(r2)
  d->_g96 = d->_g90 || d->_g96;
  80182c:	e0bffc17 	ldw	r2,-16(fp)
  801830:	10802943 	ldbu	r2,165(r2)
  801834:	10803fcc 	andi	r2,r2,255
  801838:	1080201c 	xori	r2,r2,128
  80183c:	10bfe004 	addi	r2,r2,-128
  801840:	1000061e 	bne	r2,zero,80185c <logic+0xd1c>
  801844:	e0bffc17 	ldw	r2,-16(fp)
  801848:	10802a83 	ldbu	r2,170(r2)
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1080201c 	xori	r2,r2,128
  801854:	10bfe004 	addi	r2,r2,-128
  801858:	10000226 	beq	r2,zero,801864 <logic+0xd24>
  80185c:	00800044 	movi	r2,1
  801860:	00000106 	br	801868 <logic+0xd28>
  801864:	0005883a 	mov	r2,zero
  801868:	1007883a 	mov	r3,r2
  80186c:	e0bffc17 	ldw	r2,-16(fp)
  801870:	10c02a85 	stb	r3,170(r2)
  d->_cg91 = d->_region3_AEI_cAEI < d->AEI_Constraint;
  801874:	e0bffc17 	ldw	r2,-16(fp)
  801878:	14000d17 	ldw	r16,52(r2)
  80187c:	14400e17 	ldw	r17,56(r2)
  801880:	e0bffc17 	ldw	r2,-16(fp)
  801884:	10800417 	ldw	r2,16(r2)
  801888:	1009883a 	mov	r4,r2
  80188c:	0806f800 	call	806f80 <__floatsidf>
  801890:	1009883a 	mov	r4,r2
  801894:	180b883a 	mov	r5,r3
  801898:	04800044 	movi	r18,1
  80189c:	200d883a 	mov	r6,r4
  8018a0:	280f883a 	mov	r7,r5
  8018a4:	8009883a 	mov	r4,r16
  8018a8:	880b883a 	mov	r5,r17
  8018ac:	08065900 	call	806590 <__ledf2>
  8018b0:	10000116 	blt	r2,zero,8018b8 <logic+0xd78>
  8018b4:	0025883a 	mov	r18,zero
  8018b8:	9007883a 	mov	r3,r18
  8018bc:	e0bffc17 	ldw	r2,-16(fp)
  8018c0:	10c03dc5 	stb	r3,247(r2)
  d->_g90 = d->_g96 && d->_cg91;
  8018c4:	e0bffc17 	ldw	r2,-16(fp)
  8018c8:	10802a83 	ldbu	r2,170(r2)
  8018cc:	10803fcc 	andi	r2,r2,255
  8018d0:	1080201c 	xori	r2,r2,128
  8018d4:	10bfe004 	addi	r2,r2,-128
  8018d8:	10000826 	beq	r2,zero,8018fc <logic+0xdbc>
  8018dc:	e0bffc17 	ldw	r2,-16(fp)
  8018e0:	10803dc3 	ldbu	r2,247(r2)
  8018e4:	10803fcc 	andi	r2,r2,255
  8018e8:	1080201c 	xori	r2,r2,128
  8018ec:	10bfe004 	addi	r2,r2,-128
  8018f0:	10000226 	beq	r2,zero,8018fc <logic+0xdbc>
  8018f4:	00800044 	movi	r2,1
  8018f8:	00000106 	br	801900 <logic+0xdc0>
  8018fc:	0005883a 	mov	r2,zero
  801900:	1007883a 	mov	r3,r2
  801904:	e0bffc17 	ldw	r2,-16(fp)
  801908:	10c02945 	stb	r3,165(r2)
  if (d->_g90) {
  80190c:	e0bffc17 	ldw	r2,-16(fp)
  801910:	10802943 	ldbu	r2,165(r2)
  801914:	10803fcc 	andi	r2,r2,255
  801918:	1080201c 	xori	r2,r2,128
  80191c:	10bfe004 	addi	r2,r2,-128
  801920:	10003426 	beq	r2,zero,8019f4 <logic+0xeb4>
    d->sleepT = (d->sleepT < (d->AEI_Constraint - d->_region3_AEI_cAEI)) ? d->sleepT : (d->AEI_Constraint - d->_region3_AEI_cAEI);
  801924:	e0bffc17 	ldw	r2,-16(fp)
  801928:	14001517 	ldw	r16,84(r2)
  80192c:	14401617 	ldw	r17,88(r2)
  801930:	e0bffc17 	ldw	r2,-16(fp)
  801934:	10800417 	ldw	r2,16(r2)
  801938:	1009883a 	mov	r4,r2
  80193c:	0806f800 	call	806f80 <__floatsidf>
  801940:	1011883a 	mov	r8,r2
  801944:	1813883a 	mov	r9,r3
  801948:	e13ffc17 	ldw	r4,-16(fp)
  80194c:	20800d17 	ldw	r2,52(r4)
  801950:	20c00e17 	ldw	r3,56(r4)
  801954:	100d883a 	mov	r6,r2
  801958:	180f883a 	mov	r7,r3
  80195c:	4009883a 	mov	r4,r8
  801960:	480b883a 	mov	r5,r9
  801964:	08066840 	call	806684 <__subdf3>
  801968:	1009883a 	mov	r4,r2
  80196c:	180b883a 	mov	r5,r3
  801970:	2005883a 	mov	r2,r4
  801974:	2807883a 	mov	r3,r5
  801978:	100d883a 	mov	r6,r2
  80197c:	180f883a 	mov	r7,r3
  801980:	8009883a 	mov	r4,r16
  801984:	880b883a 	mov	r5,r17
  801988:	08065900 	call	806590 <__ledf2>
  80198c:	1000040e 	bge	r2,zero,8019a0 <logic+0xe60>
  801990:	e13ffc17 	ldw	r4,-16(fp)
  801994:	20801517 	ldw	r2,84(r4)
  801998:	20c01617 	ldw	r3,88(r4)
  80199c:	00001206 	br	8019e8 <logic+0xea8>
  8019a0:	e0bffc17 	ldw	r2,-16(fp)
  8019a4:	10800417 	ldw	r2,16(r2)
  8019a8:	1009883a 	mov	r4,r2
  8019ac:	0806f800 	call	806f80 <__floatsidf>
  8019b0:	1011883a 	mov	r8,r2
  8019b4:	1813883a 	mov	r9,r3
  8019b8:	e13ffc17 	ldw	r4,-16(fp)
  8019bc:	20800d17 	ldw	r2,52(r4)
  8019c0:	20c00e17 	ldw	r3,56(r4)
  8019c4:	100d883a 	mov	r6,r2
  8019c8:	180f883a 	mov	r7,r3
  8019cc:	4009883a 	mov	r4,r8
  8019d0:	480b883a 	mov	r5,r9
  8019d4:	08066840 	call	806684 <__subdf3>
  8019d8:	1009883a 	mov	r4,r2
  8019dc:	180b883a 	mov	r5,r3
  8019e0:	2005883a 	mov	r2,r4
  8019e4:	2807883a 	mov	r3,r5
  8019e8:	e13ffc17 	ldw	r4,-16(fp)
  8019ec:	20801515 	stw	r2,84(r4)
  8019f0:	20c01615 	stw	r3,88(r4)
  }
  d->_cg92 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8019f4:	e0bffc17 	ldw	r2,-16(fp)
  8019f8:	10801a03 	ldbu	r2,104(r2)
  8019fc:	10803fcc 	andi	r2,r2,255
  801a00:	1080201c 	xori	r2,r2,128
  801a04:	10bfe004 	addi	r2,r2,-128
  801a08:	1000061e 	bne	r2,zero,801a24 <logic+0xee4>
  801a0c:	e0bffc17 	ldw	r2,-16(fp)
  801a10:	10801a43 	ldbu	r2,105(r2)
  801a14:	10803fcc 	andi	r2,r2,255
  801a18:	1080201c 	xori	r2,r2,128
  801a1c:	10bfe004 	addi	r2,r2,-128
  801a20:	10000226 	beq	r2,zero,801a2c <logic+0xeec>
  801a24:	00800044 	movi	r2,1
  801a28:	00000106 	br	801a30 <logic+0xef0>
  801a2c:	0005883a 	mov	r2,zero
  801a30:	1007883a 	mov	r3,r2
  801a34:	e0bffc17 	ldw	r2,-16(fp)
  801a38:	10c03d85 	stb	r3,246(r2)
  d->_g91 = d->_g96 && !d->_cg91;
  801a3c:	e0bffc17 	ldw	r2,-16(fp)
  801a40:	10802a83 	ldbu	r2,170(r2)
  801a44:	10803fcc 	andi	r2,r2,255
  801a48:	1080201c 	xori	r2,r2,128
  801a4c:	10bfe004 	addi	r2,r2,-128
  801a50:	10000826 	beq	r2,zero,801a74 <logic+0xf34>
  801a54:	e0bffc17 	ldw	r2,-16(fp)
  801a58:	10803dc3 	ldbu	r2,247(r2)
  801a5c:	10803fcc 	andi	r2,r2,255
  801a60:	1080201c 	xori	r2,r2,128
  801a64:	10bfe004 	addi	r2,r2,-128
  801a68:	1000021e 	bne	r2,zero,801a74 <logic+0xf34>
  801a6c:	00800044 	movi	r2,1
  801a70:	00000106 	br	801a78 <logic+0xf38>
  801a74:	0005883a 	mov	r2,zero
  801a78:	1007883a 	mov	r3,r2
  801a7c:	e0bffc17 	ldw	r2,-16(fp)
  801a80:	10c02985 	stb	r3,166(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  801a84:	e0bffc17 	ldw	r2,-16(fp)
  801a88:	10801a03 	ldbu	r2,104(r2)
  801a8c:	10803fcc 	andi	r2,r2,255
  801a90:	1080201c 	xori	r2,r2,128
  801a94:	10bfe004 	addi	r2,r2,-128
  801a98:	1000061e 	bne	r2,zero,801ab4 <logic+0xf74>
  801a9c:	e0bffc17 	ldw	r2,-16(fp)
  801aa0:	10801a43 	ldbu	r2,105(r2)
  801aa4:	10803fcc 	andi	r2,r2,255
  801aa8:	1080201c 	xori	r2,r2,128
  801aac:	10bfe004 	addi	r2,r2,-128
  801ab0:	10000226 	beq	r2,zero,801abc <logic+0xf7c>
  801ab4:	00800044 	movi	r2,1
  801ab8:	00000106 	br	801ac0 <logic+0xf80>
  801abc:	0005883a 	mov	r2,zero
  801ac0:	1007883a 	mov	r3,r2
  801ac4:	e0bffc17 	ldw	r2,-16(fp)
  801ac8:	10c03e05 	stb	r3,248(r2)
  d->_g93 = d->_g90 && d->_cg92 || d->_g91 && d->_cg94;
  801acc:	e0bffc17 	ldw	r2,-16(fp)
  801ad0:	10802943 	ldbu	r2,165(r2)
  801ad4:	10803fcc 	andi	r2,r2,255
  801ad8:	1080201c 	xori	r2,r2,128
  801adc:	10bfe004 	addi	r2,r2,-128
  801ae0:	10000626 	beq	r2,zero,801afc <logic+0xfbc>
  801ae4:	e0bffc17 	ldw	r2,-16(fp)
  801ae8:	10803d83 	ldbu	r2,246(r2)
  801aec:	10803fcc 	andi	r2,r2,255
  801af0:	1080201c 	xori	r2,r2,128
  801af4:	10bfe004 	addi	r2,r2,-128
  801af8:	10000c1e 	bne	r2,zero,801b2c <logic+0xfec>
  801afc:	e0bffc17 	ldw	r2,-16(fp)
  801b00:	10802983 	ldbu	r2,166(r2)
  801b04:	10803fcc 	andi	r2,r2,255
  801b08:	1080201c 	xori	r2,r2,128
  801b0c:	10bfe004 	addi	r2,r2,-128
  801b10:	10000826 	beq	r2,zero,801b34 <logic+0xff4>
  801b14:	e0bffc17 	ldw	r2,-16(fp)
  801b18:	10803e03 	ldbu	r2,248(r2)
  801b1c:	10803fcc 	andi	r2,r2,255
  801b20:	1080201c 	xori	r2,r2,128
  801b24:	10bfe004 	addi	r2,r2,-128
  801b28:	10000226 	beq	r2,zero,801b34 <logic+0xff4>
  801b2c:	00800044 	movi	r2,1
  801b30:	00000106 	br	801b38 <logic+0xff8>
  801b34:	0005883a 	mov	r2,zero
  801b38:	1007883a 	mov	r3,r2
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	10c02a05 	stb	r3,168(r2)
  d->_g100 = !d->_g25_e3;
  801b44:	e0bffc17 	ldw	r2,-16(fp)
  801b48:	10804403 	ldbu	r2,272(r2)
  801b4c:	10803fcc 	andi	r2,r2,255
  801b50:	1080201c 	xori	r2,r2,128
  801b54:	10bfe004 	addi	r2,r2,-128
  801b58:	1005003a 	cmpeq	r2,r2,zero
  801b5c:	1007883a 	mov	r3,r2
  801b60:	e0bffc17 	ldw	r2,-16(fp)
  801b64:	10c02b05 	stb	r3,172(r2)
  d->_g101 = d->_g101 || d->_g104;
  801b68:	e0bffc17 	ldw	r2,-16(fp)
  801b6c:	10802b43 	ldbu	r2,173(r2)
  801b70:	10803fcc 	andi	r2,r2,255
  801b74:	1080201c 	xori	r2,r2,128
  801b78:	10bfe004 	addi	r2,r2,-128
  801b7c:	1000061e 	bne	r2,zero,801b98 <logic+0x1058>
  801b80:	e0bffc17 	ldw	r2,-16(fp)
  801b84:	10802c03 	ldbu	r2,176(r2)
  801b88:	10803fcc 	andi	r2,r2,255
  801b8c:	1080201c 	xori	r2,r2,128
  801b90:	10bfe004 	addi	r2,r2,-128
  801b94:	10000226 	beq	r2,zero,801ba0 <logic+0x1060>
  801b98:	00800044 	movi	r2,1
  801b9c:	00000106 	br	801ba4 <logic+0x1064>
  801ba0:	0005883a 	mov	r2,zero
  801ba4:	1007883a 	mov	r3,r2
  801ba8:	e0bffc17 	ldw	r2,-16(fp)
  801bac:	10c02b45 	stb	r3,173(r2)
  d->_g104 = (d->_g9_e1 || d->_g86) && (d->_g93_e2 || d->_g93) && (d->_g100 || d->_g101) && (d->_g86 || d->_g93 || d->_g101);
  801bb0:	e0bffc17 	ldw	r2,-16(fp)
  801bb4:	10804383 	ldbu	r2,270(r2)
  801bb8:	10803fcc 	andi	r2,r2,255
  801bbc:	1080201c 	xori	r2,r2,128
  801bc0:	10bfe004 	addi	r2,r2,-128
  801bc4:	1000061e 	bne	r2,zero,801be0 <logic+0x10a0>
  801bc8:	e0bffc17 	ldw	r2,-16(fp)
  801bcc:	108028c3 	ldbu	r2,163(r2)
  801bd0:	10803fcc 	andi	r2,r2,255
  801bd4:	1080201c 	xori	r2,r2,128
  801bd8:	10bfe004 	addi	r2,r2,-128
  801bdc:	10002c26 	beq	r2,zero,801c90 <logic+0x1150>
  801be0:	e0bffc17 	ldw	r2,-16(fp)
  801be4:	10804603 	ldbu	r2,280(r2)
  801be8:	10803fcc 	andi	r2,r2,255
  801bec:	1080201c 	xori	r2,r2,128
  801bf0:	10bfe004 	addi	r2,r2,-128
  801bf4:	1000061e 	bne	r2,zero,801c10 <logic+0x10d0>
  801bf8:	e0bffc17 	ldw	r2,-16(fp)
  801bfc:	10802a03 	ldbu	r2,168(r2)
  801c00:	10803fcc 	andi	r2,r2,255
  801c04:	1080201c 	xori	r2,r2,128
  801c08:	10bfe004 	addi	r2,r2,-128
  801c0c:	10002026 	beq	r2,zero,801c90 <logic+0x1150>
  801c10:	e0bffc17 	ldw	r2,-16(fp)
  801c14:	10802b03 	ldbu	r2,172(r2)
  801c18:	10803fcc 	andi	r2,r2,255
  801c1c:	1080201c 	xori	r2,r2,128
  801c20:	10bfe004 	addi	r2,r2,-128
  801c24:	1000061e 	bne	r2,zero,801c40 <logic+0x1100>
  801c28:	e0bffc17 	ldw	r2,-16(fp)
  801c2c:	10802b43 	ldbu	r2,173(r2)
  801c30:	10803fcc 	andi	r2,r2,255
  801c34:	1080201c 	xori	r2,r2,128
  801c38:	10bfe004 	addi	r2,r2,-128
  801c3c:	10001426 	beq	r2,zero,801c90 <logic+0x1150>
  801c40:	e0bffc17 	ldw	r2,-16(fp)
  801c44:	108028c3 	ldbu	r2,163(r2)
  801c48:	10803fcc 	andi	r2,r2,255
  801c4c:	1080201c 	xori	r2,r2,128
  801c50:	10bfe004 	addi	r2,r2,-128
  801c54:	10000c1e 	bne	r2,zero,801c88 <logic+0x1148>
  801c58:	e0bffc17 	ldw	r2,-16(fp)
  801c5c:	10802a03 	ldbu	r2,168(r2)
  801c60:	10803fcc 	andi	r2,r2,255
  801c64:	1080201c 	xori	r2,r2,128
  801c68:	10bfe004 	addi	r2,r2,-128
  801c6c:	1000061e 	bne	r2,zero,801c88 <logic+0x1148>
  801c70:	e0bffc17 	ldw	r2,-16(fp)
  801c74:	10802b43 	ldbu	r2,173(r2)
  801c78:	10803fcc 	andi	r2,r2,255
  801c7c:	1080201c 	xori	r2,r2,128
  801c80:	10bfe004 	addi	r2,r2,-128
  801c84:	10000226 	beq	r2,zero,801c90 <logic+0x1150>
  801c88:	00800044 	movi	r2,1
  801c8c:	00000106 	br	801c94 <logic+0x1154>
  801c90:	0005883a 	mov	r2,zero
  801c94:	1007883a 	mov	r3,r2
  801c98:	e0bffc17 	ldw	r2,-16(fp)
  801c9c:	10c02c05 	stb	r3,176(r2)
  d->_cg105 = d->_Pacemaker_local__Atrig4;
  801ca0:	e0bffc17 	ldw	r2,-16(fp)
  801ca4:	10c01a03 	ldbu	r3,104(r2)
  801ca8:	e0bffc17 	ldw	r2,-16(fp)
  801cac:	10c03c05 	stb	r3,240(r2)
  d->_g102 = d->_g104 && d->_cg105;
  801cb0:	e0bffc17 	ldw	r2,-16(fp)
  801cb4:	10802c03 	ldbu	r2,176(r2)
  801cb8:	10803fcc 	andi	r2,r2,255
  801cbc:	1080201c 	xori	r2,r2,128
  801cc0:	10bfe004 	addi	r2,r2,-128
  801cc4:	10000826 	beq	r2,zero,801ce8 <logic+0x11a8>
  801cc8:	e0bffc17 	ldw	r2,-16(fp)
  801ccc:	10803c03 	ldbu	r2,240(r2)
  801cd0:	10803fcc 	andi	r2,r2,255
  801cd4:	1080201c 	xori	r2,r2,128
  801cd8:	10bfe004 	addi	r2,r2,-128
  801cdc:	10000226 	beq	r2,zero,801ce8 <logic+0x11a8>
  801ce0:	00800044 	movi	r2,1
  801ce4:	00000106 	br	801cec <logic+0x11ac>
  801ce8:	0005883a 	mov	r2,zero
  801cec:	1007883a 	mov	r3,r2
  801cf0:	e0bffc17 	ldw	r2,-16(fp)
  801cf4:	10c02b85 	stb	r3,174(r2)
  if (d->_g102) {
  801cf8:	e0bffc17 	ldw	r2,-16(fp)
  801cfc:	10802b83 	ldbu	r2,174(r2)
  801d00:	10803fcc 	andi	r2,r2,255
  801d04:	1080201c 	xori	r2,r2,128
  801d08:	10bfe004 	addi	r2,r2,-128
  801d0c:	10000626 	beq	r2,zero,801d28 <logic+0x11e8>
    d->AP |= 1;
  801d10:	e0bffc17 	ldw	r2,-16(fp)
  801d14:	10801703 	ldbu	r2,92(r2)
  801d18:	10800054 	ori	r2,r2,1
  801d1c:	1007883a 	mov	r3,r2
  801d20:	e0bffc17 	ldw	r2,-16(fp)
  801d24:	10c01705 	stb	r3,92(r2)
  }
  d->_g102_e3 = d->_pg86;
  801d28:	e0bffc17 	ldw	r2,-16(fp)
  801d2c:	10c04b43 	ldbu	r3,301(r2)
  801d30:	e0bffc17 	ldw	r2,-16(fp)
  801d34:	10c04645 	stb	r3,281(r2)
  d->_cg4 = (d->AS || d->AP) && !d->PVARP;
  801d38:	e0bffc17 	ldw	r2,-16(fp)
  801d3c:	10800003 	ldbu	r2,0(r2)
  801d40:	10803fcc 	andi	r2,r2,255
  801d44:	1080201c 	xori	r2,r2,128
  801d48:	10bfe004 	addi	r2,r2,-128
  801d4c:	1000061e 	bne	r2,zero,801d68 <logic+0x1228>
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	10801703 	ldbu	r2,92(r2)
  801d58:	10803fcc 	andi	r2,r2,255
  801d5c:	1080201c 	xori	r2,r2,128
  801d60:	10bfe004 	addi	r2,r2,-128
  801d64:	10000826 	beq	r2,zero,801d88 <logic+0x1248>
  801d68:	e0bffc17 	ldw	r2,-16(fp)
  801d6c:	108017c3 	ldbu	r2,95(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	1000021e 	bne	r2,zero,801d88 <logic+0x1248>
  801d80:	00800044 	movi	r2,1
  801d84:	00000106 	br	801d8c <logic+0x124c>
  801d88:	0005883a 	mov	r2,zero
  801d8c:	1007883a 	mov	r3,r2
  801d90:	e0bffc17 	ldw	r2,-16(fp)
  801d94:	10c03645 	stb	r3,217(r2)
  d->_g86 = d->_GO || d->_g16_e2 || d->_g24 && !d->_cg28 || d->_g102_e3 && !d->_cg4;
  801d98:	e0bffc17 	ldw	r2,-16(fp)
  801d9c:	108035c3 	ldbu	r2,215(r2)
  801da0:	10803fcc 	andi	r2,r2,255
  801da4:	1080201c 	xori	r2,r2,128
  801da8:	10bfe004 	addi	r2,r2,-128
  801dac:	10001e1e 	bne	r2,zero,801e28 <logic+0x12e8>
  801db0:	e0bffc17 	ldw	r2,-16(fp)
  801db4:	108043c3 	ldbu	r2,271(r2)
  801db8:	10803fcc 	andi	r2,r2,255
  801dbc:	1080201c 	xori	r2,r2,128
  801dc0:	10bfe004 	addi	r2,r2,-128
  801dc4:	1000181e 	bne	r2,zero,801e28 <logic+0x12e8>
  801dc8:	e0bffc17 	ldw	r2,-16(fp)
  801dcc:	10801e83 	ldbu	r2,122(r2)
  801dd0:	10803fcc 	andi	r2,r2,255
  801dd4:	1080201c 	xori	r2,r2,128
  801dd8:	10bfe004 	addi	r2,r2,-128
  801ddc:	10000626 	beq	r2,zero,801df8 <logic+0x12b8>
  801de0:	e0bffc17 	ldw	r2,-16(fp)
  801de4:	10803603 	ldbu	r2,216(r2)
  801de8:	10803fcc 	andi	r2,r2,255
  801dec:	1080201c 	xori	r2,r2,128
  801df0:	10bfe004 	addi	r2,r2,-128
  801df4:	10000c26 	beq	r2,zero,801e28 <logic+0x12e8>
  801df8:	e0bffc17 	ldw	r2,-16(fp)
  801dfc:	10804643 	ldbu	r2,281(r2)
  801e00:	10803fcc 	andi	r2,r2,255
  801e04:	1080201c 	xori	r2,r2,128
  801e08:	10bfe004 	addi	r2,r2,-128
  801e0c:	10000826 	beq	r2,zero,801e30 <logic+0x12f0>
  801e10:	e0bffc17 	ldw	r2,-16(fp)
  801e14:	10803643 	ldbu	r2,217(r2)
  801e18:	10803fcc 	andi	r2,r2,255
  801e1c:	1080201c 	xori	r2,r2,128
  801e20:	10bfe004 	addi	r2,r2,-128
  801e24:	1000021e 	bne	r2,zero,801e30 <logic+0x12f0>
  801e28:	00800044 	movi	r2,1
  801e2c:	00000106 	br	801e34 <logic+0x12f4>
  801e30:	0005883a 	mov	r2,zero
  801e34:	1007883a 	mov	r3,r2
  801e38:	e0bffc17 	ldw	r2,-16(fp)
  801e3c:	10c028c5 	stb	r3,163(r2)
  d->_g93_e2 = d->_g102_e3 && d->_cg4;
  801e40:	e0bffc17 	ldw	r2,-16(fp)
  801e44:	10804643 	ldbu	r2,281(r2)
  801e48:	10803fcc 	andi	r2,r2,255
  801e4c:	1080201c 	xori	r2,r2,128
  801e50:	10bfe004 	addi	r2,r2,-128
  801e54:	10000826 	beq	r2,zero,801e78 <logic+0x1338>
  801e58:	e0bffc17 	ldw	r2,-16(fp)
  801e5c:	10803643 	ldbu	r2,217(r2)
  801e60:	10803fcc 	andi	r2,r2,255
  801e64:	1080201c 	xori	r2,r2,128
  801e68:	10bfe004 	addi	r2,r2,-128
  801e6c:	10000226 	beq	r2,zero,801e78 <logic+0x1338>
  801e70:	00800044 	movi	r2,1
  801e74:	00000106 	br	801e7c <logic+0x133c>
  801e78:	0005883a 	mov	r2,zero
  801e7c:	1007883a 	mov	r3,r2
  801e80:	e0bffc17 	ldw	r2,-16(fp)
  801e84:	10c04605 	stb	r3,280(r2)
  if (d->_g93_e2) {
  801e88:	e0bffc17 	ldw	r2,-16(fp)
  801e8c:	10804603 	ldbu	r2,280(r2)
  801e90:	10803fcc 	andi	r2,r2,255
  801e94:	1080201c 	xori	r2,r2,128
  801e98:	10bfe004 	addi	r2,r2,-128
  801e9c:	10000726 	beq	r2,zero,801ebc <logic+0x137c>
    d->_region0_AVI_cAVI = 0;
  801ea0:	e0bffc17 	ldw	r2,-16(fp)
  801ea4:	10000715 	stw	zero,28(r2)
  801ea8:	10000815 	stw	zero,32(r2)
    d->_Pacemaker_local__Atrig = 0;
  801eac:	e0bffc17 	ldw	r2,-16(fp)
  801eb0:	10001905 	stb	zero,100(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  801eb4:	e0bffc17 	ldw	r2,-16(fp)
  801eb8:	10001945 	stb	zero,101(r2)
  }
  d->_cg6 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801ebc:	e0bffc17 	ldw	r2,-16(fp)
  801ec0:	10801903 	ldbu	r2,100(r2)
  801ec4:	10803fcc 	andi	r2,r2,255
  801ec8:	1080201c 	xori	r2,r2,128
  801ecc:	10bfe004 	addi	r2,r2,-128
  801ed0:	1000061e 	bne	r2,zero,801eec <logic+0x13ac>
  801ed4:	e0bffc17 	ldw	r2,-16(fp)
  801ed8:	10801943 	ldbu	r2,101(r2)
  801edc:	10803fcc 	andi	r2,r2,255
  801ee0:	1080201c 	xori	r2,r2,128
  801ee4:	10bfe004 	addi	r2,r2,-128
  801ee8:	10000226 	beq	r2,zero,801ef4 <logic+0x13b4>
  801eec:	00800044 	movi	r2,1
  801ef0:	00000106 	br	801ef8 <logic+0x13b8>
  801ef4:	0005883a 	mov	r2,zero
  801ef8:	1007883a 	mov	r3,r2
  801efc:	e0bffc17 	ldw	r2,-16(fp)
  801f00:	10c03685 	stb	r3,218(r2)
  d->_g93 = d->_g93_e2 && !d->_cg6 || d->_g8 && !d->_cg8;
  801f04:	e0bffc17 	ldw	r2,-16(fp)
  801f08:	10804603 	ldbu	r2,280(r2)
  801f0c:	10803fcc 	andi	r2,r2,255
  801f10:	1080201c 	xori	r2,r2,128
  801f14:	10bfe004 	addi	r2,r2,-128
  801f18:	10000626 	beq	r2,zero,801f34 <logic+0x13f4>
  801f1c:	e0bffc17 	ldw	r2,-16(fp)
  801f20:	10803683 	ldbu	r2,218(r2)
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1080201c 	xori	r2,r2,128
  801f2c:	10bfe004 	addi	r2,r2,-128
  801f30:	10000c26 	beq	r2,zero,801f64 <logic+0x1424>
  801f34:	e0bffc17 	ldw	r2,-16(fp)
  801f38:	10801bc3 	ldbu	r2,111(r2)
  801f3c:	10803fcc 	andi	r2,r2,255
  801f40:	1080201c 	xori	r2,r2,128
  801f44:	10bfe004 	addi	r2,r2,-128
  801f48:	10000826 	beq	r2,zero,801f6c <logic+0x142c>
  801f4c:	e0bffc17 	ldw	r2,-16(fp)
  801f50:	108036c3 	ldbu	r2,219(r2)
  801f54:	10803fcc 	andi	r2,r2,255
  801f58:	1080201c 	xori	r2,r2,128
  801f5c:	10bfe004 	addi	r2,r2,-128
  801f60:	1000021e 	bne	r2,zero,801f6c <logic+0x142c>
  801f64:	00800044 	movi	r2,1
  801f68:	00000106 	br	801f70 <logic+0x1430>
  801f6c:	0005883a 	mov	r2,zero
  801f70:	1007883a 	mov	r3,r2
  801f74:	e0bffc17 	ldw	r2,-16(fp)
  801f78:	10c02a05 	stb	r3,168(r2)
  d->_cg10 = d->_region0_AVI_cAVI < d->AVI_Constraint;
  801f7c:	e0bffc17 	ldw	r2,-16(fp)
  801f80:	14000717 	ldw	r16,28(r2)
  801f84:	14400817 	ldw	r17,32(r2)
  801f88:	e0bffc17 	ldw	r2,-16(fp)
  801f8c:	10800117 	ldw	r2,4(r2)
  801f90:	1009883a 	mov	r4,r2
  801f94:	0806f800 	call	806f80 <__floatsidf>
  801f98:	1009883a 	mov	r4,r2
  801f9c:	180b883a 	mov	r5,r3
  801fa0:	04800044 	movi	r18,1
  801fa4:	200d883a 	mov	r6,r4
  801fa8:	280f883a 	mov	r7,r5
  801fac:	8009883a 	mov	r4,r16
  801fb0:	880b883a 	mov	r5,r17
  801fb4:	08065900 	call	806590 <__ledf2>
  801fb8:	10000116 	blt	r2,zero,801fc0 <logic+0x1480>
  801fbc:	0025883a 	mov	r18,zero
  801fc0:	9007883a 	mov	r3,r18
  801fc4:	e0bffc17 	ldw	r2,-16(fp)
  801fc8:	10c03705 	stb	r3,220(r2)
  d->_g86_e1 = d->_g93_e2 && d->_cg10;
  801fcc:	e0bffc17 	ldw	r2,-16(fp)
  801fd0:	10804603 	ldbu	r2,280(r2)
  801fd4:	10803fcc 	andi	r2,r2,255
  801fd8:	1080201c 	xori	r2,r2,128
  801fdc:	10bfe004 	addi	r2,r2,-128
  801fe0:	10000826 	beq	r2,zero,802004 <logic+0x14c4>
  801fe4:	e0bffc17 	ldw	r2,-16(fp)
  801fe8:	10803703 	ldbu	r2,220(r2)
  801fec:	10803fcc 	andi	r2,r2,255
  801ff0:	1080201c 	xori	r2,r2,128
  801ff4:	10bfe004 	addi	r2,r2,-128
  801ff8:	10000226 	beq	r2,zero,802004 <logic+0x14c4>
  801ffc:	00800044 	movi	r2,1
  802000:	00000106 	br	802008 <logic+0x14c8>
  802004:	0005883a 	mov	r2,zero
  802008:	1007883a 	mov	r3,r2
  80200c:	e0bffc17 	ldw	r2,-16(fp)
  802010:	10c045c5 	stb	r3,279(r2)
  if (d->_g86_e1) {
  802014:	e0bffc17 	ldw	r2,-16(fp)
  802018:	108045c3 	ldbu	r2,279(r2)
  80201c:	10803fcc 	andi	r2,r2,255
  802020:	1080201c 	xori	r2,r2,128
  802024:	10bfe004 	addi	r2,r2,-128
  802028:	10003426 	beq	r2,zero,8020fc <logic+0x15bc>
    d->sleepT = (d->sleepT < (d->AVI_Constraint - d->_region0_AVI_cAVI)) ? d->sleepT : (d->AVI_Constraint - d->_region0_AVI_cAVI);
  80202c:	e0bffc17 	ldw	r2,-16(fp)
  802030:	14001517 	ldw	r16,84(r2)
  802034:	14401617 	ldw	r17,88(r2)
  802038:	e0bffc17 	ldw	r2,-16(fp)
  80203c:	10800117 	ldw	r2,4(r2)
  802040:	1009883a 	mov	r4,r2
  802044:	0806f800 	call	806f80 <__floatsidf>
  802048:	1011883a 	mov	r8,r2
  80204c:	1813883a 	mov	r9,r3
  802050:	e13ffc17 	ldw	r4,-16(fp)
  802054:	20800717 	ldw	r2,28(r4)
  802058:	20c00817 	ldw	r3,32(r4)
  80205c:	100d883a 	mov	r6,r2
  802060:	180f883a 	mov	r7,r3
  802064:	4009883a 	mov	r4,r8
  802068:	480b883a 	mov	r5,r9
  80206c:	08066840 	call	806684 <__subdf3>
  802070:	1009883a 	mov	r4,r2
  802074:	180b883a 	mov	r5,r3
  802078:	2005883a 	mov	r2,r4
  80207c:	2807883a 	mov	r3,r5
  802080:	100d883a 	mov	r6,r2
  802084:	180f883a 	mov	r7,r3
  802088:	8009883a 	mov	r4,r16
  80208c:	880b883a 	mov	r5,r17
  802090:	08065900 	call	806590 <__ledf2>
  802094:	1000040e 	bge	r2,zero,8020a8 <logic+0x1568>
  802098:	e13ffc17 	ldw	r4,-16(fp)
  80209c:	20801517 	ldw	r2,84(r4)
  8020a0:	20c01617 	ldw	r3,88(r4)
  8020a4:	00001206 	br	8020f0 <logic+0x15b0>
  8020a8:	e0bffc17 	ldw	r2,-16(fp)
  8020ac:	10800117 	ldw	r2,4(r2)
  8020b0:	1009883a 	mov	r4,r2
  8020b4:	0806f800 	call	806f80 <__floatsidf>
  8020b8:	1011883a 	mov	r8,r2
  8020bc:	1813883a 	mov	r9,r3
  8020c0:	e13ffc17 	ldw	r4,-16(fp)
  8020c4:	20800717 	ldw	r2,28(r4)
  8020c8:	20c00817 	ldw	r3,32(r4)
  8020cc:	100d883a 	mov	r6,r2
  8020d0:	180f883a 	mov	r7,r3
  8020d4:	4009883a 	mov	r4,r8
  8020d8:	480b883a 	mov	r5,r9
  8020dc:	08066840 	call	806684 <__subdf3>
  8020e0:	1009883a 	mov	r4,r2
  8020e4:	180b883a 	mov	r5,r3
  8020e8:	2005883a 	mov	r2,r4
  8020ec:	2807883a 	mov	r3,r5
  8020f0:	e13ffc17 	ldw	r4,-16(fp)
  8020f4:	20801515 	stw	r2,84(r4)
  8020f8:	20c01615 	stw	r3,88(r4)
  }
  d->_cg11 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8020fc:	e0bffc17 	ldw	r2,-16(fp)
  802100:	10801903 	ldbu	r2,100(r2)
  802104:	10803fcc 	andi	r2,r2,255
  802108:	1080201c 	xori	r2,r2,128
  80210c:	10bfe004 	addi	r2,r2,-128
  802110:	1000061e 	bne	r2,zero,80212c <logic+0x15ec>
  802114:	e0bffc17 	ldw	r2,-16(fp)
  802118:	10801943 	ldbu	r2,101(r2)
  80211c:	10803fcc 	andi	r2,r2,255
  802120:	1080201c 	xori	r2,r2,128
  802124:	10bfe004 	addi	r2,r2,-128
  802128:	10000226 	beq	r2,zero,802134 <logic+0x15f4>
  80212c:	00800044 	movi	r2,1
  802130:	00000106 	br	802138 <logic+0x15f8>
  802134:	0005883a 	mov	r2,zero
  802138:	1007883a 	mov	r3,r2
  80213c:	e0bffc17 	ldw	r2,-16(fp)
  802140:	10c03745 	stb	r3,221(r2)
  d->_g28 = d->_g86_e1 && !d->_cg11 || d->_g13 && !d->_cg15;
  802144:	e0bffc17 	ldw	r2,-16(fp)
  802148:	108045c3 	ldbu	r2,279(r2)
  80214c:	10803fcc 	andi	r2,r2,255
  802150:	1080201c 	xori	r2,r2,128
  802154:	10bfe004 	addi	r2,r2,-128
  802158:	10000626 	beq	r2,zero,802174 <logic+0x1634>
  80215c:	e0bffc17 	ldw	r2,-16(fp)
  802160:	10803743 	ldbu	r2,221(r2)
  802164:	10803fcc 	andi	r2,r2,255
  802168:	1080201c 	xori	r2,r2,128
  80216c:	10bfe004 	addi	r2,r2,-128
  802170:	10000c26 	beq	r2,zero,8021a4 <logic+0x1664>
  802174:	e0bffc17 	ldw	r2,-16(fp)
  802178:	10801c83 	ldbu	r2,114(r2)
  80217c:	10803fcc 	andi	r2,r2,255
  802180:	1080201c 	xori	r2,r2,128
  802184:	10bfe004 	addi	r2,r2,-128
  802188:	10000826 	beq	r2,zero,8021ac <logic+0x166c>
  80218c:	e0bffc17 	ldw	r2,-16(fp)
  802190:	10803783 	ldbu	r2,222(r2)
  802194:	10803fcc 	andi	r2,r2,255
  802198:	1080201c 	xori	r2,r2,128
  80219c:	10bfe004 	addi	r2,r2,-128
  8021a0:	1000021e 	bne	r2,zero,8021ac <logic+0x166c>
  8021a4:	00800044 	movi	r2,1
  8021a8:	00000106 	br	8021b0 <logic+0x1670>
  8021ac:	0005883a 	mov	r2,zero
  8021b0:	1007883a 	mov	r3,r2
  8021b4:	e0bffc17 	ldw	r2,-16(fp)
  8021b8:	10c01f85 	stb	r3,126(r2)
  d->_g29 = d->_g93_e2 && !d->_cg10;
  8021bc:	e0bffc17 	ldw	r2,-16(fp)
  8021c0:	10804603 	ldbu	r2,280(r2)
  8021c4:	10803fcc 	andi	r2,r2,255
  8021c8:	1080201c 	xori	r2,r2,128
  8021cc:	10bfe004 	addi	r2,r2,-128
  8021d0:	10000826 	beq	r2,zero,8021f4 <logic+0x16b4>
  8021d4:	e0bffc17 	ldw	r2,-16(fp)
  8021d8:	10803703 	ldbu	r2,220(r2)
  8021dc:	10803fcc 	andi	r2,r2,255
  8021e0:	1080201c 	xori	r2,r2,128
  8021e4:	10bfe004 	addi	r2,r2,-128
  8021e8:	1000021e 	bne	r2,zero,8021f4 <logic+0x16b4>
  8021ec:	00800044 	movi	r2,1
  8021f0:	00000106 	br	8021f8 <logic+0x16b8>
  8021f4:	0005883a 	mov	r2,zero
  8021f8:	1007883a 	mov	r3,r2
  8021fc:	e0bffc17 	ldw	r2,-16(fp)
  802200:	10c01fc5 	stb	r3,127(r2)
  d->_cg20 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802204:	e0bffc17 	ldw	r2,-16(fp)
  802208:	10801903 	ldbu	r2,100(r2)
  80220c:	10803fcc 	andi	r2,r2,255
  802210:	1080201c 	xori	r2,r2,128
  802214:	10bfe004 	addi	r2,r2,-128
  802218:	1000061e 	bne	r2,zero,802234 <logic+0x16f4>
  80221c:	e0bffc17 	ldw	r2,-16(fp)
  802220:	10801943 	ldbu	r2,101(r2)
  802224:	10803fcc 	andi	r2,r2,255
  802228:	1080201c 	xori	r2,r2,128
  80222c:	10bfe004 	addi	r2,r2,-128
  802230:	10000226 	beq	r2,zero,80223c <logic+0x16fc>
  802234:	00800044 	movi	r2,1
  802238:	00000106 	br	802240 <logic+0x1700>
  80223c:	0005883a 	mov	r2,zero
  802240:	1007883a 	mov	r3,r2
  802244:	e0bffc17 	ldw	r2,-16(fp)
  802248:	10c03845 	stb	r3,225(r2)
  d->_g4 = d->_g14 && !d->_cg17 || d->_g29 && !d->_cg20;
  80224c:	e0bffc17 	ldw	r2,-16(fp)
  802250:	10801cc3 	ldbu	r2,115(r2)
  802254:	10803fcc 	andi	r2,r2,255
  802258:	1080201c 	xori	r2,r2,128
  80225c:	10bfe004 	addi	r2,r2,-128
  802260:	10000626 	beq	r2,zero,80227c <logic+0x173c>
  802264:	e0bffc17 	ldw	r2,-16(fp)
  802268:	10803803 	ldbu	r2,224(r2)
  80226c:	10803fcc 	andi	r2,r2,255
  802270:	1080201c 	xori	r2,r2,128
  802274:	10bfe004 	addi	r2,r2,-128
  802278:	10000c26 	beq	r2,zero,8022ac <logic+0x176c>
  80227c:	e0bffc17 	ldw	r2,-16(fp)
  802280:	10801fc3 	ldbu	r2,127(r2)
  802284:	10803fcc 	andi	r2,r2,255
  802288:	1080201c 	xori	r2,r2,128
  80228c:	10bfe004 	addi	r2,r2,-128
  802290:	10000826 	beq	r2,zero,8022b4 <logic+0x1774>
  802294:	e0bffc17 	ldw	r2,-16(fp)
  802298:	10803843 	ldbu	r2,225(r2)
  80229c:	10803fcc 	andi	r2,r2,255
  8022a0:	1080201c 	xori	r2,r2,128
  8022a4:	10bfe004 	addi	r2,r2,-128
  8022a8:	1000021e 	bne	r2,zero,8022b4 <logic+0x1774>
  8022ac:	00800044 	movi	r2,1
  8022b0:	00000106 	br	8022b8 <logic+0x1778>
  8022b4:	0005883a 	mov	r2,zero
  8022b8:	1007883a 	mov	r3,r2
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	10c01b45 	stb	r3,109(r2)
  d->_g8 = d->_g93_e2 || d->_g26 && !d->VS;
  8022c4:	e0bffc17 	ldw	r2,-16(fp)
  8022c8:	10804603 	ldbu	r2,280(r2)
  8022cc:	10803fcc 	andi	r2,r2,255
  8022d0:	1080201c 	xori	r2,r2,128
  8022d4:	10bfe004 	addi	r2,r2,-128
  8022d8:	10000c1e 	bne	r2,zero,80230c <logic+0x17cc>
  8022dc:	e0bffc17 	ldw	r2,-16(fp)
  8022e0:	10801f03 	ldbu	r2,124(r2)
  8022e4:	10803fcc 	andi	r2,r2,255
  8022e8:	1080201c 	xori	r2,r2,128
  8022ec:	10bfe004 	addi	r2,r2,-128
  8022f0:	10000826 	beq	r2,zero,802314 <logic+0x17d4>
  8022f4:	e0bffc17 	ldw	r2,-16(fp)
  8022f8:	10800043 	ldbu	r2,1(r2)
  8022fc:	10803fcc 	andi	r2,r2,255
  802300:	1080201c 	xori	r2,r2,128
  802304:	10bfe004 	addi	r2,r2,-128
  802308:	1000021e 	bne	r2,zero,802314 <logic+0x17d4>
  80230c:	00800044 	movi	r2,1
  802310:	00000106 	br	802318 <logic+0x17d8>
  802314:	0005883a 	mov	r2,zero
  802318:	1007883a 	mov	r3,r2
  80231c:	e0bffc17 	ldw	r2,-16(fp)
  802320:	10c01bc5 	stb	r3,111(r2)
  d->_g15 = d->_pg149;
  802324:	e0bffc17 	ldw	r2,-16(fp)
  802328:	10c04b83 	ldbu	r3,302(r2)
  80232c:	e0bffc17 	ldw	r2,-16(fp)
  802330:	10c01d05 	stb	r3,116(r2)
  if (d->_g15) {
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10801d03 	ldbu	r2,116(r2)
  80233c:	10803fcc 	andi	r2,r2,255
  802340:	1080201c 	xori	r2,r2,128
  802344:	10bfe004 	addi	r2,r2,-128
  802348:	10001226 	beq	r2,zero,802394 <logic+0x1854>
    d->_region1_PVARP_cPVARP += d->deltaT;
  80234c:	e13ffc17 	ldw	r4,-16(fp)
  802350:	20800917 	ldw	r2,36(r4)
  802354:	20c00a17 	ldw	r3,40(r4)
  802358:	e1bffc17 	ldw	r6,-16(fp)
  80235c:	31001317 	ldw	r4,76(r6)
  802360:	31401417 	ldw	r5,80(r6)
  802364:	200d883a 	mov	r6,r4
  802368:	280f883a 	mov	r7,r5
  80236c:	1009883a 	mov	r4,r2
  802370:	180b883a 	mov	r5,r3
  802374:	0805c080 	call	805c08 <__adddf3>
  802378:	1009883a 	mov	r4,r2
  80237c:	180b883a 	mov	r5,r3
  802380:	2005883a 	mov	r2,r4
  802384:	2807883a 	mov	r3,r5
  802388:	e13ffc17 	ldw	r4,-16(fp)
  80238c:	20800915 	stw	r2,36(r4)
  802390:	20c00a15 	stw	r3,40(r4)
  }
  d->_g11 = d->_pg42;
  802394:	e0bffc17 	ldw	r2,-16(fp)
  802398:	10c04bc3 	ldbu	r3,303(r2)
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	10c01c45 	stb	r3,113(r2)
  d->_cg51 = d->_region1_PVARP_cPVARP >= d->PVARP_Constraint;
  8023a4:	e0bffc17 	ldw	r2,-16(fp)
  8023a8:	14000917 	ldw	r16,36(r2)
  8023ac:	14400a17 	ldw	r17,40(r2)
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10800217 	ldw	r2,8(r2)
  8023b8:	1009883a 	mov	r4,r2
  8023bc:	0806f800 	call	806f80 <__floatsidf>
  8023c0:	1009883a 	mov	r4,r2
  8023c4:	180b883a 	mov	r5,r3
  8023c8:	04800044 	movi	r18,1
  8023cc:	200d883a 	mov	r6,r4
  8023d0:	280f883a 	mov	r7,r5
  8023d4:	8009883a 	mov	r4,r16
  8023d8:	880b883a 	mov	r5,r17
  8023dc:	08064b40 	call	8064b4 <__gedf2>
  8023e0:	1000010e 	bge	r2,zero,8023e8 <logic+0x18a8>
  8023e4:	0025883a 	mov	r18,zero
  8023e8:	9007883a 	mov	r3,r18
  8023ec:	e0bffc17 	ldw	r2,-16(fp)
  8023f0:	10c03a45 	stb	r3,233(r2)
  d->_g20 = d->_g11 && d->_cg51;
  8023f4:	e0bffc17 	ldw	r2,-16(fp)
  8023f8:	10801c43 	ldbu	r2,113(r2)
  8023fc:	10803fcc 	andi	r2,r2,255
  802400:	1080201c 	xori	r2,r2,128
  802404:	10bfe004 	addi	r2,r2,-128
  802408:	10000826 	beq	r2,zero,80242c <logic+0x18ec>
  80240c:	e0bffc17 	ldw	r2,-16(fp)
  802410:	10803a43 	ldbu	r2,233(r2)
  802414:	10803fcc 	andi	r2,r2,255
  802418:	1080201c 	xori	r2,r2,128
  80241c:	10bfe004 	addi	r2,r2,-128
  802420:	10000226 	beq	r2,zero,80242c <logic+0x18ec>
  802424:	00800044 	movi	r2,1
  802428:	00000106 	br	802430 <logic+0x18f0>
  80242c:	0005883a 	mov	r2,zero
  802430:	1007883a 	mov	r3,r2
  802434:	e0bffc17 	ldw	r2,-16(fp)
  802438:	10c01e05 	stb	r3,120(r2)
  if (d->_g20) {
  80243c:	e0bffc17 	ldw	r2,-16(fp)
  802440:	10801e03 	ldbu	r2,120(r2)
  802444:	10803fcc 	andi	r2,r2,255
  802448:	1080201c 	xori	r2,r2,128
  80244c:	10bfe004 	addi	r2,r2,-128
  802450:	10000326 	beq	r2,zero,802460 <logic+0x1920>
    d->_Pacemaker_local__Atrig2 = 1;
  802454:	e0bffc17 	ldw	r2,-16(fp)
  802458:	00c00044 	movi	r3,1
  80245c:	10c01985 	stb	r3,102(r2)
  }
  d->_g17 = d->_pg92;
  802460:	e0bffc17 	ldw	r2,-16(fp)
  802464:	10c04c03 	ldbu	r3,304(r2)
  802468:	e0bffc17 	ldw	r2,-16(fp)
  80246c:	10c01d85 	stb	r3,118(r2)
  d->_g26 = !d->_g17;
  802470:	e0bffc17 	ldw	r2,-16(fp)
  802474:	10801d83 	ldbu	r2,118(r2)
  802478:	10803fcc 	andi	r2,r2,255
  80247c:	1080201c 	xori	r2,r2,128
  802480:	10bfe004 	addi	r2,r2,-128
  802484:	1005003a 	cmpeq	r2,r2,zero
  802488:	1007883a 	mov	r3,r2
  80248c:	e0bffc17 	ldw	r2,-16(fp)
  802490:	10c01f05 	stb	r3,124(r2)
  if (d->_g17) {
  802494:	e0bffc17 	ldw	r2,-16(fp)
  802498:	10801d83 	ldbu	r2,118(r2)
  80249c:	10803fcc 	andi	r2,r2,255
  8024a0:	1080201c 	xori	r2,r2,128
  8024a4:	10bfe004 	addi	r2,r2,-128
  8024a8:	10000626 	beq	r2,zero,8024c4 <logic+0x1984>
    d->LRI |= 1;
  8024ac:	e0bffc17 	ldw	r2,-16(fp)
  8024b0:	10801883 	ldbu	r2,98(r2)
  8024b4:	10800054 	ori	r2,r2,1
  8024b8:	1007883a 	mov	r3,r2
  8024bc:	e0bffc17 	ldw	r2,-16(fp)
  8024c0:	10c01885 	stb	r3,98(r2)
  }
  d->_g5 = d->_pg53;
  8024c4:	e0bffc17 	ldw	r2,-16(fp)
  8024c8:	10c04c43 	ldbu	r3,305(r2)
  8024cc:	e0bffc17 	ldw	r2,-16(fp)
  8024d0:	10c01b85 	stb	r3,110(r2)
  if (d->_g5) {
  8024d4:	e0bffc17 	ldw	r2,-16(fp)
  8024d8:	10801b83 	ldbu	r2,110(r2)
  8024dc:	10803fcc 	andi	r2,r2,255
  8024e0:	1080201c 	xori	r2,r2,128
  8024e4:	10bfe004 	addi	r2,r2,-128
  8024e8:	10000626 	beq	r2,zero,802504 <logic+0x19c4>
    d->VRP |= 1;
  8024ec:	e0bffc17 	ldw	r2,-16(fp)
  8024f0:	10801803 	ldbu	r2,96(r2)
  8024f4:	10800054 	ori	r2,r2,1
  8024f8:	1007883a 	mov	r3,r2
  8024fc:	e0bffc17 	ldw	r2,-16(fp)
  802500:	10c01805 	stb	r3,96(r2)
  }
  d->_g129 = d->_pg134;
  802504:	e0bffc17 	ldw	r2,-16(fp)
  802508:	10c04c83 	ldbu	r3,306(r2)
  80250c:	e0bffc17 	ldw	r2,-16(fp)
  802510:	10c02fc5 	stb	r3,191(r2)
  d->_cg129 = (d->VS || d->VP) && !d->VRP;
  802514:	e0bffc17 	ldw	r2,-16(fp)
  802518:	10800043 	ldbu	r2,1(r2)
  80251c:	10803fcc 	andi	r2,r2,255
  802520:	1080201c 	xori	r2,r2,128
  802524:	10bfe004 	addi	r2,r2,-128
  802528:	1000061e 	bne	r2,zero,802544 <logic+0x1a04>
  80252c:	e0bffc17 	ldw	r2,-16(fp)
  802530:	10801743 	ldbu	r2,93(r2)
  802534:	10803fcc 	andi	r2,r2,255
  802538:	1080201c 	xori	r2,r2,128
  80253c:	10bfe004 	addi	r2,r2,-128
  802540:	10000826 	beq	r2,zero,802564 <logic+0x1a24>
  802544:	e0bffc17 	ldw	r2,-16(fp)
  802548:	10801803 	ldbu	r2,96(r2)
  80254c:	10803fcc 	andi	r2,r2,255
  802550:	1080201c 	xori	r2,r2,128
  802554:	10bfe004 	addi	r2,r2,-128
  802558:	1000021e 	bne	r2,zero,802564 <logic+0x1a24>
  80255c:	00800044 	movi	r2,1
  802560:	00000106 	br	802568 <logic+0x1a28>
  802564:	0005883a 	mov	r2,zero
  802568:	1007883a 	mov	r3,r2
  80256c:	e0bffc17 	ldw	r2,-16(fp)
  802570:	10c041c5 	stb	r3,263(r2)
  d->_g130 = d->_g129 && d->_cg129;
  802574:	e0bffc17 	ldw	r2,-16(fp)
  802578:	10802fc3 	ldbu	r2,191(r2)
  80257c:	10803fcc 	andi	r2,r2,255
  802580:	1080201c 	xori	r2,r2,128
  802584:	10bfe004 	addi	r2,r2,-128
  802588:	10000826 	beq	r2,zero,8025ac <logic+0x1a6c>
  80258c:	e0bffc17 	ldw	r2,-16(fp)
  802590:	108041c3 	ldbu	r2,263(r2)
  802594:	10803fcc 	andi	r2,r2,255
  802598:	1080201c 	xori	r2,r2,128
  80259c:	10bfe004 	addi	r2,r2,-128
  8025a0:	10000226 	beq	r2,zero,8025ac <logic+0x1a6c>
  8025a4:	00800044 	movi	r2,1
  8025a8:	00000106 	br	8025b0 <logic+0x1a70>
  8025ac:	0005883a 	mov	r2,zero
  8025b0:	1007883a 	mov	r3,r2
  8025b4:	e0bffc17 	ldw	r2,-16(fp)
  8025b8:	10c03005 	stb	r3,192(r2)
  if (d->_g130) {
  8025bc:	e0bffc17 	ldw	r2,-16(fp)
  8025c0:	10803003 	ldbu	r2,192(r2)
  8025c4:	10803fcc 	andi	r2,r2,255
  8025c8:	1080201c 	xori	r2,r2,128
  8025cc:	10bfe004 	addi	r2,r2,-128
  8025d0:	10000326 	beq	r2,zero,8025e0 <logic+0x1aa0>
    d->_Pacemaker_local__Atrig6 = 1;
  8025d4:	e0bffc17 	ldw	r2,-16(fp)
  8025d8:	00c00044 	movi	r3,1
  8025dc:	10c01a85 	stb	r3,106(r2)
  }
  d->_g183 = d->_pg143_e1;
  8025e0:	e0bffc17 	ldw	r2,-16(fp)
  8025e4:	10c04cc3 	ldbu	r3,307(r2)
  8025e8:	e0bffc17 	ldw	r2,-16(fp)
  8025ec:	10c03585 	stb	r3,214(r2)
  if (d->_g183) {
  8025f0:	e0bffc17 	ldw	r2,-16(fp)
  8025f4:	10803583 	ldbu	r2,214(r2)
  8025f8:	10803fcc 	andi	r2,r2,255
  8025fc:	1080201c 	xori	r2,r2,128
  802600:	10bfe004 	addi	r2,r2,-128
  802604:	10001226 	beq	r2,zero,802650 <logic+0x1b10>
    d->_region4_LRI_cLRI += d->deltaT;
  802608:	e13ffc17 	ldw	r4,-16(fp)
  80260c:	20800f17 	ldw	r2,60(r4)
  802610:	20c01017 	ldw	r3,64(r4)
  802614:	e1bffc17 	ldw	r6,-16(fp)
  802618:	31001317 	ldw	r4,76(r6)
  80261c:	31401417 	ldw	r5,80(r6)
  802620:	200d883a 	mov	r6,r4
  802624:	280f883a 	mov	r7,r5
  802628:	1009883a 	mov	r4,r2
  80262c:	180b883a 	mov	r5,r3
  802630:	0805c080 	call	805c08 <__adddf3>
  802634:	1009883a 	mov	r4,r2
  802638:	180b883a 	mov	r5,r3
  80263c:	2005883a 	mov	r2,r4
  802640:	2807883a 	mov	r3,r5
  802644:	e13ffc17 	ldw	r4,-16(fp)
  802648:	20800f15 	stw	r2,60(r4)
  80264c:	20c01015 	stw	r3,64(r4)
  }
  d->_g132 = d->_g129 && !d->_cg129;
  802650:	e0bffc17 	ldw	r2,-16(fp)
  802654:	10802fc3 	ldbu	r2,191(r2)
  802658:	10803fcc 	andi	r2,r2,255
  80265c:	1080201c 	xori	r2,r2,128
  802660:	10bfe004 	addi	r2,r2,-128
  802664:	10000826 	beq	r2,zero,802688 <logic+0x1b48>
  802668:	e0bffc17 	ldw	r2,-16(fp)
  80266c:	108041c3 	ldbu	r2,263(r2)
  802670:	10803fcc 	andi	r2,r2,255
  802674:	1080201c 	xori	r2,r2,128
  802678:	10bfe004 	addi	r2,r2,-128
  80267c:	1000021e 	bne	r2,zero,802688 <logic+0x1b48>
  802680:	00800044 	movi	r2,1
  802684:	00000106 	br	80268c <logic+0x1b4c>
  802688:	0005883a 	mov	r2,zero
  80268c:	1007883a 	mov	r3,r2
  802690:	e0bffc17 	ldw	r2,-16(fp)
  802694:	10c03085 	stb	r3,194(r2)
  d->_cg132 = d->_region4_LRI_cLRI >= d->LRI_Constraint;
  802698:	e0bffc17 	ldw	r2,-16(fp)
  80269c:	14000f17 	ldw	r16,60(r2)
  8026a0:	14401017 	ldw	r17,64(r2)
  8026a4:	e0bffc17 	ldw	r2,-16(fp)
  8026a8:	10800517 	ldw	r2,20(r2)
  8026ac:	1009883a 	mov	r4,r2
  8026b0:	0806f800 	call	806f80 <__floatsidf>
  8026b4:	1009883a 	mov	r4,r2
  8026b8:	180b883a 	mov	r5,r3
  8026bc:	04800044 	movi	r18,1
  8026c0:	200d883a 	mov	r6,r4
  8026c4:	280f883a 	mov	r7,r5
  8026c8:	8009883a 	mov	r4,r16
  8026cc:	880b883a 	mov	r5,r17
  8026d0:	08064b40 	call	8064b4 <__gedf2>
  8026d4:	1000010e 	bge	r2,zero,8026dc <logic+0x1b9c>
  8026d8:	0025883a 	mov	r18,zero
  8026dc:	9007883a 	mov	r3,r18
  8026e0:	e0bffc17 	ldw	r2,-16(fp)
  8026e4:	10c04185 	stb	r3,262(r2)
  d->_g133 = d->_g132 && d->_cg132;
  8026e8:	e0bffc17 	ldw	r2,-16(fp)
  8026ec:	10803083 	ldbu	r2,194(r2)
  8026f0:	10803fcc 	andi	r2,r2,255
  8026f4:	1080201c 	xori	r2,r2,128
  8026f8:	10bfe004 	addi	r2,r2,-128
  8026fc:	10000826 	beq	r2,zero,802720 <logic+0x1be0>
  802700:	e0bffc17 	ldw	r2,-16(fp)
  802704:	10804183 	ldbu	r2,262(r2)
  802708:	10803fcc 	andi	r2,r2,255
  80270c:	1080201c 	xori	r2,r2,128
  802710:	10bfe004 	addi	r2,r2,-128
  802714:	10000226 	beq	r2,zero,802720 <logic+0x1be0>
  802718:	00800044 	movi	r2,1
  80271c:	00000106 	br	802724 <logic+0x1be4>
  802720:	0005883a 	mov	r2,zero
  802724:	1007883a 	mov	r3,r2
  802728:	e0bffc17 	ldw	r2,-16(fp)
  80272c:	10c030c5 	stb	r3,195(r2)
  if (d->_g133) {
  802730:	e0bffc17 	ldw	r2,-16(fp)
  802734:	108030c3 	ldbu	r2,195(r2)
  802738:	10803fcc 	andi	r2,r2,255
  80273c:	1080201c 	xori	r2,r2,128
  802740:	10bfe004 	addi	r2,r2,-128
  802744:	10000326 	beq	r2,zero,802754 <logic+0x1c14>
    d->_Pacemaker_local__Atrig7 = 1;
  802748:	e0bffc17 	ldw	r2,-16(fp)
  80274c:	00c00044 	movi	r3,1
  802750:	10c01ac5 	stb	r3,107(r2)
  }
  d->_cg114 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  802754:	e0bffc17 	ldw	r2,-16(fp)
  802758:	10801a83 	ldbu	r2,106(r2)
  80275c:	10803fcc 	andi	r2,r2,255
  802760:	1080201c 	xori	r2,r2,128
  802764:	10bfe004 	addi	r2,r2,-128
  802768:	1000061e 	bne	r2,zero,802784 <logic+0x1c44>
  80276c:	e0bffc17 	ldw	r2,-16(fp)
  802770:	10801ac3 	ldbu	r2,107(r2)
  802774:	10803fcc 	andi	r2,r2,255
  802778:	1080201c 	xori	r2,r2,128
  80277c:	10bfe004 	addi	r2,r2,-128
  802780:	10000226 	beq	r2,zero,80278c <logic+0x1c4c>
  802784:	00800044 	movi	r2,1
  802788:	00000106 	br	802790 <logic+0x1c50>
  80278c:	0005883a 	mov	r2,zero
  802790:	1007883a 	mov	r3,r2
  802794:	e0bffc17 	ldw	r2,-16(fp)
  802798:	10c03fc5 	stb	r3,255(r2)
  d->_g115 = d->_g17 && d->_cg114;
  80279c:	e0bffc17 	ldw	r2,-16(fp)
  8027a0:	10801d83 	ldbu	r2,118(r2)
  8027a4:	10803fcc 	andi	r2,r2,255
  8027a8:	1080201c 	xori	r2,r2,128
  8027ac:	10bfe004 	addi	r2,r2,-128
  8027b0:	10000826 	beq	r2,zero,8027d4 <logic+0x1c94>
  8027b4:	e0bffc17 	ldw	r2,-16(fp)
  8027b8:	10803fc3 	ldbu	r2,255(r2)
  8027bc:	10803fcc 	andi	r2,r2,255
  8027c0:	1080201c 	xori	r2,r2,128
  8027c4:	10bfe004 	addi	r2,r2,-128
  8027c8:	10000226 	beq	r2,zero,8027d4 <logic+0x1c94>
  8027cc:	00800044 	movi	r2,1
  8027d0:	00000106 	br	8027d8 <logic+0x1c98>
  8027d4:	0005883a 	mov	r2,zero
  8027d8:	1007883a 	mov	r3,r2
  8027dc:	e0bffc17 	ldw	r2,-16(fp)
  8027e0:	10c02d85 	stb	r3,182(r2)
  d->_g125 = d->_pg82;
  8027e4:	e0bffc17 	ldw	r2,-16(fp)
  8027e8:	10c04d03 	ldbu	r3,308(r2)
  8027ec:	e0bffc17 	ldw	r2,-16(fp)
  8027f0:	10c02f45 	stb	r3,189(r2)
  d->_g119 = d->_pg94;
  8027f4:	e0bffc17 	ldw	r2,-16(fp)
  8027f8:	10c04d43 	ldbu	r3,309(r2)
  8027fc:	e0bffc17 	ldw	r2,-16(fp)
  802800:	10c02e05 	stb	r3,184(r2)
  d->_g122_e2 = !(d->_g125 || d->_g119);
  802804:	e0bffc17 	ldw	r2,-16(fp)
  802808:	10802f43 	ldbu	r2,189(r2)
  80280c:	10803fcc 	andi	r2,r2,255
  802810:	1080201c 	xori	r2,r2,128
  802814:	10bfe004 	addi	r2,r2,-128
  802818:	1000081e 	bne	r2,zero,80283c <logic+0x1cfc>
  80281c:	e0bffc17 	ldw	r2,-16(fp)
  802820:	10802e03 	ldbu	r2,184(r2)
  802824:	10803fcc 	andi	r2,r2,255
  802828:	1080201c 	xori	r2,r2,128
  80282c:	10bfe004 	addi	r2,r2,-128
  802830:	1000021e 	bne	r2,zero,80283c <logic+0x1cfc>
  802834:	00800044 	movi	r2,1
  802838:	00000106 	br	802840 <logic+0x1d00>
  80283c:	0005883a 	mov	r2,zero
  802840:	1007883a 	mov	r3,r2
  802844:	e0bffc17 	ldw	r2,-16(fp)
  802848:	10c046c5 	stb	r3,283(r2)
  d->_g125 = d->_g119 || d->_g125;
  80284c:	e0bffc17 	ldw	r2,-16(fp)
  802850:	10802e03 	ldbu	r2,184(r2)
  802854:	10803fcc 	andi	r2,r2,255
  802858:	1080201c 	xori	r2,r2,128
  80285c:	10bfe004 	addi	r2,r2,-128
  802860:	1000061e 	bne	r2,zero,80287c <logic+0x1d3c>
  802864:	e0bffc17 	ldw	r2,-16(fp)
  802868:	10802f43 	ldbu	r2,189(r2)
  80286c:	10803fcc 	andi	r2,r2,255
  802870:	1080201c 	xori	r2,r2,128
  802874:	10bfe004 	addi	r2,r2,-128
  802878:	10000226 	beq	r2,zero,802884 <logic+0x1d44>
  80287c:	00800044 	movi	r2,1
  802880:	00000106 	br	802888 <logic+0x1d48>
  802884:	0005883a 	mov	r2,zero
  802888:	1007883a 	mov	r3,r2
  80288c:	e0bffc17 	ldw	r2,-16(fp)
  802890:	10c02f45 	stb	r3,189(r2)
  d->_cg120 = d->_region4_LRI_cLRI < d->LRI_Constraint;
  802894:	e0bffc17 	ldw	r2,-16(fp)
  802898:	14000f17 	ldw	r16,60(r2)
  80289c:	14401017 	ldw	r17,64(r2)
  8028a0:	e0bffc17 	ldw	r2,-16(fp)
  8028a4:	10800517 	ldw	r2,20(r2)
  8028a8:	1009883a 	mov	r4,r2
  8028ac:	0806f800 	call	806f80 <__floatsidf>
  8028b0:	1009883a 	mov	r4,r2
  8028b4:	180b883a 	mov	r5,r3
  8028b8:	04800044 	movi	r18,1
  8028bc:	200d883a 	mov	r6,r4
  8028c0:	280f883a 	mov	r7,r5
  8028c4:	8009883a 	mov	r4,r16
  8028c8:	880b883a 	mov	r5,r17
  8028cc:	08065900 	call	806590 <__ledf2>
  8028d0:	10000116 	blt	r2,zero,8028d8 <logic+0x1d98>
  8028d4:	0025883a 	mov	r18,zero
  8028d8:	9007883a 	mov	r3,r18
  8028dc:	e0bffc17 	ldw	r2,-16(fp)
  8028e0:	10c040c5 	stb	r3,259(r2)
  d->_g119 = d->_g125 && d->_cg120;
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	10802f43 	ldbu	r2,189(r2)
  8028ec:	10803fcc 	andi	r2,r2,255
  8028f0:	1080201c 	xori	r2,r2,128
  8028f4:	10bfe004 	addi	r2,r2,-128
  8028f8:	10000826 	beq	r2,zero,80291c <logic+0x1ddc>
  8028fc:	e0bffc17 	ldw	r2,-16(fp)
  802900:	108040c3 	ldbu	r2,259(r2)
  802904:	10803fcc 	andi	r2,r2,255
  802908:	1080201c 	xori	r2,r2,128
  80290c:	10bfe004 	addi	r2,r2,-128
  802910:	10000226 	beq	r2,zero,80291c <logic+0x1ddc>
  802914:	00800044 	movi	r2,1
  802918:	00000106 	br	802920 <logic+0x1de0>
  80291c:	0005883a 	mov	r2,zero
  802920:	1007883a 	mov	r3,r2
  802924:	e0bffc17 	ldw	r2,-16(fp)
  802928:	10c02e05 	stb	r3,184(r2)
  if (d->_g119) {
  80292c:	e0bffc17 	ldw	r2,-16(fp)
  802930:	10802e03 	ldbu	r2,184(r2)
  802934:	10803fcc 	andi	r2,r2,255
  802938:	1080201c 	xori	r2,r2,128
  80293c:	10bfe004 	addi	r2,r2,-128
  802940:	10003426 	beq	r2,zero,802a14 <logic+0x1ed4>
    d->sleepT = (d->sleepT < (d->LRI_Constraint - d->_region4_LRI_cLRI)) ? d->sleepT : (d->LRI_Constraint - d->_region4_LRI_cLRI);
  802944:	e0bffc17 	ldw	r2,-16(fp)
  802948:	14001517 	ldw	r16,84(r2)
  80294c:	14401617 	ldw	r17,88(r2)
  802950:	e0bffc17 	ldw	r2,-16(fp)
  802954:	10800517 	ldw	r2,20(r2)
  802958:	1009883a 	mov	r4,r2
  80295c:	0806f800 	call	806f80 <__floatsidf>
  802960:	1011883a 	mov	r8,r2
  802964:	1813883a 	mov	r9,r3
  802968:	e13ffc17 	ldw	r4,-16(fp)
  80296c:	20800f17 	ldw	r2,60(r4)
  802970:	20c01017 	ldw	r3,64(r4)
  802974:	100d883a 	mov	r6,r2
  802978:	180f883a 	mov	r7,r3
  80297c:	4009883a 	mov	r4,r8
  802980:	480b883a 	mov	r5,r9
  802984:	08066840 	call	806684 <__subdf3>
  802988:	1009883a 	mov	r4,r2
  80298c:	180b883a 	mov	r5,r3
  802990:	2005883a 	mov	r2,r4
  802994:	2807883a 	mov	r3,r5
  802998:	100d883a 	mov	r6,r2
  80299c:	180f883a 	mov	r7,r3
  8029a0:	8009883a 	mov	r4,r16
  8029a4:	880b883a 	mov	r5,r17
  8029a8:	08065900 	call	806590 <__ledf2>
  8029ac:	1000040e 	bge	r2,zero,8029c0 <logic+0x1e80>
  8029b0:	e13ffc17 	ldw	r4,-16(fp)
  8029b4:	20801517 	ldw	r2,84(r4)
  8029b8:	20c01617 	ldw	r3,88(r4)
  8029bc:	00001206 	br	802a08 <logic+0x1ec8>
  8029c0:	e0bffc17 	ldw	r2,-16(fp)
  8029c4:	10800517 	ldw	r2,20(r2)
  8029c8:	1009883a 	mov	r4,r2
  8029cc:	0806f800 	call	806f80 <__floatsidf>
  8029d0:	1011883a 	mov	r8,r2
  8029d4:	1813883a 	mov	r9,r3
  8029d8:	e13ffc17 	ldw	r4,-16(fp)
  8029dc:	20800f17 	ldw	r2,60(r4)
  8029e0:	20c01017 	ldw	r3,64(r4)
  8029e4:	100d883a 	mov	r6,r2
  8029e8:	180f883a 	mov	r7,r3
  8029ec:	4009883a 	mov	r4,r8
  8029f0:	480b883a 	mov	r5,r9
  8029f4:	08066840 	call	806684 <__subdf3>
  8029f8:	1009883a 	mov	r4,r2
  8029fc:	180b883a 	mov	r5,r3
  802a00:	2005883a 	mov	r2,r4
  802a04:	2807883a 	mov	r3,r5
  802a08:	e13ffc17 	ldw	r4,-16(fp)
  802a0c:	20801515 	stw	r2,84(r4)
  802a10:	20c01615 	stw	r3,88(r4)
  }
  d->_cg121 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  802a14:	e0bffc17 	ldw	r2,-16(fp)
  802a18:	10801a83 	ldbu	r2,106(r2)
  802a1c:	10803fcc 	andi	r2,r2,255
  802a20:	1080201c 	xori	r2,r2,128
  802a24:	10bfe004 	addi	r2,r2,-128
  802a28:	1000061e 	bne	r2,zero,802a44 <logic+0x1f04>
  802a2c:	e0bffc17 	ldw	r2,-16(fp)
  802a30:	10801ac3 	ldbu	r2,107(r2)
  802a34:	10803fcc 	andi	r2,r2,255
  802a38:	1080201c 	xori	r2,r2,128
  802a3c:	10bfe004 	addi	r2,r2,-128
  802a40:	10000226 	beq	r2,zero,802a4c <logic+0x1f0c>
  802a44:	00800044 	movi	r2,1
  802a48:	00000106 	br	802a50 <logic+0x1f10>
  802a4c:	0005883a 	mov	r2,zero
  802a50:	1007883a 	mov	r3,r2
  802a54:	e0bffc17 	ldw	r2,-16(fp)
  802a58:	10c04085 	stb	r3,258(r2)
  d->_g120 = d->_g125 && !d->_cg120;
  802a5c:	e0bffc17 	ldw	r2,-16(fp)
  802a60:	10802f43 	ldbu	r2,189(r2)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1080201c 	xori	r2,r2,128
  802a6c:	10bfe004 	addi	r2,r2,-128
  802a70:	10000826 	beq	r2,zero,802a94 <logic+0x1f54>
  802a74:	e0bffc17 	ldw	r2,-16(fp)
  802a78:	108040c3 	ldbu	r2,259(r2)
  802a7c:	10803fcc 	andi	r2,r2,255
  802a80:	1080201c 	xori	r2,r2,128
  802a84:	10bfe004 	addi	r2,r2,-128
  802a88:	1000021e 	bne	r2,zero,802a94 <logic+0x1f54>
  802a8c:	00800044 	movi	r2,1
  802a90:	00000106 	br	802a98 <logic+0x1f58>
  802a94:	0005883a 	mov	r2,zero
  802a98:	1007883a 	mov	r3,r2
  802a9c:	e0bffc17 	ldw	r2,-16(fp)
  802aa0:	10c02e45 	stb	r3,185(r2)
  d->_cg123 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  802aa4:	e0bffc17 	ldw	r2,-16(fp)
  802aa8:	10801a83 	ldbu	r2,106(r2)
  802aac:	10803fcc 	andi	r2,r2,255
  802ab0:	1080201c 	xori	r2,r2,128
  802ab4:	10bfe004 	addi	r2,r2,-128
  802ab8:	1000061e 	bne	r2,zero,802ad4 <logic+0x1f94>
  802abc:	e0bffc17 	ldw	r2,-16(fp)
  802ac0:	10801ac3 	ldbu	r2,107(r2)
  802ac4:	10803fcc 	andi	r2,r2,255
  802ac8:	1080201c 	xori	r2,r2,128
  802acc:	10bfe004 	addi	r2,r2,-128
  802ad0:	10000226 	beq	r2,zero,802adc <logic+0x1f9c>
  802ad4:	00800044 	movi	r2,1
  802ad8:	00000106 	br	802ae0 <logic+0x1fa0>
  802adc:	0005883a 	mov	r2,zero
  802ae0:	1007883a 	mov	r3,r2
  802ae4:	e0bffc17 	ldw	r2,-16(fp)
  802ae8:	10c04105 	stb	r3,260(r2)
  d->_g122 = d->_g119 && d->_cg121 || d->_g120 && d->_cg123;
  802aec:	e0bffc17 	ldw	r2,-16(fp)
  802af0:	10802e03 	ldbu	r2,184(r2)
  802af4:	10803fcc 	andi	r2,r2,255
  802af8:	1080201c 	xori	r2,r2,128
  802afc:	10bfe004 	addi	r2,r2,-128
  802b00:	10000626 	beq	r2,zero,802b1c <logic+0x1fdc>
  802b04:	e0bffc17 	ldw	r2,-16(fp)
  802b08:	10804083 	ldbu	r2,258(r2)
  802b0c:	10803fcc 	andi	r2,r2,255
  802b10:	1080201c 	xori	r2,r2,128
  802b14:	10bfe004 	addi	r2,r2,-128
  802b18:	10000c1e 	bne	r2,zero,802b4c <logic+0x200c>
  802b1c:	e0bffc17 	ldw	r2,-16(fp)
  802b20:	10802e43 	ldbu	r2,185(r2)
  802b24:	10803fcc 	andi	r2,r2,255
  802b28:	1080201c 	xori	r2,r2,128
  802b2c:	10bfe004 	addi	r2,r2,-128
  802b30:	10000826 	beq	r2,zero,802b54 <logic+0x2014>
  802b34:	e0bffc17 	ldw	r2,-16(fp)
  802b38:	10804103 	ldbu	r2,260(r2)
  802b3c:	10803fcc 	andi	r2,r2,255
  802b40:	1080201c 	xori	r2,r2,128
  802b44:	10bfe004 	addi	r2,r2,-128
  802b48:	10000226 	beq	r2,zero,802b54 <logic+0x2014>
  802b4c:	00800044 	movi	r2,1
  802b50:	00000106 	br	802b58 <logic+0x2018>
  802b54:	0005883a 	mov	r2,zero
  802b58:	1007883a 	mov	r3,r2
  802b5c:	e0bffc17 	ldw	r2,-16(fp)
  802b60:	10c02ec5 	stb	r3,187(r2)
  d->_g129 = !d->_g129;
  802b64:	e0bffc17 	ldw	r2,-16(fp)
  802b68:	10802fc3 	ldbu	r2,191(r2)
  802b6c:	10803fcc 	andi	r2,r2,255
  802b70:	1080201c 	xori	r2,r2,128
  802b74:	10bfe004 	addi	r2,r2,-128
  802b78:	1005003a 	cmpeq	r2,r2,zero
  802b7c:	1007883a 	mov	r3,r2
  802b80:	e0bffc17 	ldw	r2,-16(fp)
  802b84:	10c02fc5 	stb	r3,191(r2)
  d->_g130 = d->_g130 || d->_g133;
  802b88:	e0bffc17 	ldw	r2,-16(fp)
  802b8c:	10803003 	ldbu	r2,192(r2)
  802b90:	10803fcc 	andi	r2,r2,255
  802b94:	1080201c 	xori	r2,r2,128
  802b98:	10bfe004 	addi	r2,r2,-128
  802b9c:	1000061e 	bne	r2,zero,802bb8 <logic+0x2078>
  802ba0:	e0bffc17 	ldw	r2,-16(fp)
  802ba4:	108030c3 	ldbu	r2,195(r2)
  802ba8:	10803fcc 	andi	r2,r2,255
  802bac:	1080201c 	xori	r2,r2,128
  802bb0:	10bfe004 	addi	r2,r2,-128
  802bb4:	10000226 	beq	r2,zero,802bc0 <logic+0x2080>
  802bb8:	00800044 	movi	r2,1
  802bbc:	00000106 	br	802bc4 <logic+0x2084>
  802bc0:	0005883a 	mov	r2,zero
  802bc4:	1007883a 	mov	r3,r2
  802bc8:	e0bffc17 	ldw	r2,-16(fp)
  802bcc:	10c03005 	stb	r3,192(r2)
  d->_g133 = (d->_g26 || d->_g115) && (d->_g122_e2 || d->_g122) && (d->_g129 || d->_g130) && (d->_g115 || d->_g122 || d->_g130);
  802bd0:	e0bffc17 	ldw	r2,-16(fp)
  802bd4:	10801f03 	ldbu	r2,124(r2)
  802bd8:	10803fcc 	andi	r2,r2,255
  802bdc:	1080201c 	xori	r2,r2,128
  802be0:	10bfe004 	addi	r2,r2,-128
  802be4:	1000061e 	bne	r2,zero,802c00 <logic+0x20c0>
  802be8:	e0bffc17 	ldw	r2,-16(fp)
  802bec:	10802d83 	ldbu	r2,182(r2)
  802bf0:	10803fcc 	andi	r2,r2,255
  802bf4:	1080201c 	xori	r2,r2,128
  802bf8:	10bfe004 	addi	r2,r2,-128
  802bfc:	10002c26 	beq	r2,zero,802cb0 <logic+0x2170>
  802c00:	e0bffc17 	ldw	r2,-16(fp)
  802c04:	108046c3 	ldbu	r2,283(r2)
  802c08:	10803fcc 	andi	r2,r2,255
  802c0c:	1080201c 	xori	r2,r2,128
  802c10:	10bfe004 	addi	r2,r2,-128
  802c14:	1000061e 	bne	r2,zero,802c30 <logic+0x20f0>
  802c18:	e0bffc17 	ldw	r2,-16(fp)
  802c1c:	10802ec3 	ldbu	r2,187(r2)
  802c20:	10803fcc 	andi	r2,r2,255
  802c24:	1080201c 	xori	r2,r2,128
  802c28:	10bfe004 	addi	r2,r2,-128
  802c2c:	10002026 	beq	r2,zero,802cb0 <logic+0x2170>
  802c30:	e0bffc17 	ldw	r2,-16(fp)
  802c34:	10802fc3 	ldbu	r2,191(r2)
  802c38:	10803fcc 	andi	r2,r2,255
  802c3c:	1080201c 	xori	r2,r2,128
  802c40:	10bfe004 	addi	r2,r2,-128
  802c44:	1000061e 	bne	r2,zero,802c60 <logic+0x2120>
  802c48:	e0bffc17 	ldw	r2,-16(fp)
  802c4c:	10803003 	ldbu	r2,192(r2)
  802c50:	10803fcc 	andi	r2,r2,255
  802c54:	1080201c 	xori	r2,r2,128
  802c58:	10bfe004 	addi	r2,r2,-128
  802c5c:	10001426 	beq	r2,zero,802cb0 <logic+0x2170>
  802c60:	e0bffc17 	ldw	r2,-16(fp)
  802c64:	10802d83 	ldbu	r2,182(r2)
  802c68:	10803fcc 	andi	r2,r2,255
  802c6c:	1080201c 	xori	r2,r2,128
  802c70:	10bfe004 	addi	r2,r2,-128
  802c74:	10000c1e 	bne	r2,zero,802ca8 <logic+0x2168>
  802c78:	e0bffc17 	ldw	r2,-16(fp)
  802c7c:	10802ec3 	ldbu	r2,187(r2)
  802c80:	10803fcc 	andi	r2,r2,255
  802c84:	1080201c 	xori	r2,r2,128
  802c88:	10bfe004 	addi	r2,r2,-128
  802c8c:	1000061e 	bne	r2,zero,802ca8 <logic+0x2168>
  802c90:	e0bffc17 	ldw	r2,-16(fp)
  802c94:	10803003 	ldbu	r2,192(r2)
  802c98:	10803fcc 	andi	r2,r2,255
  802c9c:	1080201c 	xori	r2,r2,128
  802ca0:	10bfe004 	addi	r2,r2,-128
  802ca4:	10000226 	beq	r2,zero,802cb0 <logic+0x2170>
  802ca8:	00800044 	movi	r2,1
  802cac:	00000106 	br	802cb4 <logic+0x2174>
  802cb0:	0005883a 	mov	r2,zero
  802cb4:	1007883a 	mov	r3,r2
  802cb8:	e0bffc17 	ldw	r2,-16(fp)
  802cbc:	10c030c5 	stb	r3,195(r2)
  d->_cg134 = d->_Pacemaker_local__Atrig6;
  802cc0:	e0bffc17 	ldw	r2,-16(fp)
  802cc4:	10c01a83 	ldbu	r3,106(r2)
  802cc8:	e0bffc17 	ldw	r2,-16(fp)
  802ccc:	10c03f45 	stb	r3,253(r2)
  d->_g122 = d->_g133 && !d->_cg134;
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	108030c3 	ldbu	r2,195(r2)
  802cd8:	10803fcc 	andi	r2,r2,255
  802cdc:	1080201c 	xori	r2,r2,128
  802ce0:	10bfe004 	addi	r2,r2,-128
  802ce4:	10000826 	beq	r2,zero,802d08 <logic+0x21c8>
  802ce8:	e0bffc17 	ldw	r2,-16(fp)
  802cec:	10803f43 	ldbu	r2,253(r2)
  802cf0:	10803fcc 	andi	r2,r2,255
  802cf4:	1080201c 	xori	r2,r2,128
  802cf8:	10bfe004 	addi	r2,r2,-128
  802cfc:	1000021e 	bne	r2,zero,802d08 <logic+0x21c8>
  802d00:	00800044 	movi	r2,1
  802d04:	00000106 	br	802d0c <logic+0x21cc>
  802d08:	0005883a 	mov	r2,zero
  802d0c:	1007883a 	mov	r3,r2
  802d10:	e0bffc17 	ldw	r2,-16(fp)
  802d14:	10c02ec5 	stb	r3,187(r2)
  if (d->_g122) {
  802d18:	e0bffc17 	ldw	r2,-16(fp)
  802d1c:	10802ec3 	ldbu	r2,187(r2)
  802d20:	10803fcc 	andi	r2,r2,255
  802d24:	1080201c 	xori	r2,r2,128
  802d28:	10bfe004 	addi	r2,r2,-128
  802d2c:	10000626 	beq	r2,zero,802d48 <logic+0x2208>
    d->VP |= 1;
  802d30:	e0bffc17 	ldw	r2,-16(fp)
  802d34:	10801743 	ldbu	r2,93(r2)
  802d38:	10800054 	ori	r2,r2,1
  802d3c:	1007883a 	mov	r3,r2
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10c01745 	stb	r3,93(r2)
  }
  d->_g131_e3 = d->_pg37;
  802d48:	e0bffc17 	ldw	r2,-16(fp)
  802d4c:	10c04d83 	ldbu	r3,310(r2)
  802d50:	e0bffc17 	ldw	r2,-16(fp)
  802d54:	10c04705 	stb	r3,284(r2)
  d->_cg33 = d->VS || d->VP;
  802d58:	e0bffc17 	ldw	r2,-16(fp)
  802d5c:	10800043 	ldbu	r2,1(r2)
  802d60:	10803fcc 	andi	r2,r2,255
  802d64:	1080201c 	xori	r2,r2,128
  802d68:	10bfe004 	addi	r2,r2,-128
  802d6c:	1000061e 	bne	r2,zero,802d88 <logic+0x2248>
  802d70:	e0bffc17 	ldw	r2,-16(fp)
  802d74:	10801743 	ldbu	r2,93(r2)
  802d78:	10803fcc 	andi	r2,r2,255
  802d7c:	1080201c 	xori	r2,r2,128
  802d80:	10bfe004 	addi	r2,r2,-128
  802d84:	10000226 	beq	r2,zero,802d90 <logic+0x2250>
  802d88:	00800044 	movi	r2,1
  802d8c:	00000106 	br	802d94 <logic+0x2254>
  802d90:	0005883a 	mov	r2,zero
  802d94:	1007883a 	mov	r3,r2
  802d98:	e0bffc17 	ldw	r2,-16(fp)
  802d9c:	10c03905 	stb	r3,228(r2)
  d->_g115_e1 = d->_g131_e3 && d->_cg33;
  802da0:	e0bffc17 	ldw	r2,-16(fp)
  802da4:	10804703 	ldbu	r2,284(r2)
  802da8:	10803fcc 	andi	r2,r2,255
  802dac:	1080201c 	xori	r2,r2,128
  802db0:	10bfe004 	addi	r2,r2,-128
  802db4:	10000826 	beq	r2,zero,802dd8 <logic+0x2298>
  802db8:	e0bffc17 	ldw	r2,-16(fp)
  802dbc:	10803903 	ldbu	r2,228(r2)
  802dc0:	10803fcc 	andi	r2,r2,255
  802dc4:	1080201c 	xori	r2,r2,128
  802dc8:	10bfe004 	addi	r2,r2,-128
  802dcc:	10000226 	beq	r2,zero,802dd8 <logic+0x2298>
  802dd0:	00800044 	movi	r2,1
  802dd4:	00000106 	br	802ddc <logic+0x229c>
  802dd8:	0005883a 	mov	r2,zero
  802ddc:	1007883a 	mov	r3,r2
  802de0:	e0bffc17 	ldw	r2,-16(fp)
  802de4:	10c04685 	stb	r3,282(r2)
  if (d->_g115_e1) {
  802de8:	e0bffc17 	ldw	r2,-16(fp)
  802dec:	10804683 	ldbu	r2,282(r2)
  802df0:	10803fcc 	andi	r2,r2,255
  802df4:	1080201c 	xori	r2,r2,128
  802df8:	10bfe004 	addi	r2,r2,-128
  802dfc:	10000526 	beq	r2,zero,802e14 <logic+0x22d4>
    d->_region1_PVARP_cPVARP = 0;
  802e00:	e0bffc17 	ldw	r2,-16(fp)
  802e04:	10000915 	stw	zero,36(r2)
  802e08:	10000a15 	stw	zero,40(r2)
    d->_Pacemaker_local__Atrig2 = 0;
  802e0c:	e0bffc17 	ldw	r2,-16(fp)
  802e10:	10001985 	stb	zero,102(r2)
  }
  d->_g122_e2 = d->_g115_e1 || d->_g9;
  802e14:	e0bffc17 	ldw	r2,-16(fp)
  802e18:	10804683 	ldbu	r2,282(r2)
  802e1c:	10803fcc 	andi	r2,r2,255
  802e20:	1080201c 	xori	r2,r2,128
  802e24:	10bfe004 	addi	r2,r2,-128
  802e28:	1000061e 	bne	r2,zero,802e44 <logic+0x2304>
  802e2c:	e0bffc17 	ldw	r2,-16(fp)
  802e30:	10801c03 	ldbu	r2,112(r2)
  802e34:	10803fcc 	andi	r2,r2,255
  802e38:	1080201c 	xori	r2,r2,128
  802e3c:	10bfe004 	addi	r2,r2,-128
  802e40:	10000226 	beq	r2,zero,802e4c <logic+0x230c>
  802e44:	00800044 	movi	r2,1
  802e48:	00000106 	br	802e50 <logic+0x2310>
  802e4c:	0005883a 	mov	r2,zero
  802e50:	1007883a 	mov	r3,r2
  802e54:	e0bffc17 	ldw	r2,-16(fp)
  802e58:	10c046c5 	stb	r3,283(r2)
  d->_cg36 = d->_Pacemaker_local__Atrig2;
  802e5c:	e0bffc17 	ldw	r2,-16(fp)
  802e60:	10c01983 	ldbu	r3,102(r2)
  802e64:	e0bffc17 	ldw	r2,-16(fp)
  802e68:	10c03945 	stb	r3,229(r2)
  d->_g131 = d->_g122_e2 && !d->_cg36;
  802e6c:	e0bffc17 	ldw	r2,-16(fp)
  802e70:	108046c3 	ldbu	r2,283(r2)
  802e74:	10803fcc 	andi	r2,r2,255
  802e78:	1080201c 	xori	r2,r2,128
  802e7c:	10bfe004 	addi	r2,r2,-128
  802e80:	10000826 	beq	r2,zero,802ea4 <logic+0x2364>
  802e84:	e0bffc17 	ldw	r2,-16(fp)
  802e88:	10803943 	ldbu	r2,229(r2)
  802e8c:	10803fcc 	andi	r2,r2,255
  802e90:	1080201c 	xori	r2,r2,128
  802e94:	10bfe004 	addi	r2,r2,-128
  802e98:	1000021e 	bne	r2,zero,802ea4 <logic+0x2364>
  802e9c:	00800044 	movi	r2,1
  802ea0:	00000106 	br	802ea8 <logic+0x2368>
  802ea4:	0005883a 	mov	r2,zero
  802ea8:	1007883a 	mov	r3,r2
  802eac:	e0bffc17 	ldw	r2,-16(fp)
  802eb0:	10c03045 	stb	r3,193(r2)
  d->_g115 = !d->_g131;
  802eb4:	e0bffc17 	ldw	r2,-16(fp)
  802eb8:	10803043 	ldbu	r2,193(r2)
  802ebc:	10803fcc 	andi	r2,r2,255
  802ec0:	1080201c 	xori	r2,r2,128
  802ec4:	10bfe004 	addi	r2,r2,-128
  802ec8:	1005003a 	cmpeq	r2,r2,zero
  802ecc:	1007883a 	mov	r3,r2
  802ed0:	e0bffc17 	ldw	r2,-16(fp)
  802ed4:	10c02d85 	stb	r3,182(r2)
  d->_g39 = d->_g122_e2 && d->_cg36;
  802ed8:	e0bffc17 	ldw	r2,-16(fp)
  802edc:	108046c3 	ldbu	r2,283(r2)
  802ee0:	10803fcc 	andi	r2,r2,255
  802ee4:	1080201c 	xori	r2,r2,128
  802ee8:	10bfe004 	addi	r2,r2,-128
  802eec:	10000826 	beq	r2,zero,802f10 <logic+0x23d0>
  802ef0:	e0bffc17 	ldw	r2,-16(fp)
  802ef4:	10803943 	ldbu	r2,229(r2)
  802ef8:	10803fcc 	andi	r2,r2,255
  802efc:	1080201c 	xori	r2,r2,128
  802f00:	10bfe004 	addi	r2,r2,-128
  802f04:	10000226 	beq	r2,zero,802f10 <logic+0x23d0>
  802f08:	00800044 	movi	r2,1
  802f0c:	00000106 	br	802f14 <logic+0x23d4>
  802f10:	0005883a 	mov	r2,zero
  802f14:	1007883a 	mov	r3,r2
  802f18:	e0bffc17 	ldw	r2,-16(fp)
  802f1c:	10c02105 	stb	r3,132(r2)
  d->_g36 = d->_pg44;
  802f20:	e0bffc17 	ldw	r2,-16(fp)
  802f24:	10c04dc3 	ldbu	r3,311(r2)
  802f28:	e0bffc17 	ldw	r2,-16(fp)
  802f2c:	10c02085 	stb	r3,130(r2)
  d->_g48 = d->_pg47;
  802f30:	e0bffc17 	ldw	r2,-16(fp)
  802f34:	10c04e03 	ldbu	r3,312(r2)
  802f38:	e0bffc17 	ldw	r2,-16(fp)
  802f3c:	10c02305 	stb	r3,140(r2)
  d->_g48 = d->_g115_e1 || d->_g36 || d->_g48;
  802f40:	e0bffc17 	ldw	r2,-16(fp)
  802f44:	10804683 	ldbu	r2,282(r2)
  802f48:	10803fcc 	andi	r2,r2,255
  802f4c:	1080201c 	xori	r2,r2,128
  802f50:	10bfe004 	addi	r2,r2,-128
  802f54:	10000c1e 	bne	r2,zero,802f88 <logic+0x2448>
  802f58:	e0bffc17 	ldw	r2,-16(fp)
  802f5c:	10802083 	ldbu	r2,130(r2)
  802f60:	10803fcc 	andi	r2,r2,255
  802f64:	1080201c 	xori	r2,r2,128
  802f68:	10bfe004 	addi	r2,r2,-128
  802f6c:	1000061e 	bne	r2,zero,802f88 <logic+0x2448>
  802f70:	e0bffc17 	ldw	r2,-16(fp)
  802f74:	10802303 	ldbu	r2,140(r2)
  802f78:	10803fcc 	andi	r2,r2,255
  802f7c:	1080201c 	xori	r2,r2,128
  802f80:	10bfe004 	addi	r2,r2,-128
  802f84:	10000226 	beq	r2,zero,802f90 <logic+0x2450>
  802f88:	00800044 	movi	r2,1
  802f8c:	00000106 	br	802f94 <logic+0x2454>
  802f90:	0005883a 	mov	r2,zero
  802f94:	1007883a 	mov	r3,r2
  802f98:	e0bffc17 	ldw	r2,-16(fp)
  802f9c:	10c02305 	stb	r3,140(r2)
  d->_cg41 = d->_region1_PVARP_cPVARP < d->PVARP_Constraint;
  802fa0:	e0bffc17 	ldw	r2,-16(fp)
  802fa4:	14000917 	ldw	r16,36(r2)
  802fa8:	14400a17 	ldw	r17,40(r2)
  802fac:	e0bffc17 	ldw	r2,-16(fp)
  802fb0:	10800217 	ldw	r2,8(r2)
  802fb4:	1009883a 	mov	r4,r2
  802fb8:	0806f800 	call	806f80 <__floatsidf>
  802fbc:	1009883a 	mov	r4,r2
  802fc0:	180b883a 	mov	r5,r3
  802fc4:	04800044 	movi	r18,1
  802fc8:	200d883a 	mov	r6,r4
  802fcc:	280f883a 	mov	r7,r5
  802fd0:	8009883a 	mov	r4,r16
  802fd4:	880b883a 	mov	r5,r17
  802fd8:	08065900 	call	806590 <__ledf2>
  802fdc:	10000116 	blt	r2,zero,802fe4 <logic+0x24a4>
  802fe0:	0025883a 	mov	r18,zero
  802fe4:	9007883a 	mov	r3,r18
  802fe8:	e0bffc17 	ldw	r2,-16(fp)
  802fec:	10c03985 	stb	r3,230(r2)
  d->_g45 = d->_g48 && !d->_cg41;
  802ff0:	e0bffc17 	ldw	r2,-16(fp)
  802ff4:	10802303 	ldbu	r2,140(r2)
  802ff8:	10803fcc 	andi	r2,r2,255
  802ffc:	1080201c 	xori	r2,r2,128
  803000:	10bfe004 	addi	r2,r2,-128
  803004:	10000826 	beq	r2,zero,803028 <logic+0x24e8>
  803008:	e0bffc17 	ldw	r2,-16(fp)
  80300c:	10803983 	ldbu	r2,230(r2)
  803010:	10803fcc 	andi	r2,r2,255
  803014:	1080201c 	xori	r2,r2,128
  803018:	10bfe004 	addi	r2,r2,-128
  80301c:	1000021e 	bne	r2,zero,803028 <logic+0x24e8>
  803020:	00800044 	movi	r2,1
  803024:	00000106 	br	80302c <logic+0x24ec>
  803028:	0005883a 	mov	r2,zero
  80302c:	1007883a 	mov	r3,r2
  803030:	e0bffc17 	ldw	r2,-16(fp)
  803034:	10c02245 	stb	r3,137(r2)
  d->_cg46 = d->_Pacemaker_local__Atrig2;
  803038:	e0bffc17 	ldw	r2,-16(fp)
  80303c:	10c01983 	ldbu	r3,102(r2)
  803040:	e0bffc17 	ldw	r2,-16(fp)
  803044:	10c03a05 	stb	r3,232(r2)
  d->_g47 = d->_g45 && !d->_cg46;
  803048:	e0bffc17 	ldw	r2,-16(fp)
  80304c:	10802243 	ldbu	r2,137(r2)
  803050:	10803fcc 	andi	r2,r2,255
  803054:	1080201c 	xori	r2,r2,128
  803058:	10bfe004 	addi	r2,r2,-128
  80305c:	10000826 	beq	r2,zero,803080 <logic+0x2540>
  803060:	e0bffc17 	ldw	r2,-16(fp)
  803064:	10803a03 	ldbu	r2,232(r2)
  803068:	10803fcc 	andi	r2,r2,255
  80306c:	1080201c 	xori	r2,r2,128
  803070:	10bfe004 	addi	r2,r2,-128
  803074:	1000021e 	bne	r2,zero,803080 <logic+0x2540>
  803078:	00800044 	movi	r2,1
  80307c:	00000106 	br	803084 <logic+0x2544>
  803080:	0005883a 	mov	r2,zero
  803084:	1007883a 	mov	r3,r2
  803088:	e0bffc17 	ldw	r2,-16(fp)
  80308c:	10c022c5 	stb	r3,139(r2)
  d->_g41 = d->_g48 && d->_cg41;
  803090:	e0bffc17 	ldw	r2,-16(fp)
  803094:	10802303 	ldbu	r2,140(r2)
  803098:	10803fcc 	andi	r2,r2,255
  80309c:	1080201c 	xori	r2,r2,128
  8030a0:	10bfe004 	addi	r2,r2,-128
  8030a4:	10000826 	beq	r2,zero,8030c8 <logic+0x2588>
  8030a8:	e0bffc17 	ldw	r2,-16(fp)
  8030ac:	10803983 	ldbu	r2,230(r2)
  8030b0:	10803fcc 	andi	r2,r2,255
  8030b4:	1080201c 	xori	r2,r2,128
  8030b8:	10bfe004 	addi	r2,r2,-128
  8030bc:	10000226 	beq	r2,zero,8030c8 <logic+0x2588>
  8030c0:	00800044 	movi	r2,1
  8030c4:	00000106 	br	8030cc <logic+0x258c>
  8030c8:	0005883a 	mov	r2,zero
  8030cc:	1007883a 	mov	r3,r2
  8030d0:	e0bffc17 	ldw	r2,-16(fp)
  8030d4:	10c02145 	stb	r3,133(r2)
  if (d->_g41) {
  8030d8:	e0bffc17 	ldw	r2,-16(fp)
  8030dc:	10802143 	ldbu	r2,133(r2)
  8030e0:	10803fcc 	andi	r2,r2,255
  8030e4:	1080201c 	xori	r2,r2,128
  8030e8:	10bfe004 	addi	r2,r2,-128
  8030ec:	10003426 	beq	r2,zero,8031c0 <logic+0x2680>
    d->sleepT = (d->sleepT < (d->PVARP_Constraint - d->_region1_PVARP_cPVARP)) ? d->sleepT : (d->PVARP_Constraint - d->_region1_PVARP_cPVARP);
  8030f0:	e0bffc17 	ldw	r2,-16(fp)
  8030f4:	14001517 	ldw	r16,84(r2)
  8030f8:	14401617 	ldw	r17,88(r2)
  8030fc:	e0bffc17 	ldw	r2,-16(fp)
  803100:	10800217 	ldw	r2,8(r2)
  803104:	1009883a 	mov	r4,r2
  803108:	0806f800 	call	806f80 <__floatsidf>
  80310c:	1011883a 	mov	r8,r2
  803110:	1813883a 	mov	r9,r3
  803114:	e13ffc17 	ldw	r4,-16(fp)
  803118:	20800917 	ldw	r2,36(r4)
  80311c:	20c00a17 	ldw	r3,40(r4)
  803120:	100d883a 	mov	r6,r2
  803124:	180f883a 	mov	r7,r3
  803128:	4009883a 	mov	r4,r8
  80312c:	480b883a 	mov	r5,r9
  803130:	08066840 	call	806684 <__subdf3>
  803134:	1009883a 	mov	r4,r2
  803138:	180b883a 	mov	r5,r3
  80313c:	2005883a 	mov	r2,r4
  803140:	2807883a 	mov	r3,r5
  803144:	100d883a 	mov	r6,r2
  803148:	180f883a 	mov	r7,r3
  80314c:	8009883a 	mov	r4,r16
  803150:	880b883a 	mov	r5,r17
  803154:	08065900 	call	806590 <__ledf2>
  803158:	1000040e 	bge	r2,zero,80316c <logic+0x262c>
  80315c:	e13ffc17 	ldw	r4,-16(fp)
  803160:	20801517 	ldw	r2,84(r4)
  803164:	20c01617 	ldw	r3,88(r4)
  803168:	00001206 	br	8031b4 <logic+0x2674>
  80316c:	e0bffc17 	ldw	r2,-16(fp)
  803170:	10800217 	ldw	r2,8(r2)
  803174:	1009883a 	mov	r4,r2
  803178:	0806f800 	call	806f80 <__floatsidf>
  80317c:	1011883a 	mov	r8,r2
  803180:	1813883a 	mov	r9,r3
  803184:	e13ffc17 	ldw	r4,-16(fp)
  803188:	20800917 	ldw	r2,36(r4)
  80318c:	20c00a17 	ldw	r3,40(r4)
  803190:	100d883a 	mov	r6,r2
  803194:	180f883a 	mov	r7,r3
  803198:	4009883a 	mov	r4,r8
  80319c:	480b883a 	mov	r5,r9
  8031a0:	08066840 	call	806684 <__subdf3>
  8031a4:	1009883a 	mov	r4,r2
  8031a8:	180b883a 	mov	r5,r3
  8031ac:	2005883a 	mov	r2,r4
  8031b0:	2807883a 	mov	r3,r5
  8031b4:	e13ffc17 	ldw	r4,-16(fp)
  8031b8:	20801515 	stw	r2,84(r4)
  8031bc:	20c01615 	stw	r3,88(r4)
  }
  d->_cg42 = d->_Pacemaker_local__Atrig2;
  8031c0:	e0bffc17 	ldw	r2,-16(fp)
  8031c4:	10c01983 	ldbu	r3,102(r2)
  8031c8:	e0bffc17 	ldw	r2,-16(fp)
  8031cc:	10c039c5 	stb	r3,231(r2)
  d->_g44 = d->_g41 && !d->_cg42;
  8031d0:	e0bffc17 	ldw	r2,-16(fp)
  8031d4:	10802143 	ldbu	r2,133(r2)
  8031d8:	10803fcc 	andi	r2,r2,255
  8031dc:	1080201c 	xori	r2,r2,128
  8031e0:	10bfe004 	addi	r2,r2,-128
  8031e4:	10000826 	beq	r2,zero,803208 <logic+0x26c8>
  8031e8:	e0bffc17 	ldw	r2,-16(fp)
  8031ec:	108039c3 	ldbu	r2,231(r2)
  8031f0:	10803fcc 	andi	r2,r2,255
  8031f4:	1080201c 	xori	r2,r2,128
  8031f8:	10bfe004 	addi	r2,r2,-128
  8031fc:	1000021e 	bne	r2,zero,803208 <logic+0x26c8>
  803200:	00800044 	movi	r2,1
  803204:	00000106 	br	80320c <logic+0x26cc>
  803208:	0005883a 	mov	r2,zero
  80320c:	1007883a 	mov	r3,r2
  803210:	e0bffc17 	ldw	r2,-16(fp)
  803214:	10c02205 	stb	r3,136(r2)
  d->_g43_e2 = !(d->_g47 || d->_g44);
  803218:	e0bffc17 	ldw	r2,-16(fp)
  80321c:	108022c3 	ldbu	r2,139(r2)
  803220:	10803fcc 	andi	r2,r2,255
  803224:	1080201c 	xori	r2,r2,128
  803228:	10bfe004 	addi	r2,r2,-128
  80322c:	1000081e 	bne	r2,zero,803250 <logic+0x2710>
  803230:	e0bffc17 	ldw	r2,-16(fp)
  803234:	10802203 	ldbu	r2,136(r2)
  803238:	10803fcc 	andi	r2,r2,255
  80323c:	1080201c 	xori	r2,r2,128
  803240:	10bfe004 	addi	r2,r2,-128
  803244:	1000021e 	bne	r2,zero,803250 <logic+0x2710>
  803248:	00800044 	movi	r2,1
  80324c:	00000106 	br	803254 <logic+0x2714>
  803250:	0005883a 	mov	r2,zero
  803254:	1007883a 	mov	r3,r2
  803258:	e0bffc17 	ldw	r2,-16(fp)
  80325c:	10c04485 	stb	r3,274(r2)
  d->_g46 = d->_g41 && d->_cg42 || d->_g45 && d->_cg46;
  803260:	e0bffc17 	ldw	r2,-16(fp)
  803264:	10802143 	ldbu	r2,133(r2)
  803268:	10803fcc 	andi	r2,r2,255
  80326c:	1080201c 	xori	r2,r2,128
  803270:	10bfe004 	addi	r2,r2,-128
  803274:	10000626 	beq	r2,zero,803290 <logic+0x2750>
  803278:	e0bffc17 	ldw	r2,-16(fp)
  80327c:	108039c3 	ldbu	r2,231(r2)
  803280:	10803fcc 	andi	r2,r2,255
  803284:	1080201c 	xori	r2,r2,128
  803288:	10bfe004 	addi	r2,r2,-128
  80328c:	10000c1e 	bne	r2,zero,8032c0 <logic+0x2780>
  803290:	e0bffc17 	ldw	r2,-16(fp)
  803294:	10802243 	ldbu	r2,137(r2)
  803298:	10803fcc 	andi	r2,r2,255
  80329c:	1080201c 	xori	r2,r2,128
  8032a0:	10bfe004 	addi	r2,r2,-128
  8032a4:	10000826 	beq	r2,zero,8032c8 <logic+0x2788>
  8032a8:	e0bffc17 	ldw	r2,-16(fp)
  8032ac:	10803a03 	ldbu	r2,232(r2)
  8032b0:	10803fcc 	andi	r2,r2,255
  8032b4:	1080201c 	xori	r2,r2,128
  8032b8:	10bfe004 	addi	r2,r2,-128
  8032bc:	10000226 	beq	r2,zero,8032c8 <logic+0x2788>
  8032c0:	00800044 	movi	r2,1
  8032c4:	00000106 	br	8032cc <logic+0x278c>
  8032c8:	0005883a 	mov	r2,zero
  8032cc:	1007883a 	mov	r3,r2
  8032d0:	e0bffc17 	ldw	r2,-16(fp)
  8032d4:	10c02285 	stb	r3,138(r2)
  d->_g42 = d->_g115_e1 || d->_g11 && !d->_cg51;
  8032d8:	e0bffc17 	ldw	r2,-16(fp)
  8032dc:	10804683 	ldbu	r2,282(r2)
  8032e0:	10803fcc 	andi	r2,r2,255
  8032e4:	1080201c 	xori	r2,r2,128
  8032e8:	10bfe004 	addi	r2,r2,-128
  8032ec:	10000c1e 	bne	r2,zero,803320 <logic+0x27e0>
  8032f0:	e0bffc17 	ldw	r2,-16(fp)
  8032f4:	10801c43 	ldbu	r2,113(r2)
  8032f8:	10803fcc 	andi	r2,r2,255
  8032fc:	1080201c 	xori	r2,r2,128
  803300:	10bfe004 	addi	r2,r2,-128
  803304:	10000826 	beq	r2,zero,803328 <logic+0x27e8>
  803308:	e0bffc17 	ldw	r2,-16(fp)
  80330c:	10803a43 	ldbu	r2,233(r2)
  803310:	10803fcc 	andi	r2,r2,255
  803314:	1080201c 	xori	r2,r2,128
  803318:	10bfe004 	addi	r2,r2,-128
  80331c:	1000021e 	bne	r2,zero,803328 <logic+0x27e8>
  803320:	00800044 	movi	r2,1
  803324:	00000106 	br	80332c <logic+0x27ec>
  803328:	0005883a 	mov	r2,zero
  80332c:	1007883a 	mov	r3,r2
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10c02185 	stb	r3,134(r2)
  d->_g51 = !d->_g42;
  803338:	e0bffc17 	ldw	r2,-16(fp)
  80333c:	10802183 	ldbu	r2,134(r2)
  803340:	10803fcc 	andi	r2,r2,255
  803344:	1080201c 	xori	r2,r2,128
  803348:	10bfe004 	addi	r2,r2,-128
  80334c:	1005003a 	cmpeq	r2,r2,zero
  803350:	1007883a 	mov	r3,r2
  803354:	e0bffc17 	ldw	r2,-16(fp)
  803358:	10c02345 	stb	r3,141(r2)
  d->_g34 = (d->_g115 || d->_g39) && (d->_g43_e2 || d->_g46) && (d->_g51 || d->_g20) && (d->_g39 || d->_g46 || d->_g20);
  80335c:	e0bffc17 	ldw	r2,-16(fp)
  803360:	10802d83 	ldbu	r2,182(r2)
  803364:	10803fcc 	andi	r2,r2,255
  803368:	1080201c 	xori	r2,r2,128
  80336c:	10bfe004 	addi	r2,r2,-128
  803370:	1000061e 	bne	r2,zero,80338c <logic+0x284c>
  803374:	e0bffc17 	ldw	r2,-16(fp)
  803378:	10802103 	ldbu	r2,132(r2)
  80337c:	10803fcc 	andi	r2,r2,255
  803380:	1080201c 	xori	r2,r2,128
  803384:	10bfe004 	addi	r2,r2,-128
  803388:	10002c26 	beq	r2,zero,80343c <logic+0x28fc>
  80338c:	e0bffc17 	ldw	r2,-16(fp)
  803390:	10804483 	ldbu	r2,274(r2)
  803394:	10803fcc 	andi	r2,r2,255
  803398:	1080201c 	xori	r2,r2,128
  80339c:	10bfe004 	addi	r2,r2,-128
  8033a0:	1000061e 	bne	r2,zero,8033bc <logic+0x287c>
  8033a4:	e0bffc17 	ldw	r2,-16(fp)
  8033a8:	10802283 	ldbu	r2,138(r2)
  8033ac:	10803fcc 	andi	r2,r2,255
  8033b0:	1080201c 	xori	r2,r2,128
  8033b4:	10bfe004 	addi	r2,r2,-128
  8033b8:	10002026 	beq	r2,zero,80343c <logic+0x28fc>
  8033bc:	e0bffc17 	ldw	r2,-16(fp)
  8033c0:	10802343 	ldbu	r2,141(r2)
  8033c4:	10803fcc 	andi	r2,r2,255
  8033c8:	1080201c 	xori	r2,r2,128
  8033cc:	10bfe004 	addi	r2,r2,-128
  8033d0:	1000061e 	bne	r2,zero,8033ec <logic+0x28ac>
  8033d4:	e0bffc17 	ldw	r2,-16(fp)
  8033d8:	10801e03 	ldbu	r2,120(r2)
  8033dc:	10803fcc 	andi	r2,r2,255
  8033e0:	1080201c 	xori	r2,r2,128
  8033e4:	10bfe004 	addi	r2,r2,-128
  8033e8:	10001426 	beq	r2,zero,80343c <logic+0x28fc>
  8033ec:	e0bffc17 	ldw	r2,-16(fp)
  8033f0:	10802103 	ldbu	r2,132(r2)
  8033f4:	10803fcc 	andi	r2,r2,255
  8033f8:	1080201c 	xori	r2,r2,128
  8033fc:	10bfe004 	addi	r2,r2,-128
  803400:	10000c1e 	bne	r2,zero,803434 <logic+0x28f4>
  803404:	e0bffc17 	ldw	r2,-16(fp)
  803408:	10802283 	ldbu	r2,138(r2)
  80340c:	10803fcc 	andi	r2,r2,255
  803410:	1080201c 	xori	r2,r2,128
  803414:	10bfe004 	addi	r2,r2,-128
  803418:	1000061e 	bne	r2,zero,803434 <logic+0x28f4>
  80341c:	e0bffc17 	ldw	r2,-16(fp)
  803420:	10801e03 	ldbu	r2,120(r2)
  803424:	10803fcc 	andi	r2,r2,255
  803428:	1080201c 	xori	r2,r2,128
  80342c:	10bfe004 	addi	r2,r2,-128
  803430:	10000226 	beq	r2,zero,80343c <logic+0x28fc>
  803434:	00800044 	movi	r2,1
  803438:	00000106 	br	803440 <logic+0x2900>
  80343c:	0005883a 	mov	r2,zero
  803440:	1007883a 	mov	r3,r2
  803444:	e0bffc17 	ldw	r2,-16(fp)
  803448:	10c02045 	stb	r3,129(r2)
  d->_g37 = d->_GO || d->_g34 || d->_g131_e3 && !d->_cg33;
  80344c:	e0bffc17 	ldw	r2,-16(fp)
  803450:	108035c3 	ldbu	r2,215(r2)
  803454:	10803fcc 	andi	r2,r2,255
  803458:	1080201c 	xori	r2,r2,128
  80345c:	10bfe004 	addi	r2,r2,-128
  803460:	1000121e 	bne	r2,zero,8034ac <logic+0x296c>
  803464:	e0bffc17 	ldw	r2,-16(fp)
  803468:	10802043 	ldbu	r2,129(r2)
  80346c:	10803fcc 	andi	r2,r2,255
  803470:	1080201c 	xori	r2,r2,128
  803474:	10bfe004 	addi	r2,r2,-128
  803478:	10000c1e 	bne	r2,zero,8034ac <logic+0x296c>
  80347c:	e0bffc17 	ldw	r2,-16(fp)
  803480:	10804703 	ldbu	r2,284(r2)
  803484:	10803fcc 	andi	r2,r2,255
  803488:	1080201c 	xori	r2,r2,128
  80348c:	10bfe004 	addi	r2,r2,-128
  803490:	10000826 	beq	r2,zero,8034b4 <logic+0x2974>
  803494:	e0bffc17 	ldw	r2,-16(fp)
  803498:	10803903 	ldbu	r2,228(r2)
  80349c:	10803fcc 	andi	r2,r2,255
  8034a0:	1080201c 	xori	r2,r2,128
  8034a4:	10bfe004 	addi	r2,r2,-128
  8034a8:	1000021e 	bne	r2,zero,8034b4 <logic+0x2974>
  8034ac:	00800044 	movi	r2,1
  8034b0:	00000106 	br	8034b8 <logic+0x2978>
  8034b4:	0005883a 	mov	r2,zero
  8034b8:	1007883a 	mov	r3,r2
  8034bc:	e0bffc17 	ldw	r2,-16(fp)
  8034c0:	10c020c5 	stb	r3,131(r2)
  d->_g52 = d->_pg158_e3;
  8034c4:	e0bffc17 	ldw	r2,-16(fp)
  8034c8:	10c04e43 	ldbu	r3,313(r2)
  8034cc:	e0bffc17 	ldw	r2,-16(fp)
  8034d0:	10c02385 	stb	r3,142(r2)
  if (d->_g52) {
  8034d4:	e0bffc17 	ldw	r2,-16(fp)
  8034d8:	10802383 	ldbu	r2,142(r2)
  8034dc:	10803fcc 	andi	r2,r2,255
  8034e0:	1080201c 	xori	r2,r2,128
  8034e4:	10bfe004 	addi	r2,r2,-128
  8034e8:	10001226 	beq	r2,zero,803534 <logic+0x29f4>
    d->_region2_VRP_cVRP += d->deltaT;
  8034ec:	e13ffc17 	ldw	r4,-16(fp)
  8034f0:	20800b17 	ldw	r2,44(r4)
  8034f4:	20c00c17 	ldw	r3,48(r4)
  8034f8:	e1bffc17 	ldw	r6,-16(fp)
  8034fc:	31001317 	ldw	r4,76(r6)
  803500:	31401417 	ldw	r5,80(r6)
  803504:	200d883a 	mov	r6,r4
  803508:	280f883a 	mov	r7,r5
  80350c:	1009883a 	mov	r4,r2
  803510:	180b883a 	mov	r5,r3
  803514:	0805c080 	call	805c08 <__adddf3>
  803518:	1009883a 	mov	r4,r2
  80351c:	180b883a 	mov	r5,r3
  803520:	2005883a 	mov	r2,r4
  803524:	2807883a 	mov	r3,r5
  803528:	e13ffc17 	ldw	r4,-16(fp)
  80352c:	20800b15 	stw	r2,44(r4)
  803530:	20c00c15 	stw	r3,48(r4)
  }
  d->_g37_e1 = d->_pg70;
  803534:	e0bffc17 	ldw	r2,-16(fp)
  803538:	10c04e83 	ldbu	r3,314(r2)
  80353c:	e0bffc17 	ldw	r2,-16(fp)
  803540:	10c04445 	stb	r3,273(r2)
  d->_cg75 = d->_region2_VRP_cVRP >= d->VRP_Constraint;
  803544:	e0bffc17 	ldw	r2,-16(fp)
  803548:	14000b17 	ldw	r16,44(r2)
  80354c:	14400c17 	ldw	r17,48(r2)
  803550:	e0bffc17 	ldw	r2,-16(fp)
  803554:	10800317 	ldw	r2,12(r2)
  803558:	1009883a 	mov	r4,r2
  80355c:	0806f800 	call	806f80 <__floatsidf>
  803560:	1009883a 	mov	r4,r2
  803564:	180b883a 	mov	r5,r3
  803568:	04800044 	movi	r18,1
  80356c:	200d883a 	mov	r6,r4
  803570:	280f883a 	mov	r7,r5
  803574:	8009883a 	mov	r4,r16
  803578:	880b883a 	mov	r5,r17
  80357c:	08064b40 	call	8064b4 <__gedf2>
  803580:	1000010e 	bge	r2,zero,803588 <logic+0x2a48>
  803584:	0025883a 	mov	r18,zero
  803588:	9007883a 	mov	r3,r18
  80358c:	e0bffc17 	ldw	r2,-16(fp)
  803590:	10c03bc5 	stb	r3,239(r2)
  d->_g43 = d->_g37_e1 && d->_cg75;
  803594:	e0bffc17 	ldw	r2,-16(fp)
  803598:	10804443 	ldbu	r2,273(r2)
  80359c:	10803fcc 	andi	r2,r2,255
  8035a0:	1080201c 	xori	r2,r2,128
  8035a4:	10bfe004 	addi	r2,r2,-128
  8035a8:	10000826 	beq	r2,zero,8035cc <logic+0x2a8c>
  8035ac:	e0bffc17 	ldw	r2,-16(fp)
  8035b0:	10803bc3 	ldbu	r2,239(r2)
  8035b4:	10803fcc 	andi	r2,r2,255
  8035b8:	1080201c 	xori	r2,r2,128
  8035bc:	10bfe004 	addi	r2,r2,-128
  8035c0:	10000226 	beq	r2,zero,8035cc <logic+0x2a8c>
  8035c4:	00800044 	movi	r2,1
  8035c8:	00000106 	br	8035d0 <logic+0x2a90>
  8035cc:	0005883a 	mov	r2,zero
  8035d0:	1007883a 	mov	r3,r2
  8035d4:	e0bffc17 	ldw	r2,-16(fp)
  8035d8:	10c021c5 	stb	r3,135(r2)
  if (d->_g43) {
  8035dc:	e0bffc17 	ldw	r2,-16(fp)
  8035e0:	108021c3 	ldbu	r2,135(r2)
  8035e4:	10803fcc 	andi	r2,r2,255
  8035e8:	1080201c 	xori	r2,r2,128
  8035ec:	10bfe004 	addi	r2,r2,-128
  8035f0:	10000326 	beq	r2,zero,803600 <logic+0x2ac0>
    d->_Pacemaker_local__Atrig3 = 1;
  8035f4:	e0bffc17 	ldw	r2,-16(fp)
  8035f8:	00c00044 	movi	r3,1
  8035fc:	10c019c5 	stb	r3,103(r2)
  }
  d->_g43_e2 = d->_pg76_e3;
  803600:	e0bffc17 	ldw	r2,-16(fp)
  803604:	10c04ec3 	ldbu	r3,315(r2)
  803608:	e0bffc17 	ldw	r2,-16(fp)
  80360c:	10c04485 	stb	r3,274(r2)
  d->_cg57 = d->VS || d->VP;
  803610:	e0bffc17 	ldw	r2,-16(fp)
  803614:	10800043 	ldbu	r2,1(r2)
  803618:	10803fcc 	andi	r2,r2,255
  80361c:	1080201c 	xori	r2,r2,128
  803620:	10bfe004 	addi	r2,r2,-128
  803624:	1000061e 	bne	r2,zero,803640 <logic+0x2b00>
  803628:	e0bffc17 	ldw	r2,-16(fp)
  80362c:	10801743 	ldbu	r2,93(r2)
  803630:	10803fcc 	andi	r2,r2,255
  803634:	1080201c 	xori	r2,r2,128
  803638:	10bfe004 	addi	r2,r2,-128
  80363c:	10000226 	beq	r2,zero,803648 <logic+0x2b08>
  803640:	00800044 	movi	r2,1
  803644:	00000106 	br	80364c <logic+0x2b0c>
  803648:	0005883a 	mov	r2,zero
  80364c:	1007883a 	mov	r3,r2
  803650:	e0bffc17 	ldw	r2,-16(fp)
  803654:	10c03a85 	stb	r3,234(r2)
  d->_g52_e3 = d->_g43_e2 && d->_cg57;
  803658:	e0bffc17 	ldw	r2,-16(fp)
  80365c:	10804483 	ldbu	r2,274(r2)
  803660:	10803fcc 	andi	r2,r2,255
  803664:	1080201c 	xori	r2,r2,128
  803668:	10bfe004 	addi	r2,r2,-128
  80366c:	10000826 	beq	r2,zero,803690 <logic+0x2b50>
  803670:	e0bffc17 	ldw	r2,-16(fp)
  803674:	10803a83 	ldbu	r2,234(r2)
  803678:	10803fcc 	andi	r2,r2,255
  80367c:	1080201c 	xori	r2,r2,128
  803680:	10bfe004 	addi	r2,r2,-128
  803684:	10000226 	beq	r2,zero,803690 <logic+0x2b50>
  803688:	00800044 	movi	r2,1
  80368c:	00000106 	br	803694 <logic+0x2b54>
  803690:	0005883a 	mov	r2,zero
  803694:	1007883a 	mov	r3,r2
  803698:	e0bffc17 	ldw	r2,-16(fp)
  80369c:	10c044c5 	stb	r3,275(r2)
  if (d->_g52_e3) {
  8036a0:	e0bffc17 	ldw	r2,-16(fp)
  8036a4:	108044c3 	ldbu	r2,275(r2)
  8036a8:	10803fcc 	andi	r2,r2,255
  8036ac:	1080201c 	xori	r2,r2,128
  8036b0:	10bfe004 	addi	r2,r2,-128
  8036b4:	10000526 	beq	r2,zero,8036cc <logic+0x2b8c>
    d->_region2_VRP_cVRP = 0;
  8036b8:	e0bffc17 	ldw	r2,-16(fp)
  8036bc:	10000b15 	stw	zero,44(r2)
  8036c0:	10000c15 	stw	zero,48(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  8036c4:	e0bffc17 	ldw	r2,-16(fp)
  8036c8:	100019c5 	stb	zero,103(r2)
  }
  d->_g33 = d->_g52_e3 || d->_g5;
  8036cc:	e0bffc17 	ldw	r2,-16(fp)
  8036d0:	108044c3 	ldbu	r2,275(r2)
  8036d4:	10803fcc 	andi	r2,r2,255
  8036d8:	1080201c 	xori	r2,r2,128
  8036dc:	10bfe004 	addi	r2,r2,-128
  8036e0:	1000061e 	bne	r2,zero,8036fc <logic+0x2bbc>
  8036e4:	e0bffc17 	ldw	r2,-16(fp)
  8036e8:	10801b83 	ldbu	r2,110(r2)
  8036ec:	10803fcc 	andi	r2,r2,255
  8036f0:	1080201c 	xori	r2,r2,128
  8036f4:	10bfe004 	addi	r2,r2,-128
  8036f8:	10000226 	beq	r2,zero,803704 <logic+0x2bc4>
  8036fc:	00800044 	movi	r2,1
  803700:	00000106 	br	803708 <logic+0x2bc8>
  803704:	0005883a 	mov	r2,zero
  803708:	1007883a 	mov	r3,r2
  80370c:	e0bffc17 	ldw	r2,-16(fp)
  803710:	10c02005 	stb	r3,128(r2)
  d->_cg60 = d->_Pacemaker_local__Atrig3;
  803714:	e0bffc17 	ldw	r2,-16(fp)
  803718:	10c019c3 	ldbu	r3,103(r2)
  80371c:	e0bffc17 	ldw	r2,-16(fp)
  803720:	10c03ac5 	stb	r3,235(r2)
  d->_g53 = d->_g33 && !d->_cg60;
  803724:	e0bffc17 	ldw	r2,-16(fp)
  803728:	10802003 	ldbu	r2,128(r2)
  80372c:	10803fcc 	andi	r2,r2,255
  803730:	1080201c 	xori	r2,r2,128
  803734:	10bfe004 	addi	r2,r2,-128
  803738:	10000826 	beq	r2,zero,80375c <logic+0x2c1c>
  80373c:	e0bffc17 	ldw	r2,-16(fp)
  803740:	10803ac3 	ldbu	r2,235(r2)
  803744:	10803fcc 	andi	r2,r2,255
  803748:	1080201c 	xori	r2,r2,128
  80374c:	10bfe004 	addi	r2,r2,-128
  803750:	1000021e 	bne	r2,zero,80375c <logic+0x2c1c>
  803754:	00800044 	movi	r2,1
  803758:	00000106 	br	803760 <logic+0x2c20>
  80375c:	0005883a 	mov	r2,zero
  803760:	1007883a 	mov	r3,r2
  803764:	e0bffc17 	ldw	r2,-16(fp)
  803768:	10c023c5 	stb	r3,143(r2)
  d->_g63 = !d->_g53;
  80376c:	e0bffc17 	ldw	r2,-16(fp)
  803770:	108023c3 	ldbu	r2,143(r2)
  803774:	10803fcc 	andi	r2,r2,255
  803778:	1080201c 	xori	r2,r2,128
  80377c:	10bfe004 	addi	r2,r2,-128
  803780:	1005003a 	cmpeq	r2,r2,zero
  803784:	1007883a 	mov	r3,r2
  803788:	e0bffc17 	ldw	r2,-16(fp)
  80378c:	10c02505 	stb	r3,148(r2)
  d->_g60 = d->_g33 && d->_cg60;
  803790:	e0bffc17 	ldw	r2,-16(fp)
  803794:	10802003 	ldbu	r2,128(r2)
  803798:	10803fcc 	andi	r2,r2,255
  80379c:	1080201c 	xori	r2,r2,128
  8037a0:	10bfe004 	addi	r2,r2,-128
  8037a4:	10000826 	beq	r2,zero,8037c8 <logic+0x2c88>
  8037a8:	e0bffc17 	ldw	r2,-16(fp)
  8037ac:	10803ac3 	ldbu	r2,235(r2)
  8037b0:	10803fcc 	andi	r2,r2,255
  8037b4:	1080201c 	xori	r2,r2,128
  8037b8:	10bfe004 	addi	r2,r2,-128
  8037bc:	10000226 	beq	r2,zero,8037c8 <logic+0x2c88>
  8037c0:	00800044 	movi	r2,1
  8037c4:	00000106 	br	8037cc <logic+0x2c8c>
  8037c8:	0005883a 	mov	r2,zero
  8037cc:	1007883a 	mov	r3,r2
  8037d0:	e0bffc17 	ldw	r2,-16(fp)
  8037d4:	10c02485 	stb	r3,146(r2)
  d->_g69 = d->_pg68;
  8037d8:	e0bffc17 	ldw	r2,-16(fp)
  8037dc:	10c04f03 	ldbu	r3,316(r2)
  8037e0:	e0bffc17 	ldw	r2,-16(fp)
  8037e4:	10c02645 	stb	r3,153(r2)
  d->_g72 = d->_pg71;
  8037e8:	e0bffc17 	ldw	r2,-16(fp)
  8037ec:	10c04f43 	ldbu	r3,317(r2)
  8037f0:	e0bffc17 	ldw	r2,-16(fp)
  8037f4:	10c02705 	stb	r3,156(r2)
  d->_g69 = d->_g52_e3 || d->_g69 || d->_g72;
  8037f8:	e0bffc17 	ldw	r2,-16(fp)
  8037fc:	108044c3 	ldbu	r2,275(r2)
  803800:	10803fcc 	andi	r2,r2,255
  803804:	1080201c 	xori	r2,r2,128
  803808:	10bfe004 	addi	r2,r2,-128
  80380c:	10000c1e 	bne	r2,zero,803840 <logic+0x2d00>
  803810:	e0bffc17 	ldw	r2,-16(fp)
  803814:	10802643 	ldbu	r2,153(r2)
  803818:	10803fcc 	andi	r2,r2,255
  80381c:	1080201c 	xori	r2,r2,128
  803820:	10bfe004 	addi	r2,r2,-128
  803824:	1000061e 	bne	r2,zero,803840 <logic+0x2d00>
  803828:	e0bffc17 	ldw	r2,-16(fp)
  80382c:	10802703 	ldbu	r2,156(r2)
  803830:	10803fcc 	andi	r2,r2,255
  803834:	1080201c 	xori	r2,r2,128
  803838:	10bfe004 	addi	r2,r2,-128
  80383c:	10000226 	beq	r2,zero,803848 <logic+0x2d08>
  803840:	00800044 	movi	r2,1
  803844:	00000106 	br	80384c <logic+0x2d0c>
  803848:	0005883a 	mov	r2,zero
  80384c:	1007883a 	mov	r3,r2
  803850:	e0bffc17 	ldw	r2,-16(fp)
  803854:	10c02645 	stb	r3,153(r2)
  d->_cg65 = d->_region2_VRP_cVRP < d->VRP_Constraint;
  803858:	e0bffc17 	ldw	r2,-16(fp)
  80385c:	14000b17 	ldw	r16,44(r2)
  803860:	14400c17 	ldw	r17,48(r2)
  803864:	e0bffc17 	ldw	r2,-16(fp)
  803868:	10800317 	ldw	r2,12(r2)
  80386c:	1009883a 	mov	r4,r2
  803870:	0806f800 	call	806f80 <__floatsidf>
  803874:	1009883a 	mov	r4,r2
  803878:	180b883a 	mov	r5,r3
  80387c:	04800044 	movi	r18,1
  803880:	200d883a 	mov	r6,r4
  803884:	280f883a 	mov	r7,r5
  803888:	8009883a 	mov	r4,r16
  80388c:	880b883a 	mov	r5,r17
  803890:	08065900 	call	806590 <__ledf2>
  803894:	10000116 	blt	r2,zero,80389c <logic+0x2d5c>
  803898:	0025883a 	mov	r18,zero
  80389c:	9007883a 	mov	r3,r18
  8038a0:	e0bffc17 	ldw	r2,-16(fp)
  8038a4:	10c03b05 	stb	r3,236(r2)
  d->_g72 = d->_g69 && !d->_cg65;
  8038a8:	e0bffc17 	ldw	r2,-16(fp)
  8038ac:	10802643 	ldbu	r2,153(r2)
  8038b0:	10803fcc 	andi	r2,r2,255
  8038b4:	1080201c 	xori	r2,r2,128
  8038b8:	10bfe004 	addi	r2,r2,-128
  8038bc:	10000826 	beq	r2,zero,8038e0 <logic+0x2da0>
  8038c0:	e0bffc17 	ldw	r2,-16(fp)
  8038c4:	10803b03 	ldbu	r2,236(r2)
  8038c8:	10803fcc 	andi	r2,r2,255
  8038cc:	1080201c 	xori	r2,r2,128
  8038d0:	10bfe004 	addi	r2,r2,-128
  8038d4:	1000021e 	bne	r2,zero,8038e0 <logic+0x2da0>
  8038d8:	00800044 	movi	r2,1
  8038dc:	00000106 	br	8038e4 <logic+0x2da4>
  8038e0:	0005883a 	mov	r2,zero
  8038e4:	1007883a 	mov	r3,r2
  8038e8:	e0bffc17 	ldw	r2,-16(fp)
  8038ec:	10c02705 	stb	r3,156(r2)
  d->_cg70 = d->_Pacemaker_local__Atrig3;
  8038f0:	e0bffc17 	ldw	r2,-16(fp)
  8038f4:	10c019c3 	ldbu	r3,103(r2)
  8038f8:	e0bffc17 	ldw	r2,-16(fp)
  8038fc:	10c03b85 	stb	r3,238(r2)
  d->_g71 = d->_g72 && !d->_cg70;
  803900:	e0bffc17 	ldw	r2,-16(fp)
  803904:	10802703 	ldbu	r2,156(r2)
  803908:	10803fcc 	andi	r2,r2,255
  80390c:	1080201c 	xori	r2,r2,128
  803910:	10bfe004 	addi	r2,r2,-128
  803914:	10000826 	beq	r2,zero,803938 <logic+0x2df8>
  803918:	e0bffc17 	ldw	r2,-16(fp)
  80391c:	10803b83 	ldbu	r2,238(r2)
  803920:	10803fcc 	andi	r2,r2,255
  803924:	1080201c 	xori	r2,r2,128
  803928:	10bfe004 	addi	r2,r2,-128
  80392c:	1000021e 	bne	r2,zero,803938 <logic+0x2df8>
  803930:	00800044 	movi	r2,1
  803934:	00000106 	br	80393c <logic+0x2dfc>
  803938:	0005883a 	mov	r2,zero
  80393c:	1007883a 	mov	r3,r2
  803940:	e0bffc17 	ldw	r2,-16(fp)
  803944:	10c026c5 	stb	r3,155(r2)
  d->_g65 = d->_g69 && d->_cg65;
  803948:	e0bffc17 	ldw	r2,-16(fp)
  80394c:	10802643 	ldbu	r2,153(r2)
  803950:	10803fcc 	andi	r2,r2,255
  803954:	1080201c 	xori	r2,r2,128
  803958:	10bfe004 	addi	r2,r2,-128
  80395c:	10000826 	beq	r2,zero,803980 <logic+0x2e40>
  803960:	e0bffc17 	ldw	r2,-16(fp)
  803964:	10803b03 	ldbu	r2,236(r2)
  803968:	10803fcc 	andi	r2,r2,255
  80396c:	1080201c 	xori	r2,r2,128
  803970:	10bfe004 	addi	r2,r2,-128
  803974:	10000226 	beq	r2,zero,803980 <logic+0x2e40>
  803978:	00800044 	movi	r2,1
  80397c:	00000106 	br	803984 <logic+0x2e44>
  803980:	0005883a 	mov	r2,zero
  803984:	1007883a 	mov	r3,r2
  803988:	e0bffc17 	ldw	r2,-16(fp)
  80398c:	10c02545 	stb	r3,149(r2)
  if (d->_g65) {
  803990:	e0bffc17 	ldw	r2,-16(fp)
  803994:	10802543 	ldbu	r2,149(r2)
  803998:	10803fcc 	andi	r2,r2,255
  80399c:	1080201c 	xori	r2,r2,128
  8039a0:	10bfe004 	addi	r2,r2,-128
  8039a4:	10003426 	beq	r2,zero,803a78 <logic+0x2f38>
    d->sleepT = (d->sleepT < (d->VRP_Constraint - d->_region2_VRP_cVRP)) ? d->sleepT : (d->VRP_Constraint - d->_region2_VRP_cVRP);
  8039a8:	e0bffc17 	ldw	r2,-16(fp)
  8039ac:	14001517 	ldw	r16,84(r2)
  8039b0:	14401617 	ldw	r17,88(r2)
  8039b4:	e0bffc17 	ldw	r2,-16(fp)
  8039b8:	10800317 	ldw	r2,12(r2)
  8039bc:	1009883a 	mov	r4,r2
  8039c0:	0806f800 	call	806f80 <__floatsidf>
  8039c4:	1011883a 	mov	r8,r2
  8039c8:	1813883a 	mov	r9,r3
  8039cc:	e13ffc17 	ldw	r4,-16(fp)
  8039d0:	20800b17 	ldw	r2,44(r4)
  8039d4:	20c00c17 	ldw	r3,48(r4)
  8039d8:	100d883a 	mov	r6,r2
  8039dc:	180f883a 	mov	r7,r3
  8039e0:	4009883a 	mov	r4,r8
  8039e4:	480b883a 	mov	r5,r9
  8039e8:	08066840 	call	806684 <__subdf3>
  8039ec:	1009883a 	mov	r4,r2
  8039f0:	180b883a 	mov	r5,r3
  8039f4:	2005883a 	mov	r2,r4
  8039f8:	2807883a 	mov	r3,r5
  8039fc:	100d883a 	mov	r6,r2
  803a00:	180f883a 	mov	r7,r3
  803a04:	8009883a 	mov	r4,r16
  803a08:	880b883a 	mov	r5,r17
  803a0c:	08065900 	call	806590 <__ledf2>
  803a10:	1000040e 	bge	r2,zero,803a24 <logic+0x2ee4>
  803a14:	e13ffc17 	ldw	r4,-16(fp)
  803a18:	20801517 	ldw	r2,84(r4)
  803a1c:	20c01617 	ldw	r3,88(r4)
  803a20:	00001206 	br	803a6c <logic+0x2f2c>
  803a24:	e0bffc17 	ldw	r2,-16(fp)
  803a28:	10800317 	ldw	r2,12(r2)
  803a2c:	1009883a 	mov	r4,r2
  803a30:	0806f800 	call	806f80 <__floatsidf>
  803a34:	1011883a 	mov	r8,r2
  803a38:	1813883a 	mov	r9,r3
  803a3c:	e13ffc17 	ldw	r4,-16(fp)
  803a40:	20800b17 	ldw	r2,44(r4)
  803a44:	20c00c17 	ldw	r3,48(r4)
  803a48:	100d883a 	mov	r6,r2
  803a4c:	180f883a 	mov	r7,r3
  803a50:	4009883a 	mov	r4,r8
  803a54:	480b883a 	mov	r5,r9
  803a58:	08066840 	call	806684 <__subdf3>
  803a5c:	1009883a 	mov	r4,r2
  803a60:	180b883a 	mov	r5,r3
  803a64:	2005883a 	mov	r2,r4
  803a68:	2807883a 	mov	r3,r5
  803a6c:	e13ffc17 	ldw	r4,-16(fp)
  803a70:	20801515 	stw	r2,84(r4)
  803a74:	20c01615 	stw	r3,88(r4)
  }
  d->_cg66 = d->_Pacemaker_local__Atrig3;
  803a78:	e0bffc17 	ldw	r2,-16(fp)
  803a7c:	10c019c3 	ldbu	r3,103(r2)
  803a80:	e0bffc17 	ldw	r2,-16(fp)
  803a84:	10c03b45 	stb	r3,237(r2)
  d->_g68 = d->_g65 && !d->_cg66;
  803a88:	e0bffc17 	ldw	r2,-16(fp)
  803a8c:	10802543 	ldbu	r2,149(r2)
  803a90:	10803fcc 	andi	r2,r2,255
  803a94:	1080201c 	xori	r2,r2,128
  803a98:	10bfe004 	addi	r2,r2,-128
  803a9c:	10000826 	beq	r2,zero,803ac0 <logic+0x2f80>
  803aa0:	e0bffc17 	ldw	r2,-16(fp)
  803aa4:	10803b43 	ldbu	r2,237(r2)
  803aa8:	10803fcc 	andi	r2,r2,255
  803aac:	1080201c 	xori	r2,r2,128
  803ab0:	10bfe004 	addi	r2,r2,-128
  803ab4:	1000021e 	bne	r2,zero,803ac0 <logic+0x2f80>
  803ab8:	00800044 	movi	r2,1
  803abc:	00000106 	br	803ac4 <logic+0x2f84>
  803ac0:	0005883a 	mov	r2,zero
  803ac4:	1007883a 	mov	r3,r2
  803ac8:	e0bffc17 	ldw	r2,-16(fp)
  803acc:	10c02605 	stb	r3,152(r2)
  d->_g67_e2 = !(d->_g71 || d->_g68);
  803ad0:	e0bffc17 	ldw	r2,-16(fp)
  803ad4:	108026c3 	ldbu	r2,155(r2)
  803ad8:	10803fcc 	andi	r2,r2,255
  803adc:	1080201c 	xori	r2,r2,128
  803ae0:	10bfe004 	addi	r2,r2,-128
  803ae4:	1000081e 	bne	r2,zero,803b08 <logic+0x2fc8>
  803ae8:	e0bffc17 	ldw	r2,-16(fp)
  803aec:	10802603 	ldbu	r2,152(r2)
  803af0:	10803fcc 	andi	r2,r2,255
  803af4:	1080201c 	xori	r2,r2,128
  803af8:	10bfe004 	addi	r2,r2,-128
  803afc:	1000021e 	bne	r2,zero,803b08 <logic+0x2fc8>
  803b00:	00800044 	movi	r2,1
  803b04:	00000106 	br	803b0c <logic+0x2fcc>
  803b08:	0005883a 	mov	r2,zero
  803b0c:	1007883a 	mov	r3,r2
  803b10:	e0bffc17 	ldw	r2,-16(fp)
  803b14:	10c04545 	stb	r3,277(r2)
  d->_g66 = d->_g65 && d->_cg66 || d->_g72 && d->_cg70;
  803b18:	e0bffc17 	ldw	r2,-16(fp)
  803b1c:	10802543 	ldbu	r2,149(r2)
  803b20:	10803fcc 	andi	r2,r2,255
  803b24:	1080201c 	xori	r2,r2,128
  803b28:	10bfe004 	addi	r2,r2,-128
  803b2c:	10000626 	beq	r2,zero,803b48 <logic+0x3008>
  803b30:	e0bffc17 	ldw	r2,-16(fp)
  803b34:	10803b43 	ldbu	r2,237(r2)
  803b38:	10803fcc 	andi	r2,r2,255
  803b3c:	1080201c 	xori	r2,r2,128
  803b40:	10bfe004 	addi	r2,r2,-128
  803b44:	10000c1e 	bne	r2,zero,803b78 <logic+0x3038>
  803b48:	e0bffc17 	ldw	r2,-16(fp)
  803b4c:	10802703 	ldbu	r2,156(r2)
  803b50:	10803fcc 	andi	r2,r2,255
  803b54:	1080201c 	xori	r2,r2,128
  803b58:	10bfe004 	addi	r2,r2,-128
  803b5c:	10000826 	beq	r2,zero,803b80 <logic+0x3040>
  803b60:	e0bffc17 	ldw	r2,-16(fp)
  803b64:	10803b83 	ldbu	r2,238(r2)
  803b68:	10803fcc 	andi	r2,r2,255
  803b6c:	1080201c 	xori	r2,r2,128
  803b70:	10bfe004 	addi	r2,r2,-128
  803b74:	10000226 	beq	r2,zero,803b80 <logic+0x3040>
  803b78:	00800044 	movi	r2,1
  803b7c:	00000106 	br	803b84 <logic+0x3044>
  803b80:	0005883a 	mov	r2,zero
  803b84:	1007883a 	mov	r3,r2
  803b88:	e0bffc17 	ldw	r2,-16(fp)
  803b8c:	10c02585 	stb	r3,150(r2)
  d->_g70 = d->_g52_e3 || d->_g37_e1 && !d->_cg75;
  803b90:	e0bffc17 	ldw	r2,-16(fp)
  803b94:	108044c3 	ldbu	r2,275(r2)
  803b98:	10803fcc 	andi	r2,r2,255
  803b9c:	1080201c 	xori	r2,r2,128
  803ba0:	10bfe004 	addi	r2,r2,-128
  803ba4:	10000c1e 	bne	r2,zero,803bd8 <logic+0x3098>
  803ba8:	e0bffc17 	ldw	r2,-16(fp)
  803bac:	10804443 	ldbu	r2,273(r2)
  803bb0:	10803fcc 	andi	r2,r2,255
  803bb4:	1080201c 	xori	r2,r2,128
  803bb8:	10bfe004 	addi	r2,r2,-128
  803bbc:	10000826 	beq	r2,zero,803be0 <logic+0x30a0>
  803bc0:	e0bffc17 	ldw	r2,-16(fp)
  803bc4:	10803bc3 	ldbu	r2,239(r2)
  803bc8:	10803fcc 	andi	r2,r2,255
  803bcc:	1080201c 	xori	r2,r2,128
  803bd0:	10bfe004 	addi	r2,r2,-128
  803bd4:	1000021e 	bne	r2,zero,803be0 <logic+0x30a0>
  803bd8:	00800044 	movi	r2,1
  803bdc:	00000106 	br	803be4 <logic+0x30a4>
  803be0:	0005883a 	mov	r2,zero
  803be4:	1007883a 	mov	r3,r2
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	10c02685 	stb	r3,154(r2)
  d->_g75 = !d->_g70;
  803bf0:	e0bffc17 	ldw	r2,-16(fp)
  803bf4:	10802683 	ldbu	r2,154(r2)
  803bf8:	10803fcc 	andi	r2,r2,255
  803bfc:	1080201c 	xori	r2,r2,128
  803c00:	10bfe004 	addi	r2,r2,-128
  803c04:	1005003a 	cmpeq	r2,r2,zero
  803c08:	1007883a 	mov	r3,r2
  803c0c:	e0bffc17 	ldw	r2,-16(fp)
  803c10:	10c02745 	stb	r3,157(r2)
  d->_g58 = (d->_g63 || d->_g60) && (d->_g67_e2 || d->_g66) && (d->_g75 || d->_g43) && (d->_g60 || d->_g66 || d->_g43);
  803c14:	e0bffc17 	ldw	r2,-16(fp)
  803c18:	10802503 	ldbu	r2,148(r2)
  803c1c:	10803fcc 	andi	r2,r2,255
  803c20:	1080201c 	xori	r2,r2,128
  803c24:	10bfe004 	addi	r2,r2,-128
  803c28:	1000061e 	bne	r2,zero,803c44 <logic+0x3104>
  803c2c:	e0bffc17 	ldw	r2,-16(fp)
  803c30:	10802483 	ldbu	r2,146(r2)
  803c34:	10803fcc 	andi	r2,r2,255
  803c38:	1080201c 	xori	r2,r2,128
  803c3c:	10bfe004 	addi	r2,r2,-128
  803c40:	10002c26 	beq	r2,zero,803cf4 <logic+0x31b4>
  803c44:	e0bffc17 	ldw	r2,-16(fp)
  803c48:	10804543 	ldbu	r2,277(r2)
  803c4c:	10803fcc 	andi	r2,r2,255
  803c50:	1080201c 	xori	r2,r2,128
  803c54:	10bfe004 	addi	r2,r2,-128
  803c58:	1000061e 	bne	r2,zero,803c74 <logic+0x3134>
  803c5c:	e0bffc17 	ldw	r2,-16(fp)
  803c60:	10802583 	ldbu	r2,150(r2)
  803c64:	10803fcc 	andi	r2,r2,255
  803c68:	1080201c 	xori	r2,r2,128
  803c6c:	10bfe004 	addi	r2,r2,-128
  803c70:	10002026 	beq	r2,zero,803cf4 <logic+0x31b4>
  803c74:	e0bffc17 	ldw	r2,-16(fp)
  803c78:	10802743 	ldbu	r2,157(r2)
  803c7c:	10803fcc 	andi	r2,r2,255
  803c80:	1080201c 	xori	r2,r2,128
  803c84:	10bfe004 	addi	r2,r2,-128
  803c88:	1000061e 	bne	r2,zero,803ca4 <logic+0x3164>
  803c8c:	e0bffc17 	ldw	r2,-16(fp)
  803c90:	108021c3 	ldbu	r2,135(r2)
  803c94:	10803fcc 	andi	r2,r2,255
  803c98:	1080201c 	xori	r2,r2,128
  803c9c:	10bfe004 	addi	r2,r2,-128
  803ca0:	10001426 	beq	r2,zero,803cf4 <logic+0x31b4>
  803ca4:	e0bffc17 	ldw	r2,-16(fp)
  803ca8:	10802483 	ldbu	r2,146(r2)
  803cac:	10803fcc 	andi	r2,r2,255
  803cb0:	1080201c 	xori	r2,r2,128
  803cb4:	10bfe004 	addi	r2,r2,-128
  803cb8:	10000c1e 	bne	r2,zero,803cec <logic+0x31ac>
  803cbc:	e0bffc17 	ldw	r2,-16(fp)
  803cc0:	10802583 	ldbu	r2,150(r2)
  803cc4:	10803fcc 	andi	r2,r2,255
  803cc8:	1080201c 	xori	r2,r2,128
  803ccc:	10bfe004 	addi	r2,r2,-128
  803cd0:	1000061e 	bne	r2,zero,803cec <logic+0x31ac>
  803cd4:	e0bffc17 	ldw	r2,-16(fp)
  803cd8:	108021c3 	ldbu	r2,135(r2)
  803cdc:	10803fcc 	andi	r2,r2,255
  803ce0:	1080201c 	xori	r2,r2,128
  803ce4:	10bfe004 	addi	r2,r2,-128
  803ce8:	10000226 	beq	r2,zero,803cf4 <logic+0x31b4>
  803cec:	00800044 	movi	r2,1
  803cf0:	00000106 	br	803cf8 <logic+0x31b8>
  803cf4:	0005883a 	mov	r2,zero
  803cf8:	1007883a 	mov	r3,r2
  803cfc:	e0bffc17 	ldw	r2,-16(fp)
  803d00:	10c02445 	stb	r3,145(r2)
  d->_g76_e3 = d->_GO || d->_g58 || d->_g43_e2 && !d->_cg57;
  803d04:	e0bffc17 	ldw	r2,-16(fp)
  803d08:	108035c3 	ldbu	r2,215(r2)
  803d0c:	10803fcc 	andi	r2,r2,255
  803d10:	1080201c 	xori	r2,r2,128
  803d14:	10bfe004 	addi	r2,r2,-128
  803d18:	1000121e 	bne	r2,zero,803d64 <logic+0x3224>
  803d1c:	e0bffc17 	ldw	r2,-16(fp)
  803d20:	10802443 	ldbu	r2,145(r2)
  803d24:	10803fcc 	andi	r2,r2,255
  803d28:	1080201c 	xori	r2,r2,128
  803d2c:	10bfe004 	addi	r2,r2,-128
  803d30:	10000c1e 	bne	r2,zero,803d64 <logic+0x3224>
  803d34:	e0bffc17 	ldw	r2,-16(fp)
  803d38:	10804483 	ldbu	r2,274(r2)
  803d3c:	10803fcc 	andi	r2,r2,255
  803d40:	1080201c 	xori	r2,r2,128
  803d44:	10bfe004 	addi	r2,r2,-128
  803d48:	10000826 	beq	r2,zero,803d6c <logic+0x322c>
  803d4c:	e0bffc17 	ldw	r2,-16(fp)
  803d50:	10803a83 	ldbu	r2,234(r2)
  803d54:	10803fcc 	andi	r2,r2,255
  803d58:	1080201c 	xori	r2,r2,128
  803d5c:	10bfe004 	addi	r2,r2,-128
  803d60:	1000021e 	bne	r2,zero,803d6c <logic+0x322c>
  803d64:	00800044 	movi	r2,1
  803d68:	00000106 	br	803d70 <logic+0x3230>
  803d6c:	0005883a 	mov	r2,zero
  803d70:	1007883a 	mov	r3,r2
  803d74:	e0bffc17 	ldw	r2,-16(fp)
  803d78:	10c04585 	stb	r3,278(r2)
  d->_g61_e1 = d->_pg76;
  803d7c:	e0bffc17 	ldw	r2,-16(fp)
  803d80:	10c04f83 	ldbu	r3,318(r2)
  803d84:	e0bffc17 	ldw	r2,-16(fp)
  803d88:	10c04505 	stb	r3,276(r2)
  d->_cg81 = (d->VS || d->VP) && !d->VRP;
  803d8c:	e0bffc17 	ldw	r2,-16(fp)
  803d90:	10800043 	ldbu	r2,1(r2)
  803d94:	10803fcc 	andi	r2,r2,255
  803d98:	1080201c 	xori	r2,r2,128
  803d9c:	10bfe004 	addi	r2,r2,-128
  803da0:	1000061e 	bne	r2,zero,803dbc <logic+0x327c>
  803da4:	e0bffc17 	ldw	r2,-16(fp)
  803da8:	10801743 	ldbu	r2,93(r2)
  803dac:	10803fcc 	andi	r2,r2,255
  803db0:	1080201c 	xori	r2,r2,128
  803db4:	10bfe004 	addi	r2,r2,-128
  803db8:	10000826 	beq	r2,zero,803ddc <logic+0x329c>
  803dbc:	e0bffc17 	ldw	r2,-16(fp)
  803dc0:	10801803 	ldbu	r2,96(r2)
  803dc4:	10803fcc 	andi	r2,r2,255
  803dc8:	1080201c 	xori	r2,r2,128
  803dcc:	10bfe004 	addi	r2,r2,-128
  803dd0:	1000021e 	bne	r2,zero,803ddc <logic+0x329c>
  803dd4:	00800044 	movi	r2,1
  803dd8:	00000106 	br	803de0 <logic+0x32a0>
  803ddc:	0005883a 	mov	r2,zero
  803de0:	1007883a 	mov	r3,r2
  803de4:	e0bffc17 	ldw	r2,-16(fp)
  803de8:	10c03c45 	stb	r3,241(r2)
  d->_g76 = d->_GO || d->_g102 || d->_g104 && !d->_cg105 || d->_g61_e1 && !d->_cg81;
  803dec:	e0bffc17 	ldw	r2,-16(fp)
  803df0:	108035c3 	ldbu	r2,215(r2)
  803df4:	10803fcc 	andi	r2,r2,255
  803df8:	1080201c 	xori	r2,r2,128
  803dfc:	10bfe004 	addi	r2,r2,-128
  803e00:	10001e1e 	bne	r2,zero,803e7c <logic+0x333c>
  803e04:	e0bffc17 	ldw	r2,-16(fp)
  803e08:	10802b83 	ldbu	r2,174(r2)
  803e0c:	10803fcc 	andi	r2,r2,255
  803e10:	1080201c 	xori	r2,r2,128
  803e14:	10bfe004 	addi	r2,r2,-128
  803e18:	1000181e 	bne	r2,zero,803e7c <logic+0x333c>
  803e1c:	e0bffc17 	ldw	r2,-16(fp)
  803e20:	10802c03 	ldbu	r2,176(r2)
  803e24:	10803fcc 	andi	r2,r2,255
  803e28:	1080201c 	xori	r2,r2,128
  803e2c:	10bfe004 	addi	r2,r2,-128
  803e30:	10000626 	beq	r2,zero,803e4c <logic+0x330c>
  803e34:	e0bffc17 	ldw	r2,-16(fp)
  803e38:	10803c03 	ldbu	r2,240(r2)
  803e3c:	10803fcc 	andi	r2,r2,255
  803e40:	1080201c 	xori	r2,r2,128
  803e44:	10bfe004 	addi	r2,r2,-128
  803e48:	10000c26 	beq	r2,zero,803e7c <logic+0x333c>
  803e4c:	e0bffc17 	ldw	r2,-16(fp)
  803e50:	10804503 	ldbu	r2,276(r2)
  803e54:	10803fcc 	andi	r2,r2,255
  803e58:	1080201c 	xori	r2,r2,128
  803e5c:	10bfe004 	addi	r2,r2,-128
  803e60:	10000826 	beq	r2,zero,803e84 <logic+0x3344>
  803e64:	e0bffc17 	ldw	r2,-16(fp)
  803e68:	10803c43 	ldbu	r2,241(r2)
  803e6c:	10803fcc 	andi	r2,r2,255
  803e70:	1080201c 	xori	r2,r2,128
  803e74:	10bfe004 	addi	r2,r2,-128
  803e78:	1000021e 	bne	r2,zero,803e84 <logic+0x3344>
  803e7c:	00800044 	movi	r2,1
  803e80:	00000106 	br	803e88 <logic+0x3348>
  803e84:	0005883a 	mov	r2,zero
  803e88:	1007883a 	mov	r3,r2
  803e8c:	e0bffc17 	ldw	r2,-16(fp)
  803e90:	10c02785 	stb	r3,158(r2)
  d->_g67_e2 = d->_g61_e1 && d->_cg81;
  803e94:	e0bffc17 	ldw	r2,-16(fp)
  803e98:	10804503 	ldbu	r2,276(r2)
  803e9c:	10803fcc 	andi	r2,r2,255
  803ea0:	1080201c 	xori	r2,r2,128
  803ea4:	10bfe004 	addi	r2,r2,-128
  803ea8:	10000826 	beq	r2,zero,803ecc <logic+0x338c>
  803eac:	e0bffc17 	ldw	r2,-16(fp)
  803eb0:	10803c43 	ldbu	r2,241(r2)
  803eb4:	10803fcc 	andi	r2,r2,255
  803eb8:	1080201c 	xori	r2,r2,128
  803ebc:	10bfe004 	addi	r2,r2,-128
  803ec0:	10000226 	beq	r2,zero,803ecc <logic+0x338c>
  803ec4:	00800044 	movi	r2,1
  803ec8:	00000106 	br	803ed0 <logic+0x3390>
  803ecc:	0005883a 	mov	r2,zero
  803ed0:	1007883a 	mov	r3,r2
  803ed4:	e0bffc17 	ldw	r2,-16(fp)
  803ed8:	10c04545 	stb	r3,277(r2)
  if (d->_g67_e2) {
  803edc:	e0bffc17 	ldw	r2,-16(fp)
  803ee0:	10804543 	ldbu	r2,277(r2)
  803ee4:	10803fcc 	andi	r2,r2,255
  803ee8:	1080201c 	xori	r2,r2,128
  803eec:	10bfe004 	addi	r2,r2,-128
  803ef0:	10000726 	beq	r2,zero,803f10 <logic+0x33d0>
    d->_region3_AEI_cAEI = 0;
  803ef4:	e0bffc17 	ldw	r2,-16(fp)
  803ef8:	10000d15 	stw	zero,52(r2)
  803efc:	10000e15 	stw	zero,56(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  803f00:	e0bffc17 	ldw	r2,-16(fp)
  803f04:	10001a05 	stb	zero,104(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  803f08:	e0bffc17 	ldw	r2,-16(fp)
  803f0c:	10001a45 	stb	zero,105(r2)
  }
  d->_cg83 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803f10:	e0bffc17 	ldw	r2,-16(fp)
  803f14:	10801a03 	ldbu	r2,104(r2)
  803f18:	10803fcc 	andi	r2,r2,255
  803f1c:	1080201c 	xori	r2,r2,128
  803f20:	10bfe004 	addi	r2,r2,-128
  803f24:	1000061e 	bne	r2,zero,803f40 <logic+0x3400>
  803f28:	e0bffc17 	ldw	r2,-16(fp)
  803f2c:	10801a43 	ldbu	r2,105(r2)
  803f30:	10803fcc 	andi	r2,r2,255
  803f34:	1080201c 	xori	r2,r2,128
  803f38:	10bfe004 	addi	r2,r2,-128
  803f3c:	10000226 	beq	r2,zero,803f48 <logic+0x3408>
  803f40:	00800044 	movi	r2,1
  803f44:	00000106 	br	803f4c <logic+0x340c>
  803f48:	0005883a 	mov	r2,zero
  803f4c:	1007883a 	mov	r3,r2
  803f50:	e0bffc17 	ldw	r2,-16(fp)
  803f54:	10c03c85 	stb	r3,242(r2)
  d->_g67 = d->_g67_e2 && !d->_cg83 || d->_g16 && !d->_cg85;
  803f58:	e0bffc17 	ldw	r2,-16(fp)
  803f5c:	10804543 	ldbu	r2,277(r2)
  803f60:	10803fcc 	andi	r2,r2,255
  803f64:	1080201c 	xori	r2,r2,128
  803f68:	10bfe004 	addi	r2,r2,-128
  803f6c:	10000626 	beq	r2,zero,803f88 <logic+0x3448>
  803f70:	e0bffc17 	ldw	r2,-16(fp)
  803f74:	10803c83 	ldbu	r2,242(r2)
  803f78:	10803fcc 	andi	r2,r2,255
  803f7c:	1080201c 	xori	r2,r2,128
  803f80:	10bfe004 	addi	r2,r2,-128
  803f84:	10000c26 	beq	r2,zero,803fb8 <logic+0x3478>
  803f88:	e0bffc17 	ldw	r2,-16(fp)
  803f8c:	10801d43 	ldbu	r2,117(r2)
  803f90:	10803fcc 	andi	r2,r2,255
  803f94:	1080201c 	xori	r2,r2,128
  803f98:	10bfe004 	addi	r2,r2,-128
  803f9c:	10000826 	beq	r2,zero,803fc0 <logic+0x3480>
  803fa0:	e0bffc17 	ldw	r2,-16(fp)
  803fa4:	10803cc3 	ldbu	r2,243(r2)
  803fa8:	10803fcc 	andi	r2,r2,255
  803fac:	1080201c 	xori	r2,r2,128
  803fb0:	10bfe004 	addi	r2,r2,-128
  803fb4:	1000021e 	bne	r2,zero,803fc0 <logic+0x3480>
  803fb8:	00800044 	movi	r2,1
  803fbc:	00000106 	br	803fc4 <logic+0x3484>
  803fc0:	0005883a 	mov	r2,zero
  803fc4:	1007883a 	mov	r3,r2
  803fc8:	e0bffc17 	ldw	r2,-16(fp)
  803fcc:	10c025c5 	stb	r3,151(r2)
  d->_cg87 = d->_region3_AEI_cAEI < d->AEI_Constraint;
  803fd0:	e0bffc17 	ldw	r2,-16(fp)
  803fd4:	14000d17 	ldw	r16,52(r2)
  803fd8:	14400e17 	ldw	r17,56(r2)
  803fdc:	e0bffc17 	ldw	r2,-16(fp)
  803fe0:	10800417 	ldw	r2,16(r2)
  803fe4:	1009883a 	mov	r4,r2
  803fe8:	0806f800 	call	806f80 <__floatsidf>
  803fec:	1009883a 	mov	r4,r2
  803ff0:	180b883a 	mov	r5,r3
  803ff4:	04800044 	movi	r18,1
  803ff8:	200d883a 	mov	r6,r4
  803ffc:	280f883a 	mov	r7,r5
  804000:	8009883a 	mov	r4,r16
  804004:	880b883a 	mov	r5,r17
  804008:	08065900 	call	806590 <__ledf2>
  80400c:	10000116 	blt	r2,zero,804014 <logic+0x34d4>
  804010:	0025883a 	mov	r18,zero
  804014:	9007883a 	mov	r3,r18
  804018:	e0bffc17 	ldw	r2,-16(fp)
  80401c:	10c03d05 	stb	r3,244(r2)
  d->_g61 = d->_g67_e2 && d->_cg87;
  804020:	e0bffc17 	ldw	r2,-16(fp)
  804024:	10804543 	ldbu	r2,277(r2)
  804028:	10803fcc 	andi	r2,r2,255
  80402c:	1080201c 	xori	r2,r2,128
  804030:	10bfe004 	addi	r2,r2,-128
  804034:	10000826 	beq	r2,zero,804058 <logic+0x3518>
  804038:	e0bffc17 	ldw	r2,-16(fp)
  80403c:	10803d03 	ldbu	r2,244(r2)
  804040:	10803fcc 	andi	r2,r2,255
  804044:	1080201c 	xori	r2,r2,128
  804048:	10bfe004 	addi	r2,r2,-128
  80404c:	10000226 	beq	r2,zero,804058 <logic+0x3518>
  804050:	00800044 	movi	r2,1
  804054:	00000106 	br	80405c <logic+0x351c>
  804058:	0005883a 	mov	r2,zero
  80405c:	1007883a 	mov	r3,r2
  804060:	e0bffc17 	ldw	r2,-16(fp)
  804064:	10c024c5 	stb	r3,147(r2)
  if (d->_g61) {
  804068:	e0bffc17 	ldw	r2,-16(fp)
  80406c:	108024c3 	ldbu	r2,147(r2)
  804070:	10803fcc 	andi	r2,r2,255
  804074:	1080201c 	xori	r2,r2,128
  804078:	10bfe004 	addi	r2,r2,-128
  80407c:	10003426 	beq	r2,zero,804150 <logic+0x3610>
    d->sleepT = (d->sleepT < (d->AEI_Constraint - d->_region3_AEI_cAEI)) ? d->sleepT : (d->AEI_Constraint - d->_region3_AEI_cAEI);
  804080:	e0bffc17 	ldw	r2,-16(fp)
  804084:	14001517 	ldw	r16,84(r2)
  804088:	14401617 	ldw	r17,88(r2)
  80408c:	e0bffc17 	ldw	r2,-16(fp)
  804090:	10800417 	ldw	r2,16(r2)
  804094:	1009883a 	mov	r4,r2
  804098:	0806f800 	call	806f80 <__floatsidf>
  80409c:	1011883a 	mov	r8,r2
  8040a0:	1813883a 	mov	r9,r3
  8040a4:	e13ffc17 	ldw	r4,-16(fp)
  8040a8:	20800d17 	ldw	r2,52(r4)
  8040ac:	20c00e17 	ldw	r3,56(r4)
  8040b0:	100d883a 	mov	r6,r2
  8040b4:	180f883a 	mov	r7,r3
  8040b8:	4009883a 	mov	r4,r8
  8040bc:	480b883a 	mov	r5,r9
  8040c0:	08066840 	call	806684 <__subdf3>
  8040c4:	1009883a 	mov	r4,r2
  8040c8:	180b883a 	mov	r5,r3
  8040cc:	2005883a 	mov	r2,r4
  8040d0:	2807883a 	mov	r3,r5
  8040d4:	100d883a 	mov	r6,r2
  8040d8:	180f883a 	mov	r7,r3
  8040dc:	8009883a 	mov	r4,r16
  8040e0:	880b883a 	mov	r5,r17
  8040e4:	08065900 	call	806590 <__ledf2>
  8040e8:	1000040e 	bge	r2,zero,8040fc <logic+0x35bc>
  8040ec:	e13ffc17 	ldw	r4,-16(fp)
  8040f0:	20801517 	ldw	r2,84(r4)
  8040f4:	20c01617 	ldw	r3,88(r4)
  8040f8:	00001206 	br	804144 <logic+0x3604>
  8040fc:	e0bffc17 	ldw	r2,-16(fp)
  804100:	10800417 	ldw	r2,16(r2)
  804104:	1009883a 	mov	r4,r2
  804108:	0806f800 	call	806f80 <__floatsidf>
  80410c:	1011883a 	mov	r8,r2
  804110:	1813883a 	mov	r9,r3
  804114:	e13ffc17 	ldw	r4,-16(fp)
  804118:	20800d17 	ldw	r2,52(r4)
  80411c:	20c00e17 	ldw	r3,56(r4)
  804120:	100d883a 	mov	r6,r2
  804124:	180f883a 	mov	r7,r3
  804128:	4009883a 	mov	r4,r8
  80412c:	480b883a 	mov	r5,r9
  804130:	08066840 	call	806684 <__subdf3>
  804134:	1009883a 	mov	r4,r2
  804138:	180b883a 	mov	r5,r3
  80413c:	2005883a 	mov	r2,r4
  804140:	2807883a 	mov	r3,r5
  804144:	e13ffc17 	ldw	r4,-16(fp)
  804148:	20801515 	stw	r2,84(r4)
  80414c:	20c01615 	stw	r3,88(r4)
  }
  d->_cg88 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804150:	e0bffc17 	ldw	r2,-16(fp)
  804154:	10801a03 	ldbu	r2,104(r2)
  804158:	10803fcc 	andi	r2,r2,255
  80415c:	1080201c 	xori	r2,r2,128
  804160:	10bfe004 	addi	r2,r2,-128
  804164:	1000061e 	bne	r2,zero,804180 <logic+0x3640>
  804168:	e0bffc17 	ldw	r2,-16(fp)
  80416c:	10801a43 	ldbu	r2,105(r2)
  804170:	10803fcc 	andi	r2,r2,255
  804174:	1080201c 	xori	r2,r2,128
  804178:	10bfe004 	addi	r2,r2,-128
  80417c:	10000226 	beq	r2,zero,804188 <logic+0x3648>
  804180:	00800044 	movi	r2,1
  804184:	00000106 	br	80418c <logic+0x364c>
  804188:	0005883a 	mov	r2,zero
  80418c:	1007883a 	mov	r3,r2
  804190:	e0bffc17 	ldw	r2,-16(fp)
  804194:	10c03d45 	stb	r3,245(r2)
  d->_g77 = d->_g61 && !d->_cg88 || d->_g90 && !d->_cg92;
  804198:	e0bffc17 	ldw	r2,-16(fp)
  80419c:	108024c3 	ldbu	r2,147(r2)
  8041a0:	10803fcc 	andi	r2,r2,255
  8041a4:	1080201c 	xori	r2,r2,128
  8041a8:	10bfe004 	addi	r2,r2,-128
  8041ac:	10000626 	beq	r2,zero,8041c8 <logic+0x3688>
  8041b0:	e0bffc17 	ldw	r2,-16(fp)
  8041b4:	10803d43 	ldbu	r2,245(r2)
  8041b8:	10803fcc 	andi	r2,r2,255
  8041bc:	1080201c 	xori	r2,r2,128
  8041c0:	10bfe004 	addi	r2,r2,-128
  8041c4:	10000c26 	beq	r2,zero,8041f8 <logic+0x36b8>
  8041c8:	e0bffc17 	ldw	r2,-16(fp)
  8041cc:	10802943 	ldbu	r2,165(r2)
  8041d0:	10803fcc 	andi	r2,r2,255
  8041d4:	1080201c 	xori	r2,r2,128
  8041d8:	10bfe004 	addi	r2,r2,-128
  8041dc:	10000826 	beq	r2,zero,804200 <logic+0x36c0>
  8041e0:	e0bffc17 	ldw	r2,-16(fp)
  8041e4:	10803d83 	ldbu	r2,246(r2)
  8041e8:	10803fcc 	andi	r2,r2,255
  8041ec:	1080201c 	xori	r2,r2,128
  8041f0:	10bfe004 	addi	r2,r2,-128
  8041f4:	1000021e 	bne	r2,zero,804200 <logic+0x36c0>
  8041f8:	00800044 	movi	r2,1
  8041fc:	00000106 	br	804204 <logic+0x36c4>
  804200:	0005883a 	mov	r2,zero
  804204:	1007883a 	mov	r3,r2
  804208:	e0bffc17 	ldw	r2,-16(fp)
  80420c:	10c027c5 	stb	r3,159(r2)
  d->_g57 = d->_g67_e2 && !d->_cg87;
  804210:	e0bffc17 	ldw	r2,-16(fp)
  804214:	10804543 	ldbu	r2,277(r2)
  804218:	10803fcc 	andi	r2,r2,255
  80421c:	1080201c 	xori	r2,r2,128
  804220:	10bfe004 	addi	r2,r2,-128
  804224:	10000826 	beq	r2,zero,804248 <logic+0x3708>
  804228:	e0bffc17 	ldw	r2,-16(fp)
  80422c:	10803d03 	ldbu	r2,244(r2)
  804230:	10803fcc 	andi	r2,r2,255
  804234:	1080201c 	xori	r2,r2,128
  804238:	10bfe004 	addi	r2,r2,-128
  80423c:	1000021e 	bne	r2,zero,804248 <logic+0x3708>
  804240:	00800044 	movi	r2,1
  804244:	00000106 	br	80424c <logic+0x370c>
  804248:	0005883a 	mov	r2,zero
  80424c:	1007883a 	mov	r3,r2
  804250:	e0bffc17 	ldw	r2,-16(fp)
  804254:	10c02405 	stb	r3,144(r2)
  d->_cg97 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804258:	e0bffc17 	ldw	r2,-16(fp)
  80425c:	10801a03 	ldbu	r2,104(r2)
  804260:	10803fcc 	andi	r2,r2,255
  804264:	1080201c 	xori	r2,r2,128
  804268:	10bfe004 	addi	r2,r2,-128
  80426c:	1000061e 	bne	r2,zero,804288 <logic+0x3748>
  804270:	e0bffc17 	ldw	r2,-16(fp)
  804274:	10801a43 	ldbu	r2,105(r2)
  804278:	10803fcc 	andi	r2,r2,255
  80427c:	1080201c 	xori	r2,r2,128
  804280:	10bfe004 	addi	r2,r2,-128
  804284:	10000226 	beq	r2,zero,804290 <logic+0x3750>
  804288:	00800044 	movi	r2,1
  80428c:	00000106 	br	804294 <logic+0x3754>
  804290:	0005883a 	mov	r2,zero
  804294:	1007883a 	mov	r3,r2
  804298:	e0bffc17 	ldw	r2,-16(fp)
  80429c:	10c03e45 	stb	r3,249(r2)
  d->_g105 = d->_g91 && !d->_cg94 || d->_g57 && !d->_cg97;
  8042a0:	e0bffc17 	ldw	r2,-16(fp)
  8042a4:	10802983 	ldbu	r2,166(r2)
  8042a8:	10803fcc 	andi	r2,r2,255
  8042ac:	1080201c 	xori	r2,r2,128
  8042b0:	10bfe004 	addi	r2,r2,-128
  8042b4:	10000626 	beq	r2,zero,8042d0 <logic+0x3790>
  8042b8:	e0bffc17 	ldw	r2,-16(fp)
  8042bc:	10803e03 	ldbu	r2,248(r2)
  8042c0:	10803fcc 	andi	r2,r2,255
  8042c4:	1080201c 	xori	r2,r2,128
  8042c8:	10bfe004 	addi	r2,r2,-128
  8042cc:	10000c26 	beq	r2,zero,804300 <logic+0x37c0>
  8042d0:	e0bffc17 	ldw	r2,-16(fp)
  8042d4:	10802403 	ldbu	r2,144(r2)
  8042d8:	10803fcc 	andi	r2,r2,255
  8042dc:	1080201c 	xori	r2,r2,128
  8042e0:	10bfe004 	addi	r2,r2,-128
  8042e4:	10000826 	beq	r2,zero,804308 <logic+0x37c8>
  8042e8:	e0bffc17 	ldw	r2,-16(fp)
  8042ec:	10803e43 	ldbu	r2,249(r2)
  8042f0:	10803fcc 	andi	r2,r2,255
  8042f4:	1080201c 	xori	r2,r2,128
  8042f8:	10bfe004 	addi	r2,r2,-128
  8042fc:	1000021e 	bne	r2,zero,804308 <logic+0x37c8>
  804300:	00800044 	movi	r2,1
  804304:	00000106 	br	80430c <logic+0x37cc>
  804308:	0005883a 	mov	r2,zero
  80430c:	1007883a 	mov	r3,r2
  804310:	e0bffc17 	ldw	r2,-16(fp)
  804314:	10c02c45 	stb	r3,177(r2)
  d->_g106 = d->_g67_e2 || d->_g103 && !d->_cg103;
  804318:	e0bffc17 	ldw	r2,-16(fp)
  80431c:	10804543 	ldbu	r2,277(r2)
  804320:	10803fcc 	andi	r2,r2,255
  804324:	1080201c 	xori	r2,r2,128
  804328:	10bfe004 	addi	r2,r2,-128
  80432c:	10000c1e 	bne	r2,zero,804360 <logic+0x3820>
  804330:	e0bffc17 	ldw	r2,-16(fp)
  804334:	10802bc3 	ldbu	r2,175(r2)
  804338:	10803fcc 	andi	r2,r2,255
  80433c:	1080201c 	xori	r2,r2,128
  804340:	10bfe004 	addi	r2,r2,-128
  804344:	10000826 	beq	r2,zero,804368 <logic+0x3828>
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	10803e83 	ldbu	r2,250(r2)
  804350:	10803fcc 	andi	r2,r2,255
  804354:	1080201c 	xori	r2,r2,128
  804358:	10bfe004 	addi	r2,r2,-128
  80435c:	1000021e 	bne	r2,zero,804368 <logic+0x3828>
  804360:	00800044 	movi	r2,1
  804364:	00000106 	br	80436c <logic+0x382c>
  804368:	0005883a 	mov	r2,zero
  80436c:	1007883a 	mov	r3,r2
  804370:	e0bffc17 	ldw	r2,-16(fp)
  804374:	10c02c85 	stb	r3,178(r2)
  d->_g81 = d->_pg85;
  804378:	e0bffc17 	ldw	r2,-16(fp)
  80437c:	10c04fc3 	ldbu	r3,319(r2)
  804380:	e0bffc17 	ldw	r2,-16(fp)
  804384:	10c02805 	stb	r3,160(r2)
  d->_cg110 = (d->VP || d->VS) && !d->VRP;
  804388:	e0bffc17 	ldw	r2,-16(fp)
  80438c:	10801743 	ldbu	r2,93(r2)
  804390:	10803fcc 	andi	r2,r2,255
  804394:	1080201c 	xori	r2,r2,128
  804398:	10bfe004 	addi	r2,r2,-128
  80439c:	1000061e 	bne	r2,zero,8043b8 <logic+0x3878>
  8043a0:	e0bffc17 	ldw	r2,-16(fp)
  8043a4:	10800043 	ldbu	r2,1(r2)
  8043a8:	10803fcc 	andi	r2,r2,255
  8043ac:	1080201c 	xori	r2,r2,128
  8043b0:	10bfe004 	addi	r2,r2,-128
  8043b4:	10000826 	beq	r2,zero,8043d8 <logic+0x3898>
  8043b8:	e0bffc17 	ldw	r2,-16(fp)
  8043bc:	10801803 	ldbu	r2,96(r2)
  8043c0:	10803fcc 	andi	r2,r2,255
  8043c4:	1080201c 	xori	r2,r2,128
  8043c8:	10bfe004 	addi	r2,r2,-128
  8043cc:	1000021e 	bne	r2,zero,8043d8 <logic+0x3898>
  8043d0:	00800044 	movi	r2,1
  8043d4:	00000106 	br	8043dc <logic+0x389c>
  8043d8:	0005883a 	mov	r2,zero
  8043dc:	1007883a 	mov	r3,r2
  8043e0:	e0bffc17 	ldw	r2,-16(fp)
  8043e4:	10c03f05 	stb	r3,252(r2)
  d->_g85 = d->_GO || d->_g81 && !d->_cg110;
  8043e8:	e0bffc17 	ldw	r2,-16(fp)
  8043ec:	108035c3 	ldbu	r2,215(r2)
  8043f0:	10803fcc 	andi	r2,r2,255
  8043f4:	1080201c 	xori	r2,r2,128
  8043f8:	10bfe004 	addi	r2,r2,-128
  8043fc:	10000c1e 	bne	r2,zero,804430 <logic+0x38f0>
  804400:	e0bffc17 	ldw	r2,-16(fp)
  804404:	10802803 	ldbu	r2,160(r2)
  804408:	10803fcc 	andi	r2,r2,255
  80440c:	1080201c 	xori	r2,r2,128
  804410:	10bfe004 	addi	r2,r2,-128
  804414:	10000826 	beq	r2,zero,804438 <logic+0x38f8>
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	10803f03 	ldbu	r2,252(r2)
  804420:	10803fcc 	andi	r2,r2,255
  804424:	1080201c 	xori	r2,r2,128
  804428:	10bfe004 	addi	r2,r2,-128
  80442c:	1000021e 	bne	r2,zero,804438 <logic+0x38f8>
  804430:	00800044 	movi	r2,1
  804434:	00000106 	br	80443c <logic+0x38fc>
  804438:	0005883a 	mov	r2,zero
  80443c:	1007883a 	mov	r3,r2
  804440:	e0bffc17 	ldw	r2,-16(fp)
  804444:	10c02885 	stb	r3,162(r2)
  d->_g88 = d->_g81 && d->_cg110 || d->_g133 && d->_cg134 || d->_g122;
  804448:	e0bffc17 	ldw	r2,-16(fp)
  80444c:	10802803 	ldbu	r2,160(r2)
  804450:	10803fcc 	andi	r2,r2,255
  804454:	1080201c 	xori	r2,r2,128
  804458:	10bfe004 	addi	r2,r2,-128
  80445c:	10000626 	beq	r2,zero,804478 <logic+0x3938>
  804460:	e0bffc17 	ldw	r2,-16(fp)
  804464:	10803f03 	ldbu	r2,252(r2)
  804468:	10803fcc 	andi	r2,r2,255
  80446c:	1080201c 	xori	r2,r2,128
  804470:	10bfe004 	addi	r2,r2,-128
  804474:	1000121e 	bne	r2,zero,8044c0 <logic+0x3980>
  804478:	e0bffc17 	ldw	r2,-16(fp)
  80447c:	108030c3 	ldbu	r2,195(r2)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	1080201c 	xori	r2,r2,128
  804488:	10bfe004 	addi	r2,r2,-128
  80448c:	10000626 	beq	r2,zero,8044a8 <logic+0x3968>
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	10803f43 	ldbu	r2,253(r2)
  804498:	10803fcc 	andi	r2,r2,255
  80449c:	1080201c 	xori	r2,r2,128
  8044a0:	10bfe004 	addi	r2,r2,-128
  8044a4:	1000061e 	bne	r2,zero,8044c0 <logic+0x3980>
  8044a8:	e0bffc17 	ldw	r2,-16(fp)
  8044ac:	10802ec3 	ldbu	r2,187(r2)
  8044b0:	10803fcc 	andi	r2,r2,255
  8044b4:	1080201c 	xori	r2,r2,128
  8044b8:	10bfe004 	addi	r2,r2,-128
  8044bc:	10000226 	beq	r2,zero,8044c8 <logic+0x3988>
  8044c0:	00800044 	movi	r2,1
  8044c4:	00000106 	br	8044cc <logic+0x398c>
  8044c8:	0005883a 	mov	r2,zero
  8044cc:	1007883a 	mov	r3,r2
  8044d0:	e0bffc17 	ldw	r2,-16(fp)
  8044d4:	10c02905 	stb	r3,164(r2)
  if (d->_g88) {
  8044d8:	e0bffc17 	ldw	r2,-16(fp)
  8044dc:	10802903 	ldbu	r2,164(r2)
  8044e0:	10803fcc 	andi	r2,r2,255
  8044e4:	1080201c 	xori	r2,r2,128
  8044e8:	10bfe004 	addi	r2,r2,-128
  8044ec:	10000726 	beq	r2,zero,80450c <logic+0x39cc>
    d->_region4_LRI_cLRI = 0;
  8044f0:	e0bffc17 	ldw	r2,-16(fp)
  8044f4:	10000f15 	stw	zero,60(r2)
  8044f8:	10001015 	stw	zero,64(r2)
    d->_Pacemaker_local__Atrig6 = 0;
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10001a85 	stb	zero,106(r2)
    d->_Pacemaker_local__Atrig7 = 0;
  804504:	e0bffc17 	ldw	r2,-16(fp)
  804508:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg112 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80450c:	e0bffc17 	ldw	r2,-16(fp)
  804510:	10801a83 	ldbu	r2,106(r2)
  804514:	10803fcc 	andi	r2,r2,255
  804518:	1080201c 	xori	r2,r2,128
  80451c:	10bfe004 	addi	r2,r2,-128
  804520:	1000061e 	bne	r2,zero,80453c <logic+0x39fc>
  804524:	e0bffc17 	ldw	r2,-16(fp)
  804528:	10801ac3 	ldbu	r2,107(r2)
  80452c:	10803fcc 	andi	r2,r2,255
  804530:	1080201c 	xori	r2,r2,128
  804534:	10bfe004 	addi	r2,r2,-128
  804538:	10000226 	beq	r2,zero,804544 <logic+0x3a04>
  80453c:	00800044 	movi	r2,1
  804540:	00000106 	br	804548 <logic+0x3a08>
  804544:	0005883a 	mov	r2,zero
  804548:	1007883a 	mov	r3,r2
  80454c:	e0bffc17 	ldw	r2,-16(fp)
  804550:	10c03f85 	stb	r3,254(r2)
  d->_g92 = d->_g88 && !d->_cg112 || d->_g17 && !d->_cg114;
  804554:	e0bffc17 	ldw	r2,-16(fp)
  804558:	10802903 	ldbu	r2,164(r2)
  80455c:	10803fcc 	andi	r2,r2,255
  804560:	1080201c 	xori	r2,r2,128
  804564:	10bfe004 	addi	r2,r2,-128
  804568:	10000626 	beq	r2,zero,804584 <logic+0x3a44>
  80456c:	e0bffc17 	ldw	r2,-16(fp)
  804570:	10803f83 	ldbu	r2,254(r2)
  804574:	10803fcc 	andi	r2,r2,255
  804578:	1080201c 	xori	r2,r2,128
  80457c:	10bfe004 	addi	r2,r2,-128
  804580:	10000c26 	beq	r2,zero,8045b4 <logic+0x3a74>
  804584:	e0bffc17 	ldw	r2,-16(fp)
  804588:	10801d83 	ldbu	r2,118(r2)
  80458c:	10803fcc 	andi	r2,r2,255
  804590:	1080201c 	xori	r2,r2,128
  804594:	10bfe004 	addi	r2,r2,-128
  804598:	10000826 	beq	r2,zero,8045bc <logic+0x3a7c>
  80459c:	e0bffc17 	ldw	r2,-16(fp)
  8045a0:	10803fc3 	ldbu	r2,255(r2)
  8045a4:	10803fcc 	andi	r2,r2,255
  8045a8:	1080201c 	xori	r2,r2,128
  8045ac:	10bfe004 	addi	r2,r2,-128
  8045b0:	1000021e 	bne	r2,zero,8045bc <logic+0x3a7c>
  8045b4:	00800044 	movi	r2,1
  8045b8:	00000106 	br	8045c0 <logic+0x3a80>
  8045bc:	0005883a 	mov	r2,zero
  8045c0:	1007883a 	mov	r3,r2
  8045c4:	e0bffc17 	ldw	r2,-16(fp)
  8045c8:	10c029c5 	stb	r3,167(r2)
  d->_cg116 = d->_region4_LRI_cLRI < d->LRI_Constraint;
  8045cc:	e0bffc17 	ldw	r2,-16(fp)
  8045d0:	14000f17 	ldw	r16,60(r2)
  8045d4:	14401017 	ldw	r17,64(r2)
  8045d8:	e0bffc17 	ldw	r2,-16(fp)
  8045dc:	10800517 	ldw	r2,20(r2)
  8045e0:	1009883a 	mov	r4,r2
  8045e4:	0806f800 	call	806f80 <__floatsidf>
  8045e8:	1009883a 	mov	r4,r2
  8045ec:	180b883a 	mov	r5,r3
  8045f0:	04800044 	movi	r18,1
  8045f4:	200d883a 	mov	r6,r4
  8045f8:	280f883a 	mov	r7,r5
  8045fc:	8009883a 	mov	r4,r16
  804600:	880b883a 	mov	r5,r17
  804604:	08065900 	call	806590 <__ledf2>
  804608:	10000116 	blt	r2,zero,804610 <logic+0x3ad0>
  80460c:	0025883a 	mov	r18,zero
  804610:	9007883a 	mov	r3,r18
  804614:	e0bffc17 	ldw	r2,-16(fp)
  804618:	10c04005 	stb	r3,256(r2)
  d->_g97 = d->_g88 && d->_cg116;
  80461c:	e0bffc17 	ldw	r2,-16(fp)
  804620:	10802903 	ldbu	r2,164(r2)
  804624:	10803fcc 	andi	r2,r2,255
  804628:	1080201c 	xori	r2,r2,128
  80462c:	10bfe004 	addi	r2,r2,-128
  804630:	10000826 	beq	r2,zero,804654 <logic+0x3b14>
  804634:	e0bffc17 	ldw	r2,-16(fp)
  804638:	10804003 	ldbu	r2,256(r2)
  80463c:	10803fcc 	andi	r2,r2,255
  804640:	1080201c 	xori	r2,r2,128
  804644:	10bfe004 	addi	r2,r2,-128
  804648:	10000226 	beq	r2,zero,804654 <logic+0x3b14>
  80464c:	00800044 	movi	r2,1
  804650:	00000106 	br	804658 <logic+0x3b18>
  804654:	0005883a 	mov	r2,zero
  804658:	1007883a 	mov	r3,r2
  80465c:	e0bffc17 	ldw	r2,-16(fp)
  804660:	10c02ac5 	stb	r3,171(r2)
  if (d->_g97) {
  804664:	e0bffc17 	ldw	r2,-16(fp)
  804668:	10802ac3 	ldbu	r2,171(r2)
  80466c:	10803fcc 	andi	r2,r2,255
  804670:	1080201c 	xori	r2,r2,128
  804674:	10bfe004 	addi	r2,r2,-128
  804678:	10003426 	beq	r2,zero,80474c <logic+0x3c0c>
    d->sleepT = (d->sleepT < (d->LRI_Constraint - d->_region4_LRI_cLRI)) ? d->sleepT : (d->LRI_Constraint - d->_region4_LRI_cLRI);
  80467c:	e0bffc17 	ldw	r2,-16(fp)
  804680:	14001517 	ldw	r16,84(r2)
  804684:	14401617 	ldw	r17,88(r2)
  804688:	e0bffc17 	ldw	r2,-16(fp)
  80468c:	10800517 	ldw	r2,20(r2)
  804690:	1009883a 	mov	r4,r2
  804694:	0806f800 	call	806f80 <__floatsidf>
  804698:	1011883a 	mov	r8,r2
  80469c:	1813883a 	mov	r9,r3
  8046a0:	e13ffc17 	ldw	r4,-16(fp)
  8046a4:	20800f17 	ldw	r2,60(r4)
  8046a8:	20c01017 	ldw	r3,64(r4)
  8046ac:	100d883a 	mov	r6,r2
  8046b0:	180f883a 	mov	r7,r3
  8046b4:	4009883a 	mov	r4,r8
  8046b8:	480b883a 	mov	r5,r9
  8046bc:	08066840 	call	806684 <__subdf3>
  8046c0:	1009883a 	mov	r4,r2
  8046c4:	180b883a 	mov	r5,r3
  8046c8:	2005883a 	mov	r2,r4
  8046cc:	2807883a 	mov	r3,r5
  8046d0:	100d883a 	mov	r6,r2
  8046d4:	180f883a 	mov	r7,r3
  8046d8:	8009883a 	mov	r4,r16
  8046dc:	880b883a 	mov	r5,r17
  8046e0:	08065900 	call	806590 <__ledf2>
  8046e4:	1000040e 	bge	r2,zero,8046f8 <logic+0x3bb8>
  8046e8:	e13ffc17 	ldw	r4,-16(fp)
  8046ec:	20801517 	ldw	r2,84(r4)
  8046f0:	20c01617 	ldw	r3,88(r4)
  8046f4:	00001206 	br	804740 <logic+0x3c00>
  8046f8:	e0bffc17 	ldw	r2,-16(fp)
  8046fc:	10800517 	ldw	r2,20(r2)
  804700:	1009883a 	mov	r4,r2
  804704:	0806f800 	call	806f80 <__floatsidf>
  804708:	1011883a 	mov	r8,r2
  80470c:	1813883a 	mov	r9,r3
  804710:	e13ffc17 	ldw	r4,-16(fp)
  804714:	20800f17 	ldw	r2,60(r4)
  804718:	20c01017 	ldw	r3,64(r4)
  80471c:	100d883a 	mov	r6,r2
  804720:	180f883a 	mov	r7,r3
  804724:	4009883a 	mov	r4,r8
  804728:	480b883a 	mov	r5,r9
  80472c:	08066840 	call	806684 <__subdf3>
  804730:	1009883a 	mov	r4,r2
  804734:	180b883a 	mov	r5,r3
  804738:	2005883a 	mov	r2,r4
  80473c:	2807883a 	mov	r3,r5
  804740:	e13ffc17 	ldw	r4,-16(fp)
  804744:	20801515 	stw	r2,84(r4)
  804748:	20c01615 	stw	r3,88(r4)
  }
  d->_cg117 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	10801a83 	ldbu	r2,106(r2)
  804754:	10803fcc 	andi	r2,r2,255
  804758:	1080201c 	xori	r2,r2,128
  80475c:	10bfe004 	addi	r2,r2,-128
  804760:	1000061e 	bne	r2,zero,80477c <logic+0x3c3c>
  804764:	e0bffc17 	ldw	r2,-16(fp)
  804768:	10801ac3 	ldbu	r2,107(r2)
  80476c:	10803fcc 	andi	r2,r2,255
  804770:	1080201c 	xori	r2,r2,128
  804774:	10bfe004 	addi	r2,r2,-128
  804778:	10000226 	beq	r2,zero,804784 <logic+0x3c44>
  80477c:	00800044 	movi	r2,1
  804780:	00000106 	br	804788 <logic+0x3c48>
  804784:	0005883a 	mov	r2,zero
  804788:	1007883a 	mov	r3,r2
  80478c:	e0bffc17 	ldw	r2,-16(fp)
  804790:	10c04045 	stb	r3,257(r2)
  d->_g94 = d->_g97 && !d->_cg117 || d->_g119 && !d->_cg121;
  804794:	e0bffc17 	ldw	r2,-16(fp)
  804798:	10802ac3 	ldbu	r2,171(r2)
  80479c:	10803fcc 	andi	r2,r2,255
  8047a0:	1080201c 	xori	r2,r2,128
  8047a4:	10bfe004 	addi	r2,r2,-128
  8047a8:	10000626 	beq	r2,zero,8047c4 <logic+0x3c84>
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10804043 	ldbu	r2,257(r2)
  8047b4:	10803fcc 	andi	r2,r2,255
  8047b8:	1080201c 	xori	r2,r2,128
  8047bc:	10bfe004 	addi	r2,r2,-128
  8047c0:	10000c26 	beq	r2,zero,8047f4 <logic+0x3cb4>
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	10802e03 	ldbu	r2,184(r2)
  8047cc:	10803fcc 	andi	r2,r2,255
  8047d0:	1080201c 	xori	r2,r2,128
  8047d4:	10bfe004 	addi	r2,r2,-128
  8047d8:	10000826 	beq	r2,zero,8047fc <logic+0x3cbc>
  8047dc:	e0bffc17 	ldw	r2,-16(fp)
  8047e0:	10804083 	ldbu	r2,258(r2)
  8047e4:	10803fcc 	andi	r2,r2,255
  8047e8:	1080201c 	xori	r2,r2,128
  8047ec:	10bfe004 	addi	r2,r2,-128
  8047f0:	1000021e 	bne	r2,zero,8047fc <logic+0x3cbc>
  8047f4:	00800044 	movi	r2,1
  8047f8:	00000106 	br	804800 <logic+0x3cc0>
  8047fc:	0005883a 	mov	r2,zero
  804800:	1007883a 	mov	r3,r2
  804804:	e0bffc17 	ldw	r2,-16(fp)
  804808:	10c02a45 	stb	r3,169(r2)
  d->_g103 = d->_g88 && !d->_cg116;
  80480c:	e0bffc17 	ldw	r2,-16(fp)
  804810:	10802903 	ldbu	r2,164(r2)
  804814:	10803fcc 	andi	r2,r2,255
  804818:	1080201c 	xori	r2,r2,128
  80481c:	10bfe004 	addi	r2,r2,-128
  804820:	10000826 	beq	r2,zero,804844 <logic+0x3d04>
  804824:	e0bffc17 	ldw	r2,-16(fp)
  804828:	10804003 	ldbu	r2,256(r2)
  80482c:	10803fcc 	andi	r2,r2,255
  804830:	1080201c 	xori	r2,r2,128
  804834:	10bfe004 	addi	r2,r2,-128
  804838:	1000021e 	bne	r2,zero,804844 <logic+0x3d04>
  80483c:	00800044 	movi	r2,1
  804840:	00000106 	br	804848 <logic+0x3d08>
  804844:	0005883a 	mov	r2,zero
  804848:	1007883a 	mov	r3,r2
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	10c02bc5 	stb	r3,175(r2)
  d->_cg126 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  804854:	e0bffc17 	ldw	r2,-16(fp)
  804858:	10801a83 	ldbu	r2,106(r2)
  80485c:	10803fcc 	andi	r2,r2,255
  804860:	1080201c 	xori	r2,r2,128
  804864:	10bfe004 	addi	r2,r2,-128
  804868:	1000061e 	bne	r2,zero,804884 <logic+0x3d44>
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10801ac3 	ldbu	r2,107(r2)
  804874:	10803fcc 	andi	r2,r2,255
  804878:	1080201c 	xori	r2,r2,128
  80487c:	10bfe004 	addi	r2,r2,-128
  804880:	10000226 	beq	r2,zero,80488c <logic+0x3d4c>
  804884:	00800044 	movi	r2,1
  804888:	00000106 	br	804890 <logic+0x3d50>
  80488c:	0005883a 	mov	r2,zero
  804890:	1007883a 	mov	r3,r2
  804894:	e0bffc17 	ldw	r2,-16(fp)
  804898:	10c04145 	stb	r3,261(r2)
  d->_g82 = d->_g120 && !d->_cg123 || d->_g103 && !d->_cg126;
  80489c:	e0bffc17 	ldw	r2,-16(fp)
  8048a0:	10802e43 	ldbu	r2,185(r2)
  8048a4:	10803fcc 	andi	r2,r2,255
  8048a8:	1080201c 	xori	r2,r2,128
  8048ac:	10bfe004 	addi	r2,r2,-128
  8048b0:	10000626 	beq	r2,zero,8048cc <logic+0x3d8c>
  8048b4:	e0bffc17 	ldw	r2,-16(fp)
  8048b8:	10804103 	ldbu	r2,260(r2)
  8048bc:	10803fcc 	andi	r2,r2,255
  8048c0:	1080201c 	xori	r2,r2,128
  8048c4:	10bfe004 	addi	r2,r2,-128
  8048c8:	10000c26 	beq	r2,zero,8048fc <logic+0x3dbc>
  8048cc:	e0bffc17 	ldw	r2,-16(fp)
  8048d0:	10802bc3 	ldbu	r2,175(r2)
  8048d4:	10803fcc 	andi	r2,r2,255
  8048d8:	1080201c 	xori	r2,r2,128
  8048dc:	10bfe004 	addi	r2,r2,-128
  8048e0:	10000826 	beq	r2,zero,804904 <logic+0x3dc4>
  8048e4:	e0bffc17 	ldw	r2,-16(fp)
  8048e8:	10804143 	ldbu	r2,261(r2)
  8048ec:	10803fcc 	andi	r2,r2,255
  8048f0:	1080201c 	xori	r2,r2,128
  8048f4:	10bfe004 	addi	r2,r2,-128
  8048f8:	1000021e 	bne	r2,zero,804904 <logic+0x3dc4>
  8048fc:	00800044 	movi	r2,1
  804900:	00000106 	br	804908 <logic+0x3dc8>
  804904:	0005883a 	mov	r2,zero
  804908:	1007883a 	mov	r3,r2
  80490c:	e0bffc17 	ldw	r2,-16(fp)
  804910:	10c02845 	stb	r3,161(r2)
  d->_g134 = d->_g88 || d->_g132 && !d->_cg132;
  804914:	e0bffc17 	ldw	r2,-16(fp)
  804918:	10802903 	ldbu	r2,164(r2)
  80491c:	10803fcc 	andi	r2,r2,255
  804920:	1080201c 	xori	r2,r2,128
  804924:	10bfe004 	addi	r2,r2,-128
  804928:	10000c1e 	bne	r2,zero,80495c <logic+0x3e1c>
  80492c:	e0bffc17 	ldw	r2,-16(fp)
  804930:	10803083 	ldbu	r2,194(r2)
  804934:	10803fcc 	andi	r2,r2,255
  804938:	1080201c 	xori	r2,r2,128
  80493c:	10bfe004 	addi	r2,r2,-128
  804940:	10000826 	beq	r2,zero,804964 <logic+0x3e24>
  804944:	e0bffc17 	ldw	r2,-16(fp)
  804948:	10804183 	ldbu	r2,262(r2)
  80494c:	10803fcc 	andi	r2,r2,255
  804950:	1080201c 	xori	r2,r2,128
  804954:	10bfe004 	addi	r2,r2,-128
  804958:	1000021e 	bne	r2,zero,804964 <logic+0x3e24>
  80495c:	00800044 	movi	r2,1
  804960:	00000106 	br	804968 <logic+0x3e28>
  804964:	0005883a 	mov	r2,zero
  804968:	1007883a 	mov	r3,r2
  80496c:	e0bffc17 	ldw	r2,-16(fp)
  804970:	10c03105 	stb	r3,196(r2)
  d->_g135 = d->_pg139;
  804974:	e0bffc17 	ldw	r2,-16(fp)
  804978:	10c05003 	ldbu	r3,320(r2)
  80497c:	e0bffc17 	ldw	r2,-16(fp)
  804980:	10c03145 	stb	r3,197(r2)
  if (d->_g135) {
  804984:	e0bffc17 	ldw	r2,-16(fp)
  804988:	10803143 	ldbu	r2,197(r2)
  80498c:	10803fcc 	andi	r2,r2,255
  804990:	1080201c 	xori	r2,r2,128
  804994:	10bfe004 	addi	r2,r2,-128
  804998:	10001226 	beq	r2,zero,8049e4 <logic+0x3ea4>
    d->_region5_URI_cURI += d->deltaT;
  80499c:	e13ffc17 	ldw	r4,-16(fp)
  8049a0:	20801117 	ldw	r2,68(r4)
  8049a4:	20c01217 	ldw	r3,72(r4)
  8049a8:	e1bffc17 	ldw	r6,-16(fp)
  8049ac:	31001317 	ldw	r4,76(r6)
  8049b0:	31401417 	ldw	r5,80(r6)
  8049b4:	200d883a 	mov	r6,r4
  8049b8:	280f883a 	mov	r7,r5
  8049bc:	1009883a 	mov	r4,r2
  8049c0:	180b883a 	mov	r5,r3
  8049c4:	0805c080 	call	805c08 <__adddf3>
  8049c8:	1009883a 	mov	r4,r2
  8049cc:	180b883a 	mov	r5,r3
  8049d0:	2005883a 	mov	r2,r4
  8049d4:	2807883a 	mov	r3,r5
  8049d8:	e13ffc17 	ldw	r4,-16(fp)
  8049dc:	20801115 	stw	r2,68(r4)
  8049e0:	20c01215 	stw	r3,72(r4)
  }
  d->_g110 = d->_pg148;
  8049e4:	e0bffc17 	ldw	r2,-16(fp)
  8049e8:	10c05043 	ldbu	r3,321(r2)
  8049ec:	e0bffc17 	ldw	r2,-16(fp)
  8049f0:	10c02cc5 	stb	r3,179(r2)
  d->_cg157 = d->_region5_URI_cURI >= d->URI_Constraint;
  8049f4:	e0bffc17 	ldw	r2,-16(fp)
  8049f8:	14001117 	ldw	r16,68(r2)
  8049fc:	14401217 	ldw	r17,72(r2)
  804a00:	e0bffc17 	ldw	r2,-16(fp)
  804a04:	10800617 	ldw	r2,24(r2)
  804a08:	1009883a 	mov	r4,r2
  804a0c:	0806f800 	call	806f80 <__floatsidf>
  804a10:	1009883a 	mov	r4,r2
  804a14:	180b883a 	mov	r5,r3
  804a18:	04800044 	movi	r18,1
  804a1c:	200d883a 	mov	r6,r4
  804a20:	280f883a 	mov	r7,r5
  804a24:	8009883a 	mov	r4,r16
  804a28:	880b883a 	mov	r5,r17
  804a2c:	08064b40 	call	8064b4 <__gedf2>
  804a30:	1000010e 	bge	r2,zero,804a38 <logic+0x3ef8>
  804a34:	0025883a 	mov	r18,zero
  804a38:	9007883a 	mov	r3,r18
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10c04345 	stb	r3,269(r2)
  d->_g114 = d->_g110 && d->_cg157;
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10802cc3 	ldbu	r2,179(r2)
  804a4c:	10803fcc 	andi	r2,r2,255
  804a50:	1080201c 	xori	r2,r2,128
  804a54:	10bfe004 	addi	r2,r2,-128
  804a58:	10000826 	beq	r2,zero,804a7c <logic+0x3f3c>
  804a5c:	e0bffc17 	ldw	r2,-16(fp)
  804a60:	10804343 	ldbu	r2,269(r2)
  804a64:	10803fcc 	andi	r2,r2,255
  804a68:	1080201c 	xori	r2,r2,128
  804a6c:	10bfe004 	addi	r2,r2,-128
  804a70:	10000226 	beq	r2,zero,804a7c <logic+0x3f3c>
  804a74:	00800044 	movi	r2,1
  804a78:	00000106 	br	804a80 <logic+0x3f40>
  804a7c:	0005883a 	mov	r2,zero
  804a80:	1007883a 	mov	r3,r2
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	10c02d45 	stb	r3,181(r2)
  if (d->_g114) {
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	10802d43 	ldbu	r2,181(r2)
  804a94:	10803fcc 	andi	r2,r2,255
  804a98:	1080201c 	xori	r2,r2,128
  804a9c:	10bfe004 	addi	r2,r2,-128
  804aa0:	10000326 	beq	r2,zero,804ab0 <logic+0x3f70>
    d->_Pacemaker_local__Atrig8 = 1;
  804aa4:	e0bffc17 	ldw	r2,-16(fp)
  804aa8:	00c00044 	movi	r3,1
  804aac:	10c01b05 	stb	r3,108(r2)
  }
  d->_g117 = d->_pg149_e2;
  804ab0:	e0bffc17 	ldw	r2,-16(fp)
  804ab4:	10c05083 	ldbu	r3,322(r2)
  804ab8:	e0bffc17 	ldw	r2,-16(fp)
  804abc:	10c02dc5 	stb	r3,183(r2)
  d->_cg139 = (d->VS || d->VP) && !d->VRP;
  804ac0:	e0bffc17 	ldw	r2,-16(fp)
  804ac4:	10800043 	ldbu	r2,1(r2)
  804ac8:	10803fcc 	andi	r2,r2,255
  804acc:	1080201c 	xori	r2,r2,128
  804ad0:	10bfe004 	addi	r2,r2,-128
  804ad4:	1000061e 	bne	r2,zero,804af0 <logic+0x3fb0>
  804ad8:	e0bffc17 	ldw	r2,-16(fp)
  804adc:	10801743 	ldbu	r2,93(r2)
  804ae0:	10803fcc 	andi	r2,r2,255
  804ae4:	1080201c 	xori	r2,r2,128
  804ae8:	10bfe004 	addi	r2,r2,-128
  804aec:	10000826 	beq	r2,zero,804b10 <logic+0x3fd0>
  804af0:	e0bffc17 	ldw	r2,-16(fp)
  804af4:	10801803 	ldbu	r2,96(r2)
  804af8:	10803fcc 	andi	r2,r2,255
  804afc:	1080201c 	xori	r2,r2,128
  804b00:	10bfe004 	addi	r2,r2,-128
  804b04:	1000021e 	bne	r2,zero,804b10 <logic+0x3fd0>
  804b08:	00800044 	movi	r2,1
  804b0c:	00000106 	br	804b14 <logic+0x3fd4>
  804b10:	0005883a 	mov	r2,zero
  804b14:	1007883a 	mov	r3,r2
  804b18:	e0bffc17 	ldw	r2,-16(fp)
  804b1c:	10c04205 	stb	r3,264(r2)
  d->_g121 = d->_g117 && d->_cg139;
  804b20:	e0bffc17 	ldw	r2,-16(fp)
  804b24:	10802dc3 	ldbu	r2,183(r2)
  804b28:	10803fcc 	andi	r2,r2,255
  804b2c:	1080201c 	xori	r2,r2,128
  804b30:	10bfe004 	addi	r2,r2,-128
  804b34:	10000826 	beq	r2,zero,804b58 <logic+0x4018>
  804b38:	e0bffc17 	ldw	r2,-16(fp)
  804b3c:	10804203 	ldbu	r2,264(r2)
  804b40:	10803fcc 	andi	r2,r2,255
  804b44:	1080201c 	xori	r2,r2,128
  804b48:	10bfe004 	addi	r2,r2,-128
  804b4c:	10000226 	beq	r2,zero,804b58 <logic+0x4018>
  804b50:	00800044 	movi	r2,1
  804b54:	00000106 	br	804b5c <logic+0x401c>
  804b58:	0005883a 	mov	r2,zero
  804b5c:	1007883a 	mov	r3,r2
  804b60:	e0bffc17 	ldw	r2,-16(fp)
  804b64:	10c02e85 	stb	r3,186(r2)
  if (d->_g121) {
  804b68:	e0bffc17 	ldw	r2,-16(fp)
  804b6c:	10802e83 	ldbu	r2,186(r2)
  804b70:	10803fcc 	andi	r2,r2,255
  804b74:	1080201c 	xori	r2,r2,128
  804b78:	10bfe004 	addi	r2,r2,-128
  804b7c:	10000526 	beq	r2,zero,804b94 <logic+0x4054>
    d->_region5_URI_cURI = 0;
  804b80:	e0bffc17 	ldw	r2,-16(fp)
  804b84:	10001115 	stw	zero,68(r2)
  804b88:	10001215 	stw	zero,72(r2)
    d->_Pacemaker_local__Atrig8 = 0;
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10001b05 	stb	zero,108(r2)
  }
  d->_g123 = d->_g121 || d->_g145;
  804b94:	e0bffc17 	ldw	r2,-16(fp)
  804b98:	10802e83 	ldbu	r2,186(r2)
  804b9c:	10803fcc 	andi	r2,r2,255
  804ba0:	1080201c 	xori	r2,r2,128
  804ba4:	10bfe004 	addi	r2,r2,-128
  804ba8:	1000061e 	bne	r2,zero,804bc4 <logic+0x4084>
  804bac:	e0bffc17 	ldw	r2,-16(fp)
  804bb0:	10803283 	ldbu	r2,202(r2)
  804bb4:	10803fcc 	andi	r2,r2,255
  804bb8:	1080201c 	xori	r2,r2,128
  804bbc:	10bfe004 	addi	r2,r2,-128
  804bc0:	10000226 	beq	r2,zero,804bcc <logic+0x408c>
  804bc4:	00800044 	movi	r2,1
  804bc8:	00000106 	br	804bd0 <logic+0x4090>
  804bcc:	0005883a 	mov	r2,zero
  804bd0:	1007883a 	mov	r3,r2
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10c02f05 	stb	r3,188(r2)
  d->_cg142 = d->_Pacemaker_local__Atrig8;
  804bdc:	e0bffc17 	ldw	r2,-16(fp)
  804be0:	10c01b03 	ldbu	r3,108(r2)
  804be4:	e0bffc17 	ldw	r2,-16(fp)
  804be8:	10c04245 	stb	r3,265(r2)
  d->_g126 = d->_g123 && !d->_cg142;
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	10802f03 	ldbu	r2,188(r2)
  804bf4:	10803fcc 	andi	r2,r2,255
  804bf8:	1080201c 	xori	r2,r2,128
  804bfc:	10bfe004 	addi	r2,r2,-128
  804c00:	10000826 	beq	r2,zero,804c24 <logic+0x40e4>
  804c04:	e0bffc17 	ldw	r2,-16(fp)
  804c08:	10804243 	ldbu	r2,265(r2)
  804c0c:	10803fcc 	andi	r2,r2,255
  804c10:	1080201c 	xori	r2,r2,128
  804c14:	10bfe004 	addi	r2,r2,-128
  804c18:	1000021e 	bne	r2,zero,804c24 <logic+0x40e4>
  804c1c:	00800044 	movi	r2,1
  804c20:	00000106 	br	804c28 <logic+0x40e8>
  804c24:	0005883a 	mov	r2,zero
  804c28:	1007883a 	mov	r3,r2
  804c2c:	e0bffc17 	ldw	r2,-16(fp)
  804c30:	10c02f85 	stb	r3,190(r2)
  d->_g132 = !d->_g126;
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10802f83 	ldbu	r2,190(r2)
  804c3c:	10803fcc 	andi	r2,r2,255
  804c40:	1080201c 	xori	r2,r2,128
  804c44:	10bfe004 	addi	r2,r2,-128
  804c48:	1005003a 	cmpeq	r2,r2,zero
  804c4c:	1007883a 	mov	r3,r2
  804c50:	e0bffc17 	ldw	r2,-16(fp)
  804c54:	10c03085 	stb	r3,194(r2)
  d->_g111 = d->_g123 && d->_cg142;
  804c58:	e0bffc17 	ldw	r2,-16(fp)
  804c5c:	10802f03 	ldbu	r2,188(r2)
  804c60:	10803fcc 	andi	r2,r2,255
  804c64:	1080201c 	xori	r2,r2,128
  804c68:	10bfe004 	addi	r2,r2,-128
  804c6c:	10000826 	beq	r2,zero,804c90 <logic+0x4150>
  804c70:	e0bffc17 	ldw	r2,-16(fp)
  804c74:	10804243 	ldbu	r2,265(r2)
  804c78:	10803fcc 	andi	r2,r2,255
  804c7c:	1080201c 	xori	r2,r2,128
  804c80:	10bfe004 	addi	r2,r2,-128
  804c84:	10000226 	beq	r2,zero,804c90 <logic+0x4150>
  804c88:	00800044 	movi	r2,1
  804c8c:	00000106 	br	804c94 <logic+0x4154>
  804c90:	0005883a 	mov	r2,zero
  804c94:	1007883a 	mov	r3,r2
  804c98:	e0bffc17 	ldw	r2,-16(fp)
  804c9c:	10c02d05 	stb	r3,180(r2)
  d->_g145 = d->_pg150;
  804ca0:	e0bffc17 	ldw	r2,-16(fp)
  804ca4:	10c050c3 	ldbu	r3,323(r2)
  804ca8:	e0bffc17 	ldw	r2,-16(fp)
  804cac:	10c03285 	stb	r3,202(r2)
  d->_g142 = d->_pg153;
  804cb0:	e0bffc17 	ldw	r2,-16(fp)
  804cb4:	10c05103 	ldbu	r3,324(r2)
  804cb8:	e0bffc17 	ldw	r2,-16(fp)
  804cbc:	10c03205 	stb	r3,200(r2)
  d->_g154 = d->_g121 || d->_g145 || d->_g142;
  804cc0:	e0bffc17 	ldw	r2,-16(fp)
  804cc4:	10802e83 	ldbu	r2,186(r2)
  804cc8:	10803fcc 	andi	r2,r2,255
  804ccc:	1080201c 	xori	r2,r2,128
  804cd0:	10bfe004 	addi	r2,r2,-128
  804cd4:	10000c1e 	bne	r2,zero,804d08 <logic+0x41c8>
  804cd8:	e0bffc17 	ldw	r2,-16(fp)
  804cdc:	10803283 	ldbu	r2,202(r2)
  804ce0:	10803fcc 	andi	r2,r2,255
  804ce4:	1080201c 	xori	r2,r2,128
  804ce8:	10bfe004 	addi	r2,r2,-128
  804cec:	1000061e 	bne	r2,zero,804d08 <logic+0x41c8>
  804cf0:	e0bffc17 	ldw	r2,-16(fp)
  804cf4:	10803203 	ldbu	r2,200(r2)
  804cf8:	10803fcc 	andi	r2,r2,255
  804cfc:	1080201c 	xori	r2,r2,128
  804d00:	10bfe004 	addi	r2,r2,-128
  804d04:	10000226 	beq	r2,zero,804d10 <logic+0x41d0>
  804d08:	00800044 	movi	r2,1
  804d0c:	00000106 	br	804d14 <logic+0x41d4>
  804d10:	0005883a 	mov	r2,zero
  804d14:	1007883a 	mov	r3,r2
  804d18:	e0bffc17 	ldw	r2,-16(fp)
  804d1c:	10c03485 	stb	r3,210(r2)
  d->_cg147 = d->_region5_URI_cURI < d->URI_Constraint;
  804d20:	e0bffc17 	ldw	r2,-16(fp)
  804d24:	14001117 	ldw	r16,68(r2)
  804d28:	14401217 	ldw	r17,72(r2)
  804d2c:	e0bffc17 	ldw	r2,-16(fp)
  804d30:	10800617 	ldw	r2,24(r2)
  804d34:	1009883a 	mov	r4,r2
  804d38:	0806f800 	call	806f80 <__floatsidf>
  804d3c:	1009883a 	mov	r4,r2
  804d40:	180b883a 	mov	r5,r3
  804d44:	04800044 	movi	r18,1
  804d48:	200d883a 	mov	r6,r4
  804d4c:	280f883a 	mov	r7,r5
  804d50:	8009883a 	mov	r4,r16
  804d54:	880b883a 	mov	r5,r17
  804d58:	08065900 	call	806590 <__ledf2>
  804d5c:	10000116 	blt	r2,zero,804d64 <logic+0x4224>
  804d60:	0025883a 	mov	r18,zero
  804d64:	9007883a 	mov	r3,r18
  804d68:	e0bffc17 	ldw	r2,-16(fp)
  804d6c:	10c04285 	stb	r3,266(r2)
  d->_g151 = d->_g154 && !d->_cg147;
  804d70:	e0bffc17 	ldw	r2,-16(fp)
  804d74:	10803483 	ldbu	r2,210(r2)
  804d78:	10803fcc 	andi	r2,r2,255
  804d7c:	1080201c 	xori	r2,r2,128
  804d80:	10bfe004 	addi	r2,r2,-128
  804d84:	10000826 	beq	r2,zero,804da8 <logic+0x4268>
  804d88:	e0bffc17 	ldw	r2,-16(fp)
  804d8c:	10804283 	ldbu	r2,266(r2)
  804d90:	10803fcc 	andi	r2,r2,255
  804d94:	1080201c 	xori	r2,r2,128
  804d98:	10bfe004 	addi	r2,r2,-128
  804d9c:	1000021e 	bne	r2,zero,804da8 <logic+0x4268>
  804da0:	00800044 	movi	r2,1
  804da4:	00000106 	br	804dac <logic+0x426c>
  804da8:	0005883a 	mov	r2,zero
  804dac:	1007883a 	mov	r3,r2
  804db0:	e0bffc17 	ldw	r2,-16(fp)
  804db4:	10c033c5 	stb	r3,207(r2)
  d->_cg152 = d->_Pacemaker_local__Atrig8;
  804db8:	e0bffc17 	ldw	r2,-16(fp)
  804dbc:	10c01b03 	ldbu	r3,108(r2)
  804dc0:	e0bffc17 	ldw	r2,-16(fp)
  804dc4:	10c04305 	stb	r3,268(r2)
  d->_g153 = d->_g151 && !d->_cg152;
  804dc8:	e0bffc17 	ldw	r2,-16(fp)
  804dcc:	108033c3 	ldbu	r2,207(r2)
  804dd0:	10803fcc 	andi	r2,r2,255
  804dd4:	1080201c 	xori	r2,r2,128
  804dd8:	10bfe004 	addi	r2,r2,-128
  804ddc:	10000826 	beq	r2,zero,804e00 <logic+0x42c0>
  804de0:	e0bffc17 	ldw	r2,-16(fp)
  804de4:	10804303 	ldbu	r2,268(r2)
  804de8:	10803fcc 	andi	r2,r2,255
  804dec:	1080201c 	xori	r2,r2,128
  804df0:	10bfe004 	addi	r2,r2,-128
  804df4:	1000021e 	bne	r2,zero,804e00 <logic+0x42c0>
  804df8:	00800044 	movi	r2,1
  804dfc:	00000106 	br	804e04 <logic+0x42c4>
  804e00:	0005883a 	mov	r2,zero
  804e04:	1007883a 	mov	r3,r2
  804e08:	e0bffc17 	ldw	r2,-16(fp)
  804e0c:	10c03445 	stb	r3,209(r2)
  d->_g147 = d->_g154 && d->_cg147;
  804e10:	e0bffc17 	ldw	r2,-16(fp)
  804e14:	10803483 	ldbu	r2,210(r2)
  804e18:	10803fcc 	andi	r2,r2,255
  804e1c:	1080201c 	xori	r2,r2,128
  804e20:	10bfe004 	addi	r2,r2,-128
  804e24:	10000826 	beq	r2,zero,804e48 <logic+0x4308>
  804e28:	e0bffc17 	ldw	r2,-16(fp)
  804e2c:	10804283 	ldbu	r2,266(r2)
  804e30:	10803fcc 	andi	r2,r2,255
  804e34:	1080201c 	xori	r2,r2,128
  804e38:	10bfe004 	addi	r2,r2,-128
  804e3c:	10000226 	beq	r2,zero,804e48 <logic+0x4308>
  804e40:	00800044 	movi	r2,1
  804e44:	00000106 	br	804e4c <logic+0x430c>
  804e48:	0005883a 	mov	r2,zero
  804e4c:	1007883a 	mov	r3,r2
  804e50:	e0bffc17 	ldw	r2,-16(fp)
  804e54:	10c032c5 	stb	r3,203(r2)
  if (d->_g147) {
  804e58:	e0bffc17 	ldw	r2,-16(fp)
  804e5c:	108032c3 	ldbu	r2,203(r2)
  804e60:	10803fcc 	andi	r2,r2,255
  804e64:	1080201c 	xori	r2,r2,128
  804e68:	10bfe004 	addi	r2,r2,-128
  804e6c:	10003426 	beq	r2,zero,804f40 <logic+0x4400>
    d->sleepT = (d->sleepT < (d->URI_Constraint - d->_region5_URI_cURI)) ? d->sleepT : (d->URI_Constraint - d->_region5_URI_cURI);
  804e70:	e0bffc17 	ldw	r2,-16(fp)
  804e74:	14001517 	ldw	r16,84(r2)
  804e78:	14401617 	ldw	r17,88(r2)
  804e7c:	e0bffc17 	ldw	r2,-16(fp)
  804e80:	10800617 	ldw	r2,24(r2)
  804e84:	1009883a 	mov	r4,r2
  804e88:	0806f800 	call	806f80 <__floatsidf>
  804e8c:	1011883a 	mov	r8,r2
  804e90:	1813883a 	mov	r9,r3
  804e94:	e13ffc17 	ldw	r4,-16(fp)
  804e98:	20801117 	ldw	r2,68(r4)
  804e9c:	20c01217 	ldw	r3,72(r4)
  804ea0:	100d883a 	mov	r6,r2
  804ea4:	180f883a 	mov	r7,r3
  804ea8:	4009883a 	mov	r4,r8
  804eac:	480b883a 	mov	r5,r9
  804eb0:	08066840 	call	806684 <__subdf3>
  804eb4:	1009883a 	mov	r4,r2
  804eb8:	180b883a 	mov	r5,r3
  804ebc:	2005883a 	mov	r2,r4
  804ec0:	2807883a 	mov	r3,r5
  804ec4:	100d883a 	mov	r6,r2
  804ec8:	180f883a 	mov	r7,r3
  804ecc:	8009883a 	mov	r4,r16
  804ed0:	880b883a 	mov	r5,r17
  804ed4:	08065900 	call	806590 <__ledf2>
  804ed8:	1000040e 	bge	r2,zero,804eec <logic+0x43ac>
  804edc:	e13ffc17 	ldw	r4,-16(fp)
  804ee0:	20801517 	ldw	r2,84(r4)
  804ee4:	20c01617 	ldw	r3,88(r4)
  804ee8:	00001206 	br	804f34 <logic+0x43f4>
  804eec:	e0bffc17 	ldw	r2,-16(fp)
  804ef0:	10800617 	ldw	r2,24(r2)
  804ef4:	1009883a 	mov	r4,r2
  804ef8:	0806f800 	call	806f80 <__floatsidf>
  804efc:	1011883a 	mov	r8,r2
  804f00:	1813883a 	mov	r9,r3
  804f04:	e13ffc17 	ldw	r4,-16(fp)
  804f08:	20801117 	ldw	r2,68(r4)
  804f0c:	20c01217 	ldw	r3,72(r4)
  804f10:	100d883a 	mov	r6,r2
  804f14:	180f883a 	mov	r7,r3
  804f18:	4009883a 	mov	r4,r8
  804f1c:	480b883a 	mov	r5,r9
  804f20:	08066840 	call	806684 <__subdf3>
  804f24:	1009883a 	mov	r4,r2
  804f28:	180b883a 	mov	r5,r3
  804f2c:	2005883a 	mov	r2,r4
  804f30:	2807883a 	mov	r3,r5
  804f34:	e13ffc17 	ldw	r4,-16(fp)
  804f38:	20801515 	stw	r2,84(r4)
  804f3c:	20c01615 	stw	r3,88(r4)
  }
  d->_cg148 = d->_Pacemaker_local__Atrig8;
  804f40:	e0bffc17 	ldw	r2,-16(fp)
  804f44:	10c01b03 	ldbu	r3,108(r2)
  804f48:	e0bffc17 	ldw	r2,-16(fp)
  804f4c:	10c042c5 	stb	r3,267(r2)
  d->_g150 = d->_g147 && !d->_cg148;
  804f50:	e0bffc17 	ldw	r2,-16(fp)
  804f54:	108032c3 	ldbu	r2,203(r2)
  804f58:	10803fcc 	andi	r2,r2,255
  804f5c:	1080201c 	xori	r2,r2,128
  804f60:	10bfe004 	addi	r2,r2,-128
  804f64:	10000826 	beq	r2,zero,804f88 <logic+0x4448>
  804f68:	e0bffc17 	ldw	r2,-16(fp)
  804f6c:	108042c3 	ldbu	r2,267(r2)
  804f70:	10803fcc 	andi	r2,r2,255
  804f74:	1080201c 	xori	r2,r2,128
  804f78:	10bfe004 	addi	r2,r2,-128
  804f7c:	1000021e 	bne	r2,zero,804f88 <logic+0x4448>
  804f80:	00800044 	movi	r2,1
  804f84:	00000106 	br	804f8c <logic+0x444c>
  804f88:	0005883a 	mov	r2,zero
  804f8c:	1007883a 	mov	r3,r2
  804f90:	e0bffc17 	ldw	r2,-16(fp)
  804f94:	10c03385 	stb	r3,206(r2)
  d->_g149_e2 = !(d->_g153 || d->_g150);
  804f98:	e0bffc17 	ldw	r2,-16(fp)
  804f9c:	10803443 	ldbu	r2,209(r2)
  804fa0:	10803fcc 	andi	r2,r2,255
  804fa4:	1080201c 	xori	r2,r2,128
  804fa8:	10bfe004 	addi	r2,r2,-128
  804fac:	1000081e 	bne	r2,zero,804fd0 <logic+0x4490>
  804fb0:	e0bffc17 	ldw	r2,-16(fp)
  804fb4:	10803383 	ldbu	r2,206(r2)
  804fb8:	10803fcc 	andi	r2,r2,255
  804fbc:	1080201c 	xori	r2,r2,128
  804fc0:	10bfe004 	addi	r2,r2,-128
  804fc4:	1000021e 	bne	r2,zero,804fd0 <logic+0x4490>
  804fc8:	00800044 	movi	r2,1
  804fcc:	00000106 	br	804fd4 <logic+0x4494>
  804fd0:	0005883a 	mov	r2,zero
  804fd4:	1007883a 	mov	r3,r2
  804fd8:	e0bffc17 	ldw	r2,-16(fp)
  804fdc:	10c04785 	stb	r3,286(r2)
  d->_g152 = d->_g147 && d->_cg148 || d->_g151 && d->_cg152;
  804fe0:	e0bffc17 	ldw	r2,-16(fp)
  804fe4:	108032c3 	ldbu	r2,203(r2)
  804fe8:	10803fcc 	andi	r2,r2,255
  804fec:	1080201c 	xori	r2,r2,128
  804ff0:	10bfe004 	addi	r2,r2,-128
  804ff4:	10000626 	beq	r2,zero,805010 <logic+0x44d0>
  804ff8:	e0bffc17 	ldw	r2,-16(fp)
  804ffc:	108042c3 	ldbu	r2,267(r2)
  805000:	10803fcc 	andi	r2,r2,255
  805004:	1080201c 	xori	r2,r2,128
  805008:	10bfe004 	addi	r2,r2,-128
  80500c:	10000c1e 	bne	r2,zero,805040 <logic+0x4500>
  805010:	e0bffc17 	ldw	r2,-16(fp)
  805014:	108033c3 	ldbu	r2,207(r2)
  805018:	10803fcc 	andi	r2,r2,255
  80501c:	1080201c 	xori	r2,r2,128
  805020:	10bfe004 	addi	r2,r2,-128
  805024:	10000826 	beq	r2,zero,805048 <logic+0x4508>
  805028:	e0bffc17 	ldw	r2,-16(fp)
  80502c:	10804303 	ldbu	r2,268(r2)
  805030:	10803fcc 	andi	r2,r2,255
  805034:	1080201c 	xori	r2,r2,128
  805038:	10bfe004 	addi	r2,r2,-128
  80503c:	10000226 	beq	r2,zero,805048 <logic+0x4508>
  805040:	00800044 	movi	r2,1
  805044:	00000106 	br	80504c <logic+0x450c>
  805048:	0005883a 	mov	r2,zero
  80504c:	1007883a 	mov	r3,r2
  805050:	e0bffc17 	ldw	r2,-16(fp)
  805054:	10c03405 	stb	r3,208(r2)
  d->_g148 = d->_g121 || d->_g110 && !d->_cg157;
  805058:	e0bffc17 	ldw	r2,-16(fp)
  80505c:	10802e83 	ldbu	r2,186(r2)
  805060:	10803fcc 	andi	r2,r2,255
  805064:	1080201c 	xori	r2,r2,128
  805068:	10bfe004 	addi	r2,r2,-128
  80506c:	10000c1e 	bne	r2,zero,8050a0 <logic+0x4560>
  805070:	e0bffc17 	ldw	r2,-16(fp)
  805074:	10802cc3 	ldbu	r2,179(r2)
  805078:	10803fcc 	andi	r2,r2,255
  80507c:	1080201c 	xori	r2,r2,128
  805080:	10bfe004 	addi	r2,r2,-128
  805084:	10000826 	beq	r2,zero,8050a8 <logic+0x4568>
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10804343 	ldbu	r2,269(r2)
  805090:	10803fcc 	andi	r2,r2,255
  805094:	1080201c 	xori	r2,r2,128
  805098:	10bfe004 	addi	r2,r2,-128
  80509c:	1000021e 	bne	r2,zero,8050a8 <logic+0x4568>
  8050a0:	00800044 	movi	r2,1
  8050a4:	00000106 	br	8050ac <logic+0x456c>
  8050a8:	0005883a 	mov	r2,zero
  8050ac:	1007883a 	mov	r3,r2
  8050b0:	e0bffc17 	ldw	r2,-16(fp)
  8050b4:	10c03305 	stb	r3,204(r2)
  d->_g157 = !d->_g148;
  8050b8:	e0bffc17 	ldw	r2,-16(fp)
  8050bc:	10803303 	ldbu	r2,204(r2)
  8050c0:	10803fcc 	andi	r2,r2,255
  8050c4:	1080201c 	xori	r2,r2,128
  8050c8:	10bfe004 	addi	r2,r2,-128
  8050cc:	1005003a 	cmpeq	r2,r2,zero
  8050d0:	1007883a 	mov	r3,r2
  8050d4:	e0bffc17 	ldw	r2,-16(fp)
  8050d8:	10c034c5 	stb	r3,211(r2)
  d->_g140 = (d->_g132 || d->_g111) && (d->_g149_e2 || d->_g152) && (d->_g157 || d->_g114) && (d->_g111 || d->_g152 || d->_g114);
  8050dc:	e0bffc17 	ldw	r2,-16(fp)
  8050e0:	10803083 	ldbu	r2,194(r2)
  8050e4:	10803fcc 	andi	r2,r2,255
  8050e8:	1080201c 	xori	r2,r2,128
  8050ec:	10bfe004 	addi	r2,r2,-128
  8050f0:	1000061e 	bne	r2,zero,80510c <logic+0x45cc>
  8050f4:	e0bffc17 	ldw	r2,-16(fp)
  8050f8:	10802d03 	ldbu	r2,180(r2)
  8050fc:	10803fcc 	andi	r2,r2,255
  805100:	1080201c 	xori	r2,r2,128
  805104:	10bfe004 	addi	r2,r2,-128
  805108:	10002c26 	beq	r2,zero,8051bc <logic+0x467c>
  80510c:	e0bffc17 	ldw	r2,-16(fp)
  805110:	10804783 	ldbu	r2,286(r2)
  805114:	10803fcc 	andi	r2,r2,255
  805118:	1080201c 	xori	r2,r2,128
  80511c:	10bfe004 	addi	r2,r2,-128
  805120:	1000061e 	bne	r2,zero,80513c <logic+0x45fc>
  805124:	e0bffc17 	ldw	r2,-16(fp)
  805128:	10803403 	ldbu	r2,208(r2)
  80512c:	10803fcc 	andi	r2,r2,255
  805130:	1080201c 	xori	r2,r2,128
  805134:	10bfe004 	addi	r2,r2,-128
  805138:	10002026 	beq	r2,zero,8051bc <logic+0x467c>
  80513c:	e0bffc17 	ldw	r2,-16(fp)
  805140:	108034c3 	ldbu	r2,211(r2)
  805144:	10803fcc 	andi	r2,r2,255
  805148:	1080201c 	xori	r2,r2,128
  80514c:	10bfe004 	addi	r2,r2,-128
  805150:	1000061e 	bne	r2,zero,80516c <logic+0x462c>
  805154:	e0bffc17 	ldw	r2,-16(fp)
  805158:	10802d43 	ldbu	r2,181(r2)
  80515c:	10803fcc 	andi	r2,r2,255
  805160:	1080201c 	xori	r2,r2,128
  805164:	10bfe004 	addi	r2,r2,-128
  805168:	10001426 	beq	r2,zero,8051bc <logic+0x467c>
  80516c:	e0bffc17 	ldw	r2,-16(fp)
  805170:	10802d03 	ldbu	r2,180(r2)
  805174:	10803fcc 	andi	r2,r2,255
  805178:	1080201c 	xori	r2,r2,128
  80517c:	10bfe004 	addi	r2,r2,-128
  805180:	10000c1e 	bne	r2,zero,8051b4 <logic+0x4674>
  805184:	e0bffc17 	ldw	r2,-16(fp)
  805188:	10803403 	ldbu	r2,208(r2)
  80518c:	10803fcc 	andi	r2,r2,255
  805190:	1080201c 	xori	r2,r2,128
  805194:	10bfe004 	addi	r2,r2,-128
  805198:	1000061e 	bne	r2,zero,8051b4 <logic+0x4674>
  80519c:	e0bffc17 	ldw	r2,-16(fp)
  8051a0:	10802d43 	ldbu	r2,181(r2)
  8051a4:	10803fcc 	andi	r2,r2,255
  8051a8:	1080201c 	xori	r2,r2,128
  8051ac:	10bfe004 	addi	r2,r2,-128
  8051b0:	10000226 	beq	r2,zero,8051bc <logic+0x467c>
  8051b4:	00800044 	movi	r2,1
  8051b8:	00000106 	br	8051c0 <logic+0x4680>
  8051bc:	0005883a 	mov	r2,zero
  8051c0:	1007883a 	mov	r3,r2
  8051c4:	e0bffc17 	ldw	r2,-16(fp)
  8051c8:	10c031c5 	stb	r3,199(r2)
  d->_g149_e2 = d->_GO || d->_g140 || d->_g117 && !d->_cg139;
  8051cc:	e0bffc17 	ldw	r2,-16(fp)
  8051d0:	108035c3 	ldbu	r2,215(r2)
  8051d4:	10803fcc 	andi	r2,r2,255
  8051d8:	1080201c 	xori	r2,r2,128
  8051dc:	10bfe004 	addi	r2,r2,-128
  8051e0:	1000121e 	bne	r2,zero,80522c <logic+0x46ec>
  8051e4:	e0bffc17 	ldw	r2,-16(fp)
  8051e8:	108031c3 	ldbu	r2,199(r2)
  8051ec:	10803fcc 	andi	r2,r2,255
  8051f0:	1080201c 	xori	r2,r2,128
  8051f4:	10bfe004 	addi	r2,r2,-128
  8051f8:	10000c1e 	bne	r2,zero,80522c <logic+0x46ec>
  8051fc:	e0bffc17 	ldw	r2,-16(fp)
  805200:	10802dc3 	ldbu	r2,183(r2)
  805204:	10803fcc 	andi	r2,r2,255
  805208:	1080201c 	xori	r2,r2,128
  80520c:	10bfe004 	addi	r2,r2,-128
  805210:	10000826 	beq	r2,zero,805234 <logic+0x46f4>
  805214:	e0bffc17 	ldw	r2,-16(fp)
  805218:	10804203 	ldbu	r2,264(r2)
  80521c:	10803fcc 	andi	r2,r2,255
  805220:	1080201c 	xori	r2,r2,128
  805224:	10bfe004 	addi	r2,r2,-128
  805228:	1000021e 	bne	r2,zero,805234 <logic+0x46f4>
  80522c:	00800044 	movi	r2,1
  805230:	00000106 	br	805238 <logic+0x46f8>
  805234:	0005883a 	mov	r2,zero
  805238:	1007883a 	mov	r3,r2
  80523c:	e0bffc17 	ldw	r2,-16(fp)
  805240:	10c04785 	stb	r3,286(r2)
  d->_g143 = d->_GO || d->_g167;
  805244:	e0bffc17 	ldw	r2,-16(fp)
  805248:	108035c3 	ldbu	r2,215(r2)
  80524c:	10803fcc 	andi	r2,r2,255
  805250:	1080201c 	xori	r2,r2,128
  805254:	10bfe004 	addi	r2,r2,-128
  805258:	1000061e 	bne	r2,zero,805274 <logic+0x4734>
  80525c:	e0bffc17 	ldw	r2,-16(fp)
  805260:	10803543 	ldbu	r2,213(r2)
  805264:	10803fcc 	andi	r2,r2,255
  805268:	1080201c 	xori	r2,r2,128
  80526c:	10bfe004 	addi	r2,r2,-128
  805270:	10000226 	beq	r2,zero,80527c <logic+0x473c>
  805274:	00800044 	movi	r2,1
  805278:	00000106 	br	805280 <logic+0x4740>
  80527c:	0005883a 	mov	r2,zero
  805280:	1007883a 	mov	r3,r2
  805284:	e0bffc17 	ldw	r2,-16(fp)
  805288:	10c03245 	stb	r3,201(r2)
  d->_g149 = d->_GO || d->_g15;
  80528c:	e0bffc17 	ldw	r2,-16(fp)
  805290:	108035c3 	ldbu	r2,215(r2)
  805294:	10803fcc 	andi	r2,r2,255
  805298:	1080201c 	xori	r2,r2,128
  80529c:	10bfe004 	addi	r2,r2,-128
  8052a0:	1000061e 	bne	r2,zero,8052bc <logic+0x477c>
  8052a4:	e0bffc17 	ldw	r2,-16(fp)
  8052a8:	10801d03 	ldbu	r2,116(r2)
  8052ac:	10803fcc 	andi	r2,r2,255
  8052b0:	1080201c 	xori	r2,r2,128
  8052b4:	10bfe004 	addi	r2,r2,-128
  8052b8:	10000226 	beq	r2,zero,8052c4 <logic+0x4784>
  8052bc:	00800044 	movi	r2,1
  8052c0:	00000106 	br	8052c8 <logic+0x4788>
  8052c4:	0005883a 	mov	r2,zero
  8052c8:	1007883a 	mov	r3,r2
  8052cc:	e0bffc17 	ldw	r2,-16(fp)
  8052d0:	10c03345 	stb	r3,205(r2)
  d->_g158_e3 = d->_GO || d->_g52;
  8052d4:	e0bffc17 	ldw	r2,-16(fp)
  8052d8:	108035c3 	ldbu	r2,215(r2)
  8052dc:	10803fcc 	andi	r2,r2,255
  8052e0:	1080201c 	xori	r2,r2,128
  8052e4:	10bfe004 	addi	r2,r2,-128
  8052e8:	1000061e 	bne	r2,zero,805304 <logic+0x47c4>
  8052ec:	e0bffc17 	ldw	r2,-16(fp)
  8052f0:	10802383 	ldbu	r2,142(r2)
  8052f4:	10803fcc 	andi	r2,r2,255
  8052f8:	1080201c 	xori	r2,r2,128
  8052fc:	10bfe004 	addi	r2,r2,-128
  805300:	10000226 	beq	r2,zero,80530c <logic+0x47cc>
  805304:	00800044 	movi	r2,1
  805308:	00000106 	br	805310 <logic+0x47d0>
  80530c:	0005883a 	mov	r2,zero
  805310:	1007883a 	mov	r3,r2
  805314:	e0bffc17 	ldw	r2,-16(fp)
  805318:	10c047c5 	stb	r3,287(r2)
  d->_g158 = d->_GO || d->_g25;
  80531c:	e0bffc17 	ldw	r2,-16(fp)
  805320:	108035c3 	ldbu	r2,215(r2)
  805324:	10803fcc 	andi	r2,r2,255
  805328:	1080201c 	xori	r2,r2,128
  80532c:	10bfe004 	addi	r2,r2,-128
  805330:	1000061e 	bne	r2,zero,80534c <logic+0x480c>
  805334:	e0bffc17 	ldw	r2,-16(fp)
  805338:	10801ec3 	ldbu	r2,123(r2)
  80533c:	10803fcc 	andi	r2,r2,255
  805340:	1080201c 	xori	r2,r2,128
  805344:	10bfe004 	addi	r2,r2,-128
  805348:	10000226 	beq	r2,zero,805354 <logic+0x4814>
  80534c:	00800044 	movi	r2,1
  805350:	00000106 	br	805358 <logic+0x4818>
  805354:	0005883a 	mov	r2,zero
  805358:	1007883a 	mov	r3,r2
  80535c:	e0bffc17 	ldw	r2,-16(fp)
  805360:	10c03505 	stb	r3,212(r2)
  d->_g143_e1 = d->_GO || d->_g183;
  805364:	e0bffc17 	ldw	r2,-16(fp)
  805368:	108035c3 	ldbu	r2,215(r2)
  80536c:	10803fcc 	andi	r2,r2,255
  805370:	1080201c 	xori	r2,r2,128
  805374:	10bfe004 	addi	r2,r2,-128
  805378:	1000061e 	bne	r2,zero,805394 <logic+0x4854>
  80537c:	e0bffc17 	ldw	r2,-16(fp)
  805380:	10803583 	ldbu	r2,214(r2)
  805384:	10803fcc 	andi	r2,r2,255
  805388:	1080201c 	xori	r2,r2,128
  80538c:	10bfe004 	addi	r2,r2,-128
  805390:	10000226 	beq	r2,zero,80539c <logic+0x485c>
  805394:	00800044 	movi	r2,1
  805398:	00000106 	br	8053a0 <logic+0x4860>
  80539c:	0005883a 	mov	r2,zero
  8053a0:	1007883a 	mov	r3,r2
  8053a4:	e0bffc17 	ldw	r2,-16(fp)
  8053a8:	10c04745 	stb	r3,285(r2)
  d->_g139 = d->_GO || d->_g135;
  8053ac:	e0bffc17 	ldw	r2,-16(fp)
  8053b0:	108035c3 	ldbu	r2,215(r2)
  8053b4:	10803fcc 	andi	r2,r2,255
  8053b8:	1080201c 	xori	r2,r2,128
  8053bc:	10bfe004 	addi	r2,r2,-128
  8053c0:	1000061e 	bne	r2,zero,8053dc <logic+0x489c>
  8053c4:	e0bffc17 	ldw	r2,-16(fp)
  8053c8:	10803143 	ldbu	r2,197(r2)
  8053cc:	10803fcc 	andi	r2,r2,255
  8053d0:	1080201c 	xori	r2,r2,128
  8053d4:	10bfe004 	addi	r2,r2,-128
  8053d8:	10000226 	beq	r2,zero,8053e4 <logic+0x48a4>
  8053dc:	00800044 	movi	r2,1
  8053e0:	00000106 	br	8053e8 <logic+0x48a8>
  8053e4:	0005883a 	mov	r2,zero
  8053e8:	1007883a 	mov	r3,r2
  8053ec:	e0bffc17 	ldw	r2,-16(fp)
  8053f0:	10c03185 	stb	r3,198(r2)
}
  8053f4:	0001883a 	nop
  8053f8:	e6fffd04 	addi	sp,fp,-12
  8053fc:	dfc00417 	ldw	ra,16(sp)
  805400:	df000317 	ldw	fp,12(sp)
  805404:	dc800217 	ldw	r18,8(sp)
  805408:	dc400117 	ldw	r17,4(sp)
  80540c:	dc000017 	ldw	r16,0(sp)
  805410:	dec00504 	addi	sp,sp,20
  805414:	f800283a 	ret

00805418 <reset>:

void reset(TickData* d) {
  805418:	defffe04 	addi	sp,sp,-8
  80541c:	df000115 	stw	fp,4(sp)
  805420:	df000104 	addi	fp,sp,4
  805424:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  805428:	e0bfff17 	ldw	r2,-4(fp)
  80542c:	00c00044 	movi	r3,1
  805430:	10c035c5 	stb	r3,215(r2)
  d->_TERM = 0;
  805434:	e0bfff17 	ldw	r2,-4(fp)
  805438:	10004805 	stb	zero,288(r2)
  d->AVI_Constraint = AVI_VALUE;
  80543c:	e0bfff17 	ldw	r2,-4(fp)
  805440:	00c04b04 	movi	r3,300
  805444:	10c00115 	stw	r3,4(r2)
  d->PVARP_Constraint = PVARP_VALUE;
  805448:	e0bfff17 	ldw	r2,-4(fp)
  80544c:	00c00c84 	movi	r3,50
  805450:	10c00215 	stw	r3,8(r2)
  d->VRP_Constraint = VRP_VALUE;
  805454:	e0bfff17 	ldw	r2,-4(fp)
  805458:	00c02584 	movi	r3,150
  80545c:	10c00315 	stw	r3,12(r2)
  d->AEI_Constraint = AEI_VALUE;
  805460:	e0bfff17 	ldw	r2,-4(fp)
  805464:	00c0c804 	movi	r3,800
  805468:	10c00415 	stw	r3,16(r2)
  d->LRI_Constraint = LRI_VALUE;
  80546c:	e0bfff17 	ldw	r2,-4(fp)
  805470:	00c0ed84 	movi	r3,950
  805474:	10c00515 	stw	r3,20(r2)
  d->URI_Constraint = URI_VALUE;
  805478:	e0bfff17 	ldw	r2,-4(fp)
  80547c:	00c0e104 	movi	r3,900
  805480:	10c00615 	stw	r3,24(r2)
  d->_region0_AVI_cAVI = 0;
  805484:	e0bfff17 	ldw	r2,-4(fp)
  805488:	10000715 	stw	zero,28(r2)
  80548c:	10000815 	stw	zero,32(r2)
  d->_region1_PVARP_cPVARP = 0;
  805490:	e0bfff17 	ldw	r2,-4(fp)
  805494:	10000915 	stw	zero,36(r2)
  805498:	10000a15 	stw	zero,40(r2)
  d->_region2_VRP_cVRP = 0;
  80549c:	e0bfff17 	ldw	r2,-4(fp)
  8054a0:	10000b15 	stw	zero,44(r2)
  8054a4:	10000c15 	stw	zero,48(r2)
  d->_region3_AEI_cAEI = 0;
  8054a8:	e0bfff17 	ldw	r2,-4(fp)
  8054ac:	10000d15 	stw	zero,52(r2)
  8054b0:	10000e15 	stw	zero,56(r2)
  d->_region4_LRI_cLRI = 0;
  8054b4:	e0bfff17 	ldw	r2,-4(fp)
  8054b8:	10000f15 	stw	zero,60(r2)
  8054bc:	10001015 	stw	zero,64(r2)
  d->_region5_URI_cURI = 0;
  8054c0:	e0bfff17 	ldw	r2,-4(fp)
  8054c4:	10001115 	stw	zero,68(r2)
  8054c8:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  8054cc:	e0bfff17 	ldw	r2,-4(fp)
  8054d0:	10001315 	stw	zero,76(r2)
  8054d4:	10001415 	stw	zero,80(r2)
  d->sleepT = 0.0;
  8054d8:	e0bfff17 	ldw	r2,-4(fp)
  8054dc:	10001515 	stw	zero,84(r2)
  8054e0:	10001615 	stw	zero,88(r2)
  d->_pg93 = 0;
  8054e4:	e0bfff17 	ldw	r2,-4(fp)
  8054e8:	10004845 	stb	zero,289(r2)
  d->_pg126 = 0;
  8054ec:	e0bfff17 	ldw	r2,-4(fp)
  8054f0:	10004885 	stb	zero,290(r2)
  d->_pg143 = 0;
  8054f4:	e0bfff17 	ldw	r2,-4(fp)
  8054f8:	100048c5 	stb	zero,291(r2)
  d->_pg8 = 0;
  8054fc:	e0bfff17 	ldw	r2,-4(fp)
  805500:	10004905 	stb	zero,292(r2)
  d->_pg4 = 0;
  805504:	e0bfff17 	ldw	r2,-4(fp)
  805508:	10004945 	stb	zero,293(r2)
  d->_pg28 = 0;
  80550c:	e0bfff17 	ldw	r2,-4(fp)
  805510:	10004985 	stb	zero,294(r2)
  d->_pg131 = 0;
  805514:	e0bfff17 	ldw	r2,-4(fp)
  805518:	100049c5 	stb	zero,295(r2)
  d->_pg67 = 0;
  80551c:	e0bfff17 	ldw	r2,-4(fp)
  805520:	10004a05 	stb	zero,296(r2)
  d->_pg158 = 0;
  805524:	e0bfff17 	ldw	r2,-4(fp)
  805528:	10004a45 	stb	zero,297(r2)
  d->_pg106 = 0;
  80552c:	e0bfff17 	ldw	r2,-4(fp)
  805530:	10004a85 	stb	zero,298(r2)
  d->_pg105 = 0;
  805534:	e0bfff17 	ldw	r2,-4(fp)
  805538:	10004ac5 	stb	zero,299(r2)
  d->_pg77 = 0;
  80553c:	e0bfff17 	ldw	r2,-4(fp)
  805540:	10004b05 	stb	zero,300(r2)
  d->_pg86 = 0;
  805544:	e0bfff17 	ldw	r2,-4(fp)
  805548:	10004b45 	stb	zero,301(r2)
  d->_pg149 = 0;
  80554c:	e0bfff17 	ldw	r2,-4(fp)
  805550:	10004b85 	stb	zero,302(r2)
  d->_pg42 = 0;
  805554:	e0bfff17 	ldw	r2,-4(fp)
  805558:	10004bc5 	stb	zero,303(r2)
  d->_pg92 = 0;
  80555c:	e0bfff17 	ldw	r2,-4(fp)
  805560:	10004c05 	stb	zero,304(r2)
  d->_pg53 = 0;
  805564:	e0bfff17 	ldw	r2,-4(fp)
  805568:	10004c45 	stb	zero,305(r2)
  d->_pg134 = 0;
  80556c:	e0bfff17 	ldw	r2,-4(fp)
  805570:	10004c85 	stb	zero,306(r2)
  d->_pg143_e1 = 0;
  805574:	e0bfff17 	ldw	r2,-4(fp)
  805578:	10004cc5 	stb	zero,307(r2)
  d->_pg82 = 0;
  80557c:	e0bfff17 	ldw	r2,-4(fp)
  805580:	10004d05 	stb	zero,308(r2)
  d->_pg94 = 0;
  805584:	e0bfff17 	ldw	r2,-4(fp)
  805588:	10004d45 	stb	zero,309(r2)
  d->_pg37 = 0;
  80558c:	e0bfff17 	ldw	r2,-4(fp)
  805590:	10004d85 	stb	zero,310(r2)
  d->_pg44 = 0;
  805594:	e0bfff17 	ldw	r2,-4(fp)
  805598:	10004dc5 	stb	zero,311(r2)
  d->_pg47 = 0;
  80559c:	e0bfff17 	ldw	r2,-4(fp)
  8055a0:	10004e05 	stb	zero,312(r2)
  d->_pg158_e3 = 0;
  8055a4:	e0bfff17 	ldw	r2,-4(fp)
  8055a8:	10004e45 	stb	zero,313(r2)
  d->_pg70 = 0;
  8055ac:	e0bfff17 	ldw	r2,-4(fp)
  8055b0:	10004e85 	stb	zero,314(r2)
  d->_pg76_e3 = 0;
  8055b4:	e0bfff17 	ldw	r2,-4(fp)
  8055b8:	10004ec5 	stb	zero,315(r2)
  d->_pg68 = 0;
  8055bc:	e0bfff17 	ldw	r2,-4(fp)
  8055c0:	10004f05 	stb	zero,316(r2)
  d->_pg71 = 0;
  8055c4:	e0bfff17 	ldw	r2,-4(fp)
  8055c8:	10004f45 	stb	zero,317(r2)
  d->_pg76 = 0;
  8055cc:	e0bfff17 	ldw	r2,-4(fp)
  8055d0:	10004f85 	stb	zero,318(r2)
  d->_pg85 = 0;
  8055d4:	e0bfff17 	ldw	r2,-4(fp)
  8055d8:	10004fc5 	stb	zero,319(r2)
  d->_pg139 = 0;
  8055dc:	e0bfff17 	ldw	r2,-4(fp)
  8055e0:	10005005 	stb	zero,320(r2)
  d->_pg148 = 0;
  8055e4:	e0bfff17 	ldw	r2,-4(fp)
  8055e8:	10005045 	stb	zero,321(r2)
  d->_pg149_e2 = 0;
  8055ec:	e0bfff17 	ldw	r2,-4(fp)
  8055f0:	10005085 	stb	zero,322(r2)
  d->_pg150 = 0;
  8055f4:	e0bfff17 	ldw	r2,-4(fp)
  8055f8:	100050c5 	stb	zero,323(r2)
  d->_pg153 = 0;
  8055fc:	e0bfff17 	ldw	r2,-4(fp)
  805600:	10005105 	stb	zero,324(r2)
}
  805604:	0001883a 	nop
  805608:	e037883a 	mov	sp,fp
  80560c:	df000017 	ldw	fp,0(sp)
  805610:	dec00104 	addi	sp,sp,4
  805614:	f800283a 	ret

00805618 <tick>:

void tick(TickData* d) {
  805618:	defffd04 	addi	sp,sp,-12
  80561c:	dfc00215 	stw	ra,8(sp)
  805620:	df000115 	stw	fp,4(sp)
  805624:	df000104 	addi	fp,sp,4
  805628:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  80562c:	e13fff17 	ldw	r4,-4(fp)
  805630:	0800b400 	call	800b40 <logic>

  d->_pg93 = d->_g93;
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	10c02a03 	ldbu	r3,168(r2)
  80563c:	e0bfff17 	ldw	r2,-4(fp)
  805640:	10c04845 	stb	r3,289(r2)
  d->_pg126 = d->_g126;
  805644:	e0bfff17 	ldw	r2,-4(fp)
  805648:	10c02f83 	ldbu	r3,190(r2)
  80564c:	e0bfff17 	ldw	r2,-4(fp)
  805650:	10c04885 	stb	r3,290(r2)
  d->_pg143 = d->_g143;
  805654:	e0bfff17 	ldw	r2,-4(fp)
  805658:	10c03243 	ldbu	r3,201(r2)
  80565c:	e0bfff17 	ldw	r2,-4(fp)
  805660:	10c048c5 	stb	r3,291(r2)
  d->_pg8 = d->_g8;
  805664:	e0bfff17 	ldw	r2,-4(fp)
  805668:	10c01bc3 	ldbu	r3,111(r2)
  80566c:	e0bfff17 	ldw	r2,-4(fp)
  805670:	10c04905 	stb	r3,292(r2)
  d->_pg4 = d->_g4;
  805674:	e0bfff17 	ldw	r2,-4(fp)
  805678:	10c01b43 	ldbu	r3,109(r2)
  80567c:	e0bfff17 	ldw	r2,-4(fp)
  805680:	10c04945 	stb	r3,293(r2)
  d->_pg28 = d->_g28;
  805684:	e0bfff17 	ldw	r2,-4(fp)
  805688:	10c01f83 	ldbu	r3,126(r2)
  80568c:	e0bfff17 	ldw	r2,-4(fp)
  805690:	10c04985 	stb	r3,294(r2)
  d->_pg131 = d->_g131;
  805694:	e0bfff17 	ldw	r2,-4(fp)
  805698:	10c03043 	ldbu	r3,193(r2)
  80569c:	e0bfff17 	ldw	r2,-4(fp)
  8056a0:	10c049c5 	stb	r3,295(r2)
  d->_pg67 = d->_g67;
  8056a4:	e0bfff17 	ldw	r2,-4(fp)
  8056a8:	10c025c3 	ldbu	r3,151(r2)
  8056ac:	e0bfff17 	ldw	r2,-4(fp)
  8056b0:	10c04a05 	stb	r3,296(r2)
  d->_pg158 = d->_g158;
  8056b4:	e0bfff17 	ldw	r2,-4(fp)
  8056b8:	10c03503 	ldbu	r3,212(r2)
  8056bc:	e0bfff17 	ldw	r2,-4(fp)
  8056c0:	10c04a45 	stb	r3,297(r2)
  d->_pg106 = d->_g106;
  8056c4:	e0bfff17 	ldw	r2,-4(fp)
  8056c8:	10c02c83 	ldbu	r3,178(r2)
  8056cc:	e0bfff17 	ldw	r2,-4(fp)
  8056d0:	10c04a85 	stb	r3,298(r2)
  d->_pg105 = d->_g105;
  8056d4:	e0bfff17 	ldw	r2,-4(fp)
  8056d8:	10c02c43 	ldbu	r3,177(r2)
  8056dc:	e0bfff17 	ldw	r2,-4(fp)
  8056e0:	10c04ac5 	stb	r3,299(r2)
  d->_pg77 = d->_g77;
  8056e4:	e0bfff17 	ldw	r2,-4(fp)
  8056e8:	10c027c3 	ldbu	r3,159(r2)
  8056ec:	e0bfff17 	ldw	r2,-4(fp)
  8056f0:	10c04b05 	stb	r3,300(r2)
  d->_pg86 = d->_g86;
  8056f4:	e0bfff17 	ldw	r2,-4(fp)
  8056f8:	10c028c3 	ldbu	r3,163(r2)
  8056fc:	e0bfff17 	ldw	r2,-4(fp)
  805700:	10c04b45 	stb	r3,301(r2)
  d->_pg149 = d->_g149;
  805704:	e0bfff17 	ldw	r2,-4(fp)
  805708:	10c03343 	ldbu	r3,205(r2)
  80570c:	e0bfff17 	ldw	r2,-4(fp)
  805710:	10c04b85 	stb	r3,302(r2)
  d->_pg42 = d->_g42;
  805714:	e0bfff17 	ldw	r2,-4(fp)
  805718:	10c02183 	ldbu	r3,134(r2)
  80571c:	e0bfff17 	ldw	r2,-4(fp)
  805720:	10c04bc5 	stb	r3,303(r2)
  d->_pg92 = d->_g92;
  805724:	e0bfff17 	ldw	r2,-4(fp)
  805728:	10c029c3 	ldbu	r3,167(r2)
  80572c:	e0bfff17 	ldw	r2,-4(fp)
  805730:	10c04c05 	stb	r3,304(r2)
  d->_pg53 = d->_g53;
  805734:	e0bfff17 	ldw	r2,-4(fp)
  805738:	10c023c3 	ldbu	r3,143(r2)
  80573c:	e0bfff17 	ldw	r2,-4(fp)
  805740:	10c04c45 	stb	r3,305(r2)
  d->_pg134 = d->_g134;
  805744:	e0bfff17 	ldw	r2,-4(fp)
  805748:	10c03103 	ldbu	r3,196(r2)
  80574c:	e0bfff17 	ldw	r2,-4(fp)
  805750:	10c04c85 	stb	r3,306(r2)
  d->_pg143_e1 = d->_g143_e1;
  805754:	e0bfff17 	ldw	r2,-4(fp)
  805758:	10c04743 	ldbu	r3,285(r2)
  80575c:	e0bfff17 	ldw	r2,-4(fp)
  805760:	10c04cc5 	stb	r3,307(r2)
  d->_pg82 = d->_g82;
  805764:	e0bfff17 	ldw	r2,-4(fp)
  805768:	10c02843 	ldbu	r3,161(r2)
  80576c:	e0bfff17 	ldw	r2,-4(fp)
  805770:	10c04d05 	stb	r3,308(r2)
  d->_pg94 = d->_g94;
  805774:	e0bfff17 	ldw	r2,-4(fp)
  805778:	10c02a43 	ldbu	r3,169(r2)
  80577c:	e0bfff17 	ldw	r2,-4(fp)
  805780:	10c04d45 	stb	r3,309(r2)
  d->_pg37 = d->_g37;
  805784:	e0bfff17 	ldw	r2,-4(fp)
  805788:	10c020c3 	ldbu	r3,131(r2)
  80578c:	e0bfff17 	ldw	r2,-4(fp)
  805790:	10c04d85 	stb	r3,310(r2)
  d->_pg44 = d->_g44;
  805794:	e0bfff17 	ldw	r2,-4(fp)
  805798:	10c02203 	ldbu	r3,136(r2)
  80579c:	e0bfff17 	ldw	r2,-4(fp)
  8057a0:	10c04dc5 	stb	r3,311(r2)
  d->_pg47 = d->_g47;
  8057a4:	e0bfff17 	ldw	r2,-4(fp)
  8057a8:	10c022c3 	ldbu	r3,139(r2)
  8057ac:	e0bfff17 	ldw	r2,-4(fp)
  8057b0:	10c04e05 	stb	r3,312(r2)
  d->_pg158_e3 = d->_g158_e3;
  8057b4:	e0bfff17 	ldw	r2,-4(fp)
  8057b8:	10c047c3 	ldbu	r3,287(r2)
  8057bc:	e0bfff17 	ldw	r2,-4(fp)
  8057c0:	10c04e45 	stb	r3,313(r2)
  d->_pg70 = d->_g70;
  8057c4:	e0bfff17 	ldw	r2,-4(fp)
  8057c8:	10c02683 	ldbu	r3,154(r2)
  8057cc:	e0bfff17 	ldw	r2,-4(fp)
  8057d0:	10c04e85 	stb	r3,314(r2)
  d->_pg76_e3 = d->_g76_e3;
  8057d4:	e0bfff17 	ldw	r2,-4(fp)
  8057d8:	10c04583 	ldbu	r3,278(r2)
  8057dc:	e0bfff17 	ldw	r2,-4(fp)
  8057e0:	10c04ec5 	stb	r3,315(r2)
  d->_pg68 = d->_g68;
  8057e4:	e0bfff17 	ldw	r2,-4(fp)
  8057e8:	10c02603 	ldbu	r3,152(r2)
  8057ec:	e0bfff17 	ldw	r2,-4(fp)
  8057f0:	10c04f05 	stb	r3,316(r2)
  d->_pg71 = d->_g71;
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	10c026c3 	ldbu	r3,155(r2)
  8057fc:	e0bfff17 	ldw	r2,-4(fp)
  805800:	10c04f45 	stb	r3,317(r2)
  d->_pg76 = d->_g76;
  805804:	e0bfff17 	ldw	r2,-4(fp)
  805808:	10c02783 	ldbu	r3,158(r2)
  80580c:	e0bfff17 	ldw	r2,-4(fp)
  805810:	10c04f85 	stb	r3,318(r2)
  d->_pg85 = d->_g85;
  805814:	e0bfff17 	ldw	r2,-4(fp)
  805818:	10c02883 	ldbu	r3,162(r2)
  80581c:	e0bfff17 	ldw	r2,-4(fp)
  805820:	10c04fc5 	stb	r3,319(r2)
  d->_pg139 = d->_g139;
  805824:	e0bfff17 	ldw	r2,-4(fp)
  805828:	10c03183 	ldbu	r3,198(r2)
  80582c:	e0bfff17 	ldw	r2,-4(fp)
  805830:	10c05005 	stb	r3,320(r2)
  d->_pg148 = d->_g148;
  805834:	e0bfff17 	ldw	r2,-4(fp)
  805838:	10c03303 	ldbu	r3,204(r2)
  80583c:	e0bfff17 	ldw	r2,-4(fp)
  805840:	10c05045 	stb	r3,321(r2)
  d->_pg149_e2 = d->_g149_e2;
  805844:	e0bfff17 	ldw	r2,-4(fp)
  805848:	10c04783 	ldbu	r3,286(r2)
  80584c:	e0bfff17 	ldw	r2,-4(fp)
  805850:	10c05085 	stb	r3,322(r2)
  d->_pg150 = d->_g150;
  805854:	e0bfff17 	ldw	r2,-4(fp)
  805858:	10c03383 	ldbu	r3,206(r2)
  80585c:	e0bfff17 	ldw	r2,-4(fp)
  805860:	10c050c5 	stb	r3,323(r2)
  d->_pg153 = d->_g153;
  805864:	e0bfff17 	ldw	r2,-4(fp)
  805868:	10c03443 	ldbu	r3,209(r2)
  80586c:	e0bfff17 	ldw	r2,-4(fp)
  805870:	10c05105 	stb	r3,324(r2)
  d->_GO = 0;
  805874:	e0bfff17 	ldw	r2,-4(fp)
  805878:	100035c5 	stb	zero,215(r2)
}
  80587c:	0001883a 	nop
  805880:	e037883a 	mov	sp,fp
  805884:	dfc00117 	ldw	ra,4(sp)
  805888:	df000017 	ldw	fp,0(sp)
  80588c:	dec00204 	addi	sp,sp,8
  805890:	f800283a 	ret

00805894 <vp_light_timer_isr>:


int vp_timer_started = 0;
int ap_timer_started = 0;

alt_u32 vp_light_timer_isr(void* context){
  805894:	defffe04 	addi	sp,sp,-8
  805898:	df000115 	stw	fp,4(sp)
  80589c:	df000104 	addi	fp,sp,4
  8058a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~(1 << 0)));
  8058a4:	00804074 	movhi	r2,257
  8058a8:	10841c04 	addi	r2,r2,4208
  8058ac:	10c00037 	ldwio	r3,0(r2)
  8058b0:	00bfff84 	movi	r2,-2
  8058b4:	1886703a 	and	r3,r3,r2
  8058b8:	00804074 	movhi	r2,257
  8058bc:	10841c04 	addi	r2,r2,4208
  8058c0:	10c00035 	stwio	r3,0(r2)
	vp_timer_started = 0;
  8058c4:	d0276a15 	stw	zero,-25176(gp)
	return 0;
  8058c8:	0005883a 	mov	r2,zero
}
  8058cc:	e037883a 	mov	sp,fp
  8058d0:	df000017 	ldw	fp,0(sp)
  8058d4:	dec00104 	addi	sp,sp,4
  8058d8:	f800283a 	ret

008058dc <ap_light_timer_isr>:

alt_u32 ap_light_timer_isr(void* context){
  8058dc:	defffe04 	addi	sp,sp,-8
  8058e0:	df000115 	stw	fp,4(sp)
  8058e4:	df000104 	addi	fp,sp,4
  8058e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) & ~(1 << 1)));
  8058ec:	00804074 	movhi	r2,257
  8058f0:	10841c04 	addi	r2,r2,4208
  8058f4:	10c00037 	ldwio	r3,0(r2)
  8058f8:	00bfff44 	movi	r2,-3
  8058fc:	1886703a 	and	r3,r3,r2
  805900:	00804074 	movhi	r2,257
  805904:	10841c04 	addi	r2,r2,4208
  805908:	10c00035 	stwio	r3,0(r2)
	ap_timer_started = 0;
  80590c:	d0276b15 	stw	zero,-25172(gp)
	return 0;
  805910:	0005883a 	mov	r2,zero
}
  805914:	e037883a 	mov	sp,fp
  805918:	df000017 	ldw	fp,0(sp)
  80591c:	dec00104 	addi	sp,sp,4
  805920:	f800283a 	ret

00805924 <vp_light_timer>:



void vp_light_timer(){
  805924:	defffd04 	addi	sp,sp,-12
  805928:	dfc00215 	stw	ra,8(sp)
  80592c:	df000115 	stw	fp,4(sp)
  805930:	df000104 	addi	fp,sp,4
	if (vp_timer_started == 0) {
  805934:	d0a76a17 	ldw	r2,-25176(gp)
  805938:	1000111e 	bne	r2,zero,805980 <vp_light_timer+0x5c>
		vp_timer_started = 1;
  80593c:	00800044 	movi	r2,1
  805940:	d0a76a15 	stw	r2,-25176(gp)

		void* context = 0;
  805944:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 1 << 0));
  805948:	00804074 	movhi	r2,257
  80594c:	10841c04 	addi	r2,r2,4208
  805950:	10800037 	ldwio	r2,0(r2)
  805954:	10c00054 	ori	r3,r2,1
  805958:	00804074 	movhi	r2,257
  80595c:	10841c04 	addi	r2,r2,4208
  805960:	10c00035 	stwio	r3,0(r2)
		alt_alarm_start(&timer_vp, LED_TIMEOUT, vp_light_timer_isr, context);
  805964:	e1ffff17 	ldw	r7,-4(fp)
  805968:	01802034 	movhi	r6,128
  80596c:	31962504 	addi	r6,r6,22676
  805970:	01400c84 	movi	r5,50
  805974:	010020b4 	movhi	r4,130
  805978:	212d2b04 	addi	r4,r4,-19284
  80597c:	0812f9c0 	call	812f9c <alt_alarm_start>
	}

}
  805980:	0001883a 	nop
  805984:	e037883a 	mov	sp,fp
  805988:	dfc00117 	ldw	ra,4(sp)
  80598c:	df000017 	ldw	fp,0(sp)
  805990:	dec00204 	addi	sp,sp,8
  805994:	f800283a 	ret

00805998 <ap_light_timer>:

void ap_light_timer(){
  805998:	defffd04 	addi	sp,sp,-12
  80599c:	dfc00215 	stw	ra,8(sp)
  8059a0:	df000115 	stw	fp,4(sp)
  8059a4:	df000104 	addi	fp,sp,4
	if (ap_timer_started == 0) {
  8059a8:	d0a76b17 	ldw	r2,-25172(gp)
  8059ac:	1000111e 	bne	r2,zero,8059f4 <ap_light_timer+0x5c>
		ap_timer_started = 1;
  8059b0:	00800044 	movi	r2,1
  8059b4:	d0a76b15 	stw	r2,-25172(gp)

		void* context = 0;
  8059b8:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 1 << 1));
  8059bc:	00804074 	movhi	r2,257
  8059c0:	10841c04 	addi	r2,r2,4208
  8059c4:	10800037 	ldwio	r2,0(r2)
  8059c8:	10c00094 	ori	r3,r2,2
  8059cc:	00804074 	movhi	r2,257
  8059d0:	10841c04 	addi	r2,r2,4208
  8059d4:	10c00035 	stwio	r3,0(r2)
		alt_alarm_start(&timer_ap, LED_TIMEOUT, ap_light_timer_isr, context);
  8059d8:	e1ffff17 	ldw	r7,-4(fp)
  8059dc:	01802034 	movhi	r6,128
  8059e0:	31963704 	addi	r6,r6,22748
  8059e4:	01400c84 	movi	r5,50
  8059e8:	010020b4 	movhi	r4,130
  8059ec:	212d2504 	addi	r4,r4,-19308
  8059f0:	0812f9c0 	call	812f9c <alt_alarm_start>
	}

}
  8059f4:	0001883a 	nop
  8059f8:	e037883a 	mov	sp,fp
  8059fc:	dfc00117 	ldw	ra,4(sp)
  805a00:	df000017 	ldw	fp,0(sp)
  805a04:	dec00204 	addi	sp,sp,8
  805a08:	f800283a 	ret

00805a0c <setup_uart>:
FILE* uart;

uint8_t ASBuffer = 0;
uint8_t VSBuffer = 0;

void setup_uart(){
  805a0c:	defffe04 	addi	sp,sp,-8
  805a10:	dfc00115 	stw	ra,4(sp)
  805a14:	df000015 	stw	fp,0(sp)
  805a18:	d839883a 	mov	fp,sp
	uart = open(UART_NAME,(O_NONBLOCK | O_RDWR));
  805a1c:	01500084 	movi	r5,16386
  805a20:	01002074 	movhi	r4,129
  805a24:	211cb404 	addi	r4,r4,29392
  805a28:	081390c0 	call	81390c <open>
  805a2c:	d0a76d15 	stw	r2,-25164(gp)

	if(!uart){
  805a30:	d0a76d17 	ldw	r2,-25164(gp)
  805a34:	1000041e 	bne	r2,zero,805a48 <setup_uart+0x3c>
		printf("Failed to open UART\n");
  805a38:	01002074 	movhi	r4,129
  805a3c:	211cb704 	addi	r4,r4,29404
  805a40:	08092140 	call	809214 <puts>
	} else {
		printf("setup uart\n");
	}
}
  805a44:	00000306 	br	805a54 <setup_uart+0x48>
	uart = open(UART_NAME,(O_NONBLOCK | O_RDWR));

	if(!uart){
		printf("Failed to open UART\n");
	} else {
		printf("setup uart\n");
  805a48:	01002074 	movhi	r4,129
  805a4c:	211cbc04 	addi	r4,r4,29424
  805a50:	08092140 	call	809214 <puts>
	}
}
  805a54:	0001883a 	nop
  805a58:	e037883a 	mov	sp,fp
  805a5c:	dfc00117 	ldw	ra,4(sp)
  805a60:	df000017 	ldw	fp,0(sp)
  805a64:	dec00204 	addi	sp,sp,8
  805a68:	f800283a 	ret

00805a6c <check_uart>:

void check_uart(){
  805a6c:	defffa04 	addi	sp,sp,-24
  805a70:	dfc00515 	stw	ra,20(sp)
  805a74:	df000415 	stw	fp,16(sp)
  805a78:	df000404 	addi	fp,sp,16

	// create a buffer to load the next 5 characters
	char uartBuffer[5];

	// check the length of the uart input
	int length = read(uart, uartBuffer, sizeof(uartBuffer) - 1);
  805a7c:	d0a76d17 	ldw	r2,-25164(gp)
  805a80:	e0fffe04 	addi	r3,fp,-8
  805a84:	01800104 	movi	r6,4
  805a88:	180b883a 	mov	r5,r3
  805a8c:	1009883a 	mov	r4,r2
  805a90:	0813a9c0 	call	813a9c <read>
  805a94:	e0bffd15 	stw	r2,-12(fp)

	if (length > 0) {
  805a98:	e0bffd17 	ldw	r2,-12(fp)
  805a9c:	00801f0e 	bge	zero,r2,805b1c <check_uart+0xb0>
		for (int i = 0; i < length; i++){
  805aa0:	e03ffc15 	stw	zero,-16(fp)
  805aa4:	00001a06 	br	805b10 <check_uart+0xa4>
			if (uartBuffer[i] == 'V'){
  805aa8:	e0fffe04 	addi	r3,fp,-8
  805aac:	e0bffc17 	ldw	r2,-16(fp)
  805ab0:	1885883a 	add	r2,r3,r2
  805ab4:	10800003 	ldbu	r2,0(r2)
  805ab8:	10803fcc 	andi	r2,r2,255
  805abc:	1080201c 	xori	r2,r2,128
  805ac0:	10bfe004 	addi	r2,r2,-128
  805ac4:	10801598 	cmpnei	r2,r2,86
  805ac8:	1000031e 	bne	r2,zero,805ad8 <check_uart+0x6c>
				VSBuffer = 1;
  805acc:	00800044 	movi	r2,1
  805ad0:	d0a76c45 	stb	r2,-25167(gp)
  805ad4:	00000b06 	br	805b04 <check_uart+0x98>
			} else if(uartBuffer[i] == 'A'){
  805ad8:	e0fffe04 	addi	r3,fp,-8
  805adc:	e0bffc17 	ldw	r2,-16(fp)
  805ae0:	1885883a 	add	r2,r3,r2
  805ae4:	10800003 	ldbu	r2,0(r2)
  805ae8:	10803fcc 	andi	r2,r2,255
  805aec:	1080201c 	xori	r2,r2,128
  805af0:	10bfe004 	addi	r2,r2,-128
  805af4:	10801058 	cmpnei	r2,r2,65
  805af8:	1000021e 	bne	r2,zero,805b04 <check_uart+0x98>
				ASBuffer = 1;
  805afc:	00800044 	movi	r2,1
  805b00:	d0a76c05 	stb	r2,-25168(gp)

	// check the length of the uart input
	int length = read(uart, uartBuffer, sizeof(uartBuffer) - 1);

	if (length > 0) {
		for (int i = 0; i < length; i++){
  805b04:	e0bffc17 	ldw	r2,-16(fp)
  805b08:	10800044 	addi	r2,r2,1
  805b0c:	e0bffc15 	stw	r2,-16(fp)
  805b10:	e0fffc17 	ldw	r3,-16(fp)
  805b14:	e0bffd17 	ldw	r2,-12(fp)
  805b18:	18bfe316 	blt	r3,r2,805aa8 <__alt_mem_onchip_mem+0xff7fdaa8>
				ASBuffer = 1;

			}
		}
	}
}
  805b1c:	0001883a 	nop
  805b20:	e037883a 	mov	sp,fp
  805b24:	dfc00117 	ldw	ra,4(sp)
  805b28:	df000017 	ldw	fp,0(sp)
  805b2c:	dec00204 	addi	sp,sp,8
  805b30:	f800283a 	ret

00805b34 <print_v>:

void print_v(){
  805b34:	defffd04 	addi	sp,sp,-12
  805b38:	dfc00215 	stw	ra,8(sp)
  805b3c:	df000115 	stw	fp,4(sp)
  805b40:	df000104 	addi	fp,sp,4
	if(!uart)
  805b44:	d0a76d17 	ldw	r2,-25164(gp)
  805b48:	10000826 	beq	r2,zero,805b6c <print_v+0x38>
			return;
	char v = 'V';
  805b4c:	00801584 	movi	r2,86
  805b50:	e0bfff05 	stb	r2,-4(fp)
	write(uart, &v, 1);
  805b54:	d0a76d17 	ldw	r2,-25164(gp)
  805b58:	01800044 	movi	r6,1
  805b5c:	e17fff04 	addi	r5,fp,-4
  805b60:	1009883a 	mov	r4,r2
  805b64:	0813ebc0 	call	813ebc <write>
  805b68:	00000106 	br	805b70 <print_v+0x3c>
	}
}

void print_v(){
	if(!uart)
			return;
  805b6c:	0001883a 	nop
	char v = 'V';
	write(uart, &v, 1);
}
  805b70:	e037883a 	mov	sp,fp
  805b74:	dfc00117 	ldw	ra,4(sp)
  805b78:	df000017 	ldw	fp,0(sp)
  805b7c:	dec00204 	addi	sp,sp,8
  805b80:	f800283a 	ret

00805b84 <print_a>:

void print_a(){
  805b84:	defffd04 	addi	sp,sp,-12
  805b88:	dfc00215 	stw	ra,8(sp)
  805b8c:	df000115 	stw	fp,4(sp)
  805b90:	df000104 	addi	fp,sp,4
	if(!uart)
  805b94:	d0a76d17 	ldw	r2,-25164(gp)
  805b98:	10000826 	beq	r2,zero,805bbc <print_a+0x38>
			return;
	char a = 'A';
  805b9c:	00801044 	movi	r2,65
  805ba0:	e0bfff05 	stb	r2,-4(fp)
	write(uart, &a, 1);
  805ba4:	d0a76d17 	ldw	r2,-25164(gp)
  805ba8:	01800044 	movi	r6,1
  805bac:	e17fff04 	addi	r5,fp,-4
  805bb0:	1009883a 	mov	r4,r2
  805bb4:	0813ebc0 	call	813ebc <write>
  805bb8:	00000106 	br	805bc0 <print_a+0x3c>
	write(uart, &v, 1);
}

void print_a(){
	if(!uart)
			return;
  805bbc:	0001883a 	nop
	char a = 'A';
	write(uart, &a, 1);
}
  805bc0:	e037883a 	mov	sp,fp
  805bc4:	dfc00117 	ldw	ra,4(sp)
  805bc8:	df000017 	ldw	fp,0(sp)
  805bcc:	dec00204 	addi	sp,sp,8
  805bd0:	f800283a 	ret

00805bd4 <close_uart>:



void close_uart(){
  805bd4:	defffe04 	addi	sp,sp,-8
  805bd8:	dfc00115 	stw	ra,4(sp)
  805bdc:	df000015 	stw	fp,0(sp)
  805be0:	d839883a 	mov	fp,sp
	close(uart);
  805be4:	d0a76d17 	ldw	r2,-25164(gp)
  805be8:	1009883a 	mov	r4,r2
  805bec:	08131040 	call	813104 <close>
}
  805bf0:	0001883a 	nop
  805bf4:	e037883a 	mov	sp,fp
  805bf8:	dfc00117 	ldw	ra,4(sp)
  805bfc:	df000017 	ldw	fp,0(sp)
  805c00:	dec00204 	addi	sp,sp,8
  805c04:	f800283a 	ret

00805c08 <__adddf3>:
  805c08:	02c00434 	movhi	r11,16
  805c0c:	5affffc4 	addi	r11,r11,-1
  805c10:	2806d7fa 	srli	r3,r5,31
  805c14:	2ad4703a 	and	r10,r5,r11
  805c18:	3ad2703a 	and	r9,r7,r11
  805c1c:	3804d53a 	srli	r2,r7,20
  805c20:	3018d77a 	srli	r12,r6,29
  805c24:	280ad53a 	srli	r5,r5,20
  805c28:	501490fa 	slli	r10,r10,3
  805c2c:	2010d77a 	srli	r8,r4,29
  805c30:	481290fa 	slli	r9,r9,3
  805c34:	380ed7fa 	srli	r7,r7,31
  805c38:	defffb04 	addi	sp,sp,-20
  805c3c:	dc800215 	stw	r18,8(sp)
  805c40:	dc400115 	stw	r17,4(sp)
  805c44:	dc000015 	stw	r16,0(sp)
  805c48:	dfc00415 	stw	ra,16(sp)
  805c4c:	dcc00315 	stw	r19,12(sp)
  805c50:	1c803fcc 	andi	r18,r3,255
  805c54:	2c01ffcc 	andi	r16,r5,2047
  805c58:	5210b03a 	or	r8,r10,r8
  805c5c:	202290fa 	slli	r17,r4,3
  805c60:	1081ffcc 	andi	r2,r2,2047
  805c64:	4b12b03a 	or	r9,r9,r12
  805c68:	300c90fa 	slli	r6,r6,3
  805c6c:	91c07526 	beq	r18,r7,805e44 <__adddf3+0x23c>
  805c70:	8087c83a 	sub	r3,r16,r2
  805c74:	00c0ab0e 	bge	zero,r3,805f24 <__adddf3+0x31c>
  805c78:	10002a1e 	bne	r2,zero,805d24 <__adddf3+0x11c>
  805c7c:	4984b03a 	or	r2,r9,r6
  805c80:	1000961e 	bne	r2,zero,805edc <__adddf3+0x2d4>
  805c84:	888001cc 	andi	r2,r17,7
  805c88:	10000726 	beq	r2,zero,805ca8 <__adddf3+0xa0>
  805c8c:	888003cc 	andi	r2,r17,15
  805c90:	00c00104 	movi	r3,4
  805c94:	10c00426 	beq	r2,r3,805ca8 <__adddf3+0xa0>
  805c98:	88c7883a 	add	r3,r17,r3
  805c9c:	1c63803a 	cmpltu	r17,r3,r17
  805ca0:	4451883a 	add	r8,r8,r17
  805ca4:	1823883a 	mov	r17,r3
  805ca8:	4080202c 	andhi	r2,r8,128
  805cac:	10005926 	beq	r2,zero,805e14 <__adddf3+0x20c>
  805cb0:	84000044 	addi	r16,r16,1
  805cb4:	0081ffc4 	movi	r2,2047
  805cb8:	8080ba26 	beq	r16,r2,805fa4 <__adddf3+0x39c>
  805cbc:	00bfe034 	movhi	r2,65408
  805cc0:	10bfffc4 	addi	r2,r2,-1
  805cc4:	4090703a 	and	r8,r8,r2
  805cc8:	4004977a 	slli	r2,r8,29
  805ccc:	4010927a 	slli	r8,r8,9
  805cd0:	8822d0fa 	srli	r17,r17,3
  805cd4:	8401ffcc 	andi	r16,r16,2047
  805cd8:	4010d33a 	srli	r8,r8,12
  805cdc:	9007883a 	mov	r3,r18
  805ce0:	1444b03a 	or	r2,r2,r17
  805ce4:	8401ffcc 	andi	r16,r16,2047
  805ce8:	8020953a 	slli	r16,r16,20
  805cec:	18c03fcc 	andi	r3,r3,255
  805cf0:	01000434 	movhi	r4,16
  805cf4:	213fffc4 	addi	r4,r4,-1
  805cf8:	180697fa 	slli	r3,r3,31
  805cfc:	4110703a 	and	r8,r8,r4
  805d00:	4410b03a 	or	r8,r8,r16
  805d04:	40c6b03a 	or	r3,r8,r3
  805d08:	dfc00417 	ldw	ra,16(sp)
  805d0c:	dcc00317 	ldw	r19,12(sp)
  805d10:	dc800217 	ldw	r18,8(sp)
  805d14:	dc400117 	ldw	r17,4(sp)
  805d18:	dc000017 	ldw	r16,0(sp)
  805d1c:	dec00504 	addi	sp,sp,20
  805d20:	f800283a 	ret
  805d24:	0081ffc4 	movi	r2,2047
  805d28:	80bfd626 	beq	r16,r2,805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  805d2c:	4a402034 	orhi	r9,r9,128
  805d30:	00800e04 	movi	r2,56
  805d34:	10c09f16 	blt	r2,r3,805fb4 <__adddf3+0x3ac>
  805d38:	008007c4 	movi	r2,31
  805d3c:	10c0c216 	blt	r2,r3,806048 <__adddf3+0x440>
  805d40:	00800804 	movi	r2,32
  805d44:	10c5c83a 	sub	r2,r2,r3
  805d48:	488a983a 	sll	r5,r9,r2
  805d4c:	30c8d83a 	srl	r4,r6,r3
  805d50:	3084983a 	sll	r2,r6,r2
  805d54:	48c6d83a 	srl	r3,r9,r3
  805d58:	290cb03a 	or	r6,r5,r4
  805d5c:	1004c03a 	cmpne	r2,r2,zero
  805d60:	308cb03a 	or	r6,r6,r2
  805d64:	898dc83a 	sub	r6,r17,r6
  805d68:	89a3803a 	cmpltu	r17,r17,r6
  805d6c:	40d1c83a 	sub	r8,r8,r3
  805d70:	4451c83a 	sub	r8,r8,r17
  805d74:	3023883a 	mov	r17,r6
  805d78:	4080202c 	andhi	r2,r8,128
  805d7c:	10002326 	beq	r2,zero,805e0c <__adddf3+0x204>
  805d80:	04c02034 	movhi	r19,128
  805d84:	9cffffc4 	addi	r19,r19,-1
  805d88:	44e6703a 	and	r19,r8,r19
  805d8c:	98007626 	beq	r19,zero,805f68 <__adddf3+0x360>
  805d90:	9809883a 	mov	r4,r19
  805d94:	080705c0 	call	80705c <__clzsi2>
  805d98:	10fffe04 	addi	r3,r2,-8
  805d9c:	010007c4 	movi	r4,31
  805da0:	20c07716 	blt	r4,r3,805f80 <__adddf3+0x378>
  805da4:	00800804 	movi	r2,32
  805da8:	10c5c83a 	sub	r2,r2,r3
  805dac:	8884d83a 	srl	r2,r17,r2
  805db0:	98d0983a 	sll	r8,r19,r3
  805db4:	88e2983a 	sll	r17,r17,r3
  805db8:	1204b03a 	or	r2,r2,r8
  805dbc:	1c007416 	blt	r3,r16,805f90 <__adddf3+0x388>
  805dc0:	1c21c83a 	sub	r16,r3,r16
  805dc4:	82000044 	addi	r8,r16,1
  805dc8:	00c007c4 	movi	r3,31
  805dcc:	1a009116 	blt	r3,r8,806014 <__adddf3+0x40c>
  805dd0:	00c00804 	movi	r3,32
  805dd4:	1a07c83a 	sub	r3,r3,r8
  805dd8:	8a08d83a 	srl	r4,r17,r8
  805ddc:	88e2983a 	sll	r17,r17,r3
  805de0:	10c6983a 	sll	r3,r2,r3
  805de4:	1210d83a 	srl	r8,r2,r8
  805de8:	8804c03a 	cmpne	r2,r17,zero
  805dec:	1906b03a 	or	r3,r3,r4
  805df0:	18a2b03a 	or	r17,r3,r2
  805df4:	0021883a 	mov	r16,zero
  805df8:	003fa206 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  805dfc:	1890b03a 	or	r8,r3,r2
  805e00:	40017d26 	beq	r8,zero,8063f8 <__adddf3+0x7f0>
  805e04:	1011883a 	mov	r8,r2
  805e08:	1823883a 	mov	r17,r3
  805e0c:	888001cc 	andi	r2,r17,7
  805e10:	103f9e1e 	bne	r2,zero,805c8c <__alt_mem_onchip_mem+0xff7fdc8c>
  805e14:	4004977a 	slli	r2,r8,29
  805e18:	8822d0fa 	srli	r17,r17,3
  805e1c:	4010d0fa 	srli	r8,r8,3
  805e20:	9007883a 	mov	r3,r18
  805e24:	1444b03a 	or	r2,r2,r17
  805e28:	0101ffc4 	movi	r4,2047
  805e2c:	81002426 	beq	r16,r4,805ec0 <__adddf3+0x2b8>
  805e30:	8120703a 	and	r16,r16,r4
  805e34:	01000434 	movhi	r4,16
  805e38:	213fffc4 	addi	r4,r4,-1
  805e3c:	4110703a 	and	r8,r8,r4
  805e40:	003fa806 	br	805ce4 <__alt_mem_onchip_mem+0xff7fdce4>
  805e44:	8089c83a 	sub	r4,r16,r2
  805e48:	01005e0e 	bge	zero,r4,805fc4 <__adddf3+0x3bc>
  805e4c:	10002b26 	beq	r2,zero,805efc <__adddf3+0x2f4>
  805e50:	0081ffc4 	movi	r2,2047
  805e54:	80bf8b26 	beq	r16,r2,805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  805e58:	4a402034 	orhi	r9,r9,128
  805e5c:	00800e04 	movi	r2,56
  805e60:	1100a40e 	bge	r2,r4,8060f4 <__adddf3+0x4ec>
  805e64:	498cb03a 	or	r6,r9,r6
  805e68:	300ac03a 	cmpne	r5,r6,zero
  805e6c:	0013883a 	mov	r9,zero
  805e70:	2c4b883a 	add	r5,r5,r17
  805e74:	2c63803a 	cmpltu	r17,r5,r17
  805e78:	4a11883a 	add	r8,r9,r8
  805e7c:	8a11883a 	add	r8,r17,r8
  805e80:	2823883a 	mov	r17,r5
  805e84:	4080202c 	andhi	r2,r8,128
  805e88:	103fe026 	beq	r2,zero,805e0c <__alt_mem_onchip_mem+0xff7fde0c>
  805e8c:	84000044 	addi	r16,r16,1
  805e90:	0081ffc4 	movi	r2,2047
  805e94:	8080d226 	beq	r16,r2,8061e0 <__adddf3+0x5d8>
  805e98:	00bfe034 	movhi	r2,65408
  805e9c:	10bfffc4 	addi	r2,r2,-1
  805ea0:	4090703a 	and	r8,r8,r2
  805ea4:	880ad07a 	srli	r5,r17,1
  805ea8:	400897fa 	slli	r4,r8,31
  805eac:	88c0004c 	andi	r3,r17,1
  805eb0:	28e2b03a 	or	r17,r5,r3
  805eb4:	4010d07a 	srli	r8,r8,1
  805eb8:	2462b03a 	or	r17,r4,r17
  805ebc:	003f7106 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  805ec0:	4088b03a 	or	r4,r8,r2
  805ec4:	20014526 	beq	r4,zero,8063dc <__adddf3+0x7d4>
  805ec8:	01000434 	movhi	r4,16
  805ecc:	42000234 	orhi	r8,r8,8
  805ed0:	213fffc4 	addi	r4,r4,-1
  805ed4:	4110703a 	and	r8,r8,r4
  805ed8:	003f8206 	br	805ce4 <__alt_mem_onchip_mem+0xff7fdce4>
  805edc:	18ffffc4 	addi	r3,r3,-1
  805ee0:	1800491e 	bne	r3,zero,806008 <__adddf3+0x400>
  805ee4:	898bc83a 	sub	r5,r17,r6
  805ee8:	8963803a 	cmpltu	r17,r17,r5
  805eec:	4251c83a 	sub	r8,r8,r9
  805ef0:	4451c83a 	sub	r8,r8,r17
  805ef4:	2823883a 	mov	r17,r5
  805ef8:	003f9f06 	br	805d78 <__alt_mem_onchip_mem+0xff7fdd78>
  805efc:	4984b03a 	or	r2,r9,r6
  805f00:	103f6026 	beq	r2,zero,805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  805f04:	213fffc4 	addi	r4,r4,-1
  805f08:	2000931e 	bne	r4,zero,806158 <__adddf3+0x550>
  805f0c:	898d883a 	add	r6,r17,r6
  805f10:	3463803a 	cmpltu	r17,r6,r17
  805f14:	4251883a 	add	r8,r8,r9
  805f18:	8a11883a 	add	r8,r17,r8
  805f1c:	3023883a 	mov	r17,r6
  805f20:	003fd806 	br	805e84 <__alt_mem_onchip_mem+0xff7fde84>
  805f24:	1800541e 	bne	r3,zero,806078 <__adddf3+0x470>
  805f28:	80800044 	addi	r2,r16,1
  805f2c:	1081ffcc 	andi	r2,r2,2047
  805f30:	00c00044 	movi	r3,1
  805f34:	1880a00e 	bge	r3,r2,8061b8 <__adddf3+0x5b0>
  805f38:	8989c83a 	sub	r4,r17,r6
  805f3c:	8905803a 	cmpltu	r2,r17,r4
  805f40:	4267c83a 	sub	r19,r8,r9
  805f44:	98a7c83a 	sub	r19,r19,r2
  805f48:	9880202c 	andhi	r2,r19,128
  805f4c:	10006326 	beq	r2,zero,8060dc <__adddf3+0x4d4>
  805f50:	3463c83a 	sub	r17,r6,r17
  805f54:	4a07c83a 	sub	r3,r9,r8
  805f58:	344d803a 	cmpltu	r6,r6,r17
  805f5c:	19a7c83a 	sub	r19,r3,r6
  805f60:	3825883a 	mov	r18,r7
  805f64:	983f8a1e 	bne	r19,zero,805d90 <__alt_mem_onchip_mem+0xff7fdd90>
  805f68:	8809883a 	mov	r4,r17
  805f6c:	080705c0 	call	80705c <__clzsi2>
  805f70:	10800804 	addi	r2,r2,32
  805f74:	10fffe04 	addi	r3,r2,-8
  805f78:	010007c4 	movi	r4,31
  805f7c:	20ff890e 	bge	r4,r3,805da4 <__alt_mem_onchip_mem+0xff7fdda4>
  805f80:	10bff604 	addi	r2,r2,-40
  805f84:	8884983a 	sll	r2,r17,r2
  805f88:	0023883a 	mov	r17,zero
  805f8c:	1c3f8c0e 	bge	r3,r16,805dc0 <__alt_mem_onchip_mem+0xff7fddc0>
  805f90:	023fe034 	movhi	r8,65408
  805f94:	423fffc4 	addi	r8,r8,-1
  805f98:	80e1c83a 	sub	r16,r16,r3
  805f9c:	1210703a 	and	r8,r2,r8
  805fa0:	003f3806 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  805fa4:	9007883a 	mov	r3,r18
  805fa8:	0011883a 	mov	r8,zero
  805fac:	0005883a 	mov	r2,zero
  805fb0:	003f4c06 	br	805ce4 <__alt_mem_onchip_mem+0xff7fdce4>
  805fb4:	498cb03a 	or	r6,r9,r6
  805fb8:	300cc03a 	cmpne	r6,r6,zero
  805fbc:	0007883a 	mov	r3,zero
  805fc0:	003f6806 	br	805d64 <__alt_mem_onchip_mem+0xff7fdd64>
  805fc4:	20009c1e 	bne	r4,zero,806238 <__adddf3+0x630>
  805fc8:	80800044 	addi	r2,r16,1
  805fcc:	1141ffcc 	andi	r5,r2,2047
  805fd0:	01000044 	movi	r4,1
  805fd4:	2140670e 	bge	r4,r5,806174 <__adddf3+0x56c>
  805fd8:	0101ffc4 	movi	r4,2047
  805fdc:	11007f26 	beq	r2,r4,8061dc <__adddf3+0x5d4>
  805fe0:	898d883a 	add	r6,r17,r6
  805fe4:	4247883a 	add	r3,r8,r9
  805fe8:	3451803a 	cmpltu	r8,r6,r17
  805fec:	40d1883a 	add	r8,r8,r3
  805ff0:	402297fa 	slli	r17,r8,31
  805ff4:	300cd07a 	srli	r6,r6,1
  805ff8:	4010d07a 	srli	r8,r8,1
  805ffc:	1021883a 	mov	r16,r2
  806000:	89a2b03a 	or	r17,r17,r6
  806004:	003f1f06 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806008:	0081ffc4 	movi	r2,2047
  80600c:	80bf481e 	bne	r16,r2,805d30 <__alt_mem_onchip_mem+0xff7fdd30>
  806010:	003f1c06 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806014:	843ff844 	addi	r16,r16,-31
  806018:	01000804 	movi	r4,32
  80601c:	1406d83a 	srl	r3,r2,r16
  806020:	41005026 	beq	r8,r4,806164 <__adddf3+0x55c>
  806024:	01001004 	movi	r4,64
  806028:	2211c83a 	sub	r8,r4,r8
  80602c:	1204983a 	sll	r2,r2,r8
  806030:	88a2b03a 	or	r17,r17,r2
  806034:	8822c03a 	cmpne	r17,r17,zero
  806038:	1c62b03a 	or	r17,r3,r17
  80603c:	0011883a 	mov	r8,zero
  806040:	0021883a 	mov	r16,zero
  806044:	003f7106 	br	805e0c <__alt_mem_onchip_mem+0xff7fde0c>
  806048:	193ff804 	addi	r4,r3,-32
  80604c:	00800804 	movi	r2,32
  806050:	4908d83a 	srl	r4,r9,r4
  806054:	18804526 	beq	r3,r2,80616c <__adddf3+0x564>
  806058:	00801004 	movi	r2,64
  80605c:	10c5c83a 	sub	r2,r2,r3
  806060:	4886983a 	sll	r3,r9,r2
  806064:	198cb03a 	or	r6,r3,r6
  806068:	300cc03a 	cmpne	r6,r6,zero
  80606c:	218cb03a 	or	r6,r4,r6
  806070:	0007883a 	mov	r3,zero
  806074:	003f3b06 	br	805d64 <__alt_mem_onchip_mem+0xff7fdd64>
  806078:	80002a26 	beq	r16,zero,806124 <__adddf3+0x51c>
  80607c:	0101ffc4 	movi	r4,2047
  806080:	11006826 	beq	r2,r4,806224 <__adddf3+0x61c>
  806084:	00c7c83a 	sub	r3,zero,r3
  806088:	42002034 	orhi	r8,r8,128
  80608c:	01000e04 	movi	r4,56
  806090:	20c07c16 	blt	r4,r3,806284 <__adddf3+0x67c>
  806094:	010007c4 	movi	r4,31
  806098:	20c0da16 	blt	r4,r3,806404 <__adddf3+0x7fc>
  80609c:	01000804 	movi	r4,32
  8060a0:	20c9c83a 	sub	r4,r4,r3
  8060a4:	4114983a 	sll	r10,r8,r4
  8060a8:	88cad83a 	srl	r5,r17,r3
  8060ac:	8908983a 	sll	r4,r17,r4
  8060b0:	40c6d83a 	srl	r3,r8,r3
  8060b4:	5162b03a 	or	r17,r10,r5
  8060b8:	2008c03a 	cmpne	r4,r4,zero
  8060bc:	8922b03a 	or	r17,r17,r4
  8060c0:	3463c83a 	sub	r17,r6,r17
  8060c4:	48c7c83a 	sub	r3,r9,r3
  8060c8:	344d803a 	cmpltu	r6,r6,r17
  8060cc:	1991c83a 	sub	r8,r3,r6
  8060d0:	1021883a 	mov	r16,r2
  8060d4:	3825883a 	mov	r18,r7
  8060d8:	003f2706 	br	805d78 <__alt_mem_onchip_mem+0xff7fdd78>
  8060dc:	24d0b03a 	or	r8,r4,r19
  8060e0:	40001b1e 	bne	r8,zero,806150 <__adddf3+0x548>
  8060e4:	0005883a 	mov	r2,zero
  8060e8:	0007883a 	mov	r3,zero
  8060ec:	0021883a 	mov	r16,zero
  8060f0:	003f4d06 	br	805e28 <__alt_mem_onchip_mem+0xff7fde28>
  8060f4:	008007c4 	movi	r2,31
  8060f8:	11003c16 	blt	r2,r4,8061ec <__adddf3+0x5e4>
  8060fc:	00800804 	movi	r2,32
  806100:	1105c83a 	sub	r2,r2,r4
  806104:	488e983a 	sll	r7,r9,r2
  806108:	310ad83a 	srl	r5,r6,r4
  80610c:	3084983a 	sll	r2,r6,r2
  806110:	4912d83a 	srl	r9,r9,r4
  806114:	394ab03a 	or	r5,r7,r5
  806118:	1004c03a 	cmpne	r2,r2,zero
  80611c:	288ab03a 	or	r5,r5,r2
  806120:	003f5306 	br	805e70 <__alt_mem_onchip_mem+0xff7fde70>
  806124:	4448b03a 	or	r4,r8,r17
  806128:	20003e26 	beq	r4,zero,806224 <__adddf3+0x61c>
  80612c:	00c6303a 	nor	r3,zero,r3
  806130:	18003a1e 	bne	r3,zero,80621c <__adddf3+0x614>
  806134:	3463c83a 	sub	r17,r6,r17
  806138:	4a07c83a 	sub	r3,r9,r8
  80613c:	344d803a 	cmpltu	r6,r6,r17
  806140:	1991c83a 	sub	r8,r3,r6
  806144:	1021883a 	mov	r16,r2
  806148:	3825883a 	mov	r18,r7
  80614c:	003f0a06 	br	805d78 <__alt_mem_onchip_mem+0xff7fdd78>
  806150:	2023883a 	mov	r17,r4
  806154:	003f0d06 	br	805d8c <__alt_mem_onchip_mem+0xff7fdd8c>
  806158:	0081ffc4 	movi	r2,2047
  80615c:	80bf3f1e 	bne	r16,r2,805e5c <__alt_mem_onchip_mem+0xff7fde5c>
  806160:	003ec806 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806164:	0005883a 	mov	r2,zero
  806168:	003fb106 	br	806030 <__alt_mem_onchip_mem+0xff7fe030>
  80616c:	0007883a 	mov	r3,zero
  806170:	003fbc06 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806174:	4444b03a 	or	r2,r8,r17
  806178:	8000871e 	bne	r16,zero,806398 <__adddf3+0x790>
  80617c:	1000ba26 	beq	r2,zero,806468 <__adddf3+0x860>
  806180:	4984b03a 	or	r2,r9,r6
  806184:	103ebf26 	beq	r2,zero,805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806188:	8985883a 	add	r2,r17,r6
  80618c:	4247883a 	add	r3,r8,r9
  806190:	1451803a 	cmpltu	r8,r2,r17
  806194:	40d1883a 	add	r8,r8,r3
  806198:	40c0202c 	andhi	r3,r8,128
  80619c:	1023883a 	mov	r17,r2
  8061a0:	183f1a26 	beq	r3,zero,805e0c <__alt_mem_onchip_mem+0xff7fde0c>
  8061a4:	00bfe034 	movhi	r2,65408
  8061a8:	10bfffc4 	addi	r2,r2,-1
  8061ac:	2021883a 	mov	r16,r4
  8061b0:	4090703a 	and	r8,r8,r2
  8061b4:	003eb306 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  8061b8:	4444b03a 	or	r2,r8,r17
  8061bc:	8000291e 	bne	r16,zero,806264 <__adddf3+0x65c>
  8061c0:	10004b1e 	bne	r2,zero,8062f0 <__adddf3+0x6e8>
  8061c4:	4990b03a 	or	r8,r9,r6
  8061c8:	40008b26 	beq	r8,zero,8063f8 <__adddf3+0x7f0>
  8061cc:	4811883a 	mov	r8,r9
  8061d0:	3023883a 	mov	r17,r6
  8061d4:	3825883a 	mov	r18,r7
  8061d8:	003eaa06 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  8061dc:	1021883a 	mov	r16,r2
  8061e0:	0011883a 	mov	r8,zero
  8061e4:	0005883a 	mov	r2,zero
  8061e8:	003f0f06 	br	805e28 <__alt_mem_onchip_mem+0xff7fde28>
  8061ec:	217ff804 	addi	r5,r4,-32
  8061f0:	00800804 	movi	r2,32
  8061f4:	494ad83a 	srl	r5,r9,r5
  8061f8:	20807d26 	beq	r4,r2,8063f0 <__adddf3+0x7e8>
  8061fc:	00801004 	movi	r2,64
  806200:	1109c83a 	sub	r4,r2,r4
  806204:	4912983a 	sll	r9,r9,r4
  806208:	498cb03a 	or	r6,r9,r6
  80620c:	300cc03a 	cmpne	r6,r6,zero
  806210:	298ab03a 	or	r5,r5,r6
  806214:	0013883a 	mov	r9,zero
  806218:	003f1506 	br	805e70 <__alt_mem_onchip_mem+0xff7fde70>
  80621c:	0101ffc4 	movi	r4,2047
  806220:	113f9a1e 	bne	r2,r4,80608c <__alt_mem_onchip_mem+0xff7fe08c>
  806224:	4811883a 	mov	r8,r9
  806228:	3023883a 	mov	r17,r6
  80622c:	1021883a 	mov	r16,r2
  806230:	3825883a 	mov	r18,r7
  806234:	003e9306 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806238:	8000161e 	bne	r16,zero,806294 <__adddf3+0x68c>
  80623c:	444ab03a 	or	r5,r8,r17
  806240:	28005126 	beq	r5,zero,806388 <__adddf3+0x780>
  806244:	0108303a 	nor	r4,zero,r4
  806248:	20004d1e 	bne	r4,zero,806380 <__adddf3+0x778>
  80624c:	89a3883a 	add	r17,r17,r6
  806250:	4253883a 	add	r9,r8,r9
  806254:	898d803a 	cmpltu	r6,r17,r6
  806258:	3251883a 	add	r8,r6,r9
  80625c:	1021883a 	mov	r16,r2
  806260:	003f0806 	br	805e84 <__alt_mem_onchip_mem+0xff7fde84>
  806264:	1000301e 	bne	r2,zero,806328 <__adddf3+0x720>
  806268:	4984b03a 	or	r2,r9,r6
  80626c:	10007126 	beq	r2,zero,806434 <__adddf3+0x82c>
  806270:	4811883a 	mov	r8,r9
  806274:	3023883a 	mov	r17,r6
  806278:	3825883a 	mov	r18,r7
  80627c:	0401ffc4 	movi	r16,2047
  806280:	003e8006 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806284:	4462b03a 	or	r17,r8,r17
  806288:	8822c03a 	cmpne	r17,r17,zero
  80628c:	0007883a 	mov	r3,zero
  806290:	003f8b06 	br	8060c0 <__alt_mem_onchip_mem+0xff7fe0c0>
  806294:	0141ffc4 	movi	r5,2047
  806298:	11403b26 	beq	r2,r5,806388 <__adddf3+0x780>
  80629c:	0109c83a 	sub	r4,zero,r4
  8062a0:	42002034 	orhi	r8,r8,128
  8062a4:	01400e04 	movi	r5,56
  8062a8:	29006716 	blt	r5,r4,806448 <__adddf3+0x840>
  8062ac:	014007c4 	movi	r5,31
  8062b0:	29007016 	blt	r5,r4,806474 <__adddf3+0x86c>
  8062b4:	01400804 	movi	r5,32
  8062b8:	290bc83a 	sub	r5,r5,r4
  8062bc:	4154983a 	sll	r10,r8,r5
  8062c0:	890ed83a 	srl	r7,r17,r4
  8062c4:	894a983a 	sll	r5,r17,r5
  8062c8:	4108d83a 	srl	r4,r8,r4
  8062cc:	51e2b03a 	or	r17,r10,r7
  8062d0:	280ac03a 	cmpne	r5,r5,zero
  8062d4:	8962b03a 	or	r17,r17,r5
  8062d8:	89a3883a 	add	r17,r17,r6
  8062dc:	2253883a 	add	r9,r4,r9
  8062e0:	898d803a 	cmpltu	r6,r17,r6
  8062e4:	3251883a 	add	r8,r6,r9
  8062e8:	1021883a 	mov	r16,r2
  8062ec:	003ee506 	br	805e84 <__alt_mem_onchip_mem+0xff7fde84>
  8062f0:	4984b03a 	or	r2,r9,r6
  8062f4:	103e6326 	beq	r2,zero,805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  8062f8:	8987c83a 	sub	r3,r17,r6
  8062fc:	88c9803a 	cmpltu	r4,r17,r3
  806300:	4245c83a 	sub	r2,r8,r9
  806304:	1105c83a 	sub	r2,r2,r4
  806308:	1100202c 	andhi	r4,r2,128
  80630c:	203ebb26 	beq	r4,zero,805dfc <__alt_mem_onchip_mem+0xff7fddfc>
  806310:	3463c83a 	sub	r17,r6,r17
  806314:	4a07c83a 	sub	r3,r9,r8
  806318:	344d803a 	cmpltu	r6,r6,r17
  80631c:	1991c83a 	sub	r8,r3,r6
  806320:	3825883a 	mov	r18,r7
  806324:	003e5706 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806328:	4984b03a 	or	r2,r9,r6
  80632c:	10002e26 	beq	r2,zero,8063e8 <__adddf3+0x7e0>
  806330:	4004d0fa 	srli	r2,r8,3
  806334:	8822d0fa 	srli	r17,r17,3
  806338:	4010977a 	slli	r8,r8,29
  80633c:	10c0022c 	andhi	r3,r2,8
  806340:	4462b03a 	or	r17,r8,r17
  806344:	18000826 	beq	r3,zero,806368 <__adddf3+0x760>
  806348:	4808d0fa 	srli	r4,r9,3
  80634c:	20c0022c 	andhi	r3,r4,8
  806350:	1800051e 	bne	r3,zero,806368 <__adddf3+0x760>
  806354:	300cd0fa 	srli	r6,r6,3
  806358:	4806977a 	slli	r3,r9,29
  80635c:	2005883a 	mov	r2,r4
  806360:	3825883a 	mov	r18,r7
  806364:	19a2b03a 	or	r17,r3,r6
  806368:	8810d77a 	srli	r8,r17,29
  80636c:	100490fa 	slli	r2,r2,3
  806370:	882290fa 	slli	r17,r17,3
  806374:	0401ffc4 	movi	r16,2047
  806378:	4090b03a 	or	r8,r8,r2
  80637c:	003e4106 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806380:	0141ffc4 	movi	r5,2047
  806384:	117fc71e 	bne	r2,r5,8062a4 <__alt_mem_onchip_mem+0xff7fe2a4>
  806388:	4811883a 	mov	r8,r9
  80638c:	3023883a 	mov	r17,r6
  806390:	1021883a 	mov	r16,r2
  806394:	003e3b06 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806398:	10002f26 	beq	r2,zero,806458 <__adddf3+0x850>
  80639c:	4984b03a 	or	r2,r9,r6
  8063a0:	10001126 	beq	r2,zero,8063e8 <__adddf3+0x7e0>
  8063a4:	4004d0fa 	srli	r2,r8,3
  8063a8:	8822d0fa 	srli	r17,r17,3
  8063ac:	4010977a 	slli	r8,r8,29
  8063b0:	10c0022c 	andhi	r3,r2,8
  8063b4:	4462b03a 	or	r17,r8,r17
  8063b8:	183feb26 	beq	r3,zero,806368 <__alt_mem_onchip_mem+0xff7fe368>
  8063bc:	4808d0fa 	srli	r4,r9,3
  8063c0:	20c0022c 	andhi	r3,r4,8
  8063c4:	183fe81e 	bne	r3,zero,806368 <__alt_mem_onchip_mem+0xff7fe368>
  8063c8:	300cd0fa 	srli	r6,r6,3
  8063cc:	4806977a 	slli	r3,r9,29
  8063d0:	2005883a 	mov	r2,r4
  8063d4:	19a2b03a 	or	r17,r3,r6
  8063d8:	003fe306 	br	806368 <__alt_mem_onchip_mem+0xff7fe368>
  8063dc:	0011883a 	mov	r8,zero
  8063e0:	0005883a 	mov	r2,zero
  8063e4:	003e3f06 	br	805ce4 <__alt_mem_onchip_mem+0xff7fdce4>
  8063e8:	0401ffc4 	movi	r16,2047
  8063ec:	003e2506 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  8063f0:	0013883a 	mov	r9,zero
  8063f4:	003f8406 	br	806208 <__alt_mem_onchip_mem+0xff7fe208>
  8063f8:	0005883a 	mov	r2,zero
  8063fc:	0007883a 	mov	r3,zero
  806400:	003e8906 	br	805e28 <__alt_mem_onchip_mem+0xff7fde28>
  806404:	197ff804 	addi	r5,r3,-32
  806408:	01000804 	movi	r4,32
  80640c:	414ad83a 	srl	r5,r8,r5
  806410:	19002426 	beq	r3,r4,8064a4 <__adddf3+0x89c>
  806414:	01001004 	movi	r4,64
  806418:	20c7c83a 	sub	r3,r4,r3
  80641c:	40c6983a 	sll	r3,r8,r3
  806420:	1c46b03a 	or	r3,r3,r17
  806424:	1806c03a 	cmpne	r3,r3,zero
  806428:	28e2b03a 	or	r17,r5,r3
  80642c:	0007883a 	mov	r3,zero
  806430:	003f2306 	br	8060c0 <__alt_mem_onchip_mem+0xff7fe0c0>
  806434:	0007883a 	mov	r3,zero
  806438:	5811883a 	mov	r8,r11
  80643c:	00bfffc4 	movi	r2,-1
  806440:	0401ffc4 	movi	r16,2047
  806444:	003e7806 	br	805e28 <__alt_mem_onchip_mem+0xff7fde28>
  806448:	4462b03a 	or	r17,r8,r17
  80644c:	8822c03a 	cmpne	r17,r17,zero
  806450:	0009883a 	mov	r4,zero
  806454:	003fa006 	br	8062d8 <__alt_mem_onchip_mem+0xff7fe2d8>
  806458:	4811883a 	mov	r8,r9
  80645c:	3023883a 	mov	r17,r6
  806460:	0401ffc4 	movi	r16,2047
  806464:	003e0706 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806468:	4811883a 	mov	r8,r9
  80646c:	3023883a 	mov	r17,r6
  806470:	003e0406 	br	805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  806474:	21fff804 	addi	r7,r4,-32
  806478:	01400804 	movi	r5,32
  80647c:	41ced83a 	srl	r7,r8,r7
  806480:	21400a26 	beq	r4,r5,8064ac <__adddf3+0x8a4>
  806484:	01401004 	movi	r5,64
  806488:	2909c83a 	sub	r4,r5,r4
  80648c:	4108983a 	sll	r4,r8,r4
  806490:	2448b03a 	or	r4,r4,r17
  806494:	2008c03a 	cmpne	r4,r4,zero
  806498:	3922b03a 	or	r17,r7,r4
  80649c:	0009883a 	mov	r4,zero
  8064a0:	003f8d06 	br	8062d8 <__alt_mem_onchip_mem+0xff7fe2d8>
  8064a4:	0007883a 	mov	r3,zero
  8064a8:	003fdd06 	br	806420 <__alt_mem_onchip_mem+0xff7fe420>
  8064ac:	0009883a 	mov	r4,zero
  8064b0:	003ff706 	br	806490 <__alt_mem_onchip_mem+0xff7fe490>

008064b4 <__gedf2>:
  8064b4:	2804d53a 	srli	r2,r5,20
  8064b8:	3806d53a 	srli	r3,r7,20
  8064bc:	02000434 	movhi	r8,16
  8064c0:	423fffc4 	addi	r8,r8,-1
  8064c4:	1081ffcc 	andi	r2,r2,2047
  8064c8:	0241ffc4 	movi	r9,2047
  8064cc:	2a14703a 	and	r10,r5,r8
  8064d0:	18c1ffcc 	andi	r3,r3,2047
  8064d4:	3a10703a 	and	r8,r7,r8
  8064d8:	280ad7fa 	srli	r5,r5,31
  8064dc:	380ed7fa 	srli	r7,r7,31
  8064e0:	12401d26 	beq	r2,r9,806558 <__gedf2+0xa4>
  8064e4:	0241ffc4 	movi	r9,2047
  8064e8:	1a401226 	beq	r3,r9,806534 <__gedf2+0x80>
  8064ec:	1000081e 	bne	r2,zero,806510 <__gedf2+0x5c>
  8064f0:	2296b03a 	or	r11,r4,r10
  8064f4:	5813003a 	cmpeq	r9,r11,zero
  8064f8:	1800091e 	bne	r3,zero,806520 <__gedf2+0x6c>
  8064fc:	3218b03a 	or	r12,r6,r8
  806500:	6000071e 	bne	r12,zero,806520 <__gedf2+0x6c>
  806504:	0005883a 	mov	r2,zero
  806508:	5800101e 	bne	r11,zero,80654c <__gedf2+0x98>
  80650c:	f800283a 	ret
  806510:	18000c1e 	bne	r3,zero,806544 <__gedf2+0x90>
  806514:	3212b03a 	or	r9,r6,r8
  806518:	48000c26 	beq	r9,zero,80654c <__gedf2+0x98>
  80651c:	0013883a 	mov	r9,zero
  806520:	39c03fcc 	andi	r7,r7,255
  806524:	48000826 	beq	r9,zero,806548 <__gedf2+0x94>
  806528:	38000926 	beq	r7,zero,806550 <__gedf2+0x9c>
  80652c:	00800044 	movi	r2,1
  806530:	f800283a 	ret
  806534:	3212b03a 	or	r9,r6,r8
  806538:	483fec26 	beq	r9,zero,8064ec <__alt_mem_onchip_mem+0xff7fe4ec>
  80653c:	00bfff84 	movi	r2,-2
  806540:	f800283a 	ret
  806544:	39c03fcc 	andi	r7,r7,255
  806548:	29c00626 	beq	r5,r7,806564 <__gedf2+0xb0>
  80654c:	283ff726 	beq	r5,zero,80652c <__alt_mem_onchip_mem+0xff7fe52c>
  806550:	00bfffc4 	movi	r2,-1
  806554:	f800283a 	ret
  806558:	2292b03a 	or	r9,r4,r10
  80655c:	483fe126 	beq	r9,zero,8064e4 <__alt_mem_onchip_mem+0xff7fe4e4>
  806560:	003ff606 	br	80653c <__alt_mem_onchip_mem+0xff7fe53c>
  806564:	18bff916 	blt	r3,r2,80654c <__alt_mem_onchip_mem+0xff7fe54c>
  806568:	10c00316 	blt	r2,r3,806578 <__gedf2+0xc4>
  80656c:	42bff736 	bltu	r8,r10,80654c <__alt_mem_onchip_mem+0xff7fe54c>
  806570:	52000326 	beq	r10,r8,806580 <__gedf2+0xcc>
  806574:	5200042e 	bgeu	r10,r8,806588 <__gedf2+0xd4>
  806578:	283fec1e 	bne	r5,zero,80652c <__alt_mem_onchip_mem+0xff7fe52c>
  80657c:	003ff406 	br	806550 <__alt_mem_onchip_mem+0xff7fe550>
  806580:	313ff236 	bltu	r6,r4,80654c <__alt_mem_onchip_mem+0xff7fe54c>
  806584:	21bffc36 	bltu	r4,r6,806578 <__alt_mem_onchip_mem+0xff7fe578>
  806588:	0005883a 	mov	r2,zero
  80658c:	f800283a 	ret

00806590 <__ledf2>:
  806590:	2804d53a 	srli	r2,r5,20
  806594:	3810d53a 	srli	r8,r7,20
  806598:	00c00434 	movhi	r3,16
  80659c:	18ffffc4 	addi	r3,r3,-1
  8065a0:	1081ffcc 	andi	r2,r2,2047
  8065a4:	0241ffc4 	movi	r9,2047
  8065a8:	28d4703a 	and	r10,r5,r3
  8065ac:	4201ffcc 	andi	r8,r8,2047
  8065b0:	38c6703a 	and	r3,r7,r3
  8065b4:	280ad7fa 	srli	r5,r5,31
  8065b8:	380ed7fa 	srli	r7,r7,31
  8065bc:	12401f26 	beq	r2,r9,80663c <__ledf2+0xac>
  8065c0:	0241ffc4 	movi	r9,2047
  8065c4:	42401426 	beq	r8,r9,806618 <__ledf2+0x88>
  8065c8:	1000091e 	bne	r2,zero,8065f0 <__ledf2+0x60>
  8065cc:	2296b03a 	or	r11,r4,r10
  8065d0:	5813003a 	cmpeq	r9,r11,zero
  8065d4:	29403fcc 	andi	r5,r5,255
  8065d8:	40000a1e 	bne	r8,zero,806604 <__ledf2+0x74>
  8065dc:	30d8b03a 	or	r12,r6,r3
  8065e0:	6000081e 	bne	r12,zero,806604 <__ledf2+0x74>
  8065e4:	0005883a 	mov	r2,zero
  8065e8:	5800111e 	bne	r11,zero,806630 <__ledf2+0xa0>
  8065ec:	f800283a 	ret
  8065f0:	29403fcc 	andi	r5,r5,255
  8065f4:	40000c1e 	bne	r8,zero,806628 <__ledf2+0x98>
  8065f8:	30d2b03a 	or	r9,r6,r3
  8065fc:	48000c26 	beq	r9,zero,806630 <__ledf2+0xa0>
  806600:	0013883a 	mov	r9,zero
  806604:	39c03fcc 	andi	r7,r7,255
  806608:	48000826 	beq	r9,zero,80662c <__ledf2+0x9c>
  80660c:	38001126 	beq	r7,zero,806654 <__ledf2+0xc4>
  806610:	00800044 	movi	r2,1
  806614:	f800283a 	ret
  806618:	30d2b03a 	or	r9,r6,r3
  80661c:	483fea26 	beq	r9,zero,8065c8 <__alt_mem_onchip_mem+0xff7fe5c8>
  806620:	00800084 	movi	r2,2
  806624:	f800283a 	ret
  806628:	39c03fcc 	andi	r7,r7,255
  80662c:	39400726 	beq	r7,r5,80664c <__ledf2+0xbc>
  806630:	2800081e 	bne	r5,zero,806654 <__ledf2+0xc4>
  806634:	00800044 	movi	r2,1
  806638:	f800283a 	ret
  80663c:	2292b03a 	or	r9,r4,r10
  806640:	483fdf26 	beq	r9,zero,8065c0 <__alt_mem_onchip_mem+0xff7fe5c0>
  806644:	00800084 	movi	r2,2
  806648:	f800283a 	ret
  80664c:	4080030e 	bge	r8,r2,80665c <__ledf2+0xcc>
  806650:	383fef26 	beq	r7,zero,806610 <__alt_mem_onchip_mem+0xff7fe610>
  806654:	00bfffc4 	movi	r2,-1
  806658:	f800283a 	ret
  80665c:	123feb16 	blt	r2,r8,80660c <__alt_mem_onchip_mem+0xff7fe60c>
  806660:	1abff336 	bltu	r3,r10,806630 <__alt_mem_onchip_mem+0xff7fe630>
  806664:	50c00326 	beq	r10,r3,806674 <__ledf2+0xe4>
  806668:	50c0042e 	bgeu	r10,r3,80667c <__ledf2+0xec>
  80666c:	283fe81e 	bne	r5,zero,806610 <__alt_mem_onchip_mem+0xff7fe610>
  806670:	003ff806 	br	806654 <__alt_mem_onchip_mem+0xff7fe654>
  806674:	313fee36 	bltu	r6,r4,806630 <__alt_mem_onchip_mem+0xff7fe630>
  806678:	21bffc36 	bltu	r4,r6,80666c <__alt_mem_onchip_mem+0xff7fe66c>
  80667c:	0005883a 	mov	r2,zero
  806680:	f800283a 	ret

00806684 <__subdf3>:
  806684:	02000434 	movhi	r8,16
  806688:	423fffc4 	addi	r8,r8,-1
  80668c:	defffb04 	addi	sp,sp,-20
  806690:	2a14703a 	and	r10,r5,r8
  806694:	3812d53a 	srli	r9,r7,20
  806698:	3a10703a 	and	r8,r7,r8
  80669c:	2006d77a 	srli	r3,r4,29
  8066a0:	3004d77a 	srli	r2,r6,29
  8066a4:	dc000015 	stw	r16,0(sp)
  8066a8:	501490fa 	slli	r10,r10,3
  8066ac:	2820d53a 	srli	r16,r5,20
  8066b0:	401090fa 	slli	r8,r8,3
  8066b4:	dc800215 	stw	r18,8(sp)
  8066b8:	dc400115 	stw	r17,4(sp)
  8066bc:	dfc00415 	stw	ra,16(sp)
  8066c0:	202290fa 	slli	r17,r4,3
  8066c4:	dcc00315 	stw	r19,12(sp)
  8066c8:	4a41ffcc 	andi	r9,r9,2047
  8066cc:	0101ffc4 	movi	r4,2047
  8066d0:	2824d7fa 	srli	r18,r5,31
  8066d4:	8401ffcc 	andi	r16,r16,2047
  8066d8:	50c6b03a 	or	r3,r10,r3
  8066dc:	380ed7fa 	srli	r7,r7,31
  8066e0:	408ab03a 	or	r5,r8,r2
  8066e4:	300c90fa 	slli	r6,r6,3
  8066e8:	49009626 	beq	r9,r4,806944 <__subdf3+0x2c0>
  8066ec:	39c0005c 	xori	r7,r7,1
  8066f0:	8245c83a 	sub	r2,r16,r9
  8066f4:	3c807426 	beq	r7,r18,8068c8 <__subdf3+0x244>
  8066f8:	0080af0e 	bge	zero,r2,8069b8 <__subdf3+0x334>
  8066fc:	48002a1e 	bne	r9,zero,8067a8 <__subdf3+0x124>
  806700:	2988b03a 	or	r4,r5,r6
  806704:	20009a1e 	bne	r4,zero,806970 <__subdf3+0x2ec>
  806708:	888001cc 	andi	r2,r17,7
  80670c:	10000726 	beq	r2,zero,80672c <__subdf3+0xa8>
  806710:	888003cc 	andi	r2,r17,15
  806714:	01000104 	movi	r4,4
  806718:	11000426 	beq	r2,r4,80672c <__subdf3+0xa8>
  80671c:	890b883a 	add	r5,r17,r4
  806720:	2c63803a 	cmpltu	r17,r5,r17
  806724:	1c47883a 	add	r3,r3,r17
  806728:	2823883a 	mov	r17,r5
  80672c:	1880202c 	andhi	r2,r3,128
  806730:	10005926 	beq	r2,zero,806898 <__subdf3+0x214>
  806734:	84000044 	addi	r16,r16,1
  806738:	0081ffc4 	movi	r2,2047
  80673c:	8080be26 	beq	r16,r2,806a38 <__subdf3+0x3b4>
  806740:	017fe034 	movhi	r5,65408
  806744:	297fffc4 	addi	r5,r5,-1
  806748:	1946703a 	and	r3,r3,r5
  80674c:	1804977a 	slli	r2,r3,29
  806750:	1806927a 	slli	r3,r3,9
  806754:	8822d0fa 	srli	r17,r17,3
  806758:	8401ffcc 	andi	r16,r16,2047
  80675c:	180ad33a 	srli	r5,r3,12
  806760:	9100004c 	andi	r4,r18,1
  806764:	1444b03a 	or	r2,r2,r17
  806768:	80c1ffcc 	andi	r3,r16,2047
  80676c:	1820953a 	slli	r16,r3,20
  806770:	20c03fcc 	andi	r3,r4,255
  806774:	180897fa 	slli	r4,r3,31
  806778:	00c00434 	movhi	r3,16
  80677c:	18ffffc4 	addi	r3,r3,-1
  806780:	28c6703a 	and	r3,r5,r3
  806784:	1c06b03a 	or	r3,r3,r16
  806788:	1906b03a 	or	r3,r3,r4
  80678c:	dfc00417 	ldw	ra,16(sp)
  806790:	dcc00317 	ldw	r19,12(sp)
  806794:	dc800217 	ldw	r18,8(sp)
  806798:	dc400117 	ldw	r17,4(sp)
  80679c:	dc000017 	ldw	r16,0(sp)
  8067a0:	dec00504 	addi	sp,sp,20
  8067a4:	f800283a 	ret
  8067a8:	0101ffc4 	movi	r4,2047
  8067ac:	813fd626 	beq	r16,r4,806708 <__alt_mem_onchip_mem+0xff7fe708>
  8067b0:	29402034 	orhi	r5,r5,128
  8067b4:	01000e04 	movi	r4,56
  8067b8:	2080a316 	blt	r4,r2,806a48 <__subdf3+0x3c4>
  8067bc:	010007c4 	movi	r4,31
  8067c0:	2080c616 	blt	r4,r2,806adc <__subdf3+0x458>
  8067c4:	01000804 	movi	r4,32
  8067c8:	2089c83a 	sub	r4,r4,r2
  8067cc:	2910983a 	sll	r8,r5,r4
  8067d0:	308ed83a 	srl	r7,r6,r2
  8067d4:	3108983a 	sll	r4,r6,r4
  8067d8:	2884d83a 	srl	r2,r5,r2
  8067dc:	41ccb03a 	or	r6,r8,r7
  8067e0:	2008c03a 	cmpne	r4,r4,zero
  8067e4:	310cb03a 	or	r6,r6,r4
  8067e8:	898dc83a 	sub	r6,r17,r6
  8067ec:	89a3803a 	cmpltu	r17,r17,r6
  8067f0:	1887c83a 	sub	r3,r3,r2
  8067f4:	1c47c83a 	sub	r3,r3,r17
  8067f8:	3023883a 	mov	r17,r6
  8067fc:	1880202c 	andhi	r2,r3,128
  806800:	10002326 	beq	r2,zero,806890 <__subdf3+0x20c>
  806804:	04c02034 	movhi	r19,128
  806808:	9cffffc4 	addi	r19,r19,-1
  80680c:	1ce6703a 	and	r19,r3,r19
  806810:	98007a26 	beq	r19,zero,8069fc <__subdf3+0x378>
  806814:	9809883a 	mov	r4,r19
  806818:	080705c0 	call	80705c <__clzsi2>
  80681c:	113ffe04 	addi	r4,r2,-8
  806820:	00c007c4 	movi	r3,31
  806824:	19007b16 	blt	r3,r4,806a14 <__subdf3+0x390>
  806828:	00800804 	movi	r2,32
  80682c:	1105c83a 	sub	r2,r2,r4
  806830:	8884d83a 	srl	r2,r17,r2
  806834:	9906983a 	sll	r3,r19,r4
  806838:	8922983a 	sll	r17,r17,r4
  80683c:	10c4b03a 	or	r2,r2,r3
  806840:	24007816 	blt	r4,r16,806a24 <__subdf3+0x3a0>
  806844:	2421c83a 	sub	r16,r4,r16
  806848:	80c00044 	addi	r3,r16,1
  80684c:	010007c4 	movi	r4,31
  806850:	20c09516 	blt	r4,r3,806aa8 <__subdf3+0x424>
  806854:	01400804 	movi	r5,32
  806858:	28cbc83a 	sub	r5,r5,r3
  80685c:	88c8d83a 	srl	r4,r17,r3
  806860:	8962983a 	sll	r17,r17,r5
  806864:	114a983a 	sll	r5,r2,r5
  806868:	10c6d83a 	srl	r3,r2,r3
  80686c:	8804c03a 	cmpne	r2,r17,zero
  806870:	290ab03a 	or	r5,r5,r4
  806874:	28a2b03a 	or	r17,r5,r2
  806878:	0021883a 	mov	r16,zero
  80687c:	003fa206 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806880:	2090b03a 	or	r8,r4,r2
  806884:	40018e26 	beq	r8,zero,806ec0 <__subdf3+0x83c>
  806888:	1007883a 	mov	r3,r2
  80688c:	2023883a 	mov	r17,r4
  806890:	888001cc 	andi	r2,r17,7
  806894:	103f9e1e 	bne	r2,zero,806710 <__alt_mem_onchip_mem+0xff7fe710>
  806898:	1804977a 	slli	r2,r3,29
  80689c:	8822d0fa 	srli	r17,r17,3
  8068a0:	1810d0fa 	srli	r8,r3,3
  8068a4:	9100004c 	andi	r4,r18,1
  8068a8:	1444b03a 	or	r2,r2,r17
  8068ac:	00c1ffc4 	movi	r3,2047
  8068b0:	80c02826 	beq	r16,r3,806954 <__subdf3+0x2d0>
  8068b4:	01400434 	movhi	r5,16
  8068b8:	297fffc4 	addi	r5,r5,-1
  8068bc:	80e0703a 	and	r16,r16,r3
  8068c0:	414a703a 	and	r5,r8,r5
  8068c4:	003fa806 	br	806768 <__alt_mem_onchip_mem+0xff7fe768>
  8068c8:	0080630e 	bge	zero,r2,806a58 <__subdf3+0x3d4>
  8068cc:	48003026 	beq	r9,zero,806990 <__subdf3+0x30c>
  8068d0:	0101ffc4 	movi	r4,2047
  8068d4:	813f8c26 	beq	r16,r4,806708 <__alt_mem_onchip_mem+0xff7fe708>
  8068d8:	29402034 	orhi	r5,r5,128
  8068dc:	01000e04 	movi	r4,56
  8068e0:	2080a90e 	bge	r4,r2,806b88 <__subdf3+0x504>
  8068e4:	298cb03a 	or	r6,r5,r6
  8068e8:	3012c03a 	cmpne	r9,r6,zero
  8068ec:	0005883a 	mov	r2,zero
  8068f0:	4c53883a 	add	r9,r9,r17
  8068f4:	4c63803a 	cmpltu	r17,r9,r17
  8068f8:	10c7883a 	add	r3,r2,r3
  8068fc:	88c7883a 	add	r3,r17,r3
  806900:	4823883a 	mov	r17,r9
  806904:	1880202c 	andhi	r2,r3,128
  806908:	1000d026 	beq	r2,zero,806c4c <__subdf3+0x5c8>
  80690c:	84000044 	addi	r16,r16,1
  806910:	0081ffc4 	movi	r2,2047
  806914:	8080fe26 	beq	r16,r2,806d10 <__subdf3+0x68c>
  806918:	00bfe034 	movhi	r2,65408
  80691c:	10bfffc4 	addi	r2,r2,-1
  806920:	1886703a 	and	r3,r3,r2
  806924:	880ad07a 	srli	r5,r17,1
  806928:	180497fa 	slli	r2,r3,31
  80692c:	8900004c 	andi	r4,r17,1
  806930:	2922b03a 	or	r17,r5,r4
  806934:	1806d07a 	srli	r3,r3,1
  806938:	1462b03a 	or	r17,r2,r17
  80693c:	3825883a 	mov	r18,r7
  806940:	003f7106 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806944:	2984b03a 	or	r2,r5,r6
  806948:	103f6826 	beq	r2,zero,8066ec <__alt_mem_onchip_mem+0xff7fe6ec>
  80694c:	39c03fcc 	andi	r7,r7,255
  806950:	003f6706 	br	8066f0 <__alt_mem_onchip_mem+0xff7fe6f0>
  806954:	4086b03a 	or	r3,r8,r2
  806958:	18015226 	beq	r3,zero,806ea4 <__subdf3+0x820>
  80695c:	00c00434 	movhi	r3,16
  806960:	41400234 	orhi	r5,r8,8
  806964:	18ffffc4 	addi	r3,r3,-1
  806968:	28ca703a 	and	r5,r5,r3
  80696c:	003f7e06 	br	806768 <__alt_mem_onchip_mem+0xff7fe768>
  806970:	10bfffc4 	addi	r2,r2,-1
  806974:	1000491e 	bne	r2,zero,806a9c <__subdf3+0x418>
  806978:	898fc83a 	sub	r7,r17,r6
  80697c:	89e3803a 	cmpltu	r17,r17,r7
  806980:	1947c83a 	sub	r3,r3,r5
  806984:	1c47c83a 	sub	r3,r3,r17
  806988:	3823883a 	mov	r17,r7
  80698c:	003f9b06 	br	8067fc <__alt_mem_onchip_mem+0xff7fe7fc>
  806990:	2988b03a 	or	r4,r5,r6
  806994:	203f5c26 	beq	r4,zero,806708 <__alt_mem_onchip_mem+0xff7fe708>
  806998:	10bfffc4 	addi	r2,r2,-1
  80699c:	1000931e 	bne	r2,zero,806bec <__subdf3+0x568>
  8069a0:	898d883a 	add	r6,r17,r6
  8069a4:	3463803a 	cmpltu	r17,r6,r17
  8069a8:	1947883a 	add	r3,r3,r5
  8069ac:	88c7883a 	add	r3,r17,r3
  8069b0:	3023883a 	mov	r17,r6
  8069b4:	003fd306 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  8069b8:	1000541e 	bne	r2,zero,806b0c <__subdf3+0x488>
  8069bc:	80800044 	addi	r2,r16,1
  8069c0:	1081ffcc 	andi	r2,r2,2047
  8069c4:	01000044 	movi	r4,1
  8069c8:	2080a20e 	bge	r4,r2,806c54 <__subdf3+0x5d0>
  8069cc:	8989c83a 	sub	r4,r17,r6
  8069d0:	8905803a 	cmpltu	r2,r17,r4
  8069d4:	1967c83a 	sub	r19,r3,r5
  8069d8:	98a7c83a 	sub	r19,r19,r2
  8069dc:	9880202c 	andhi	r2,r19,128
  8069e0:	10006326 	beq	r2,zero,806b70 <__subdf3+0x4ec>
  8069e4:	3463c83a 	sub	r17,r6,r17
  8069e8:	28c7c83a 	sub	r3,r5,r3
  8069ec:	344d803a 	cmpltu	r6,r6,r17
  8069f0:	19a7c83a 	sub	r19,r3,r6
  8069f4:	3825883a 	mov	r18,r7
  8069f8:	983f861e 	bne	r19,zero,806814 <__alt_mem_onchip_mem+0xff7fe814>
  8069fc:	8809883a 	mov	r4,r17
  806a00:	080705c0 	call	80705c <__clzsi2>
  806a04:	10800804 	addi	r2,r2,32
  806a08:	113ffe04 	addi	r4,r2,-8
  806a0c:	00c007c4 	movi	r3,31
  806a10:	193f850e 	bge	r3,r4,806828 <__alt_mem_onchip_mem+0xff7fe828>
  806a14:	10bff604 	addi	r2,r2,-40
  806a18:	8884983a 	sll	r2,r17,r2
  806a1c:	0023883a 	mov	r17,zero
  806a20:	243f880e 	bge	r4,r16,806844 <__alt_mem_onchip_mem+0xff7fe844>
  806a24:	00ffe034 	movhi	r3,65408
  806a28:	18ffffc4 	addi	r3,r3,-1
  806a2c:	8121c83a 	sub	r16,r16,r4
  806a30:	10c6703a 	and	r3,r2,r3
  806a34:	003f3406 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806a38:	9100004c 	andi	r4,r18,1
  806a3c:	000b883a 	mov	r5,zero
  806a40:	0005883a 	mov	r2,zero
  806a44:	003f4806 	br	806768 <__alt_mem_onchip_mem+0xff7fe768>
  806a48:	298cb03a 	or	r6,r5,r6
  806a4c:	300cc03a 	cmpne	r6,r6,zero
  806a50:	0005883a 	mov	r2,zero
  806a54:	003f6406 	br	8067e8 <__alt_mem_onchip_mem+0xff7fe7e8>
  806a58:	10009a1e 	bne	r2,zero,806cc4 <__subdf3+0x640>
  806a5c:	82400044 	addi	r9,r16,1
  806a60:	4881ffcc 	andi	r2,r9,2047
  806a64:	02800044 	movi	r10,1
  806a68:	5080670e 	bge	r10,r2,806c08 <__subdf3+0x584>
  806a6c:	0081ffc4 	movi	r2,2047
  806a70:	4880af26 	beq	r9,r2,806d30 <__subdf3+0x6ac>
  806a74:	898d883a 	add	r6,r17,r6
  806a78:	1945883a 	add	r2,r3,r5
  806a7c:	3447803a 	cmpltu	r3,r6,r17
  806a80:	1887883a 	add	r3,r3,r2
  806a84:	182297fa 	slli	r17,r3,31
  806a88:	300cd07a 	srli	r6,r6,1
  806a8c:	1806d07a 	srli	r3,r3,1
  806a90:	4821883a 	mov	r16,r9
  806a94:	89a2b03a 	or	r17,r17,r6
  806a98:	003f1b06 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806a9c:	0101ffc4 	movi	r4,2047
  806aa0:	813f441e 	bne	r16,r4,8067b4 <__alt_mem_onchip_mem+0xff7fe7b4>
  806aa4:	003f1806 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806aa8:	843ff844 	addi	r16,r16,-31
  806aac:	01400804 	movi	r5,32
  806ab0:	1408d83a 	srl	r4,r2,r16
  806ab4:	19405026 	beq	r3,r5,806bf8 <__subdf3+0x574>
  806ab8:	01401004 	movi	r5,64
  806abc:	28c7c83a 	sub	r3,r5,r3
  806ac0:	10c4983a 	sll	r2,r2,r3
  806ac4:	88a2b03a 	or	r17,r17,r2
  806ac8:	8822c03a 	cmpne	r17,r17,zero
  806acc:	2462b03a 	or	r17,r4,r17
  806ad0:	0007883a 	mov	r3,zero
  806ad4:	0021883a 	mov	r16,zero
  806ad8:	003f6d06 	br	806890 <__alt_mem_onchip_mem+0xff7fe890>
  806adc:	11fff804 	addi	r7,r2,-32
  806ae0:	01000804 	movi	r4,32
  806ae4:	29ced83a 	srl	r7,r5,r7
  806ae8:	11004526 	beq	r2,r4,806c00 <__subdf3+0x57c>
  806aec:	01001004 	movi	r4,64
  806af0:	2089c83a 	sub	r4,r4,r2
  806af4:	2904983a 	sll	r2,r5,r4
  806af8:	118cb03a 	or	r6,r2,r6
  806afc:	300cc03a 	cmpne	r6,r6,zero
  806b00:	398cb03a 	or	r6,r7,r6
  806b04:	0005883a 	mov	r2,zero
  806b08:	003f3706 	br	8067e8 <__alt_mem_onchip_mem+0xff7fe7e8>
  806b0c:	80002a26 	beq	r16,zero,806bb8 <__subdf3+0x534>
  806b10:	0101ffc4 	movi	r4,2047
  806b14:	49006626 	beq	r9,r4,806cb0 <__subdf3+0x62c>
  806b18:	0085c83a 	sub	r2,zero,r2
  806b1c:	18c02034 	orhi	r3,r3,128
  806b20:	01000e04 	movi	r4,56
  806b24:	20807e16 	blt	r4,r2,806d20 <__subdf3+0x69c>
  806b28:	010007c4 	movi	r4,31
  806b2c:	2080e716 	blt	r4,r2,806ecc <__subdf3+0x848>
  806b30:	01000804 	movi	r4,32
  806b34:	2089c83a 	sub	r4,r4,r2
  806b38:	1914983a 	sll	r10,r3,r4
  806b3c:	8890d83a 	srl	r8,r17,r2
  806b40:	8908983a 	sll	r4,r17,r4
  806b44:	1884d83a 	srl	r2,r3,r2
  806b48:	5222b03a 	or	r17,r10,r8
  806b4c:	2006c03a 	cmpne	r3,r4,zero
  806b50:	88e2b03a 	or	r17,r17,r3
  806b54:	3463c83a 	sub	r17,r6,r17
  806b58:	2885c83a 	sub	r2,r5,r2
  806b5c:	344d803a 	cmpltu	r6,r6,r17
  806b60:	1187c83a 	sub	r3,r2,r6
  806b64:	4821883a 	mov	r16,r9
  806b68:	3825883a 	mov	r18,r7
  806b6c:	003f2306 	br	8067fc <__alt_mem_onchip_mem+0xff7fe7fc>
  806b70:	24d0b03a 	or	r8,r4,r19
  806b74:	40001b1e 	bne	r8,zero,806be4 <__subdf3+0x560>
  806b78:	0005883a 	mov	r2,zero
  806b7c:	0009883a 	mov	r4,zero
  806b80:	0021883a 	mov	r16,zero
  806b84:	003f4906 	br	8068ac <__alt_mem_onchip_mem+0xff7fe8ac>
  806b88:	010007c4 	movi	r4,31
  806b8c:	20803a16 	blt	r4,r2,806c78 <__subdf3+0x5f4>
  806b90:	01000804 	movi	r4,32
  806b94:	2089c83a 	sub	r4,r4,r2
  806b98:	2912983a 	sll	r9,r5,r4
  806b9c:	3090d83a 	srl	r8,r6,r2
  806ba0:	3108983a 	sll	r4,r6,r4
  806ba4:	2884d83a 	srl	r2,r5,r2
  806ba8:	4a12b03a 	or	r9,r9,r8
  806bac:	2008c03a 	cmpne	r4,r4,zero
  806bb0:	4912b03a 	or	r9,r9,r4
  806bb4:	003f4e06 	br	8068f0 <__alt_mem_onchip_mem+0xff7fe8f0>
  806bb8:	1c48b03a 	or	r4,r3,r17
  806bbc:	20003c26 	beq	r4,zero,806cb0 <__subdf3+0x62c>
  806bc0:	0084303a 	nor	r2,zero,r2
  806bc4:	1000381e 	bne	r2,zero,806ca8 <__subdf3+0x624>
  806bc8:	3463c83a 	sub	r17,r6,r17
  806bcc:	28c5c83a 	sub	r2,r5,r3
  806bd0:	344d803a 	cmpltu	r6,r6,r17
  806bd4:	1187c83a 	sub	r3,r2,r6
  806bd8:	4821883a 	mov	r16,r9
  806bdc:	3825883a 	mov	r18,r7
  806be0:	003f0606 	br	8067fc <__alt_mem_onchip_mem+0xff7fe7fc>
  806be4:	2023883a 	mov	r17,r4
  806be8:	003f0906 	br	806810 <__alt_mem_onchip_mem+0xff7fe810>
  806bec:	0101ffc4 	movi	r4,2047
  806bf0:	813f3a1e 	bne	r16,r4,8068dc <__alt_mem_onchip_mem+0xff7fe8dc>
  806bf4:	003ec406 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806bf8:	0005883a 	mov	r2,zero
  806bfc:	003fb106 	br	806ac4 <__alt_mem_onchip_mem+0xff7feac4>
  806c00:	0005883a 	mov	r2,zero
  806c04:	003fbc06 	br	806af8 <__alt_mem_onchip_mem+0xff7feaf8>
  806c08:	1c44b03a 	or	r2,r3,r17
  806c0c:	80008e1e 	bne	r16,zero,806e48 <__subdf3+0x7c4>
  806c10:	1000c826 	beq	r2,zero,806f34 <__subdf3+0x8b0>
  806c14:	2984b03a 	or	r2,r5,r6
  806c18:	103ebb26 	beq	r2,zero,806708 <__alt_mem_onchip_mem+0xff7fe708>
  806c1c:	8989883a 	add	r4,r17,r6
  806c20:	1945883a 	add	r2,r3,r5
  806c24:	2447803a 	cmpltu	r3,r4,r17
  806c28:	1887883a 	add	r3,r3,r2
  806c2c:	1880202c 	andhi	r2,r3,128
  806c30:	2023883a 	mov	r17,r4
  806c34:	103f1626 	beq	r2,zero,806890 <__alt_mem_onchip_mem+0xff7fe890>
  806c38:	00bfe034 	movhi	r2,65408
  806c3c:	10bfffc4 	addi	r2,r2,-1
  806c40:	5021883a 	mov	r16,r10
  806c44:	1886703a 	and	r3,r3,r2
  806c48:	003eaf06 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806c4c:	3825883a 	mov	r18,r7
  806c50:	003f0f06 	br	806890 <__alt_mem_onchip_mem+0xff7fe890>
  806c54:	1c44b03a 	or	r2,r3,r17
  806c58:	8000251e 	bne	r16,zero,806cf0 <__subdf3+0x66c>
  806c5c:	1000661e 	bne	r2,zero,806df8 <__subdf3+0x774>
  806c60:	2990b03a 	or	r8,r5,r6
  806c64:	40009626 	beq	r8,zero,806ec0 <__subdf3+0x83c>
  806c68:	2807883a 	mov	r3,r5
  806c6c:	3023883a 	mov	r17,r6
  806c70:	3825883a 	mov	r18,r7
  806c74:	003ea406 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806c78:	127ff804 	addi	r9,r2,-32
  806c7c:	01000804 	movi	r4,32
  806c80:	2a52d83a 	srl	r9,r5,r9
  806c84:	11008c26 	beq	r2,r4,806eb8 <__subdf3+0x834>
  806c88:	01001004 	movi	r4,64
  806c8c:	2085c83a 	sub	r2,r4,r2
  806c90:	2884983a 	sll	r2,r5,r2
  806c94:	118cb03a 	or	r6,r2,r6
  806c98:	300cc03a 	cmpne	r6,r6,zero
  806c9c:	4992b03a 	or	r9,r9,r6
  806ca0:	0005883a 	mov	r2,zero
  806ca4:	003f1206 	br	8068f0 <__alt_mem_onchip_mem+0xff7fe8f0>
  806ca8:	0101ffc4 	movi	r4,2047
  806cac:	493f9c1e 	bne	r9,r4,806b20 <__alt_mem_onchip_mem+0xff7feb20>
  806cb0:	2807883a 	mov	r3,r5
  806cb4:	3023883a 	mov	r17,r6
  806cb8:	4821883a 	mov	r16,r9
  806cbc:	3825883a 	mov	r18,r7
  806cc0:	003e9106 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806cc4:	80001f1e 	bne	r16,zero,806d44 <__subdf3+0x6c0>
  806cc8:	1c48b03a 	or	r4,r3,r17
  806ccc:	20005a26 	beq	r4,zero,806e38 <__subdf3+0x7b4>
  806cd0:	0084303a 	nor	r2,zero,r2
  806cd4:	1000561e 	bne	r2,zero,806e30 <__subdf3+0x7ac>
  806cd8:	89a3883a 	add	r17,r17,r6
  806cdc:	1945883a 	add	r2,r3,r5
  806ce0:	898d803a 	cmpltu	r6,r17,r6
  806ce4:	3087883a 	add	r3,r6,r2
  806ce8:	4821883a 	mov	r16,r9
  806cec:	003f0506 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  806cf0:	10002b1e 	bne	r2,zero,806da0 <__subdf3+0x71c>
  806cf4:	2984b03a 	or	r2,r5,r6
  806cf8:	10008026 	beq	r2,zero,806efc <__subdf3+0x878>
  806cfc:	2807883a 	mov	r3,r5
  806d00:	3023883a 	mov	r17,r6
  806d04:	3825883a 	mov	r18,r7
  806d08:	0401ffc4 	movi	r16,2047
  806d0c:	003e7e06 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806d10:	3809883a 	mov	r4,r7
  806d14:	0011883a 	mov	r8,zero
  806d18:	0005883a 	mov	r2,zero
  806d1c:	003ee306 	br	8068ac <__alt_mem_onchip_mem+0xff7fe8ac>
  806d20:	1c62b03a 	or	r17,r3,r17
  806d24:	8822c03a 	cmpne	r17,r17,zero
  806d28:	0005883a 	mov	r2,zero
  806d2c:	003f8906 	br	806b54 <__alt_mem_onchip_mem+0xff7feb54>
  806d30:	3809883a 	mov	r4,r7
  806d34:	4821883a 	mov	r16,r9
  806d38:	0011883a 	mov	r8,zero
  806d3c:	0005883a 	mov	r2,zero
  806d40:	003eda06 	br	8068ac <__alt_mem_onchip_mem+0xff7fe8ac>
  806d44:	0101ffc4 	movi	r4,2047
  806d48:	49003b26 	beq	r9,r4,806e38 <__subdf3+0x7b4>
  806d4c:	0085c83a 	sub	r2,zero,r2
  806d50:	18c02034 	orhi	r3,r3,128
  806d54:	01000e04 	movi	r4,56
  806d58:	20806e16 	blt	r4,r2,806f14 <__subdf3+0x890>
  806d5c:	010007c4 	movi	r4,31
  806d60:	20807716 	blt	r4,r2,806f40 <__subdf3+0x8bc>
  806d64:	01000804 	movi	r4,32
  806d68:	2089c83a 	sub	r4,r4,r2
  806d6c:	1914983a 	sll	r10,r3,r4
  806d70:	8890d83a 	srl	r8,r17,r2
  806d74:	8908983a 	sll	r4,r17,r4
  806d78:	1884d83a 	srl	r2,r3,r2
  806d7c:	5222b03a 	or	r17,r10,r8
  806d80:	2006c03a 	cmpne	r3,r4,zero
  806d84:	88e2b03a 	or	r17,r17,r3
  806d88:	89a3883a 	add	r17,r17,r6
  806d8c:	1145883a 	add	r2,r2,r5
  806d90:	898d803a 	cmpltu	r6,r17,r6
  806d94:	3087883a 	add	r3,r6,r2
  806d98:	4821883a 	mov	r16,r9
  806d9c:	003ed906 	br	806904 <__alt_mem_onchip_mem+0xff7fe904>
  806da0:	2984b03a 	or	r2,r5,r6
  806da4:	10004226 	beq	r2,zero,806eb0 <__subdf3+0x82c>
  806da8:	1808d0fa 	srli	r4,r3,3
  806dac:	8822d0fa 	srli	r17,r17,3
  806db0:	1806977a 	slli	r3,r3,29
  806db4:	2080022c 	andhi	r2,r4,8
  806db8:	1c62b03a 	or	r17,r3,r17
  806dbc:	10000826 	beq	r2,zero,806de0 <__subdf3+0x75c>
  806dc0:	2812d0fa 	srli	r9,r5,3
  806dc4:	4880022c 	andhi	r2,r9,8
  806dc8:	1000051e 	bne	r2,zero,806de0 <__subdf3+0x75c>
  806dcc:	300cd0fa 	srli	r6,r6,3
  806dd0:	2804977a 	slli	r2,r5,29
  806dd4:	4809883a 	mov	r4,r9
  806dd8:	3825883a 	mov	r18,r7
  806ddc:	11a2b03a 	or	r17,r2,r6
  806de0:	8806d77a 	srli	r3,r17,29
  806de4:	200890fa 	slli	r4,r4,3
  806de8:	882290fa 	slli	r17,r17,3
  806dec:	0401ffc4 	movi	r16,2047
  806df0:	1906b03a 	or	r3,r3,r4
  806df4:	003e4406 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806df8:	2984b03a 	or	r2,r5,r6
  806dfc:	103e4226 	beq	r2,zero,806708 <__alt_mem_onchip_mem+0xff7fe708>
  806e00:	8989c83a 	sub	r4,r17,r6
  806e04:	8911803a 	cmpltu	r8,r17,r4
  806e08:	1945c83a 	sub	r2,r3,r5
  806e0c:	1205c83a 	sub	r2,r2,r8
  806e10:	1200202c 	andhi	r8,r2,128
  806e14:	403e9a26 	beq	r8,zero,806880 <__alt_mem_onchip_mem+0xff7fe880>
  806e18:	3463c83a 	sub	r17,r6,r17
  806e1c:	28c5c83a 	sub	r2,r5,r3
  806e20:	344d803a 	cmpltu	r6,r6,r17
  806e24:	1187c83a 	sub	r3,r2,r6
  806e28:	3825883a 	mov	r18,r7
  806e2c:	003e3606 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806e30:	0101ffc4 	movi	r4,2047
  806e34:	493fc71e 	bne	r9,r4,806d54 <__alt_mem_onchip_mem+0xff7fed54>
  806e38:	2807883a 	mov	r3,r5
  806e3c:	3023883a 	mov	r17,r6
  806e40:	4821883a 	mov	r16,r9
  806e44:	003e3006 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806e48:	10003626 	beq	r2,zero,806f24 <__subdf3+0x8a0>
  806e4c:	2984b03a 	or	r2,r5,r6
  806e50:	10001726 	beq	r2,zero,806eb0 <__subdf3+0x82c>
  806e54:	1808d0fa 	srli	r4,r3,3
  806e58:	8822d0fa 	srli	r17,r17,3
  806e5c:	1806977a 	slli	r3,r3,29
  806e60:	2080022c 	andhi	r2,r4,8
  806e64:	1c62b03a 	or	r17,r3,r17
  806e68:	10000726 	beq	r2,zero,806e88 <__subdf3+0x804>
  806e6c:	2812d0fa 	srli	r9,r5,3
  806e70:	4880022c 	andhi	r2,r9,8
  806e74:	1000041e 	bne	r2,zero,806e88 <__subdf3+0x804>
  806e78:	300cd0fa 	srli	r6,r6,3
  806e7c:	2804977a 	slli	r2,r5,29
  806e80:	4809883a 	mov	r4,r9
  806e84:	11a2b03a 	or	r17,r2,r6
  806e88:	8806d77a 	srli	r3,r17,29
  806e8c:	200890fa 	slli	r4,r4,3
  806e90:	882290fa 	slli	r17,r17,3
  806e94:	3825883a 	mov	r18,r7
  806e98:	1906b03a 	or	r3,r3,r4
  806e9c:	0401ffc4 	movi	r16,2047
  806ea0:	003e1906 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806ea4:	000b883a 	mov	r5,zero
  806ea8:	0005883a 	mov	r2,zero
  806eac:	003e2e06 	br	806768 <__alt_mem_onchip_mem+0xff7fe768>
  806eb0:	0401ffc4 	movi	r16,2047
  806eb4:	003e1406 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806eb8:	0005883a 	mov	r2,zero
  806ebc:	003f7506 	br	806c94 <__alt_mem_onchip_mem+0xff7fec94>
  806ec0:	0005883a 	mov	r2,zero
  806ec4:	0009883a 	mov	r4,zero
  806ec8:	003e7806 	br	8068ac <__alt_mem_onchip_mem+0xff7fe8ac>
  806ecc:	123ff804 	addi	r8,r2,-32
  806ed0:	01000804 	movi	r4,32
  806ed4:	1a10d83a 	srl	r8,r3,r8
  806ed8:	11002526 	beq	r2,r4,806f70 <__subdf3+0x8ec>
  806edc:	01001004 	movi	r4,64
  806ee0:	2085c83a 	sub	r2,r4,r2
  806ee4:	1884983a 	sll	r2,r3,r2
  806ee8:	1444b03a 	or	r2,r2,r17
  806eec:	1004c03a 	cmpne	r2,r2,zero
  806ef0:	40a2b03a 	or	r17,r8,r2
  806ef4:	0005883a 	mov	r2,zero
  806ef8:	003f1606 	br	806b54 <__alt_mem_onchip_mem+0xff7feb54>
  806efc:	02000434 	movhi	r8,16
  806f00:	0009883a 	mov	r4,zero
  806f04:	423fffc4 	addi	r8,r8,-1
  806f08:	00bfffc4 	movi	r2,-1
  806f0c:	0401ffc4 	movi	r16,2047
  806f10:	003e6606 	br	8068ac <__alt_mem_onchip_mem+0xff7fe8ac>
  806f14:	1c62b03a 	or	r17,r3,r17
  806f18:	8822c03a 	cmpne	r17,r17,zero
  806f1c:	0005883a 	mov	r2,zero
  806f20:	003f9906 	br	806d88 <__alt_mem_onchip_mem+0xff7fed88>
  806f24:	2807883a 	mov	r3,r5
  806f28:	3023883a 	mov	r17,r6
  806f2c:	0401ffc4 	movi	r16,2047
  806f30:	003df506 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806f34:	2807883a 	mov	r3,r5
  806f38:	3023883a 	mov	r17,r6
  806f3c:	003df206 	br	806708 <__alt_mem_onchip_mem+0xff7fe708>
  806f40:	123ff804 	addi	r8,r2,-32
  806f44:	01000804 	movi	r4,32
  806f48:	1a10d83a 	srl	r8,r3,r8
  806f4c:	11000a26 	beq	r2,r4,806f78 <__subdf3+0x8f4>
  806f50:	01001004 	movi	r4,64
  806f54:	2085c83a 	sub	r2,r4,r2
  806f58:	1884983a 	sll	r2,r3,r2
  806f5c:	1444b03a 	or	r2,r2,r17
  806f60:	1004c03a 	cmpne	r2,r2,zero
  806f64:	40a2b03a 	or	r17,r8,r2
  806f68:	0005883a 	mov	r2,zero
  806f6c:	003f8606 	br	806d88 <__alt_mem_onchip_mem+0xff7fed88>
  806f70:	0005883a 	mov	r2,zero
  806f74:	003fdc06 	br	806ee8 <__alt_mem_onchip_mem+0xff7feee8>
  806f78:	0005883a 	mov	r2,zero
  806f7c:	003ff706 	br	806f5c <__alt_mem_onchip_mem+0xff7fef5c>

00806f80 <__floatsidf>:
  806f80:	defffd04 	addi	sp,sp,-12
  806f84:	dfc00215 	stw	ra,8(sp)
  806f88:	dc400115 	stw	r17,4(sp)
  806f8c:	dc000015 	stw	r16,0(sp)
  806f90:	20002b26 	beq	r4,zero,807040 <__floatsidf+0xc0>
  806f94:	2023883a 	mov	r17,r4
  806f98:	2020d7fa 	srli	r16,r4,31
  806f9c:	20002d16 	blt	r4,zero,807054 <__floatsidf+0xd4>
  806fa0:	8809883a 	mov	r4,r17
  806fa4:	080705c0 	call	80705c <__clzsi2>
  806fa8:	01410784 	movi	r5,1054
  806fac:	288bc83a 	sub	r5,r5,r2
  806fb0:	01010cc4 	movi	r4,1075
  806fb4:	2149c83a 	sub	r4,r4,r5
  806fb8:	00c007c4 	movi	r3,31
  806fbc:	1900160e 	bge	r3,r4,807018 <__floatsidf+0x98>
  806fc0:	00c104c4 	movi	r3,1043
  806fc4:	1947c83a 	sub	r3,r3,r5
  806fc8:	88c6983a 	sll	r3,r17,r3
  806fcc:	00800434 	movhi	r2,16
  806fd0:	10bfffc4 	addi	r2,r2,-1
  806fd4:	1886703a 	and	r3,r3,r2
  806fd8:	2941ffcc 	andi	r5,r5,2047
  806fdc:	800d883a 	mov	r6,r16
  806fe0:	0005883a 	mov	r2,zero
  806fe4:	280a953a 	slli	r5,r5,20
  806fe8:	31803fcc 	andi	r6,r6,255
  806fec:	01000434 	movhi	r4,16
  806ff0:	300c97fa 	slli	r6,r6,31
  806ff4:	213fffc4 	addi	r4,r4,-1
  806ff8:	1906703a 	and	r3,r3,r4
  806ffc:	1946b03a 	or	r3,r3,r5
  807000:	1986b03a 	or	r3,r3,r6
  807004:	dfc00217 	ldw	ra,8(sp)
  807008:	dc400117 	ldw	r17,4(sp)
  80700c:	dc000017 	ldw	r16,0(sp)
  807010:	dec00304 	addi	sp,sp,12
  807014:	f800283a 	ret
  807018:	00c002c4 	movi	r3,11
  80701c:	1887c83a 	sub	r3,r3,r2
  807020:	88c6d83a 	srl	r3,r17,r3
  807024:	8904983a 	sll	r2,r17,r4
  807028:	01000434 	movhi	r4,16
  80702c:	213fffc4 	addi	r4,r4,-1
  807030:	2941ffcc 	andi	r5,r5,2047
  807034:	1906703a 	and	r3,r3,r4
  807038:	800d883a 	mov	r6,r16
  80703c:	003fe906 	br	806fe4 <__alt_mem_onchip_mem+0xff7fefe4>
  807040:	000d883a 	mov	r6,zero
  807044:	000b883a 	mov	r5,zero
  807048:	0007883a 	mov	r3,zero
  80704c:	0005883a 	mov	r2,zero
  807050:	003fe406 	br	806fe4 <__alt_mem_onchip_mem+0xff7fefe4>
  807054:	0123c83a 	sub	r17,zero,r4
  807058:	003fd106 	br	806fa0 <__alt_mem_onchip_mem+0xff7fefa0>

0080705c <__clzsi2>:
  80705c:	00bfffd4 	movui	r2,65535
  807060:	11000536 	bltu	r2,r4,807078 <__clzsi2+0x1c>
  807064:	00803fc4 	movi	r2,255
  807068:	11000f36 	bltu	r2,r4,8070a8 <__clzsi2+0x4c>
  80706c:	00800804 	movi	r2,32
  807070:	0007883a 	mov	r3,zero
  807074:	00000506 	br	80708c <__clzsi2+0x30>
  807078:	00804034 	movhi	r2,256
  80707c:	10bfffc4 	addi	r2,r2,-1
  807080:	11000c2e 	bgeu	r2,r4,8070b4 <__clzsi2+0x58>
  807084:	00800204 	movi	r2,8
  807088:	00c00604 	movi	r3,24
  80708c:	20c8d83a 	srl	r4,r4,r3
  807090:	00c02074 	movhi	r3,129
  807094:	18dcbec4 	addi	r3,r3,29435
  807098:	1909883a 	add	r4,r3,r4
  80709c:	20c00003 	ldbu	r3,0(r4)
  8070a0:	10c5c83a 	sub	r2,r2,r3
  8070a4:	f800283a 	ret
  8070a8:	00800604 	movi	r2,24
  8070ac:	00c00204 	movi	r3,8
  8070b0:	003ff606 	br	80708c <__alt_mem_onchip_mem+0xff7ff08c>
  8070b4:	00800404 	movi	r2,16
  8070b8:	1007883a 	mov	r3,r2
  8070bc:	003ff306 	br	80708c <__alt_mem_onchip_mem+0xff7ff08c>

008070c0 <_fclose_r>:
  8070c0:	28003926 	beq	r5,zero,8071a8 <_fclose_r+0xe8>
  8070c4:	defffc04 	addi	sp,sp,-16
  8070c8:	dc400115 	stw	r17,4(sp)
  8070cc:	dc000015 	stw	r16,0(sp)
  8070d0:	dfc00315 	stw	ra,12(sp)
  8070d4:	dc800215 	stw	r18,8(sp)
  8070d8:	2023883a 	mov	r17,r4
  8070dc:	2821883a 	mov	r16,r5
  8070e0:	20000226 	beq	r4,zero,8070ec <_fclose_r+0x2c>
  8070e4:	20800e17 	ldw	r2,56(r4)
  8070e8:	10002726 	beq	r2,zero,807188 <_fclose_r+0xc8>
  8070ec:	8080030f 	ldh	r2,12(r16)
  8070f0:	1000071e 	bne	r2,zero,807110 <_fclose_r+0x50>
  8070f4:	0005883a 	mov	r2,zero
  8070f8:	dfc00317 	ldw	ra,12(sp)
  8070fc:	dc800217 	ldw	r18,8(sp)
  807100:	dc400117 	ldw	r17,4(sp)
  807104:	dc000017 	ldw	r16,0(sp)
  807108:	dec00404 	addi	sp,sp,16
  80710c:	f800283a 	ret
  807110:	800b883a 	mov	r5,r16
  807114:	8809883a 	mov	r4,r17
  807118:	08071c40 	call	8071c4 <__sflush_r>
  80711c:	1025883a 	mov	r18,r2
  807120:	80800b17 	ldw	r2,44(r16)
  807124:	10000426 	beq	r2,zero,807138 <_fclose_r+0x78>
  807128:	81400717 	ldw	r5,28(r16)
  80712c:	8809883a 	mov	r4,r17
  807130:	103ee83a 	callr	r2
  807134:	10001616 	blt	r2,zero,807190 <_fclose_r+0xd0>
  807138:	8080030b 	ldhu	r2,12(r16)
  80713c:	1080200c 	andi	r2,r2,128
  807140:	1000151e 	bne	r2,zero,807198 <_fclose_r+0xd8>
  807144:	81400c17 	ldw	r5,48(r16)
  807148:	28000526 	beq	r5,zero,807160 <_fclose_r+0xa0>
  80714c:	80801004 	addi	r2,r16,64
  807150:	28800226 	beq	r5,r2,80715c <_fclose_r+0x9c>
  807154:	8809883a 	mov	r4,r17
  807158:	0807b280 	call	807b28 <_free_r>
  80715c:	80000c15 	stw	zero,48(r16)
  807160:	81401117 	ldw	r5,68(r16)
  807164:	28000326 	beq	r5,zero,807174 <_fclose_r+0xb4>
  807168:	8809883a 	mov	r4,r17
  80716c:	0807b280 	call	807b28 <_free_r>
  807170:	80001115 	stw	zero,68(r16)
  807174:	08077cc0 	call	8077cc <__sfp_lock_acquire>
  807178:	8000030d 	sth	zero,12(r16)
  80717c:	08077d00 	call	8077d0 <__sfp_lock_release>
  807180:	9005883a 	mov	r2,r18
  807184:	003fdc06 	br	8070f8 <__alt_mem_onchip_mem+0xff7ff0f8>
  807188:	08077bc0 	call	8077bc <__sinit>
  80718c:	003fd706 	br	8070ec <__alt_mem_onchip_mem+0xff7ff0ec>
  807190:	04bfffc4 	movi	r18,-1
  807194:	003fe806 	br	807138 <__alt_mem_onchip_mem+0xff7ff138>
  807198:	81400417 	ldw	r5,16(r16)
  80719c:	8809883a 	mov	r4,r17
  8071a0:	0807b280 	call	807b28 <_free_r>
  8071a4:	003fe706 	br	807144 <__alt_mem_onchip_mem+0xff7ff144>
  8071a8:	0005883a 	mov	r2,zero
  8071ac:	f800283a 	ret

008071b0 <fclose>:
  8071b0:	008020b4 	movhi	r2,130
  8071b4:	10a55004 	addi	r2,r2,-27328
  8071b8:	200b883a 	mov	r5,r4
  8071bc:	11000017 	ldw	r4,0(r2)
  8071c0:	08070c01 	jmpi	8070c0 <_fclose_r>

008071c4 <__sflush_r>:
  8071c4:	2880030b 	ldhu	r2,12(r5)
  8071c8:	defffb04 	addi	sp,sp,-20
  8071cc:	dcc00315 	stw	r19,12(sp)
  8071d0:	dc400115 	stw	r17,4(sp)
  8071d4:	dfc00415 	stw	ra,16(sp)
  8071d8:	dc800215 	stw	r18,8(sp)
  8071dc:	dc000015 	stw	r16,0(sp)
  8071e0:	10c0020c 	andi	r3,r2,8
  8071e4:	2823883a 	mov	r17,r5
  8071e8:	2027883a 	mov	r19,r4
  8071ec:	1800311e 	bne	r3,zero,8072b4 <__sflush_r+0xf0>
  8071f0:	28c00117 	ldw	r3,4(r5)
  8071f4:	10820014 	ori	r2,r2,2048
  8071f8:	2880030d 	sth	r2,12(r5)
  8071fc:	00c04b0e 	bge	zero,r3,80732c <__sflush_r+0x168>
  807200:	8a000a17 	ldw	r8,40(r17)
  807204:	40002326 	beq	r8,zero,807294 <__sflush_r+0xd0>
  807208:	9c000017 	ldw	r16,0(r19)
  80720c:	10c4000c 	andi	r3,r2,4096
  807210:	98000015 	stw	zero,0(r19)
  807214:	18004826 	beq	r3,zero,807338 <__sflush_r+0x174>
  807218:	89801417 	ldw	r6,80(r17)
  80721c:	10c0010c 	andi	r3,r2,4
  807220:	18000626 	beq	r3,zero,80723c <__sflush_r+0x78>
  807224:	88c00117 	ldw	r3,4(r17)
  807228:	88800c17 	ldw	r2,48(r17)
  80722c:	30cdc83a 	sub	r6,r6,r3
  807230:	10000226 	beq	r2,zero,80723c <__sflush_r+0x78>
  807234:	88800f17 	ldw	r2,60(r17)
  807238:	308dc83a 	sub	r6,r6,r2
  80723c:	89400717 	ldw	r5,28(r17)
  807240:	000f883a 	mov	r7,zero
  807244:	9809883a 	mov	r4,r19
  807248:	403ee83a 	callr	r8
  80724c:	00ffffc4 	movi	r3,-1
  807250:	10c04426 	beq	r2,r3,807364 <__sflush_r+0x1a0>
  807254:	88c0030b 	ldhu	r3,12(r17)
  807258:	89000417 	ldw	r4,16(r17)
  80725c:	88000115 	stw	zero,4(r17)
  807260:	197dffcc 	andi	r5,r3,63487
  807264:	8940030d 	sth	r5,12(r17)
  807268:	89000015 	stw	r4,0(r17)
  80726c:	18c4000c 	andi	r3,r3,4096
  807270:	18002c1e 	bne	r3,zero,807324 <__sflush_r+0x160>
  807274:	89400c17 	ldw	r5,48(r17)
  807278:	9c000015 	stw	r16,0(r19)
  80727c:	28000526 	beq	r5,zero,807294 <__sflush_r+0xd0>
  807280:	88801004 	addi	r2,r17,64
  807284:	28800226 	beq	r5,r2,807290 <__sflush_r+0xcc>
  807288:	9809883a 	mov	r4,r19
  80728c:	0807b280 	call	807b28 <_free_r>
  807290:	88000c15 	stw	zero,48(r17)
  807294:	0005883a 	mov	r2,zero
  807298:	dfc00417 	ldw	ra,16(sp)
  80729c:	dcc00317 	ldw	r19,12(sp)
  8072a0:	dc800217 	ldw	r18,8(sp)
  8072a4:	dc400117 	ldw	r17,4(sp)
  8072a8:	dc000017 	ldw	r16,0(sp)
  8072ac:	dec00504 	addi	sp,sp,20
  8072b0:	f800283a 	ret
  8072b4:	2c800417 	ldw	r18,16(r5)
  8072b8:	903ff626 	beq	r18,zero,807294 <__alt_mem_onchip_mem+0xff7ff294>
  8072bc:	2c000017 	ldw	r16,0(r5)
  8072c0:	108000cc 	andi	r2,r2,3
  8072c4:	2c800015 	stw	r18,0(r5)
  8072c8:	84a1c83a 	sub	r16,r16,r18
  8072cc:	1000131e 	bne	r2,zero,80731c <__sflush_r+0x158>
  8072d0:	28800517 	ldw	r2,20(r5)
  8072d4:	88800215 	stw	r2,8(r17)
  8072d8:	04000316 	blt	zero,r16,8072e8 <__sflush_r+0x124>
  8072dc:	003fed06 	br	807294 <__alt_mem_onchip_mem+0xff7ff294>
  8072e0:	90a5883a 	add	r18,r18,r2
  8072e4:	043feb0e 	bge	zero,r16,807294 <__alt_mem_onchip_mem+0xff7ff294>
  8072e8:	88800917 	ldw	r2,36(r17)
  8072ec:	89400717 	ldw	r5,28(r17)
  8072f0:	800f883a 	mov	r7,r16
  8072f4:	900d883a 	mov	r6,r18
  8072f8:	9809883a 	mov	r4,r19
  8072fc:	103ee83a 	callr	r2
  807300:	80a1c83a 	sub	r16,r16,r2
  807304:	00bff616 	blt	zero,r2,8072e0 <__alt_mem_onchip_mem+0xff7ff2e0>
  807308:	88c0030b 	ldhu	r3,12(r17)
  80730c:	00bfffc4 	movi	r2,-1
  807310:	18c01014 	ori	r3,r3,64
  807314:	88c0030d 	sth	r3,12(r17)
  807318:	003fdf06 	br	807298 <__alt_mem_onchip_mem+0xff7ff298>
  80731c:	0005883a 	mov	r2,zero
  807320:	003fec06 	br	8072d4 <__alt_mem_onchip_mem+0xff7ff2d4>
  807324:	88801415 	stw	r2,80(r17)
  807328:	003fd206 	br	807274 <__alt_mem_onchip_mem+0xff7ff274>
  80732c:	28c00f17 	ldw	r3,60(r5)
  807330:	00ffb316 	blt	zero,r3,807200 <__alt_mem_onchip_mem+0xff7ff200>
  807334:	003fd706 	br	807294 <__alt_mem_onchip_mem+0xff7ff294>
  807338:	89400717 	ldw	r5,28(r17)
  80733c:	000d883a 	mov	r6,zero
  807340:	01c00044 	movi	r7,1
  807344:	9809883a 	mov	r4,r19
  807348:	403ee83a 	callr	r8
  80734c:	100d883a 	mov	r6,r2
  807350:	00bfffc4 	movi	r2,-1
  807354:	30801426 	beq	r6,r2,8073a8 <__sflush_r+0x1e4>
  807358:	8880030b 	ldhu	r2,12(r17)
  80735c:	8a000a17 	ldw	r8,40(r17)
  807360:	003fae06 	br	80721c <__alt_mem_onchip_mem+0xff7ff21c>
  807364:	98c00017 	ldw	r3,0(r19)
  807368:	183fba26 	beq	r3,zero,807254 <__alt_mem_onchip_mem+0xff7ff254>
  80736c:	01000744 	movi	r4,29
  807370:	19000626 	beq	r3,r4,80738c <__sflush_r+0x1c8>
  807374:	01000584 	movi	r4,22
  807378:	19000426 	beq	r3,r4,80738c <__sflush_r+0x1c8>
  80737c:	88c0030b 	ldhu	r3,12(r17)
  807380:	18c01014 	ori	r3,r3,64
  807384:	88c0030d 	sth	r3,12(r17)
  807388:	003fc306 	br	807298 <__alt_mem_onchip_mem+0xff7ff298>
  80738c:	8880030b 	ldhu	r2,12(r17)
  807390:	88c00417 	ldw	r3,16(r17)
  807394:	88000115 	stw	zero,4(r17)
  807398:	10bdffcc 	andi	r2,r2,63487
  80739c:	8880030d 	sth	r2,12(r17)
  8073a0:	88c00015 	stw	r3,0(r17)
  8073a4:	003fb306 	br	807274 <__alt_mem_onchip_mem+0xff7ff274>
  8073a8:	98800017 	ldw	r2,0(r19)
  8073ac:	103fea26 	beq	r2,zero,807358 <__alt_mem_onchip_mem+0xff7ff358>
  8073b0:	00c00744 	movi	r3,29
  8073b4:	10c00226 	beq	r2,r3,8073c0 <__sflush_r+0x1fc>
  8073b8:	00c00584 	movi	r3,22
  8073bc:	10c0031e 	bne	r2,r3,8073cc <__sflush_r+0x208>
  8073c0:	9c000015 	stw	r16,0(r19)
  8073c4:	0005883a 	mov	r2,zero
  8073c8:	003fb306 	br	807298 <__alt_mem_onchip_mem+0xff7ff298>
  8073cc:	88c0030b 	ldhu	r3,12(r17)
  8073d0:	3005883a 	mov	r2,r6
  8073d4:	18c01014 	ori	r3,r3,64
  8073d8:	88c0030d 	sth	r3,12(r17)
  8073dc:	003fae06 	br	807298 <__alt_mem_onchip_mem+0xff7ff298>

008073e0 <_fflush_r>:
  8073e0:	defffd04 	addi	sp,sp,-12
  8073e4:	dc000115 	stw	r16,4(sp)
  8073e8:	dfc00215 	stw	ra,8(sp)
  8073ec:	2021883a 	mov	r16,r4
  8073f0:	20000226 	beq	r4,zero,8073fc <_fflush_r+0x1c>
  8073f4:	20800e17 	ldw	r2,56(r4)
  8073f8:	10000c26 	beq	r2,zero,80742c <_fflush_r+0x4c>
  8073fc:	2880030f 	ldh	r2,12(r5)
  807400:	1000051e 	bne	r2,zero,807418 <_fflush_r+0x38>
  807404:	0005883a 	mov	r2,zero
  807408:	dfc00217 	ldw	ra,8(sp)
  80740c:	dc000117 	ldw	r16,4(sp)
  807410:	dec00304 	addi	sp,sp,12
  807414:	f800283a 	ret
  807418:	8009883a 	mov	r4,r16
  80741c:	dfc00217 	ldw	ra,8(sp)
  807420:	dc000117 	ldw	r16,4(sp)
  807424:	dec00304 	addi	sp,sp,12
  807428:	08071c41 	jmpi	8071c4 <__sflush_r>
  80742c:	d9400015 	stw	r5,0(sp)
  807430:	08077bc0 	call	8077bc <__sinit>
  807434:	d9400017 	ldw	r5,0(sp)
  807438:	003ff006 	br	8073fc <__alt_mem_onchip_mem+0xff7ff3fc>

0080743c <fflush>:
  80743c:	20000526 	beq	r4,zero,807454 <fflush+0x18>
  807440:	008020b4 	movhi	r2,130
  807444:	10a55004 	addi	r2,r2,-27328
  807448:	200b883a 	mov	r5,r4
  80744c:	11000017 	ldw	r4,0(r2)
  807450:	08073e01 	jmpi	8073e0 <_fflush_r>
  807454:	008020b4 	movhi	r2,130
  807458:	10a54f04 	addi	r2,r2,-27332
  80745c:	11000017 	ldw	r4,0(r2)
  807460:	01402034 	movhi	r5,128
  807464:	295cf804 	addi	r5,r5,29664
  807468:	08083d81 	jmpi	8083d8 <_fwalk_reent>

0080746c <__fp_unlock>:
  80746c:	0005883a 	mov	r2,zero
  807470:	f800283a 	ret

00807474 <_cleanup_r>:
  807474:	01402034 	movhi	r5,128
  807478:	295c3004 	addi	r5,r5,28864
  80747c:	08083d81 	jmpi	8083d8 <_fwalk_reent>

00807480 <__sinit.part.1>:
  807480:	defff704 	addi	sp,sp,-36
  807484:	00c02034 	movhi	r3,128
  807488:	dfc00815 	stw	ra,32(sp)
  80748c:	ddc00715 	stw	r23,28(sp)
  807490:	dd800615 	stw	r22,24(sp)
  807494:	dd400515 	stw	r21,20(sp)
  807498:	dd000415 	stw	r20,16(sp)
  80749c:	dcc00315 	stw	r19,12(sp)
  8074a0:	dc800215 	stw	r18,8(sp)
  8074a4:	dc400115 	stw	r17,4(sp)
  8074a8:	dc000015 	stw	r16,0(sp)
  8074ac:	18dd1d04 	addi	r3,r3,29812
  8074b0:	24000117 	ldw	r16,4(r4)
  8074b4:	20c00f15 	stw	r3,60(r4)
  8074b8:	2080bb04 	addi	r2,r4,748
  8074bc:	00c000c4 	movi	r3,3
  8074c0:	20c0b915 	stw	r3,740(r4)
  8074c4:	2080ba15 	stw	r2,744(r4)
  8074c8:	2000b815 	stw	zero,736(r4)
  8074cc:	05c00204 	movi	r23,8
  8074d0:	00800104 	movi	r2,4
  8074d4:	2025883a 	mov	r18,r4
  8074d8:	b80d883a 	mov	r6,r23
  8074dc:	81001704 	addi	r4,r16,92
  8074e0:	000b883a 	mov	r5,zero
  8074e4:	80000015 	stw	zero,0(r16)
  8074e8:	80000115 	stw	zero,4(r16)
  8074ec:	80000215 	stw	zero,8(r16)
  8074f0:	8080030d 	sth	r2,12(r16)
  8074f4:	80001915 	stw	zero,100(r16)
  8074f8:	8000038d 	sth	zero,14(r16)
  8074fc:	80000415 	stw	zero,16(r16)
  807500:	80000515 	stw	zero,20(r16)
  807504:	80000615 	stw	zero,24(r16)
  807508:	0808e640 	call	808e64 <memset>
  80750c:	05802074 	movhi	r22,129
  807510:	94400217 	ldw	r17,8(r18)
  807514:	05402074 	movhi	r21,129
  807518:	05002074 	movhi	r20,129
  80751c:	04c02074 	movhi	r19,129
  807520:	b5a51b04 	addi	r22,r22,-27540
  807524:	ad653204 	addi	r21,r21,-27448
  807528:	a5255104 	addi	r20,r20,-27324
  80752c:	9ce56804 	addi	r19,r19,-27232
  807530:	85800815 	stw	r22,32(r16)
  807534:	85400915 	stw	r21,36(r16)
  807538:	85000a15 	stw	r20,40(r16)
  80753c:	84c00b15 	stw	r19,44(r16)
  807540:	84000715 	stw	r16,28(r16)
  807544:	00800284 	movi	r2,10
  807548:	8880030d 	sth	r2,12(r17)
  80754c:	00800044 	movi	r2,1
  807550:	b80d883a 	mov	r6,r23
  807554:	89001704 	addi	r4,r17,92
  807558:	000b883a 	mov	r5,zero
  80755c:	88000015 	stw	zero,0(r17)
  807560:	88000115 	stw	zero,4(r17)
  807564:	88000215 	stw	zero,8(r17)
  807568:	88001915 	stw	zero,100(r17)
  80756c:	8880038d 	sth	r2,14(r17)
  807570:	88000415 	stw	zero,16(r17)
  807574:	88000515 	stw	zero,20(r17)
  807578:	88000615 	stw	zero,24(r17)
  80757c:	0808e640 	call	808e64 <memset>
  807580:	94000317 	ldw	r16,12(r18)
  807584:	00800484 	movi	r2,18
  807588:	8c400715 	stw	r17,28(r17)
  80758c:	8d800815 	stw	r22,32(r17)
  807590:	8d400915 	stw	r21,36(r17)
  807594:	8d000a15 	stw	r20,40(r17)
  807598:	8cc00b15 	stw	r19,44(r17)
  80759c:	8080030d 	sth	r2,12(r16)
  8075a0:	00800084 	movi	r2,2
  8075a4:	80000015 	stw	zero,0(r16)
  8075a8:	80000115 	stw	zero,4(r16)
  8075ac:	80000215 	stw	zero,8(r16)
  8075b0:	80001915 	stw	zero,100(r16)
  8075b4:	8080038d 	sth	r2,14(r16)
  8075b8:	80000415 	stw	zero,16(r16)
  8075bc:	80000515 	stw	zero,20(r16)
  8075c0:	80000615 	stw	zero,24(r16)
  8075c4:	b80d883a 	mov	r6,r23
  8075c8:	000b883a 	mov	r5,zero
  8075cc:	81001704 	addi	r4,r16,92
  8075d0:	0808e640 	call	808e64 <memset>
  8075d4:	00800044 	movi	r2,1
  8075d8:	84000715 	stw	r16,28(r16)
  8075dc:	85800815 	stw	r22,32(r16)
  8075e0:	85400915 	stw	r21,36(r16)
  8075e4:	85000a15 	stw	r20,40(r16)
  8075e8:	84c00b15 	stw	r19,44(r16)
  8075ec:	90800e15 	stw	r2,56(r18)
  8075f0:	dfc00817 	ldw	ra,32(sp)
  8075f4:	ddc00717 	ldw	r23,28(sp)
  8075f8:	dd800617 	ldw	r22,24(sp)
  8075fc:	dd400517 	ldw	r21,20(sp)
  807600:	dd000417 	ldw	r20,16(sp)
  807604:	dcc00317 	ldw	r19,12(sp)
  807608:	dc800217 	ldw	r18,8(sp)
  80760c:	dc400117 	ldw	r17,4(sp)
  807610:	dc000017 	ldw	r16,0(sp)
  807614:	dec00904 	addi	sp,sp,36
  807618:	f800283a 	ret

0080761c <__fp_lock>:
  80761c:	0005883a 	mov	r2,zero
  807620:	f800283a 	ret

00807624 <__sfmoreglue>:
  807624:	defffc04 	addi	sp,sp,-16
  807628:	dc400115 	stw	r17,4(sp)
  80762c:	2c7fffc4 	addi	r17,r5,-1
  807630:	8c401a24 	muli	r17,r17,104
  807634:	dc800215 	stw	r18,8(sp)
  807638:	2825883a 	mov	r18,r5
  80763c:	89401d04 	addi	r5,r17,116
  807640:	dc000015 	stw	r16,0(sp)
  807644:	dfc00315 	stw	ra,12(sp)
  807648:	08086580 	call	808658 <_malloc_r>
  80764c:	1021883a 	mov	r16,r2
  807650:	10000726 	beq	r2,zero,807670 <__sfmoreglue+0x4c>
  807654:	11000304 	addi	r4,r2,12
  807658:	10000015 	stw	zero,0(r2)
  80765c:	14800115 	stw	r18,4(r2)
  807660:	11000215 	stw	r4,8(r2)
  807664:	89801a04 	addi	r6,r17,104
  807668:	000b883a 	mov	r5,zero
  80766c:	0808e640 	call	808e64 <memset>
  807670:	8005883a 	mov	r2,r16
  807674:	dfc00317 	ldw	ra,12(sp)
  807678:	dc800217 	ldw	r18,8(sp)
  80767c:	dc400117 	ldw	r17,4(sp)
  807680:	dc000017 	ldw	r16,0(sp)
  807684:	dec00404 	addi	sp,sp,16
  807688:	f800283a 	ret

0080768c <__sfp>:
  80768c:	defffb04 	addi	sp,sp,-20
  807690:	dc000015 	stw	r16,0(sp)
  807694:	040020b4 	movhi	r16,130
  807698:	84254f04 	addi	r16,r16,-27332
  80769c:	dcc00315 	stw	r19,12(sp)
  8076a0:	2027883a 	mov	r19,r4
  8076a4:	81000017 	ldw	r4,0(r16)
  8076a8:	dfc00415 	stw	ra,16(sp)
  8076ac:	dc800215 	stw	r18,8(sp)
  8076b0:	20800e17 	ldw	r2,56(r4)
  8076b4:	dc400115 	stw	r17,4(sp)
  8076b8:	1000021e 	bne	r2,zero,8076c4 <__sfp+0x38>
  8076bc:	08074800 	call	807480 <__sinit.part.1>
  8076c0:	81000017 	ldw	r4,0(r16)
  8076c4:	2480b804 	addi	r18,r4,736
  8076c8:	047fffc4 	movi	r17,-1
  8076cc:	91000117 	ldw	r4,4(r18)
  8076d0:	94000217 	ldw	r16,8(r18)
  8076d4:	213fffc4 	addi	r4,r4,-1
  8076d8:	20000a16 	blt	r4,zero,807704 <__sfp+0x78>
  8076dc:	8080030f 	ldh	r2,12(r16)
  8076e0:	10000c26 	beq	r2,zero,807714 <__sfp+0x88>
  8076e4:	80c01d04 	addi	r3,r16,116
  8076e8:	00000206 	br	8076f4 <__sfp+0x68>
  8076ec:	18bfe60f 	ldh	r2,-104(r3)
  8076f0:	10000826 	beq	r2,zero,807714 <__sfp+0x88>
  8076f4:	213fffc4 	addi	r4,r4,-1
  8076f8:	1c3ffd04 	addi	r16,r3,-12
  8076fc:	18c01a04 	addi	r3,r3,104
  807700:	247ffa1e 	bne	r4,r17,8076ec <__alt_mem_onchip_mem+0xff7ff6ec>
  807704:	90800017 	ldw	r2,0(r18)
  807708:	10001d26 	beq	r2,zero,807780 <__sfp+0xf4>
  80770c:	1025883a 	mov	r18,r2
  807710:	003fee06 	br	8076cc <__alt_mem_onchip_mem+0xff7ff6cc>
  807714:	00bfffc4 	movi	r2,-1
  807718:	8080038d 	sth	r2,14(r16)
  80771c:	00800044 	movi	r2,1
  807720:	8080030d 	sth	r2,12(r16)
  807724:	80001915 	stw	zero,100(r16)
  807728:	80000015 	stw	zero,0(r16)
  80772c:	80000215 	stw	zero,8(r16)
  807730:	80000115 	stw	zero,4(r16)
  807734:	80000415 	stw	zero,16(r16)
  807738:	80000515 	stw	zero,20(r16)
  80773c:	80000615 	stw	zero,24(r16)
  807740:	01800204 	movi	r6,8
  807744:	000b883a 	mov	r5,zero
  807748:	81001704 	addi	r4,r16,92
  80774c:	0808e640 	call	808e64 <memset>
  807750:	8005883a 	mov	r2,r16
  807754:	80000c15 	stw	zero,48(r16)
  807758:	80000d15 	stw	zero,52(r16)
  80775c:	80001115 	stw	zero,68(r16)
  807760:	80001215 	stw	zero,72(r16)
  807764:	dfc00417 	ldw	ra,16(sp)
  807768:	dcc00317 	ldw	r19,12(sp)
  80776c:	dc800217 	ldw	r18,8(sp)
  807770:	dc400117 	ldw	r17,4(sp)
  807774:	dc000017 	ldw	r16,0(sp)
  807778:	dec00504 	addi	sp,sp,20
  80777c:	f800283a 	ret
  807780:	01400104 	movi	r5,4
  807784:	9809883a 	mov	r4,r19
  807788:	08076240 	call	807624 <__sfmoreglue>
  80778c:	90800015 	stw	r2,0(r18)
  807790:	103fde1e 	bne	r2,zero,80770c <__alt_mem_onchip_mem+0xff7ff70c>
  807794:	00800304 	movi	r2,12
  807798:	98800015 	stw	r2,0(r19)
  80779c:	0005883a 	mov	r2,zero
  8077a0:	003ff006 	br	807764 <__alt_mem_onchip_mem+0xff7ff764>

008077a4 <_cleanup>:
  8077a4:	008020b4 	movhi	r2,130
  8077a8:	10a54f04 	addi	r2,r2,-27332
  8077ac:	11000017 	ldw	r4,0(r2)
  8077b0:	01402034 	movhi	r5,128
  8077b4:	295c3004 	addi	r5,r5,28864
  8077b8:	08083d81 	jmpi	8083d8 <_fwalk_reent>

008077bc <__sinit>:
  8077bc:	20800e17 	ldw	r2,56(r4)
  8077c0:	10000126 	beq	r2,zero,8077c8 <__sinit+0xc>
  8077c4:	f800283a 	ret
  8077c8:	08074801 	jmpi	807480 <__sinit.part.1>

008077cc <__sfp_lock_acquire>:
  8077cc:	f800283a 	ret

008077d0 <__sfp_lock_release>:
  8077d0:	f800283a 	ret

008077d4 <__sinit_lock_acquire>:
  8077d4:	f800283a 	ret

008077d8 <__sinit_lock_release>:
  8077d8:	f800283a 	ret

008077dc <__fp_lock_all>:
  8077dc:	008020b4 	movhi	r2,130
  8077e0:	10a55004 	addi	r2,r2,-27328
  8077e4:	11000017 	ldw	r4,0(r2)
  8077e8:	01402034 	movhi	r5,128
  8077ec:	295d8704 	addi	r5,r5,30236
  8077f0:	08083141 	jmpi	808314 <_fwalk>

008077f4 <__fp_unlock_all>:
  8077f4:	008020b4 	movhi	r2,130
  8077f8:	10a55004 	addi	r2,r2,-27328
  8077fc:	11000017 	ldw	r4,0(r2)
  807800:	01402034 	movhi	r5,128
  807804:	295d1b04 	addi	r5,r5,29804
  807808:	08083141 	jmpi	808314 <_fwalk>

0080780c <_fopen_r>:
  80780c:	defffa04 	addi	sp,sp,-24
  807810:	3005883a 	mov	r2,r6
  807814:	dcc00415 	stw	r19,16(sp)
  807818:	d80d883a 	mov	r6,sp
  80781c:	2827883a 	mov	r19,r5
  807820:	100b883a 	mov	r5,r2
  807824:	dc800315 	stw	r18,12(sp)
  807828:	dfc00515 	stw	ra,20(sp)
  80782c:	dc400215 	stw	r17,8(sp)
  807830:	dc000115 	stw	r16,4(sp)
  807834:	2025883a 	mov	r18,r4
  807838:	080d4fc0 	call	80d4fc <__sflags>
  80783c:	10002726 	beq	r2,zero,8078dc <_fopen_r+0xd0>
  807840:	9009883a 	mov	r4,r18
  807844:	1023883a 	mov	r17,r2
  807848:	080768c0 	call	80768c <__sfp>
  80784c:	1021883a 	mov	r16,r2
  807850:	10002226 	beq	r2,zero,8078dc <_fopen_r+0xd0>
  807854:	d9800017 	ldw	r6,0(sp)
  807858:	01c06d84 	movi	r7,438
  80785c:	980b883a 	mov	r5,r19
  807860:	9009883a 	mov	r4,r18
  807864:	0808f8c0 	call	808f8c <_open_r>
  807868:	10001916 	blt	r2,zero,8078d0 <_fopen_r+0xc4>
  80786c:	8080038d 	sth	r2,14(r16)
  807870:	00802074 	movhi	r2,129
  807874:	10a51b04 	addi	r2,r2,-27540
  807878:	80800815 	stw	r2,32(r16)
  80787c:	00802074 	movhi	r2,129
  807880:	10a53204 	addi	r2,r2,-27448
  807884:	80800915 	stw	r2,36(r16)
  807888:	00802074 	movhi	r2,129
  80788c:	10a55104 	addi	r2,r2,-27324
  807890:	80800a15 	stw	r2,40(r16)
  807894:	00802074 	movhi	r2,129
  807898:	10a56804 	addi	r2,r2,-27232
  80789c:	8440030d 	sth	r17,12(r16)
  8078a0:	84000715 	stw	r16,28(r16)
  8078a4:	80800b15 	stw	r2,44(r16)
  8078a8:	8c40400c 	andi	r17,r17,256
  8078ac:	88000d1e 	bne	r17,zero,8078e4 <_fopen_r+0xd8>
  8078b0:	8005883a 	mov	r2,r16
  8078b4:	dfc00517 	ldw	ra,20(sp)
  8078b8:	dcc00417 	ldw	r19,16(sp)
  8078bc:	dc800317 	ldw	r18,12(sp)
  8078c0:	dc400217 	ldw	r17,8(sp)
  8078c4:	dc000117 	ldw	r16,4(sp)
  8078c8:	dec00604 	addi	sp,sp,24
  8078cc:	f800283a 	ret
  8078d0:	08077cc0 	call	8077cc <__sfp_lock_acquire>
  8078d4:	8000030d 	sth	zero,12(r16)
  8078d8:	08077d00 	call	8077d0 <__sfp_lock_release>
  8078dc:	0005883a 	mov	r2,zero
  8078e0:	003ff406 	br	8078b4 <__alt_mem_onchip_mem+0xff7ff8b4>
  8078e4:	01c00084 	movi	r7,2
  8078e8:	000d883a 	mov	r6,zero
  8078ec:	800b883a 	mov	r5,r16
  8078f0:	9009883a 	mov	r4,r18
  8078f4:	0807e380 	call	807e38 <_fseek_r>
  8078f8:	8005883a 	mov	r2,r16
  8078fc:	003fed06 	br	8078b4 <__alt_mem_onchip_mem+0xff7ff8b4>

00807900 <fopen>:
  807900:	008020b4 	movhi	r2,130
  807904:	10a55004 	addi	r2,r2,-27328
  807908:	280d883a 	mov	r6,r5
  80790c:	200b883a 	mov	r5,r4
  807910:	11000017 	ldw	r4,0(r2)
  807914:	080780c1 	jmpi	80780c <_fopen_r>

00807918 <_fprintf_r>:
  807918:	defffe04 	addi	sp,sp,-8
  80791c:	2809883a 	mov	r4,r5
  807920:	300b883a 	mov	r5,r6
  807924:	dfc00015 	stw	ra,0(sp)
  807928:	d9c00115 	stw	r7,4(sp)
  80792c:	d9800104 	addi	r6,sp,4
  807930:	080b8380 	call	80b838 <__vfprintf_internal>
  807934:	dfc00017 	ldw	ra,0(sp)
  807938:	dec00204 	addi	sp,sp,8
  80793c:	f800283a 	ret

00807940 <fprintf>:
  807940:	defffd04 	addi	sp,sp,-12
  807944:	dfc00015 	stw	ra,0(sp)
  807948:	d9800115 	stw	r6,4(sp)
  80794c:	d9c00215 	stw	r7,8(sp)
  807950:	d9800104 	addi	r6,sp,4
  807954:	080b8380 	call	80b838 <__vfprintf_internal>
  807958:	dfc00017 	ldw	ra,0(sp)
  80795c:	dec00304 	addi	sp,sp,12
  807960:	f800283a 	ret

00807964 <_fputc_r>:
  807964:	defffc04 	addi	sp,sp,-16
  807968:	dc000215 	stw	r16,8(sp)
  80796c:	dfc00315 	stw	ra,12(sp)
  807970:	2021883a 	mov	r16,r4
  807974:	20000726 	beq	r4,zero,807994 <_fputc_r+0x30>
  807978:	20800e17 	ldw	r2,56(r4)
  80797c:	1000051e 	bne	r2,zero,807994 <_fputc_r+0x30>
  807980:	d9400015 	stw	r5,0(sp)
  807984:	d9800115 	stw	r6,4(sp)
  807988:	08077bc0 	call	8077bc <__sinit>
  80798c:	d9800117 	ldw	r6,4(sp)
  807990:	d9400017 	ldw	r5,0(sp)
  807994:	8009883a 	mov	r4,r16
  807998:	dfc00317 	ldw	ra,12(sp)
  80799c:	dc000217 	ldw	r16,8(sp)
  8079a0:	dec00404 	addi	sp,sp,16
  8079a4:	0808fec1 	jmpi	808fec <_putc_r>

008079a8 <fputc>:
  8079a8:	008020b4 	movhi	r2,130
  8079ac:	defffc04 	addi	sp,sp,-16
  8079b0:	10a55004 	addi	r2,r2,-27328
  8079b4:	dc000115 	stw	r16,4(sp)
  8079b8:	14000017 	ldw	r16,0(r2)
  8079bc:	dc400215 	stw	r17,8(sp)
  8079c0:	dfc00315 	stw	ra,12(sp)
  8079c4:	2023883a 	mov	r17,r4
  8079c8:	80000626 	beq	r16,zero,8079e4 <fputc+0x3c>
  8079cc:	80800e17 	ldw	r2,56(r16)
  8079d0:	1000041e 	bne	r2,zero,8079e4 <fputc+0x3c>
  8079d4:	8009883a 	mov	r4,r16
  8079d8:	d9400015 	stw	r5,0(sp)
  8079dc:	08077bc0 	call	8077bc <__sinit>
  8079e0:	d9400017 	ldw	r5,0(sp)
  8079e4:	280d883a 	mov	r6,r5
  8079e8:	8009883a 	mov	r4,r16
  8079ec:	880b883a 	mov	r5,r17
  8079f0:	dfc00317 	ldw	ra,12(sp)
  8079f4:	dc400217 	ldw	r17,8(sp)
  8079f8:	dc000117 	ldw	r16,4(sp)
  8079fc:	dec00404 	addi	sp,sp,16
  807a00:	0808fec1 	jmpi	808fec <_putc_r>

00807a04 <_malloc_trim_r>:
  807a04:	defffb04 	addi	sp,sp,-20
  807a08:	dcc00315 	stw	r19,12(sp)
  807a0c:	04c02074 	movhi	r19,129
  807a10:	dc800215 	stw	r18,8(sp)
  807a14:	dc400115 	stw	r17,4(sp)
  807a18:	dc000015 	stw	r16,0(sp)
  807a1c:	dfc00415 	stw	ra,16(sp)
  807a20:	2821883a 	mov	r16,r5
  807a24:	9cdf2c04 	addi	r19,r19,31920
  807a28:	2025883a 	mov	r18,r4
  807a2c:	08137c40 	call	8137c4 <__malloc_lock>
  807a30:	98800217 	ldw	r2,8(r19)
  807a34:	14400117 	ldw	r17,4(r2)
  807a38:	00bfff04 	movi	r2,-4
  807a3c:	88a2703a 	and	r17,r17,r2
  807a40:	8c21c83a 	sub	r16,r17,r16
  807a44:	8403fbc4 	addi	r16,r16,4079
  807a48:	8020d33a 	srli	r16,r16,12
  807a4c:	0083ffc4 	movi	r2,4095
  807a50:	843fffc4 	addi	r16,r16,-1
  807a54:	8020933a 	slli	r16,r16,12
  807a58:	1400060e 	bge	r2,r16,807a74 <_malloc_trim_r+0x70>
  807a5c:	000b883a 	mov	r5,zero
  807a60:	9009883a 	mov	r4,r18
  807a64:	08094180 	call	809418 <_sbrk_r>
  807a68:	98c00217 	ldw	r3,8(r19)
  807a6c:	1c47883a 	add	r3,r3,r17
  807a70:	10c00a26 	beq	r2,r3,807a9c <_malloc_trim_r+0x98>
  807a74:	9009883a 	mov	r4,r18
  807a78:	08137e80 	call	8137e8 <__malloc_unlock>
  807a7c:	0005883a 	mov	r2,zero
  807a80:	dfc00417 	ldw	ra,16(sp)
  807a84:	dcc00317 	ldw	r19,12(sp)
  807a88:	dc800217 	ldw	r18,8(sp)
  807a8c:	dc400117 	ldw	r17,4(sp)
  807a90:	dc000017 	ldw	r16,0(sp)
  807a94:	dec00504 	addi	sp,sp,20
  807a98:	f800283a 	ret
  807a9c:	040bc83a 	sub	r5,zero,r16
  807aa0:	9009883a 	mov	r4,r18
  807aa4:	08094180 	call	809418 <_sbrk_r>
  807aa8:	00ffffc4 	movi	r3,-1
  807aac:	10c00d26 	beq	r2,r3,807ae4 <_malloc_trim_r+0xe0>
  807ab0:	00c020b4 	movhi	r3,130
  807ab4:	18ecc304 	addi	r3,r3,-19700
  807ab8:	18800017 	ldw	r2,0(r3)
  807abc:	99000217 	ldw	r4,8(r19)
  807ac0:	8c23c83a 	sub	r17,r17,r16
  807ac4:	8c400054 	ori	r17,r17,1
  807ac8:	1421c83a 	sub	r16,r2,r16
  807acc:	24400115 	stw	r17,4(r4)
  807ad0:	9009883a 	mov	r4,r18
  807ad4:	1c000015 	stw	r16,0(r3)
  807ad8:	08137e80 	call	8137e8 <__malloc_unlock>
  807adc:	00800044 	movi	r2,1
  807ae0:	003fe706 	br	807a80 <__alt_mem_onchip_mem+0xff7ffa80>
  807ae4:	000b883a 	mov	r5,zero
  807ae8:	9009883a 	mov	r4,r18
  807aec:	08094180 	call	809418 <_sbrk_r>
  807af0:	99000217 	ldw	r4,8(r19)
  807af4:	014003c4 	movi	r5,15
  807af8:	1107c83a 	sub	r3,r2,r4
  807afc:	28ffdd0e 	bge	r5,r3,807a74 <__alt_mem_onchip_mem+0xff7ffa74>
  807b00:	014020b4 	movhi	r5,130
  807b04:	29655104 	addi	r5,r5,-27324
  807b08:	29400017 	ldw	r5,0(r5)
  807b0c:	18c00054 	ori	r3,r3,1
  807b10:	20c00115 	stw	r3,4(r4)
  807b14:	00c020b4 	movhi	r3,130
  807b18:	1145c83a 	sub	r2,r2,r5
  807b1c:	18ecc304 	addi	r3,r3,-19700
  807b20:	18800015 	stw	r2,0(r3)
  807b24:	003fd306 	br	807a74 <__alt_mem_onchip_mem+0xff7ffa74>

00807b28 <_free_r>:
  807b28:	28004126 	beq	r5,zero,807c30 <_free_r+0x108>
  807b2c:	defffd04 	addi	sp,sp,-12
  807b30:	dc400115 	stw	r17,4(sp)
  807b34:	dc000015 	stw	r16,0(sp)
  807b38:	2023883a 	mov	r17,r4
  807b3c:	2821883a 	mov	r16,r5
  807b40:	dfc00215 	stw	ra,8(sp)
  807b44:	08137c40 	call	8137c4 <__malloc_lock>
  807b48:	81ffff17 	ldw	r7,-4(r16)
  807b4c:	00bfff84 	movi	r2,-2
  807b50:	01002074 	movhi	r4,129
  807b54:	81bffe04 	addi	r6,r16,-8
  807b58:	3884703a 	and	r2,r7,r2
  807b5c:	211f2c04 	addi	r4,r4,31920
  807b60:	308b883a 	add	r5,r6,r2
  807b64:	2a400117 	ldw	r9,4(r5)
  807b68:	22000217 	ldw	r8,8(r4)
  807b6c:	00ffff04 	movi	r3,-4
  807b70:	48c6703a 	and	r3,r9,r3
  807b74:	2a005726 	beq	r5,r8,807cd4 <_free_r+0x1ac>
  807b78:	28c00115 	stw	r3,4(r5)
  807b7c:	39c0004c 	andi	r7,r7,1
  807b80:	3800091e 	bne	r7,zero,807ba8 <_free_r+0x80>
  807b84:	823ffe17 	ldw	r8,-8(r16)
  807b88:	22400204 	addi	r9,r4,8
  807b8c:	320dc83a 	sub	r6,r6,r8
  807b90:	31c00217 	ldw	r7,8(r6)
  807b94:	1205883a 	add	r2,r2,r8
  807b98:	3a406526 	beq	r7,r9,807d30 <_free_r+0x208>
  807b9c:	32000317 	ldw	r8,12(r6)
  807ba0:	3a000315 	stw	r8,12(r7)
  807ba4:	41c00215 	stw	r7,8(r8)
  807ba8:	28cf883a 	add	r7,r5,r3
  807bac:	39c00117 	ldw	r7,4(r7)
  807bb0:	39c0004c 	andi	r7,r7,1
  807bb4:	38003a26 	beq	r7,zero,807ca0 <_free_r+0x178>
  807bb8:	10c00054 	ori	r3,r2,1
  807bbc:	30c00115 	stw	r3,4(r6)
  807bc0:	3087883a 	add	r3,r6,r2
  807bc4:	18800015 	stw	r2,0(r3)
  807bc8:	00c07fc4 	movi	r3,511
  807bcc:	18801936 	bltu	r3,r2,807c34 <_free_r+0x10c>
  807bd0:	1004d0fa 	srli	r2,r2,3
  807bd4:	01c00044 	movi	r7,1
  807bd8:	21400117 	ldw	r5,4(r4)
  807bdc:	10c00044 	addi	r3,r2,1
  807be0:	18c7883a 	add	r3,r3,r3
  807be4:	1005d0ba 	srai	r2,r2,2
  807be8:	18c7883a 	add	r3,r3,r3
  807bec:	18c7883a 	add	r3,r3,r3
  807bf0:	1907883a 	add	r3,r3,r4
  807bf4:	3884983a 	sll	r2,r7,r2
  807bf8:	19c00017 	ldw	r7,0(r3)
  807bfc:	1a3ffe04 	addi	r8,r3,-8
  807c00:	1144b03a 	or	r2,r2,r5
  807c04:	32000315 	stw	r8,12(r6)
  807c08:	31c00215 	stw	r7,8(r6)
  807c0c:	20800115 	stw	r2,4(r4)
  807c10:	19800015 	stw	r6,0(r3)
  807c14:	39800315 	stw	r6,12(r7)
  807c18:	8809883a 	mov	r4,r17
  807c1c:	dfc00217 	ldw	ra,8(sp)
  807c20:	dc400117 	ldw	r17,4(sp)
  807c24:	dc000017 	ldw	r16,0(sp)
  807c28:	dec00304 	addi	sp,sp,12
  807c2c:	08137e81 	jmpi	8137e8 <__malloc_unlock>
  807c30:	f800283a 	ret
  807c34:	100ad27a 	srli	r5,r2,9
  807c38:	00c00104 	movi	r3,4
  807c3c:	19404a36 	bltu	r3,r5,807d68 <_free_r+0x240>
  807c40:	100ad1ba 	srli	r5,r2,6
  807c44:	28c00e44 	addi	r3,r5,57
  807c48:	18c7883a 	add	r3,r3,r3
  807c4c:	29400e04 	addi	r5,r5,56
  807c50:	18c7883a 	add	r3,r3,r3
  807c54:	18c7883a 	add	r3,r3,r3
  807c58:	1909883a 	add	r4,r3,r4
  807c5c:	20c00017 	ldw	r3,0(r4)
  807c60:	01c02074 	movhi	r7,129
  807c64:	213ffe04 	addi	r4,r4,-8
  807c68:	39df2c04 	addi	r7,r7,31920
  807c6c:	20c04426 	beq	r4,r3,807d80 <_free_r+0x258>
  807c70:	01ffff04 	movi	r7,-4
  807c74:	19400117 	ldw	r5,4(r3)
  807c78:	29ca703a 	and	r5,r5,r7
  807c7c:	1140022e 	bgeu	r2,r5,807c88 <_free_r+0x160>
  807c80:	18c00217 	ldw	r3,8(r3)
  807c84:	20fffb1e 	bne	r4,r3,807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807c88:	19000317 	ldw	r4,12(r3)
  807c8c:	31000315 	stw	r4,12(r6)
  807c90:	30c00215 	stw	r3,8(r6)
  807c94:	21800215 	stw	r6,8(r4)
  807c98:	19800315 	stw	r6,12(r3)
  807c9c:	003fde06 	br	807c18 <__alt_mem_onchip_mem+0xff7ffc18>
  807ca0:	29c00217 	ldw	r7,8(r5)
  807ca4:	10c5883a 	add	r2,r2,r3
  807ca8:	00c02074 	movhi	r3,129
  807cac:	18df2e04 	addi	r3,r3,31928
  807cb0:	38c03b26 	beq	r7,r3,807da0 <_free_r+0x278>
  807cb4:	2a000317 	ldw	r8,12(r5)
  807cb8:	11400054 	ori	r5,r2,1
  807cbc:	3087883a 	add	r3,r6,r2
  807cc0:	3a000315 	stw	r8,12(r7)
  807cc4:	41c00215 	stw	r7,8(r8)
  807cc8:	31400115 	stw	r5,4(r6)
  807ccc:	18800015 	stw	r2,0(r3)
  807cd0:	003fbd06 	br	807bc8 <__alt_mem_onchip_mem+0xff7ffbc8>
  807cd4:	39c0004c 	andi	r7,r7,1
  807cd8:	10c5883a 	add	r2,r2,r3
  807cdc:	3800071e 	bne	r7,zero,807cfc <_free_r+0x1d4>
  807ce0:	81fffe17 	ldw	r7,-8(r16)
  807ce4:	31cdc83a 	sub	r6,r6,r7
  807ce8:	30c00317 	ldw	r3,12(r6)
  807cec:	31400217 	ldw	r5,8(r6)
  807cf0:	11c5883a 	add	r2,r2,r7
  807cf4:	28c00315 	stw	r3,12(r5)
  807cf8:	19400215 	stw	r5,8(r3)
  807cfc:	10c00054 	ori	r3,r2,1
  807d00:	30c00115 	stw	r3,4(r6)
  807d04:	00c020b4 	movhi	r3,130
  807d08:	18e55204 	addi	r3,r3,-27320
  807d0c:	18c00017 	ldw	r3,0(r3)
  807d10:	21800215 	stw	r6,8(r4)
  807d14:	10ffc036 	bltu	r2,r3,807c18 <__alt_mem_onchip_mem+0xff7ffc18>
  807d18:	008020b4 	movhi	r2,130
  807d1c:	10acb804 	addi	r2,r2,-19744
  807d20:	11400017 	ldw	r5,0(r2)
  807d24:	8809883a 	mov	r4,r17
  807d28:	0807a040 	call	807a04 <_malloc_trim_r>
  807d2c:	003fba06 	br	807c18 <__alt_mem_onchip_mem+0xff7ffc18>
  807d30:	28c9883a 	add	r4,r5,r3
  807d34:	21000117 	ldw	r4,4(r4)
  807d38:	2100004c 	andi	r4,r4,1
  807d3c:	2000391e 	bne	r4,zero,807e24 <_free_r+0x2fc>
  807d40:	29c00217 	ldw	r7,8(r5)
  807d44:	29000317 	ldw	r4,12(r5)
  807d48:	1885883a 	add	r2,r3,r2
  807d4c:	10c00054 	ori	r3,r2,1
  807d50:	39000315 	stw	r4,12(r7)
  807d54:	21c00215 	stw	r7,8(r4)
  807d58:	30c00115 	stw	r3,4(r6)
  807d5c:	308d883a 	add	r6,r6,r2
  807d60:	30800015 	stw	r2,0(r6)
  807d64:	003fac06 	br	807c18 <__alt_mem_onchip_mem+0xff7ffc18>
  807d68:	00c00504 	movi	r3,20
  807d6c:	19401536 	bltu	r3,r5,807dc4 <_free_r+0x29c>
  807d70:	28c01704 	addi	r3,r5,92
  807d74:	18c7883a 	add	r3,r3,r3
  807d78:	294016c4 	addi	r5,r5,91
  807d7c:	003fb406 	br	807c50 <__alt_mem_onchip_mem+0xff7ffc50>
  807d80:	280bd0ba 	srai	r5,r5,2
  807d84:	00c00044 	movi	r3,1
  807d88:	38800117 	ldw	r2,4(r7)
  807d8c:	194a983a 	sll	r5,r3,r5
  807d90:	2007883a 	mov	r3,r4
  807d94:	2884b03a 	or	r2,r5,r2
  807d98:	38800115 	stw	r2,4(r7)
  807d9c:	003fbb06 	br	807c8c <__alt_mem_onchip_mem+0xff7ffc8c>
  807da0:	21800515 	stw	r6,20(r4)
  807da4:	21800415 	stw	r6,16(r4)
  807da8:	10c00054 	ori	r3,r2,1
  807dac:	31c00315 	stw	r7,12(r6)
  807db0:	31c00215 	stw	r7,8(r6)
  807db4:	30c00115 	stw	r3,4(r6)
  807db8:	308d883a 	add	r6,r6,r2
  807dbc:	30800015 	stw	r2,0(r6)
  807dc0:	003f9506 	br	807c18 <__alt_mem_onchip_mem+0xff7ffc18>
  807dc4:	00c01504 	movi	r3,84
  807dc8:	19400536 	bltu	r3,r5,807de0 <_free_r+0x2b8>
  807dcc:	100ad33a 	srli	r5,r2,12
  807dd0:	28c01bc4 	addi	r3,r5,111
  807dd4:	18c7883a 	add	r3,r3,r3
  807dd8:	29401b84 	addi	r5,r5,110
  807ddc:	003f9c06 	br	807c50 <__alt_mem_onchip_mem+0xff7ffc50>
  807de0:	00c05504 	movi	r3,340
  807de4:	19400536 	bltu	r3,r5,807dfc <_free_r+0x2d4>
  807de8:	100ad3fa 	srli	r5,r2,15
  807dec:	28c01e04 	addi	r3,r5,120
  807df0:	18c7883a 	add	r3,r3,r3
  807df4:	29401dc4 	addi	r5,r5,119
  807df8:	003f9506 	br	807c50 <__alt_mem_onchip_mem+0xff7ffc50>
  807dfc:	00c15504 	movi	r3,1364
  807e00:	19400536 	bltu	r3,r5,807e18 <_free_r+0x2f0>
  807e04:	100ad4ba 	srli	r5,r2,18
  807e08:	28c01f44 	addi	r3,r5,125
  807e0c:	18c7883a 	add	r3,r3,r3
  807e10:	29401f04 	addi	r5,r5,124
  807e14:	003f8e06 	br	807c50 <__alt_mem_onchip_mem+0xff7ffc50>
  807e18:	00c03f84 	movi	r3,254
  807e1c:	01401f84 	movi	r5,126
  807e20:	003f8b06 	br	807c50 <__alt_mem_onchip_mem+0xff7ffc50>
  807e24:	10c00054 	ori	r3,r2,1
  807e28:	30c00115 	stw	r3,4(r6)
  807e2c:	308d883a 	add	r6,r6,r2
  807e30:	30800015 	stw	r2,0(r6)
  807e34:	003f7806 	br	807c18 <__alt_mem_onchip_mem+0xff7ffc18>

00807e38 <_fseek_r>:
  807e38:	0807e581 	jmpi	807e58 <_fseeko_r>

00807e3c <fseek>:
  807e3c:	008020b4 	movhi	r2,130
  807e40:	10a55004 	addi	r2,r2,-27328
  807e44:	300f883a 	mov	r7,r6
  807e48:	280d883a 	mov	r6,r5
  807e4c:	200b883a 	mov	r5,r4
  807e50:	11000017 	ldw	r4,0(r2)
  807e54:	0807e581 	jmpi	807e58 <_fseeko_r>

00807e58 <_fseeko_r>:
  807e58:	deffe804 	addi	sp,sp,-96
  807e5c:	dd401415 	stw	r21,80(sp)
  807e60:	dc801115 	stw	r18,68(sp)
  807e64:	dc401015 	stw	r17,64(sp)
  807e68:	dc000f15 	stw	r16,60(sp)
  807e6c:	dfc01715 	stw	ra,92(sp)
  807e70:	ddc01615 	stw	r23,88(sp)
  807e74:	dd801515 	stw	r22,84(sp)
  807e78:	dd001315 	stw	r20,76(sp)
  807e7c:	dcc01215 	stw	r19,72(sp)
  807e80:	2023883a 	mov	r17,r4
  807e84:	2821883a 	mov	r16,r5
  807e88:	302b883a 	mov	r21,r6
  807e8c:	3825883a 	mov	r18,r7
  807e90:	20000226 	beq	r4,zero,807e9c <_fseeko_r+0x44>
  807e94:	20800e17 	ldw	r2,56(r4)
  807e98:	10005a26 	beq	r2,zero,808004 <_fseeko_r+0x1ac>
  807e9c:	8080030b 	ldhu	r2,12(r16)
  807ea0:	00c04204 	movi	r3,264
  807ea4:	1080420c 	andi	r2,r2,264
  807ea8:	10c05b26 	beq	r2,r3,808018 <_fseeko_r+0x1c0>
  807eac:	85000a17 	ldw	r20,40(r16)
  807eb0:	a000f626 	beq	r20,zero,80828c <_fseeko_r+0x434>
  807eb4:	00800044 	movi	r2,1
  807eb8:	90803e26 	beq	r18,r2,807fb4 <_fseeko_r+0x15c>
  807ebc:	00800084 	movi	r2,2
  807ec0:	90801026 	beq	r18,r2,807f04 <_fseeko_r+0xac>
  807ec4:	90000f26 	beq	r18,zero,807f04 <_fseeko_r+0xac>
  807ec8:	00800584 	movi	r2,22
  807ecc:	88800015 	stw	r2,0(r17)
  807ed0:	04ffffc4 	movi	r19,-1
  807ed4:	9805883a 	mov	r2,r19
  807ed8:	dfc01717 	ldw	ra,92(sp)
  807edc:	ddc01617 	ldw	r23,88(sp)
  807ee0:	dd801517 	ldw	r22,84(sp)
  807ee4:	dd401417 	ldw	r21,80(sp)
  807ee8:	dd001317 	ldw	r20,76(sp)
  807eec:	dcc01217 	ldw	r19,72(sp)
  807ef0:	dc801117 	ldw	r18,68(sp)
  807ef4:	dc401017 	ldw	r17,64(sp)
  807ef8:	dc000f17 	ldw	r16,60(sp)
  807efc:	dec01804 	addi	sp,sp,96
  807f00:	f800283a 	ret
  807f04:	80800417 	ldw	r2,16(r16)
  807f08:	002f883a 	mov	r23,zero
  807f0c:	0027883a 	mov	r19,zero
  807f10:	1000cb26 	beq	r2,zero,808240 <_fseeko_r+0x3e8>
  807f14:	8080030b 	ldhu	r2,12(r16)
  807f18:	10c2068c 	andi	r3,r2,2074
  807f1c:	1800071e 	bne	r3,zero,807f3c <_fseeko_r+0xe4>
  807f20:	10c1000c 	andi	r3,r2,1024
  807f24:	1800451e 	bne	r3,zero,80803c <_fseeko_r+0x1e4>
  807f28:	00c02074 	movhi	r3,129
  807f2c:	18e55104 	addi	r3,r3,-27324
  807f30:	a0c0b726 	beq	r20,r3,808210 <_fseeko_r+0x3b8>
  807f34:	10820014 	ori	r2,r2,2048
  807f38:	8080030d 	sth	r2,12(r16)
  807f3c:	800b883a 	mov	r5,r16
  807f40:	8809883a 	mov	r4,r17
  807f44:	08073e00 	call	8073e0 <_fflush_r>
  807f48:	1027883a 	mov	r19,r2
  807f4c:	103fe01e 	bne	r2,zero,807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  807f50:	81400717 	ldw	r5,28(r16)
  807f54:	900f883a 	mov	r7,r18
  807f58:	a80d883a 	mov	r6,r21
  807f5c:	8809883a 	mov	r4,r17
  807f60:	a03ee83a 	callr	r20
  807f64:	00ffffc4 	movi	r3,-1
  807f68:	10ffd926 	beq	r2,r3,807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  807f6c:	81400c17 	ldw	r5,48(r16)
  807f70:	28000526 	beq	r5,zero,807f88 <_fseeko_r+0x130>
  807f74:	80801004 	addi	r2,r16,64
  807f78:	28800226 	beq	r5,r2,807f84 <_fseeko_r+0x12c>
  807f7c:	8809883a 	mov	r4,r17
  807f80:	0807b280 	call	807b28 <_free_r>
  807f84:	80000c15 	stw	zero,48(r16)
  807f88:	8080030b 	ldhu	r2,12(r16)
  807f8c:	80c00417 	ldw	r3,16(r16)
  807f90:	80000115 	stw	zero,4(r16)
  807f94:	10bdf7cc 	andi	r2,r2,63455
  807f98:	80c00015 	stw	r3,0(r16)
  807f9c:	8080030d 	sth	r2,12(r16)
  807fa0:	01800204 	movi	r6,8
  807fa4:	000b883a 	mov	r5,zero
  807fa8:	81001704 	addi	r4,r16,92
  807fac:	0808e640 	call	808e64 <memset>
  807fb0:	003fc806 	br	807ed4 <__alt_mem_onchip_mem+0xff7ffed4>
  807fb4:	800b883a 	mov	r5,r16
  807fb8:	8809883a 	mov	r4,r17
  807fbc:	08073e00 	call	8073e0 <_fflush_r>
  807fc0:	8080030b 	ldhu	r2,12(r16)
  807fc4:	10c4000c 	andi	r3,r2,4096
  807fc8:	18008726 	beq	r3,zero,8081e8 <_fseeko_r+0x390>
  807fcc:	84c01417 	ldw	r19,80(r16)
  807fd0:	10c0010c 	andi	r3,r2,4
  807fd4:	1800431e 	bne	r3,zero,8080e4 <_fseeko_r+0x28c>
  807fd8:	1080020c 	andi	r2,r2,8
  807fdc:	10008026 	beq	r2,zero,8081e0 <_fseeko_r+0x388>
  807fe0:	80c00017 	ldw	r3,0(r16)
  807fe4:	80800417 	ldw	r2,16(r16)
  807fe8:	18000226 	beq	r3,zero,807ff4 <_fseeko_r+0x19c>
  807fec:	1887c83a 	sub	r3,r3,r2
  807ff0:	98e7883a 	add	r19,r19,r3
  807ff4:	aceb883a 	add	r21,r21,r19
  807ff8:	05c00044 	movi	r23,1
  807ffc:	0025883a 	mov	r18,zero
  808000:	003fc306 	br	807f10 <__alt_mem_onchip_mem+0xff7fff10>
  808004:	08077bc0 	call	8077bc <__sinit>
  808008:	8080030b 	ldhu	r2,12(r16)
  80800c:	00c04204 	movi	r3,264
  808010:	1080420c 	andi	r2,r2,264
  808014:	10ffa51e 	bne	r2,r3,807eac <__alt_mem_onchip_mem+0xff7ffeac>
  808018:	800b883a 	mov	r5,r16
  80801c:	8809883a 	mov	r4,r17
  808020:	08073e00 	call	8073e0 <_fflush_r>
  808024:	003fa106 	br	807eac <__alt_mem_onchip_mem+0xff7ffeac>
  808028:	8080030b 	ldhu	r2,12(r16)
  80802c:	00c10004 	movi	r3,1024
  808030:	80c01315 	stw	r3,76(r16)
  808034:	10c4b03a 	or	r2,r2,r3
  808038:	8080030d 	sth	r2,12(r16)
  80803c:	9000311e 	bne	r18,zero,808104 <_fseeko_r+0x2ac>
  808040:	a82d883a 	mov	r22,r21
  808044:	b800371e 	bne	r23,zero,808124 <_fseeko_r+0x2cc>
  808048:	8080030b 	ldhu	r2,12(r16)
  80804c:	1084000c 	andi	r2,r2,4096
  808050:	10007f26 	beq	r2,zero,808250 <_fseeko_r+0x3f8>
  808054:	80801417 	ldw	r2,80(r16)
  808058:	81800117 	ldw	r6,4(r16)
  80805c:	81400c17 	ldw	r5,48(r16)
  808060:	11a7c83a 	sub	r19,r2,r6
  808064:	28008226 	beq	r5,zero,808270 <_fseeko_r+0x418>
  808068:	81c00f17 	ldw	r7,60(r16)
  80806c:	99e7c83a 	sub	r19,r19,r7
  808070:	81000e17 	ldw	r4,56(r16)
  808074:	80800417 	ldw	r2,16(r16)
  808078:	99a7883a 	add	r19,r19,r6
  80807c:	2087c83a 	sub	r3,r4,r2
  808080:	98e7c83a 	sub	r19,r19,r3
  808084:	38c7883a 	add	r3,r7,r3
  808088:	b4c02b16 	blt	r22,r19,808138 <_fseeko_r+0x2e0>
  80808c:	98c9883a 	add	r4,r19,r3
  808090:	b100292e 	bgeu	r22,r4,808138 <_fseeko_r+0x2e0>
  808094:	b4e7c83a 	sub	r19,r22,r19
  808098:	14c5883a 	add	r2,r2,r19
  80809c:	1ce7c83a 	sub	r19,r3,r19
  8080a0:	80800015 	stw	r2,0(r16)
  8080a4:	84c00115 	stw	r19,4(r16)
  8080a8:	28000526 	beq	r5,zero,8080c0 <_fseeko_r+0x268>
  8080ac:	80801004 	addi	r2,r16,64
  8080b0:	28800226 	beq	r5,r2,8080bc <_fseeko_r+0x264>
  8080b4:	8809883a 	mov	r4,r17
  8080b8:	0807b280 	call	807b28 <_free_r>
  8080bc:	80000c15 	stw	zero,48(r16)
  8080c0:	8080030b 	ldhu	r2,12(r16)
  8080c4:	01800204 	movi	r6,8
  8080c8:	000b883a 	mov	r5,zero
  8080cc:	10bff7cc 	andi	r2,r2,65503
  8080d0:	8080030d 	sth	r2,12(r16)
  8080d4:	81001704 	addi	r4,r16,92
  8080d8:	0808e640 	call	808e64 <memset>
  8080dc:	0027883a 	mov	r19,zero
  8080e0:	003f7c06 	br	807ed4 <__alt_mem_onchip_mem+0xff7ffed4>
  8080e4:	80c00117 	ldw	r3,4(r16)
  8080e8:	80800c17 	ldw	r2,48(r16)
  8080ec:	98e7c83a 	sub	r19,r19,r3
  8080f0:	10003b26 	beq	r2,zero,8081e0 <_fseeko_r+0x388>
  8080f4:	80c00f17 	ldw	r3,60(r16)
  8080f8:	80800417 	ldw	r2,16(r16)
  8080fc:	98e7c83a 	sub	r19,r19,r3
  808100:	003fbc06 	br	807ff4 <__alt_mem_onchip_mem+0xff7ffff4>
  808104:	8140038f 	ldh	r5,14(r16)
  808108:	d80d883a 	mov	r6,sp
  80810c:	8809883a 	mov	r4,r17
  808110:	08082b80 	call	8082b8 <_fstat_r>
  808114:	103f891e 	bne	r2,zero,807f3c <__alt_mem_onchip_mem+0xff7fff3c>
  808118:	dd800417 	ldw	r22,16(sp)
  80811c:	adad883a 	add	r22,r21,r22
  808120:	b83fc926 	beq	r23,zero,808048 <__alt_mem_onchip_mem+0xff800048>
  808124:	81400c17 	ldw	r5,48(r16)
  808128:	81800117 	ldw	r6,4(r16)
  80812c:	28005026 	beq	r5,zero,808270 <_fseeko_r+0x418>
  808130:	81c00f17 	ldw	r7,60(r16)
  808134:	003fce06 	br	808070 <__alt_mem_onchip_mem+0xff800070>
  808138:	84c01317 	ldw	r19,76(r16)
  80813c:	81400717 	ldw	r5,28(r16)
  808140:	000f883a 	mov	r7,zero
  808144:	04e7c83a 	sub	r19,zero,r19
  808148:	9da6703a 	and	r19,r19,r22
  80814c:	980d883a 	mov	r6,r19
  808150:	8809883a 	mov	r4,r17
  808154:	a03ee83a 	callr	r20
  808158:	00ffffc4 	movi	r3,-1
  80815c:	10ff7726 	beq	r2,r3,807f3c <__alt_mem_onchip_mem+0xff7fff3c>
  808160:	80800417 	ldw	r2,16(r16)
  808164:	81400c17 	ldw	r5,48(r16)
  808168:	80000115 	stw	zero,4(r16)
  80816c:	80800015 	stw	r2,0(r16)
  808170:	28000526 	beq	r5,zero,808188 <_fseeko_r+0x330>
  808174:	80801004 	addi	r2,r16,64
  808178:	28800226 	beq	r5,r2,808184 <_fseeko_r+0x32c>
  80817c:	8809883a 	mov	r4,r17
  808180:	0807b280 	call	807b28 <_free_r>
  808184:	80000c15 	stw	zero,48(r16)
  808188:	8080030b 	ldhu	r2,12(r16)
  80818c:	b4e7c83a 	sub	r19,r22,r19
  808190:	10bff7cc 	andi	r2,r2,65503
  808194:	8080030d 	sth	r2,12(r16)
  808198:	98000b26 	beq	r19,zero,8081c8 <_fseeko_r+0x370>
  80819c:	800b883a 	mov	r5,r16
  8081a0:	8809883a 	mov	r4,r17
  8081a4:	08092440 	call	809244 <__srefill_r>
  8081a8:	103f641e 	bne	r2,zero,807f3c <__alt_mem_onchip_mem+0xff7fff3c>
  8081ac:	80800117 	ldw	r2,4(r16)
  8081b0:	14ff6236 	bltu	r2,r19,807f3c <__alt_mem_onchip_mem+0xff7fff3c>
  8081b4:	80c00017 	ldw	r3,0(r16)
  8081b8:	14c5c83a 	sub	r2,r2,r19
  8081bc:	80800115 	stw	r2,4(r16)
  8081c0:	1ce7883a 	add	r19,r3,r19
  8081c4:	84c00015 	stw	r19,0(r16)
  8081c8:	01800204 	movi	r6,8
  8081cc:	000b883a 	mov	r5,zero
  8081d0:	81001704 	addi	r4,r16,92
  8081d4:	0808e640 	call	808e64 <memset>
  8081d8:	0027883a 	mov	r19,zero
  8081dc:	003f3d06 	br	807ed4 <__alt_mem_onchip_mem+0xff7ffed4>
  8081e0:	80800417 	ldw	r2,16(r16)
  8081e4:	003f8306 	br	807ff4 <__alt_mem_onchip_mem+0xff7ffff4>
  8081e8:	81400717 	ldw	r5,28(r16)
  8081ec:	900f883a 	mov	r7,r18
  8081f0:	000d883a 	mov	r6,zero
  8081f4:	8809883a 	mov	r4,r17
  8081f8:	a03ee83a 	callr	r20
  8081fc:	1027883a 	mov	r19,r2
  808200:	00bfffc4 	movi	r2,-1
  808204:	98bf3226 	beq	r19,r2,807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  808208:	8080030b 	ldhu	r2,12(r16)
  80820c:	003f7006 	br	807fd0 <__alt_mem_onchip_mem+0xff7fffd0>
  808210:	8140038f 	ldh	r5,14(r16)
  808214:	283f4716 	blt	r5,zero,807f34 <__alt_mem_onchip_mem+0xff7fff34>
  808218:	d80d883a 	mov	r6,sp
  80821c:	8809883a 	mov	r4,r17
  808220:	08082b80 	call	8082b8 <_fstat_r>
  808224:	1000041e 	bne	r2,zero,808238 <_fseeko_r+0x3e0>
  808228:	d8800117 	ldw	r2,4(sp)
  80822c:	00e00014 	movui	r3,32768
  808230:	10bc000c 	andi	r2,r2,61440
  808234:	10ff7c26 	beq	r2,r3,808028 <__alt_mem_onchip_mem+0xff800028>
  808238:	8080030b 	ldhu	r2,12(r16)
  80823c:	003f3d06 	br	807f34 <__alt_mem_onchip_mem+0xff7fff34>
  808240:	800b883a 	mov	r5,r16
  808244:	8809883a 	mov	r4,r17
  808248:	080849c0 	call	80849c <__smakebuf_r>
  80824c:	003f3106 	br	807f14 <__alt_mem_onchip_mem+0xff7fff14>
  808250:	81400717 	ldw	r5,28(r16)
  808254:	01c00044 	movi	r7,1
  808258:	000d883a 	mov	r6,zero
  80825c:	8809883a 	mov	r4,r17
  808260:	a03ee83a 	callr	r20
  808264:	00ffffc4 	movi	r3,-1
  808268:	10ff7b1e 	bne	r2,r3,808058 <__alt_mem_onchip_mem+0xff800058>
  80826c:	003f3306 	br	807f3c <__alt_mem_onchip_mem+0xff7fff3c>
  808270:	80c00017 	ldw	r3,0(r16)
  808274:	80800417 	ldw	r2,16(r16)
  808278:	000b883a 	mov	r5,zero
  80827c:	1887c83a 	sub	r3,r3,r2
  808280:	98e7c83a 	sub	r19,r19,r3
  808284:	30c7883a 	add	r3,r6,r3
  808288:	003f7f06 	br	808088 <__alt_mem_onchip_mem+0xff800088>
  80828c:	00800744 	movi	r2,29
  808290:	88800015 	stw	r2,0(r17)
  808294:	04ffffc4 	movi	r19,-1
  808298:	003f0e06 	br	807ed4 <__alt_mem_onchip_mem+0xff7ffed4>

0080829c <fseeko>:
  80829c:	008020b4 	movhi	r2,130
  8082a0:	10a55004 	addi	r2,r2,-27328
  8082a4:	300f883a 	mov	r7,r6
  8082a8:	280d883a 	mov	r6,r5
  8082ac:	200b883a 	mov	r5,r4
  8082b0:	11000017 	ldw	r4,0(r2)
  8082b4:	0807e581 	jmpi	807e58 <_fseeko_r>

008082b8 <_fstat_r>:
  8082b8:	defffd04 	addi	sp,sp,-12
  8082bc:	2805883a 	mov	r2,r5
  8082c0:	dc000015 	stw	r16,0(sp)
  8082c4:	040020b4 	movhi	r16,130
  8082c8:	dc400115 	stw	r17,4(sp)
  8082cc:	842cb504 	addi	r16,r16,-19756
  8082d0:	2023883a 	mov	r17,r4
  8082d4:	300b883a 	mov	r5,r6
  8082d8:	1009883a 	mov	r4,r2
  8082dc:	dfc00215 	stw	ra,8(sp)
  8082e0:	80000015 	stw	zero,0(r16)
  8082e4:	081323c0 	call	81323c <fstat>
  8082e8:	00ffffc4 	movi	r3,-1
  8082ec:	10c00526 	beq	r2,r3,808304 <_fstat_r+0x4c>
  8082f0:	dfc00217 	ldw	ra,8(sp)
  8082f4:	dc400117 	ldw	r17,4(sp)
  8082f8:	dc000017 	ldw	r16,0(sp)
  8082fc:	dec00304 	addi	sp,sp,12
  808300:	f800283a 	ret
  808304:	80c00017 	ldw	r3,0(r16)
  808308:	183ff926 	beq	r3,zero,8082f0 <__alt_mem_onchip_mem+0xff8002f0>
  80830c:	88c00015 	stw	r3,0(r17)
  808310:	003ff706 	br	8082f0 <__alt_mem_onchip_mem+0xff8002f0>

00808314 <_fwalk>:
  808314:	defff704 	addi	sp,sp,-36
  808318:	dd000415 	stw	r20,16(sp)
  80831c:	dfc00815 	stw	ra,32(sp)
  808320:	ddc00715 	stw	r23,28(sp)
  808324:	dd800615 	stw	r22,24(sp)
  808328:	dd400515 	stw	r21,20(sp)
  80832c:	dcc00315 	stw	r19,12(sp)
  808330:	dc800215 	stw	r18,8(sp)
  808334:	dc400115 	stw	r17,4(sp)
  808338:	dc000015 	stw	r16,0(sp)
  80833c:	2500b804 	addi	r20,r4,736
  808340:	a0002326 	beq	r20,zero,8083d0 <_fwalk+0xbc>
  808344:	282b883a 	mov	r21,r5
  808348:	002f883a 	mov	r23,zero
  80834c:	05800044 	movi	r22,1
  808350:	04ffffc4 	movi	r19,-1
  808354:	a4400117 	ldw	r17,4(r20)
  808358:	a4800217 	ldw	r18,8(r20)
  80835c:	8c7fffc4 	addi	r17,r17,-1
  808360:	88000d16 	blt	r17,zero,808398 <_fwalk+0x84>
  808364:	94000304 	addi	r16,r18,12
  808368:	94800384 	addi	r18,r18,14
  80836c:	8080000b 	ldhu	r2,0(r16)
  808370:	8c7fffc4 	addi	r17,r17,-1
  808374:	813ffd04 	addi	r4,r16,-12
  808378:	b080042e 	bgeu	r22,r2,80838c <_fwalk+0x78>
  80837c:	9080000f 	ldh	r2,0(r18)
  808380:	14c00226 	beq	r2,r19,80838c <_fwalk+0x78>
  808384:	a83ee83a 	callr	r21
  808388:	b8aeb03a 	or	r23,r23,r2
  80838c:	84001a04 	addi	r16,r16,104
  808390:	94801a04 	addi	r18,r18,104
  808394:	8cfff51e 	bne	r17,r19,80836c <__alt_mem_onchip_mem+0xff80036c>
  808398:	a5000017 	ldw	r20,0(r20)
  80839c:	a03fed1e 	bne	r20,zero,808354 <__alt_mem_onchip_mem+0xff800354>
  8083a0:	b805883a 	mov	r2,r23
  8083a4:	dfc00817 	ldw	ra,32(sp)
  8083a8:	ddc00717 	ldw	r23,28(sp)
  8083ac:	dd800617 	ldw	r22,24(sp)
  8083b0:	dd400517 	ldw	r21,20(sp)
  8083b4:	dd000417 	ldw	r20,16(sp)
  8083b8:	dcc00317 	ldw	r19,12(sp)
  8083bc:	dc800217 	ldw	r18,8(sp)
  8083c0:	dc400117 	ldw	r17,4(sp)
  8083c4:	dc000017 	ldw	r16,0(sp)
  8083c8:	dec00904 	addi	sp,sp,36
  8083cc:	f800283a 	ret
  8083d0:	002f883a 	mov	r23,zero
  8083d4:	003ff206 	br	8083a0 <__alt_mem_onchip_mem+0xff8003a0>

008083d8 <_fwalk_reent>:
  8083d8:	defff704 	addi	sp,sp,-36
  8083dc:	dd000415 	stw	r20,16(sp)
  8083e0:	dfc00815 	stw	ra,32(sp)
  8083e4:	ddc00715 	stw	r23,28(sp)
  8083e8:	dd800615 	stw	r22,24(sp)
  8083ec:	dd400515 	stw	r21,20(sp)
  8083f0:	dcc00315 	stw	r19,12(sp)
  8083f4:	dc800215 	stw	r18,8(sp)
  8083f8:	dc400115 	stw	r17,4(sp)
  8083fc:	dc000015 	stw	r16,0(sp)
  808400:	2500b804 	addi	r20,r4,736
  808404:	a0002326 	beq	r20,zero,808494 <_fwalk_reent+0xbc>
  808408:	282b883a 	mov	r21,r5
  80840c:	2027883a 	mov	r19,r4
  808410:	002f883a 	mov	r23,zero
  808414:	05800044 	movi	r22,1
  808418:	04bfffc4 	movi	r18,-1
  80841c:	a4400117 	ldw	r17,4(r20)
  808420:	a4000217 	ldw	r16,8(r20)
  808424:	8c7fffc4 	addi	r17,r17,-1
  808428:	88000c16 	blt	r17,zero,80845c <_fwalk_reent+0x84>
  80842c:	84000304 	addi	r16,r16,12
  808430:	8080000b 	ldhu	r2,0(r16)
  808434:	8c7fffc4 	addi	r17,r17,-1
  808438:	817ffd04 	addi	r5,r16,-12
  80843c:	b080052e 	bgeu	r22,r2,808454 <_fwalk_reent+0x7c>
  808440:	8080008f 	ldh	r2,2(r16)
  808444:	9809883a 	mov	r4,r19
  808448:	14800226 	beq	r2,r18,808454 <_fwalk_reent+0x7c>
  80844c:	a83ee83a 	callr	r21
  808450:	b8aeb03a 	or	r23,r23,r2
  808454:	84001a04 	addi	r16,r16,104
  808458:	8cbff51e 	bne	r17,r18,808430 <__alt_mem_onchip_mem+0xff800430>
  80845c:	a5000017 	ldw	r20,0(r20)
  808460:	a03fee1e 	bne	r20,zero,80841c <__alt_mem_onchip_mem+0xff80041c>
  808464:	b805883a 	mov	r2,r23
  808468:	dfc00817 	ldw	ra,32(sp)
  80846c:	ddc00717 	ldw	r23,28(sp)
  808470:	dd800617 	ldw	r22,24(sp)
  808474:	dd400517 	ldw	r21,20(sp)
  808478:	dd000417 	ldw	r20,16(sp)
  80847c:	dcc00317 	ldw	r19,12(sp)
  808480:	dc800217 	ldw	r18,8(sp)
  808484:	dc400117 	ldw	r17,4(sp)
  808488:	dc000017 	ldw	r16,0(sp)
  80848c:	dec00904 	addi	sp,sp,36
  808490:	f800283a 	ret
  808494:	002f883a 	mov	r23,zero
  808498:	003ff206 	br	808464 <__alt_mem_onchip_mem+0xff800464>

0080849c <__smakebuf_r>:
  80849c:	2880030b 	ldhu	r2,12(r5)
  8084a0:	10c0008c 	andi	r3,r2,2
  8084a4:	1800411e 	bne	r3,zero,8085ac <__smakebuf_r+0x110>
  8084a8:	deffec04 	addi	sp,sp,-80
  8084ac:	dc000f15 	stw	r16,60(sp)
  8084b0:	2821883a 	mov	r16,r5
  8084b4:	2940038f 	ldh	r5,14(r5)
  8084b8:	dc401015 	stw	r17,64(sp)
  8084bc:	dfc01315 	stw	ra,76(sp)
  8084c0:	dcc01215 	stw	r19,72(sp)
  8084c4:	dc801115 	stw	r18,68(sp)
  8084c8:	2023883a 	mov	r17,r4
  8084cc:	28001c16 	blt	r5,zero,808540 <__smakebuf_r+0xa4>
  8084d0:	d80d883a 	mov	r6,sp
  8084d4:	08082b80 	call	8082b8 <_fstat_r>
  8084d8:	10001816 	blt	r2,zero,80853c <__smakebuf_r+0xa0>
  8084dc:	d8800117 	ldw	r2,4(sp)
  8084e0:	00e00014 	movui	r3,32768
  8084e4:	10bc000c 	andi	r2,r2,61440
  8084e8:	14c80020 	cmpeqi	r19,r2,8192
  8084ec:	10c03726 	beq	r2,r3,8085cc <__smakebuf_r+0x130>
  8084f0:	80c0030b 	ldhu	r3,12(r16)
  8084f4:	18c20014 	ori	r3,r3,2048
  8084f8:	80c0030d 	sth	r3,12(r16)
  8084fc:	00c80004 	movi	r3,8192
  808500:	10c0521e 	bne	r2,r3,80864c <__smakebuf_r+0x1b0>
  808504:	8140038f 	ldh	r5,14(r16)
  808508:	8809883a 	mov	r4,r17
  80850c:	080da640 	call	80da64 <_isatty_r>
  808510:	10004c26 	beq	r2,zero,808644 <__smakebuf_r+0x1a8>
  808514:	8080030b 	ldhu	r2,12(r16)
  808518:	80c010c4 	addi	r3,r16,67
  80851c:	80c00015 	stw	r3,0(r16)
  808520:	10800054 	ori	r2,r2,1
  808524:	8080030d 	sth	r2,12(r16)
  808528:	00800044 	movi	r2,1
  80852c:	80c00415 	stw	r3,16(r16)
  808530:	80800515 	stw	r2,20(r16)
  808534:	04810004 	movi	r18,1024
  808538:	00000706 	br	808558 <__smakebuf_r+0xbc>
  80853c:	8080030b 	ldhu	r2,12(r16)
  808540:	10c0200c 	andi	r3,r2,128
  808544:	18001f1e 	bne	r3,zero,8085c4 <__smakebuf_r+0x128>
  808548:	04810004 	movi	r18,1024
  80854c:	10820014 	ori	r2,r2,2048
  808550:	8080030d 	sth	r2,12(r16)
  808554:	0027883a 	mov	r19,zero
  808558:	900b883a 	mov	r5,r18
  80855c:	8809883a 	mov	r4,r17
  808560:	08086580 	call	808658 <_malloc_r>
  808564:	10002c26 	beq	r2,zero,808618 <__smakebuf_r+0x17c>
  808568:	80c0030b 	ldhu	r3,12(r16)
  80856c:	01002034 	movhi	r4,128
  808570:	211d1d04 	addi	r4,r4,29812
  808574:	89000f15 	stw	r4,60(r17)
  808578:	18c02014 	ori	r3,r3,128
  80857c:	80c0030d 	sth	r3,12(r16)
  808580:	80800015 	stw	r2,0(r16)
  808584:	80800415 	stw	r2,16(r16)
  808588:	84800515 	stw	r18,20(r16)
  80858c:	98001a1e 	bne	r19,zero,8085f8 <__smakebuf_r+0x15c>
  808590:	dfc01317 	ldw	ra,76(sp)
  808594:	dcc01217 	ldw	r19,72(sp)
  808598:	dc801117 	ldw	r18,68(sp)
  80859c:	dc401017 	ldw	r17,64(sp)
  8085a0:	dc000f17 	ldw	r16,60(sp)
  8085a4:	dec01404 	addi	sp,sp,80
  8085a8:	f800283a 	ret
  8085ac:	288010c4 	addi	r2,r5,67
  8085b0:	28800015 	stw	r2,0(r5)
  8085b4:	28800415 	stw	r2,16(r5)
  8085b8:	00800044 	movi	r2,1
  8085bc:	28800515 	stw	r2,20(r5)
  8085c0:	f800283a 	ret
  8085c4:	04801004 	movi	r18,64
  8085c8:	003fe006 	br	80854c <__alt_mem_onchip_mem+0xff80054c>
  8085cc:	81000a17 	ldw	r4,40(r16)
  8085d0:	00c02074 	movhi	r3,129
  8085d4:	18e55104 	addi	r3,r3,-27324
  8085d8:	20ffc51e 	bne	r4,r3,8084f0 <__alt_mem_onchip_mem+0xff8004f0>
  8085dc:	8080030b 	ldhu	r2,12(r16)
  8085e0:	04810004 	movi	r18,1024
  8085e4:	84801315 	stw	r18,76(r16)
  8085e8:	1484b03a 	or	r2,r2,r18
  8085ec:	8080030d 	sth	r2,12(r16)
  8085f0:	0027883a 	mov	r19,zero
  8085f4:	003fd806 	br	808558 <__alt_mem_onchip_mem+0xff800558>
  8085f8:	8140038f 	ldh	r5,14(r16)
  8085fc:	8809883a 	mov	r4,r17
  808600:	080da640 	call	80da64 <_isatty_r>
  808604:	103fe226 	beq	r2,zero,808590 <__alt_mem_onchip_mem+0xff800590>
  808608:	8080030b 	ldhu	r2,12(r16)
  80860c:	10800054 	ori	r2,r2,1
  808610:	8080030d 	sth	r2,12(r16)
  808614:	003fde06 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  808618:	8080030b 	ldhu	r2,12(r16)
  80861c:	10c0800c 	andi	r3,r2,512
  808620:	183fdb1e 	bne	r3,zero,808590 <__alt_mem_onchip_mem+0xff800590>
  808624:	10800094 	ori	r2,r2,2
  808628:	80c010c4 	addi	r3,r16,67
  80862c:	8080030d 	sth	r2,12(r16)
  808630:	00800044 	movi	r2,1
  808634:	80c00015 	stw	r3,0(r16)
  808638:	80c00415 	stw	r3,16(r16)
  80863c:	80800515 	stw	r2,20(r16)
  808640:	003fd306 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  808644:	04810004 	movi	r18,1024
  808648:	003fc306 	br	808558 <__alt_mem_onchip_mem+0xff800558>
  80864c:	0027883a 	mov	r19,zero
  808650:	04810004 	movi	r18,1024
  808654:	003fc006 	br	808558 <__alt_mem_onchip_mem+0xff800558>

00808658 <_malloc_r>:
  808658:	defff504 	addi	sp,sp,-44
  80865c:	dc800315 	stw	r18,12(sp)
  808660:	dfc00a15 	stw	ra,40(sp)
  808664:	df000915 	stw	fp,36(sp)
  808668:	ddc00815 	stw	r23,32(sp)
  80866c:	dd800715 	stw	r22,28(sp)
  808670:	dd400615 	stw	r21,24(sp)
  808674:	dd000515 	stw	r20,20(sp)
  808678:	dcc00415 	stw	r19,16(sp)
  80867c:	dc400215 	stw	r17,8(sp)
  808680:	dc000115 	stw	r16,4(sp)
  808684:	288002c4 	addi	r2,r5,11
  808688:	00c00584 	movi	r3,22
  80868c:	2025883a 	mov	r18,r4
  808690:	18807f2e 	bgeu	r3,r2,808890 <_malloc_r+0x238>
  808694:	047ffe04 	movi	r17,-8
  808698:	1462703a 	and	r17,r2,r17
  80869c:	8800a316 	blt	r17,zero,80892c <_malloc_r+0x2d4>
  8086a0:	8940a236 	bltu	r17,r5,80892c <_malloc_r+0x2d4>
  8086a4:	08137c40 	call	8137c4 <__malloc_lock>
  8086a8:	00807dc4 	movi	r2,503
  8086ac:	1441e92e 	bgeu	r2,r17,808e54 <_malloc_r+0x7fc>
  8086b0:	8804d27a 	srli	r2,r17,9
  8086b4:	1000a126 	beq	r2,zero,80893c <_malloc_r+0x2e4>
  8086b8:	00c00104 	movi	r3,4
  8086bc:	18811e36 	bltu	r3,r2,808b38 <_malloc_r+0x4e0>
  8086c0:	8804d1ba 	srli	r2,r17,6
  8086c4:	12000e44 	addi	r8,r2,57
  8086c8:	11c00e04 	addi	r7,r2,56
  8086cc:	4209883a 	add	r4,r8,r8
  8086d0:	04c02074 	movhi	r19,129
  8086d4:	2109883a 	add	r4,r4,r4
  8086d8:	9cdf2c04 	addi	r19,r19,31920
  8086dc:	2109883a 	add	r4,r4,r4
  8086e0:	9909883a 	add	r4,r19,r4
  8086e4:	24000117 	ldw	r16,4(r4)
  8086e8:	213ffe04 	addi	r4,r4,-8
  8086ec:	24009726 	beq	r4,r16,80894c <_malloc_r+0x2f4>
  8086f0:	80800117 	ldw	r2,4(r16)
  8086f4:	01bfff04 	movi	r6,-4
  8086f8:	014003c4 	movi	r5,15
  8086fc:	1184703a 	and	r2,r2,r6
  808700:	1447c83a 	sub	r3,r2,r17
  808704:	28c00716 	blt	r5,r3,808724 <_malloc_r+0xcc>
  808708:	1800920e 	bge	r3,zero,808954 <_malloc_r+0x2fc>
  80870c:	84000317 	ldw	r16,12(r16)
  808710:	24008e26 	beq	r4,r16,80894c <_malloc_r+0x2f4>
  808714:	80800117 	ldw	r2,4(r16)
  808718:	1184703a 	and	r2,r2,r6
  80871c:	1447c83a 	sub	r3,r2,r17
  808720:	28fff90e 	bge	r5,r3,808708 <__alt_mem_onchip_mem+0xff800708>
  808724:	3809883a 	mov	r4,r7
  808728:	01802074 	movhi	r6,129
  80872c:	9c000417 	ldw	r16,16(r19)
  808730:	319f2c04 	addi	r6,r6,31920
  808734:	32000204 	addi	r8,r6,8
  808738:	82013426 	beq	r16,r8,808c0c <_malloc_r+0x5b4>
  80873c:	80c00117 	ldw	r3,4(r16)
  808740:	00bfff04 	movi	r2,-4
  808744:	188e703a 	and	r7,r3,r2
  808748:	3c45c83a 	sub	r2,r7,r17
  80874c:	00c003c4 	movi	r3,15
  808750:	18811f16 	blt	r3,r2,808bd0 <_malloc_r+0x578>
  808754:	32000515 	stw	r8,20(r6)
  808758:	32000415 	stw	r8,16(r6)
  80875c:	10007f0e 	bge	r2,zero,80895c <_malloc_r+0x304>
  808760:	00807fc4 	movi	r2,511
  808764:	11c0fd36 	bltu	r2,r7,808b5c <_malloc_r+0x504>
  808768:	3806d0fa 	srli	r3,r7,3
  80876c:	01c00044 	movi	r7,1
  808770:	30800117 	ldw	r2,4(r6)
  808774:	19400044 	addi	r5,r3,1
  808778:	294b883a 	add	r5,r5,r5
  80877c:	1807d0ba 	srai	r3,r3,2
  808780:	294b883a 	add	r5,r5,r5
  808784:	294b883a 	add	r5,r5,r5
  808788:	298b883a 	add	r5,r5,r6
  80878c:	38c6983a 	sll	r3,r7,r3
  808790:	29c00017 	ldw	r7,0(r5)
  808794:	2a7ffe04 	addi	r9,r5,-8
  808798:	1886b03a 	or	r3,r3,r2
  80879c:	82400315 	stw	r9,12(r16)
  8087a0:	81c00215 	stw	r7,8(r16)
  8087a4:	30c00115 	stw	r3,4(r6)
  8087a8:	2c000015 	stw	r16,0(r5)
  8087ac:	3c000315 	stw	r16,12(r7)
  8087b0:	2005d0ba 	srai	r2,r4,2
  8087b4:	01400044 	movi	r5,1
  8087b8:	288a983a 	sll	r5,r5,r2
  8087bc:	19406f36 	bltu	r3,r5,80897c <_malloc_r+0x324>
  8087c0:	28c4703a 	and	r2,r5,r3
  8087c4:	10000a1e 	bne	r2,zero,8087f0 <_malloc_r+0x198>
  8087c8:	00bfff04 	movi	r2,-4
  8087cc:	294b883a 	add	r5,r5,r5
  8087d0:	2088703a 	and	r4,r4,r2
  8087d4:	28c4703a 	and	r2,r5,r3
  8087d8:	21000104 	addi	r4,r4,4
  8087dc:	1000041e 	bne	r2,zero,8087f0 <_malloc_r+0x198>
  8087e0:	294b883a 	add	r5,r5,r5
  8087e4:	28c4703a 	and	r2,r5,r3
  8087e8:	21000104 	addi	r4,r4,4
  8087ec:	103ffc26 	beq	r2,zero,8087e0 <__alt_mem_onchip_mem+0xff8007e0>
  8087f0:	02bfff04 	movi	r10,-4
  8087f4:	024003c4 	movi	r9,15
  8087f8:	21800044 	addi	r6,r4,1
  8087fc:	318d883a 	add	r6,r6,r6
  808800:	318d883a 	add	r6,r6,r6
  808804:	318d883a 	add	r6,r6,r6
  808808:	998d883a 	add	r6,r19,r6
  80880c:	333ffe04 	addi	r12,r6,-8
  808810:	2017883a 	mov	r11,r4
  808814:	31800104 	addi	r6,r6,4
  808818:	34000017 	ldw	r16,0(r6)
  80881c:	31fffd04 	addi	r7,r6,-12
  808820:	81c0041e 	bne	r16,r7,808834 <_malloc_r+0x1dc>
  808824:	0000fb06 	br	808c14 <_malloc_r+0x5bc>
  808828:	1801030e 	bge	r3,zero,808c38 <_malloc_r+0x5e0>
  80882c:	84000317 	ldw	r16,12(r16)
  808830:	81c0f826 	beq	r16,r7,808c14 <_malloc_r+0x5bc>
  808834:	80800117 	ldw	r2,4(r16)
  808838:	1284703a 	and	r2,r2,r10
  80883c:	1447c83a 	sub	r3,r2,r17
  808840:	48fff90e 	bge	r9,r3,808828 <__alt_mem_onchip_mem+0xff800828>
  808844:	80800317 	ldw	r2,12(r16)
  808848:	81000217 	ldw	r4,8(r16)
  80884c:	89400054 	ori	r5,r17,1
  808850:	81400115 	stw	r5,4(r16)
  808854:	20800315 	stw	r2,12(r4)
  808858:	11000215 	stw	r4,8(r2)
  80885c:	8463883a 	add	r17,r16,r17
  808860:	9c400515 	stw	r17,20(r19)
  808864:	9c400415 	stw	r17,16(r19)
  808868:	18800054 	ori	r2,r3,1
  80886c:	88800115 	stw	r2,4(r17)
  808870:	8a000315 	stw	r8,12(r17)
  808874:	8a000215 	stw	r8,8(r17)
  808878:	88e3883a 	add	r17,r17,r3
  80887c:	88c00015 	stw	r3,0(r17)
  808880:	9009883a 	mov	r4,r18
  808884:	08137e80 	call	8137e8 <__malloc_unlock>
  808888:	80800204 	addi	r2,r16,8
  80888c:	00001b06 	br	8088fc <_malloc_r+0x2a4>
  808890:	04400404 	movi	r17,16
  808894:	89402536 	bltu	r17,r5,80892c <_malloc_r+0x2d4>
  808898:	08137c40 	call	8137c4 <__malloc_lock>
  80889c:	00800184 	movi	r2,6
  8088a0:	01000084 	movi	r4,2
  8088a4:	04c02074 	movhi	r19,129
  8088a8:	1085883a 	add	r2,r2,r2
  8088ac:	9cdf2c04 	addi	r19,r19,31920
  8088b0:	1085883a 	add	r2,r2,r2
  8088b4:	9885883a 	add	r2,r19,r2
  8088b8:	14000117 	ldw	r16,4(r2)
  8088bc:	10fffe04 	addi	r3,r2,-8
  8088c0:	80c0d926 	beq	r16,r3,808c28 <_malloc_r+0x5d0>
  8088c4:	80c00117 	ldw	r3,4(r16)
  8088c8:	81000317 	ldw	r4,12(r16)
  8088cc:	00bfff04 	movi	r2,-4
  8088d0:	1884703a 	and	r2,r3,r2
  8088d4:	81400217 	ldw	r5,8(r16)
  8088d8:	8085883a 	add	r2,r16,r2
  8088dc:	10c00117 	ldw	r3,4(r2)
  8088e0:	29000315 	stw	r4,12(r5)
  8088e4:	21400215 	stw	r5,8(r4)
  8088e8:	18c00054 	ori	r3,r3,1
  8088ec:	10c00115 	stw	r3,4(r2)
  8088f0:	9009883a 	mov	r4,r18
  8088f4:	08137e80 	call	8137e8 <__malloc_unlock>
  8088f8:	80800204 	addi	r2,r16,8
  8088fc:	dfc00a17 	ldw	ra,40(sp)
  808900:	df000917 	ldw	fp,36(sp)
  808904:	ddc00817 	ldw	r23,32(sp)
  808908:	dd800717 	ldw	r22,28(sp)
  80890c:	dd400617 	ldw	r21,24(sp)
  808910:	dd000517 	ldw	r20,20(sp)
  808914:	dcc00417 	ldw	r19,16(sp)
  808918:	dc800317 	ldw	r18,12(sp)
  80891c:	dc400217 	ldw	r17,8(sp)
  808920:	dc000117 	ldw	r16,4(sp)
  808924:	dec00b04 	addi	sp,sp,44
  808928:	f800283a 	ret
  80892c:	00800304 	movi	r2,12
  808930:	90800015 	stw	r2,0(r18)
  808934:	0005883a 	mov	r2,zero
  808938:	003ff006 	br	8088fc <__alt_mem_onchip_mem+0xff8008fc>
  80893c:	01002004 	movi	r4,128
  808940:	02001004 	movi	r8,64
  808944:	01c00fc4 	movi	r7,63
  808948:	003f6106 	br	8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  80894c:	4009883a 	mov	r4,r8
  808950:	003f7506 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  808954:	81000317 	ldw	r4,12(r16)
  808958:	003fde06 	br	8088d4 <__alt_mem_onchip_mem+0xff8008d4>
  80895c:	81c5883a 	add	r2,r16,r7
  808960:	11400117 	ldw	r5,4(r2)
  808964:	9009883a 	mov	r4,r18
  808968:	29400054 	ori	r5,r5,1
  80896c:	11400115 	stw	r5,4(r2)
  808970:	08137e80 	call	8137e8 <__malloc_unlock>
  808974:	80800204 	addi	r2,r16,8
  808978:	003fe006 	br	8088fc <__alt_mem_onchip_mem+0xff8008fc>
  80897c:	9c000217 	ldw	r16,8(r19)
  808980:	00bfff04 	movi	r2,-4
  808984:	85800117 	ldw	r22,4(r16)
  808988:	b0ac703a 	and	r22,r22,r2
  80898c:	b4400336 	bltu	r22,r17,80899c <_malloc_r+0x344>
  808990:	b445c83a 	sub	r2,r22,r17
  808994:	00c003c4 	movi	r3,15
  808998:	18805d16 	blt	r3,r2,808b10 <_malloc_r+0x4b8>
  80899c:	05c020b4 	movhi	r23,130
  8089a0:	008020b4 	movhi	r2,130
  8089a4:	10acb804 	addi	r2,r2,-19744
  8089a8:	bde55104 	addi	r23,r23,-27324
  8089ac:	15400017 	ldw	r21,0(r2)
  8089b0:	b8c00017 	ldw	r3,0(r23)
  8089b4:	00bfffc4 	movi	r2,-1
  8089b8:	858d883a 	add	r6,r16,r22
  8089bc:	8d6b883a 	add	r21,r17,r21
  8089c0:	1880ea26 	beq	r3,r2,808d6c <_malloc_r+0x714>
  8089c4:	ad4403c4 	addi	r21,r21,4111
  8089c8:	00bc0004 	movi	r2,-4096
  8089cc:	a8aa703a 	and	r21,r21,r2
  8089d0:	a80b883a 	mov	r5,r21
  8089d4:	9009883a 	mov	r4,r18
  8089d8:	d9800015 	stw	r6,0(sp)
  8089dc:	08094180 	call	809418 <_sbrk_r>
  8089e0:	1029883a 	mov	r20,r2
  8089e4:	00bfffc4 	movi	r2,-1
  8089e8:	d9800017 	ldw	r6,0(sp)
  8089ec:	a080e826 	beq	r20,r2,808d90 <_malloc_r+0x738>
  8089f0:	a180a636 	bltu	r20,r6,808c8c <_malloc_r+0x634>
  8089f4:	070020b4 	movhi	fp,130
  8089f8:	e72cc304 	addi	fp,fp,-19700
  8089fc:	e0800017 	ldw	r2,0(fp)
  808a00:	a887883a 	add	r3,r21,r2
  808a04:	e0c00015 	stw	r3,0(fp)
  808a08:	3500e626 	beq	r6,r20,808da4 <_malloc_r+0x74c>
  808a0c:	b9000017 	ldw	r4,0(r23)
  808a10:	00bfffc4 	movi	r2,-1
  808a14:	2080ee26 	beq	r4,r2,808dd0 <_malloc_r+0x778>
  808a18:	a185c83a 	sub	r2,r20,r6
  808a1c:	10c5883a 	add	r2,r2,r3
  808a20:	e0800015 	stw	r2,0(fp)
  808a24:	a0c001cc 	andi	r3,r20,7
  808a28:	1800bc26 	beq	r3,zero,808d1c <_malloc_r+0x6c4>
  808a2c:	a0e9c83a 	sub	r20,r20,r3
  808a30:	00840204 	movi	r2,4104
  808a34:	a5000204 	addi	r20,r20,8
  808a38:	10c7c83a 	sub	r3,r2,r3
  808a3c:	a545883a 	add	r2,r20,r21
  808a40:	1083ffcc 	andi	r2,r2,4095
  808a44:	18abc83a 	sub	r21,r3,r2
  808a48:	a80b883a 	mov	r5,r21
  808a4c:	9009883a 	mov	r4,r18
  808a50:	08094180 	call	809418 <_sbrk_r>
  808a54:	00ffffc4 	movi	r3,-1
  808a58:	10c0e126 	beq	r2,r3,808de0 <_malloc_r+0x788>
  808a5c:	1505c83a 	sub	r2,r2,r20
  808a60:	1545883a 	add	r2,r2,r21
  808a64:	10800054 	ori	r2,r2,1
  808a68:	e0c00017 	ldw	r3,0(fp)
  808a6c:	9d000215 	stw	r20,8(r19)
  808a70:	a0800115 	stw	r2,4(r20)
  808a74:	a8c7883a 	add	r3,r21,r3
  808a78:	e0c00015 	stw	r3,0(fp)
  808a7c:	84c00e26 	beq	r16,r19,808ab8 <_malloc_r+0x460>
  808a80:	018003c4 	movi	r6,15
  808a84:	3580a72e 	bgeu	r6,r22,808d24 <_malloc_r+0x6cc>
  808a88:	81400117 	ldw	r5,4(r16)
  808a8c:	013ffe04 	movi	r4,-8
  808a90:	b0bffd04 	addi	r2,r22,-12
  808a94:	1104703a 	and	r2,r2,r4
  808a98:	2900004c 	andi	r4,r5,1
  808a9c:	2088b03a 	or	r4,r4,r2
  808aa0:	81000115 	stw	r4,4(r16)
  808aa4:	01400144 	movi	r5,5
  808aa8:	8089883a 	add	r4,r16,r2
  808aac:	21400115 	stw	r5,4(r4)
  808ab0:	21400215 	stw	r5,8(r4)
  808ab4:	3080cd36 	bltu	r6,r2,808dec <_malloc_r+0x794>
  808ab8:	008020b4 	movhi	r2,130
  808abc:	10acb704 	addi	r2,r2,-19748
  808ac0:	11000017 	ldw	r4,0(r2)
  808ac4:	20c0012e 	bgeu	r4,r3,808acc <_malloc_r+0x474>
  808ac8:	10c00015 	stw	r3,0(r2)
  808acc:	008020b4 	movhi	r2,130
  808ad0:	10acb604 	addi	r2,r2,-19752
  808ad4:	11000017 	ldw	r4,0(r2)
  808ad8:	9c000217 	ldw	r16,8(r19)
  808adc:	20c0012e 	bgeu	r4,r3,808ae4 <_malloc_r+0x48c>
  808ae0:	10c00015 	stw	r3,0(r2)
  808ae4:	80c00117 	ldw	r3,4(r16)
  808ae8:	00bfff04 	movi	r2,-4
  808aec:	1886703a 	and	r3,r3,r2
  808af0:	1c45c83a 	sub	r2,r3,r17
  808af4:	1c400236 	bltu	r3,r17,808b00 <_malloc_r+0x4a8>
  808af8:	00c003c4 	movi	r3,15
  808afc:	18800416 	blt	r3,r2,808b10 <_malloc_r+0x4b8>
  808b00:	9009883a 	mov	r4,r18
  808b04:	08137e80 	call	8137e8 <__malloc_unlock>
  808b08:	0005883a 	mov	r2,zero
  808b0c:	003f7b06 	br	8088fc <__alt_mem_onchip_mem+0xff8008fc>
  808b10:	88c00054 	ori	r3,r17,1
  808b14:	80c00115 	stw	r3,4(r16)
  808b18:	8463883a 	add	r17,r16,r17
  808b1c:	10800054 	ori	r2,r2,1
  808b20:	9c400215 	stw	r17,8(r19)
  808b24:	88800115 	stw	r2,4(r17)
  808b28:	9009883a 	mov	r4,r18
  808b2c:	08137e80 	call	8137e8 <__malloc_unlock>
  808b30:	80800204 	addi	r2,r16,8
  808b34:	003f7106 	br	8088fc <__alt_mem_onchip_mem+0xff8008fc>
  808b38:	00c00504 	movi	r3,20
  808b3c:	18804a2e 	bgeu	r3,r2,808c68 <_malloc_r+0x610>
  808b40:	00c01504 	movi	r3,84
  808b44:	18806e36 	bltu	r3,r2,808d00 <_malloc_r+0x6a8>
  808b48:	8804d33a 	srli	r2,r17,12
  808b4c:	12001bc4 	addi	r8,r2,111
  808b50:	11c01b84 	addi	r7,r2,110
  808b54:	4209883a 	add	r4,r8,r8
  808b58:	003edd06 	br	8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808b5c:	3804d27a 	srli	r2,r7,9
  808b60:	00c00104 	movi	r3,4
  808b64:	1880442e 	bgeu	r3,r2,808c78 <_malloc_r+0x620>
  808b68:	00c00504 	movi	r3,20
  808b6c:	18808136 	bltu	r3,r2,808d74 <_malloc_r+0x71c>
  808b70:	11401704 	addi	r5,r2,92
  808b74:	10c016c4 	addi	r3,r2,91
  808b78:	294b883a 	add	r5,r5,r5
  808b7c:	294b883a 	add	r5,r5,r5
  808b80:	294b883a 	add	r5,r5,r5
  808b84:	994b883a 	add	r5,r19,r5
  808b88:	28800017 	ldw	r2,0(r5)
  808b8c:	01802074 	movhi	r6,129
  808b90:	297ffe04 	addi	r5,r5,-8
  808b94:	319f2c04 	addi	r6,r6,31920
  808b98:	28806526 	beq	r5,r2,808d30 <_malloc_r+0x6d8>
  808b9c:	01bfff04 	movi	r6,-4
  808ba0:	10c00117 	ldw	r3,4(r2)
  808ba4:	1986703a 	and	r3,r3,r6
  808ba8:	38c0022e 	bgeu	r7,r3,808bb4 <_malloc_r+0x55c>
  808bac:	10800217 	ldw	r2,8(r2)
  808bb0:	28bffb1e 	bne	r5,r2,808ba0 <__alt_mem_onchip_mem+0xff800ba0>
  808bb4:	11400317 	ldw	r5,12(r2)
  808bb8:	98c00117 	ldw	r3,4(r19)
  808bbc:	81400315 	stw	r5,12(r16)
  808bc0:	80800215 	stw	r2,8(r16)
  808bc4:	2c000215 	stw	r16,8(r5)
  808bc8:	14000315 	stw	r16,12(r2)
  808bcc:	003ef806 	br	8087b0 <__alt_mem_onchip_mem+0xff8007b0>
  808bd0:	88c00054 	ori	r3,r17,1
  808bd4:	80c00115 	stw	r3,4(r16)
  808bd8:	8463883a 	add	r17,r16,r17
  808bdc:	34400515 	stw	r17,20(r6)
  808be0:	34400415 	stw	r17,16(r6)
  808be4:	10c00054 	ori	r3,r2,1
  808be8:	8a000315 	stw	r8,12(r17)
  808bec:	8a000215 	stw	r8,8(r17)
  808bf0:	88c00115 	stw	r3,4(r17)
  808bf4:	88a3883a 	add	r17,r17,r2
  808bf8:	88800015 	stw	r2,0(r17)
  808bfc:	9009883a 	mov	r4,r18
  808c00:	08137e80 	call	8137e8 <__malloc_unlock>
  808c04:	80800204 	addi	r2,r16,8
  808c08:	003f3c06 	br	8088fc <__alt_mem_onchip_mem+0xff8008fc>
  808c0c:	30c00117 	ldw	r3,4(r6)
  808c10:	003ee706 	br	8087b0 <__alt_mem_onchip_mem+0xff8007b0>
  808c14:	5ac00044 	addi	r11,r11,1
  808c18:	588000cc 	andi	r2,r11,3
  808c1c:	31800204 	addi	r6,r6,8
  808c20:	103efd1e 	bne	r2,zero,808818 <__alt_mem_onchip_mem+0xff800818>
  808c24:	00002406 	br	808cb8 <_malloc_r+0x660>
  808c28:	14000317 	ldw	r16,12(r2)
  808c2c:	143f251e 	bne	r2,r16,8088c4 <__alt_mem_onchip_mem+0xff8008c4>
  808c30:	21000084 	addi	r4,r4,2
  808c34:	003ebc06 	br	808728 <__alt_mem_onchip_mem+0xff800728>
  808c38:	8085883a 	add	r2,r16,r2
  808c3c:	10c00117 	ldw	r3,4(r2)
  808c40:	81000317 	ldw	r4,12(r16)
  808c44:	81400217 	ldw	r5,8(r16)
  808c48:	18c00054 	ori	r3,r3,1
  808c4c:	10c00115 	stw	r3,4(r2)
  808c50:	29000315 	stw	r4,12(r5)
  808c54:	21400215 	stw	r5,8(r4)
  808c58:	9009883a 	mov	r4,r18
  808c5c:	08137e80 	call	8137e8 <__malloc_unlock>
  808c60:	80800204 	addi	r2,r16,8
  808c64:	003f2506 	br	8088fc <__alt_mem_onchip_mem+0xff8008fc>
  808c68:	12001704 	addi	r8,r2,92
  808c6c:	11c016c4 	addi	r7,r2,91
  808c70:	4209883a 	add	r4,r8,r8
  808c74:	003e9606 	br	8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808c78:	3804d1ba 	srli	r2,r7,6
  808c7c:	11400e44 	addi	r5,r2,57
  808c80:	10c00e04 	addi	r3,r2,56
  808c84:	294b883a 	add	r5,r5,r5
  808c88:	003fbc06 	br	808b7c <__alt_mem_onchip_mem+0xff800b7c>
  808c8c:	84ff5926 	beq	r16,r19,8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808c90:	00802074 	movhi	r2,129
  808c94:	109f2c04 	addi	r2,r2,31920
  808c98:	14000217 	ldw	r16,8(r2)
  808c9c:	00bfff04 	movi	r2,-4
  808ca0:	80c00117 	ldw	r3,4(r16)
  808ca4:	1886703a 	and	r3,r3,r2
  808ca8:	003f9106 	br	808af0 <__alt_mem_onchip_mem+0xff800af0>
  808cac:	60800217 	ldw	r2,8(r12)
  808cb0:	213fffc4 	addi	r4,r4,-1
  808cb4:	1300651e 	bne	r2,r12,808e4c <_malloc_r+0x7f4>
  808cb8:	208000cc 	andi	r2,r4,3
  808cbc:	633ffe04 	addi	r12,r12,-8
  808cc0:	103ffa1e 	bne	r2,zero,808cac <__alt_mem_onchip_mem+0xff800cac>
  808cc4:	98800117 	ldw	r2,4(r19)
  808cc8:	0146303a 	nor	r3,zero,r5
  808ccc:	1884703a 	and	r2,r3,r2
  808cd0:	98800115 	stw	r2,4(r19)
  808cd4:	294b883a 	add	r5,r5,r5
  808cd8:	117f2836 	bltu	r2,r5,80897c <__alt_mem_onchip_mem+0xff80097c>
  808cdc:	283f2726 	beq	r5,zero,80897c <__alt_mem_onchip_mem+0xff80097c>
  808ce0:	2886703a 	and	r3,r5,r2
  808ce4:	5809883a 	mov	r4,r11
  808ce8:	183ec31e 	bne	r3,zero,8087f8 <__alt_mem_onchip_mem+0xff8007f8>
  808cec:	294b883a 	add	r5,r5,r5
  808cf0:	2886703a 	and	r3,r5,r2
  808cf4:	21000104 	addi	r4,r4,4
  808cf8:	183ffc26 	beq	r3,zero,808cec <__alt_mem_onchip_mem+0xff800cec>
  808cfc:	003ebe06 	br	8087f8 <__alt_mem_onchip_mem+0xff8007f8>
  808d00:	00c05504 	movi	r3,340
  808d04:	18801236 	bltu	r3,r2,808d50 <_malloc_r+0x6f8>
  808d08:	8804d3fa 	srli	r2,r17,15
  808d0c:	12001e04 	addi	r8,r2,120
  808d10:	11c01dc4 	addi	r7,r2,119
  808d14:	4209883a 	add	r4,r8,r8
  808d18:	003e6d06 	br	8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808d1c:	00c40004 	movi	r3,4096
  808d20:	003f4606 	br	808a3c <__alt_mem_onchip_mem+0xff800a3c>
  808d24:	00800044 	movi	r2,1
  808d28:	a0800115 	stw	r2,4(r20)
  808d2c:	003f7406 	br	808b00 <__alt_mem_onchip_mem+0xff800b00>
  808d30:	1805d0ba 	srai	r2,r3,2
  808d34:	01c00044 	movi	r7,1
  808d38:	30c00117 	ldw	r3,4(r6)
  808d3c:	388e983a 	sll	r7,r7,r2
  808d40:	2805883a 	mov	r2,r5
  808d44:	38c6b03a 	or	r3,r7,r3
  808d48:	30c00115 	stw	r3,4(r6)
  808d4c:	003f9b06 	br	808bbc <__alt_mem_onchip_mem+0xff800bbc>
  808d50:	00c15504 	movi	r3,1364
  808d54:	18801a36 	bltu	r3,r2,808dc0 <_malloc_r+0x768>
  808d58:	8804d4ba 	srli	r2,r17,18
  808d5c:	12001f44 	addi	r8,r2,125
  808d60:	11c01f04 	addi	r7,r2,124
  808d64:	4209883a 	add	r4,r8,r8
  808d68:	003e5906 	br	8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808d6c:	ad400404 	addi	r21,r21,16
  808d70:	003f1706 	br	8089d0 <__alt_mem_onchip_mem+0xff8009d0>
  808d74:	00c01504 	movi	r3,84
  808d78:	18802336 	bltu	r3,r2,808e08 <_malloc_r+0x7b0>
  808d7c:	3804d33a 	srli	r2,r7,12
  808d80:	11401bc4 	addi	r5,r2,111
  808d84:	10c01b84 	addi	r3,r2,110
  808d88:	294b883a 	add	r5,r5,r5
  808d8c:	003f7b06 	br	808b7c <__alt_mem_onchip_mem+0xff800b7c>
  808d90:	9c000217 	ldw	r16,8(r19)
  808d94:	00bfff04 	movi	r2,-4
  808d98:	80c00117 	ldw	r3,4(r16)
  808d9c:	1886703a 	and	r3,r3,r2
  808da0:	003f5306 	br	808af0 <__alt_mem_onchip_mem+0xff800af0>
  808da4:	3083ffcc 	andi	r2,r6,4095
  808da8:	103f181e 	bne	r2,zero,808a0c <__alt_mem_onchip_mem+0xff800a0c>
  808dac:	99000217 	ldw	r4,8(r19)
  808db0:	b545883a 	add	r2,r22,r21
  808db4:	10800054 	ori	r2,r2,1
  808db8:	20800115 	stw	r2,4(r4)
  808dbc:	003f3e06 	br	808ab8 <__alt_mem_onchip_mem+0xff800ab8>
  808dc0:	01003f84 	movi	r4,254
  808dc4:	02001fc4 	movi	r8,127
  808dc8:	01c01f84 	movi	r7,126
  808dcc:	003e4006 	br	8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808dd0:	008020b4 	movhi	r2,130
  808dd4:	10a55104 	addi	r2,r2,-27324
  808dd8:	15000015 	stw	r20,0(r2)
  808ddc:	003f1106 	br	808a24 <__alt_mem_onchip_mem+0xff800a24>
  808de0:	00800044 	movi	r2,1
  808de4:	002b883a 	mov	r21,zero
  808de8:	003f1f06 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>
  808dec:	81400204 	addi	r5,r16,8
  808df0:	9009883a 	mov	r4,r18
  808df4:	0807b280 	call	807b28 <_free_r>
  808df8:	008020b4 	movhi	r2,130
  808dfc:	10acc304 	addi	r2,r2,-19700
  808e00:	10c00017 	ldw	r3,0(r2)
  808e04:	003f2c06 	br	808ab8 <__alt_mem_onchip_mem+0xff800ab8>
  808e08:	00c05504 	movi	r3,340
  808e0c:	18800536 	bltu	r3,r2,808e24 <_malloc_r+0x7cc>
  808e10:	3804d3fa 	srli	r2,r7,15
  808e14:	11401e04 	addi	r5,r2,120
  808e18:	10c01dc4 	addi	r3,r2,119
  808e1c:	294b883a 	add	r5,r5,r5
  808e20:	003f5606 	br	808b7c <__alt_mem_onchip_mem+0xff800b7c>
  808e24:	00c15504 	movi	r3,1364
  808e28:	18800536 	bltu	r3,r2,808e40 <_malloc_r+0x7e8>
  808e2c:	3804d4ba 	srli	r2,r7,18
  808e30:	11401f44 	addi	r5,r2,125
  808e34:	10c01f04 	addi	r3,r2,124
  808e38:	294b883a 	add	r5,r5,r5
  808e3c:	003f4f06 	br	808b7c <__alt_mem_onchip_mem+0xff800b7c>
  808e40:	01403f84 	movi	r5,254
  808e44:	00c01f84 	movi	r3,126
  808e48:	003f4c06 	br	808b7c <__alt_mem_onchip_mem+0xff800b7c>
  808e4c:	98800117 	ldw	r2,4(r19)
  808e50:	003fa006 	br	808cd4 <__alt_mem_onchip_mem+0xff800cd4>
  808e54:	8808d0fa 	srli	r4,r17,3
  808e58:	20800044 	addi	r2,r4,1
  808e5c:	1085883a 	add	r2,r2,r2
  808e60:	003e9006 	br	8088a4 <__alt_mem_onchip_mem+0xff8008a4>

00808e64 <memset>:
  808e64:	20c000cc 	andi	r3,r4,3
  808e68:	2005883a 	mov	r2,r4
  808e6c:	18004426 	beq	r3,zero,808f80 <memset+0x11c>
  808e70:	31ffffc4 	addi	r7,r6,-1
  808e74:	30004026 	beq	r6,zero,808f78 <memset+0x114>
  808e78:	2813883a 	mov	r9,r5
  808e7c:	200d883a 	mov	r6,r4
  808e80:	2007883a 	mov	r3,r4
  808e84:	00000406 	br	808e98 <memset+0x34>
  808e88:	3a3fffc4 	addi	r8,r7,-1
  808e8c:	31800044 	addi	r6,r6,1
  808e90:	38003926 	beq	r7,zero,808f78 <memset+0x114>
  808e94:	400f883a 	mov	r7,r8
  808e98:	18c00044 	addi	r3,r3,1
  808e9c:	32400005 	stb	r9,0(r6)
  808ea0:	1a0000cc 	andi	r8,r3,3
  808ea4:	403ff81e 	bne	r8,zero,808e88 <__alt_mem_onchip_mem+0xff800e88>
  808ea8:	010000c4 	movi	r4,3
  808eac:	21c02d2e 	bgeu	r4,r7,808f64 <memset+0x100>
  808eb0:	29003fcc 	andi	r4,r5,255
  808eb4:	200c923a 	slli	r6,r4,8
  808eb8:	3108b03a 	or	r4,r6,r4
  808ebc:	200c943a 	slli	r6,r4,16
  808ec0:	218cb03a 	or	r6,r4,r6
  808ec4:	010003c4 	movi	r4,15
  808ec8:	21c0182e 	bgeu	r4,r7,808f2c <memset+0xc8>
  808ecc:	3b3ffc04 	addi	r12,r7,-16
  808ed0:	6018d13a 	srli	r12,r12,4
  808ed4:	1a000104 	addi	r8,r3,4
  808ed8:	1ac00204 	addi	r11,r3,8
  808edc:	6008913a 	slli	r4,r12,4
  808ee0:	1a800304 	addi	r10,r3,12
  808ee4:	1813883a 	mov	r9,r3
  808ee8:	21000504 	addi	r4,r4,20
  808eec:	1909883a 	add	r4,r3,r4
  808ef0:	49800015 	stw	r6,0(r9)
  808ef4:	41800015 	stw	r6,0(r8)
  808ef8:	59800015 	stw	r6,0(r11)
  808efc:	51800015 	stw	r6,0(r10)
  808f00:	42000404 	addi	r8,r8,16
  808f04:	4a400404 	addi	r9,r9,16
  808f08:	5ac00404 	addi	r11,r11,16
  808f0c:	52800404 	addi	r10,r10,16
  808f10:	413ff71e 	bne	r8,r4,808ef0 <__alt_mem_onchip_mem+0xff800ef0>
  808f14:	63000044 	addi	r12,r12,1
  808f18:	6018913a 	slli	r12,r12,4
  808f1c:	39c003cc 	andi	r7,r7,15
  808f20:	010000c4 	movi	r4,3
  808f24:	1b07883a 	add	r3,r3,r12
  808f28:	21c00e2e 	bgeu	r4,r7,808f64 <memset+0x100>
  808f2c:	1813883a 	mov	r9,r3
  808f30:	3811883a 	mov	r8,r7
  808f34:	010000c4 	movi	r4,3
  808f38:	49800015 	stw	r6,0(r9)
  808f3c:	423fff04 	addi	r8,r8,-4
  808f40:	4a400104 	addi	r9,r9,4
  808f44:	223ffc36 	bltu	r4,r8,808f38 <__alt_mem_onchip_mem+0xff800f38>
  808f48:	393fff04 	addi	r4,r7,-4
  808f4c:	2008d0ba 	srli	r4,r4,2
  808f50:	39c000cc 	andi	r7,r7,3
  808f54:	21000044 	addi	r4,r4,1
  808f58:	2109883a 	add	r4,r4,r4
  808f5c:	2109883a 	add	r4,r4,r4
  808f60:	1907883a 	add	r3,r3,r4
  808f64:	38000526 	beq	r7,zero,808f7c <memset+0x118>
  808f68:	19cf883a 	add	r7,r3,r7
  808f6c:	19400005 	stb	r5,0(r3)
  808f70:	18c00044 	addi	r3,r3,1
  808f74:	38fffd1e 	bne	r7,r3,808f6c <__alt_mem_onchip_mem+0xff800f6c>
  808f78:	f800283a 	ret
  808f7c:	f800283a 	ret
  808f80:	2007883a 	mov	r3,r4
  808f84:	300f883a 	mov	r7,r6
  808f88:	003fc706 	br	808ea8 <__alt_mem_onchip_mem+0xff800ea8>

00808f8c <_open_r>:
  808f8c:	defffd04 	addi	sp,sp,-12
  808f90:	2805883a 	mov	r2,r5
  808f94:	dc000015 	stw	r16,0(sp)
  808f98:	040020b4 	movhi	r16,130
  808f9c:	dc400115 	stw	r17,4(sp)
  808fa0:	300b883a 	mov	r5,r6
  808fa4:	842cb504 	addi	r16,r16,-19756
  808fa8:	2023883a 	mov	r17,r4
  808fac:	380d883a 	mov	r6,r7
  808fb0:	1009883a 	mov	r4,r2
  808fb4:	dfc00215 	stw	ra,8(sp)
  808fb8:	80000015 	stw	zero,0(r16)
  808fbc:	081390c0 	call	81390c <open>
  808fc0:	00ffffc4 	movi	r3,-1
  808fc4:	10c00526 	beq	r2,r3,808fdc <_open_r+0x50>
  808fc8:	dfc00217 	ldw	ra,8(sp)
  808fcc:	dc400117 	ldw	r17,4(sp)
  808fd0:	dc000017 	ldw	r16,0(sp)
  808fd4:	dec00304 	addi	sp,sp,12
  808fd8:	f800283a 	ret
  808fdc:	80c00017 	ldw	r3,0(r16)
  808fe0:	183ff926 	beq	r3,zero,808fc8 <__alt_mem_onchip_mem+0xff800fc8>
  808fe4:	88c00015 	stw	r3,0(r17)
  808fe8:	003ff706 	br	808fc8 <__alt_mem_onchip_mem+0xff800fc8>

00808fec <_putc_r>:
  808fec:	defffc04 	addi	sp,sp,-16
  808ff0:	dc000215 	stw	r16,8(sp)
  808ff4:	dfc00315 	stw	ra,12(sp)
  808ff8:	2021883a 	mov	r16,r4
  808ffc:	20000226 	beq	r4,zero,809008 <_putc_r+0x1c>
  809000:	20800e17 	ldw	r2,56(r4)
  809004:	10001b26 	beq	r2,zero,809074 <_putc_r+0x88>
  809008:	30800217 	ldw	r2,8(r6)
  80900c:	10bfffc4 	addi	r2,r2,-1
  809010:	30800215 	stw	r2,8(r6)
  809014:	10000a16 	blt	r2,zero,809040 <_putc_r+0x54>
  809018:	30800017 	ldw	r2,0(r6)
  80901c:	11400005 	stb	r5,0(r2)
  809020:	30800017 	ldw	r2,0(r6)
  809024:	10c00044 	addi	r3,r2,1
  809028:	30c00015 	stw	r3,0(r6)
  80902c:	10800003 	ldbu	r2,0(r2)
  809030:	dfc00317 	ldw	ra,12(sp)
  809034:	dc000217 	ldw	r16,8(sp)
  809038:	dec00404 	addi	sp,sp,16
  80903c:	f800283a 	ret
  809040:	30c00617 	ldw	r3,24(r6)
  809044:	10c00616 	blt	r2,r3,809060 <_putc_r+0x74>
  809048:	30800017 	ldw	r2,0(r6)
  80904c:	00c00284 	movi	r3,10
  809050:	11400005 	stb	r5,0(r2)
  809054:	30800017 	ldw	r2,0(r6)
  809058:	11400003 	ldbu	r5,0(r2)
  80905c:	28fff11e 	bne	r5,r3,809024 <__alt_mem_onchip_mem+0xff801024>
  809060:	8009883a 	mov	r4,r16
  809064:	dfc00317 	ldw	ra,12(sp)
  809068:	dc000217 	ldw	r16,8(sp)
  80906c:	dec00404 	addi	sp,sp,16
  809070:	080b9141 	jmpi	80b914 <__swbuf_r>
  809074:	d9400015 	stw	r5,0(sp)
  809078:	d9800115 	stw	r6,4(sp)
  80907c:	08077bc0 	call	8077bc <__sinit>
  809080:	d9800117 	ldw	r6,4(sp)
  809084:	d9400017 	ldw	r5,0(sp)
  809088:	003fdf06 	br	809008 <__alt_mem_onchip_mem+0xff801008>

0080908c <putc>:
  80908c:	008020b4 	movhi	r2,130
  809090:	defffc04 	addi	sp,sp,-16
  809094:	10a55004 	addi	r2,r2,-27328
  809098:	dc000115 	stw	r16,4(sp)
  80909c:	14000017 	ldw	r16,0(r2)
  8090a0:	dc400215 	stw	r17,8(sp)
  8090a4:	dfc00315 	stw	ra,12(sp)
  8090a8:	2023883a 	mov	r17,r4
  8090ac:	80000226 	beq	r16,zero,8090b8 <putc+0x2c>
  8090b0:	80800e17 	ldw	r2,56(r16)
  8090b4:	10001a26 	beq	r2,zero,809120 <putc+0x94>
  8090b8:	28800217 	ldw	r2,8(r5)
  8090bc:	10bfffc4 	addi	r2,r2,-1
  8090c0:	28800215 	stw	r2,8(r5)
  8090c4:	10000b16 	blt	r2,zero,8090f4 <putc+0x68>
  8090c8:	28800017 	ldw	r2,0(r5)
  8090cc:	14400005 	stb	r17,0(r2)
  8090d0:	28800017 	ldw	r2,0(r5)
  8090d4:	10c00044 	addi	r3,r2,1
  8090d8:	28c00015 	stw	r3,0(r5)
  8090dc:	10800003 	ldbu	r2,0(r2)
  8090e0:	dfc00317 	ldw	ra,12(sp)
  8090e4:	dc400217 	ldw	r17,8(sp)
  8090e8:	dc000117 	ldw	r16,4(sp)
  8090ec:	dec00404 	addi	sp,sp,16
  8090f0:	f800283a 	ret
  8090f4:	28c00617 	ldw	r3,24(r5)
  8090f8:	10c00e16 	blt	r2,r3,809134 <putc+0xa8>
  8090fc:	28800017 	ldw	r2,0(r5)
  809100:	01000284 	movi	r4,10
  809104:	14400005 	stb	r17,0(r2)
  809108:	28800017 	ldw	r2,0(r5)
  80910c:	10c00003 	ldbu	r3,0(r2)
  809110:	193ff01e 	bne	r3,r4,8090d4 <__alt_mem_onchip_mem+0xff8010d4>
  809114:	280d883a 	mov	r6,r5
  809118:	180b883a 	mov	r5,r3
  80911c:	00000706 	br	80913c <putc+0xb0>
  809120:	8009883a 	mov	r4,r16
  809124:	d9400015 	stw	r5,0(sp)
  809128:	08077bc0 	call	8077bc <__sinit>
  80912c:	d9400017 	ldw	r5,0(sp)
  809130:	003fe106 	br	8090b8 <__alt_mem_onchip_mem+0xff8010b8>
  809134:	280d883a 	mov	r6,r5
  809138:	880b883a 	mov	r5,r17
  80913c:	8009883a 	mov	r4,r16
  809140:	dfc00317 	ldw	ra,12(sp)
  809144:	dc400217 	ldw	r17,8(sp)
  809148:	dc000117 	ldw	r16,4(sp)
  80914c:	dec00404 	addi	sp,sp,16
  809150:	080b9141 	jmpi	80b914 <__swbuf_r>

00809154 <_puts_r>:
  809154:	defff604 	addi	sp,sp,-40
  809158:	dc000715 	stw	r16,28(sp)
  80915c:	2021883a 	mov	r16,r4
  809160:	2809883a 	mov	r4,r5
  809164:	dc400815 	stw	r17,32(sp)
  809168:	dfc00915 	stw	ra,36(sp)
  80916c:	2823883a 	mov	r17,r5
  809170:	08095a80 	call	8095a8 <strlen>
  809174:	10c00044 	addi	r3,r2,1
  809178:	d8800115 	stw	r2,4(sp)
  80917c:	00802074 	movhi	r2,129
  809180:	109d0004 	addi	r2,r2,29696
  809184:	d8800215 	stw	r2,8(sp)
  809188:	00800044 	movi	r2,1
  80918c:	d8800315 	stw	r2,12(sp)
  809190:	00800084 	movi	r2,2
  809194:	dc400015 	stw	r17,0(sp)
  809198:	d8c00615 	stw	r3,24(sp)
  80919c:	dec00415 	stw	sp,16(sp)
  8091a0:	d8800515 	stw	r2,20(sp)
  8091a4:	80000226 	beq	r16,zero,8091b0 <_puts_r+0x5c>
  8091a8:	80800e17 	ldw	r2,56(r16)
  8091ac:	10001426 	beq	r2,zero,809200 <_puts_r+0xac>
  8091b0:	81400217 	ldw	r5,8(r16)
  8091b4:	2880030b 	ldhu	r2,12(r5)
  8091b8:	10c8000c 	andi	r3,r2,8192
  8091bc:	1800061e 	bne	r3,zero,8091d8 <_puts_r+0x84>
  8091c0:	29001917 	ldw	r4,100(r5)
  8091c4:	00f7ffc4 	movi	r3,-8193
  8091c8:	10880014 	ori	r2,r2,8192
  8091cc:	20c6703a 	and	r3,r4,r3
  8091d0:	2880030d 	sth	r2,12(r5)
  8091d4:	28c01915 	stw	r3,100(r5)
  8091d8:	d9800404 	addi	r6,sp,16
  8091dc:	8009883a 	mov	r4,r16
  8091e0:	080d5a80 	call	80d5a8 <__sfvwrite_r>
  8091e4:	1000091e 	bne	r2,zero,80920c <_puts_r+0xb8>
  8091e8:	00800284 	movi	r2,10
  8091ec:	dfc00917 	ldw	ra,36(sp)
  8091f0:	dc400817 	ldw	r17,32(sp)
  8091f4:	dc000717 	ldw	r16,28(sp)
  8091f8:	dec00a04 	addi	sp,sp,40
  8091fc:	f800283a 	ret
  809200:	8009883a 	mov	r4,r16
  809204:	08077bc0 	call	8077bc <__sinit>
  809208:	003fe906 	br	8091b0 <__alt_mem_onchip_mem+0xff8011b0>
  80920c:	00bfffc4 	movi	r2,-1
  809210:	003ff606 	br	8091ec <__alt_mem_onchip_mem+0xff8011ec>

00809214 <puts>:
  809214:	008020b4 	movhi	r2,130
  809218:	10a55004 	addi	r2,r2,-27328
  80921c:	200b883a 	mov	r5,r4
  809220:	11000017 	ldw	r4,0(r2)
  809224:	08091541 	jmpi	809154 <_puts_r>

00809228 <lflush>:
  809228:	2080030b 	ldhu	r2,12(r4)
  80922c:	00c00244 	movi	r3,9
  809230:	1080024c 	andi	r2,r2,9
  809234:	10c00226 	beq	r2,r3,809240 <lflush+0x18>
  809238:	0005883a 	mov	r2,zero
  80923c:	f800283a 	ret
  809240:	080743c1 	jmpi	80743c <fflush>

00809244 <__srefill_r>:
  809244:	defffc04 	addi	sp,sp,-16
  809248:	dc400115 	stw	r17,4(sp)
  80924c:	dc000015 	stw	r16,0(sp)
  809250:	dfc00315 	stw	ra,12(sp)
  809254:	dc800215 	stw	r18,8(sp)
  809258:	2023883a 	mov	r17,r4
  80925c:	2821883a 	mov	r16,r5
  809260:	20000226 	beq	r4,zero,80926c <__srefill_r+0x28>
  809264:	20800e17 	ldw	r2,56(r4)
  809268:	10003c26 	beq	r2,zero,80935c <__srefill_r+0x118>
  80926c:	80c0030b 	ldhu	r3,12(r16)
  809270:	1908000c 	andi	r4,r3,8192
  809274:	1805883a 	mov	r2,r3
  809278:	2000071e 	bne	r4,zero,809298 <__srefill_r+0x54>
  80927c:	81001917 	ldw	r4,100(r16)
  809280:	18880014 	ori	r2,r3,8192
  809284:	00f7ffc4 	movi	r3,-8193
  809288:	20c8703a 	and	r4,r4,r3
  80928c:	8080030d 	sth	r2,12(r16)
  809290:	1007883a 	mov	r3,r2
  809294:	81001915 	stw	r4,100(r16)
  809298:	80000115 	stw	zero,4(r16)
  80929c:	1100080c 	andi	r4,r2,32
  8092a0:	2000571e 	bne	r4,zero,809400 <__srefill_r+0x1bc>
  8092a4:	1100010c 	andi	r4,r2,4
  8092a8:	20001f26 	beq	r4,zero,809328 <__srefill_r+0xe4>
  8092ac:	81400c17 	ldw	r5,48(r16)
  8092b0:	28000826 	beq	r5,zero,8092d4 <__srefill_r+0x90>
  8092b4:	80801004 	addi	r2,r16,64
  8092b8:	28800226 	beq	r5,r2,8092c4 <__srefill_r+0x80>
  8092bc:	8809883a 	mov	r4,r17
  8092c0:	0807b280 	call	807b28 <_free_r>
  8092c4:	80800f17 	ldw	r2,60(r16)
  8092c8:	80000c15 	stw	zero,48(r16)
  8092cc:	80800115 	stw	r2,4(r16)
  8092d0:	1000391e 	bne	r2,zero,8093b8 <__srefill_r+0x174>
  8092d4:	80800417 	ldw	r2,16(r16)
  8092d8:	10004b26 	beq	r2,zero,809408 <__srefill_r+0x1c4>
  8092dc:	8480030b 	ldhu	r18,12(r16)
  8092e0:	908000cc 	andi	r2,r18,3
  8092e4:	10001f1e 	bne	r2,zero,809364 <__srefill_r+0x120>
  8092e8:	81800417 	ldw	r6,16(r16)
  8092ec:	80800817 	ldw	r2,32(r16)
  8092f0:	81c00517 	ldw	r7,20(r16)
  8092f4:	81400717 	ldw	r5,28(r16)
  8092f8:	81800015 	stw	r6,0(r16)
  8092fc:	8809883a 	mov	r4,r17
  809300:	103ee83a 	callr	r2
  809304:	80800115 	stw	r2,4(r16)
  809308:	00800e0e 	bge	zero,r2,809344 <__srefill_r+0x100>
  80930c:	0005883a 	mov	r2,zero
  809310:	dfc00317 	ldw	ra,12(sp)
  809314:	dc800217 	ldw	r18,8(sp)
  809318:	dc400117 	ldw	r17,4(sp)
  80931c:	dc000017 	ldw	r16,0(sp)
  809320:	dec00404 	addi	sp,sp,16
  809324:	f800283a 	ret
  809328:	1100040c 	andi	r4,r2,16
  80932c:	20003026 	beq	r4,zero,8093f0 <__srefill_r+0x1ac>
  809330:	1080020c 	andi	r2,r2,8
  809334:	1000241e 	bne	r2,zero,8093c8 <__srefill_r+0x184>
  809338:	18c00114 	ori	r3,r3,4
  80933c:	80c0030d 	sth	r3,12(r16)
  809340:	003fe406 	br	8092d4 <__alt_mem_onchip_mem+0xff8012d4>
  809344:	80c0030b 	ldhu	r3,12(r16)
  809348:	1000161e 	bne	r2,zero,8093a4 <__srefill_r+0x160>
  80934c:	18c00814 	ori	r3,r3,32
  809350:	00bfffc4 	movi	r2,-1
  809354:	80c0030d 	sth	r3,12(r16)
  809358:	003fed06 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  80935c:	08077bc0 	call	8077bc <__sinit>
  809360:	003fc206 	br	80926c <__alt_mem_onchip_mem+0xff80126c>
  809364:	008020b4 	movhi	r2,130
  809368:	10a54f04 	addi	r2,r2,-27332
  80936c:	11000017 	ldw	r4,0(r2)
  809370:	01402074 	movhi	r5,129
  809374:	00800044 	movi	r2,1
  809378:	29648a04 	addi	r5,r5,-28120
  80937c:	8080030d 	sth	r2,12(r16)
  809380:	08083140 	call	808314 <_fwalk>
  809384:	00800244 	movi	r2,9
  809388:	8480030d 	sth	r18,12(r16)
  80938c:	9480024c 	andi	r18,r18,9
  809390:	90bfd51e 	bne	r18,r2,8092e8 <__alt_mem_onchip_mem+0xff8012e8>
  809394:	800b883a 	mov	r5,r16
  809398:	8809883a 	mov	r4,r17
  80939c:	08071c40 	call	8071c4 <__sflush_r>
  8093a0:	003fd106 	br	8092e8 <__alt_mem_onchip_mem+0xff8012e8>
  8093a4:	18c01014 	ori	r3,r3,64
  8093a8:	80000115 	stw	zero,4(r16)
  8093ac:	00bfffc4 	movi	r2,-1
  8093b0:	80c0030d 	sth	r3,12(r16)
  8093b4:	003fd606 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  8093b8:	80c00e17 	ldw	r3,56(r16)
  8093bc:	0005883a 	mov	r2,zero
  8093c0:	80c00015 	stw	r3,0(r16)
  8093c4:	003fd206 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  8093c8:	800b883a 	mov	r5,r16
  8093cc:	8809883a 	mov	r4,r17
  8093d0:	08073e00 	call	8073e0 <_fflush_r>
  8093d4:	10000a1e 	bne	r2,zero,809400 <__srefill_r+0x1bc>
  8093d8:	8080030b 	ldhu	r2,12(r16)
  8093dc:	00fffdc4 	movi	r3,-9
  8093e0:	80000215 	stw	zero,8(r16)
  8093e4:	1886703a 	and	r3,r3,r2
  8093e8:	80000615 	stw	zero,24(r16)
  8093ec:	003fd206 	br	809338 <__alt_mem_onchip_mem+0xff801338>
  8093f0:	00800244 	movi	r2,9
  8093f4:	88800015 	stw	r2,0(r17)
  8093f8:	18c01014 	ori	r3,r3,64
  8093fc:	80c0030d 	sth	r3,12(r16)
  809400:	00bfffc4 	movi	r2,-1
  809404:	003fc206 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  809408:	800b883a 	mov	r5,r16
  80940c:	8809883a 	mov	r4,r17
  809410:	080849c0 	call	80849c <__smakebuf_r>
  809414:	003fb106 	br	8092dc <__alt_mem_onchip_mem+0xff8012dc>

00809418 <_sbrk_r>:
  809418:	defffd04 	addi	sp,sp,-12
  80941c:	dc000015 	stw	r16,0(sp)
  809420:	040020b4 	movhi	r16,130
  809424:	dc400115 	stw	r17,4(sp)
  809428:	842cb504 	addi	r16,r16,-19756
  80942c:	2023883a 	mov	r17,r4
  809430:	2809883a 	mov	r4,r5
  809434:	dfc00215 	stw	ra,8(sp)
  809438:	80000015 	stw	zero,0(r16)
  80943c:	0813bfc0 	call	813bfc <sbrk>
  809440:	00ffffc4 	movi	r3,-1
  809444:	10c00526 	beq	r2,r3,80945c <_sbrk_r+0x44>
  809448:	dfc00217 	ldw	ra,8(sp)
  80944c:	dc400117 	ldw	r17,4(sp)
  809450:	dc000017 	ldw	r16,0(sp)
  809454:	dec00304 	addi	sp,sp,12
  809458:	f800283a 	ret
  80945c:	80c00017 	ldw	r3,0(r16)
  809460:	183ff926 	beq	r3,zero,809448 <__alt_mem_onchip_mem+0xff801448>
  809464:	88c00015 	stw	r3,0(r17)
  809468:	003ff706 	br	809448 <__alt_mem_onchip_mem+0xff801448>

0080946c <__sread>:
  80946c:	defffe04 	addi	sp,sp,-8
  809470:	dc000015 	stw	r16,0(sp)
  809474:	2821883a 	mov	r16,r5
  809478:	2940038f 	ldh	r5,14(r5)
  80947c:	dfc00115 	stw	ra,4(sp)
  809480:	080ef780 	call	80ef78 <_read_r>
  809484:	10000716 	blt	r2,zero,8094a4 <__sread+0x38>
  809488:	80c01417 	ldw	r3,80(r16)
  80948c:	1887883a 	add	r3,r3,r2
  809490:	80c01415 	stw	r3,80(r16)
  809494:	dfc00117 	ldw	ra,4(sp)
  809498:	dc000017 	ldw	r16,0(sp)
  80949c:	dec00204 	addi	sp,sp,8
  8094a0:	f800283a 	ret
  8094a4:	80c0030b 	ldhu	r3,12(r16)
  8094a8:	18fbffcc 	andi	r3,r3,61439
  8094ac:	80c0030d 	sth	r3,12(r16)
  8094b0:	dfc00117 	ldw	ra,4(sp)
  8094b4:	dc000017 	ldw	r16,0(sp)
  8094b8:	dec00204 	addi	sp,sp,8
  8094bc:	f800283a 	ret

008094c0 <__seofread>:
  8094c0:	0005883a 	mov	r2,zero
  8094c4:	f800283a 	ret

008094c8 <__swrite>:
  8094c8:	2880030b 	ldhu	r2,12(r5)
  8094cc:	defffb04 	addi	sp,sp,-20
  8094d0:	dcc00315 	stw	r19,12(sp)
  8094d4:	dc800215 	stw	r18,8(sp)
  8094d8:	dc400115 	stw	r17,4(sp)
  8094dc:	dc000015 	stw	r16,0(sp)
  8094e0:	dfc00415 	stw	ra,16(sp)
  8094e4:	10c0400c 	andi	r3,r2,256
  8094e8:	2821883a 	mov	r16,r5
  8094ec:	2023883a 	mov	r17,r4
  8094f0:	3025883a 	mov	r18,r6
  8094f4:	3827883a 	mov	r19,r7
  8094f8:	18000526 	beq	r3,zero,809510 <__swrite+0x48>
  8094fc:	2940038f 	ldh	r5,14(r5)
  809500:	01c00084 	movi	r7,2
  809504:	000d883a 	mov	r6,zero
  809508:	080db940 	call	80db94 <_lseek_r>
  80950c:	8080030b 	ldhu	r2,12(r16)
  809510:	8140038f 	ldh	r5,14(r16)
  809514:	10bbffcc 	andi	r2,r2,61439
  809518:	980f883a 	mov	r7,r19
  80951c:	900d883a 	mov	r6,r18
  809520:	8809883a 	mov	r4,r17
  809524:	8080030d 	sth	r2,12(r16)
  809528:	dfc00417 	ldw	ra,16(sp)
  80952c:	dcc00317 	ldw	r19,12(sp)
  809530:	dc800217 	ldw	r18,8(sp)
  809534:	dc400117 	ldw	r17,4(sp)
  809538:	dc000017 	ldw	r16,0(sp)
  80953c:	dec00504 	addi	sp,sp,20
  809540:	080ba6c1 	jmpi	80ba6c <_write_r>

00809544 <__sseek>:
  809544:	defffe04 	addi	sp,sp,-8
  809548:	dc000015 	stw	r16,0(sp)
  80954c:	2821883a 	mov	r16,r5
  809550:	2940038f 	ldh	r5,14(r5)
  809554:	dfc00115 	stw	ra,4(sp)
  809558:	080db940 	call	80db94 <_lseek_r>
  80955c:	00ffffc4 	movi	r3,-1
  809560:	10c00826 	beq	r2,r3,809584 <__sseek+0x40>
  809564:	80c0030b 	ldhu	r3,12(r16)
  809568:	80801415 	stw	r2,80(r16)
  80956c:	18c40014 	ori	r3,r3,4096
  809570:	80c0030d 	sth	r3,12(r16)
  809574:	dfc00117 	ldw	ra,4(sp)
  809578:	dc000017 	ldw	r16,0(sp)
  80957c:	dec00204 	addi	sp,sp,8
  809580:	f800283a 	ret
  809584:	80c0030b 	ldhu	r3,12(r16)
  809588:	18fbffcc 	andi	r3,r3,61439
  80958c:	80c0030d 	sth	r3,12(r16)
  809590:	dfc00117 	ldw	ra,4(sp)
  809594:	dc000017 	ldw	r16,0(sp)
  809598:	dec00204 	addi	sp,sp,8
  80959c:	f800283a 	ret

008095a0 <__sclose>:
  8095a0:	2940038f 	ldh	r5,14(r5)
  8095a4:	080bc201 	jmpi	80bc20 <_close_r>

008095a8 <strlen>:
  8095a8:	208000cc 	andi	r2,r4,3
  8095ac:	10002026 	beq	r2,zero,809630 <strlen+0x88>
  8095b0:	20800007 	ldb	r2,0(r4)
  8095b4:	10002026 	beq	r2,zero,809638 <strlen+0x90>
  8095b8:	2005883a 	mov	r2,r4
  8095bc:	00000206 	br	8095c8 <strlen+0x20>
  8095c0:	10c00007 	ldb	r3,0(r2)
  8095c4:	18001826 	beq	r3,zero,809628 <strlen+0x80>
  8095c8:	10800044 	addi	r2,r2,1
  8095cc:	10c000cc 	andi	r3,r2,3
  8095d0:	183ffb1e 	bne	r3,zero,8095c0 <__alt_mem_onchip_mem+0xff8015c0>
  8095d4:	10c00017 	ldw	r3,0(r2)
  8095d8:	01ffbff4 	movhi	r7,65279
  8095dc:	39ffbfc4 	addi	r7,r7,-257
  8095e0:	00ca303a 	nor	r5,zero,r3
  8095e4:	01a02074 	movhi	r6,32897
  8095e8:	19c7883a 	add	r3,r3,r7
  8095ec:	31a02004 	addi	r6,r6,-32640
  8095f0:	1946703a 	and	r3,r3,r5
  8095f4:	1986703a 	and	r3,r3,r6
  8095f8:	1800091e 	bne	r3,zero,809620 <strlen+0x78>
  8095fc:	10800104 	addi	r2,r2,4
  809600:	10c00017 	ldw	r3,0(r2)
  809604:	19cb883a 	add	r5,r3,r7
  809608:	00c6303a 	nor	r3,zero,r3
  80960c:	28c6703a 	and	r3,r5,r3
  809610:	1986703a 	and	r3,r3,r6
  809614:	183ff926 	beq	r3,zero,8095fc <__alt_mem_onchip_mem+0xff8015fc>
  809618:	00000106 	br	809620 <strlen+0x78>
  80961c:	10800044 	addi	r2,r2,1
  809620:	10c00007 	ldb	r3,0(r2)
  809624:	183ffd1e 	bne	r3,zero,80961c <__alt_mem_onchip_mem+0xff80161c>
  809628:	1105c83a 	sub	r2,r2,r4
  80962c:	f800283a 	ret
  809630:	2005883a 	mov	r2,r4
  809634:	003fe706 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
  809638:	0005883a 	mov	r2,zero
  80963c:	f800283a 	ret

00809640 <___vfprintf_internal_r>:
  809640:	deffb804 	addi	sp,sp,-288
  809644:	dfc04715 	stw	ra,284(sp)
  809648:	ddc04515 	stw	r23,276(sp)
  80964c:	dd404315 	stw	r21,268(sp)
  809650:	d9002c15 	stw	r4,176(sp)
  809654:	282f883a 	mov	r23,r5
  809658:	302b883a 	mov	r21,r6
  80965c:	d9c02d15 	stw	r7,180(sp)
  809660:	df004615 	stw	fp,280(sp)
  809664:	dd804415 	stw	r22,272(sp)
  809668:	dd004215 	stw	r20,264(sp)
  80966c:	dcc04115 	stw	r19,260(sp)
  809670:	dc804015 	stw	r18,256(sp)
  809674:	dc403f15 	stw	r17,252(sp)
  809678:	dc003e15 	stw	r16,248(sp)
  80967c:	080db640 	call	80db64 <_localeconv_r>
  809680:	10800017 	ldw	r2,0(r2)
  809684:	1009883a 	mov	r4,r2
  809688:	d8803415 	stw	r2,208(sp)
  80968c:	08095a80 	call	8095a8 <strlen>
  809690:	d8803715 	stw	r2,220(sp)
  809694:	d8802c17 	ldw	r2,176(sp)
  809698:	10000226 	beq	r2,zero,8096a4 <___vfprintf_internal_r+0x64>
  80969c:	10800e17 	ldw	r2,56(r2)
  8096a0:	1000f926 	beq	r2,zero,809a88 <___vfprintf_internal_r+0x448>
  8096a4:	b880030b 	ldhu	r2,12(r23)
  8096a8:	10c8000c 	andi	r3,r2,8192
  8096ac:	1800061e 	bne	r3,zero,8096c8 <___vfprintf_internal_r+0x88>
  8096b0:	b9001917 	ldw	r4,100(r23)
  8096b4:	00f7ffc4 	movi	r3,-8193
  8096b8:	10880014 	ori	r2,r2,8192
  8096bc:	20c6703a 	and	r3,r4,r3
  8096c0:	b880030d 	sth	r2,12(r23)
  8096c4:	b8c01915 	stw	r3,100(r23)
  8096c8:	10c0020c 	andi	r3,r2,8
  8096cc:	1800c126 	beq	r3,zero,8099d4 <___vfprintf_internal_r+0x394>
  8096d0:	b8c00417 	ldw	r3,16(r23)
  8096d4:	1800bf26 	beq	r3,zero,8099d4 <___vfprintf_internal_r+0x394>
  8096d8:	1080068c 	andi	r2,r2,26
  8096dc:	00c00284 	movi	r3,10
  8096e0:	10c0c426 	beq	r2,r3,8099f4 <___vfprintf_internal_r+0x3b4>
  8096e4:	d8c00404 	addi	r3,sp,16
  8096e8:	05002074 	movhi	r20,129
  8096ec:	d9001e04 	addi	r4,sp,120
  8096f0:	a51d1184 	addi	r20,r20,29766
  8096f4:	d8c01e15 	stw	r3,120(sp)
  8096f8:	d8002015 	stw	zero,128(sp)
  8096fc:	d8001f15 	stw	zero,124(sp)
  809700:	d8003315 	stw	zero,204(sp)
  809704:	d8003615 	stw	zero,216(sp)
  809708:	d8003815 	stw	zero,224(sp)
  80970c:	1811883a 	mov	r8,r3
  809710:	d8003915 	stw	zero,228(sp)
  809714:	d8003a15 	stw	zero,232(sp)
  809718:	d8002f15 	stw	zero,188(sp)
  80971c:	d9002815 	stw	r4,160(sp)
  809720:	a8800007 	ldb	r2,0(r21)
  809724:	10027b26 	beq	r2,zero,80a114 <___vfprintf_internal_r+0xad4>
  809728:	00c00944 	movi	r3,37
  80972c:	a821883a 	mov	r16,r21
  809730:	10c0021e 	bne	r2,r3,80973c <___vfprintf_internal_r+0xfc>
  809734:	00001406 	br	809788 <___vfprintf_internal_r+0x148>
  809738:	10c00326 	beq	r2,r3,809748 <___vfprintf_internal_r+0x108>
  80973c:	84000044 	addi	r16,r16,1
  809740:	80800007 	ldb	r2,0(r16)
  809744:	103ffc1e 	bne	r2,zero,809738 <__alt_mem_onchip_mem+0xff801738>
  809748:	8563c83a 	sub	r17,r16,r21
  80974c:	88000e26 	beq	r17,zero,809788 <___vfprintf_internal_r+0x148>
  809750:	d8c02017 	ldw	r3,128(sp)
  809754:	d8801f17 	ldw	r2,124(sp)
  809758:	45400015 	stw	r21,0(r8)
  80975c:	1c47883a 	add	r3,r3,r17
  809760:	10800044 	addi	r2,r2,1
  809764:	d8c02015 	stw	r3,128(sp)
  809768:	44400115 	stw	r17,4(r8)
  80976c:	d8801f15 	stw	r2,124(sp)
  809770:	00c001c4 	movi	r3,7
  809774:	1880a716 	blt	r3,r2,809a14 <___vfprintf_internal_r+0x3d4>
  809778:	42000204 	addi	r8,r8,8
  80977c:	d9402f17 	ldw	r5,188(sp)
  809780:	2c4b883a 	add	r5,r5,r17
  809784:	d9402f15 	stw	r5,188(sp)
  809788:	80800007 	ldb	r2,0(r16)
  80978c:	1000a826 	beq	r2,zero,809a30 <___vfprintf_internal_r+0x3f0>
  809790:	84400047 	ldb	r17,1(r16)
  809794:	00bfffc4 	movi	r2,-1
  809798:	85400044 	addi	r21,r16,1
  80979c:	d8002785 	stb	zero,158(sp)
  8097a0:	0007883a 	mov	r3,zero
  8097a4:	000f883a 	mov	r7,zero
  8097a8:	d8802915 	stw	r2,164(sp)
  8097ac:	d8003115 	stw	zero,196(sp)
  8097b0:	0025883a 	mov	r18,zero
  8097b4:	01401604 	movi	r5,88
  8097b8:	01800244 	movi	r6,9
  8097bc:	02800a84 	movi	r10,42
  8097c0:	02401b04 	movi	r9,108
  8097c4:	ad400044 	addi	r21,r21,1
  8097c8:	88bff804 	addi	r2,r17,-32
  8097cc:	28830436 	bltu	r5,r2,80a3e0 <___vfprintf_internal_r+0xda0>
  8097d0:	100490ba 	slli	r2,r2,2
  8097d4:	01002074 	movhi	r4,129
  8097d8:	2125fa04 	addi	r4,r4,-26648
  8097dc:	1105883a 	add	r2,r2,r4
  8097e0:	10800017 	ldw	r2,0(r2)
  8097e4:	1000683a 	jmp	r2
  8097e8:	0080a300 	call	80a30 <__alt_mem_sdram-0x77f5d0>
  8097ec:	0080a3e0 	cmpeqi	r2,zero,655
  8097f0:	0080a3e0 	cmpeqi	r2,zero,655
  8097f4:	0080a320 	cmpeqi	r2,zero,652
  8097f8:	0080a3e0 	cmpeqi	r2,zero,655
  8097fc:	0080a3e0 	cmpeqi	r2,zero,655
  809800:	0080a3e0 	cmpeqi	r2,zero,655
  809804:	0080a3e0 	cmpeqi	r2,zero,655
  809808:	0080a3e0 	cmpeqi	r2,zero,655
  80980c:	0080a3e0 	cmpeqi	r2,zero,655
  809810:	00809a94 	movui	r2,618
  809814:	0080a23c 	xorhi	r2,zero,648
  809818:	0080a3e0 	cmpeqi	r2,zero,655
  80981c:	0080995c 	xori	r2,zero,613
  809820:	00809abc 	xorhi	r2,zero,618
  809824:	0080a3e0 	cmpeqi	r2,zero,655
  809828:	00809afc 	xorhi	r2,zero,619
  80982c:	00809b08 	cmpgei	r2,zero,620
  809830:	00809b08 	cmpgei	r2,zero,620
  809834:	00809b08 	cmpgei	r2,zero,620
  809838:	00809b08 	cmpgei	r2,zero,620
  80983c:	00809b08 	cmpgei	r2,zero,620
  809840:	00809b08 	cmpgei	r2,zero,620
  809844:	00809b08 	cmpgei	r2,zero,620
  809848:	00809b08 	cmpgei	r2,zero,620
  80984c:	00809b08 	cmpgei	r2,zero,620
  809850:	0080a3e0 	cmpeqi	r2,zero,655
  809854:	0080a3e0 	cmpeqi	r2,zero,655
  809858:	0080a3e0 	cmpeqi	r2,zero,655
  80985c:	0080a3e0 	cmpeqi	r2,zero,655
  809860:	0080a3e0 	cmpeqi	r2,zero,655
  809864:	0080a3e0 	cmpeqi	r2,zero,655
  809868:	0080a3e0 	cmpeqi	r2,zero,655
  80986c:	0080a3e0 	cmpeqi	r2,zero,655
  809870:	0080a3e0 	cmpeqi	r2,zero,655
  809874:	0080a3e0 	cmpeqi	r2,zero,655
  809878:	00809b3c 	xorhi	r2,zero,620
  80987c:	00809bf8 	rdprs	r2,zero,623
  809880:	0080a3e0 	cmpeqi	r2,zero,655
  809884:	00809bf8 	rdprs	r2,zero,623
  809888:	0080a3e0 	cmpeqi	r2,zero,655
  80988c:	0080a3e0 	cmpeqi	r2,zero,655
  809890:	0080a3e0 	cmpeqi	r2,zero,655
  809894:	0080a3e0 	cmpeqi	r2,zero,655
  809898:	00809c98 	cmpnei	r2,zero,626
  80989c:	0080a3e0 	cmpeqi	r2,zero,655
  8098a0:	0080a3e0 	cmpeqi	r2,zero,655
  8098a4:	00809ca4 	muli	r2,zero,626
  8098a8:	0080a3e0 	cmpeqi	r2,zero,655
  8098ac:	0080a3e0 	cmpeqi	r2,zero,655
  8098b0:	0080a3e0 	cmpeqi	r2,zero,655
  8098b4:	0080a3e0 	cmpeqi	r2,zero,655
  8098b8:	0080a3e0 	cmpeqi	r2,zero,655
  8098bc:	0080a11c 	xori	r2,zero,644
  8098c0:	0080a3e0 	cmpeqi	r2,zero,655
  8098c4:	0080a3e0 	cmpeqi	r2,zero,655
  8098c8:	0080a17c 	xorhi	r2,zero,645
  8098cc:	0080a3e0 	cmpeqi	r2,zero,655
  8098d0:	0080a3e0 	cmpeqi	r2,zero,655
  8098d4:	0080a3e0 	cmpeqi	r2,zero,655
  8098d8:	0080a3e0 	cmpeqi	r2,zero,655
  8098dc:	0080a3e0 	cmpeqi	r2,zero,655
  8098e0:	0080a3e0 	cmpeqi	r2,zero,655
  8098e4:	0080a3e0 	cmpeqi	r2,zero,655
  8098e8:	0080a3e0 	cmpeqi	r2,zero,655
  8098ec:	0080a3e0 	cmpeqi	r2,zero,655
  8098f0:	0080a3e0 	cmpeqi	r2,zero,655
  8098f4:	0080a38c 	andi	r2,zero,654
  8098f8:	0080a32c 	andhi	r2,zero,652
  8098fc:	00809bf8 	rdprs	r2,zero,623
  809900:	00809bf8 	rdprs	r2,zero,623
  809904:	00809bf8 	rdprs	r2,zero,623
  809908:	0080a33c 	xorhi	r2,zero,652
  80990c:	0080a32c 	andhi	r2,zero,652
  809910:	0080a3e0 	cmpeqi	r2,zero,655
  809914:	0080a3e0 	cmpeqi	r2,zero,655
  809918:	0080a348 	cmpgei	r2,zero,653
  80991c:	0080a3e0 	cmpeqi	r2,zero,655
  809920:	0080a358 	cmpnei	r2,zero,653
  809924:	0080a22c 	andhi	r2,zero,648
  809928:	00809968 	cmpgeui	r2,zero,613
  80992c:	0080a24c 	andi	r2,zero,649
  809930:	0080a3e0 	cmpeqi	r2,zero,655
  809934:	0080a258 	cmpnei	r2,zero,649
  809938:	0080a3e0 	cmpeqi	r2,zero,655
  80993c:	0080a2b4 	movhi	r2,650
  809940:	0080a3e0 	cmpeqi	r2,zero,655
  809944:	0080a3e0 	cmpeqi	r2,zero,655
  809948:	0080a2c4 	movi	r2,651
  80994c:	d9003117 	ldw	r4,196(sp)
  809950:	d8802d15 	stw	r2,180(sp)
  809954:	0109c83a 	sub	r4,zero,r4
  809958:	d9003115 	stw	r4,196(sp)
  80995c:	94800114 	ori	r18,r18,4
  809960:	ac400007 	ldb	r17,0(r21)
  809964:	003f9706 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  809968:	00800c04 	movi	r2,48
  80996c:	d9002d17 	ldw	r4,180(sp)
  809970:	d9402917 	ldw	r5,164(sp)
  809974:	d8802705 	stb	r2,156(sp)
  809978:	00801e04 	movi	r2,120
  80997c:	d8802745 	stb	r2,157(sp)
  809980:	d8002785 	stb	zero,158(sp)
  809984:	20c00104 	addi	r3,r4,4
  809988:	24c00017 	ldw	r19,0(r4)
  80998c:	002d883a 	mov	r22,zero
  809990:	90800094 	ori	r2,r18,2
  809994:	28029a16 	blt	r5,zero,80a400 <___vfprintf_internal_r+0xdc0>
  809998:	00bfdfc4 	movi	r2,-129
  80999c:	90a4703a 	and	r18,r18,r2
  8099a0:	d8c02d15 	stw	r3,180(sp)
  8099a4:	94800094 	ori	r18,r18,2
  8099a8:	9802871e 	bne	r19,zero,80a3c8 <___vfprintf_internal_r+0xd88>
  8099ac:	00802074 	movhi	r2,129
  8099b0:	109d0a04 	addi	r2,r2,29736
  8099b4:	d8803915 	stw	r2,228(sp)
  8099b8:	04401e04 	movi	r17,120
  8099bc:	d8802917 	ldw	r2,164(sp)
  8099c0:	0039883a 	mov	fp,zero
  8099c4:	1001e926 	beq	r2,zero,80a16c <___vfprintf_internal_r+0xb2c>
  8099c8:	0027883a 	mov	r19,zero
  8099cc:	002d883a 	mov	r22,zero
  8099d0:	00020506 	br	80a1e8 <___vfprintf_internal_r+0xba8>
  8099d4:	d9002c17 	ldw	r4,176(sp)
  8099d8:	b80b883a 	mov	r5,r23
  8099dc:	080bacc0 	call	80bacc <__swsetup_r>
  8099e0:	1005ac1e 	bne	r2,zero,80b094 <___vfprintf_internal_r+0x1a54>
  8099e4:	b880030b 	ldhu	r2,12(r23)
  8099e8:	00c00284 	movi	r3,10
  8099ec:	1080068c 	andi	r2,r2,26
  8099f0:	10ff3c1e 	bne	r2,r3,8096e4 <__alt_mem_onchip_mem+0xff8016e4>
  8099f4:	b880038f 	ldh	r2,14(r23)
  8099f8:	103f3a16 	blt	r2,zero,8096e4 <__alt_mem_onchip_mem+0xff8016e4>
  8099fc:	d9c02d17 	ldw	r7,180(sp)
  809a00:	d9002c17 	ldw	r4,176(sp)
  809a04:	a80d883a 	mov	r6,r21
  809a08:	b80b883a 	mov	r5,r23
  809a0c:	080b8540 	call	80b854 <__sbprintf>
  809a10:	00001106 	br	809a58 <___vfprintf_internal_r+0x418>
  809a14:	d9002c17 	ldw	r4,176(sp)
  809a18:	d9801e04 	addi	r6,sp,120
  809a1c:	b80b883a 	mov	r5,r23
  809a20:	080f7880 	call	80f788 <__sprint_r>
  809a24:	1000081e 	bne	r2,zero,809a48 <___vfprintf_internal_r+0x408>
  809a28:	da000404 	addi	r8,sp,16
  809a2c:	003f5306 	br	80977c <__alt_mem_onchip_mem+0xff80177c>
  809a30:	d8802017 	ldw	r2,128(sp)
  809a34:	10000426 	beq	r2,zero,809a48 <___vfprintf_internal_r+0x408>
  809a38:	d9002c17 	ldw	r4,176(sp)
  809a3c:	d9801e04 	addi	r6,sp,120
  809a40:	b80b883a 	mov	r5,r23
  809a44:	080f7880 	call	80f788 <__sprint_r>
  809a48:	b880030b 	ldhu	r2,12(r23)
  809a4c:	1080100c 	andi	r2,r2,64
  809a50:	1005901e 	bne	r2,zero,80b094 <___vfprintf_internal_r+0x1a54>
  809a54:	d8802f17 	ldw	r2,188(sp)
  809a58:	dfc04717 	ldw	ra,284(sp)
  809a5c:	df004617 	ldw	fp,280(sp)
  809a60:	ddc04517 	ldw	r23,276(sp)
  809a64:	dd804417 	ldw	r22,272(sp)
  809a68:	dd404317 	ldw	r21,268(sp)
  809a6c:	dd004217 	ldw	r20,264(sp)
  809a70:	dcc04117 	ldw	r19,260(sp)
  809a74:	dc804017 	ldw	r18,256(sp)
  809a78:	dc403f17 	ldw	r17,252(sp)
  809a7c:	dc003e17 	ldw	r16,248(sp)
  809a80:	dec04804 	addi	sp,sp,288
  809a84:	f800283a 	ret
  809a88:	d9002c17 	ldw	r4,176(sp)
  809a8c:	08077bc0 	call	8077bc <__sinit>
  809a90:	003f0406 	br	8096a4 <__alt_mem_onchip_mem+0xff8016a4>
  809a94:	d8802d17 	ldw	r2,180(sp)
  809a98:	d9002d17 	ldw	r4,180(sp)
  809a9c:	10800017 	ldw	r2,0(r2)
  809aa0:	d8803115 	stw	r2,196(sp)
  809aa4:	20800104 	addi	r2,r4,4
  809aa8:	d9003117 	ldw	r4,196(sp)
  809aac:	203fa716 	blt	r4,zero,80994c <__alt_mem_onchip_mem+0xff80194c>
  809ab0:	d8802d15 	stw	r2,180(sp)
  809ab4:	ac400007 	ldb	r17,0(r21)
  809ab8:	003f4206 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  809abc:	ac400007 	ldb	r17,0(r21)
  809ac0:	aac00044 	addi	r11,r21,1
  809ac4:	8a872826 	beq	r17,r10,80b768 <___vfprintf_internal_r+0x2128>
  809ac8:	88bff404 	addi	r2,r17,-48
  809acc:	0009883a 	mov	r4,zero
  809ad0:	30867d36 	bltu	r6,r2,80b4c8 <___vfprintf_internal_r+0x1e88>
  809ad4:	5c400007 	ldb	r17,0(r11)
  809ad8:	210002a4 	muli	r4,r4,10
  809adc:	5d400044 	addi	r21,r11,1
  809ae0:	a817883a 	mov	r11,r21
  809ae4:	2089883a 	add	r4,r4,r2
  809ae8:	88bff404 	addi	r2,r17,-48
  809aec:	30bff92e 	bgeu	r6,r2,809ad4 <__alt_mem_onchip_mem+0xff801ad4>
  809af0:	2005c916 	blt	r4,zero,80b218 <___vfprintf_internal_r+0x1bd8>
  809af4:	d9002915 	stw	r4,164(sp)
  809af8:	003f3306 	br	8097c8 <__alt_mem_onchip_mem+0xff8017c8>
  809afc:	94802014 	ori	r18,r18,128
  809b00:	ac400007 	ldb	r17,0(r21)
  809b04:	003f2f06 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  809b08:	a809883a 	mov	r4,r21
  809b0c:	d8003115 	stw	zero,196(sp)
  809b10:	88bff404 	addi	r2,r17,-48
  809b14:	0017883a 	mov	r11,zero
  809b18:	24400007 	ldb	r17,0(r4)
  809b1c:	5ac002a4 	muli	r11,r11,10
  809b20:	ad400044 	addi	r21,r21,1
  809b24:	a809883a 	mov	r4,r21
  809b28:	12d7883a 	add	r11,r2,r11
  809b2c:	88bff404 	addi	r2,r17,-48
  809b30:	30bff92e 	bgeu	r6,r2,809b18 <__alt_mem_onchip_mem+0xff801b18>
  809b34:	dac03115 	stw	r11,196(sp)
  809b38:	003f2306 	br	8097c8 <__alt_mem_onchip_mem+0xff8017c8>
  809b3c:	18c03fcc 	andi	r3,r3,255
  809b40:	18072b1e 	bne	r3,zero,80b7f0 <___vfprintf_internal_r+0x21b0>
  809b44:	94800414 	ori	r18,r18,16
  809b48:	9080080c 	andi	r2,r18,32
  809b4c:	10037b26 	beq	r2,zero,80a93c <___vfprintf_internal_r+0x12fc>
  809b50:	d9402d17 	ldw	r5,180(sp)
  809b54:	28800117 	ldw	r2,4(r5)
  809b58:	2cc00017 	ldw	r19,0(r5)
  809b5c:	29400204 	addi	r5,r5,8
  809b60:	d9402d15 	stw	r5,180(sp)
  809b64:	102d883a 	mov	r22,r2
  809b68:	10044b16 	blt	r2,zero,80ac98 <___vfprintf_internal_r+0x1658>
  809b6c:	d9402917 	ldw	r5,164(sp)
  809b70:	df002783 	ldbu	fp,158(sp)
  809b74:	2803bc16 	blt	r5,zero,80aa68 <___vfprintf_internal_r+0x1428>
  809b78:	00ffdfc4 	movi	r3,-129
  809b7c:	9d84b03a 	or	r2,r19,r22
  809b80:	90e4703a 	and	r18,r18,r3
  809b84:	10017726 	beq	r2,zero,80a164 <___vfprintf_internal_r+0xb24>
  809b88:	b0038326 	beq	r22,zero,80a998 <___vfprintf_internal_r+0x1358>
  809b8c:	dc402a15 	stw	r17,168(sp)
  809b90:	dc001e04 	addi	r16,sp,120
  809b94:	b023883a 	mov	r17,r22
  809b98:	402d883a 	mov	r22,r8
  809b9c:	9809883a 	mov	r4,r19
  809ba0:	880b883a 	mov	r5,r17
  809ba4:	01800284 	movi	r6,10
  809ba8:	000f883a 	mov	r7,zero
  809bac:	08117000 	call	811700 <__umoddi3>
  809bb0:	10800c04 	addi	r2,r2,48
  809bb4:	843fffc4 	addi	r16,r16,-1
  809bb8:	9809883a 	mov	r4,r19
  809bbc:	880b883a 	mov	r5,r17
  809bc0:	80800005 	stb	r2,0(r16)
  809bc4:	01800284 	movi	r6,10
  809bc8:	000f883a 	mov	r7,zero
  809bcc:	08111880 	call	811188 <__udivdi3>
  809bd0:	1027883a 	mov	r19,r2
  809bd4:	10c4b03a 	or	r2,r2,r3
  809bd8:	1823883a 	mov	r17,r3
  809bdc:	103fef1e 	bne	r2,zero,809b9c <__alt_mem_onchip_mem+0xff801b9c>
  809be0:	d8c02817 	ldw	r3,160(sp)
  809be4:	dc402a17 	ldw	r17,168(sp)
  809be8:	b011883a 	mov	r8,r22
  809bec:	1c07c83a 	sub	r3,r3,r16
  809bf0:	d8c02e15 	stw	r3,184(sp)
  809bf4:	00005906 	br	809d5c <___vfprintf_internal_r+0x71c>
  809bf8:	18c03fcc 	andi	r3,r3,255
  809bfc:	1806fa1e 	bne	r3,zero,80b7e8 <___vfprintf_internal_r+0x21a8>
  809c00:	9080020c 	andi	r2,r18,8
  809c04:	10048a26 	beq	r2,zero,80ae30 <___vfprintf_internal_r+0x17f0>
  809c08:	d8c02d17 	ldw	r3,180(sp)
  809c0c:	d9002d17 	ldw	r4,180(sp)
  809c10:	d9402d17 	ldw	r5,180(sp)
  809c14:	18c00017 	ldw	r3,0(r3)
  809c18:	21000117 	ldw	r4,4(r4)
  809c1c:	29400204 	addi	r5,r5,8
  809c20:	d8c03615 	stw	r3,216(sp)
  809c24:	d9003815 	stw	r4,224(sp)
  809c28:	d9402d15 	stw	r5,180(sp)
  809c2c:	d9003617 	ldw	r4,216(sp)
  809c30:	d9403817 	ldw	r5,224(sp)
  809c34:	da003d15 	stw	r8,244(sp)
  809c38:	04000044 	movi	r16,1
  809c3c:	080f53c0 	call	80f53c <__fpclassifyd>
  809c40:	da003d17 	ldw	r8,244(sp)
  809c44:	14041f1e 	bne	r2,r16,80acc4 <___vfprintf_internal_r+0x1684>
  809c48:	d9003617 	ldw	r4,216(sp)
  809c4c:	d9403817 	ldw	r5,224(sp)
  809c50:	000d883a 	mov	r6,zero
  809c54:	000f883a 	mov	r7,zero
  809c58:	08065900 	call	806590 <__ledf2>
  809c5c:	da003d17 	ldw	r8,244(sp)
  809c60:	1005be16 	blt	r2,zero,80b35c <___vfprintf_internal_r+0x1d1c>
  809c64:	df002783 	ldbu	fp,158(sp)
  809c68:	008011c4 	movi	r2,71
  809c6c:	1445330e 	bge	r2,r17,80b13c <___vfprintf_internal_r+0x1afc>
  809c70:	04002074 	movhi	r16,129
  809c74:	841d0204 	addi	r16,r16,29704
  809c78:	00c000c4 	movi	r3,3
  809c7c:	00bfdfc4 	movi	r2,-129
  809c80:	d8c02a15 	stw	r3,168(sp)
  809c84:	90a4703a 	and	r18,r18,r2
  809c88:	d8c02e15 	stw	r3,184(sp)
  809c8c:	d8002915 	stw	zero,164(sp)
  809c90:	d8003215 	stw	zero,200(sp)
  809c94:	00003706 	br	809d74 <___vfprintf_internal_r+0x734>
  809c98:	94800214 	ori	r18,r18,8
  809c9c:	ac400007 	ldb	r17,0(r21)
  809ca0:	003ec806 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  809ca4:	18c03fcc 	andi	r3,r3,255
  809ca8:	1806db1e 	bne	r3,zero,80b818 <___vfprintf_internal_r+0x21d8>
  809cac:	94800414 	ori	r18,r18,16
  809cb0:	9080080c 	andi	r2,r18,32
  809cb4:	1002d826 	beq	r2,zero,80a818 <___vfprintf_internal_r+0x11d8>
  809cb8:	d9402d17 	ldw	r5,180(sp)
  809cbc:	d8c02917 	ldw	r3,164(sp)
  809cc0:	d8002785 	stb	zero,158(sp)
  809cc4:	28800204 	addi	r2,r5,8
  809cc8:	2cc00017 	ldw	r19,0(r5)
  809ccc:	2d800117 	ldw	r22,4(r5)
  809cd0:	18048f16 	blt	r3,zero,80af10 <___vfprintf_internal_r+0x18d0>
  809cd4:	013fdfc4 	movi	r4,-129
  809cd8:	9d86b03a 	or	r3,r19,r22
  809cdc:	d8802d15 	stw	r2,180(sp)
  809ce0:	9124703a 	and	r18,r18,r4
  809ce4:	1802d91e 	bne	r3,zero,80a84c <___vfprintf_internal_r+0x120c>
  809ce8:	d8c02917 	ldw	r3,164(sp)
  809cec:	0039883a 	mov	fp,zero
  809cf0:	1805c326 	beq	r3,zero,80b400 <___vfprintf_internal_r+0x1dc0>
  809cf4:	0027883a 	mov	r19,zero
  809cf8:	002d883a 	mov	r22,zero
  809cfc:	dc001e04 	addi	r16,sp,120
  809d00:	9806d0fa 	srli	r3,r19,3
  809d04:	b008977a 	slli	r4,r22,29
  809d08:	b02cd0fa 	srli	r22,r22,3
  809d0c:	9cc001cc 	andi	r19,r19,7
  809d10:	98800c04 	addi	r2,r19,48
  809d14:	843fffc4 	addi	r16,r16,-1
  809d18:	20e6b03a 	or	r19,r4,r3
  809d1c:	80800005 	stb	r2,0(r16)
  809d20:	9d86b03a 	or	r3,r19,r22
  809d24:	183ff61e 	bne	r3,zero,809d00 <__alt_mem_onchip_mem+0xff801d00>
  809d28:	90c0004c 	andi	r3,r18,1
  809d2c:	18013b26 	beq	r3,zero,80a21c <___vfprintf_internal_r+0xbdc>
  809d30:	10803fcc 	andi	r2,r2,255
  809d34:	1080201c 	xori	r2,r2,128
  809d38:	10bfe004 	addi	r2,r2,-128
  809d3c:	00c00c04 	movi	r3,48
  809d40:	10c13626 	beq	r2,r3,80a21c <___vfprintf_internal_r+0xbdc>
  809d44:	80ffffc5 	stb	r3,-1(r16)
  809d48:	d8c02817 	ldw	r3,160(sp)
  809d4c:	80bfffc4 	addi	r2,r16,-1
  809d50:	1021883a 	mov	r16,r2
  809d54:	1887c83a 	sub	r3,r3,r2
  809d58:	d8c02e15 	stw	r3,184(sp)
  809d5c:	d8802e17 	ldw	r2,184(sp)
  809d60:	d9002917 	ldw	r4,164(sp)
  809d64:	1100010e 	bge	r2,r4,809d6c <___vfprintf_internal_r+0x72c>
  809d68:	2005883a 	mov	r2,r4
  809d6c:	d8802a15 	stw	r2,168(sp)
  809d70:	d8003215 	stw	zero,200(sp)
  809d74:	e7003fcc 	andi	fp,fp,255
  809d78:	e700201c 	xori	fp,fp,128
  809d7c:	e73fe004 	addi	fp,fp,-128
  809d80:	e0000326 	beq	fp,zero,809d90 <___vfprintf_internal_r+0x750>
  809d84:	d8c02a17 	ldw	r3,168(sp)
  809d88:	18c00044 	addi	r3,r3,1
  809d8c:	d8c02a15 	stw	r3,168(sp)
  809d90:	90c0008c 	andi	r3,r18,2
  809d94:	d8c02b15 	stw	r3,172(sp)
  809d98:	18000326 	beq	r3,zero,809da8 <___vfprintf_internal_r+0x768>
  809d9c:	d8c02a17 	ldw	r3,168(sp)
  809da0:	18c00084 	addi	r3,r3,2
  809da4:	d8c02a15 	stw	r3,168(sp)
  809da8:	90c0210c 	andi	r3,r18,132
  809dac:	d8c03015 	stw	r3,192(sp)
  809db0:	1801a31e 	bne	r3,zero,80a440 <___vfprintf_internal_r+0xe00>
  809db4:	d9003117 	ldw	r4,196(sp)
  809db8:	d8c02a17 	ldw	r3,168(sp)
  809dbc:	20e7c83a 	sub	r19,r4,r3
  809dc0:	04c19f0e 	bge	zero,r19,80a440 <___vfprintf_internal_r+0xe00>
  809dc4:	02400404 	movi	r9,16
  809dc8:	d8c02017 	ldw	r3,128(sp)
  809dcc:	d8801f17 	ldw	r2,124(sp)
  809dd0:	4cc50d0e 	bge	r9,r19,80b208 <___vfprintf_internal_r+0x1bc8>
  809dd4:	01402074 	movhi	r5,129
  809dd8:	295d1584 	addi	r5,r5,29782
  809ddc:	dc403b15 	stw	r17,236(sp)
  809de0:	d9403515 	stw	r5,212(sp)
  809de4:	9823883a 	mov	r17,r19
  809de8:	482d883a 	mov	r22,r9
  809dec:	9027883a 	mov	r19,r18
  809df0:	070001c4 	movi	fp,7
  809df4:	8025883a 	mov	r18,r16
  809df8:	dc002c17 	ldw	r16,176(sp)
  809dfc:	00000306 	br	809e0c <___vfprintf_internal_r+0x7cc>
  809e00:	8c7ffc04 	addi	r17,r17,-16
  809e04:	42000204 	addi	r8,r8,8
  809e08:	b440130e 	bge	r22,r17,809e58 <___vfprintf_internal_r+0x818>
  809e0c:	01002074 	movhi	r4,129
  809e10:	18c00404 	addi	r3,r3,16
  809e14:	10800044 	addi	r2,r2,1
  809e18:	211d1584 	addi	r4,r4,29782
  809e1c:	41000015 	stw	r4,0(r8)
  809e20:	45800115 	stw	r22,4(r8)
  809e24:	d8c02015 	stw	r3,128(sp)
  809e28:	d8801f15 	stw	r2,124(sp)
  809e2c:	e0bff40e 	bge	fp,r2,809e00 <__alt_mem_onchip_mem+0xff801e00>
  809e30:	d9801e04 	addi	r6,sp,120
  809e34:	b80b883a 	mov	r5,r23
  809e38:	8009883a 	mov	r4,r16
  809e3c:	080f7880 	call	80f788 <__sprint_r>
  809e40:	103f011e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  809e44:	8c7ffc04 	addi	r17,r17,-16
  809e48:	d8c02017 	ldw	r3,128(sp)
  809e4c:	d8801f17 	ldw	r2,124(sp)
  809e50:	da000404 	addi	r8,sp,16
  809e54:	b47fed16 	blt	r22,r17,809e0c <__alt_mem_onchip_mem+0xff801e0c>
  809e58:	9021883a 	mov	r16,r18
  809e5c:	9825883a 	mov	r18,r19
  809e60:	8827883a 	mov	r19,r17
  809e64:	dc403b17 	ldw	r17,236(sp)
  809e68:	d9403517 	ldw	r5,212(sp)
  809e6c:	98c7883a 	add	r3,r19,r3
  809e70:	10800044 	addi	r2,r2,1
  809e74:	41400015 	stw	r5,0(r8)
  809e78:	44c00115 	stw	r19,4(r8)
  809e7c:	d8c02015 	stw	r3,128(sp)
  809e80:	d8801f15 	stw	r2,124(sp)
  809e84:	010001c4 	movi	r4,7
  809e88:	2082a316 	blt	r4,r2,80a918 <___vfprintf_internal_r+0x12d8>
  809e8c:	df002787 	ldb	fp,158(sp)
  809e90:	42000204 	addi	r8,r8,8
  809e94:	e0000c26 	beq	fp,zero,809ec8 <___vfprintf_internal_r+0x888>
  809e98:	d8801f17 	ldw	r2,124(sp)
  809e9c:	d9002784 	addi	r4,sp,158
  809ea0:	18c00044 	addi	r3,r3,1
  809ea4:	10800044 	addi	r2,r2,1
  809ea8:	41000015 	stw	r4,0(r8)
  809eac:	01000044 	movi	r4,1
  809eb0:	41000115 	stw	r4,4(r8)
  809eb4:	d8c02015 	stw	r3,128(sp)
  809eb8:	d8801f15 	stw	r2,124(sp)
  809ebc:	010001c4 	movi	r4,7
  809ec0:	20823c16 	blt	r4,r2,80a7b4 <___vfprintf_internal_r+0x1174>
  809ec4:	42000204 	addi	r8,r8,8
  809ec8:	d8802b17 	ldw	r2,172(sp)
  809ecc:	10000c26 	beq	r2,zero,809f00 <___vfprintf_internal_r+0x8c0>
  809ed0:	d8801f17 	ldw	r2,124(sp)
  809ed4:	d9002704 	addi	r4,sp,156
  809ed8:	18c00084 	addi	r3,r3,2
  809edc:	10800044 	addi	r2,r2,1
  809ee0:	41000015 	stw	r4,0(r8)
  809ee4:	01000084 	movi	r4,2
  809ee8:	41000115 	stw	r4,4(r8)
  809eec:	d8c02015 	stw	r3,128(sp)
  809ef0:	d8801f15 	stw	r2,124(sp)
  809ef4:	010001c4 	movi	r4,7
  809ef8:	20823616 	blt	r4,r2,80a7d4 <___vfprintf_internal_r+0x1194>
  809efc:	42000204 	addi	r8,r8,8
  809f00:	d9003017 	ldw	r4,192(sp)
  809f04:	00802004 	movi	r2,128
  809f08:	20819926 	beq	r4,r2,80a570 <___vfprintf_internal_r+0xf30>
  809f0c:	d9402917 	ldw	r5,164(sp)
  809f10:	d8802e17 	ldw	r2,184(sp)
  809f14:	28adc83a 	sub	r22,r5,r2
  809f18:	0580310e 	bge	zero,r22,809fe0 <___vfprintf_internal_r+0x9a0>
  809f1c:	07000404 	movi	fp,16
  809f20:	d8801f17 	ldw	r2,124(sp)
  809f24:	e584140e 	bge	fp,r22,80af78 <___vfprintf_internal_r+0x1938>
  809f28:	01402074 	movhi	r5,129
  809f2c:	295d1184 	addi	r5,r5,29766
  809f30:	dc402915 	stw	r17,164(sp)
  809f34:	d9402b15 	stw	r5,172(sp)
  809f38:	b023883a 	mov	r17,r22
  809f3c:	04c001c4 	movi	r19,7
  809f40:	a82d883a 	mov	r22,r21
  809f44:	902b883a 	mov	r21,r18
  809f48:	8025883a 	mov	r18,r16
  809f4c:	dc002c17 	ldw	r16,176(sp)
  809f50:	00000306 	br	809f60 <___vfprintf_internal_r+0x920>
  809f54:	8c7ffc04 	addi	r17,r17,-16
  809f58:	42000204 	addi	r8,r8,8
  809f5c:	e440110e 	bge	fp,r17,809fa4 <___vfprintf_internal_r+0x964>
  809f60:	18c00404 	addi	r3,r3,16
  809f64:	10800044 	addi	r2,r2,1
  809f68:	45000015 	stw	r20,0(r8)
  809f6c:	47000115 	stw	fp,4(r8)
  809f70:	d8c02015 	stw	r3,128(sp)
  809f74:	d8801f15 	stw	r2,124(sp)
  809f78:	98bff60e 	bge	r19,r2,809f54 <__alt_mem_onchip_mem+0xff801f54>
  809f7c:	d9801e04 	addi	r6,sp,120
  809f80:	b80b883a 	mov	r5,r23
  809f84:	8009883a 	mov	r4,r16
  809f88:	080f7880 	call	80f788 <__sprint_r>
  809f8c:	103eae1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  809f90:	8c7ffc04 	addi	r17,r17,-16
  809f94:	d8c02017 	ldw	r3,128(sp)
  809f98:	d8801f17 	ldw	r2,124(sp)
  809f9c:	da000404 	addi	r8,sp,16
  809fa0:	e47fef16 	blt	fp,r17,809f60 <__alt_mem_onchip_mem+0xff801f60>
  809fa4:	9021883a 	mov	r16,r18
  809fa8:	a825883a 	mov	r18,r21
  809fac:	b02b883a 	mov	r21,r22
  809fb0:	882d883a 	mov	r22,r17
  809fb4:	dc402917 	ldw	r17,164(sp)
  809fb8:	d9002b17 	ldw	r4,172(sp)
  809fbc:	1d87883a 	add	r3,r3,r22
  809fc0:	10800044 	addi	r2,r2,1
  809fc4:	41000015 	stw	r4,0(r8)
  809fc8:	45800115 	stw	r22,4(r8)
  809fcc:	d8c02015 	stw	r3,128(sp)
  809fd0:	d8801f15 	stw	r2,124(sp)
  809fd4:	010001c4 	movi	r4,7
  809fd8:	2081ee16 	blt	r4,r2,80a794 <___vfprintf_internal_r+0x1154>
  809fdc:	42000204 	addi	r8,r8,8
  809fe0:	9080400c 	andi	r2,r18,256
  809fe4:	1001181e 	bne	r2,zero,80a448 <___vfprintf_internal_r+0xe08>
  809fe8:	d9402e17 	ldw	r5,184(sp)
  809fec:	d8801f17 	ldw	r2,124(sp)
  809ff0:	44000015 	stw	r16,0(r8)
  809ff4:	1947883a 	add	r3,r3,r5
  809ff8:	10800044 	addi	r2,r2,1
  809ffc:	41400115 	stw	r5,4(r8)
  80a000:	d8c02015 	stw	r3,128(sp)
  80a004:	d8801f15 	stw	r2,124(sp)
  80a008:	010001c4 	movi	r4,7
  80a00c:	2081d316 	blt	r4,r2,80a75c <___vfprintf_internal_r+0x111c>
  80a010:	42000204 	addi	r8,r8,8
  80a014:	9480010c 	andi	r18,r18,4
  80a018:	90003226 	beq	r18,zero,80a0e4 <___vfprintf_internal_r+0xaa4>
  80a01c:	d9403117 	ldw	r5,196(sp)
  80a020:	d8802a17 	ldw	r2,168(sp)
  80a024:	28a1c83a 	sub	r16,r5,r2
  80a028:	04002e0e 	bge	zero,r16,80a0e4 <___vfprintf_internal_r+0xaa4>
  80a02c:	04400404 	movi	r17,16
  80a030:	d8801f17 	ldw	r2,124(sp)
  80a034:	8c04a20e 	bge	r17,r16,80b2c0 <___vfprintf_internal_r+0x1c80>
  80a038:	01402074 	movhi	r5,129
  80a03c:	295d1584 	addi	r5,r5,29782
  80a040:	d9403515 	stw	r5,212(sp)
  80a044:	048001c4 	movi	r18,7
  80a048:	dcc02c17 	ldw	r19,176(sp)
  80a04c:	00000306 	br	80a05c <___vfprintf_internal_r+0xa1c>
  80a050:	843ffc04 	addi	r16,r16,-16
  80a054:	42000204 	addi	r8,r8,8
  80a058:	8c00130e 	bge	r17,r16,80a0a8 <___vfprintf_internal_r+0xa68>
  80a05c:	01002074 	movhi	r4,129
  80a060:	18c00404 	addi	r3,r3,16
  80a064:	10800044 	addi	r2,r2,1
  80a068:	211d1584 	addi	r4,r4,29782
  80a06c:	41000015 	stw	r4,0(r8)
  80a070:	44400115 	stw	r17,4(r8)
  80a074:	d8c02015 	stw	r3,128(sp)
  80a078:	d8801f15 	stw	r2,124(sp)
  80a07c:	90bff40e 	bge	r18,r2,80a050 <__alt_mem_onchip_mem+0xff802050>
  80a080:	d9801e04 	addi	r6,sp,120
  80a084:	b80b883a 	mov	r5,r23
  80a088:	9809883a 	mov	r4,r19
  80a08c:	080f7880 	call	80f788 <__sprint_r>
  80a090:	103e6d1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a094:	843ffc04 	addi	r16,r16,-16
  80a098:	d8c02017 	ldw	r3,128(sp)
  80a09c:	d8801f17 	ldw	r2,124(sp)
  80a0a0:	da000404 	addi	r8,sp,16
  80a0a4:	8c3fed16 	blt	r17,r16,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80a0a8:	d9403517 	ldw	r5,212(sp)
  80a0ac:	1c07883a 	add	r3,r3,r16
  80a0b0:	10800044 	addi	r2,r2,1
  80a0b4:	41400015 	stw	r5,0(r8)
  80a0b8:	44000115 	stw	r16,4(r8)
  80a0bc:	d8c02015 	stw	r3,128(sp)
  80a0c0:	d8801f15 	stw	r2,124(sp)
  80a0c4:	010001c4 	movi	r4,7
  80a0c8:	2080060e 	bge	r4,r2,80a0e4 <___vfprintf_internal_r+0xaa4>
  80a0cc:	d9002c17 	ldw	r4,176(sp)
  80a0d0:	d9801e04 	addi	r6,sp,120
  80a0d4:	b80b883a 	mov	r5,r23
  80a0d8:	080f7880 	call	80f788 <__sprint_r>
  80a0dc:	103e5a1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a0e0:	d8c02017 	ldw	r3,128(sp)
  80a0e4:	d8803117 	ldw	r2,196(sp)
  80a0e8:	d9002a17 	ldw	r4,168(sp)
  80a0ec:	1100010e 	bge	r2,r4,80a0f4 <___vfprintf_internal_r+0xab4>
  80a0f0:	2005883a 	mov	r2,r4
  80a0f4:	d9402f17 	ldw	r5,188(sp)
  80a0f8:	288b883a 	add	r5,r5,r2
  80a0fc:	d9402f15 	stw	r5,188(sp)
  80a100:	18019e1e 	bne	r3,zero,80a77c <___vfprintf_internal_r+0x113c>
  80a104:	a8800007 	ldb	r2,0(r21)
  80a108:	d8001f15 	stw	zero,124(sp)
  80a10c:	da000404 	addi	r8,sp,16
  80a110:	103d851e 	bne	r2,zero,809728 <__alt_mem_onchip_mem+0xff801728>
  80a114:	a821883a 	mov	r16,r21
  80a118:	003d9b06 	br	809788 <__alt_mem_onchip_mem+0xff801788>
  80a11c:	18c03fcc 	andi	r3,r3,255
  80a120:	1805c11e 	bne	r3,zero,80b828 <___vfprintf_internal_r+0x21e8>
  80a124:	94800414 	ori	r18,r18,16
  80a128:	9080080c 	andi	r2,r18,32
  80a12c:	10020c26 	beq	r2,zero,80a960 <___vfprintf_internal_r+0x1320>
  80a130:	d8802d17 	ldw	r2,180(sp)
  80a134:	d9002917 	ldw	r4,164(sp)
  80a138:	d8002785 	stb	zero,158(sp)
  80a13c:	10c00204 	addi	r3,r2,8
  80a140:	14c00017 	ldw	r19,0(r2)
  80a144:	15800117 	ldw	r22,4(r2)
  80a148:	20040f16 	blt	r4,zero,80b188 <___vfprintf_internal_r+0x1b48>
  80a14c:	013fdfc4 	movi	r4,-129
  80a150:	9d84b03a 	or	r2,r19,r22
  80a154:	d8c02d15 	stw	r3,180(sp)
  80a158:	9124703a 	and	r18,r18,r4
  80a15c:	0039883a 	mov	fp,zero
  80a160:	103e891e 	bne	r2,zero,809b88 <__alt_mem_onchip_mem+0xff801b88>
  80a164:	d9002917 	ldw	r4,164(sp)
  80a168:	2002c11e 	bne	r4,zero,80ac70 <___vfprintf_internal_r+0x1630>
  80a16c:	d8002915 	stw	zero,164(sp)
  80a170:	d8002e15 	stw	zero,184(sp)
  80a174:	dc001e04 	addi	r16,sp,120
  80a178:	003ef806 	br	809d5c <__alt_mem_onchip_mem+0xff801d5c>
  80a17c:	18c03fcc 	andi	r3,r3,255
  80a180:	18059d1e 	bne	r3,zero,80b7f8 <___vfprintf_internal_r+0x21b8>
  80a184:	01402074 	movhi	r5,129
  80a188:	295d0504 	addi	r5,r5,29716
  80a18c:	d9403915 	stw	r5,228(sp)
  80a190:	9080080c 	andi	r2,r18,32
  80a194:	10005226 	beq	r2,zero,80a2e0 <___vfprintf_internal_r+0xca0>
  80a198:	d8802d17 	ldw	r2,180(sp)
  80a19c:	14c00017 	ldw	r19,0(r2)
  80a1a0:	15800117 	ldw	r22,4(r2)
  80a1a4:	10800204 	addi	r2,r2,8
  80a1a8:	d8802d15 	stw	r2,180(sp)
  80a1ac:	9080004c 	andi	r2,r18,1
  80a1b0:	10019026 	beq	r2,zero,80a7f4 <___vfprintf_internal_r+0x11b4>
  80a1b4:	9d84b03a 	or	r2,r19,r22
  80a1b8:	10036926 	beq	r2,zero,80af60 <___vfprintf_internal_r+0x1920>
  80a1bc:	d8c02917 	ldw	r3,164(sp)
  80a1c0:	00800c04 	movi	r2,48
  80a1c4:	d8802705 	stb	r2,156(sp)
  80a1c8:	dc402745 	stb	r17,157(sp)
  80a1cc:	d8002785 	stb	zero,158(sp)
  80a1d0:	90800094 	ori	r2,r18,2
  80a1d4:	18045d16 	blt	r3,zero,80b34c <___vfprintf_internal_r+0x1d0c>
  80a1d8:	00bfdfc4 	movi	r2,-129
  80a1dc:	90a4703a 	and	r18,r18,r2
  80a1e0:	94800094 	ori	r18,r18,2
  80a1e4:	0039883a 	mov	fp,zero
  80a1e8:	d9003917 	ldw	r4,228(sp)
  80a1ec:	dc001e04 	addi	r16,sp,120
  80a1f0:	988003cc 	andi	r2,r19,15
  80a1f4:	b006973a 	slli	r3,r22,28
  80a1f8:	2085883a 	add	r2,r4,r2
  80a1fc:	9826d13a 	srli	r19,r19,4
  80a200:	10800003 	ldbu	r2,0(r2)
  80a204:	b02cd13a 	srli	r22,r22,4
  80a208:	843fffc4 	addi	r16,r16,-1
  80a20c:	1ce6b03a 	or	r19,r3,r19
  80a210:	80800005 	stb	r2,0(r16)
  80a214:	9d84b03a 	or	r2,r19,r22
  80a218:	103ff51e 	bne	r2,zero,80a1f0 <__alt_mem_onchip_mem+0xff8021f0>
  80a21c:	d8c02817 	ldw	r3,160(sp)
  80a220:	1c07c83a 	sub	r3,r3,r16
  80a224:	d8c02e15 	stw	r3,184(sp)
  80a228:	003ecc06 	br	809d5c <__alt_mem_onchip_mem+0xff801d5c>
  80a22c:	18c03fcc 	andi	r3,r3,255
  80a230:	183e9f26 	beq	r3,zero,809cb0 <__alt_mem_onchip_mem+0xff801cb0>
  80a234:	d9c02785 	stb	r7,158(sp)
  80a238:	003e9d06 	br	809cb0 <__alt_mem_onchip_mem+0xff801cb0>
  80a23c:	00c00044 	movi	r3,1
  80a240:	01c00ac4 	movi	r7,43
  80a244:	ac400007 	ldb	r17,0(r21)
  80a248:	003d5e06 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80a24c:	94800814 	ori	r18,r18,32
  80a250:	ac400007 	ldb	r17,0(r21)
  80a254:	003d5b06 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80a258:	d8c02d17 	ldw	r3,180(sp)
  80a25c:	d8002785 	stb	zero,158(sp)
  80a260:	1c000017 	ldw	r16,0(r3)
  80a264:	1cc00104 	addi	r19,r3,4
  80a268:	80041926 	beq	r16,zero,80b2d0 <___vfprintf_internal_r+0x1c90>
  80a26c:	d9002917 	ldw	r4,164(sp)
  80a270:	2003d016 	blt	r4,zero,80b1b4 <___vfprintf_internal_r+0x1b74>
  80a274:	200d883a 	mov	r6,r4
  80a278:	000b883a 	mov	r5,zero
  80a27c:	8009883a 	mov	r4,r16
  80a280:	da003d15 	stw	r8,244(sp)
  80a284:	080dbf40 	call	80dbf4 <memchr>
  80a288:	da003d17 	ldw	r8,244(sp)
  80a28c:	10045426 	beq	r2,zero,80b3e0 <___vfprintf_internal_r+0x1da0>
  80a290:	1405c83a 	sub	r2,r2,r16
  80a294:	d8802e15 	stw	r2,184(sp)
  80a298:	1003cc16 	blt	r2,zero,80b1cc <___vfprintf_internal_r+0x1b8c>
  80a29c:	df002783 	ldbu	fp,158(sp)
  80a2a0:	d8802a15 	stw	r2,168(sp)
  80a2a4:	dcc02d15 	stw	r19,180(sp)
  80a2a8:	d8002915 	stw	zero,164(sp)
  80a2ac:	d8003215 	stw	zero,200(sp)
  80a2b0:	003eb006 	br	809d74 <__alt_mem_onchip_mem+0xff801d74>
  80a2b4:	18c03fcc 	andi	r3,r3,255
  80a2b8:	183f9b26 	beq	r3,zero,80a128 <__alt_mem_onchip_mem+0xff802128>
  80a2bc:	d9c02785 	stb	r7,158(sp)
  80a2c0:	003f9906 	br	80a128 <__alt_mem_onchip_mem+0xff802128>
  80a2c4:	18c03fcc 	andi	r3,r3,255
  80a2c8:	1805551e 	bne	r3,zero,80b820 <___vfprintf_internal_r+0x21e0>
  80a2cc:	01402074 	movhi	r5,129
  80a2d0:	295d0a04 	addi	r5,r5,29736
  80a2d4:	d9403915 	stw	r5,228(sp)
  80a2d8:	9080080c 	andi	r2,r18,32
  80a2dc:	103fae1e 	bne	r2,zero,80a198 <__alt_mem_onchip_mem+0xff802198>
  80a2e0:	9080040c 	andi	r2,r18,16
  80a2e4:	1002de26 	beq	r2,zero,80ae60 <___vfprintf_internal_r+0x1820>
  80a2e8:	d8c02d17 	ldw	r3,180(sp)
  80a2ec:	002d883a 	mov	r22,zero
  80a2f0:	1cc00017 	ldw	r19,0(r3)
  80a2f4:	18c00104 	addi	r3,r3,4
  80a2f8:	d8c02d15 	stw	r3,180(sp)
  80a2fc:	003fab06 	br	80a1ac <__alt_mem_onchip_mem+0xff8021ac>
  80a300:	38803fcc 	andi	r2,r7,255
  80a304:	1080201c 	xori	r2,r2,128
  80a308:	10bfe004 	addi	r2,r2,-128
  80a30c:	1002d21e 	bne	r2,zero,80ae58 <___vfprintf_internal_r+0x1818>
  80a310:	00c00044 	movi	r3,1
  80a314:	01c00804 	movi	r7,32
  80a318:	ac400007 	ldb	r17,0(r21)
  80a31c:	003d2906 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80a320:	94800054 	ori	r18,r18,1
  80a324:	ac400007 	ldb	r17,0(r21)
  80a328:	003d2606 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80a32c:	18c03fcc 	andi	r3,r3,255
  80a330:	183e0526 	beq	r3,zero,809b48 <__alt_mem_onchip_mem+0xff801b48>
  80a334:	d9c02785 	stb	r7,158(sp)
  80a338:	003e0306 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>
  80a33c:	94801014 	ori	r18,r18,64
  80a340:	ac400007 	ldb	r17,0(r21)
  80a344:	003d1f06 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80a348:	ac400007 	ldb	r17,0(r21)
  80a34c:	8a438726 	beq	r17,r9,80b16c <___vfprintf_internal_r+0x1b2c>
  80a350:	94800414 	ori	r18,r18,16
  80a354:	003d1b06 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80a358:	18c03fcc 	andi	r3,r3,255
  80a35c:	1805341e 	bne	r3,zero,80b830 <___vfprintf_internal_r+0x21f0>
  80a360:	9080080c 	andi	r2,r18,32
  80a364:	1002cd26 	beq	r2,zero,80ae9c <___vfprintf_internal_r+0x185c>
  80a368:	d9402d17 	ldw	r5,180(sp)
  80a36c:	d9002f17 	ldw	r4,188(sp)
  80a370:	28800017 	ldw	r2,0(r5)
  80a374:	2007d7fa 	srai	r3,r4,31
  80a378:	29400104 	addi	r5,r5,4
  80a37c:	d9402d15 	stw	r5,180(sp)
  80a380:	11000015 	stw	r4,0(r2)
  80a384:	10c00115 	stw	r3,4(r2)
  80a388:	003ce506 	br	809720 <__alt_mem_onchip_mem+0xff801720>
  80a38c:	d8c02d17 	ldw	r3,180(sp)
  80a390:	d9002d17 	ldw	r4,180(sp)
  80a394:	d8002785 	stb	zero,158(sp)
  80a398:	18800017 	ldw	r2,0(r3)
  80a39c:	21000104 	addi	r4,r4,4
  80a3a0:	00c00044 	movi	r3,1
  80a3a4:	d8c02a15 	stw	r3,168(sp)
  80a3a8:	d8801405 	stb	r2,80(sp)
  80a3ac:	d9002d15 	stw	r4,180(sp)
  80a3b0:	d8c02e15 	stw	r3,184(sp)
  80a3b4:	d8002915 	stw	zero,164(sp)
  80a3b8:	d8003215 	stw	zero,200(sp)
  80a3bc:	dc001404 	addi	r16,sp,80
  80a3c0:	0039883a 	mov	fp,zero
  80a3c4:	003e7206 	br	809d90 <__alt_mem_onchip_mem+0xff801d90>
  80a3c8:	01002074 	movhi	r4,129
  80a3cc:	211d0a04 	addi	r4,r4,29736
  80a3d0:	0039883a 	mov	fp,zero
  80a3d4:	d9003915 	stw	r4,228(sp)
  80a3d8:	04401e04 	movi	r17,120
  80a3dc:	003f8206 	br	80a1e8 <__alt_mem_onchip_mem+0xff8021e8>
  80a3e0:	18c03fcc 	andi	r3,r3,255
  80a3e4:	1805061e 	bne	r3,zero,80b800 <___vfprintf_internal_r+0x21c0>
  80a3e8:	883d9126 	beq	r17,zero,809a30 <__alt_mem_onchip_mem+0xff801a30>
  80a3ec:	00c00044 	movi	r3,1
  80a3f0:	d8c02a15 	stw	r3,168(sp)
  80a3f4:	dc401405 	stb	r17,80(sp)
  80a3f8:	d8002785 	stb	zero,158(sp)
  80a3fc:	003fec06 	br	80a3b0 <__alt_mem_onchip_mem+0xff8023b0>
  80a400:	01402074 	movhi	r5,129
  80a404:	295d0a04 	addi	r5,r5,29736
  80a408:	d9403915 	stw	r5,228(sp)
  80a40c:	d8c02d15 	stw	r3,180(sp)
  80a410:	1025883a 	mov	r18,r2
  80a414:	04401e04 	movi	r17,120
  80a418:	9d84b03a 	or	r2,r19,r22
  80a41c:	1000fc1e 	bne	r2,zero,80a810 <___vfprintf_internal_r+0x11d0>
  80a420:	0039883a 	mov	fp,zero
  80a424:	00800084 	movi	r2,2
  80a428:	10803fcc 	andi	r2,r2,255
  80a42c:	00c00044 	movi	r3,1
  80a430:	10c20f26 	beq	r2,r3,80ac70 <___vfprintf_internal_r+0x1630>
  80a434:	00c00084 	movi	r3,2
  80a438:	10fd6326 	beq	r2,r3,8099c8 <__alt_mem_onchip_mem+0xff8019c8>
  80a43c:	003e2d06 	br	809cf4 <__alt_mem_onchip_mem+0xff801cf4>
  80a440:	d8c02017 	ldw	r3,128(sp)
  80a444:	003e9306 	br	809e94 <__alt_mem_onchip_mem+0xff801e94>
  80a448:	00801944 	movi	r2,101
  80a44c:	14407e0e 	bge	r2,r17,80a648 <___vfprintf_internal_r+0x1008>
  80a450:	d9003617 	ldw	r4,216(sp)
  80a454:	d9403817 	ldw	r5,224(sp)
  80a458:	000d883a 	mov	r6,zero
  80a45c:	000f883a 	mov	r7,zero
  80a460:	d8c03c15 	stw	r3,240(sp)
  80a464:	da003d15 	stw	r8,244(sp)
  80a468:	08126d40 	call	8126d4 <__eqdf2>
  80a46c:	d8c03c17 	ldw	r3,240(sp)
  80a470:	da003d17 	ldw	r8,244(sp)
  80a474:	1000f71e 	bne	r2,zero,80a854 <___vfprintf_internal_r+0x1214>
  80a478:	d8801f17 	ldw	r2,124(sp)
  80a47c:	01002074 	movhi	r4,129
  80a480:	211d1104 	addi	r4,r4,29764
  80a484:	18c00044 	addi	r3,r3,1
  80a488:	10800044 	addi	r2,r2,1
  80a48c:	41000015 	stw	r4,0(r8)
  80a490:	01000044 	movi	r4,1
  80a494:	41000115 	stw	r4,4(r8)
  80a498:	d8c02015 	stw	r3,128(sp)
  80a49c:	d8801f15 	stw	r2,124(sp)
  80a4a0:	010001c4 	movi	r4,7
  80a4a4:	2082b816 	blt	r4,r2,80af88 <___vfprintf_internal_r+0x1948>
  80a4a8:	42000204 	addi	r8,r8,8
  80a4ac:	d8802617 	ldw	r2,152(sp)
  80a4b0:	d9403317 	ldw	r5,204(sp)
  80a4b4:	11400216 	blt	r2,r5,80a4c0 <___vfprintf_internal_r+0xe80>
  80a4b8:	9080004c 	andi	r2,r18,1
  80a4bc:	103ed526 	beq	r2,zero,80a014 <__alt_mem_onchip_mem+0xff802014>
  80a4c0:	d8803717 	ldw	r2,220(sp)
  80a4c4:	d9003417 	ldw	r4,208(sp)
  80a4c8:	d9403717 	ldw	r5,220(sp)
  80a4cc:	1887883a 	add	r3,r3,r2
  80a4d0:	d8801f17 	ldw	r2,124(sp)
  80a4d4:	41000015 	stw	r4,0(r8)
  80a4d8:	41400115 	stw	r5,4(r8)
  80a4dc:	10800044 	addi	r2,r2,1
  80a4e0:	d8c02015 	stw	r3,128(sp)
  80a4e4:	d8801f15 	stw	r2,124(sp)
  80a4e8:	010001c4 	movi	r4,7
  80a4ec:	20832916 	blt	r4,r2,80b194 <___vfprintf_internal_r+0x1b54>
  80a4f0:	42000204 	addi	r8,r8,8
  80a4f4:	d8803317 	ldw	r2,204(sp)
  80a4f8:	143fffc4 	addi	r16,r2,-1
  80a4fc:	043ec50e 	bge	zero,r16,80a014 <__alt_mem_onchip_mem+0xff802014>
  80a500:	04400404 	movi	r17,16
  80a504:	d8801f17 	ldw	r2,124(sp)
  80a508:	8c00880e 	bge	r17,r16,80a72c <___vfprintf_internal_r+0x10ec>
  80a50c:	01402074 	movhi	r5,129
  80a510:	295d1184 	addi	r5,r5,29766
  80a514:	d9402b15 	stw	r5,172(sp)
  80a518:	058001c4 	movi	r22,7
  80a51c:	dcc02c17 	ldw	r19,176(sp)
  80a520:	00000306 	br	80a530 <___vfprintf_internal_r+0xef0>
  80a524:	42000204 	addi	r8,r8,8
  80a528:	843ffc04 	addi	r16,r16,-16
  80a52c:	8c00820e 	bge	r17,r16,80a738 <___vfprintf_internal_r+0x10f8>
  80a530:	18c00404 	addi	r3,r3,16
  80a534:	10800044 	addi	r2,r2,1
  80a538:	45000015 	stw	r20,0(r8)
  80a53c:	44400115 	stw	r17,4(r8)
  80a540:	d8c02015 	stw	r3,128(sp)
  80a544:	d8801f15 	stw	r2,124(sp)
  80a548:	b0bff60e 	bge	r22,r2,80a524 <__alt_mem_onchip_mem+0xff802524>
  80a54c:	d9801e04 	addi	r6,sp,120
  80a550:	b80b883a 	mov	r5,r23
  80a554:	9809883a 	mov	r4,r19
  80a558:	080f7880 	call	80f788 <__sprint_r>
  80a55c:	103d3a1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a560:	d8c02017 	ldw	r3,128(sp)
  80a564:	d8801f17 	ldw	r2,124(sp)
  80a568:	da000404 	addi	r8,sp,16
  80a56c:	003fee06 	br	80a528 <__alt_mem_onchip_mem+0xff802528>
  80a570:	d9403117 	ldw	r5,196(sp)
  80a574:	d8802a17 	ldw	r2,168(sp)
  80a578:	28adc83a 	sub	r22,r5,r2
  80a57c:	05be630e 	bge	zero,r22,809f0c <__alt_mem_onchip_mem+0xff801f0c>
  80a580:	07000404 	movi	fp,16
  80a584:	d8801f17 	ldw	r2,124(sp)
  80a588:	e5838f0e 	bge	fp,r22,80b3c8 <___vfprintf_internal_r+0x1d88>
  80a58c:	01402074 	movhi	r5,129
  80a590:	295d1184 	addi	r5,r5,29766
  80a594:	dc403015 	stw	r17,192(sp)
  80a598:	d9402b15 	stw	r5,172(sp)
  80a59c:	b023883a 	mov	r17,r22
  80a5a0:	04c001c4 	movi	r19,7
  80a5a4:	a82d883a 	mov	r22,r21
  80a5a8:	902b883a 	mov	r21,r18
  80a5ac:	8025883a 	mov	r18,r16
  80a5b0:	dc002c17 	ldw	r16,176(sp)
  80a5b4:	00000306 	br	80a5c4 <___vfprintf_internal_r+0xf84>
  80a5b8:	8c7ffc04 	addi	r17,r17,-16
  80a5bc:	42000204 	addi	r8,r8,8
  80a5c0:	e440110e 	bge	fp,r17,80a608 <___vfprintf_internal_r+0xfc8>
  80a5c4:	18c00404 	addi	r3,r3,16
  80a5c8:	10800044 	addi	r2,r2,1
  80a5cc:	45000015 	stw	r20,0(r8)
  80a5d0:	47000115 	stw	fp,4(r8)
  80a5d4:	d8c02015 	stw	r3,128(sp)
  80a5d8:	d8801f15 	stw	r2,124(sp)
  80a5dc:	98bff60e 	bge	r19,r2,80a5b8 <__alt_mem_onchip_mem+0xff8025b8>
  80a5e0:	d9801e04 	addi	r6,sp,120
  80a5e4:	b80b883a 	mov	r5,r23
  80a5e8:	8009883a 	mov	r4,r16
  80a5ec:	080f7880 	call	80f788 <__sprint_r>
  80a5f0:	103d151e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a5f4:	8c7ffc04 	addi	r17,r17,-16
  80a5f8:	d8c02017 	ldw	r3,128(sp)
  80a5fc:	d8801f17 	ldw	r2,124(sp)
  80a600:	da000404 	addi	r8,sp,16
  80a604:	e47fef16 	blt	fp,r17,80a5c4 <__alt_mem_onchip_mem+0xff8025c4>
  80a608:	9021883a 	mov	r16,r18
  80a60c:	a825883a 	mov	r18,r21
  80a610:	b02b883a 	mov	r21,r22
  80a614:	882d883a 	mov	r22,r17
  80a618:	dc403017 	ldw	r17,192(sp)
  80a61c:	d9002b17 	ldw	r4,172(sp)
  80a620:	1d87883a 	add	r3,r3,r22
  80a624:	10800044 	addi	r2,r2,1
  80a628:	41000015 	stw	r4,0(r8)
  80a62c:	45800115 	stw	r22,4(r8)
  80a630:	d8c02015 	stw	r3,128(sp)
  80a634:	d8801f15 	stw	r2,124(sp)
  80a638:	010001c4 	movi	r4,7
  80a63c:	20818e16 	blt	r4,r2,80ac78 <___vfprintf_internal_r+0x1638>
  80a640:	42000204 	addi	r8,r8,8
  80a644:	003e3106 	br	809f0c <__alt_mem_onchip_mem+0xff801f0c>
  80a648:	d9403317 	ldw	r5,204(sp)
  80a64c:	00800044 	movi	r2,1
  80a650:	18c00044 	addi	r3,r3,1
  80a654:	1141530e 	bge	r2,r5,80aba4 <___vfprintf_internal_r+0x1564>
  80a658:	dc401f17 	ldw	r17,124(sp)
  80a65c:	00800044 	movi	r2,1
  80a660:	40800115 	stw	r2,4(r8)
  80a664:	8c400044 	addi	r17,r17,1
  80a668:	44000015 	stw	r16,0(r8)
  80a66c:	d8c02015 	stw	r3,128(sp)
  80a670:	dc401f15 	stw	r17,124(sp)
  80a674:	008001c4 	movi	r2,7
  80a678:	14416b16 	blt	r2,r17,80ac28 <___vfprintf_internal_r+0x15e8>
  80a67c:	42000204 	addi	r8,r8,8
  80a680:	d8803717 	ldw	r2,220(sp)
  80a684:	d9003417 	ldw	r4,208(sp)
  80a688:	8c400044 	addi	r17,r17,1
  80a68c:	10c7883a 	add	r3,r2,r3
  80a690:	40800115 	stw	r2,4(r8)
  80a694:	41000015 	stw	r4,0(r8)
  80a698:	d8c02015 	stw	r3,128(sp)
  80a69c:	dc401f15 	stw	r17,124(sp)
  80a6a0:	008001c4 	movi	r2,7
  80a6a4:	14416916 	blt	r2,r17,80ac4c <___vfprintf_internal_r+0x160c>
  80a6a8:	45800204 	addi	r22,r8,8
  80a6ac:	d9003617 	ldw	r4,216(sp)
  80a6b0:	d9403817 	ldw	r5,224(sp)
  80a6b4:	000d883a 	mov	r6,zero
  80a6b8:	000f883a 	mov	r7,zero
  80a6bc:	d8c03c15 	stw	r3,240(sp)
  80a6c0:	08126d40 	call	8126d4 <__eqdf2>
  80a6c4:	d8c03c17 	ldw	r3,240(sp)
  80a6c8:	1000bc26 	beq	r2,zero,80a9bc <___vfprintf_internal_r+0x137c>
  80a6cc:	d9403317 	ldw	r5,204(sp)
  80a6d0:	84000044 	addi	r16,r16,1
  80a6d4:	8c400044 	addi	r17,r17,1
  80a6d8:	28bfffc4 	addi	r2,r5,-1
  80a6dc:	1887883a 	add	r3,r3,r2
  80a6e0:	b0800115 	stw	r2,4(r22)
  80a6e4:	b4000015 	stw	r16,0(r22)
  80a6e8:	d8c02015 	stw	r3,128(sp)
  80a6ec:	dc401f15 	stw	r17,124(sp)
  80a6f0:	008001c4 	movi	r2,7
  80a6f4:	14414316 	blt	r2,r17,80ac04 <___vfprintf_internal_r+0x15c4>
  80a6f8:	b5800204 	addi	r22,r22,8
  80a6fc:	d9003a17 	ldw	r4,232(sp)
  80a700:	df0022c4 	addi	fp,sp,139
  80a704:	8c400044 	addi	r17,r17,1
  80a708:	20c7883a 	add	r3,r4,r3
  80a70c:	b7000015 	stw	fp,0(r22)
  80a710:	b1000115 	stw	r4,4(r22)
  80a714:	d8c02015 	stw	r3,128(sp)
  80a718:	dc401f15 	stw	r17,124(sp)
  80a71c:	008001c4 	movi	r2,7
  80a720:	14400e16 	blt	r2,r17,80a75c <___vfprintf_internal_r+0x111c>
  80a724:	b2000204 	addi	r8,r22,8
  80a728:	003e3a06 	br	80a014 <__alt_mem_onchip_mem+0xff802014>
  80a72c:	01002074 	movhi	r4,129
  80a730:	211d1184 	addi	r4,r4,29766
  80a734:	d9002b15 	stw	r4,172(sp)
  80a738:	d9002b17 	ldw	r4,172(sp)
  80a73c:	1c07883a 	add	r3,r3,r16
  80a740:	44000115 	stw	r16,4(r8)
  80a744:	41000015 	stw	r4,0(r8)
  80a748:	10800044 	addi	r2,r2,1
  80a74c:	d8c02015 	stw	r3,128(sp)
  80a750:	d8801f15 	stw	r2,124(sp)
  80a754:	010001c4 	movi	r4,7
  80a758:	20be2d0e 	bge	r4,r2,80a010 <__alt_mem_onchip_mem+0xff802010>
  80a75c:	d9002c17 	ldw	r4,176(sp)
  80a760:	d9801e04 	addi	r6,sp,120
  80a764:	b80b883a 	mov	r5,r23
  80a768:	080f7880 	call	80f788 <__sprint_r>
  80a76c:	103cb61e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a770:	d8c02017 	ldw	r3,128(sp)
  80a774:	da000404 	addi	r8,sp,16
  80a778:	003e2606 	br	80a014 <__alt_mem_onchip_mem+0xff802014>
  80a77c:	d9002c17 	ldw	r4,176(sp)
  80a780:	d9801e04 	addi	r6,sp,120
  80a784:	b80b883a 	mov	r5,r23
  80a788:	080f7880 	call	80f788 <__sprint_r>
  80a78c:	103e5d26 	beq	r2,zero,80a104 <__alt_mem_onchip_mem+0xff802104>
  80a790:	003cad06 	br	809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a794:	d9002c17 	ldw	r4,176(sp)
  80a798:	d9801e04 	addi	r6,sp,120
  80a79c:	b80b883a 	mov	r5,r23
  80a7a0:	080f7880 	call	80f788 <__sprint_r>
  80a7a4:	103ca81e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a7a8:	d8c02017 	ldw	r3,128(sp)
  80a7ac:	da000404 	addi	r8,sp,16
  80a7b0:	003e0b06 	br	809fe0 <__alt_mem_onchip_mem+0xff801fe0>
  80a7b4:	d9002c17 	ldw	r4,176(sp)
  80a7b8:	d9801e04 	addi	r6,sp,120
  80a7bc:	b80b883a 	mov	r5,r23
  80a7c0:	080f7880 	call	80f788 <__sprint_r>
  80a7c4:	103ca01e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a7c8:	d8c02017 	ldw	r3,128(sp)
  80a7cc:	da000404 	addi	r8,sp,16
  80a7d0:	003dbd06 	br	809ec8 <__alt_mem_onchip_mem+0xff801ec8>
  80a7d4:	d9002c17 	ldw	r4,176(sp)
  80a7d8:	d9801e04 	addi	r6,sp,120
  80a7dc:	b80b883a 	mov	r5,r23
  80a7e0:	080f7880 	call	80f788 <__sprint_r>
  80a7e4:	103c981e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a7e8:	d8c02017 	ldw	r3,128(sp)
  80a7ec:	da000404 	addi	r8,sp,16
  80a7f0:	003dc306 	br	809f00 <__alt_mem_onchip_mem+0xff801f00>
  80a7f4:	d8802917 	ldw	r2,164(sp)
  80a7f8:	d8002785 	stb	zero,158(sp)
  80a7fc:	103f0616 	blt	r2,zero,80a418 <__alt_mem_onchip_mem+0xff802418>
  80a800:	00ffdfc4 	movi	r3,-129
  80a804:	9d84b03a 	or	r2,r19,r22
  80a808:	90e4703a 	and	r18,r18,r3
  80a80c:	103c6b26 	beq	r2,zero,8099bc <__alt_mem_onchip_mem+0xff8019bc>
  80a810:	0039883a 	mov	fp,zero
  80a814:	003e7406 	br	80a1e8 <__alt_mem_onchip_mem+0xff8021e8>
  80a818:	9080040c 	andi	r2,r18,16
  80a81c:	1001b326 	beq	r2,zero,80aeec <___vfprintf_internal_r+0x18ac>
  80a820:	d9002d17 	ldw	r4,180(sp)
  80a824:	d9402917 	ldw	r5,164(sp)
  80a828:	d8002785 	stb	zero,158(sp)
  80a82c:	20800104 	addi	r2,r4,4
  80a830:	24c00017 	ldw	r19,0(r4)
  80a834:	002d883a 	mov	r22,zero
  80a838:	2801b516 	blt	r5,zero,80af10 <___vfprintf_internal_r+0x18d0>
  80a83c:	00ffdfc4 	movi	r3,-129
  80a840:	d8802d15 	stw	r2,180(sp)
  80a844:	90e4703a 	and	r18,r18,r3
  80a848:	983d2726 	beq	r19,zero,809ce8 <__alt_mem_onchip_mem+0xff801ce8>
  80a84c:	0039883a 	mov	fp,zero
  80a850:	003d2a06 	br	809cfc <__alt_mem_onchip_mem+0xff801cfc>
  80a854:	dc402617 	ldw	r17,152(sp)
  80a858:	0441d30e 	bge	zero,r17,80afa8 <___vfprintf_internal_r+0x1968>
  80a85c:	dc403217 	ldw	r17,200(sp)
  80a860:	d8803317 	ldw	r2,204(sp)
  80a864:	1440010e 	bge	r2,r17,80a86c <___vfprintf_internal_r+0x122c>
  80a868:	1023883a 	mov	r17,r2
  80a86c:	04400a0e 	bge	zero,r17,80a898 <___vfprintf_internal_r+0x1258>
  80a870:	d8801f17 	ldw	r2,124(sp)
  80a874:	1c47883a 	add	r3,r3,r17
  80a878:	44000015 	stw	r16,0(r8)
  80a87c:	10800044 	addi	r2,r2,1
  80a880:	44400115 	stw	r17,4(r8)
  80a884:	d8c02015 	stw	r3,128(sp)
  80a888:	d8801f15 	stw	r2,124(sp)
  80a88c:	010001c4 	movi	r4,7
  80a890:	20826516 	blt	r4,r2,80b228 <___vfprintf_internal_r+0x1be8>
  80a894:	42000204 	addi	r8,r8,8
  80a898:	88026116 	blt	r17,zero,80b220 <___vfprintf_internal_r+0x1be0>
  80a89c:	d9003217 	ldw	r4,200(sp)
  80a8a0:	2463c83a 	sub	r17,r4,r17
  80a8a4:	04407b0e 	bge	zero,r17,80aa94 <___vfprintf_internal_r+0x1454>
  80a8a8:	05800404 	movi	r22,16
  80a8ac:	d8801f17 	ldw	r2,124(sp)
  80a8b0:	b4419d0e 	bge	r22,r17,80af28 <___vfprintf_internal_r+0x18e8>
  80a8b4:	01002074 	movhi	r4,129
  80a8b8:	211d1184 	addi	r4,r4,29766
  80a8bc:	d9002b15 	stw	r4,172(sp)
  80a8c0:	070001c4 	movi	fp,7
  80a8c4:	dcc02c17 	ldw	r19,176(sp)
  80a8c8:	00000306 	br	80a8d8 <___vfprintf_internal_r+0x1298>
  80a8cc:	42000204 	addi	r8,r8,8
  80a8d0:	8c7ffc04 	addi	r17,r17,-16
  80a8d4:	b441970e 	bge	r22,r17,80af34 <___vfprintf_internal_r+0x18f4>
  80a8d8:	18c00404 	addi	r3,r3,16
  80a8dc:	10800044 	addi	r2,r2,1
  80a8e0:	45000015 	stw	r20,0(r8)
  80a8e4:	45800115 	stw	r22,4(r8)
  80a8e8:	d8c02015 	stw	r3,128(sp)
  80a8ec:	d8801f15 	stw	r2,124(sp)
  80a8f0:	e0bff60e 	bge	fp,r2,80a8cc <__alt_mem_onchip_mem+0xff8028cc>
  80a8f4:	d9801e04 	addi	r6,sp,120
  80a8f8:	b80b883a 	mov	r5,r23
  80a8fc:	9809883a 	mov	r4,r19
  80a900:	080f7880 	call	80f788 <__sprint_r>
  80a904:	103c501e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a908:	d8c02017 	ldw	r3,128(sp)
  80a90c:	d8801f17 	ldw	r2,124(sp)
  80a910:	da000404 	addi	r8,sp,16
  80a914:	003fee06 	br	80a8d0 <__alt_mem_onchip_mem+0xff8028d0>
  80a918:	d9002c17 	ldw	r4,176(sp)
  80a91c:	d9801e04 	addi	r6,sp,120
  80a920:	b80b883a 	mov	r5,r23
  80a924:	080f7880 	call	80f788 <__sprint_r>
  80a928:	103c471e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80a92c:	d8c02017 	ldw	r3,128(sp)
  80a930:	df002787 	ldb	fp,158(sp)
  80a934:	da000404 	addi	r8,sp,16
  80a938:	003d5606 	br	809e94 <__alt_mem_onchip_mem+0xff801e94>
  80a93c:	9080040c 	andi	r2,r18,16
  80a940:	10016126 	beq	r2,zero,80aec8 <___vfprintf_internal_r+0x1888>
  80a944:	d8802d17 	ldw	r2,180(sp)
  80a948:	14c00017 	ldw	r19,0(r2)
  80a94c:	10800104 	addi	r2,r2,4
  80a950:	d8802d15 	stw	r2,180(sp)
  80a954:	982dd7fa 	srai	r22,r19,31
  80a958:	b005883a 	mov	r2,r22
  80a95c:	003c8206 	br	809b68 <__alt_mem_onchip_mem+0xff801b68>
  80a960:	9080040c 	andi	r2,r18,16
  80a964:	10003526 	beq	r2,zero,80aa3c <___vfprintf_internal_r+0x13fc>
  80a968:	d9402d17 	ldw	r5,180(sp)
  80a96c:	d8c02917 	ldw	r3,164(sp)
  80a970:	d8002785 	stb	zero,158(sp)
  80a974:	28800104 	addi	r2,r5,4
  80a978:	2cc00017 	ldw	r19,0(r5)
  80a97c:	002d883a 	mov	r22,zero
  80a980:	18003716 	blt	r3,zero,80aa60 <___vfprintf_internal_r+0x1420>
  80a984:	00ffdfc4 	movi	r3,-129
  80a988:	d8802d15 	stw	r2,180(sp)
  80a98c:	90e4703a 	and	r18,r18,r3
  80a990:	0039883a 	mov	fp,zero
  80a994:	983df326 	beq	r19,zero,80a164 <__alt_mem_onchip_mem+0xff802164>
  80a998:	00800244 	movi	r2,9
  80a99c:	14fc7b36 	bltu	r2,r19,809b8c <__alt_mem_onchip_mem+0xff801b8c>
  80a9a0:	d8c02817 	ldw	r3,160(sp)
  80a9a4:	dc001dc4 	addi	r16,sp,119
  80a9a8:	9cc00c04 	addi	r19,r19,48
  80a9ac:	1c07c83a 	sub	r3,r3,r16
  80a9b0:	dcc01dc5 	stb	r19,119(sp)
  80a9b4:	d8c02e15 	stw	r3,184(sp)
  80a9b8:	003ce806 	br	809d5c <__alt_mem_onchip_mem+0xff801d5c>
  80a9bc:	d8803317 	ldw	r2,204(sp)
  80a9c0:	143fffc4 	addi	r16,r2,-1
  80a9c4:	043f4d0e 	bge	zero,r16,80a6fc <__alt_mem_onchip_mem+0xff8026fc>
  80a9c8:	07000404 	movi	fp,16
  80a9cc:	e400810e 	bge	fp,r16,80abd4 <___vfprintf_internal_r+0x1594>
  80a9d0:	01402074 	movhi	r5,129
  80a9d4:	295d1184 	addi	r5,r5,29766
  80a9d8:	d9402b15 	stw	r5,172(sp)
  80a9dc:	01c001c4 	movi	r7,7
  80a9e0:	dcc02c17 	ldw	r19,176(sp)
  80a9e4:	00000306 	br	80a9f4 <___vfprintf_internal_r+0x13b4>
  80a9e8:	b5800204 	addi	r22,r22,8
  80a9ec:	843ffc04 	addi	r16,r16,-16
  80a9f0:	e4007b0e 	bge	fp,r16,80abe0 <___vfprintf_internal_r+0x15a0>
  80a9f4:	18c00404 	addi	r3,r3,16
  80a9f8:	8c400044 	addi	r17,r17,1
  80a9fc:	b5000015 	stw	r20,0(r22)
  80aa00:	b7000115 	stw	fp,4(r22)
  80aa04:	d8c02015 	stw	r3,128(sp)
  80aa08:	dc401f15 	stw	r17,124(sp)
  80aa0c:	3c7ff60e 	bge	r7,r17,80a9e8 <__alt_mem_onchip_mem+0xff8029e8>
  80aa10:	d9801e04 	addi	r6,sp,120
  80aa14:	b80b883a 	mov	r5,r23
  80aa18:	9809883a 	mov	r4,r19
  80aa1c:	d9c03c15 	stw	r7,240(sp)
  80aa20:	080f7880 	call	80f788 <__sprint_r>
  80aa24:	d9c03c17 	ldw	r7,240(sp)
  80aa28:	103c071e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80aa2c:	d8c02017 	ldw	r3,128(sp)
  80aa30:	dc401f17 	ldw	r17,124(sp)
  80aa34:	dd800404 	addi	r22,sp,16
  80aa38:	003fec06 	br	80a9ec <__alt_mem_onchip_mem+0xff8029ec>
  80aa3c:	9080100c 	andi	r2,r18,64
  80aa40:	d8002785 	stb	zero,158(sp)
  80aa44:	10010e26 	beq	r2,zero,80ae80 <___vfprintf_internal_r+0x1840>
  80aa48:	d9002d17 	ldw	r4,180(sp)
  80aa4c:	d9402917 	ldw	r5,164(sp)
  80aa50:	002d883a 	mov	r22,zero
  80aa54:	20800104 	addi	r2,r4,4
  80aa58:	24c0000b 	ldhu	r19,0(r4)
  80aa5c:	283fc90e 	bge	r5,zero,80a984 <__alt_mem_onchip_mem+0xff802984>
  80aa60:	d8802d15 	stw	r2,180(sp)
  80aa64:	0039883a 	mov	fp,zero
  80aa68:	9d84b03a 	or	r2,r19,r22
  80aa6c:	103c461e 	bne	r2,zero,809b88 <__alt_mem_onchip_mem+0xff801b88>
  80aa70:	00800044 	movi	r2,1
  80aa74:	003e6c06 	br	80a428 <__alt_mem_onchip_mem+0xff802428>
  80aa78:	d9002c17 	ldw	r4,176(sp)
  80aa7c:	d9801e04 	addi	r6,sp,120
  80aa80:	b80b883a 	mov	r5,r23
  80aa84:	080f7880 	call	80f788 <__sprint_r>
  80aa88:	103bef1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80aa8c:	d8c02017 	ldw	r3,128(sp)
  80aa90:	da000404 	addi	r8,sp,16
  80aa94:	d9003217 	ldw	r4,200(sp)
  80aa98:	d8802617 	ldw	r2,152(sp)
  80aa9c:	d9403317 	ldw	r5,204(sp)
  80aaa0:	8123883a 	add	r17,r16,r4
  80aaa4:	11400216 	blt	r2,r5,80aab0 <___vfprintf_internal_r+0x1470>
  80aaa8:	9100004c 	andi	r4,r18,1
  80aaac:	20000d26 	beq	r4,zero,80aae4 <___vfprintf_internal_r+0x14a4>
  80aab0:	d9003717 	ldw	r4,220(sp)
  80aab4:	d9403417 	ldw	r5,208(sp)
  80aab8:	1907883a 	add	r3,r3,r4
  80aabc:	d9001f17 	ldw	r4,124(sp)
  80aac0:	41400015 	stw	r5,0(r8)
  80aac4:	d9403717 	ldw	r5,220(sp)
  80aac8:	21000044 	addi	r4,r4,1
  80aacc:	d8c02015 	stw	r3,128(sp)
  80aad0:	41400115 	stw	r5,4(r8)
  80aad4:	d9001f15 	stw	r4,124(sp)
  80aad8:	014001c4 	movi	r5,7
  80aadc:	2901e816 	blt	r5,r4,80b280 <___vfprintf_internal_r+0x1c40>
  80aae0:	42000204 	addi	r8,r8,8
  80aae4:	d9003317 	ldw	r4,204(sp)
  80aae8:	8121883a 	add	r16,r16,r4
  80aaec:	2085c83a 	sub	r2,r4,r2
  80aaf0:	8461c83a 	sub	r16,r16,r17
  80aaf4:	1400010e 	bge	r2,r16,80aafc <___vfprintf_internal_r+0x14bc>
  80aaf8:	1021883a 	mov	r16,r2
  80aafc:	04000a0e 	bge	zero,r16,80ab28 <___vfprintf_internal_r+0x14e8>
  80ab00:	d9001f17 	ldw	r4,124(sp)
  80ab04:	1c07883a 	add	r3,r3,r16
  80ab08:	44400015 	stw	r17,0(r8)
  80ab0c:	21000044 	addi	r4,r4,1
  80ab10:	44000115 	stw	r16,4(r8)
  80ab14:	d8c02015 	stw	r3,128(sp)
  80ab18:	d9001f15 	stw	r4,124(sp)
  80ab1c:	014001c4 	movi	r5,7
  80ab20:	2901fb16 	blt	r5,r4,80b310 <___vfprintf_internal_r+0x1cd0>
  80ab24:	42000204 	addi	r8,r8,8
  80ab28:	8001f716 	blt	r16,zero,80b308 <___vfprintf_internal_r+0x1cc8>
  80ab2c:	1421c83a 	sub	r16,r2,r16
  80ab30:	043d380e 	bge	zero,r16,80a014 <__alt_mem_onchip_mem+0xff802014>
  80ab34:	04400404 	movi	r17,16
  80ab38:	d8801f17 	ldw	r2,124(sp)
  80ab3c:	8c3efb0e 	bge	r17,r16,80a72c <__alt_mem_onchip_mem+0xff80272c>
  80ab40:	01402074 	movhi	r5,129
  80ab44:	295d1184 	addi	r5,r5,29766
  80ab48:	d9402b15 	stw	r5,172(sp)
  80ab4c:	058001c4 	movi	r22,7
  80ab50:	dcc02c17 	ldw	r19,176(sp)
  80ab54:	00000306 	br	80ab64 <___vfprintf_internal_r+0x1524>
  80ab58:	42000204 	addi	r8,r8,8
  80ab5c:	843ffc04 	addi	r16,r16,-16
  80ab60:	8c3ef50e 	bge	r17,r16,80a738 <__alt_mem_onchip_mem+0xff802738>
  80ab64:	18c00404 	addi	r3,r3,16
  80ab68:	10800044 	addi	r2,r2,1
  80ab6c:	45000015 	stw	r20,0(r8)
  80ab70:	44400115 	stw	r17,4(r8)
  80ab74:	d8c02015 	stw	r3,128(sp)
  80ab78:	d8801f15 	stw	r2,124(sp)
  80ab7c:	b0bff60e 	bge	r22,r2,80ab58 <__alt_mem_onchip_mem+0xff802b58>
  80ab80:	d9801e04 	addi	r6,sp,120
  80ab84:	b80b883a 	mov	r5,r23
  80ab88:	9809883a 	mov	r4,r19
  80ab8c:	080f7880 	call	80f788 <__sprint_r>
  80ab90:	103bad1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80ab94:	d8c02017 	ldw	r3,128(sp)
  80ab98:	d8801f17 	ldw	r2,124(sp)
  80ab9c:	da000404 	addi	r8,sp,16
  80aba0:	003fee06 	br	80ab5c <__alt_mem_onchip_mem+0xff802b5c>
  80aba4:	9088703a 	and	r4,r18,r2
  80aba8:	203eab1e 	bne	r4,zero,80a658 <__alt_mem_onchip_mem+0xff802658>
  80abac:	dc401f17 	ldw	r17,124(sp)
  80abb0:	40800115 	stw	r2,4(r8)
  80abb4:	44000015 	stw	r16,0(r8)
  80abb8:	8c400044 	addi	r17,r17,1
  80abbc:	d8c02015 	stw	r3,128(sp)
  80abc0:	dc401f15 	stw	r17,124(sp)
  80abc4:	008001c4 	movi	r2,7
  80abc8:	14400e16 	blt	r2,r17,80ac04 <___vfprintf_internal_r+0x15c4>
  80abcc:	45800204 	addi	r22,r8,8
  80abd0:	003eca06 	br	80a6fc <__alt_mem_onchip_mem+0xff8026fc>
  80abd4:	01002074 	movhi	r4,129
  80abd8:	211d1184 	addi	r4,r4,29766
  80abdc:	d9002b15 	stw	r4,172(sp)
  80abe0:	d8802b17 	ldw	r2,172(sp)
  80abe4:	1c07883a 	add	r3,r3,r16
  80abe8:	8c400044 	addi	r17,r17,1
  80abec:	b0800015 	stw	r2,0(r22)
  80abf0:	b4000115 	stw	r16,4(r22)
  80abf4:	d8c02015 	stw	r3,128(sp)
  80abf8:	dc401f15 	stw	r17,124(sp)
  80abfc:	008001c4 	movi	r2,7
  80ac00:	147ebd0e 	bge	r2,r17,80a6f8 <__alt_mem_onchip_mem+0xff8026f8>
  80ac04:	d9002c17 	ldw	r4,176(sp)
  80ac08:	d9801e04 	addi	r6,sp,120
  80ac0c:	b80b883a 	mov	r5,r23
  80ac10:	080f7880 	call	80f788 <__sprint_r>
  80ac14:	103b8c1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80ac18:	d8c02017 	ldw	r3,128(sp)
  80ac1c:	dc401f17 	ldw	r17,124(sp)
  80ac20:	dd800404 	addi	r22,sp,16
  80ac24:	003eb506 	br	80a6fc <__alt_mem_onchip_mem+0xff8026fc>
  80ac28:	d9002c17 	ldw	r4,176(sp)
  80ac2c:	d9801e04 	addi	r6,sp,120
  80ac30:	b80b883a 	mov	r5,r23
  80ac34:	080f7880 	call	80f788 <__sprint_r>
  80ac38:	103b831e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80ac3c:	d8c02017 	ldw	r3,128(sp)
  80ac40:	dc401f17 	ldw	r17,124(sp)
  80ac44:	da000404 	addi	r8,sp,16
  80ac48:	003e8d06 	br	80a680 <__alt_mem_onchip_mem+0xff802680>
  80ac4c:	d9002c17 	ldw	r4,176(sp)
  80ac50:	d9801e04 	addi	r6,sp,120
  80ac54:	b80b883a 	mov	r5,r23
  80ac58:	080f7880 	call	80f788 <__sprint_r>
  80ac5c:	103b7a1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80ac60:	d8c02017 	ldw	r3,128(sp)
  80ac64:	dc401f17 	ldw	r17,124(sp)
  80ac68:	dd800404 	addi	r22,sp,16
  80ac6c:	003e8f06 	br	80a6ac <__alt_mem_onchip_mem+0xff8026ac>
  80ac70:	0027883a 	mov	r19,zero
  80ac74:	003f4a06 	br	80a9a0 <__alt_mem_onchip_mem+0xff8029a0>
  80ac78:	d9002c17 	ldw	r4,176(sp)
  80ac7c:	d9801e04 	addi	r6,sp,120
  80ac80:	b80b883a 	mov	r5,r23
  80ac84:	080f7880 	call	80f788 <__sprint_r>
  80ac88:	103b6f1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80ac8c:	d8c02017 	ldw	r3,128(sp)
  80ac90:	da000404 	addi	r8,sp,16
  80ac94:	003c9d06 	br	809f0c <__alt_mem_onchip_mem+0xff801f0c>
  80ac98:	04e7c83a 	sub	r19,zero,r19
  80ac9c:	9804c03a 	cmpne	r2,r19,zero
  80aca0:	05adc83a 	sub	r22,zero,r22
  80aca4:	b0adc83a 	sub	r22,r22,r2
  80aca8:	d8802917 	ldw	r2,164(sp)
  80acac:	07000b44 	movi	fp,45
  80acb0:	df002785 	stb	fp,158(sp)
  80acb4:	10017b16 	blt	r2,zero,80b2a4 <___vfprintf_internal_r+0x1c64>
  80acb8:	00bfdfc4 	movi	r2,-129
  80acbc:	90a4703a 	and	r18,r18,r2
  80acc0:	003bb106 	br	809b88 <__alt_mem_onchip_mem+0xff801b88>
  80acc4:	d9003617 	ldw	r4,216(sp)
  80acc8:	d9403817 	ldw	r5,224(sp)
  80accc:	da003d15 	stw	r8,244(sp)
  80acd0:	080f53c0 	call	80f53c <__fpclassifyd>
  80acd4:	da003d17 	ldw	r8,244(sp)
  80acd8:	1000f026 	beq	r2,zero,80b09c <___vfprintf_internal_r+0x1a5c>
  80acdc:	d9002917 	ldw	r4,164(sp)
  80ace0:	05bff7c4 	movi	r22,-33
  80ace4:	00bfffc4 	movi	r2,-1
  80ace8:	8dac703a 	and	r22,r17,r22
  80acec:	20820026 	beq	r4,r2,80b4f0 <___vfprintf_internal_r+0x1eb0>
  80acf0:	008011c4 	movi	r2,71
  80acf4:	b081f726 	beq	r22,r2,80b4d4 <___vfprintf_internal_r+0x1e94>
  80acf8:	d9003817 	ldw	r4,224(sp)
  80acfc:	90c04014 	ori	r3,r18,256
  80ad00:	d8c02b15 	stw	r3,172(sp)
  80ad04:	20021516 	blt	r4,zero,80b55c <___vfprintf_internal_r+0x1f1c>
  80ad08:	dcc03817 	ldw	r19,224(sp)
  80ad0c:	d8002a05 	stb	zero,168(sp)
  80ad10:	00801984 	movi	r2,102
  80ad14:	8881f926 	beq	r17,r2,80b4fc <___vfprintf_internal_r+0x1ebc>
  80ad18:	00801184 	movi	r2,70
  80ad1c:	88821c26 	beq	r17,r2,80b590 <___vfprintf_internal_r+0x1f50>
  80ad20:	00801144 	movi	r2,69
  80ad24:	b081ef26 	beq	r22,r2,80b4e4 <___vfprintf_internal_r+0x1ea4>
  80ad28:	d8c02917 	ldw	r3,164(sp)
  80ad2c:	d8802104 	addi	r2,sp,132
  80ad30:	d8800315 	stw	r2,12(sp)
  80ad34:	d9403617 	ldw	r5,216(sp)
  80ad38:	d8802504 	addi	r2,sp,148
  80ad3c:	d9002c17 	ldw	r4,176(sp)
  80ad40:	d8800215 	stw	r2,8(sp)
  80ad44:	d8802604 	addi	r2,sp,152
  80ad48:	d8c00015 	stw	r3,0(sp)
  80ad4c:	d8800115 	stw	r2,4(sp)
  80ad50:	01c00084 	movi	r7,2
  80ad54:	980d883a 	mov	r6,r19
  80ad58:	d8c03c15 	stw	r3,240(sp)
  80ad5c:	da003d15 	stw	r8,244(sp)
  80ad60:	080be740 	call	80be74 <_dtoa_r>
  80ad64:	1021883a 	mov	r16,r2
  80ad68:	008019c4 	movi	r2,103
  80ad6c:	d8c03c17 	ldw	r3,240(sp)
  80ad70:	da003d17 	ldw	r8,244(sp)
  80ad74:	88817126 	beq	r17,r2,80b33c <___vfprintf_internal_r+0x1cfc>
  80ad78:	008011c4 	movi	r2,71
  80ad7c:	88829226 	beq	r17,r2,80b7c8 <___vfprintf_internal_r+0x2188>
  80ad80:	80f9883a 	add	fp,r16,r3
  80ad84:	d9003617 	ldw	r4,216(sp)
  80ad88:	000d883a 	mov	r6,zero
  80ad8c:	000f883a 	mov	r7,zero
  80ad90:	980b883a 	mov	r5,r19
  80ad94:	da003d15 	stw	r8,244(sp)
  80ad98:	08126d40 	call	8126d4 <__eqdf2>
  80ad9c:	da003d17 	ldw	r8,244(sp)
  80ada0:	10018d26 	beq	r2,zero,80b3d8 <___vfprintf_internal_r+0x1d98>
  80ada4:	d8802117 	ldw	r2,132(sp)
  80ada8:	1700062e 	bgeu	r2,fp,80adc4 <___vfprintf_internal_r+0x1784>
  80adac:	01000c04 	movi	r4,48
  80adb0:	10c00044 	addi	r3,r2,1
  80adb4:	d8c02115 	stw	r3,132(sp)
  80adb8:	11000005 	stb	r4,0(r2)
  80adbc:	d8802117 	ldw	r2,132(sp)
  80adc0:	173ffb36 	bltu	r2,fp,80adb0 <__alt_mem_onchip_mem+0xff802db0>
  80adc4:	1405c83a 	sub	r2,r2,r16
  80adc8:	d8803315 	stw	r2,204(sp)
  80adcc:	008011c4 	movi	r2,71
  80add0:	b0817626 	beq	r22,r2,80b3ac <___vfprintf_internal_r+0x1d6c>
  80add4:	00801944 	movi	r2,101
  80add8:	1442810e 	bge	r2,r17,80b7e0 <___vfprintf_internal_r+0x21a0>
  80addc:	d8c02617 	ldw	r3,152(sp)
  80ade0:	00801984 	movi	r2,102
  80ade4:	d8c03215 	stw	r3,200(sp)
  80ade8:	8881fe26 	beq	r17,r2,80b5e4 <___vfprintf_internal_r+0x1fa4>
  80adec:	d8c03217 	ldw	r3,200(sp)
  80adf0:	d9003317 	ldw	r4,204(sp)
  80adf4:	1901dd16 	blt	r3,r4,80b56c <___vfprintf_internal_r+0x1f2c>
  80adf8:	9480004c 	andi	r18,r18,1
  80adfc:	90022b1e 	bne	r18,zero,80b6ac <___vfprintf_internal_r+0x206c>
  80ae00:	1805883a 	mov	r2,r3
  80ae04:	18028016 	blt	r3,zero,80b808 <___vfprintf_internal_r+0x21c8>
  80ae08:	d8c03217 	ldw	r3,200(sp)
  80ae0c:	044019c4 	movi	r17,103
  80ae10:	d8c02e15 	stw	r3,184(sp)
  80ae14:	df002a07 	ldb	fp,168(sp)
  80ae18:	e001531e 	bne	fp,zero,80b368 <___vfprintf_internal_r+0x1d28>
  80ae1c:	df002783 	ldbu	fp,158(sp)
  80ae20:	d8802a15 	stw	r2,168(sp)
  80ae24:	dc802b17 	ldw	r18,172(sp)
  80ae28:	d8002915 	stw	zero,164(sp)
  80ae2c:	003bd106 	br	809d74 <__alt_mem_onchip_mem+0xff801d74>
  80ae30:	d8802d17 	ldw	r2,180(sp)
  80ae34:	d8c02d17 	ldw	r3,180(sp)
  80ae38:	d9002d17 	ldw	r4,180(sp)
  80ae3c:	10800017 	ldw	r2,0(r2)
  80ae40:	18c00117 	ldw	r3,4(r3)
  80ae44:	21000204 	addi	r4,r4,8
  80ae48:	d8803615 	stw	r2,216(sp)
  80ae4c:	d8c03815 	stw	r3,224(sp)
  80ae50:	d9002d15 	stw	r4,180(sp)
  80ae54:	003b7506 	br	809c2c <__alt_mem_onchip_mem+0xff801c2c>
  80ae58:	ac400007 	ldb	r17,0(r21)
  80ae5c:	003a5906 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80ae60:	9080100c 	andi	r2,r18,64
  80ae64:	1000a826 	beq	r2,zero,80b108 <___vfprintf_internal_r+0x1ac8>
  80ae68:	d9002d17 	ldw	r4,180(sp)
  80ae6c:	002d883a 	mov	r22,zero
  80ae70:	24c0000b 	ldhu	r19,0(r4)
  80ae74:	21000104 	addi	r4,r4,4
  80ae78:	d9002d15 	stw	r4,180(sp)
  80ae7c:	003ccb06 	br	80a1ac <__alt_mem_onchip_mem+0xff8021ac>
  80ae80:	d8c02d17 	ldw	r3,180(sp)
  80ae84:	d9002917 	ldw	r4,164(sp)
  80ae88:	002d883a 	mov	r22,zero
  80ae8c:	18800104 	addi	r2,r3,4
  80ae90:	1cc00017 	ldw	r19,0(r3)
  80ae94:	203ebb0e 	bge	r4,zero,80a984 <__alt_mem_onchip_mem+0xff802984>
  80ae98:	003ef106 	br	80aa60 <__alt_mem_onchip_mem+0xff802a60>
  80ae9c:	9080040c 	andi	r2,r18,16
  80aea0:	1000921e 	bne	r2,zero,80b0ec <___vfprintf_internal_r+0x1aac>
  80aea4:	9480100c 	andi	r18,r18,64
  80aea8:	90013926 	beq	r18,zero,80b390 <___vfprintf_internal_r+0x1d50>
  80aeac:	d9002d17 	ldw	r4,180(sp)
  80aeb0:	d9402f17 	ldw	r5,188(sp)
  80aeb4:	20800017 	ldw	r2,0(r4)
  80aeb8:	21000104 	addi	r4,r4,4
  80aebc:	d9002d15 	stw	r4,180(sp)
  80aec0:	1140000d 	sth	r5,0(r2)
  80aec4:	003a1606 	br	809720 <__alt_mem_onchip_mem+0xff801720>
  80aec8:	9080100c 	andi	r2,r18,64
  80aecc:	10008026 	beq	r2,zero,80b0d0 <___vfprintf_internal_r+0x1a90>
  80aed0:	d8c02d17 	ldw	r3,180(sp)
  80aed4:	1cc0000f 	ldh	r19,0(r3)
  80aed8:	18c00104 	addi	r3,r3,4
  80aedc:	d8c02d15 	stw	r3,180(sp)
  80aee0:	982dd7fa 	srai	r22,r19,31
  80aee4:	b005883a 	mov	r2,r22
  80aee8:	003b1f06 	br	809b68 <__alt_mem_onchip_mem+0xff801b68>
  80aeec:	9080100c 	andi	r2,r18,64
  80aef0:	d8002785 	stb	zero,158(sp)
  80aef4:	10008a1e 	bne	r2,zero,80b120 <___vfprintf_internal_r+0x1ae0>
  80aef8:	d9402d17 	ldw	r5,180(sp)
  80aefc:	d8c02917 	ldw	r3,164(sp)
  80af00:	002d883a 	mov	r22,zero
  80af04:	28800104 	addi	r2,r5,4
  80af08:	2cc00017 	ldw	r19,0(r5)
  80af0c:	183e4b0e 	bge	r3,zero,80a83c <__alt_mem_onchip_mem+0xff80283c>
  80af10:	9d86b03a 	or	r3,r19,r22
  80af14:	d8802d15 	stw	r2,180(sp)
  80af18:	183e4c1e 	bne	r3,zero,80a84c <__alt_mem_onchip_mem+0xff80284c>
  80af1c:	0039883a 	mov	fp,zero
  80af20:	0005883a 	mov	r2,zero
  80af24:	003d4006 	br	80a428 <__alt_mem_onchip_mem+0xff802428>
  80af28:	01402074 	movhi	r5,129
  80af2c:	295d1184 	addi	r5,r5,29766
  80af30:	d9402b15 	stw	r5,172(sp)
  80af34:	d9402b17 	ldw	r5,172(sp)
  80af38:	1c47883a 	add	r3,r3,r17
  80af3c:	10800044 	addi	r2,r2,1
  80af40:	41400015 	stw	r5,0(r8)
  80af44:	44400115 	stw	r17,4(r8)
  80af48:	d8c02015 	stw	r3,128(sp)
  80af4c:	d8801f15 	stw	r2,124(sp)
  80af50:	010001c4 	movi	r4,7
  80af54:	20bec816 	blt	r4,r2,80aa78 <__alt_mem_onchip_mem+0xff802a78>
  80af58:	42000204 	addi	r8,r8,8
  80af5c:	003ecd06 	br	80aa94 <__alt_mem_onchip_mem+0xff802a94>
  80af60:	d9002917 	ldw	r4,164(sp)
  80af64:	d8002785 	stb	zero,158(sp)
  80af68:	203d2d16 	blt	r4,zero,80a420 <__alt_mem_onchip_mem+0xff802420>
  80af6c:	00bfdfc4 	movi	r2,-129
  80af70:	90a4703a 	and	r18,r18,r2
  80af74:	003a9106 	br	8099bc <__alt_mem_onchip_mem+0xff8019bc>
  80af78:	01002074 	movhi	r4,129
  80af7c:	211d1184 	addi	r4,r4,29766
  80af80:	d9002b15 	stw	r4,172(sp)
  80af84:	003c0c06 	br	809fb8 <__alt_mem_onchip_mem+0xff801fb8>
  80af88:	d9002c17 	ldw	r4,176(sp)
  80af8c:	d9801e04 	addi	r6,sp,120
  80af90:	b80b883a 	mov	r5,r23
  80af94:	080f7880 	call	80f788 <__sprint_r>
  80af98:	103aab1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80af9c:	d8c02017 	ldw	r3,128(sp)
  80afa0:	da000404 	addi	r8,sp,16
  80afa4:	003d4106 	br	80a4ac <__alt_mem_onchip_mem+0xff8024ac>
  80afa8:	d8801f17 	ldw	r2,124(sp)
  80afac:	01402074 	movhi	r5,129
  80afb0:	01000044 	movi	r4,1
  80afb4:	18c00044 	addi	r3,r3,1
  80afb8:	10800044 	addi	r2,r2,1
  80afbc:	295d1104 	addi	r5,r5,29764
  80afc0:	41000115 	stw	r4,4(r8)
  80afc4:	41400015 	stw	r5,0(r8)
  80afc8:	d8c02015 	stw	r3,128(sp)
  80afcc:	d8801f15 	stw	r2,124(sp)
  80afd0:	010001c4 	movi	r4,7
  80afd4:	20805c16 	blt	r4,r2,80b148 <___vfprintf_internal_r+0x1b08>
  80afd8:	42000204 	addi	r8,r8,8
  80afdc:	8800041e 	bne	r17,zero,80aff0 <___vfprintf_internal_r+0x19b0>
  80afe0:	d8803317 	ldw	r2,204(sp)
  80afe4:	1000021e 	bne	r2,zero,80aff0 <___vfprintf_internal_r+0x19b0>
  80afe8:	9080004c 	andi	r2,r18,1
  80afec:	103c0926 	beq	r2,zero,80a014 <__alt_mem_onchip_mem+0xff802014>
  80aff0:	d9003717 	ldw	r4,220(sp)
  80aff4:	d8801f17 	ldw	r2,124(sp)
  80aff8:	d9403417 	ldw	r5,208(sp)
  80affc:	20c7883a 	add	r3,r4,r3
  80b000:	10800044 	addi	r2,r2,1
  80b004:	41000115 	stw	r4,4(r8)
  80b008:	41400015 	stw	r5,0(r8)
  80b00c:	d8c02015 	stw	r3,128(sp)
  80b010:	d8801f15 	stw	r2,124(sp)
  80b014:	010001c4 	movi	r4,7
  80b018:	20812116 	blt	r4,r2,80b4a0 <___vfprintf_internal_r+0x1e60>
  80b01c:	42000204 	addi	r8,r8,8
  80b020:	0463c83a 	sub	r17,zero,r17
  80b024:	0440730e 	bge	zero,r17,80b1f4 <___vfprintf_internal_r+0x1bb4>
  80b028:	05800404 	movi	r22,16
  80b02c:	b440860e 	bge	r22,r17,80b248 <___vfprintf_internal_r+0x1c08>
  80b030:	01402074 	movhi	r5,129
  80b034:	295d1184 	addi	r5,r5,29766
  80b038:	d9402b15 	stw	r5,172(sp)
  80b03c:	070001c4 	movi	fp,7
  80b040:	dcc02c17 	ldw	r19,176(sp)
  80b044:	00000306 	br	80b054 <___vfprintf_internal_r+0x1a14>
  80b048:	42000204 	addi	r8,r8,8
  80b04c:	8c7ffc04 	addi	r17,r17,-16
  80b050:	b440800e 	bge	r22,r17,80b254 <___vfprintf_internal_r+0x1c14>
  80b054:	18c00404 	addi	r3,r3,16
  80b058:	10800044 	addi	r2,r2,1
  80b05c:	45000015 	stw	r20,0(r8)
  80b060:	45800115 	stw	r22,4(r8)
  80b064:	d8c02015 	stw	r3,128(sp)
  80b068:	d8801f15 	stw	r2,124(sp)
  80b06c:	e0bff60e 	bge	fp,r2,80b048 <__alt_mem_onchip_mem+0xff803048>
  80b070:	d9801e04 	addi	r6,sp,120
  80b074:	b80b883a 	mov	r5,r23
  80b078:	9809883a 	mov	r4,r19
  80b07c:	080f7880 	call	80f788 <__sprint_r>
  80b080:	103a711e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b084:	d8c02017 	ldw	r3,128(sp)
  80b088:	d8801f17 	ldw	r2,124(sp)
  80b08c:	da000404 	addi	r8,sp,16
  80b090:	003fee06 	br	80b04c <__alt_mem_onchip_mem+0xff80304c>
  80b094:	00bfffc4 	movi	r2,-1
  80b098:	003a6f06 	br	809a58 <__alt_mem_onchip_mem+0xff801a58>
  80b09c:	008011c4 	movi	r2,71
  80b0a0:	1440b816 	blt	r2,r17,80b384 <___vfprintf_internal_r+0x1d44>
  80b0a4:	04002074 	movhi	r16,129
  80b0a8:	841d0304 	addi	r16,r16,29708
  80b0ac:	00c000c4 	movi	r3,3
  80b0b0:	00bfdfc4 	movi	r2,-129
  80b0b4:	d8c02a15 	stw	r3,168(sp)
  80b0b8:	90a4703a 	and	r18,r18,r2
  80b0bc:	df002783 	ldbu	fp,158(sp)
  80b0c0:	d8c02e15 	stw	r3,184(sp)
  80b0c4:	d8002915 	stw	zero,164(sp)
  80b0c8:	d8003215 	stw	zero,200(sp)
  80b0cc:	003b2906 	br	809d74 <__alt_mem_onchip_mem+0xff801d74>
  80b0d0:	d9002d17 	ldw	r4,180(sp)
  80b0d4:	24c00017 	ldw	r19,0(r4)
  80b0d8:	21000104 	addi	r4,r4,4
  80b0dc:	d9002d15 	stw	r4,180(sp)
  80b0e0:	982dd7fa 	srai	r22,r19,31
  80b0e4:	b005883a 	mov	r2,r22
  80b0e8:	003a9f06 	br	809b68 <__alt_mem_onchip_mem+0xff801b68>
  80b0ec:	d9402d17 	ldw	r5,180(sp)
  80b0f0:	d8c02f17 	ldw	r3,188(sp)
  80b0f4:	28800017 	ldw	r2,0(r5)
  80b0f8:	29400104 	addi	r5,r5,4
  80b0fc:	d9402d15 	stw	r5,180(sp)
  80b100:	10c00015 	stw	r3,0(r2)
  80b104:	00398606 	br	809720 <__alt_mem_onchip_mem+0xff801720>
  80b108:	d9402d17 	ldw	r5,180(sp)
  80b10c:	002d883a 	mov	r22,zero
  80b110:	2cc00017 	ldw	r19,0(r5)
  80b114:	29400104 	addi	r5,r5,4
  80b118:	d9402d15 	stw	r5,180(sp)
  80b11c:	003c2306 	br	80a1ac <__alt_mem_onchip_mem+0xff8021ac>
  80b120:	d8c02d17 	ldw	r3,180(sp)
  80b124:	d9002917 	ldw	r4,164(sp)
  80b128:	002d883a 	mov	r22,zero
  80b12c:	18800104 	addi	r2,r3,4
  80b130:	1cc0000b 	ldhu	r19,0(r3)
  80b134:	203dc10e 	bge	r4,zero,80a83c <__alt_mem_onchip_mem+0xff80283c>
  80b138:	003f7506 	br	80af10 <__alt_mem_onchip_mem+0xff802f10>
  80b13c:	04002074 	movhi	r16,129
  80b140:	841d0104 	addi	r16,r16,29700
  80b144:	003acc06 	br	809c78 <__alt_mem_onchip_mem+0xff801c78>
  80b148:	d9002c17 	ldw	r4,176(sp)
  80b14c:	d9801e04 	addi	r6,sp,120
  80b150:	b80b883a 	mov	r5,r23
  80b154:	080f7880 	call	80f788 <__sprint_r>
  80b158:	103a3b1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b15c:	dc402617 	ldw	r17,152(sp)
  80b160:	d8c02017 	ldw	r3,128(sp)
  80b164:	da000404 	addi	r8,sp,16
  80b168:	003f9c06 	br	80afdc <__alt_mem_onchip_mem+0xff802fdc>
  80b16c:	ac400043 	ldbu	r17,1(r21)
  80b170:	94800814 	ori	r18,r18,32
  80b174:	ad400044 	addi	r21,r21,1
  80b178:	8c403fcc 	andi	r17,r17,255
  80b17c:	8c40201c 	xori	r17,r17,128
  80b180:	8c7fe004 	addi	r17,r17,-128
  80b184:	00398f06 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80b188:	d8c02d15 	stw	r3,180(sp)
  80b18c:	0039883a 	mov	fp,zero
  80b190:	003e3506 	br	80aa68 <__alt_mem_onchip_mem+0xff802a68>
  80b194:	d9002c17 	ldw	r4,176(sp)
  80b198:	d9801e04 	addi	r6,sp,120
  80b19c:	b80b883a 	mov	r5,r23
  80b1a0:	080f7880 	call	80f788 <__sprint_r>
  80b1a4:	103a281e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b1a8:	d8c02017 	ldw	r3,128(sp)
  80b1ac:	da000404 	addi	r8,sp,16
  80b1b0:	003cd006 	br	80a4f4 <__alt_mem_onchip_mem+0xff8024f4>
  80b1b4:	8009883a 	mov	r4,r16
  80b1b8:	da003d15 	stw	r8,244(sp)
  80b1bc:	08095a80 	call	8095a8 <strlen>
  80b1c0:	d8802e15 	stw	r2,184(sp)
  80b1c4:	da003d17 	ldw	r8,244(sp)
  80b1c8:	103c340e 	bge	r2,zero,80a29c <__alt_mem_onchip_mem+0xff80229c>
  80b1cc:	0005883a 	mov	r2,zero
  80b1d0:	003c3206 	br	80a29c <__alt_mem_onchip_mem+0xff80229c>
  80b1d4:	d9002c17 	ldw	r4,176(sp)
  80b1d8:	d9801e04 	addi	r6,sp,120
  80b1dc:	b80b883a 	mov	r5,r23
  80b1e0:	080f7880 	call	80f788 <__sprint_r>
  80b1e4:	103a181e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b1e8:	d8c02017 	ldw	r3,128(sp)
  80b1ec:	d8801f17 	ldw	r2,124(sp)
  80b1f0:	da000404 	addi	r8,sp,16
  80b1f4:	d9403317 	ldw	r5,204(sp)
  80b1f8:	10800044 	addi	r2,r2,1
  80b1fc:	44000015 	stw	r16,0(r8)
  80b200:	28c7883a 	add	r3,r5,r3
  80b204:	003b7d06 	br	809ffc <__alt_mem_onchip_mem+0xff801ffc>
  80b208:	01002074 	movhi	r4,129
  80b20c:	211d1584 	addi	r4,r4,29782
  80b210:	d9003515 	stw	r4,212(sp)
  80b214:	003b1406 	br	809e68 <__alt_mem_onchip_mem+0xff801e68>
  80b218:	013fffc4 	movi	r4,-1
  80b21c:	003a3506 	br	809af4 <__alt_mem_onchip_mem+0xff801af4>
  80b220:	0023883a 	mov	r17,zero
  80b224:	003d9d06 	br	80a89c <__alt_mem_onchip_mem+0xff80289c>
  80b228:	d9002c17 	ldw	r4,176(sp)
  80b22c:	d9801e04 	addi	r6,sp,120
  80b230:	b80b883a 	mov	r5,r23
  80b234:	080f7880 	call	80f788 <__sprint_r>
  80b238:	103a031e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b23c:	d8c02017 	ldw	r3,128(sp)
  80b240:	da000404 	addi	r8,sp,16
  80b244:	003d9406 	br	80a898 <__alt_mem_onchip_mem+0xff802898>
  80b248:	01002074 	movhi	r4,129
  80b24c:	211d1184 	addi	r4,r4,29766
  80b250:	d9002b15 	stw	r4,172(sp)
  80b254:	d9002b17 	ldw	r4,172(sp)
  80b258:	1c47883a 	add	r3,r3,r17
  80b25c:	10800044 	addi	r2,r2,1
  80b260:	41000015 	stw	r4,0(r8)
  80b264:	44400115 	stw	r17,4(r8)
  80b268:	d8c02015 	stw	r3,128(sp)
  80b26c:	d8801f15 	stw	r2,124(sp)
  80b270:	010001c4 	movi	r4,7
  80b274:	20bfd716 	blt	r4,r2,80b1d4 <__alt_mem_onchip_mem+0xff8031d4>
  80b278:	42000204 	addi	r8,r8,8
  80b27c:	003fdd06 	br	80b1f4 <__alt_mem_onchip_mem+0xff8031f4>
  80b280:	d9002c17 	ldw	r4,176(sp)
  80b284:	d9801e04 	addi	r6,sp,120
  80b288:	b80b883a 	mov	r5,r23
  80b28c:	080f7880 	call	80f788 <__sprint_r>
  80b290:	1039ed1e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b294:	d8802617 	ldw	r2,152(sp)
  80b298:	d8c02017 	ldw	r3,128(sp)
  80b29c:	da000404 	addi	r8,sp,16
  80b2a0:	003e1006 	br	80aae4 <__alt_mem_onchip_mem+0xff802ae4>
  80b2a4:	00800044 	movi	r2,1
  80b2a8:	10803fcc 	andi	r2,r2,255
  80b2ac:	00c00044 	movi	r3,1
  80b2b0:	10fa3526 	beq	r2,r3,809b88 <__alt_mem_onchip_mem+0xff801b88>
  80b2b4:	00c00084 	movi	r3,2
  80b2b8:	10fbcb26 	beq	r2,r3,80a1e8 <__alt_mem_onchip_mem+0xff8021e8>
  80b2bc:	003a8f06 	br	809cfc <__alt_mem_onchip_mem+0xff801cfc>
  80b2c0:	01002074 	movhi	r4,129
  80b2c4:	211d1584 	addi	r4,r4,29782
  80b2c8:	d9003515 	stw	r4,212(sp)
  80b2cc:	003b7606 	br	80a0a8 <__alt_mem_onchip_mem+0xff8020a8>
  80b2d0:	d8802917 	ldw	r2,164(sp)
  80b2d4:	00c00184 	movi	r3,6
  80b2d8:	1880012e 	bgeu	r3,r2,80b2e0 <___vfprintf_internal_r+0x1ca0>
  80b2dc:	1805883a 	mov	r2,r3
  80b2e0:	d8802e15 	stw	r2,184(sp)
  80b2e4:	1000ef16 	blt	r2,zero,80b6a4 <___vfprintf_internal_r+0x2064>
  80b2e8:	04002074 	movhi	r16,129
  80b2ec:	d8802a15 	stw	r2,168(sp)
  80b2f0:	dcc02d15 	stw	r19,180(sp)
  80b2f4:	d8002915 	stw	zero,164(sp)
  80b2f8:	d8003215 	stw	zero,200(sp)
  80b2fc:	841d0f04 	addi	r16,r16,29756
  80b300:	0039883a 	mov	fp,zero
  80b304:	003aa206 	br	809d90 <__alt_mem_onchip_mem+0xff801d90>
  80b308:	0021883a 	mov	r16,zero
  80b30c:	003e0706 	br	80ab2c <__alt_mem_onchip_mem+0xff802b2c>
  80b310:	d9002c17 	ldw	r4,176(sp)
  80b314:	d9801e04 	addi	r6,sp,120
  80b318:	b80b883a 	mov	r5,r23
  80b31c:	080f7880 	call	80f788 <__sprint_r>
  80b320:	1039c91e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b324:	d8802617 	ldw	r2,152(sp)
  80b328:	d9403317 	ldw	r5,204(sp)
  80b32c:	d8c02017 	ldw	r3,128(sp)
  80b330:	da000404 	addi	r8,sp,16
  80b334:	2885c83a 	sub	r2,r5,r2
  80b338:	003dfb06 	br	80ab28 <__alt_mem_onchip_mem+0xff802b28>
  80b33c:	9080004c 	andi	r2,r18,1
  80b340:	103e8f1e 	bne	r2,zero,80ad80 <__alt_mem_onchip_mem+0xff802d80>
  80b344:	d8802117 	ldw	r2,132(sp)
  80b348:	003e9e06 	br	80adc4 <__alt_mem_onchip_mem+0xff802dc4>
  80b34c:	1025883a 	mov	r18,r2
  80b350:	0039883a 	mov	fp,zero
  80b354:	00800084 	movi	r2,2
  80b358:	003fd306 	br	80b2a8 <__alt_mem_onchip_mem+0xff8032a8>
  80b35c:	07000b44 	movi	fp,45
  80b360:	df002785 	stb	fp,158(sp)
  80b364:	003a4006 	br	809c68 <__alt_mem_onchip_mem+0xff801c68>
  80b368:	00c00b44 	movi	r3,45
  80b36c:	d8c02785 	stb	r3,158(sp)
  80b370:	d8802a15 	stw	r2,168(sp)
  80b374:	dc802b17 	ldw	r18,172(sp)
  80b378:	d8002915 	stw	zero,164(sp)
  80b37c:	07000b44 	movi	fp,45
  80b380:	003a8006 	br	809d84 <__alt_mem_onchip_mem+0xff801d84>
  80b384:	04002074 	movhi	r16,129
  80b388:	841d0404 	addi	r16,r16,29712
  80b38c:	003f4706 	br	80b0ac <__alt_mem_onchip_mem+0xff8030ac>
  80b390:	d8c02d17 	ldw	r3,180(sp)
  80b394:	d9002f17 	ldw	r4,188(sp)
  80b398:	18800017 	ldw	r2,0(r3)
  80b39c:	18c00104 	addi	r3,r3,4
  80b3a0:	d8c02d15 	stw	r3,180(sp)
  80b3a4:	11000015 	stw	r4,0(r2)
  80b3a8:	0038dd06 	br	809720 <__alt_mem_onchip_mem+0xff801720>
  80b3ac:	dd802617 	ldw	r22,152(sp)
  80b3b0:	00bfff44 	movi	r2,-3
  80b3b4:	b0801c16 	blt	r22,r2,80b428 <___vfprintf_internal_r+0x1de8>
  80b3b8:	d9402917 	ldw	r5,164(sp)
  80b3bc:	2d801a16 	blt	r5,r22,80b428 <___vfprintf_internal_r+0x1de8>
  80b3c0:	dd803215 	stw	r22,200(sp)
  80b3c4:	003e8906 	br	80adec <__alt_mem_onchip_mem+0xff802dec>
  80b3c8:	01002074 	movhi	r4,129
  80b3cc:	211d1184 	addi	r4,r4,29766
  80b3d0:	d9002b15 	stw	r4,172(sp)
  80b3d4:	003c9106 	br	80a61c <__alt_mem_onchip_mem+0xff80261c>
  80b3d8:	e005883a 	mov	r2,fp
  80b3dc:	003e7906 	br	80adc4 <__alt_mem_onchip_mem+0xff802dc4>
  80b3e0:	d9402917 	ldw	r5,164(sp)
  80b3e4:	df002783 	ldbu	fp,158(sp)
  80b3e8:	dcc02d15 	stw	r19,180(sp)
  80b3ec:	d9402a15 	stw	r5,168(sp)
  80b3f0:	d9402e15 	stw	r5,184(sp)
  80b3f4:	d8002915 	stw	zero,164(sp)
  80b3f8:	d8003215 	stw	zero,200(sp)
  80b3fc:	003a5d06 	br	809d74 <__alt_mem_onchip_mem+0xff801d74>
  80b400:	9080004c 	andi	r2,r18,1
  80b404:	0039883a 	mov	fp,zero
  80b408:	10000426 	beq	r2,zero,80b41c <___vfprintf_internal_r+0x1ddc>
  80b40c:	00800c04 	movi	r2,48
  80b410:	dc001dc4 	addi	r16,sp,119
  80b414:	d8801dc5 	stb	r2,119(sp)
  80b418:	003b8006 	br	80a21c <__alt_mem_onchip_mem+0xff80221c>
  80b41c:	d8002e15 	stw	zero,184(sp)
  80b420:	dc001e04 	addi	r16,sp,120
  80b424:	003a4d06 	br	809d5c <__alt_mem_onchip_mem+0xff801d5c>
  80b428:	8c7fff84 	addi	r17,r17,-2
  80b42c:	b5bfffc4 	addi	r22,r22,-1
  80b430:	dd802615 	stw	r22,152(sp)
  80b434:	dc4022c5 	stb	r17,139(sp)
  80b438:	b000bf16 	blt	r22,zero,80b738 <___vfprintf_internal_r+0x20f8>
  80b43c:	00800ac4 	movi	r2,43
  80b440:	d8802305 	stb	r2,140(sp)
  80b444:	00800244 	movi	r2,9
  80b448:	15807016 	blt	r2,r22,80b60c <___vfprintf_internal_r+0x1fcc>
  80b44c:	00800c04 	movi	r2,48
  80b450:	b5800c04 	addi	r22,r22,48
  80b454:	d8802345 	stb	r2,141(sp)
  80b458:	dd802385 	stb	r22,142(sp)
  80b45c:	d88023c4 	addi	r2,sp,143
  80b460:	df0022c4 	addi	fp,sp,139
  80b464:	d8c03317 	ldw	r3,204(sp)
  80b468:	1739c83a 	sub	fp,r2,fp
  80b46c:	d9003317 	ldw	r4,204(sp)
  80b470:	e0c7883a 	add	r3,fp,r3
  80b474:	df003a15 	stw	fp,232(sp)
  80b478:	d8c02e15 	stw	r3,184(sp)
  80b47c:	00800044 	movi	r2,1
  80b480:	1100b30e 	bge	r2,r4,80b750 <___vfprintf_internal_r+0x2110>
  80b484:	d8c02e17 	ldw	r3,184(sp)
  80b488:	18c00044 	addi	r3,r3,1
  80b48c:	d8c02e15 	stw	r3,184(sp)
  80b490:	1805883a 	mov	r2,r3
  80b494:	1800ac16 	blt	r3,zero,80b748 <___vfprintf_internal_r+0x2108>
  80b498:	d8003215 	stw	zero,200(sp)
  80b49c:	003e5d06 	br	80ae14 <__alt_mem_onchip_mem+0xff802e14>
  80b4a0:	d9002c17 	ldw	r4,176(sp)
  80b4a4:	d9801e04 	addi	r6,sp,120
  80b4a8:	b80b883a 	mov	r5,r23
  80b4ac:	080f7880 	call	80f788 <__sprint_r>
  80b4b0:	1039651e 	bne	r2,zero,809a48 <__alt_mem_onchip_mem+0xff801a48>
  80b4b4:	dc402617 	ldw	r17,152(sp)
  80b4b8:	d8c02017 	ldw	r3,128(sp)
  80b4bc:	d8801f17 	ldw	r2,124(sp)
  80b4c0:	da000404 	addi	r8,sp,16
  80b4c4:	003ed606 	br	80b020 <__alt_mem_onchip_mem+0xff803020>
  80b4c8:	582b883a 	mov	r21,r11
  80b4cc:	d8002915 	stw	zero,164(sp)
  80b4d0:	0038bd06 	br	8097c8 <__alt_mem_onchip_mem+0xff8017c8>
  80b4d4:	d8802917 	ldw	r2,164(sp)
  80b4d8:	103e071e 	bne	r2,zero,80acf8 <__alt_mem_onchip_mem+0xff802cf8>
  80b4dc:	dc002915 	stw	r16,164(sp)
  80b4e0:	003e0506 	br	80acf8 <__alt_mem_onchip_mem+0xff802cf8>
  80b4e4:	d9002917 	ldw	r4,164(sp)
  80b4e8:	20c00044 	addi	r3,r4,1
  80b4ec:	003e0f06 	br	80ad2c <__alt_mem_onchip_mem+0xff802d2c>
  80b4f0:	01400184 	movi	r5,6
  80b4f4:	d9402915 	stw	r5,164(sp)
  80b4f8:	003dff06 	br	80acf8 <__alt_mem_onchip_mem+0xff802cf8>
  80b4fc:	d8802104 	addi	r2,sp,132
  80b500:	d8800315 	stw	r2,12(sp)
  80b504:	d8802504 	addi	r2,sp,148
  80b508:	d8800215 	stw	r2,8(sp)
  80b50c:	d8802604 	addi	r2,sp,152
  80b510:	d8800115 	stw	r2,4(sp)
  80b514:	d8802917 	ldw	r2,164(sp)
  80b518:	d9403617 	ldw	r5,216(sp)
  80b51c:	d9002c17 	ldw	r4,176(sp)
  80b520:	d8800015 	stw	r2,0(sp)
  80b524:	01c000c4 	movi	r7,3
  80b528:	980d883a 	mov	r6,r19
  80b52c:	da003d15 	stw	r8,244(sp)
  80b530:	080be740 	call	80be74 <_dtoa_r>
  80b534:	d8c02917 	ldw	r3,164(sp)
  80b538:	da003d17 	ldw	r8,244(sp)
  80b53c:	1021883a 	mov	r16,r2
  80b540:	10f9883a 	add	fp,r2,r3
  80b544:	81000007 	ldb	r4,0(r16)
  80b548:	00800c04 	movi	r2,48
  80b54c:	20805e26 	beq	r4,r2,80b6c8 <___vfprintf_internal_r+0x2088>
  80b550:	d8c02617 	ldw	r3,152(sp)
  80b554:	e0f9883a 	add	fp,fp,r3
  80b558:	003e0a06 	br	80ad84 <__alt_mem_onchip_mem+0xff802d84>
  80b55c:	00c00b44 	movi	r3,45
  80b560:	24e0003c 	xorhi	r19,r4,32768
  80b564:	d8c02a05 	stb	r3,168(sp)
  80b568:	003de906 	br	80ad10 <__alt_mem_onchip_mem+0xff802d10>
  80b56c:	d8c03217 	ldw	r3,200(sp)
  80b570:	00c07a0e 	bge	zero,r3,80b75c <___vfprintf_internal_r+0x211c>
  80b574:	00800044 	movi	r2,1
  80b578:	d9003317 	ldw	r4,204(sp)
  80b57c:	1105883a 	add	r2,r2,r4
  80b580:	d8802e15 	stw	r2,184(sp)
  80b584:	10004e16 	blt	r2,zero,80b6c0 <___vfprintf_internal_r+0x2080>
  80b588:	044019c4 	movi	r17,103
  80b58c:	003e2106 	br	80ae14 <__alt_mem_onchip_mem+0xff802e14>
  80b590:	d9002917 	ldw	r4,164(sp)
  80b594:	d8802104 	addi	r2,sp,132
  80b598:	d8800315 	stw	r2,12(sp)
  80b59c:	d9000015 	stw	r4,0(sp)
  80b5a0:	d8802504 	addi	r2,sp,148
  80b5a4:	d9403617 	ldw	r5,216(sp)
  80b5a8:	d9002c17 	ldw	r4,176(sp)
  80b5ac:	d8800215 	stw	r2,8(sp)
  80b5b0:	d8802604 	addi	r2,sp,152
  80b5b4:	d8800115 	stw	r2,4(sp)
  80b5b8:	01c000c4 	movi	r7,3
  80b5bc:	980d883a 	mov	r6,r19
  80b5c0:	da003d15 	stw	r8,244(sp)
  80b5c4:	080be740 	call	80be74 <_dtoa_r>
  80b5c8:	d8c02917 	ldw	r3,164(sp)
  80b5cc:	da003d17 	ldw	r8,244(sp)
  80b5d0:	1021883a 	mov	r16,r2
  80b5d4:	00801184 	movi	r2,70
  80b5d8:	80f9883a 	add	fp,r16,r3
  80b5dc:	88bfd926 	beq	r17,r2,80b544 <__alt_mem_onchip_mem+0xff803544>
  80b5e0:	003de806 	br	80ad84 <__alt_mem_onchip_mem+0xff802d84>
  80b5e4:	d9002917 	ldw	r4,164(sp)
  80b5e8:	00c04d0e 	bge	zero,r3,80b720 <___vfprintf_internal_r+0x20e0>
  80b5ec:	2000441e 	bne	r4,zero,80b700 <___vfprintf_internal_r+0x20c0>
  80b5f0:	9480004c 	andi	r18,r18,1
  80b5f4:	9000421e 	bne	r18,zero,80b700 <___vfprintf_internal_r+0x20c0>
  80b5f8:	1805883a 	mov	r2,r3
  80b5fc:	18007016 	blt	r3,zero,80b7c0 <___vfprintf_internal_r+0x2180>
  80b600:	d8c03217 	ldw	r3,200(sp)
  80b604:	d8c02e15 	stw	r3,184(sp)
  80b608:	003e0206 	br	80ae14 <__alt_mem_onchip_mem+0xff802e14>
  80b60c:	df0022c4 	addi	fp,sp,139
  80b610:	dc002915 	stw	r16,164(sp)
  80b614:	4027883a 	mov	r19,r8
  80b618:	e021883a 	mov	r16,fp
  80b61c:	b009883a 	mov	r4,r22
  80b620:	01400284 	movi	r5,10
  80b624:	0811cbc0 	call	811cbc <__modsi3>
  80b628:	10800c04 	addi	r2,r2,48
  80b62c:	843fffc4 	addi	r16,r16,-1
  80b630:	b009883a 	mov	r4,r22
  80b634:	01400284 	movi	r5,10
  80b638:	80800005 	stb	r2,0(r16)
  80b63c:	0811c380 	call	811c38 <__divsi3>
  80b640:	102d883a 	mov	r22,r2
  80b644:	00800244 	movi	r2,9
  80b648:	15bff416 	blt	r2,r22,80b61c <__alt_mem_onchip_mem+0xff80361c>
  80b64c:	9811883a 	mov	r8,r19
  80b650:	b0800c04 	addi	r2,r22,48
  80b654:	8027883a 	mov	r19,r16
  80b658:	997fffc4 	addi	r5,r19,-1
  80b65c:	98bfffc5 	stb	r2,-1(r19)
  80b660:	dc002917 	ldw	r16,164(sp)
  80b664:	2f006a2e 	bgeu	r5,fp,80b810 <___vfprintf_internal_r+0x21d0>
  80b668:	d9c02384 	addi	r7,sp,142
  80b66c:	3ccfc83a 	sub	r7,r7,r19
  80b670:	d9002344 	addi	r4,sp,141
  80b674:	e1cf883a 	add	r7,fp,r7
  80b678:	00000106 	br	80b680 <___vfprintf_internal_r+0x2040>
  80b67c:	28800003 	ldbu	r2,0(r5)
  80b680:	20800005 	stb	r2,0(r4)
  80b684:	21000044 	addi	r4,r4,1
  80b688:	29400044 	addi	r5,r5,1
  80b68c:	393ffb1e 	bne	r7,r4,80b67c <__alt_mem_onchip_mem+0xff80367c>
  80b690:	d8802304 	addi	r2,sp,140
  80b694:	14c5c83a 	sub	r2,r2,r19
  80b698:	d8c02344 	addi	r3,sp,141
  80b69c:	1885883a 	add	r2,r3,r2
  80b6a0:	003f7006 	br	80b464 <__alt_mem_onchip_mem+0xff803464>
  80b6a4:	0005883a 	mov	r2,zero
  80b6a8:	003f0f06 	br	80b2e8 <__alt_mem_onchip_mem+0xff8032e8>
  80b6ac:	d8c03217 	ldw	r3,200(sp)
  80b6b0:	18c00044 	addi	r3,r3,1
  80b6b4:	d8c02e15 	stw	r3,184(sp)
  80b6b8:	1805883a 	mov	r2,r3
  80b6bc:	183fb20e 	bge	r3,zero,80b588 <__alt_mem_onchip_mem+0xff803588>
  80b6c0:	0005883a 	mov	r2,zero
  80b6c4:	003fb006 	br	80b588 <__alt_mem_onchip_mem+0xff803588>
  80b6c8:	d9003617 	ldw	r4,216(sp)
  80b6cc:	000d883a 	mov	r6,zero
  80b6d0:	000f883a 	mov	r7,zero
  80b6d4:	980b883a 	mov	r5,r19
  80b6d8:	d8c03c15 	stw	r3,240(sp)
  80b6dc:	da003d15 	stw	r8,244(sp)
  80b6e0:	08126d40 	call	8126d4 <__eqdf2>
  80b6e4:	d8c03c17 	ldw	r3,240(sp)
  80b6e8:	da003d17 	ldw	r8,244(sp)
  80b6ec:	103f9826 	beq	r2,zero,80b550 <__alt_mem_onchip_mem+0xff803550>
  80b6f0:	00800044 	movi	r2,1
  80b6f4:	10c7c83a 	sub	r3,r2,r3
  80b6f8:	d8c02615 	stw	r3,152(sp)
  80b6fc:	003f9506 	br	80b554 <__alt_mem_onchip_mem+0xff803554>
  80b700:	d9002917 	ldw	r4,164(sp)
  80b704:	d8c03217 	ldw	r3,200(sp)
  80b708:	20800044 	addi	r2,r4,1
  80b70c:	1885883a 	add	r2,r3,r2
  80b710:	d8802e15 	stw	r2,184(sp)
  80b714:	103dbf0e 	bge	r2,zero,80ae14 <__alt_mem_onchip_mem+0xff802e14>
  80b718:	0005883a 	mov	r2,zero
  80b71c:	003dbd06 	br	80ae14 <__alt_mem_onchip_mem+0xff802e14>
  80b720:	2000211e 	bne	r4,zero,80b7a8 <___vfprintf_internal_r+0x2168>
  80b724:	9480004c 	andi	r18,r18,1
  80b728:	90001f1e 	bne	r18,zero,80b7a8 <___vfprintf_internal_r+0x2168>
  80b72c:	00800044 	movi	r2,1
  80b730:	d8802e15 	stw	r2,184(sp)
  80b734:	003db706 	br	80ae14 <__alt_mem_onchip_mem+0xff802e14>
  80b738:	00800b44 	movi	r2,45
  80b73c:	05adc83a 	sub	r22,zero,r22
  80b740:	d8802305 	stb	r2,140(sp)
  80b744:	003f3f06 	br	80b444 <__alt_mem_onchip_mem+0xff803444>
  80b748:	0005883a 	mov	r2,zero
  80b74c:	003f5206 	br	80b498 <__alt_mem_onchip_mem+0xff803498>
  80b750:	90a4703a 	and	r18,r18,r2
  80b754:	903f4e26 	beq	r18,zero,80b490 <__alt_mem_onchip_mem+0xff803490>
  80b758:	003f4a06 	br	80b484 <__alt_mem_onchip_mem+0xff803484>
  80b75c:	00800084 	movi	r2,2
  80b760:	10c5c83a 	sub	r2,r2,r3
  80b764:	003f8406 	br	80b578 <__alt_mem_onchip_mem+0xff803578>
  80b768:	d8802d17 	ldw	r2,180(sp)
  80b76c:	d9002d17 	ldw	r4,180(sp)
  80b770:	ac400043 	ldbu	r17,1(r21)
  80b774:	10800017 	ldw	r2,0(r2)
  80b778:	582b883a 	mov	r21,r11
  80b77c:	d8802915 	stw	r2,164(sp)
  80b780:	20800104 	addi	r2,r4,4
  80b784:	d9002917 	ldw	r4,164(sp)
  80b788:	d8802d15 	stw	r2,180(sp)
  80b78c:	203e7a0e 	bge	r4,zero,80b178 <__alt_mem_onchip_mem+0xff803178>
  80b790:	8c403fcc 	andi	r17,r17,255
  80b794:	00bfffc4 	movi	r2,-1
  80b798:	8c40201c 	xori	r17,r17,128
  80b79c:	d8802915 	stw	r2,164(sp)
  80b7a0:	8c7fe004 	addi	r17,r17,-128
  80b7a4:	00380706 	br	8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  80b7a8:	d8c02917 	ldw	r3,164(sp)
  80b7ac:	18c00084 	addi	r3,r3,2
  80b7b0:	d8c02e15 	stw	r3,184(sp)
  80b7b4:	1805883a 	mov	r2,r3
  80b7b8:	183d960e 	bge	r3,zero,80ae14 <__alt_mem_onchip_mem+0xff802e14>
  80b7bc:	003fd606 	br	80b718 <__alt_mem_onchip_mem+0xff803718>
  80b7c0:	0005883a 	mov	r2,zero
  80b7c4:	003f8e06 	br	80b600 <__alt_mem_onchip_mem+0xff803600>
  80b7c8:	9080004c 	andi	r2,r18,1
  80b7cc:	103f811e 	bne	r2,zero,80b5d4 <__alt_mem_onchip_mem+0xff8035d4>
  80b7d0:	d8802117 	ldw	r2,132(sp)
  80b7d4:	1405c83a 	sub	r2,r2,r16
  80b7d8:	d8803315 	stw	r2,204(sp)
  80b7dc:	b47ef326 	beq	r22,r17,80b3ac <__alt_mem_onchip_mem+0xff8033ac>
  80b7e0:	dd802617 	ldw	r22,152(sp)
  80b7e4:	003f1106 	br	80b42c <__alt_mem_onchip_mem+0xff80342c>
  80b7e8:	d9c02785 	stb	r7,158(sp)
  80b7ec:	00390406 	br	809c00 <__alt_mem_onchip_mem+0xff801c00>
  80b7f0:	d9c02785 	stb	r7,158(sp)
  80b7f4:	0038d306 	br	809b44 <__alt_mem_onchip_mem+0xff801b44>
  80b7f8:	d9c02785 	stb	r7,158(sp)
  80b7fc:	003a6106 	br	80a184 <__alt_mem_onchip_mem+0xff802184>
  80b800:	d9c02785 	stb	r7,158(sp)
  80b804:	003af806 	br	80a3e8 <__alt_mem_onchip_mem+0xff8023e8>
  80b808:	0005883a 	mov	r2,zero
  80b80c:	003d7e06 	br	80ae08 <__alt_mem_onchip_mem+0xff802e08>
  80b810:	d8802344 	addi	r2,sp,141
  80b814:	003f1306 	br	80b464 <__alt_mem_onchip_mem+0xff803464>
  80b818:	d9c02785 	stb	r7,158(sp)
  80b81c:	00392306 	br	809cac <__alt_mem_onchip_mem+0xff801cac>
  80b820:	d9c02785 	stb	r7,158(sp)
  80b824:	003aa906 	br	80a2cc <__alt_mem_onchip_mem+0xff8022cc>
  80b828:	d9c02785 	stb	r7,158(sp)
  80b82c:	003a3d06 	br	80a124 <__alt_mem_onchip_mem+0xff802124>
  80b830:	d9c02785 	stb	r7,158(sp)
  80b834:	003aca06 	br	80a360 <__alt_mem_onchip_mem+0xff802360>

0080b838 <__vfprintf_internal>:
  80b838:	008020b4 	movhi	r2,130
  80b83c:	10a55004 	addi	r2,r2,-27328
  80b840:	300f883a 	mov	r7,r6
  80b844:	280d883a 	mov	r6,r5
  80b848:	200b883a 	mov	r5,r4
  80b84c:	11000017 	ldw	r4,0(r2)
  80b850:	08096401 	jmpi	809640 <___vfprintf_internal_r>

0080b854 <__sbprintf>:
  80b854:	2880030b 	ldhu	r2,12(r5)
  80b858:	2ac01917 	ldw	r11,100(r5)
  80b85c:	2a80038b 	ldhu	r10,14(r5)
  80b860:	2a400717 	ldw	r9,28(r5)
  80b864:	2a000917 	ldw	r8,36(r5)
  80b868:	defee204 	addi	sp,sp,-1144
  80b86c:	00c10004 	movi	r3,1024
  80b870:	dc011a15 	stw	r16,1128(sp)
  80b874:	10bfff4c 	andi	r2,r2,65533
  80b878:	2821883a 	mov	r16,r5
  80b87c:	d8cb883a 	add	r5,sp,r3
  80b880:	dc811c15 	stw	r18,1136(sp)
  80b884:	dc411b15 	stw	r17,1132(sp)
  80b888:	dfc11d15 	stw	ra,1140(sp)
  80b88c:	2025883a 	mov	r18,r4
  80b890:	d881030d 	sth	r2,1036(sp)
  80b894:	dac11915 	stw	r11,1124(sp)
  80b898:	da81038d 	sth	r10,1038(sp)
  80b89c:	da410715 	stw	r9,1052(sp)
  80b8a0:	da010915 	stw	r8,1060(sp)
  80b8a4:	dec10015 	stw	sp,1024(sp)
  80b8a8:	dec10415 	stw	sp,1040(sp)
  80b8ac:	d8c10215 	stw	r3,1032(sp)
  80b8b0:	d8c10515 	stw	r3,1044(sp)
  80b8b4:	d8010615 	stw	zero,1048(sp)
  80b8b8:	08096400 	call	809640 <___vfprintf_internal_r>
  80b8bc:	1023883a 	mov	r17,r2
  80b8c0:	10000416 	blt	r2,zero,80b8d4 <__sbprintf+0x80>
  80b8c4:	d9410004 	addi	r5,sp,1024
  80b8c8:	9009883a 	mov	r4,r18
  80b8cc:	08073e00 	call	8073e0 <_fflush_r>
  80b8d0:	10000d1e 	bne	r2,zero,80b908 <__sbprintf+0xb4>
  80b8d4:	d881030b 	ldhu	r2,1036(sp)
  80b8d8:	1080100c 	andi	r2,r2,64
  80b8dc:	10000326 	beq	r2,zero,80b8ec <__sbprintf+0x98>
  80b8e0:	8080030b 	ldhu	r2,12(r16)
  80b8e4:	10801014 	ori	r2,r2,64
  80b8e8:	8080030d 	sth	r2,12(r16)
  80b8ec:	8805883a 	mov	r2,r17
  80b8f0:	dfc11d17 	ldw	ra,1140(sp)
  80b8f4:	dc811c17 	ldw	r18,1136(sp)
  80b8f8:	dc411b17 	ldw	r17,1132(sp)
  80b8fc:	dc011a17 	ldw	r16,1128(sp)
  80b900:	dec11e04 	addi	sp,sp,1144
  80b904:	f800283a 	ret
  80b908:	047fffc4 	movi	r17,-1
  80b90c:	003ff106 	br	80b8d4 <__alt_mem_onchip_mem+0xff8038d4>

0080b910 <vfprintf>:
  80b910:	080b8381 	jmpi	80b838 <__vfprintf_internal>

0080b914 <__swbuf_r>:
  80b914:	defffb04 	addi	sp,sp,-20
  80b918:	dcc00315 	stw	r19,12(sp)
  80b91c:	dc800215 	stw	r18,8(sp)
  80b920:	dc000015 	stw	r16,0(sp)
  80b924:	dfc00415 	stw	ra,16(sp)
  80b928:	dc400115 	stw	r17,4(sp)
  80b92c:	2025883a 	mov	r18,r4
  80b930:	2827883a 	mov	r19,r5
  80b934:	3021883a 	mov	r16,r6
  80b938:	20000226 	beq	r4,zero,80b944 <__swbuf_r+0x30>
  80b93c:	20800e17 	ldw	r2,56(r4)
  80b940:	10004226 	beq	r2,zero,80ba4c <__swbuf_r+0x138>
  80b944:	80800617 	ldw	r2,24(r16)
  80b948:	8100030b 	ldhu	r4,12(r16)
  80b94c:	80800215 	stw	r2,8(r16)
  80b950:	2080020c 	andi	r2,r4,8
  80b954:	10003626 	beq	r2,zero,80ba30 <__swbuf_r+0x11c>
  80b958:	80c00417 	ldw	r3,16(r16)
  80b95c:	18003426 	beq	r3,zero,80ba30 <__swbuf_r+0x11c>
  80b960:	2088000c 	andi	r2,r4,8192
  80b964:	9c403fcc 	andi	r17,r19,255
  80b968:	10001a26 	beq	r2,zero,80b9d4 <__swbuf_r+0xc0>
  80b96c:	80800017 	ldw	r2,0(r16)
  80b970:	81000517 	ldw	r4,20(r16)
  80b974:	10c7c83a 	sub	r3,r2,r3
  80b978:	1900200e 	bge	r3,r4,80b9fc <__swbuf_r+0xe8>
  80b97c:	18c00044 	addi	r3,r3,1
  80b980:	81000217 	ldw	r4,8(r16)
  80b984:	11400044 	addi	r5,r2,1
  80b988:	81400015 	stw	r5,0(r16)
  80b98c:	213fffc4 	addi	r4,r4,-1
  80b990:	81000215 	stw	r4,8(r16)
  80b994:	14c00005 	stb	r19,0(r2)
  80b998:	80800517 	ldw	r2,20(r16)
  80b99c:	10c01e26 	beq	r2,r3,80ba18 <__swbuf_r+0x104>
  80b9a0:	8080030b 	ldhu	r2,12(r16)
  80b9a4:	1080004c 	andi	r2,r2,1
  80b9a8:	10000226 	beq	r2,zero,80b9b4 <__swbuf_r+0xa0>
  80b9ac:	00800284 	movi	r2,10
  80b9b0:	88801926 	beq	r17,r2,80ba18 <__swbuf_r+0x104>
  80b9b4:	8805883a 	mov	r2,r17
  80b9b8:	dfc00417 	ldw	ra,16(sp)
  80b9bc:	dcc00317 	ldw	r19,12(sp)
  80b9c0:	dc800217 	ldw	r18,8(sp)
  80b9c4:	dc400117 	ldw	r17,4(sp)
  80b9c8:	dc000017 	ldw	r16,0(sp)
  80b9cc:	dec00504 	addi	sp,sp,20
  80b9d0:	f800283a 	ret
  80b9d4:	81401917 	ldw	r5,100(r16)
  80b9d8:	00b7ffc4 	movi	r2,-8193
  80b9dc:	21080014 	ori	r4,r4,8192
  80b9e0:	2884703a 	and	r2,r5,r2
  80b9e4:	80801915 	stw	r2,100(r16)
  80b9e8:	80800017 	ldw	r2,0(r16)
  80b9ec:	8100030d 	sth	r4,12(r16)
  80b9f0:	81000517 	ldw	r4,20(r16)
  80b9f4:	10c7c83a 	sub	r3,r2,r3
  80b9f8:	193fe016 	blt	r3,r4,80b97c <__alt_mem_onchip_mem+0xff80397c>
  80b9fc:	800b883a 	mov	r5,r16
  80ba00:	9009883a 	mov	r4,r18
  80ba04:	08073e00 	call	8073e0 <_fflush_r>
  80ba08:	1000071e 	bne	r2,zero,80ba28 <__swbuf_r+0x114>
  80ba0c:	80800017 	ldw	r2,0(r16)
  80ba10:	00c00044 	movi	r3,1
  80ba14:	003fda06 	br	80b980 <__alt_mem_onchip_mem+0xff803980>
  80ba18:	800b883a 	mov	r5,r16
  80ba1c:	9009883a 	mov	r4,r18
  80ba20:	08073e00 	call	8073e0 <_fflush_r>
  80ba24:	103fe326 	beq	r2,zero,80b9b4 <__alt_mem_onchip_mem+0xff8039b4>
  80ba28:	00bfffc4 	movi	r2,-1
  80ba2c:	003fe206 	br	80b9b8 <__alt_mem_onchip_mem+0xff8039b8>
  80ba30:	800b883a 	mov	r5,r16
  80ba34:	9009883a 	mov	r4,r18
  80ba38:	080bacc0 	call	80bacc <__swsetup_r>
  80ba3c:	103ffa1e 	bne	r2,zero,80ba28 <__alt_mem_onchip_mem+0xff803a28>
  80ba40:	8100030b 	ldhu	r4,12(r16)
  80ba44:	80c00417 	ldw	r3,16(r16)
  80ba48:	003fc506 	br	80b960 <__alt_mem_onchip_mem+0xff803960>
  80ba4c:	08077bc0 	call	8077bc <__sinit>
  80ba50:	003fbc06 	br	80b944 <__alt_mem_onchip_mem+0xff803944>

0080ba54 <__swbuf>:
  80ba54:	008020b4 	movhi	r2,130
  80ba58:	10a55004 	addi	r2,r2,-27328
  80ba5c:	280d883a 	mov	r6,r5
  80ba60:	200b883a 	mov	r5,r4
  80ba64:	11000017 	ldw	r4,0(r2)
  80ba68:	080b9141 	jmpi	80b914 <__swbuf_r>

0080ba6c <_write_r>:
  80ba6c:	defffd04 	addi	sp,sp,-12
  80ba70:	2805883a 	mov	r2,r5
  80ba74:	dc000015 	stw	r16,0(sp)
  80ba78:	040020b4 	movhi	r16,130
  80ba7c:	dc400115 	stw	r17,4(sp)
  80ba80:	300b883a 	mov	r5,r6
  80ba84:	842cb504 	addi	r16,r16,-19756
  80ba88:	2023883a 	mov	r17,r4
  80ba8c:	380d883a 	mov	r6,r7
  80ba90:	1009883a 	mov	r4,r2
  80ba94:	dfc00215 	stw	ra,8(sp)
  80ba98:	80000015 	stw	zero,0(r16)
  80ba9c:	0813ebc0 	call	813ebc <write>
  80baa0:	00ffffc4 	movi	r3,-1
  80baa4:	10c00526 	beq	r2,r3,80babc <_write_r+0x50>
  80baa8:	dfc00217 	ldw	ra,8(sp)
  80baac:	dc400117 	ldw	r17,4(sp)
  80bab0:	dc000017 	ldw	r16,0(sp)
  80bab4:	dec00304 	addi	sp,sp,12
  80bab8:	f800283a 	ret
  80babc:	80c00017 	ldw	r3,0(r16)
  80bac0:	183ff926 	beq	r3,zero,80baa8 <__alt_mem_onchip_mem+0xff803aa8>
  80bac4:	88c00015 	stw	r3,0(r17)
  80bac8:	003ff706 	br	80baa8 <__alt_mem_onchip_mem+0xff803aa8>

0080bacc <__swsetup_r>:
  80bacc:	008020b4 	movhi	r2,130
  80bad0:	defffd04 	addi	sp,sp,-12
  80bad4:	10a55004 	addi	r2,r2,-27328
  80bad8:	dc400115 	stw	r17,4(sp)
  80badc:	2023883a 	mov	r17,r4
  80bae0:	11000017 	ldw	r4,0(r2)
  80bae4:	dc000015 	stw	r16,0(sp)
  80bae8:	dfc00215 	stw	ra,8(sp)
  80baec:	2821883a 	mov	r16,r5
  80baf0:	20000226 	beq	r4,zero,80bafc <__swsetup_r+0x30>
  80baf4:	20800e17 	ldw	r2,56(r4)
  80baf8:	10003126 	beq	r2,zero,80bbc0 <__swsetup_r+0xf4>
  80bafc:	8080030b 	ldhu	r2,12(r16)
  80bb00:	10c0020c 	andi	r3,r2,8
  80bb04:	1009883a 	mov	r4,r2
  80bb08:	18000f26 	beq	r3,zero,80bb48 <__swsetup_r+0x7c>
  80bb0c:	80c00417 	ldw	r3,16(r16)
  80bb10:	18001526 	beq	r3,zero,80bb68 <__swsetup_r+0x9c>
  80bb14:	1100004c 	andi	r4,r2,1
  80bb18:	20001c1e 	bne	r4,zero,80bb8c <__swsetup_r+0xc0>
  80bb1c:	1080008c 	andi	r2,r2,2
  80bb20:	1000291e 	bne	r2,zero,80bbc8 <__swsetup_r+0xfc>
  80bb24:	80800517 	ldw	r2,20(r16)
  80bb28:	80800215 	stw	r2,8(r16)
  80bb2c:	18001c26 	beq	r3,zero,80bba0 <__swsetup_r+0xd4>
  80bb30:	0005883a 	mov	r2,zero
  80bb34:	dfc00217 	ldw	ra,8(sp)
  80bb38:	dc400117 	ldw	r17,4(sp)
  80bb3c:	dc000017 	ldw	r16,0(sp)
  80bb40:	dec00304 	addi	sp,sp,12
  80bb44:	f800283a 	ret
  80bb48:	2080040c 	andi	r2,r4,16
  80bb4c:	10002e26 	beq	r2,zero,80bc08 <__swsetup_r+0x13c>
  80bb50:	2080010c 	andi	r2,r4,4
  80bb54:	10001e1e 	bne	r2,zero,80bbd0 <__swsetup_r+0x104>
  80bb58:	80c00417 	ldw	r3,16(r16)
  80bb5c:	20800214 	ori	r2,r4,8
  80bb60:	8080030d 	sth	r2,12(r16)
  80bb64:	183feb1e 	bne	r3,zero,80bb14 <__alt_mem_onchip_mem+0xff803b14>
  80bb68:	1100a00c 	andi	r4,r2,640
  80bb6c:	01408004 	movi	r5,512
  80bb70:	217fe826 	beq	r4,r5,80bb14 <__alt_mem_onchip_mem+0xff803b14>
  80bb74:	800b883a 	mov	r5,r16
  80bb78:	8809883a 	mov	r4,r17
  80bb7c:	080849c0 	call	80849c <__smakebuf_r>
  80bb80:	8080030b 	ldhu	r2,12(r16)
  80bb84:	80c00417 	ldw	r3,16(r16)
  80bb88:	003fe206 	br	80bb14 <__alt_mem_onchip_mem+0xff803b14>
  80bb8c:	80800517 	ldw	r2,20(r16)
  80bb90:	80000215 	stw	zero,8(r16)
  80bb94:	0085c83a 	sub	r2,zero,r2
  80bb98:	80800615 	stw	r2,24(r16)
  80bb9c:	183fe41e 	bne	r3,zero,80bb30 <__alt_mem_onchip_mem+0xff803b30>
  80bba0:	80c0030b 	ldhu	r3,12(r16)
  80bba4:	0005883a 	mov	r2,zero
  80bba8:	1900200c 	andi	r4,r3,128
  80bbac:	203fe126 	beq	r4,zero,80bb34 <__alt_mem_onchip_mem+0xff803b34>
  80bbb0:	18c01014 	ori	r3,r3,64
  80bbb4:	80c0030d 	sth	r3,12(r16)
  80bbb8:	00bfffc4 	movi	r2,-1
  80bbbc:	003fdd06 	br	80bb34 <__alt_mem_onchip_mem+0xff803b34>
  80bbc0:	08077bc0 	call	8077bc <__sinit>
  80bbc4:	003fcd06 	br	80bafc <__alt_mem_onchip_mem+0xff803afc>
  80bbc8:	0005883a 	mov	r2,zero
  80bbcc:	003fd606 	br	80bb28 <__alt_mem_onchip_mem+0xff803b28>
  80bbd0:	81400c17 	ldw	r5,48(r16)
  80bbd4:	28000626 	beq	r5,zero,80bbf0 <__swsetup_r+0x124>
  80bbd8:	80801004 	addi	r2,r16,64
  80bbdc:	28800326 	beq	r5,r2,80bbec <__swsetup_r+0x120>
  80bbe0:	8809883a 	mov	r4,r17
  80bbe4:	0807b280 	call	807b28 <_free_r>
  80bbe8:	8100030b 	ldhu	r4,12(r16)
  80bbec:	80000c15 	stw	zero,48(r16)
  80bbf0:	80c00417 	ldw	r3,16(r16)
  80bbf4:	00bff6c4 	movi	r2,-37
  80bbf8:	1108703a 	and	r4,r2,r4
  80bbfc:	80000115 	stw	zero,4(r16)
  80bc00:	80c00015 	stw	r3,0(r16)
  80bc04:	003fd506 	br	80bb5c <__alt_mem_onchip_mem+0xff803b5c>
  80bc08:	00800244 	movi	r2,9
  80bc0c:	88800015 	stw	r2,0(r17)
  80bc10:	20801014 	ori	r2,r4,64
  80bc14:	8080030d 	sth	r2,12(r16)
  80bc18:	00bfffc4 	movi	r2,-1
  80bc1c:	003fc506 	br	80bb34 <__alt_mem_onchip_mem+0xff803b34>

0080bc20 <_close_r>:
  80bc20:	defffd04 	addi	sp,sp,-12
  80bc24:	dc000015 	stw	r16,0(sp)
  80bc28:	040020b4 	movhi	r16,130
  80bc2c:	dc400115 	stw	r17,4(sp)
  80bc30:	842cb504 	addi	r16,r16,-19756
  80bc34:	2023883a 	mov	r17,r4
  80bc38:	2809883a 	mov	r4,r5
  80bc3c:	dfc00215 	stw	ra,8(sp)
  80bc40:	80000015 	stw	zero,0(r16)
  80bc44:	08131040 	call	813104 <close>
  80bc48:	00ffffc4 	movi	r3,-1
  80bc4c:	10c00526 	beq	r2,r3,80bc64 <_close_r+0x44>
  80bc50:	dfc00217 	ldw	ra,8(sp)
  80bc54:	dc400117 	ldw	r17,4(sp)
  80bc58:	dc000017 	ldw	r16,0(sp)
  80bc5c:	dec00304 	addi	sp,sp,12
  80bc60:	f800283a 	ret
  80bc64:	80c00017 	ldw	r3,0(r16)
  80bc68:	183ff926 	beq	r3,zero,80bc50 <__alt_mem_onchip_mem+0xff803c50>
  80bc6c:	88c00015 	stw	r3,0(r17)
  80bc70:	003ff706 	br	80bc50 <__alt_mem_onchip_mem+0xff803c50>

0080bc74 <quorem>:
  80bc74:	defff704 	addi	sp,sp,-36
  80bc78:	dc800215 	stw	r18,8(sp)
  80bc7c:	20800417 	ldw	r2,16(r4)
  80bc80:	2c800417 	ldw	r18,16(r5)
  80bc84:	dfc00815 	stw	ra,32(sp)
  80bc88:	ddc00715 	stw	r23,28(sp)
  80bc8c:	dd800615 	stw	r22,24(sp)
  80bc90:	dd400515 	stw	r21,20(sp)
  80bc94:	dd000415 	stw	r20,16(sp)
  80bc98:	dcc00315 	stw	r19,12(sp)
  80bc9c:	dc400115 	stw	r17,4(sp)
  80bca0:	dc000015 	stw	r16,0(sp)
  80bca4:	14807116 	blt	r2,r18,80be6c <quorem+0x1f8>
  80bca8:	94bfffc4 	addi	r18,r18,-1
  80bcac:	94ad883a 	add	r22,r18,r18
  80bcb0:	b5ad883a 	add	r22,r22,r22
  80bcb4:	2c400504 	addi	r17,r5,20
  80bcb8:	8da9883a 	add	r20,r17,r22
  80bcbc:	25400504 	addi	r21,r4,20
  80bcc0:	282f883a 	mov	r23,r5
  80bcc4:	adad883a 	add	r22,r21,r22
  80bcc8:	a1400017 	ldw	r5,0(r20)
  80bccc:	2021883a 	mov	r16,r4
  80bcd0:	b1000017 	ldw	r4,0(r22)
  80bcd4:	29400044 	addi	r5,r5,1
  80bcd8:	0811d300 	call	811d30 <__udivsi3>
  80bcdc:	1027883a 	mov	r19,r2
  80bce0:	10002c26 	beq	r2,zero,80bd94 <quorem+0x120>
  80bce4:	a813883a 	mov	r9,r21
  80bce8:	880b883a 	mov	r5,r17
  80bcec:	0009883a 	mov	r4,zero
  80bcf0:	000d883a 	mov	r6,zero
  80bcf4:	2a000017 	ldw	r8,0(r5)
  80bcf8:	49c00017 	ldw	r7,0(r9)
  80bcfc:	29400104 	addi	r5,r5,4
  80bd00:	40bfffcc 	andi	r2,r8,65535
  80bd04:	14c5383a 	mul	r2,r2,r19
  80bd08:	4010d43a 	srli	r8,r8,16
  80bd0c:	38ffffcc 	andi	r3,r7,65535
  80bd10:	1105883a 	add	r2,r2,r4
  80bd14:	1008d43a 	srli	r4,r2,16
  80bd18:	44d1383a 	mul	r8,r8,r19
  80bd1c:	198d883a 	add	r6,r3,r6
  80bd20:	10ffffcc 	andi	r3,r2,65535
  80bd24:	30c7c83a 	sub	r3,r6,r3
  80bd28:	380ed43a 	srli	r7,r7,16
  80bd2c:	4105883a 	add	r2,r8,r4
  80bd30:	180dd43a 	srai	r6,r3,16
  80bd34:	113fffcc 	andi	r4,r2,65535
  80bd38:	390fc83a 	sub	r7,r7,r4
  80bd3c:	398d883a 	add	r6,r7,r6
  80bd40:	300e943a 	slli	r7,r6,16
  80bd44:	18ffffcc 	andi	r3,r3,65535
  80bd48:	1008d43a 	srli	r4,r2,16
  80bd4c:	38ceb03a 	or	r7,r7,r3
  80bd50:	49c00015 	stw	r7,0(r9)
  80bd54:	300dd43a 	srai	r6,r6,16
  80bd58:	4a400104 	addi	r9,r9,4
  80bd5c:	a17fe52e 	bgeu	r20,r5,80bcf4 <__alt_mem_onchip_mem+0xff803cf4>
  80bd60:	b0800017 	ldw	r2,0(r22)
  80bd64:	10000b1e 	bne	r2,zero,80bd94 <quorem+0x120>
  80bd68:	b0bfff04 	addi	r2,r22,-4
  80bd6c:	a880082e 	bgeu	r21,r2,80bd90 <quorem+0x11c>
  80bd70:	b0ffff17 	ldw	r3,-4(r22)
  80bd74:	18000326 	beq	r3,zero,80bd84 <quorem+0x110>
  80bd78:	00000506 	br	80bd90 <quorem+0x11c>
  80bd7c:	10c00017 	ldw	r3,0(r2)
  80bd80:	1800031e 	bne	r3,zero,80bd90 <quorem+0x11c>
  80bd84:	10bfff04 	addi	r2,r2,-4
  80bd88:	94bfffc4 	addi	r18,r18,-1
  80bd8c:	a8bffb36 	bltu	r21,r2,80bd7c <__alt_mem_onchip_mem+0xff803d7c>
  80bd90:	84800415 	stw	r18,16(r16)
  80bd94:	b80b883a 	mov	r5,r23
  80bd98:	8009883a 	mov	r4,r16
  80bd9c:	080e8440 	call	80e844 <__mcmp>
  80bda0:	10002616 	blt	r2,zero,80be3c <quorem+0x1c8>
  80bda4:	9cc00044 	addi	r19,r19,1
  80bda8:	a805883a 	mov	r2,r21
  80bdac:	000b883a 	mov	r5,zero
  80bdb0:	11000017 	ldw	r4,0(r2)
  80bdb4:	89800017 	ldw	r6,0(r17)
  80bdb8:	10800104 	addi	r2,r2,4
  80bdbc:	20ffffcc 	andi	r3,r4,65535
  80bdc0:	194b883a 	add	r5,r3,r5
  80bdc4:	30ffffcc 	andi	r3,r6,65535
  80bdc8:	28c7c83a 	sub	r3,r5,r3
  80bdcc:	300cd43a 	srli	r6,r6,16
  80bdd0:	2008d43a 	srli	r4,r4,16
  80bdd4:	180bd43a 	srai	r5,r3,16
  80bdd8:	18ffffcc 	andi	r3,r3,65535
  80bddc:	2189c83a 	sub	r4,r4,r6
  80bde0:	2149883a 	add	r4,r4,r5
  80bde4:	200c943a 	slli	r6,r4,16
  80bde8:	8c400104 	addi	r17,r17,4
  80bdec:	200bd43a 	srai	r5,r4,16
  80bdf0:	30c6b03a 	or	r3,r6,r3
  80bdf4:	10ffff15 	stw	r3,-4(r2)
  80bdf8:	a47fed2e 	bgeu	r20,r17,80bdb0 <__alt_mem_onchip_mem+0xff803db0>
  80bdfc:	9485883a 	add	r2,r18,r18
  80be00:	1085883a 	add	r2,r2,r2
  80be04:	a887883a 	add	r3,r21,r2
  80be08:	18800017 	ldw	r2,0(r3)
  80be0c:	10000b1e 	bne	r2,zero,80be3c <quorem+0x1c8>
  80be10:	18bfff04 	addi	r2,r3,-4
  80be14:	a880082e 	bgeu	r21,r2,80be38 <quorem+0x1c4>
  80be18:	18ffff17 	ldw	r3,-4(r3)
  80be1c:	18000326 	beq	r3,zero,80be2c <quorem+0x1b8>
  80be20:	00000506 	br	80be38 <quorem+0x1c4>
  80be24:	10c00017 	ldw	r3,0(r2)
  80be28:	1800031e 	bne	r3,zero,80be38 <quorem+0x1c4>
  80be2c:	10bfff04 	addi	r2,r2,-4
  80be30:	94bfffc4 	addi	r18,r18,-1
  80be34:	a8bffb36 	bltu	r21,r2,80be24 <__alt_mem_onchip_mem+0xff803e24>
  80be38:	84800415 	stw	r18,16(r16)
  80be3c:	9805883a 	mov	r2,r19
  80be40:	dfc00817 	ldw	ra,32(sp)
  80be44:	ddc00717 	ldw	r23,28(sp)
  80be48:	dd800617 	ldw	r22,24(sp)
  80be4c:	dd400517 	ldw	r21,20(sp)
  80be50:	dd000417 	ldw	r20,16(sp)
  80be54:	dcc00317 	ldw	r19,12(sp)
  80be58:	dc800217 	ldw	r18,8(sp)
  80be5c:	dc400117 	ldw	r17,4(sp)
  80be60:	dc000017 	ldw	r16,0(sp)
  80be64:	dec00904 	addi	sp,sp,36
  80be68:	f800283a 	ret
  80be6c:	0005883a 	mov	r2,zero
  80be70:	003ff306 	br	80be40 <__alt_mem_onchip_mem+0xff803e40>

0080be74 <_dtoa_r>:
  80be74:	20801017 	ldw	r2,64(r4)
  80be78:	deffde04 	addi	sp,sp,-136
  80be7c:	df002015 	stw	fp,128(sp)
  80be80:	dcc01b15 	stw	r19,108(sp)
  80be84:	dc801a15 	stw	r18,104(sp)
  80be88:	dc401915 	stw	r17,100(sp)
  80be8c:	dc001815 	stw	r16,96(sp)
  80be90:	dfc02115 	stw	ra,132(sp)
  80be94:	ddc01f15 	stw	r23,124(sp)
  80be98:	dd801e15 	stw	r22,120(sp)
  80be9c:	dd401d15 	stw	r21,116(sp)
  80bea0:	dd001c15 	stw	r20,112(sp)
  80bea4:	d9c00315 	stw	r7,12(sp)
  80bea8:	2039883a 	mov	fp,r4
  80beac:	3023883a 	mov	r17,r6
  80beb0:	2825883a 	mov	r18,r5
  80beb4:	dc002417 	ldw	r16,144(sp)
  80beb8:	3027883a 	mov	r19,r6
  80bebc:	10000826 	beq	r2,zero,80bee0 <_dtoa_r+0x6c>
  80bec0:	21801117 	ldw	r6,68(r4)
  80bec4:	00c00044 	movi	r3,1
  80bec8:	100b883a 	mov	r5,r2
  80becc:	1986983a 	sll	r3,r3,r6
  80bed0:	11800115 	stw	r6,4(r2)
  80bed4:	10c00215 	stw	r3,8(r2)
  80bed8:	080e0240 	call	80e024 <_Bfree>
  80bedc:	e0001015 	stw	zero,64(fp)
  80bee0:	88002e16 	blt	r17,zero,80bf9c <_dtoa_r+0x128>
  80bee4:	80000015 	stw	zero,0(r16)
  80bee8:	889ffc2c 	andhi	r2,r17,32752
  80beec:	00dffc34 	movhi	r3,32752
  80bef0:	10c01c26 	beq	r2,r3,80bf64 <_dtoa_r+0xf0>
  80bef4:	000d883a 	mov	r6,zero
  80bef8:	000f883a 	mov	r7,zero
  80befc:	9009883a 	mov	r4,r18
  80bf00:	980b883a 	mov	r5,r19
  80bf04:	08126d40 	call	8126d4 <__eqdf2>
  80bf08:	10002b1e 	bne	r2,zero,80bfb8 <_dtoa_r+0x144>
  80bf0c:	d9c02317 	ldw	r7,140(sp)
  80bf10:	00800044 	movi	r2,1
  80bf14:	38800015 	stw	r2,0(r7)
  80bf18:	d8802517 	ldw	r2,148(sp)
  80bf1c:	10019e26 	beq	r2,zero,80c598 <_dtoa_r+0x724>
  80bf20:	d8c02517 	ldw	r3,148(sp)
  80bf24:	00802074 	movhi	r2,129
  80bf28:	109d1144 	addi	r2,r2,29765
  80bf2c:	18800015 	stw	r2,0(r3)
  80bf30:	10bfffc4 	addi	r2,r2,-1
  80bf34:	dfc02117 	ldw	ra,132(sp)
  80bf38:	df002017 	ldw	fp,128(sp)
  80bf3c:	ddc01f17 	ldw	r23,124(sp)
  80bf40:	dd801e17 	ldw	r22,120(sp)
  80bf44:	dd401d17 	ldw	r21,116(sp)
  80bf48:	dd001c17 	ldw	r20,112(sp)
  80bf4c:	dcc01b17 	ldw	r19,108(sp)
  80bf50:	dc801a17 	ldw	r18,104(sp)
  80bf54:	dc401917 	ldw	r17,100(sp)
  80bf58:	dc001817 	ldw	r16,96(sp)
  80bf5c:	dec02204 	addi	sp,sp,136
  80bf60:	f800283a 	ret
  80bf64:	d8c02317 	ldw	r3,140(sp)
  80bf68:	0089c3c4 	movi	r2,9999
  80bf6c:	18800015 	stw	r2,0(r3)
  80bf70:	90017726 	beq	r18,zero,80c550 <_dtoa_r+0x6dc>
  80bf74:	00802074 	movhi	r2,129
  80bf78:	109d1d04 	addi	r2,r2,29812
  80bf7c:	d9002517 	ldw	r4,148(sp)
  80bf80:	203fec26 	beq	r4,zero,80bf34 <__alt_mem_onchip_mem+0xff803f34>
  80bf84:	10c000c7 	ldb	r3,3(r2)
  80bf88:	1801781e 	bne	r3,zero,80c56c <_dtoa_r+0x6f8>
  80bf8c:	10c000c4 	addi	r3,r2,3
  80bf90:	d9802517 	ldw	r6,148(sp)
  80bf94:	30c00015 	stw	r3,0(r6)
  80bf98:	003fe606 	br	80bf34 <__alt_mem_onchip_mem+0xff803f34>
  80bf9c:	04e00034 	movhi	r19,32768
  80bfa0:	9cffffc4 	addi	r19,r19,-1
  80bfa4:	00800044 	movi	r2,1
  80bfa8:	8ce6703a 	and	r19,r17,r19
  80bfac:	80800015 	stw	r2,0(r16)
  80bfb0:	9823883a 	mov	r17,r19
  80bfb4:	003fcc06 	br	80bee8 <__alt_mem_onchip_mem+0xff803ee8>
  80bfb8:	d8800204 	addi	r2,sp,8
  80bfbc:	d8800015 	stw	r2,0(sp)
  80bfc0:	d9c00104 	addi	r7,sp,4
  80bfc4:	900b883a 	mov	r5,r18
  80bfc8:	980d883a 	mov	r6,r19
  80bfcc:	e009883a 	mov	r4,fp
  80bfd0:	8820d53a 	srli	r16,r17,20
  80bfd4:	080ec100 	call	80ec10 <__d2b>
  80bfd8:	d8800915 	stw	r2,36(sp)
  80bfdc:	8001651e 	bne	r16,zero,80c574 <_dtoa_r+0x700>
  80bfe0:	dd800217 	ldw	r22,8(sp)
  80bfe4:	dc000117 	ldw	r16,4(sp)
  80bfe8:	00800804 	movi	r2,32
  80bfec:	b421883a 	add	r16,r22,r16
  80bff0:	80c10c84 	addi	r3,r16,1074
  80bff4:	10c2d10e 	bge	r2,r3,80cb3c <_dtoa_r+0xcc8>
  80bff8:	00801004 	movi	r2,64
  80bffc:	81010484 	addi	r4,r16,1042
  80c000:	10c7c83a 	sub	r3,r2,r3
  80c004:	9108d83a 	srl	r4,r18,r4
  80c008:	88e2983a 	sll	r17,r17,r3
  80c00c:	2448b03a 	or	r4,r4,r17
  80c010:	0812ef40 	call	812ef4 <__floatunsidf>
  80c014:	017f8434 	movhi	r5,65040
  80c018:	01800044 	movi	r6,1
  80c01c:	1009883a 	mov	r4,r2
  80c020:	194b883a 	add	r5,r3,r5
  80c024:	843fffc4 	addi	r16,r16,-1
  80c028:	d9801115 	stw	r6,68(sp)
  80c02c:	000d883a 	mov	r6,zero
  80c030:	01cffe34 	movhi	r7,16376
  80c034:	08066840 	call	806684 <__subdf3>
  80c038:	0198dbf4 	movhi	r6,25455
  80c03c:	01cff4f4 	movhi	r7,16339
  80c040:	3190d844 	addi	r6,r6,17249
  80c044:	39e1e9c4 	addi	r7,r7,-30809
  80c048:	1009883a 	mov	r4,r2
  80c04c:	180b883a 	mov	r5,r3
  80c050:	081275c0 	call	81275c <__muldf3>
  80c054:	01a2d874 	movhi	r6,35681
  80c058:	01cff1f4 	movhi	r7,16327
  80c05c:	31b22cc4 	addi	r6,r6,-14157
  80c060:	39e28a04 	addi	r7,r7,-30168
  80c064:	180b883a 	mov	r5,r3
  80c068:	1009883a 	mov	r4,r2
  80c06c:	0805c080 	call	805c08 <__adddf3>
  80c070:	8009883a 	mov	r4,r16
  80c074:	1029883a 	mov	r20,r2
  80c078:	1823883a 	mov	r17,r3
  80c07c:	0806f800 	call	806f80 <__floatsidf>
  80c080:	019427f4 	movhi	r6,20639
  80c084:	01cff4f4 	movhi	r7,16339
  80c088:	319e7ec4 	addi	r6,r6,31227
  80c08c:	39d104c4 	addi	r7,r7,17427
  80c090:	1009883a 	mov	r4,r2
  80c094:	180b883a 	mov	r5,r3
  80c098:	081275c0 	call	81275c <__muldf3>
  80c09c:	100d883a 	mov	r6,r2
  80c0a0:	180f883a 	mov	r7,r3
  80c0a4:	a009883a 	mov	r4,r20
  80c0a8:	880b883a 	mov	r5,r17
  80c0ac:	0805c080 	call	805c08 <__adddf3>
  80c0b0:	1009883a 	mov	r4,r2
  80c0b4:	180b883a 	mov	r5,r3
  80c0b8:	1029883a 	mov	r20,r2
  80c0bc:	1823883a 	mov	r17,r3
  80c0c0:	0812e740 	call	812e74 <__fixdfsi>
  80c0c4:	000d883a 	mov	r6,zero
  80c0c8:	000f883a 	mov	r7,zero
  80c0cc:	a009883a 	mov	r4,r20
  80c0d0:	880b883a 	mov	r5,r17
  80c0d4:	d8800515 	stw	r2,20(sp)
  80c0d8:	08065900 	call	806590 <__ledf2>
  80c0dc:	10028716 	blt	r2,zero,80cafc <_dtoa_r+0xc88>
  80c0e0:	d8c00517 	ldw	r3,20(sp)
  80c0e4:	00800584 	movi	r2,22
  80c0e8:	10c27536 	bltu	r2,r3,80cac0 <_dtoa_r+0xc4c>
  80c0ec:	180490fa 	slli	r2,r3,3
  80c0f0:	00c02074 	movhi	r3,129
  80c0f4:	18dd3804 	addi	r3,r3,29920
  80c0f8:	1885883a 	add	r2,r3,r2
  80c0fc:	11000017 	ldw	r4,0(r2)
  80c100:	11400117 	ldw	r5,4(r2)
  80c104:	900d883a 	mov	r6,r18
  80c108:	980f883a 	mov	r7,r19
  80c10c:	08064b40 	call	8064b4 <__gedf2>
  80c110:	00828d0e 	bge	zero,r2,80cb48 <_dtoa_r+0xcd4>
  80c114:	d9000517 	ldw	r4,20(sp)
  80c118:	d8000e15 	stw	zero,56(sp)
  80c11c:	213fffc4 	addi	r4,r4,-1
  80c120:	d9000515 	stw	r4,20(sp)
  80c124:	b42dc83a 	sub	r22,r22,r16
  80c128:	b5bfffc4 	addi	r22,r22,-1
  80c12c:	b0026f16 	blt	r22,zero,80caec <_dtoa_r+0xc78>
  80c130:	d8000815 	stw	zero,32(sp)
  80c134:	d9c00517 	ldw	r7,20(sp)
  80c138:	38026416 	blt	r7,zero,80cacc <_dtoa_r+0xc58>
  80c13c:	b1ed883a 	add	r22,r22,r7
  80c140:	d9c00d15 	stw	r7,52(sp)
  80c144:	d8000a15 	stw	zero,40(sp)
  80c148:	d9800317 	ldw	r6,12(sp)
  80c14c:	00800244 	movi	r2,9
  80c150:	11811436 	bltu	r2,r6,80c5a4 <_dtoa_r+0x730>
  80c154:	00800144 	movi	r2,5
  80c158:	1184e10e 	bge	r2,r6,80d4e0 <_dtoa_r+0x166c>
  80c15c:	31bfff04 	addi	r6,r6,-4
  80c160:	d9800315 	stw	r6,12(sp)
  80c164:	0023883a 	mov	r17,zero
  80c168:	d9800317 	ldw	r6,12(sp)
  80c16c:	008000c4 	movi	r2,3
  80c170:	30836726 	beq	r6,r2,80cf10 <_dtoa_r+0x109c>
  80c174:	1183410e 	bge	r2,r6,80ce7c <_dtoa_r+0x1008>
  80c178:	d9c00317 	ldw	r7,12(sp)
  80c17c:	00800104 	movi	r2,4
  80c180:	38827c26 	beq	r7,r2,80cb74 <_dtoa_r+0xd00>
  80c184:	00800144 	movi	r2,5
  80c188:	3884c41e 	bne	r7,r2,80d49c <_dtoa_r+0x1628>
  80c18c:	00800044 	movi	r2,1
  80c190:	d8800b15 	stw	r2,44(sp)
  80c194:	d8c00517 	ldw	r3,20(sp)
  80c198:	d9002217 	ldw	r4,136(sp)
  80c19c:	1907883a 	add	r3,r3,r4
  80c1a0:	19800044 	addi	r6,r3,1
  80c1a4:	d8c00c15 	stw	r3,48(sp)
  80c1a8:	d9800615 	stw	r6,24(sp)
  80c1ac:	0183a40e 	bge	zero,r6,80d040 <_dtoa_r+0x11cc>
  80c1b0:	d9800617 	ldw	r6,24(sp)
  80c1b4:	3021883a 	mov	r16,r6
  80c1b8:	e0001115 	stw	zero,68(fp)
  80c1bc:	008005c4 	movi	r2,23
  80c1c0:	1184c92e 	bgeu	r2,r6,80d4e8 <_dtoa_r+0x1674>
  80c1c4:	00c00044 	movi	r3,1
  80c1c8:	00800104 	movi	r2,4
  80c1cc:	1085883a 	add	r2,r2,r2
  80c1d0:	11000504 	addi	r4,r2,20
  80c1d4:	180b883a 	mov	r5,r3
  80c1d8:	18c00044 	addi	r3,r3,1
  80c1dc:	313ffb2e 	bgeu	r6,r4,80c1cc <__alt_mem_onchip_mem+0xff8041cc>
  80c1e0:	e1401115 	stw	r5,68(fp)
  80c1e4:	e009883a 	mov	r4,fp
  80c1e8:	080df7c0 	call	80df7c <_Balloc>
  80c1ec:	d8800715 	stw	r2,28(sp)
  80c1f0:	e0801015 	stw	r2,64(fp)
  80c1f4:	00800384 	movi	r2,14
  80c1f8:	1400f736 	bltu	r2,r16,80c5d8 <_dtoa_r+0x764>
  80c1fc:	8800f626 	beq	r17,zero,80c5d8 <_dtoa_r+0x764>
  80c200:	d9c00517 	ldw	r7,20(sp)
  80c204:	01c39a0e 	bge	zero,r7,80d070 <_dtoa_r+0x11fc>
  80c208:	388003cc 	andi	r2,r7,15
  80c20c:	100490fa 	slli	r2,r2,3
  80c210:	382bd13a 	srai	r21,r7,4
  80c214:	00c02074 	movhi	r3,129
  80c218:	18dd3804 	addi	r3,r3,29920
  80c21c:	1885883a 	add	r2,r3,r2
  80c220:	a8c0040c 	andi	r3,r21,16
  80c224:	12400017 	ldw	r9,0(r2)
  80c228:	12000117 	ldw	r8,4(r2)
  80c22c:	18037926 	beq	r3,zero,80d014 <_dtoa_r+0x11a0>
  80c230:	00802074 	movhi	r2,129
  80c234:	109d2e04 	addi	r2,r2,29880
  80c238:	11800817 	ldw	r6,32(r2)
  80c23c:	11c00917 	ldw	r7,36(r2)
  80c240:	9009883a 	mov	r4,r18
  80c244:	980b883a 	mov	r5,r19
  80c248:	da001715 	stw	r8,92(sp)
  80c24c:	da401615 	stw	r9,88(sp)
  80c250:	0811dec0 	call	811dec <__divdf3>
  80c254:	da001717 	ldw	r8,92(sp)
  80c258:	da401617 	ldw	r9,88(sp)
  80c25c:	ad4003cc 	andi	r21,r21,15
  80c260:	040000c4 	movi	r16,3
  80c264:	1023883a 	mov	r17,r2
  80c268:	1829883a 	mov	r20,r3
  80c26c:	a8001126 	beq	r21,zero,80c2b4 <_dtoa_r+0x440>
  80c270:	05c02074 	movhi	r23,129
  80c274:	bddd2e04 	addi	r23,r23,29880
  80c278:	4805883a 	mov	r2,r9
  80c27c:	4007883a 	mov	r3,r8
  80c280:	a980004c 	andi	r6,r21,1
  80c284:	1009883a 	mov	r4,r2
  80c288:	a82bd07a 	srai	r21,r21,1
  80c28c:	180b883a 	mov	r5,r3
  80c290:	30000426 	beq	r6,zero,80c2a4 <_dtoa_r+0x430>
  80c294:	b9800017 	ldw	r6,0(r23)
  80c298:	b9c00117 	ldw	r7,4(r23)
  80c29c:	84000044 	addi	r16,r16,1
  80c2a0:	081275c0 	call	81275c <__muldf3>
  80c2a4:	bdc00204 	addi	r23,r23,8
  80c2a8:	a83ff51e 	bne	r21,zero,80c280 <__alt_mem_onchip_mem+0xff804280>
  80c2ac:	1013883a 	mov	r9,r2
  80c2b0:	1811883a 	mov	r8,r3
  80c2b4:	480d883a 	mov	r6,r9
  80c2b8:	400f883a 	mov	r7,r8
  80c2bc:	8809883a 	mov	r4,r17
  80c2c0:	a00b883a 	mov	r5,r20
  80c2c4:	0811dec0 	call	811dec <__divdf3>
  80c2c8:	d8800f15 	stw	r2,60(sp)
  80c2cc:	d8c01015 	stw	r3,64(sp)
  80c2d0:	d8c00e17 	ldw	r3,56(sp)
  80c2d4:	18000626 	beq	r3,zero,80c2f0 <_dtoa_r+0x47c>
  80c2d8:	d9000f17 	ldw	r4,60(sp)
  80c2dc:	d9401017 	ldw	r5,64(sp)
  80c2e0:	000d883a 	mov	r6,zero
  80c2e4:	01cffc34 	movhi	r7,16368
  80c2e8:	08065900 	call	806590 <__ledf2>
  80c2ec:	10040b16 	blt	r2,zero,80d31c <_dtoa_r+0x14a8>
  80c2f0:	8009883a 	mov	r4,r16
  80c2f4:	0806f800 	call	806f80 <__floatsidf>
  80c2f8:	d9800f17 	ldw	r6,60(sp)
  80c2fc:	d9c01017 	ldw	r7,64(sp)
  80c300:	1009883a 	mov	r4,r2
  80c304:	180b883a 	mov	r5,r3
  80c308:	081275c0 	call	81275c <__muldf3>
  80c30c:	000d883a 	mov	r6,zero
  80c310:	01d00734 	movhi	r7,16412
  80c314:	1009883a 	mov	r4,r2
  80c318:	180b883a 	mov	r5,r3
  80c31c:	0805c080 	call	805c08 <__adddf3>
  80c320:	1021883a 	mov	r16,r2
  80c324:	d8800617 	ldw	r2,24(sp)
  80c328:	047f3034 	movhi	r17,64704
  80c32c:	1c63883a 	add	r17,r3,r17
  80c330:	10031826 	beq	r2,zero,80cf94 <_dtoa_r+0x1120>
  80c334:	d8c00517 	ldw	r3,20(sp)
  80c338:	db000617 	ldw	r12,24(sp)
  80c33c:	d8c01315 	stw	r3,76(sp)
  80c340:	d9000b17 	ldw	r4,44(sp)
  80c344:	20038f26 	beq	r4,zero,80d184 <_dtoa_r+0x1310>
  80c348:	60bfffc4 	addi	r2,r12,-1
  80c34c:	100490fa 	slli	r2,r2,3
  80c350:	00c02074 	movhi	r3,129
  80c354:	18dd3804 	addi	r3,r3,29920
  80c358:	1885883a 	add	r2,r3,r2
  80c35c:	11800017 	ldw	r6,0(r2)
  80c360:	11c00117 	ldw	r7,4(r2)
  80c364:	d8800717 	ldw	r2,28(sp)
  80c368:	0009883a 	mov	r4,zero
  80c36c:	014ff834 	movhi	r5,16352
  80c370:	db001615 	stw	r12,88(sp)
  80c374:	15c00044 	addi	r23,r2,1
  80c378:	0811dec0 	call	811dec <__divdf3>
  80c37c:	800d883a 	mov	r6,r16
  80c380:	880f883a 	mov	r7,r17
  80c384:	1009883a 	mov	r4,r2
  80c388:	180b883a 	mov	r5,r3
  80c38c:	08066840 	call	806684 <__subdf3>
  80c390:	d9401017 	ldw	r5,64(sp)
  80c394:	d9000f17 	ldw	r4,60(sp)
  80c398:	102b883a 	mov	r21,r2
  80c39c:	d8c01215 	stw	r3,72(sp)
  80c3a0:	0812e740 	call	812e74 <__fixdfsi>
  80c3a4:	1009883a 	mov	r4,r2
  80c3a8:	1029883a 	mov	r20,r2
  80c3ac:	0806f800 	call	806f80 <__floatsidf>
  80c3b0:	d9000f17 	ldw	r4,60(sp)
  80c3b4:	d9401017 	ldw	r5,64(sp)
  80c3b8:	100d883a 	mov	r6,r2
  80c3bc:	180f883a 	mov	r7,r3
  80c3c0:	08066840 	call	806684 <__subdf3>
  80c3c4:	1823883a 	mov	r17,r3
  80c3c8:	d8c00717 	ldw	r3,28(sp)
  80c3cc:	d9401217 	ldw	r5,72(sp)
  80c3d0:	a2000c04 	addi	r8,r20,48
  80c3d4:	1021883a 	mov	r16,r2
  80c3d8:	1a000005 	stb	r8,0(r3)
  80c3dc:	800d883a 	mov	r6,r16
  80c3e0:	880f883a 	mov	r7,r17
  80c3e4:	a809883a 	mov	r4,r21
  80c3e8:	4029883a 	mov	r20,r8
  80c3ec:	08064b40 	call	8064b4 <__gedf2>
  80c3f0:	00841d16 	blt	zero,r2,80d468 <_dtoa_r+0x15f4>
  80c3f4:	800d883a 	mov	r6,r16
  80c3f8:	880f883a 	mov	r7,r17
  80c3fc:	0009883a 	mov	r4,zero
  80c400:	014ffc34 	movhi	r5,16368
  80c404:	08066840 	call	806684 <__subdf3>
  80c408:	d9401217 	ldw	r5,72(sp)
  80c40c:	100d883a 	mov	r6,r2
  80c410:	180f883a 	mov	r7,r3
  80c414:	a809883a 	mov	r4,r21
  80c418:	08064b40 	call	8064b4 <__gedf2>
  80c41c:	db001617 	ldw	r12,88(sp)
  80c420:	00840e16 	blt	zero,r2,80d45c <_dtoa_r+0x15e8>
  80c424:	00800044 	movi	r2,1
  80c428:	13006b0e 	bge	r2,r12,80c5d8 <_dtoa_r+0x764>
  80c42c:	d9000717 	ldw	r4,28(sp)
  80c430:	dd800f15 	stw	r22,60(sp)
  80c434:	dcc01015 	stw	r19,64(sp)
  80c438:	2319883a 	add	r12,r4,r12
  80c43c:	dcc01217 	ldw	r19,72(sp)
  80c440:	602d883a 	mov	r22,r12
  80c444:	dc801215 	stw	r18,72(sp)
  80c448:	b825883a 	mov	r18,r23
  80c44c:	00000906 	br	80c474 <_dtoa_r+0x600>
  80c450:	08066840 	call	806684 <__subdf3>
  80c454:	a80d883a 	mov	r6,r21
  80c458:	980f883a 	mov	r7,r19
  80c45c:	1009883a 	mov	r4,r2
  80c460:	180b883a 	mov	r5,r3
  80c464:	08065900 	call	806590 <__ledf2>
  80c468:	1003e816 	blt	r2,zero,80d40c <_dtoa_r+0x1598>
  80c46c:	b825883a 	mov	r18,r23
  80c470:	bd83e926 	beq	r23,r22,80d418 <_dtoa_r+0x15a4>
  80c474:	a809883a 	mov	r4,r21
  80c478:	980b883a 	mov	r5,r19
  80c47c:	000d883a 	mov	r6,zero
  80c480:	01d00934 	movhi	r7,16420
  80c484:	081275c0 	call	81275c <__muldf3>
  80c488:	000d883a 	mov	r6,zero
  80c48c:	01d00934 	movhi	r7,16420
  80c490:	8009883a 	mov	r4,r16
  80c494:	880b883a 	mov	r5,r17
  80c498:	102b883a 	mov	r21,r2
  80c49c:	1827883a 	mov	r19,r3
  80c4a0:	081275c0 	call	81275c <__muldf3>
  80c4a4:	180b883a 	mov	r5,r3
  80c4a8:	1009883a 	mov	r4,r2
  80c4ac:	1821883a 	mov	r16,r3
  80c4b0:	1023883a 	mov	r17,r2
  80c4b4:	0812e740 	call	812e74 <__fixdfsi>
  80c4b8:	1009883a 	mov	r4,r2
  80c4bc:	1029883a 	mov	r20,r2
  80c4c0:	0806f800 	call	806f80 <__floatsidf>
  80c4c4:	8809883a 	mov	r4,r17
  80c4c8:	800b883a 	mov	r5,r16
  80c4cc:	100d883a 	mov	r6,r2
  80c4d0:	180f883a 	mov	r7,r3
  80c4d4:	08066840 	call	806684 <__subdf3>
  80c4d8:	a5000c04 	addi	r20,r20,48
  80c4dc:	a80d883a 	mov	r6,r21
  80c4e0:	980f883a 	mov	r7,r19
  80c4e4:	1009883a 	mov	r4,r2
  80c4e8:	180b883a 	mov	r5,r3
  80c4ec:	95000005 	stb	r20,0(r18)
  80c4f0:	1021883a 	mov	r16,r2
  80c4f4:	1823883a 	mov	r17,r3
  80c4f8:	08065900 	call	806590 <__ledf2>
  80c4fc:	bdc00044 	addi	r23,r23,1
  80c500:	800d883a 	mov	r6,r16
  80c504:	880f883a 	mov	r7,r17
  80c508:	0009883a 	mov	r4,zero
  80c50c:	014ffc34 	movhi	r5,16368
  80c510:	103fcf0e 	bge	r2,zero,80c450 <__alt_mem_onchip_mem+0xff804450>
  80c514:	d8c01317 	ldw	r3,76(sp)
  80c518:	d8c00515 	stw	r3,20(sp)
  80c51c:	d9400917 	ldw	r5,36(sp)
  80c520:	e009883a 	mov	r4,fp
  80c524:	080e0240 	call	80e024 <_Bfree>
  80c528:	d9000517 	ldw	r4,20(sp)
  80c52c:	d9802317 	ldw	r6,140(sp)
  80c530:	d9c02517 	ldw	r7,148(sp)
  80c534:	b8000005 	stb	zero,0(r23)
  80c538:	20800044 	addi	r2,r4,1
  80c53c:	30800015 	stw	r2,0(r6)
  80c540:	3802aa26 	beq	r7,zero,80cfec <_dtoa_r+0x1178>
  80c544:	3dc00015 	stw	r23,0(r7)
  80c548:	d8800717 	ldw	r2,28(sp)
  80c54c:	003e7906 	br	80bf34 <__alt_mem_onchip_mem+0xff803f34>
  80c550:	00800434 	movhi	r2,16
  80c554:	10bfffc4 	addi	r2,r2,-1
  80c558:	88a2703a 	and	r17,r17,r2
  80c55c:	883e851e 	bne	r17,zero,80bf74 <__alt_mem_onchip_mem+0xff803f74>
  80c560:	00802074 	movhi	r2,129
  80c564:	109d1a04 	addi	r2,r2,29800
  80c568:	003e8406 	br	80bf7c <__alt_mem_onchip_mem+0xff803f7c>
  80c56c:	10c00204 	addi	r3,r2,8
  80c570:	003e8706 	br	80bf90 <__alt_mem_onchip_mem+0xff803f90>
  80c574:	01400434 	movhi	r5,16
  80c578:	297fffc4 	addi	r5,r5,-1
  80c57c:	994a703a 	and	r5,r19,r5
  80c580:	9009883a 	mov	r4,r18
  80c584:	843f0044 	addi	r16,r16,-1023
  80c588:	294ffc34 	orhi	r5,r5,16368
  80c58c:	dd800217 	ldw	r22,8(sp)
  80c590:	d8001115 	stw	zero,68(sp)
  80c594:	003ea506 	br	80c02c <__alt_mem_onchip_mem+0xff80402c>
  80c598:	00802074 	movhi	r2,129
  80c59c:	109d1104 	addi	r2,r2,29764
  80c5a0:	003e6406 	br	80bf34 <__alt_mem_onchip_mem+0xff803f34>
  80c5a4:	e0001115 	stw	zero,68(fp)
  80c5a8:	000b883a 	mov	r5,zero
  80c5ac:	e009883a 	mov	r4,fp
  80c5b0:	080df7c0 	call	80df7c <_Balloc>
  80c5b4:	01bfffc4 	movi	r6,-1
  80c5b8:	01c00044 	movi	r7,1
  80c5bc:	d8800715 	stw	r2,28(sp)
  80c5c0:	d9800c15 	stw	r6,48(sp)
  80c5c4:	e0801015 	stw	r2,64(fp)
  80c5c8:	d8000315 	stw	zero,12(sp)
  80c5cc:	d9c00b15 	stw	r7,44(sp)
  80c5d0:	d9800615 	stw	r6,24(sp)
  80c5d4:	d8002215 	stw	zero,136(sp)
  80c5d8:	d8800117 	ldw	r2,4(sp)
  80c5dc:	10008916 	blt	r2,zero,80c804 <_dtoa_r+0x990>
  80c5e0:	d9000517 	ldw	r4,20(sp)
  80c5e4:	00c00384 	movi	r3,14
  80c5e8:	19008616 	blt	r3,r4,80c804 <_dtoa_r+0x990>
  80c5ec:	200490fa 	slli	r2,r4,3
  80c5f0:	00c02074 	movhi	r3,129
  80c5f4:	d9802217 	ldw	r6,136(sp)
  80c5f8:	18dd3804 	addi	r3,r3,29920
  80c5fc:	1885883a 	add	r2,r3,r2
  80c600:	14000017 	ldw	r16,0(r2)
  80c604:	14400117 	ldw	r17,4(r2)
  80c608:	30016316 	blt	r6,zero,80cb98 <_dtoa_r+0xd24>
  80c60c:	800d883a 	mov	r6,r16
  80c610:	880f883a 	mov	r7,r17
  80c614:	9009883a 	mov	r4,r18
  80c618:	980b883a 	mov	r5,r19
  80c61c:	0811dec0 	call	811dec <__divdf3>
  80c620:	180b883a 	mov	r5,r3
  80c624:	1009883a 	mov	r4,r2
  80c628:	0812e740 	call	812e74 <__fixdfsi>
  80c62c:	1009883a 	mov	r4,r2
  80c630:	102b883a 	mov	r21,r2
  80c634:	0806f800 	call	806f80 <__floatsidf>
  80c638:	800d883a 	mov	r6,r16
  80c63c:	880f883a 	mov	r7,r17
  80c640:	1009883a 	mov	r4,r2
  80c644:	180b883a 	mov	r5,r3
  80c648:	081275c0 	call	81275c <__muldf3>
  80c64c:	100d883a 	mov	r6,r2
  80c650:	180f883a 	mov	r7,r3
  80c654:	9009883a 	mov	r4,r18
  80c658:	980b883a 	mov	r5,r19
  80c65c:	08066840 	call	806684 <__subdf3>
  80c660:	d9c00717 	ldw	r7,28(sp)
  80c664:	1009883a 	mov	r4,r2
  80c668:	a8800c04 	addi	r2,r21,48
  80c66c:	38800005 	stb	r2,0(r7)
  80c670:	3dc00044 	addi	r23,r7,1
  80c674:	d9c00617 	ldw	r7,24(sp)
  80c678:	01800044 	movi	r6,1
  80c67c:	180b883a 	mov	r5,r3
  80c680:	2005883a 	mov	r2,r4
  80c684:	39803826 	beq	r7,r6,80c768 <_dtoa_r+0x8f4>
  80c688:	000d883a 	mov	r6,zero
  80c68c:	01d00934 	movhi	r7,16420
  80c690:	081275c0 	call	81275c <__muldf3>
  80c694:	000d883a 	mov	r6,zero
  80c698:	000f883a 	mov	r7,zero
  80c69c:	1009883a 	mov	r4,r2
  80c6a0:	180b883a 	mov	r5,r3
  80c6a4:	1025883a 	mov	r18,r2
  80c6a8:	1827883a 	mov	r19,r3
  80c6ac:	08126d40 	call	8126d4 <__eqdf2>
  80c6b0:	103f9a26 	beq	r2,zero,80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c6b4:	d9c00617 	ldw	r7,24(sp)
  80c6b8:	d8c00717 	ldw	r3,28(sp)
  80c6bc:	b829883a 	mov	r20,r23
  80c6c0:	38bfffc4 	addi	r2,r7,-1
  80c6c4:	18ad883a 	add	r22,r3,r2
  80c6c8:	00000a06 	br	80c6f4 <_dtoa_r+0x880>
  80c6cc:	081275c0 	call	81275c <__muldf3>
  80c6d0:	000d883a 	mov	r6,zero
  80c6d4:	000f883a 	mov	r7,zero
  80c6d8:	1009883a 	mov	r4,r2
  80c6dc:	180b883a 	mov	r5,r3
  80c6e0:	1025883a 	mov	r18,r2
  80c6e4:	1827883a 	mov	r19,r3
  80c6e8:	b829883a 	mov	r20,r23
  80c6ec:	08126d40 	call	8126d4 <__eqdf2>
  80c6f0:	103f8a26 	beq	r2,zero,80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c6f4:	800d883a 	mov	r6,r16
  80c6f8:	880f883a 	mov	r7,r17
  80c6fc:	9009883a 	mov	r4,r18
  80c700:	980b883a 	mov	r5,r19
  80c704:	0811dec0 	call	811dec <__divdf3>
  80c708:	180b883a 	mov	r5,r3
  80c70c:	1009883a 	mov	r4,r2
  80c710:	0812e740 	call	812e74 <__fixdfsi>
  80c714:	1009883a 	mov	r4,r2
  80c718:	102b883a 	mov	r21,r2
  80c71c:	0806f800 	call	806f80 <__floatsidf>
  80c720:	800d883a 	mov	r6,r16
  80c724:	880f883a 	mov	r7,r17
  80c728:	1009883a 	mov	r4,r2
  80c72c:	180b883a 	mov	r5,r3
  80c730:	081275c0 	call	81275c <__muldf3>
  80c734:	100d883a 	mov	r6,r2
  80c738:	180f883a 	mov	r7,r3
  80c73c:	9009883a 	mov	r4,r18
  80c740:	980b883a 	mov	r5,r19
  80c744:	08066840 	call	806684 <__subdf3>
  80c748:	aa000c04 	addi	r8,r21,48
  80c74c:	a2000005 	stb	r8,0(r20)
  80c750:	000d883a 	mov	r6,zero
  80c754:	01d00934 	movhi	r7,16420
  80c758:	1009883a 	mov	r4,r2
  80c75c:	180b883a 	mov	r5,r3
  80c760:	a5c00044 	addi	r23,r20,1
  80c764:	b53fd91e 	bne	r22,r20,80c6cc <__alt_mem_onchip_mem+0xff8046cc>
  80c768:	100d883a 	mov	r6,r2
  80c76c:	180f883a 	mov	r7,r3
  80c770:	1009883a 	mov	r4,r2
  80c774:	180b883a 	mov	r5,r3
  80c778:	0805c080 	call	805c08 <__adddf3>
  80c77c:	100d883a 	mov	r6,r2
  80c780:	180f883a 	mov	r7,r3
  80c784:	8009883a 	mov	r4,r16
  80c788:	880b883a 	mov	r5,r17
  80c78c:	1027883a 	mov	r19,r2
  80c790:	1825883a 	mov	r18,r3
  80c794:	08065900 	call	806590 <__ledf2>
  80c798:	10000816 	blt	r2,zero,80c7bc <_dtoa_r+0x948>
  80c79c:	980d883a 	mov	r6,r19
  80c7a0:	900f883a 	mov	r7,r18
  80c7a4:	8009883a 	mov	r4,r16
  80c7a8:	880b883a 	mov	r5,r17
  80c7ac:	08126d40 	call	8126d4 <__eqdf2>
  80c7b0:	103f5a1e 	bne	r2,zero,80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c7b4:	ad40004c 	andi	r21,r21,1
  80c7b8:	a83f5826 	beq	r21,zero,80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c7bc:	bd3fffc3 	ldbu	r20,-1(r23)
  80c7c0:	b8bfffc4 	addi	r2,r23,-1
  80c7c4:	1007883a 	mov	r3,r2
  80c7c8:	01400e44 	movi	r5,57
  80c7cc:	d9800717 	ldw	r6,28(sp)
  80c7d0:	00000506 	br	80c7e8 <_dtoa_r+0x974>
  80c7d4:	18ffffc4 	addi	r3,r3,-1
  80c7d8:	11824726 	beq	r2,r6,80d0f8 <_dtoa_r+0x1284>
  80c7dc:	1d000003 	ldbu	r20,0(r3)
  80c7e0:	102f883a 	mov	r23,r2
  80c7e4:	10bfffc4 	addi	r2,r2,-1
  80c7e8:	a1003fcc 	andi	r4,r20,255
  80c7ec:	2100201c 	xori	r4,r4,128
  80c7f0:	213fe004 	addi	r4,r4,-128
  80c7f4:	217ff726 	beq	r4,r5,80c7d4 <__alt_mem_onchip_mem+0xff8047d4>
  80c7f8:	a2000044 	addi	r8,r20,1
  80c7fc:	12000005 	stb	r8,0(r2)
  80c800:	003f4606 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c804:	d9000b17 	ldw	r4,44(sp)
  80c808:	2000c826 	beq	r4,zero,80cb2c <_dtoa_r+0xcb8>
  80c80c:	d9800317 	ldw	r6,12(sp)
  80c810:	00c00044 	movi	r3,1
  80c814:	1980f90e 	bge	r3,r6,80cbfc <_dtoa_r+0xd88>
  80c818:	d8800617 	ldw	r2,24(sp)
  80c81c:	d8c00a17 	ldw	r3,40(sp)
  80c820:	157fffc4 	addi	r21,r2,-1
  80c824:	1d41f316 	blt	r3,r21,80cff4 <_dtoa_r+0x1180>
  80c828:	1d6bc83a 	sub	r21,r3,r21
  80c82c:	d9c00617 	ldw	r7,24(sp)
  80c830:	3802aa16 	blt	r7,zero,80d2dc <_dtoa_r+0x1468>
  80c834:	dd000817 	ldw	r20,32(sp)
  80c838:	d8800617 	ldw	r2,24(sp)
  80c83c:	d8c00817 	ldw	r3,32(sp)
  80c840:	01400044 	movi	r5,1
  80c844:	e009883a 	mov	r4,fp
  80c848:	1887883a 	add	r3,r3,r2
  80c84c:	d8c00815 	stw	r3,32(sp)
  80c850:	b0ad883a 	add	r22,r22,r2
  80c854:	080e3880 	call	80e388 <__i2b>
  80c858:	1023883a 	mov	r17,r2
  80c85c:	a0000826 	beq	r20,zero,80c880 <_dtoa_r+0xa0c>
  80c860:	0580070e 	bge	zero,r22,80c880 <_dtoa_r+0xa0c>
  80c864:	a005883a 	mov	r2,r20
  80c868:	b500b916 	blt	r22,r20,80cb50 <_dtoa_r+0xcdc>
  80c86c:	d9000817 	ldw	r4,32(sp)
  80c870:	a0a9c83a 	sub	r20,r20,r2
  80c874:	b0adc83a 	sub	r22,r22,r2
  80c878:	2089c83a 	sub	r4,r4,r2
  80c87c:	d9000815 	stw	r4,32(sp)
  80c880:	d9800a17 	ldw	r6,40(sp)
  80c884:	0181810e 	bge	zero,r6,80ce8c <_dtoa_r+0x1018>
  80c888:	d9c00b17 	ldw	r7,44(sp)
  80c88c:	3800b326 	beq	r7,zero,80cb5c <_dtoa_r+0xce8>
  80c890:	a800b226 	beq	r21,zero,80cb5c <_dtoa_r+0xce8>
  80c894:	880b883a 	mov	r5,r17
  80c898:	a80d883a 	mov	r6,r21
  80c89c:	e009883a 	mov	r4,fp
  80c8a0:	080e5bc0 	call	80e5bc <__pow5mult>
  80c8a4:	d9800917 	ldw	r6,36(sp)
  80c8a8:	100b883a 	mov	r5,r2
  80c8ac:	e009883a 	mov	r4,fp
  80c8b0:	1023883a 	mov	r17,r2
  80c8b4:	080e3c40 	call	80e3c4 <__multiply>
  80c8b8:	1021883a 	mov	r16,r2
  80c8bc:	d8800a17 	ldw	r2,40(sp)
  80c8c0:	d9400917 	ldw	r5,36(sp)
  80c8c4:	e009883a 	mov	r4,fp
  80c8c8:	1545c83a 	sub	r2,r2,r21
  80c8cc:	d8800a15 	stw	r2,40(sp)
  80c8d0:	080e0240 	call	80e024 <_Bfree>
  80c8d4:	d8c00a17 	ldw	r3,40(sp)
  80c8d8:	18009f1e 	bne	r3,zero,80cb58 <_dtoa_r+0xce4>
  80c8dc:	05c00044 	movi	r23,1
  80c8e0:	e009883a 	mov	r4,fp
  80c8e4:	b80b883a 	mov	r5,r23
  80c8e8:	080e3880 	call	80e388 <__i2b>
  80c8ec:	d9000d17 	ldw	r4,52(sp)
  80c8f0:	102b883a 	mov	r21,r2
  80c8f4:	2000ce26 	beq	r4,zero,80cc30 <_dtoa_r+0xdbc>
  80c8f8:	200d883a 	mov	r6,r4
  80c8fc:	100b883a 	mov	r5,r2
  80c900:	e009883a 	mov	r4,fp
  80c904:	080e5bc0 	call	80e5bc <__pow5mult>
  80c908:	d9800317 	ldw	r6,12(sp)
  80c90c:	102b883a 	mov	r21,r2
  80c910:	b981810e 	bge	r23,r6,80cf18 <_dtoa_r+0x10a4>
  80c914:	0027883a 	mov	r19,zero
  80c918:	a8800417 	ldw	r2,16(r21)
  80c91c:	05c00804 	movi	r23,32
  80c920:	10800104 	addi	r2,r2,4
  80c924:	1085883a 	add	r2,r2,r2
  80c928:	1085883a 	add	r2,r2,r2
  80c92c:	a885883a 	add	r2,r21,r2
  80c930:	11000017 	ldw	r4,0(r2)
  80c934:	080e2700 	call	80e270 <__hi0bits>
  80c938:	b885c83a 	sub	r2,r23,r2
  80c93c:	1585883a 	add	r2,r2,r22
  80c940:	108007cc 	andi	r2,r2,31
  80c944:	1000b326 	beq	r2,zero,80cc14 <_dtoa_r+0xda0>
  80c948:	00c00804 	movi	r3,32
  80c94c:	1887c83a 	sub	r3,r3,r2
  80c950:	01000104 	movi	r4,4
  80c954:	20c2cd0e 	bge	r4,r3,80d48c <_dtoa_r+0x1618>
  80c958:	00c00704 	movi	r3,28
  80c95c:	1885c83a 	sub	r2,r3,r2
  80c960:	d8c00817 	ldw	r3,32(sp)
  80c964:	a0a9883a 	add	r20,r20,r2
  80c968:	b0ad883a 	add	r22,r22,r2
  80c96c:	1887883a 	add	r3,r3,r2
  80c970:	d8c00815 	stw	r3,32(sp)
  80c974:	d9800817 	ldw	r6,32(sp)
  80c978:	0180040e 	bge	zero,r6,80c98c <_dtoa_r+0xb18>
  80c97c:	800b883a 	mov	r5,r16
  80c980:	e009883a 	mov	r4,fp
  80c984:	080e6fc0 	call	80e6fc <__lshift>
  80c988:	1021883a 	mov	r16,r2
  80c98c:	0580050e 	bge	zero,r22,80c9a4 <_dtoa_r+0xb30>
  80c990:	a80b883a 	mov	r5,r21
  80c994:	b00d883a 	mov	r6,r22
  80c998:	e009883a 	mov	r4,fp
  80c99c:	080e6fc0 	call	80e6fc <__lshift>
  80c9a0:	102b883a 	mov	r21,r2
  80c9a4:	d9c00e17 	ldw	r7,56(sp)
  80c9a8:	3801211e 	bne	r7,zero,80ce30 <_dtoa_r+0xfbc>
  80c9ac:	d9800617 	ldw	r6,24(sp)
  80c9b0:	0181380e 	bge	zero,r6,80ce94 <_dtoa_r+0x1020>
  80c9b4:	d8c00b17 	ldw	r3,44(sp)
  80c9b8:	1800ab1e 	bne	r3,zero,80cc68 <_dtoa_r+0xdf4>
  80c9bc:	dc800717 	ldw	r18,28(sp)
  80c9c0:	dcc00617 	ldw	r19,24(sp)
  80c9c4:	9029883a 	mov	r20,r18
  80c9c8:	00000206 	br	80c9d4 <_dtoa_r+0xb60>
  80c9cc:	080e04c0 	call	80e04c <__multadd>
  80c9d0:	1021883a 	mov	r16,r2
  80c9d4:	a80b883a 	mov	r5,r21
  80c9d8:	8009883a 	mov	r4,r16
  80c9dc:	080bc740 	call	80bc74 <quorem>
  80c9e0:	10800c04 	addi	r2,r2,48
  80c9e4:	90800005 	stb	r2,0(r18)
  80c9e8:	94800044 	addi	r18,r18,1
  80c9ec:	9507c83a 	sub	r3,r18,r20
  80c9f0:	000f883a 	mov	r7,zero
  80c9f4:	01800284 	movi	r6,10
  80c9f8:	800b883a 	mov	r5,r16
  80c9fc:	e009883a 	mov	r4,fp
  80ca00:	1cfff216 	blt	r3,r19,80c9cc <__alt_mem_onchip_mem+0xff8049cc>
  80ca04:	1011883a 	mov	r8,r2
  80ca08:	d8800617 	ldw	r2,24(sp)
  80ca0c:	0082370e 	bge	zero,r2,80d2ec <_dtoa_r+0x1478>
  80ca10:	d9000717 	ldw	r4,28(sp)
  80ca14:	0025883a 	mov	r18,zero
  80ca18:	20af883a 	add	r23,r4,r2
  80ca1c:	01800044 	movi	r6,1
  80ca20:	800b883a 	mov	r5,r16
  80ca24:	e009883a 	mov	r4,fp
  80ca28:	da001715 	stw	r8,92(sp)
  80ca2c:	080e6fc0 	call	80e6fc <__lshift>
  80ca30:	a80b883a 	mov	r5,r21
  80ca34:	1009883a 	mov	r4,r2
  80ca38:	d8800915 	stw	r2,36(sp)
  80ca3c:	080e8440 	call	80e844 <__mcmp>
  80ca40:	da001717 	ldw	r8,92(sp)
  80ca44:	0081800e 	bge	zero,r2,80d048 <_dtoa_r+0x11d4>
  80ca48:	b93fffc3 	ldbu	r4,-1(r23)
  80ca4c:	b8bfffc4 	addi	r2,r23,-1
  80ca50:	1007883a 	mov	r3,r2
  80ca54:	01800e44 	movi	r6,57
  80ca58:	d9c00717 	ldw	r7,28(sp)
  80ca5c:	00000506 	br	80ca74 <_dtoa_r+0xc00>
  80ca60:	18ffffc4 	addi	r3,r3,-1
  80ca64:	11c12326 	beq	r2,r7,80cef4 <_dtoa_r+0x1080>
  80ca68:	19000003 	ldbu	r4,0(r3)
  80ca6c:	102f883a 	mov	r23,r2
  80ca70:	10bfffc4 	addi	r2,r2,-1
  80ca74:	21403fcc 	andi	r5,r4,255
  80ca78:	2940201c 	xori	r5,r5,128
  80ca7c:	297fe004 	addi	r5,r5,-128
  80ca80:	29bff726 	beq	r5,r6,80ca60 <__alt_mem_onchip_mem+0xff804a60>
  80ca84:	21000044 	addi	r4,r4,1
  80ca88:	11000005 	stb	r4,0(r2)
  80ca8c:	a80b883a 	mov	r5,r21
  80ca90:	e009883a 	mov	r4,fp
  80ca94:	080e0240 	call	80e024 <_Bfree>
  80ca98:	883ea026 	beq	r17,zero,80c51c <__alt_mem_onchip_mem+0xff80451c>
  80ca9c:	90000426 	beq	r18,zero,80cab0 <_dtoa_r+0xc3c>
  80caa0:	94400326 	beq	r18,r17,80cab0 <_dtoa_r+0xc3c>
  80caa4:	900b883a 	mov	r5,r18
  80caa8:	e009883a 	mov	r4,fp
  80caac:	080e0240 	call	80e024 <_Bfree>
  80cab0:	880b883a 	mov	r5,r17
  80cab4:	e009883a 	mov	r4,fp
  80cab8:	080e0240 	call	80e024 <_Bfree>
  80cabc:	003e9706 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80cac0:	01800044 	movi	r6,1
  80cac4:	d9800e15 	stw	r6,56(sp)
  80cac8:	003d9606 	br	80c124 <__alt_mem_onchip_mem+0xff804124>
  80cacc:	d8800817 	ldw	r2,32(sp)
  80cad0:	d8c00517 	ldw	r3,20(sp)
  80cad4:	d8000d15 	stw	zero,52(sp)
  80cad8:	10c5c83a 	sub	r2,r2,r3
  80cadc:	00c9c83a 	sub	r4,zero,r3
  80cae0:	d8800815 	stw	r2,32(sp)
  80cae4:	d9000a15 	stw	r4,40(sp)
  80cae8:	003d9706 	br	80c148 <__alt_mem_onchip_mem+0xff804148>
  80caec:	05adc83a 	sub	r22,zero,r22
  80caf0:	dd800815 	stw	r22,32(sp)
  80caf4:	002d883a 	mov	r22,zero
  80caf8:	003d8e06 	br	80c134 <__alt_mem_onchip_mem+0xff804134>
  80cafc:	d9000517 	ldw	r4,20(sp)
  80cb00:	0806f800 	call	806f80 <__floatsidf>
  80cb04:	100d883a 	mov	r6,r2
  80cb08:	180f883a 	mov	r7,r3
  80cb0c:	a009883a 	mov	r4,r20
  80cb10:	880b883a 	mov	r5,r17
  80cb14:	08126d40 	call	8126d4 <__eqdf2>
  80cb18:	103d7126 	beq	r2,zero,80c0e0 <__alt_mem_onchip_mem+0xff8040e0>
  80cb1c:	d9c00517 	ldw	r7,20(sp)
  80cb20:	39ffffc4 	addi	r7,r7,-1
  80cb24:	d9c00515 	stw	r7,20(sp)
  80cb28:	003d6d06 	br	80c0e0 <__alt_mem_onchip_mem+0xff8040e0>
  80cb2c:	dd400a17 	ldw	r21,40(sp)
  80cb30:	dd000817 	ldw	r20,32(sp)
  80cb34:	0023883a 	mov	r17,zero
  80cb38:	003f4806 	br	80c85c <__alt_mem_onchip_mem+0xff80485c>
  80cb3c:	10e3c83a 	sub	r17,r2,r3
  80cb40:	9448983a 	sll	r4,r18,r17
  80cb44:	003d3206 	br	80c010 <__alt_mem_onchip_mem+0xff804010>
  80cb48:	d8000e15 	stw	zero,56(sp)
  80cb4c:	003d7506 	br	80c124 <__alt_mem_onchip_mem+0xff804124>
  80cb50:	b005883a 	mov	r2,r22
  80cb54:	003f4506 	br	80c86c <__alt_mem_onchip_mem+0xff80486c>
  80cb58:	dc000915 	stw	r16,36(sp)
  80cb5c:	d9800a17 	ldw	r6,40(sp)
  80cb60:	d9400917 	ldw	r5,36(sp)
  80cb64:	e009883a 	mov	r4,fp
  80cb68:	080e5bc0 	call	80e5bc <__pow5mult>
  80cb6c:	1021883a 	mov	r16,r2
  80cb70:	003f5a06 	br	80c8dc <__alt_mem_onchip_mem+0xff8048dc>
  80cb74:	01c00044 	movi	r7,1
  80cb78:	d9c00b15 	stw	r7,44(sp)
  80cb7c:	d8802217 	ldw	r2,136(sp)
  80cb80:	0081280e 	bge	zero,r2,80d024 <_dtoa_r+0x11b0>
  80cb84:	100d883a 	mov	r6,r2
  80cb88:	1021883a 	mov	r16,r2
  80cb8c:	d8800c15 	stw	r2,48(sp)
  80cb90:	d8800615 	stw	r2,24(sp)
  80cb94:	003d8806 	br	80c1b8 <__alt_mem_onchip_mem+0xff8041b8>
  80cb98:	d8800617 	ldw	r2,24(sp)
  80cb9c:	00be9b16 	blt	zero,r2,80c60c <__alt_mem_onchip_mem+0xff80460c>
  80cba0:	10010f1e 	bne	r2,zero,80cfe0 <_dtoa_r+0x116c>
  80cba4:	880b883a 	mov	r5,r17
  80cba8:	000d883a 	mov	r6,zero
  80cbac:	01d00534 	movhi	r7,16404
  80cbb0:	8009883a 	mov	r4,r16
  80cbb4:	081275c0 	call	81275c <__muldf3>
  80cbb8:	900d883a 	mov	r6,r18
  80cbbc:	980f883a 	mov	r7,r19
  80cbc0:	1009883a 	mov	r4,r2
  80cbc4:	180b883a 	mov	r5,r3
  80cbc8:	08064b40 	call	8064b4 <__gedf2>
  80cbcc:	002b883a 	mov	r21,zero
  80cbd0:	0023883a 	mov	r17,zero
  80cbd4:	1000bf16 	blt	r2,zero,80ced4 <_dtoa_r+0x1060>
  80cbd8:	d9802217 	ldw	r6,136(sp)
  80cbdc:	ddc00717 	ldw	r23,28(sp)
  80cbe0:	018c303a 	nor	r6,zero,r6
  80cbe4:	d9800515 	stw	r6,20(sp)
  80cbe8:	a80b883a 	mov	r5,r21
  80cbec:	e009883a 	mov	r4,fp
  80cbf0:	080e0240 	call	80e024 <_Bfree>
  80cbf4:	883e4926 	beq	r17,zero,80c51c <__alt_mem_onchip_mem+0xff80451c>
  80cbf8:	003fad06 	br	80cab0 <__alt_mem_onchip_mem+0xff804ab0>
  80cbfc:	d9c01117 	ldw	r7,68(sp)
  80cc00:	3801bc26 	beq	r7,zero,80d2f4 <_dtoa_r+0x1480>
  80cc04:	10810cc4 	addi	r2,r2,1075
  80cc08:	dd400a17 	ldw	r21,40(sp)
  80cc0c:	dd000817 	ldw	r20,32(sp)
  80cc10:	003f0a06 	br	80c83c <__alt_mem_onchip_mem+0xff80483c>
  80cc14:	00800704 	movi	r2,28
  80cc18:	d9000817 	ldw	r4,32(sp)
  80cc1c:	a0a9883a 	add	r20,r20,r2
  80cc20:	b0ad883a 	add	r22,r22,r2
  80cc24:	2089883a 	add	r4,r4,r2
  80cc28:	d9000815 	stw	r4,32(sp)
  80cc2c:	003f5106 	br	80c974 <__alt_mem_onchip_mem+0xff804974>
  80cc30:	d8c00317 	ldw	r3,12(sp)
  80cc34:	b8c1fc0e 	bge	r23,r3,80d428 <_dtoa_r+0x15b4>
  80cc38:	0027883a 	mov	r19,zero
  80cc3c:	b805883a 	mov	r2,r23
  80cc40:	003f3e06 	br	80c93c <__alt_mem_onchip_mem+0xff80493c>
  80cc44:	880b883a 	mov	r5,r17
  80cc48:	e009883a 	mov	r4,fp
  80cc4c:	000f883a 	mov	r7,zero
  80cc50:	01800284 	movi	r6,10
  80cc54:	080e04c0 	call	80e04c <__multadd>
  80cc58:	d9000c17 	ldw	r4,48(sp)
  80cc5c:	1023883a 	mov	r17,r2
  80cc60:	0102040e 	bge	zero,r4,80d474 <_dtoa_r+0x1600>
  80cc64:	d9000615 	stw	r4,24(sp)
  80cc68:	0500050e 	bge	zero,r20,80cc80 <_dtoa_r+0xe0c>
  80cc6c:	880b883a 	mov	r5,r17
  80cc70:	a00d883a 	mov	r6,r20
  80cc74:	e009883a 	mov	r4,fp
  80cc78:	080e6fc0 	call	80e6fc <__lshift>
  80cc7c:	1023883a 	mov	r17,r2
  80cc80:	9801241e 	bne	r19,zero,80d114 <_dtoa_r+0x12a0>
  80cc84:	8829883a 	mov	r20,r17
  80cc88:	d9000617 	ldw	r4,24(sp)
  80cc8c:	dcc00717 	ldw	r19,28(sp)
  80cc90:	9480004c 	andi	r18,r18,1
  80cc94:	20bfffc4 	addi	r2,r4,-1
  80cc98:	9885883a 	add	r2,r19,r2
  80cc9c:	d8800415 	stw	r2,16(sp)
  80cca0:	dc800615 	stw	r18,24(sp)
  80cca4:	a80b883a 	mov	r5,r21
  80cca8:	8009883a 	mov	r4,r16
  80ccac:	080bc740 	call	80bc74 <quorem>
  80ccb0:	880b883a 	mov	r5,r17
  80ccb4:	8009883a 	mov	r4,r16
  80ccb8:	102f883a 	mov	r23,r2
  80ccbc:	080e8440 	call	80e844 <__mcmp>
  80ccc0:	a80b883a 	mov	r5,r21
  80ccc4:	a00d883a 	mov	r6,r20
  80ccc8:	e009883a 	mov	r4,fp
  80cccc:	102d883a 	mov	r22,r2
  80ccd0:	080e8a40 	call	80e8a4 <__mdiff>
  80ccd4:	1007883a 	mov	r3,r2
  80ccd8:	10800317 	ldw	r2,12(r2)
  80ccdc:	bc800c04 	addi	r18,r23,48
  80cce0:	180b883a 	mov	r5,r3
  80cce4:	10004e1e 	bne	r2,zero,80ce20 <_dtoa_r+0xfac>
  80cce8:	8009883a 	mov	r4,r16
  80ccec:	d8c01615 	stw	r3,88(sp)
  80ccf0:	080e8440 	call	80e844 <__mcmp>
  80ccf4:	d8c01617 	ldw	r3,88(sp)
  80ccf8:	e009883a 	mov	r4,fp
  80ccfc:	d8801615 	stw	r2,88(sp)
  80cd00:	180b883a 	mov	r5,r3
  80cd04:	080e0240 	call	80e024 <_Bfree>
  80cd08:	d8801617 	ldw	r2,88(sp)
  80cd0c:	1000041e 	bne	r2,zero,80cd20 <_dtoa_r+0xeac>
  80cd10:	d9800317 	ldw	r6,12(sp)
  80cd14:	3000021e 	bne	r6,zero,80cd20 <_dtoa_r+0xeac>
  80cd18:	d8c00617 	ldw	r3,24(sp)
  80cd1c:	18003726 	beq	r3,zero,80cdfc <_dtoa_r+0xf88>
  80cd20:	b0002016 	blt	r22,zero,80cda4 <_dtoa_r+0xf30>
  80cd24:	b000041e 	bne	r22,zero,80cd38 <_dtoa_r+0xec4>
  80cd28:	d9000317 	ldw	r4,12(sp)
  80cd2c:	2000021e 	bne	r4,zero,80cd38 <_dtoa_r+0xec4>
  80cd30:	d8c00617 	ldw	r3,24(sp)
  80cd34:	18001b26 	beq	r3,zero,80cda4 <_dtoa_r+0xf30>
  80cd38:	00810716 	blt	zero,r2,80d158 <_dtoa_r+0x12e4>
  80cd3c:	d8c00417 	ldw	r3,16(sp)
  80cd40:	9d800044 	addi	r22,r19,1
  80cd44:	9c800005 	stb	r18,0(r19)
  80cd48:	b02f883a 	mov	r23,r22
  80cd4c:	98c10626 	beq	r19,r3,80d168 <_dtoa_r+0x12f4>
  80cd50:	800b883a 	mov	r5,r16
  80cd54:	000f883a 	mov	r7,zero
  80cd58:	01800284 	movi	r6,10
  80cd5c:	e009883a 	mov	r4,fp
  80cd60:	080e04c0 	call	80e04c <__multadd>
  80cd64:	1021883a 	mov	r16,r2
  80cd68:	000f883a 	mov	r7,zero
  80cd6c:	01800284 	movi	r6,10
  80cd70:	880b883a 	mov	r5,r17
  80cd74:	e009883a 	mov	r4,fp
  80cd78:	8d002526 	beq	r17,r20,80ce10 <_dtoa_r+0xf9c>
  80cd7c:	080e04c0 	call	80e04c <__multadd>
  80cd80:	a00b883a 	mov	r5,r20
  80cd84:	000f883a 	mov	r7,zero
  80cd88:	01800284 	movi	r6,10
  80cd8c:	e009883a 	mov	r4,fp
  80cd90:	1023883a 	mov	r17,r2
  80cd94:	080e04c0 	call	80e04c <__multadd>
  80cd98:	1029883a 	mov	r20,r2
  80cd9c:	b027883a 	mov	r19,r22
  80cda0:	003fc006 	br	80cca4 <__alt_mem_onchip_mem+0xff804ca4>
  80cda4:	9011883a 	mov	r8,r18
  80cda8:	00800e0e 	bge	zero,r2,80cde4 <_dtoa_r+0xf70>
  80cdac:	800b883a 	mov	r5,r16
  80cdb0:	01800044 	movi	r6,1
  80cdb4:	e009883a 	mov	r4,fp
  80cdb8:	da001715 	stw	r8,92(sp)
  80cdbc:	080e6fc0 	call	80e6fc <__lshift>
  80cdc0:	a80b883a 	mov	r5,r21
  80cdc4:	1009883a 	mov	r4,r2
  80cdc8:	1021883a 	mov	r16,r2
  80cdcc:	080e8440 	call	80e844 <__mcmp>
  80cdd0:	da001717 	ldw	r8,92(sp)
  80cdd4:	0081960e 	bge	zero,r2,80d430 <_dtoa_r+0x15bc>
  80cdd8:	00800e44 	movi	r2,57
  80cddc:	40817026 	beq	r8,r2,80d3a0 <_dtoa_r+0x152c>
  80cde0:	ba000c44 	addi	r8,r23,49
  80cde4:	8825883a 	mov	r18,r17
  80cde8:	9dc00044 	addi	r23,r19,1
  80cdec:	9a000005 	stb	r8,0(r19)
  80cdf0:	a023883a 	mov	r17,r20
  80cdf4:	dc000915 	stw	r16,36(sp)
  80cdf8:	003f2406 	br	80ca8c <__alt_mem_onchip_mem+0xff804a8c>
  80cdfc:	00800e44 	movi	r2,57
  80ce00:	9011883a 	mov	r8,r18
  80ce04:	90816626 	beq	r18,r2,80d3a0 <_dtoa_r+0x152c>
  80ce08:	05bff516 	blt	zero,r22,80cde0 <__alt_mem_onchip_mem+0xff804de0>
  80ce0c:	003ff506 	br	80cde4 <__alt_mem_onchip_mem+0xff804de4>
  80ce10:	080e04c0 	call	80e04c <__multadd>
  80ce14:	1023883a 	mov	r17,r2
  80ce18:	1029883a 	mov	r20,r2
  80ce1c:	003fdf06 	br	80cd9c <__alt_mem_onchip_mem+0xff804d9c>
  80ce20:	e009883a 	mov	r4,fp
  80ce24:	080e0240 	call	80e024 <_Bfree>
  80ce28:	00800044 	movi	r2,1
  80ce2c:	003fbc06 	br	80cd20 <__alt_mem_onchip_mem+0xff804d20>
  80ce30:	a80b883a 	mov	r5,r21
  80ce34:	8009883a 	mov	r4,r16
  80ce38:	080e8440 	call	80e844 <__mcmp>
  80ce3c:	103edb0e 	bge	r2,zero,80c9ac <__alt_mem_onchip_mem+0xff8049ac>
  80ce40:	800b883a 	mov	r5,r16
  80ce44:	000f883a 	mov	r7,zero
  80ce48:	01800284 	movi	r6,10
  80ce4c:	e009883a 	mov	r4,fp
  80ce50:	080e04c0 	call	80e04c <__multadd>
  80ce54:	1021883a 	mov	r16,r2
  80ce58:	d8800517 	ldw	r2,20(sp)
  80ce5c:	d8c00b17 	ldw	r3,44(sp)
  80ce60:	10bfffc4 	addi	r2,r2,-1
  80ce64:	d8800515 	stw	r2,20(sp)
  80ce68:	183f761e 	bne	r3,zero,80cc44 <__alt_mem_onchip_mem+0xff804c44>
  80ce6c:	d9000c17 	ldw	r4,48(sp)
  80ce70:	0101730e 	bge	zero,r4,80d440 <_dtoa_r+0x15cc>
  80ce74:	d9000615 	stw	r4,24(sp)
  80ce78:	003ed006 	br	80c9bc <__alt_mem_onchip_mem+0xff8049bc>
  80ce7c:	00800084 	movi	r2,2
  80ce80:	3081861e 	bne	r6,r2,80d49c <_dtoa_r+0x1628>
  80ce84:	d8000b15 	stw	zero,44(sp)
  80ce88:	003f3c06 	br	80cb7c <__alt_mem_onchip_mem+0xff804b7c>
  80ce8c:	dc000917 	ldw	r16,36(sp)
  80ce90:	003e9206 	br	80c8dc <__alt_mem_onchip_mem+0xff8048dc>
  80ce94:	d9c00317 	ldw	r7,12(sp)
  80ce98:	00800084 	movi	r2,2
  80ce9c:	11fec50e 	bge	r2,r7,80c9b4 <__alt_mem_onchip_mem+0xff8049b4>
  80cea0:	d9000617 	ldw	r4,24(sp)
  80cea4:	20013c1e 	bne	r4,zero,80d398 <_dtoa_r+0x1524>
  80cea8:	a80b883a 	mov	r5,r21
  80ceac:	000f883a 	mov	r7,zero
  80ceb0:	01800144 	movi	r6,5
  80ceb4:	e009883a 	mov	r4,fp
  80ceb8:	080e04c0 	call	80e04c <__multadd>
  80cebc:	100b883a 	mov	r5,r2
  80cec0:	8009883a 	mov	r4,r16
  80cec4:	102b883a 	mov	r21,r2
  80cec8:	080e8440 	call	80e844 <__mcmp>
  80cecc:	dc000915 	stw	r16,36(sp)
  80ced0:	00bf410e 	bge	zero,r2,80cbd8 <__alt_mem_onchip_mem+0xff804bd8>
  80ced4:	d9c00717 	ldw	r7,28(sp)
  80ced8:	00800c44 	movi	r2,49
  80cedc:	38800005 	stb	r2,0(r7)
  80cee0:	d8800517 	ldw	r2,20(sp)
  80cee4:	3dc00044 	addi	r23,r7,1
  80cee8:	10800044 	addi	r2,r2,1
  80ceec:	d8800515 	stw	r2,20(sp)
  80cef0:	003f3d06 	br	80cbe8 <__alt_mem_onchip_mem+0xff804be8>
  80cef4:	d9800517 	ldw	r6,20(sp)
  80cef8:	d9c00717 	ldw	r7,28(sp)
  80cefc:	00800c44 	movi	r2,49
  80cf00:	31800044 	addi	r6,r6,1
  80cf04:	d9800515 	stw	r6,20(sp)
  80cf08:	38800005 	stb	r2,0(r7)
  80cf0c:	003edf06 	br	80ca8c <__alt_mem_onchip_mem+0xff804a8c>
  80cf10:	d8000b15 	stw	zero,44(sp)
  80cf14:	003c9f06 	br	80c194 <__alt_mem_onchip_mem+0xff804194>
  80cf18:	903e7e1e 	bne	r18,zero,80c914 <__alt_mem_onchip_mem+0xff804914>
  80cf1c:	00800434 	movhi	r2,16
  80cf20:	10bfffc4 	addi	r2,r2,-1
  80cf24:	9884703a 	and	r2,r19,r2
  80cf28:	1000ea1e 	bne	r2,zero,80d2d4 <_dtoa_r+0x1460>
  80cf2c:	9cdffc2c 	andhi	r19,r19,32752
  80cf30:	9800e826 	beq	r19,zero,80d2d4 <_dtoa_r+0x1460>
  80cf34:	d9c00817 	ldw	r7,32(sp)
  80cf38:	b5800044 	addi	r22,r22,1
  80cf3c:	04c00044 	movi	r19,1
  80cf40:	39c00044 	addi	r7,r7,1
  80cf44:	d9c00815 	stw	r7,32(sp)
  80cf48:	d8800d17 	ldw	r2,52(sp)
  80cf4c:	103e721e 	bne	r2,zero,80c918 <__alt_mem_onchip_mem+0xff804918>
  80cf50:	00800044 	movi	r2,1
  80cf54:	003e7906 	br	80c93c <__alt_mem_onchip_mem+0xff80493c>
  80cf58:	8009883a 	mov	r4,r16
  80cf5c:	0806f800 	call	806f80 <__floatsidf>
  80cf60:	d9800f17 	ldw	r6,60(sp)
  80cf64:	d9c01017 	ldw	r7,64(sp)
  80cf68:	1009883a 	mov	r4,r2
  80cf6c:	180b883a 	mov	r5,r3
  80cf70:	081275c0 	call	81275c <__muldf3>
  80cf74:	000d883a 	mov	r6,zero
  80cf78:	01d00734 	movhi	r7,16412
  80cf7c:	1009883a 	mov	r4,r2
  80cf80:	180b883a 	mov	r5,r3
  80cf84:	0805c080 	call	805c08 <__adddf3>
  80cf88:	047f3034 	movhi	r17,64704
  80cf8c:	1021883a 	mov	r16,r2
  80cf90:	1c63883a 	add	r17,r3,r17
  80cf94:	d9000f17 	ldw	r4,60(sp)
  80cf98:	d9401017 	ldw	r5,64(sp)
  80cf9c:	000d883a 	mov	r6,zero
  80cfa0:	01d00534 	movhi	r7,16404
  80cfa4:	08066840 	call	806684 <__subdf3>
  80cfa8:	800d883a 	mov	r6,r16
  80cfac:	880f883a 	mov	r7,r17
  80cfb0:	1009883a 	mov	r4,r2
  80cfb4:	180b883a 	mov	r5,r3
  80cfb8:	102b883a 	mov	r21,r2
  80cfbc:	1829883a 	mov	r20,r3
  80cfc0:	08064b40 	call	8064b4 <__gedf2>
  80cfc4:	00806c16 	blt	zero,r2,80d178 <_dtoa_r+0x1304>
  80cfc8:	89e0003c 	xorhi	r7,r17,32768
  80cfcc:	800d883a 	mov	r6,r16
  80cfd0:	a809883a 	mov	r4,r21
  80cfd4:	a00b883a 	mov	r5,r20
  80cfd8:	08065900 	call	806590 <__ledf2>
  80cfdc:	103d7e0e 	bge	r2,zero,80c5d8 <__alt_mem_onchip_mem+0xff8045d8>
  80cfe0:	002b883a 	mov	r21,zero
  80cfe4:	0023883a 	mov	r17,zero
  80cfe8:	003efb06 	br	80cbd8 <__alt_mem_onchip_mem+0xff804bd8>
  80cfec:	d8800717 	ldw	r2,28(sp)
  80cff0:	003bd006 	br	80bf34 <__alt_mem_onchip_mem+0xff803f34>
  80cff4:	d9000a17 	ldw	r4,40(sp)
  80cff8:	d9800d17 	ldw	r6,52(sp)
  80cffc:	dd400a15 	stw	r21,40(sp)
  80d000:	a905c83a 	sub	r2,r21,r4
  80d004:	308d883a 	add	r6,r6,r2
  80d008:	d9800d15 	stw	r6,52(sp)
  80d00c:	002b883a 	mov	r21,zero
  80d010:	003e0606 	br	80c82c <__alt_mem_onchip_mem+0xff80482c>
  80d014:	9023883a 	mov	r17,r18
  80d018:	9829883a 	mov	r20,r19
  80d01c:	04000084 	movi	r16,2
  80d020:	003c9206 	br	80c26c <__alt_mem_onchip_mem+0xff80426c>
  80d024:	04000044 	movi	r16,1
  80d028:	dc000c15 	stw	r16,48(sp)
  80d02c:	dc000615 	stw	r16,24(sp)
  80d030:	dc002215 	stw	r16,136(sp)
  80d034:	e0001115 	stw	zero,68(fp)
  80d038:	000b883a 	mov	r5,zero
  80d03c:	003c6906 	br	80c1e4 <__alt_mem_onchip_mem+0xff8041e4>
  80d040:	3021883a 	mov	r16,r6
  80d044:	003ffb06 	br	80d034 <__alt_mem_onchip_mem+0xff805034>
  80d048:	1000021e 	bne	r2,zero,80d054 <_dtoa_r+0x11e0>
  80d04c:	4200004c 	andi	r8,r8,1
  80d050:	403e7d1e 	bne	r8,zero,80ca48 <__alt_mem_onchip_mem+0xff804a48>
  80d054:	01000c04 	movi	r4,48
  80d058:	00000106 	br	80d060 <_dtoa_r+0x11ec>
  80d05c:	102f883a 	mov	r23,r2
  80d060:	b8bfffc4 	addi	r2,r23,-1
  80d064:	10c00007 	ldb	r3,0(r2)
  80d068:	193ffc26 	beq	r3,r4,80d05c <__alt_mem_onchip_mem+0xff80505c>
  80d06c:	003e8706 	br	80ca8c <__alt_mem_onchip_mem+0xff804a8c>
  80d070:	d8800517 	ldw	r2,20(sp)
  80d074:	00a3c83a 	sub	r17,zero,r2
  80d078:	8800a426 	beq	r17,zero,80d30c <_dtoa_r+0x1498>
  80d07c:	888003cc 	andi	r2,r17,15
  80d080:	100490fa 	slli	r2,r2,3
  80d084:	00c02074 	movhi	r3,129
  80d088:	18dd3804 	addi	r3,r3,29920
  80d08c:	1885883a 	add	r2,r3,r2
  80d090:	11800017 	ldw	r6,0(r2)
  80d094:	11c00117 	ldw	r7,4(r2)
  80d098:	9009883a 	mov	r4,r18
  80d09c:	980b883a 	mov	r5,r19
  80d0a0:	8823d13a 	srai	r17,r17,4
  80d0a4:	081275c0 	call	81275c <__muldf3>
  80d0a8:	d8800f15 	stw	r2,60(sp)
  80d0ac:	d8c01015 	stw	r3,64(sp)
  80d0b0:	8800e826 	beq	r17,zero,80d454 <_dtoa_r+0x15e0>
  80d0b4:	05002074 	movhi	r20,129
  80d0b8:	a51d2e04 	addi	r20,r20,29880
  80d0bc:	04000084 	movi	r16,2
  80d0c0:	8980004c 	andi	r6,r17,1
  80d0c4:	1009883a 	mov	r4,r2
  80d0c8:	8823d07a 	srai	r17,r17,1
  80d0cc:	180b883a 	mov	r5,r3
  80d0d0:	30000426 	beq	r6,zero,80d0e4 <_dtoa_r+0x1270>
  80d0d4:	a1800017 	ldw	r6,0(r20)
  80d0d8:	a1c00117 	ldw	r7,4(r20)
  80d0dc:	84000044 	addi	r16,r16,1
  80d0e0:	081275c0 	call	81275c <__muldf3>
  80d0e4:	a5000204 	addi	r20,r20,8
  80d0e8:	883ff51e 	bne	r17,zero,80d0c0 <__alt_mem_onchip_mem+0xff8050c0>
  80d0ec:	d8800f15 	stw	r2,60(sp)
  80d0f0:	d8c01015 	stw	r3,64(sp)
  80d0f4:	003c7606 	br	80c2d0 <__alt_mem_onchip_mem+0xff8042d0>
  80d0f8:	00c00c04 	movi	r3,48
  80d0fc:	10c00005 	stb	r3,0(r2)
  80d100:	d8c00517 	ldw	r3,20(sp)
  80d104:	bd3fffc3 	ldbu	r20,-1(r23)
  80d108:	18c00044 	addi	r3,r3,1
  80d10c:	d8c00515 	stw	r3,20(sp)
  80d110:	003db906 	br	80c7f8 <__alt_mem_onchip_mem+0xff8047f8>
  80d114:	89400117 	ldw	r5,4(r17)
  80d118:	e009883a 	mov	r4,fp
  80d11c:	080df7c0 	call	80df7c <_Balloc>
  80d120:	89800417 	ldw	r6,16(r17)
  80d124:	89400304 	addi	r5,r17,12
  80d128:	11000304 	addi	r4,r2,12
  80d12c:	31800084 	addi	r6,r6,2
  80d130:	318d883a 	add	r6,r6,r6
  80d134:	318d883a 	add	r6,r6,r6
  80d138:	1027883a 	mov	r19,r2
  80d13c:	080dcd80 	call	80dcd8 <memcpy>
  80d140:	01800044 	movi	r6,1
  80d144:	980b883a 	mov	r5,r19
  80d148:	e009883a 	mov	r4,fp
  80d14c:	080e6fc0 	call	80e6fc <__lshift>
  80d150:	1029883a 	mov	r20,r2
  80d154:	003ecc06 	br	80cc88 <__alt_mem_onchip_mem+0xff804c88>
  80d158:	00800e44 	movi	r2,57
  80d15c:	90809026 	beq	r18,r2,80d3a0 <_dtoa_r+0x152c>
  80d160:	92000044 	addi	r8,r18,1
  80d164:	003f1f06 	br	80cde4 <__alt_mem_onchip_mem+0xff804de4>
  80d168:	9011883a 	mov	r8,r18
  80d16c:	8825883a 	mov	r18,r17
  80d170:	a023883a 	mov	r17,r20
  80d174:	003e2906 	br	80ca1c <__alt_mem_onchip_mem+0xff804a1c>
  80d178:	002b883a 	mov	r21,zero
  80d17c:	0023883a 	mov	r17,zero
  80d180:	003f5406 	br	80ced4 <__alt_mem_onchip_mem+0xff804ed4>
  80d184:	61bfffc4 	addi	r6,r12,-1
  80d188:	300490fa 	slli	r2,r6,3
  80d18c:	00c02074 	movhi	r3,129
  80d190:	18dd3804 	addi	r3,r3,29920
  80d194:	1885883a 	add	r2,r3,r2
  80d198:	11000017 	ldw	r4,0(r2)
  80d19c:	11400117 	ldw	r5,4(r2)
  80d1a0:	d8800717 	ldw	r2,28(sp)
  80d1a4:	880f883a 	mov	r7,r17
  80d1a8:	d9801215 	stw	r6,72(sp)
  80d1ac:	800d883a 	mov	r6,r16
  80d1b0:	db001615 	stw	r12,88(sp)
  80d1b4:	15c00044 	addi	r23,r2,1
  80d1b8:	081275c0 	call	81275c <__muldf3>
  80d1bc:	d9401017 	ldw	r5,64(sp)
  80d1c0:	d9000f17 	ldw	r4,60(sp)
  80d1c4:	d8c01515 	stw	r3,84(sp)
  80d1c8:	d8801415 	stw	r2,80(sp)
  80d1cc:	0812e740 	call	812e74 <__fixdfsi>
  80d1d0:	1009883a 	mov	r4,r2
  80d1d4:	1021883a 	mov	r16,r2
  80d1d8:	0806f800 	call	806f80 <__floatsidf>
  80d1dc:	d9000f17 	ldw	r4,60(sp)
  80d1e0:	d9401017 	ldw	r5,64(sp)
  80d1e4:	100d883a 	mov	r6,r2
  80d1e8:	180f883a 	mov	r7,r3
  80d1ec:	08066840 	call	806684 <__subdf3>
  80d1f0:	1829883a 	mov	r20,r3
  80d1f4:	d8c00717 	ldw	r3,28(sp)
  80d1f8:	84000c04 	addi	r16,r16,48
  80d1fc:	1023883a 	mov	r17,r2
  80d200:	1c000005 	stb	r16,0(r3)
  80d204:	db001617 	ldw	r12,88(sp)
  80d208:	00800044 	movi	r2,1
  80d20c:	60802226 	beq	r12,r2,80d298 <_dtoa_r+0x1424>
  80d210:	d9c00717 	ldw	r7,28(sp)
  80d214:	8805883a 	mov	r2,r17
  80d218:	b82b883a 	mov	r21,r23
  80d21c:	3b19883a 	add	r12,r7,r12
  80d220:	6023883a 	mov	r17,r12
  80d224:	a007883a 	mov	r3,r20
  80d228:	dc800f15 	stw	r18,60(sp)
  80d22c:	000d883a 	mov	r6,zero
  80d230:	01d00934 	movhi	r7,16420
  80d234:	1009883a 	mov	r4,r2
  80d238:	180b883a 	mov	r5,r3
  80d23c:	081275c0 	call	81275c <__muldf3>
  80d240:	180b883a 	mov	r5,r3
  80d244:	1009883a 	mov	r4,r2
  80d248:	1829883a 	mov	r20,r3
  80d24c:	1025883a 	mov	r18,r2
  80d250:	0812e740 	call	812e74 <__fixdfsi>
  80d254:	1009883a 	mov	r4,r2
  80d258:	1021883a 	mov	r16,r2
  80d25c:	0806f800 	call	806f80 <__floatsidf>
  80d260:	100d883a 	mov	r6,r2
  80d264:	180f883a 	mov	r7,r3
  80d268:	9009883a 	mov	r4,r18
  80d26c:	a00b883a 	mov	r5,r20
  80d270:	84000c04 	addi	r16,r16,48
  80d274:	08066840 	call	806684 <__subdf3>
  80d278:	ad400044 	addi	r21,r21,1
  80d27c:	ac3fffc5 	stb	r16,-1(r21)
  80d280:	ac7fea1e 	bne	r21,r17,80d22c <__alt_mem_onchip_mem+0xff80522c>
  80d284:	1023883a 	mov	r17,r2
  80d288:	d8801217 	ldw	r2,72(sp)
  80d28c:	dc800f17 	ldw	r18,60(sp)
  80d290:	1829883a 	mov	r20,r3
  80d294:	b8af883a 	add	r23,r23,r2
  80d298:	d9001417 	ldw	r4,80(sp)
  80d29c:	d9401517 	ldw	r5,84(sp)
  80d2a0:	000d883a 	mov	r6,zero
  80d2a4:	01cff834 	movhi	r7,16352
  80d2a8:	0805c080 	call	805c08 <__adddf3>
  80d2ac:	880d883a 	mov	r6,r17
  80d2b0:	a00f883a 	mov	r7,r20
  80d2b4:	1009883a 	mov	r4,r2
  80d2b8:	180b883a 	mov	r5,r3
  80d2bc:	08065900 	call	806590 <__ledf2>
  80d2c0:	10003e0e 	bge	r2,zero,80d3bc <_dtoa_r+0x1548>
  80d2c4:	d9001317 	ldw	r4,76(sp)
  80d2c8:	bd3fffc3 	ldbu	r20,-1(r23)
  80d2cc:	d9000515 	stw	r4,20(sp)
  80d2d0:	003d3b06 	br	80c7c0 <__alt_mem_onchip_mem+0xff8047c0>
  80d2d4:	0027883a 	mov	r19,zero
  80d2d8:	003f1b06 	br	80cf48 <__alt_mem_onchip_mem+0xff804f48>
  80d2dc:	d8800817 	ldw	r2,32(sp)
  80d2e0:	11e9c83a 	sub	r20,r2,r7
  80d2e4:	0005883a 	mov	r2,zero
  80d2e8:	003d5406 	br	80c83c <__alt_mem_onchip_mem+0xff80483c>
  80d2ec:	00800044 	movi	r2,1
  80d2f0:	003dc706 	br	80ca10 <__alt_mem_onchip_mem+0xff804a10>
  80d2f4:	d8c00217 	ldw	r3,8(sp)
  80d2f8:	00800d84 	movi	r2,54
  80d2fc:	dd400a17 	ldw	r21,40(sp)
  80d300:	10c5c83a 	sub	r2,r2,r3
  80d304:	dd000817 	ldw	r20,32(sp)
  80d308:	003d4c06 	br	80c83c <__alt_mem_onchip_mem+0xff80483c>
  80d30c:	dc800f15 	stw	r18,60(sp)
  80d310:	dcc01015 	stw	r19,64(sp)
  80d314:	04000084 	movi	r16,2
  80d318:	003bed06 	br	80c2d0 <__alt_mem_onchip_mem+0xff8042d0>
  80d31c:	d9000617 	ldw	r4,24(sp)
  80d320:	203f0d26 	beq	r4,zero,80cf58 <__alt_mem_onchip_mem+0xff804f58>
  80d324:	d9800c17 	ldw	r6,48(sp)
  80d328:	01bcab0e 	bge	zero,r6,80c5d8 <__alt_mem_onchip_mem+0xff8045d8>
  80d32c:	d9401017 	ldw	r5,64(sp)
  80d330:	d9000f17 	ldw	r4,60(sp)
  80d334:	000d883a 	mov	r6,zero
  80d338:	01d00934 	movhi	r7,16420
  80d33c:	081275c0 	call	81275c <__muldf3>
  80d340:	81000044 	addi	r4,r16,1
  80d344:	d8800f15 	stw	r2,60(sp)
  80d348:	d8c01015 	stw	r3,64(sp)
  80d34c:	0806f800 	call	806f80 <__floatsidf>
  80d350:	d9800f17 	ldw	r6,60(sp)
  80d354:	d9c01017 	ldw	r7,64(sp)
  80d358:	1009883a 	mov	r4,r2
  80d35c:	180b883a 	mov	r5,r3
  80d360:	081275c0 	call	81275c <__muldf3>
  80d364:	01d00734 	movhi	r7,16412
  80d368:	000d883a 	mov	r6,zero
  80d36c:	1009883a 	mov	r4,r2
  80d370:	180b883a 	mov	r5,r3
  80d374:	0805c080 	call	805c08 <__adddf3>
  80d378:	d9c00517 	ldw	r7,20(sp)
  80d37c:	047f3034 	movhi	r17,64704
  80d380:	1021883a 	mov	r16,r2
  80d384:	39ffffc4 	addi	r7,r7,-1
  80d388:	d9c01315 	stw	r7,76(sp)
  80d38c:	1c63883a 	add	r17,r3,r17
  80d390:	db000c17 	ldw	r12,48(sp)
  80d394:	003bea06 	br	80c340 <__alt_mem_onchip_mem+0xff804340>
  80d398:	dc000915 	stw	r16,36(sp)
  80d39c:	003e0e06 	br	80cbd8 <__alt_mem_onchip_mem+0xff804bd8>
  80d3a0:	01000e44 	movi	r4,57
  80d3a4:	8825883a 	mov	r18,r17
  80d3a8:	9dc00044 	addi	r23,r19,1
  80d3ac:	99000005 	stb	r4,0(r19)
  80d3b0:	a023883a 	mov	r17,r20
  80d3b4:	dc000915 	stw	r16,36(sp)
  80d3b8:	003da406 	br	80ca4c <__alt_mem_onchip_mem+0xff804a4c>
  80d3bc:	d9801417 	ldw	r6,80(sp)
  80d3c0:	d9c01517 	ldw	r7,84(sp)
  80d3c4:	0009883a 	mov	r4,zero
  80d3c8:	014ff834 	movhi	r5,16352
  80d3cc:	08066840 	call	806684 <__subdf3>
  80d3d0:	880d883a 	mov	r6,r17
  80d3d4:	a00f883a 	mov	r7,r20
  80d3d8:	1009883a 	mov	r4,r2
  80d3dc:	180b883a 	mov	r5,r3
  80d3e0:	08064b40 	call	8064b4 <__gedf2>
  80d3e4:	00bc7c0e 	bge	zero,r2,80c5d8 <__alt_mem_onchip_mem+0xff8045d8>
  80d3e8:	01000c04 	movi	r4,48
  80d3ec:	00000106 	br	80d3f4 <_dtoa_r+0x1580>
  80d3f0:	102f883a 	mov	r23,r2
  80d3f4:	b8bfffc4 	addi	r2,r23,-1
  80d3f8:	10c00007 	ldb	r3,0(r2)
  80d3fc:	193ffc26 	beq	r3,r4,80d3f0 <__alt_mem_onchip_mem+0xff8053f0>
  80d400:	d9801317 	ldw	r6,76(sp)
  80d404:	d9800515 	stw	r6,20(sp)
  80d408:	003c4406 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80d40c:	d9801317 	ldw	r6,76(sp)
  80d410:	d9800515 	stw	r6,20(sp)
  80d414:	003cea06 	br	80c7c0 <__alt_mem_onchip_mem+0xff8047c0>
  80d418:	dd800f17 	ldw	r22,60(sp)
  80d41c:	dcc01017 	ldw	r19,64(sp)
  80d420:	dc801217 	ldw	r18,72(sp)
  80d424:	003c6c06 	br	80c5d8 <__alt_mem_onchip_mem+0xff8045d8>
  80d428:	903e031e 	bne	r18,zero,80cc38 <__alt_mem_onchip_mem+0xff804c38>
  80d42c:	003ebb06 	br	80cf1c <__alt_mem_onchip_mem+0xff804f1c>
  80d430:	103e6c1e 	bne	r2,zero,80cde4 <__alt_mem_onchip_mem+0xff804de4>
  80d434:	4080004c 	andi	r2,r8,1
  80d438:	103e6a26 	beq	r2,zero,80cde4 <__alt_mem_onchip_mem+0xff804de4>
  80d43c:	003e6606 	br	80cdd8 <__alt_mem_onchip_mem+0xff804dd8>
  80d440:	d8c00317 	ldw	r3,12(sp)
  80d444:	00800084 	movi	r2,2
  80d448:	10c02916 	blt	r2,r3,80d4f0 <_dtoa_r+0x167c>
  80d44c:	d9000c17 	ldw	r4,48(sp)
  80d450:	003e8806 	br	80ce74 <__alt_mem_onchip_mem+0xff804e74>
  80d454:	04000084 	movi	r16,2
  80d458:	003b9d06 	br	80c2d0 <__alt_mem_onchip_mem+0xff8042d0>
  80d45c:	d9001317 	ldw	r4,76(sp)
  80d460:	d9000515 	stw	r4,20(sp)
  80d464:	003cd606 	br	80c7c0 <__alt_mem_onchip_mem+0xff8047c0>
  80d468:	d8801317 	ldw	r2,76(sp)
  80d46c:	d8800515 	stw	r2,20(sp)
  80d470:	003c2a06 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80d474:	d9800317 	ldw	r6,12(sp)
  80d478:	00800084 	movi	r2,2
  80d47c:	11801516 	blt	r2,r6,80d4d4 <_dtoa_r+0x1660>
  80d480:	d9c00c17 	ldw	r7,48(sp)
  80d484:	d9c00615 	stw	r7,24(sp)
  80d488:	003df706 	br	80cc68 <__alt_mem_onchip_mem+0xff804c68>
  80d48c:	193d3926 	beq	r3,r4,80c974 <__alt_mem_onchip_mem+0xff804974>
  80d490:	00c00f04 	movi	r3,60
  80d494:	1885c83a 	sub	r2,r3,r2
  80d498:	003ddf06 	br	80cc18 <__alt_mem_onchip_mem+0xff804c18>
  80d49c:	e009883a 	mov	r4,fp
  80d4a0:	e0001115 	stw	zero,68(fp)
  80d4a4:	000b883a 	mov	r5,zero
  80d4a8:	080df7c0 	call	80df7c <_Balloc>
  80d4ac:	d8800715 	stw	r2,28(sp)
  80d4b0:	d8c00717 	ldw	r3,28(sp)
  80d4b4:	00bfffc4 	movi	r2,-1
  80d4b8:	01000044 	movi	r4,1
  80d4bc:	d8800c15 	stw	r2,48(sp)
  80d4c0:	e0c01015 	stw	r3,64(fp)
  80d4c4:	d9000b15 	stw	r4,44(sp)
  80d4c8:	d8800615 	stw	r2,24(sp)
  80d4cc:	d8002215 	stw	zero,136(sp)
  80d4d0:	003c4106 	br	80c5d8 <__alt_mem_onchip_mem+0xff8045d8>
  80d4d4:	d8c00c17 	ldw	r3,48(sp)
  80d4d8:	d8c00615 	stw	r3,24(sp)
  80d4dc:	003e7006 	br	80cea0 <__alt_mem_onchip_mem+0xff804ea0>
  80d4e0:	04400044 	movi	r17,1
  80d4e4:	003b2006 	br	80c168 <__alt_mem_onchip_mem+0xff804168>
  80d4e8:	000b883a 	mov	r5,zero
  80d4ec:	003b3d06 	br	80c1e4 <__alt_mem_onchip_mem+0xff8041e4>
  80d4f0:	d8800c17 	ldw	r2,48(sp)
  80d4f4:	d8800615 	stw	r2,24(sp)
  80d4f8:	003e6906 	br	80cea0 <__alt_mem_onchip_mem+0xff804ea0>

0080d4fc <__sflags>:
  80d4fc:	28800007 	ldb	r2,0(r5)
  80d500:	00c01c84 	movi	r3,114
  80d504:	10c02426 	beq	r2,r3,80d598 <__sflags+0x9c>
  80d508:	00c01dc4 	movi	r3,119
  80d50c:	10c01e26 	beq	r2,r3,80d588 <__sflags+0x8c>
  80d510:	00c01844 	movi	r3,97
  80d514:	10c00426 	beq	r2,r3,80d528 <__sflags+0x2c>
  80d518:	00800584 	movi	r2,22
  80d51c:	20800015 	stw	r2,0(r4)
  80d520:	0005883a 	mov	r2,zero
  80d524:	f800283a 	ret
  80d528:	02c08204 	movi	r11,520
  80d52c:	01000044 	movi	r4,1
  80d530:	00804204 	movi	r2,264
  80d534:	01c00ac4 	movi	r7,43
  80d538:	02bff8c4 	movi	r10,-29
  80d53c:	027fff04 	movi	r9,-4
  80d540:	02001e04 	movi	r8,120
  80d544:	29400044 	addi	r5,r5,1
  80d548:	28c00007 	ldb	r3,0(r5)
  80d54c:	18000626 	beq	r3,zero,80d568 <__sflags+0x6c>
  80d550:	19c00826 	beq	r3,r7,80d574 <__sflags+0x78>
  80d554:	1a3ffb1e 	bne	r3,r8,80d544 <__alt_mem_onchip_mem+0xff805544>
  80d558:	29400044 	addi	r5,r5,1
  80d55c:	28c00007 	ldb	r3,0(r5)
  80d560:	21020014 	ori	r4,r4,2048
  80d564:	183ffa1e 	bne	r3,zero,80d550 <__alt_mem_onchip_mem+0xff805550>
  80d568:	22c8b03a 	or	r4,r4,r11
  80d56c:	31000015 	stw	r4,0(r6)
  80d570:	f800283a 	ret
  80d574:	1284703a 	and	r2,r2,r10
  80d578:	2248703a 	and	r4,r4,r9
  80d57c:	10800414 	ori	r2,r2,16
  80d580:	21000094 	ori	r4,r4,2
  80d584:	003fef06 	br	80d544 <__alt_mem_onchip_mem+0xff805544>
  80d588:	02c18004 	movi	r11,1536
  80d58c:	01000044 	movi	r4,1
  80d590:	00800204 	movi	r2,8
  80d594:	003fe706 	br	80d534 <__alt_mem_onchip_mem+0xff805534>
  80d598:	0017883a 	mov	r11,zero
  80d59c:	0009883a 	mov	r4,zero
  80d5a0:	00800104 	movi	r2,4
  80d5a4:	003fe306 	br	80d534 <__alt_mem_onchip_mem+0xff805534>

0080d5a8 <__sfvwrite_r>:
  80d5a8:	30800217 	ldw	r2,8(r6)
  80d5ac:	10006726 	beq	r2,zero,80d74c <__sfvwrite_r+0x1a4>
  80d5b0:	28c0030b 	ldhu	r3,12(r5)
  80d5b4:	defff404 	addi	sp,sp,-48
  80d5b8:	dd400715 	stw	r21,28(sp)
  80d5bc:	dd000615 	stw	r20,24(sp)
  80d5c0:	dc000215 	stw	r16,8(sp)
  80d5c4:	dfc00b15 	stw	ra,44(sp)
  80d5c8:	df000a15 	stw	fp,40(sp)
  80d5cc:	ddc00915 	stw	r23,36(sp)
  80d5d0:	dd800815 	stw	r22,32(sp)
  80d5d4:	dcc00515 	stw	r19,20(sp)
  80d5d8:	dc800415 	stw	r18,16(sp)
  80d5dc:	dc400315 	stw	r17,12(sp)
  80d5e0:	1880020c 	andi	r2,r3,8
  80d5e4:	2821883a 	mov	r16,r5
  80d5e8:	202b883a 	mov	r21,r4
  80d5ec:	3029883a 	mov	r20,r6
  80d5f0:	10002726 	beq	r2,zero,80d690 <__sfvwrite_r+0xe8>
  80d5f4:	28800417 	ldw	r2,16(r5)
  80d5f8:	10002526 	beq	r2,zero,80d690 <__sfvwrite_r+0xe8>
  80d5fc:	1880008c 	andi	r2,r3,2
  80d600:	a4400017 	ldw	r17,0(r20)
  80d604:	10002a26 	beq	r2,zero,80d6b0 <__sfvwrite_r+0x108>
  80d608:	05a00034 	movhi	r22,32768
  80d60c:	0027883a 	mov	r19,zero
  80d610:	0025883a 	mov	r18,zero
  80d614:	b5bf0004 	addi	r22,r22,-1024
  80d618:	980d883a 	mov	r6,r19
  80d61c:	a809883a 	mov	r4,r21
  80d620:	90004626 	beq	r18,zero,80d73c <__sfvwrite_r+0x194>
  80d624:	900f883a 	mov	r7,r18
  80d628:	b480022e 	bgeu	r22,r18,80d634 <__sfvwrite_r+0x8c>
  80d62c:	01e00034 	movhi	r7,32768
  80d630:	39ff0004 	addi	r7,r7,-1024
  80d634:	80800917 	ldw	r2,36(r16)
  80d638:	81400717 	ldw	r5,28(r16)
  80d63c:	103ee83a 	callr	r2
  80d640:	0080570e 	bge	zero,r2,80d7a0 <__sfvwrite_r+0x1f8>
  80d644:	a0c00217 	ldw	r3,8(r20)
  80d648:	98a7883a 	add	r19,r19,r2
  80d64c:	90a5c83a 	sub	r18,r18,r2
  80d650:	1885c83a 	sub	r2,r3,r2
  80d654:	a0800215 	stw	r2,8(r20)
  80d658:	103fef1e 	bne	r2,zero,80d618 <__alt_mem_onchip_mem+0xff805618>
  80d65c:	0005883a 	mov	r2,zero
  80d660:	dfc00b17 	ldw	ra,44(sp)
  80d664:	df000a17 	ldw	fp,40(sp)
  80d668:	ddc00917 	ldw	r23,36(sp)
  80d66c:	dd800817 	ldw	r22,32(sp)
  80d670:	dd400717 	ldw	r21,28(sp)
  80d674:	dd000617 	ldw	r20,24(sp)
  80d678:	dcc00517 	ldw	r19,20(sp)
  80d67c:	dc800417 	ldw	r18,16(sp)
  80d680:	dc400317 	ldw	r17,12(sp)
  80d684:	dc000217 	ldw	r16,8(sp)
  80d688:	dec00c04 	addi	sp,sp,48
  80d68c:	f800283a 	ret
  80d690:	800b883a 	mov	r5,r16
  80d694:	a809883a 	mov	r4,r21
  80d698:	080bacc0 	call	80bacc <__swsetup_r>
  80d69c:	1000eb1e 	bne	r2,zero,80da4c <__sfvwrite_r+0x4a4>
  80d6a0:	80c0030b 	ldhu	r3,12(r16)
  80d6a4:	a4400017 	ldw	r17,0(r20)
  80d6a8:	1880008c 	andi	r2,r3,2
  80d6ac:	103fd61e 	bne	r2,zero,80d608 <__alt_mem_onchip_mem+0xff805608>
  80d6b0:	1880004c 	andi	r2,r3,1
  80d6b4:	10003f1e 	bne	r2,zero,80d7b4 <__sfvwrite_r+0x20c>
  80d6b8:	0039883a 	mov	fp,zero
  80d6bc:	0025883a 	mov	r18,zero
  80d6c0:	90001a26 	beq	r18,zero,80d72c <__sfvwrite_r+0x184>
  80d6c4:	1880800c 	andi	r2,r3,512
  80d6c8:	84c00217 	ldw	r19,8(r16)
  80d6cc:	10002126 	beq	r2,zero,80d754 <__sfvwrite_r+0x1ac>
  80d6d0:	982f883a 	mov	r23,r19
  80d6d4:	94c09336 	bltu	r18,r19,80d924 <__sfvwrite_r+0x37c>
  80d6d8:	1881200c 	andi	r2,r3,1152
  80d6dc:	10009e1e 	bne	r2,zero,80d958 <__sfvwrite_r+0x3b0>
  80d6e0:	81000017 	ldw	r4,0(r16)
  80d6e4:	b80d883a 	mov	r6,r23
  80d6e8:	e00b883a 	mov	r5,fp
  80d6ec:	080de200 	call	80de20 <memmove>
  80d6f0:	80c00217 	ldw	r3,8(r16)
  80d6f4:	81000017 	ldw	r4,0(r16)
  80d6f8:	9005883a 	mov	r2,r18
  80d6fc:	1ce7c83a 	sub	r19,r3,r19
  80d700:	25cf883a 	add	r7,r4,r23
  80d704:	84c00215 	stw	r19,8(r16)
  80d708:	81c00015 	stw	r7,0(r16)
  80d70c:	a0c00217 	ldw	r3,8(r20)
  80d710:	e0b9883a 	add	fp,fp,r2
  80d714:	90a5c83a 	sub	r18,r18,r2
  80d718:	18a7c83a 	sub	r19,r3,r2
  80d71c:	a4c00215 	stw	r19,8(r20)
  80d720:	983fce26 	beq	r19,zero,80d65c <__alt_mem_onchip_mem+0xff80565c>
  80d724:	80c0030b 	ldhu	r3,12(r16)
  80d728:	903fe61e 	bne	r18,zero,80d6c4 <__alt_mem_onchip_mem+0xff8056c4>
  80d72c:	8f000017 	ldw	fp,0(r17)
  80d730:	8c800117 	ldw	r18,4(r17)
  80d734:	8c400204 	addi	r17,r17,8
  80d738:	003fe106 	br	80d6c0 <__alt_mem_onchip_mem+0xff8056c0>
  80d73c:	8cc00017 	ldw	r19,0(r17)
  80d740:	8c800117 	ldw	r18,4(r17)
  80d744:	8c400204 	addi	r17,r17,8
  80d748:	003fb306 	br	80d618 <__alt_mem_onchip_mem+0xff805618>
  80d74c:	0005883a 	mov	r2,zero
  80d750:	f800283a 	ret
  80d754:	81000017 	ldw	r4,0(r16)
  80d758:	80800417 	ldw	r2,16(r16)
  80d75c:	11005736 	bltu	r2,r4,80d8bc <__sfvwrite_r+0x314>
  80d760:	85c00517 	ldw	r23,20(r16)
  80d764:	95c05536 	bltu	r18,r23,80d8bc <__sfvwrite_r+0x314>
  80d768:	00a00034 	movhi	r2,32768
  80d76c:	10bfffc4 	addi	r2,r2,-1
  80d770:	9009883a 	mov	r4,r18
  80d774:	1480012e 	bgeu	r2,r18,80d77c <__sfvwrite_r+0x1d4>
  80d778:	1009883a 	mov	r4,r2
  80d77c:	b80b883a 	mov	r5,r23
  80d780:	0811c380 	call	811c38 <__divsi3>
  80d784:	15cf383a 	mul	r7,r2,r23
  80d788:	81400717 	ldw	r5,28(r16)
  80d78c:	80800917 	ldw	r2,36(r16)
  80d790:	e00d883a 	mov	r6,fp
  80d794:	a809883a 	mov	r4,r21
  80d798:	103ee83a 	callr	r2
  80d79c:	00bfdb16 	blt	zero,r2,80d70c <__alt_mem_onchip_mem+0xff80570c>
  80d7a0:	8080030b 	ldhu	r2,12(r16)
  80d7a4:	10801014 	ori	r2,r2,64
  80d7a8:	8080030d 	sth	r2,12(r16)
  80d7ac:	00bfffc4 	movi	r2,-1
  80d7b0:	003fab06 	br	80d660 <__alt_mem_onchip_mem+0xff805660>
  80d7b4:	0027883a 	mov	r19,zero
  80d7b8:	0011883a 	mov	r8,zero
  80d7bc:	0039883a 	mov	fp,zero
  80d7c0:	0025883a 	mov	r18,zero
  80d7c4:	90001f26 	beq	r18,zero,80d844 <__sfvwrite_r+0x29c>
  80d7c8:	40005a26 	beq	r8,zero,80d934 <__sfvwrite_r+0x38c>
  80d7cc:	982d883a 	mov	r22,r19
  80d7d0:	94c0012e 	bgeu	r18,r19,80d7d8 <__sfvwrite_r+0x230>
  80d7d4:	902d883a 	mov	r22,r18
  80d7d8:	81000017 	ldw	r4,0(r16)
  80d7dc:	80800417 	ldw	r2,16(r16)
  80d7e0:	b02f883a 	mov	r23,r22
  80d7e4:	81c00517 	ldw	r7,20(r16)
  80d7e8:	1100032e 	bgeu	r2,r4,80d7f8 <__sfvwrite_r+0x250>
  80d7ec:	80c00217 	ldw	r3,8(r16)
  80d7f0:	38c7883a 	add	r3,r7,r3
  80d7f4:	1d801816 	blt	r3,r22,80d858 <__sfvwrite_r+0x2b0>
  80d7f8:	b1c03e16 	blt	r22,r7,80d8f4 <__sfvwrite_r+0x34c>
  80d7fc:	80800917 	ldw	r2,36(r16)
  80d800:	81400717 	ldw	r5,28(r16)
  80d804:	e00d883a 	mov	r6,fp
  80d808:	da000115 	stw	r8,4(sp)
  80d80c:	a809883a 	mov	r4,r21
  80d810:	103ee83a 	callr	r2
  80d814:	102f883a 	mov	r23,r2
  80d818:	da000117 	ldw	r8,4(sp)
  80d81c:	00bfe00e 	bge	zero,r2,80d7a0 <__alt_mem_onchip_mem+0xff8057a0>
  80d820:	9de7c83a 	sub	r19,r19,r23
  80d824:	98001f26 	beq	r19,zero,80d8a4 <__sfvwrite_r+0x2fc>
  80d828:	a0800217 	ldw	r2,8(r20)
  80d82c:	e5f9883a 	add	fp,fp,r23
  80d830:	95e5c83a 	sub	r18,r18,r23
  80d834:	15efc83a 	sub	r23,r2,r23
  80d838:	a5c00215 	stw	r23,8(r20)
  80d83c:	b83f8726 	beq	r23,zero,80d65c <__alt_mem_onchip_mem+0xff80565c>
  80d840:	903fe11e 	bne	r18,zero,80d7c8 <__alt_mem_onchip_mem+0xff8057c8>
  80d844:	8f000017 	ldw	fp,0(r17)
  80d848:	8c800117 	ldw	r18,4(r17)
  80d84c:	0011883a 	mov	r8,zero
  80d850:	8c400204 	addi	r17,r17,8
  80d854:	003fdb06 	br	80d7c4 <__alt_mem_onchip_mem+0xff8057c4>
  80d858:	180d883a 	mov	r6,r3
  80d85c:	e00b883a 	mov	r5,fp
  80d860:	da000115 	stw	r8,4(sp)
  80d864:	d8c00015 	stw	r3,0(sp)
  80d868:	080de200 	call	80de20 <memmove>
  80d86c:	d8c00017 	ldw	r3,0(sp)
  80d870:	80800017 	ldw	r2,0(r16)
  80d874:	800b883a 	mov	r5,r16
  80d878:	a809883a 	mov	r4,r21
  80d87c:	10c5883a 	add	r2,r2,r3
  80d880:	80800015 	stw	r2,0(r16)
  80d884:	d8c00015 	stw	r3,0(sp)
  80d888:	08073e00 	call	8073e0 <_fflush_r>
  80d88c:	d8c00017 	ldw	r3,0(sp)
  80d890:	da000117 	ldw	r8,4(sp)
  80d894:	103fc21e 	bne	r2,zero,80d7a0 <__alt_mem_onchip_mem+0xff8057a0>
  80d898:	182f883a 	mov	r23,r3
  80d89c:	9de7c83a 	sub	r19,r19,r23
  80d8a0:	983fe11e 	bne	r19,zero,80d828 <__alt_mem_onchip_mem+0xff805828>
  80d8a4:	800b883a 	mov	r5,r16
  80d8a8:	a809883a 	mov	r4,r21
  80d8ac:	08073e00 	call	8073e0 <_fflush_r>
  80d8b0:	103fbb1e 	bne	r2,zero,80d7a0 <__alt_mem_onchip_mem+0xff8057a0>
  80d8b4:	0011883a 	mov	r8,zero
  80d8b8:	003fdb06 	br	80d828 <__alt_mem_onchip_mem+0xff805828>
  80d8bc:	94c0012e 	bgeu	r18,r19,80d8c4 <__sfvwrite_r+0x31c>
  80d8c0:	9027883a 	mov	r19,r18
  80d8c4:	980d883a 	mov	r6,r19
  80d8c8:	e00b883a 	mov	r5,fp
  80d8cc:	080de200 	call	80de20 <memmove>
  80d8d0:	80800217 	ldw	r2,8(r16)
  80d8d4:	80c00017 	ldw	r3,0(r16)
  80d8d8:	14c5c83a 	sub	r2,r2,r19
  80d8dc:	1cc7883a 	add	r3,r3,r19
  80d8e0:	80800215 	stw	r2,8(r16)
  80d8e4:	80c00015 	stw	r3,0(r16)
  80d8e8:	10004326 	beq	r2,zero,80d9f8 <__sfvwrite_r+0x450>
  80d8ec:	9805883a 	mov	r2,r19
  80d8f0:	003f8606 	br	80d70c <__alt_mem_onchip_mem+0xff80570c>
  80d8f4:	b00d883a 	mov	r6,r22
  80d8f8:	e00b883a 	mov	r5,fp
  80d8fc:	da000115 	stw	r8,4(sp)
  80d900:	080de200 	call	80de20 <memmove>
  80d904:	80800217 	ldw	r2,8(r16)
  80d908:	80c00017 	ldw	r3,0(r16)
  80d90c:	da000117 	ldw	r8,4(sp)
  80d910:	1585c83a 	sub	r2,r2,r22
  80d914:	1dad883a 	add	r22,r3,r22
  80d918:	80800215 	stw	r2,8(r16)
  80d91c:	85800015 	stw	r22,0(r16)
  80d920:	003fbf06 	br	80d820 <__alt_mem_onchip_mem+0xff805820>
  80d924:	81000017 	ldw	r4,0(r16)
  80d928:	9027883a 	mov	r19,r18
  80d92c:	902f883a 	mov	r23,r18
  80d930:	003f6c06 	br	80d6e4 <__alt_mem_onchip_mem+0xff8056e4>
  80d934:	900d883a 	mov	r6,r18
  80d938:	01400284 	movi	r5,10
  80d93c:	e009883a 	mov	r4,fp
  80d940:	080dbf40 	call	80dbf4 <memchr>
  80d944:	10003e26 	beq	r2,zero,80da40 <__sfvwrite_r+0x498>
  80d948:	10800044 	addi	r2,r2,1
  80d94c:	1727c83a 	sub	r19,r2,fp
  80d950:	02000044 	movi	r8,1
  80d954:	003f9d06 	br	80d7cc <__alt_mem_onchip_mem+0xff8057cc>
  80d958:	80800517 	ldw	r2,20(r16)
  80d95c:	81400417 	ldw	r5,16(r16)
  80d960:	81c00017 	ldw	r7,0(r16)
  80d964:	10a7883a 	add	r19,r2,r2
  80d968:	9885883a 	add	r2,r19,r2
  80d96c:	1026d7fa 	srli	r19,r2,31
  80d970:	396dc83a 	sub	r22,r7,r5
  80d974:	b1000044 	addi	r4,r22,1
  80d978:	9885883a 	add	r2,r19,r2
  80d97c:	1027d07a 	srai	r19,r2,1
  80d980:	2485883a 	add	r2,r4,r18
  80d984:	980d883a 	mov	r6,r19
  80d988:	9880022e 	bgeu	r19,r2,80d994 <__sfvwrite_r+0x3ec>
  80d98c:	1027883a 	mov	r19,r2
  80d990:	100d883a 	mov	r6,r2
  80d994:	18c1000c 	andi	r3,r3,1024
  80d998:	18001c26 	beq	r3,zero,80da0c <__sfvwrite_r+0x464>
  80d99c:	300b883a 	mov	r5,r6
  80d9a0:	a809883a 	mov	r4,r21
  80d9a4:	08086580 	call	808658 <_malloc_r>
  80d9a8:	102f883a 	mov	r23,r2
  80d9ac:	10002926 	beq	r2,zero,80da54 <__sfvwrite_r+0x4ac>
  80d9b0:	81400417 	ldw	r5,16(r16)
  80d9b4:	b00d883a 	mov	r6,r22
  80d9b8:	1009883a 	mov	r4,r2
  80d9bc:	080dcd80 	call	80dcd8 <memcpy>
  80d9c0:	8080030b 	ldhu	r2,12(r16)
  80d9c4:	00fedfc4 	movi	r3,-1153
  80d9c8:	10c4703a 	and	r2,r2,r3
  80d9cc:	10802014 	ori	r2,r2,128
  80d9d0:	8080030d 	sth	r2,12(r16)
  80d9d4:	bd89883a 	add	r4,r23,r22
  80d9d8:	9d8fc83a 	sub	r7,r19,r22
  80d9dc:	85c00415 	stw	r23,16(r16)
  80d9e0:	84c00515 	stw	r19,20(r16)
  80d9e4:	81000015 	stw	r4,0(r16)
  80d9e8:	9027883a 	mov	r19,r18
  80d9ec:	81c00215 	stw	r7,8(r16)
  80d9f0:	902f883a 	mov	r23,r18
  80d9f4:	003f3b06 	br	80d6e4 <__alt_mem_onchip_mem+0xff8056e4>
  80d9f8:	800b883a 	mov	r5,r16
  80d9fc:	a809883a 	mov	r4,r21
  80da00:	08073e00 	call	8073e0 <_fflush_r>
  80da04:	103fb926 	beq	r2,zero,80d8ec <__alt_mem_onchip_mem+0xff8058ec>
  80da08:	003f6506 	br	80d7a0 <__alt_mem_onchip_mem+0xff8057a0>
  80da0c:	a809883a 	mov	r4,r21
  80da10:	080efd80 	call	80efd8 <_realloc_r>
  80da14:	102f883a 	mov	r23,r2
  80da18:	103fee1e 	bne	r2,zero,80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80da1c:	81400417 	ldw	r5,16(r16)
  80da20:	a809883a 	mov	r4,r21
  80da24:	0807b280 	call	807b28 <_free_r>
  80da28:	8080030b 	ldhu	r2,12(r16)
  80da2c:	00ffdfc4 	movi	r3,-129
  80da30:	1884703a 	and	r2,r3,r2
  80da34:	00c00304 	movi	r3,12
  80da38:	a8c00015 	stw	r3,0(r21)
  80da3c:	003f5906 	br	80d7a4 <__alt_mem_onchip_mem+0xff8057a4>
  80da40:	94c00044 	addi	r19,r18,1
  80da44:	02000044 	movi	r8,1
  80da48:	003f6006 	br	80d7cc <__alt_mem_onchip_mem+0xff8057cc>
  80da4c:	00bfffc4 	movi	r2,-1
  80da50:	003f0306 	br	80d660 <__alt_mem_onchip_mem+0xff805660>
  80da54:	00800304 	movi	r2,12
  80da58:	a8800015 	stw	r2,0(r21)
  80da5c:	8080030b 	ldhu	r2,12(r16)
  80da60:	003f5006 	br	80d7a4 <__alt_mem_onchip_mem+0xff8057a4>

0080da64 <_isatty_r>:
  80da64:	defffd04 	addi	sp,sp,-12
  80da68:	dc000015 	stw	r16,0(sp)
  80da6c:	040020b4 	movhi	r16,130
  80da70:	dc400115 	stw	r17,4(sp)
  80da74:	842cb504 	addi	r16,r16,-19756
  80da78:	2023883a 	mov	r17,r4
  80da7c:	2809883a 	mov	r4,r5
  80da80:	dfc00215 	stw	ra,8(sp)
  80da84:	80000015 	stw	zero,0(r16)
  80da88:	08134a80 	call	8134a8 <isatty>
  80da8c:	00ffffc4 	movi	r3,-1
  80da90:	10c00526 	beq	r2,r3,80daa8 <_isatty_r+0x44>
  80da94:	dfc00217 	ldw	ra,8(sp)
  80da98:	dc400117 	ldw	r17,4(sp)
  80da9c:	dc000017 	ldw	r16,0(sp)
  80daa0:	dec00304 	addi	sp,sp,12
  80daa4:	f800283a 	ret
  80daa8:	80c00017 	ldw	r3,0(r16)
  80daac:	183ff926 	beq	r3,zero,80da94 <__alt_mem_onchip_mem+0xff805a94>
  80dab0:	88c00015 	stw	r3,0(r17)
  80dab4:	003ff706 	br	80da94 <__alt_mem_onchip_mem+0xff805a94>

0080dab8 <_setlocale_r>:
  80dab8:	30001b26 	beq	r6,zero,80db28 <_setlocale_r+0x70>
  80dabc:	01402074 	movhi	r5,129
  80dac0:	defffe04 	addi	sp,sp,-8
  80dac4:	295d1e04 	addi	r5,r5,29816
  80dac8:	3009883a 	mov	r4,r6
  80dacc:	dc000015 	stw	r16,0(sp)
  80dad0:	dfc00115 	stw	ra,4(sp)
  80dad4:	3021883a 	mov	r16,r6
  80dad8:	080f5b00 	call	80f5b0 <strcmp>
  80dadc:	1000061e 	bne	r2,zero,80daf8 <_setlocale_r+0x40>
  80dae0:	00802074 	movhi	r2,129
  80dae4:	109cff04 	addi	r2,r2,29692
  80dae8:	dfc00117 	ldw	ra,4(sp)
  80daec:	dc000017 	ldw	r16,0(sp)
  80daf0:	dec00204 	addi	sp,sp,8
  80daf4:	f800283a 	ret
  80daf8:	01402074 	movhi	r5,129
  80dafc:	295cff04 	addi	r5,r5,29692
  80db00:	8009883a 	mov	r4,r16
  80db04:	080f5b00 	call	80f5b0 <strcmp>
  80db08:	103ff526 	beq	r2,zero,80dae0 <__alt_mem_onchip_mem+0xff805ae0>
  80db0c:	01402074 	movhi	r5,129
  80db10:	295d0904 	addi	r5,r5,29732
  80db14:	8009883a 	mov	r4,r16
  80db18:	080f5b00 	call	80f5b0 <strcmp>
  80db1c:	103ff026 	beq	r2,zero,80dae0 <__alt_mem_onchip_mem+0xff805ae0>
  80db20:	0005883a 	mov	r2,zero
  80db24:	003ff006 	br	80dae8 <__alt_mem_onchip_mem+0xff805ae8>
  80db28:	00802074 	movhi	r2,129
  80db2c:	109cff04 	addi	r2,r2,29692
  80db30:	f800283a 	ret

0080db34 <__locale_charset>:
  80db34:	008020b4 	movhi	r2,130
  80db38:	10a03604 	addi	r2,r2,-32552
  80db3c:	f800283a 	ret

0080db40 <__locale_mb_cur_max>:
  80db40:	008020b4 	movhi	r2,130
  80db44:	10a55304 	addi	r2,r2,-27316
  80db48:	10800017 	ldw	r2,0(r2)
  80db4c:	f800283a 	ret

0080db50 <__locale_msgcharset>:
  80db50:	008020b4 	movhi	r2,130
  80db54:	10a02e04 	addi	r2,r2,-32584
  80db58:	f800283a 	ret

0080db5c <__locale_cjk_lang>:
  80db5c:	0005883a 	mov	r2,zero
  80db60:	f800283a 	ret

0080db64 <_localeconv_r>:
  80db64:	008020b4 	movhi	r2,130
  80db68:	10a03e04 	addi	r2,r2,-32520
  80db6c:	f800283a 	ret

0080db70 <setlocale>:
  80db70:	008020b4 	movhi	r2,130
  80db74:	10a55004 	addi	r2,r2,-27328
  80db78:	280d883a 	mov	r6,r5
  80db7c:	200b883a 	mov	r5,r4
  80db80:	11000017 	ldw	r4,0(r2)
  80db84:	080dab81 	jmpi	80dab8 <_setlocale_r>

0080db88 <localeconv>:
  80db88:	008020b4 	movhi	r2,130
  80db8c:	10a03e04 	addi	r2,r2,-32520
  80db90:	f800283a 	ret

0080db94 <_lseek_r>:
  80db94:	defffd04 	addi	sp,sp,-12
  80db98:	2805883a 	mov	r2,r5
  80db9c:	dc000015 	stw	r16,0(sp)
  80dba0:	040020b4 	movhi	r16,130
  80dba4:	dc400115 	stw	r17,4(sp)
  80dba8:	300b883a 	mov	r5,r6
  80dbac:	842cb504 	addi	r16,r16,-19756
  80dbb0:	2023883a 	mov	r17,r4
  80dbb4:	380d883a 	mov	r6,r7
  80dbb8:	1009883a 	mov	r4,r2
  80dbbc:	dfc00215 	stw	ra,8(sp)
  80dbc0:	80000015 	stw	zero,0(r16)
  80dbc4:	08136740 	call	813674 <lseek>
  80dbc8:	00ffffc4 	movi	r3,-1
  80dbcc:	10c00526 	beq	r2,r3,80dbe4 <_lseek_r+0x50>
  80dbd0:	dfc00217 	ldw	ra,8(sp)
  80dbd4:	dc400117 	ldw	r17,4(sp)
  80dbd8:	dc000017 	ldw	r16,0(sp)
  80dbdc:	dec00304 	addi	sp,sp,12
  80dbe0:	f800283a 	ret
  80dbe4:	80c00017 	ldw	r3,0(r16)
  80dbe8:	183ff926 	beq	r3,zero,80dbd0 <__alt_mem_onchip_mem+0xff805bd0>
  80dbec:	88c00015 	stw	r3,0(r17)
  80dbf0:	003ff706 	br	80dbd0 <__alt_mem_onchip_mem+0xff805bd0>

0080dbf4 <memchr>:
  80dbf4:	208000cc 	andi	r2,r4,3
  80dbf8:	280f883a 	mov	r7,r5
  80dbfc:	10003426 	beq	r2,zero,80dcd0 <memchr+0xdc>
  80dc00:	30bfffc4 	addi	r2,r6,-1
  80dc04:	30001a26 	beq	r6,zero,80dc70 <memchr+0x7c>
  80dc08:	20c00003 	ldbu	r3,0(r4)
  80dc0c:	29803fcc 	andi	r6,r5,255
  80dc10:	30c0051e 	bne	r6,r3,80dc28 <memchr+0x34>
  80dc14:	00001806 	br	80dc78 <memchr+0x84>
  80dc18:	10001526 	beq	r2,zero,80dc70 <memchr+0x7c>
  80dc1c:	20c00003 	ldbu	r3,0(r4)
  80dc20:	10bfffc4 	addi	r2,r2,-1
  80dc24:	30c01426 	beq	r6,r3,80dc78 <memchr+0x84>
  80dc28:	21000044 	addi	r4,r4,1
  80dc2c:	20c000cc 	andi	r3,r4,3
  80dc30:	183ff91e 	bne	r3,zero,80dc18 <__alt_mem_onchip_mem+0xff805c18>
  80dc34:	020000c4 	movi	r8,3
  80dc38:	40801136 	bltu	r8,r2,80dc80 <memchr+0x8c>
  80dc3c:	10000c26 	beq	r2,zero,80dc70 <memchr+0x7c>
  80dc40:	20c00003 	ldbu	r3,0(r4)
  80dc44:	29403fcc 	andi	r5,r5,255
  80dc48:	28c00b26 	beq	r5,r3,80dc78 <memchr+0x84>
  80dc4c:	20c00044 	addi	r3,r4,1
  80dc50:	39803fcc 	andi	r6,r7,255
  80dc54:	2089883a 	add	r4,r4,r2
  80dc58:	00000306 	br	80dc68 <memchr+0x74>
  80dc5c:	18c00044 	addi	r3,r3,1
  80dc60:	197fffc3 	ldbu	r5,-1(r3)
  80dc64:	31400526 	beq	r6,r5,80dc7c <memchr+0x88>
  80dc68:	1805883a 	mov	r2,r3
  80dc6c:	20fffb1e 	bne	r4,r3,80dc5c <__alt_mem_onchip_mem+0xff805c5c>
  80dc70:	0005883a 	mov	r2,zero
  80dc74:	f800283a 	ret
  80dc78:	2005883a 	mov	r2,r4
  80dc7c:	f800283a 	ret
  80dc80:	28c03fcc 	andi	r3,r5,255
  80dc84:	1812923a 	slli	r9,r3,8
  80dc88:	02ffbff4 	movhi	r11,65279
  80dc8c:	02a02074 	movhi	r10,32897
  80dc90:	48d2b03a 	or	r9,r9,r3
  80dc94:	4806943a 	slli	r3,r9,16
  80dc98:	5affbfc4 	addi	r11,r11,-257
  80dc9c:	52a02004 	addi	r10,r10,-32640
  80dca0:	48d2b03a 	or	r9,r9,r3
  80dca4:	20c00017 	ldw	r3,0(r4)
  80dca8:	48c6f03a 	xor	r3,r9,r3
  80dcac:	1acd883a 	add	r6,r3,r11
  80dcb0:	00c6303a 	nor	r3,zero,r3
  80dcb4:	30c6703a 	and	r3,r6,r3
  80dcb8:	1a86703a 	and	r3,r3,r10
  80dcbc:	183fe01e 	bne	r3,zero,80dc40 <__alt_mem_onchip_mem+0xff805c40>
  80dcc0:	10bfff04 	addi	r2,r2,-4
  80dcc4:	21000104 	addi	r4,r4,4
  80dcc8:	40bff636 	bltu	r8,r2,80dca4 <__alt_mem_onchip_mem+0xff805ca4>
  80dccc:	003fdb06 	br	80dc3c <__alt_mem_onchip_mem+0xff805c3c>
  80dcd0:	3005883a 	mov	r2,r6
  80dcd4:	003fd706 	br	80dc34 <__alt_mem_onchip_mem+0xff805c34>

0080dcd8 <memcpy>:
  80dcd8:	defffd04 	addi	sp,sp,-12
  80dcdc:	dfc00215 	stw	ra,8(sp)
  80dce0:	dc400115 	stw	r17,4(sp)
  80dce4:	dc000015 	stw	r16,0(sp)
  80dce8:	00c003c4 	movi	r3,15
  80dcec:	2005883a 	mov	r2,r4
  80dcf0:	1980452e 	bgeu	r3,r6,80de08 <memcpy+0x130>
  80dcf4:	2906b03a 	or	r3,r5,r4
  80dcf8:	18c000cc 	andi	r3,r3,3
  80dcfc:	1800441e 	bne	r3,zero,80de10 <memcpy+0x138>
  80dd00:	347ffc04 	addi	r17,r6,-16
  80dd04:	8822d13a 	srli	r17,r17,4
  80dd08:	28c00104 	addi	r3,r5,4
  80dd0c:	23400104 	addi	r13,r4,4
  80dd10:	8820913a 	slli	r16,r17,4
  80dd14:	2b000204 	addi	r12,r5,8
  80dd18:	22c00204 	addi	r11,r4,8
  80dd1c:	84000504 	addi	r16,r16,20
  80dd20:	2a800304 	addi	r10,r5,12
  80dd24:	22400304 	addi	r9,r4,12
  80dd28:	2c21883a 	add	r16,r5,r16
  80dd2c:	2811883a 	mov	r8,r5
  80dd30:	200f883a 	mov	r7,r4
  80dd34:	41000017 	ldw	r4,0(r8)
  80dd38:	1fc00017 	ldw	ra,0(r3)
  80dd3c:	63c00017 	ldw	r15,0(r12)
  80dd40:	39000015 	stw	r4,0(r7)
  80dd44:	53800017 	ldw	r14,0(r10)
  80dd48:	6fc00015 	stw	ra,0(r13)
  80dd4c:	5bc00015 	stw	r15,0(r11)
  80dd50:	4b800015 	stw	r14,0(r9)
  80dd54:	18c00404 	addi	r3,r3,16
  80dd58:	39c00404 	addi	r7,r7,16
  80dd5c:	42000404 	addi	r8,r8,16
  80dd60:	6b400404 	addi	r13,r13,16
  80dd64:	63000404 	addi	r12,r12,16
  80dd68:	5ac00404 	addi	r11,r11,16
  80dd6c:	52800404 	addi	r10,r10,16
  80dd70:	4a400404 	addi	r9,r9,16
  80dd74:	1c3fef1e 	bne	r3,r16,80dd34 <__alt_mem_onchip_mem+0xff805d34>
  80dd78:	89c00044 	addi	r7,r17,1
  80dd7c:	380e913a 	slli	r7,r7,4
  80dd80:	310003cc 	andi	r4,r6,15
  80dd84:	02c000c4 	movi	r11,3
  80dd88:	11c7883a 	add	r3,r2,r7
  80dd8c:	29cb883a 	add	r5,r5,r7
  80dd90:	5900212e 	bgeu	r11,r4,80de18 <memcpy+0x140>
  80dd94:	1813883a 	mov	r9,r3
  80dd98:	2811883a 	mov	r8,r5
  80dd9c:	200f883a 	mov	r7,r4
  80dda0:	42800017 	ldw	r10,0(r8)
  80dda4:	4a400104 	addi	r9,r9,4
  80dda8:	39ffff04 	addi	r7,r7,-4
  80ddac:	4abfff15 	stw	r10,-4(r9)
  80ddb0:	42000104 	addi	r8,r8,4
  80ddb4:	59fffa36 	bltu	r11,r7,80dda0 <__alt_mem_onchip_mem+0xff805da0>
  80ddb8:	213fff04 	addi	r4,r4,-4
  80ddbc:	2008d0ba 	srli	r4,r4,2
  80ddc0:	318000cc 	andi	r6,r6,3
  80ddc4:	21000044 	addi	r4,r4,1
  80ddc8:	2109883a 	add	r4,r4,r4
  80ddcc:	2109883a 	add	r4,r4,r4
  80ddd0:	1907883a 	add	r3,r3,r4
  80ddd4:	290b883a 	add	r5,r5,r4
  80ddd8:	30000626 	beq	r6,zero,80ddf4 <memcpy+0x11c>
  80dddc:	198d883a 	add	r6,r3,r6
  80dde0:	29c00003 	ldbu	r7,0(r5)
  80dde4:	18c00044 	addi	r3,r3,1
  80dde8:	29400044 	addi	r5,r5,1
  80ddec:	19ffffc5 	stb	r7,-1(r3)
  80ddf0:	19bffb1e 	bne	r3,r6,80dde0 <__alt_mem_onchip_mem+0xff805de0>
  80ddf4:	dfc00217 	ldw	ra,8(sp)
  80ddf8:	dc400117 	ldw	r17,4(sp)
  80ddfc:	dc000017 	ldw	r16,0(sp)
  80de00:	dec00304 	addi	sp,sp,12
  80de04:	f800283a 	ret
  80de08:	2007883a 	mov	r3,r4
  80de0c:	003ff206 	br	80ddd8 <__alt_mem_onchip_mem+0xff805dd8>
  80de10:	2007883a 	mov	r3,r4
  80de14:	003ff106 	br	80dddc <__alt_mem_onchip_mem+0xff805ddc>
  80de18:	200d883a 	mov	r6,r4
  80de1c:	003fee06 	br	80ddd8 <__alt_mem_onchip_mem+0xff805dd8>

0080de20 <memmove>:
  80de20:	2005883a 	mov	r2,r4
  80de24:	29000b2e 	bgeu	r5,r4,80de54 <memmove+0x34>
  80de28:	298f883a 	add	r7,r5,r6
  80de2c:	21c0092e 	bgeu	r4,r7,80de54 <memmove+0x34>
  80de30:	2187883a 	add	r3,r4,r6
  80de34:	198bc83a 	sub	r5,r3,r6
  80de38:	30004826 	beq	r6,zero,80df5c <memmove+0x13c>
  80de3c:	39ffffc4 	addi	r7,r7,-1
  80de40:	39000003 	ldbu	r4,0(r7)
  80de44:	18ffffc4 	addi	r3,r3,-1
  80de48:	19000005 	stb	r4,0(r3)
  80de4c:	28fffb1e 	bne	r5,r3,80de3c <__alt_mem_onchip_mem+0xff805e3c>
  80de50:	f800283a 	ret
  80de54:	00c003c4 	movi	r3,15
  80de58:	1980412e 	bgeu	r3,r6,80df60 <memmove+0x140>
  80de5c:	2886b03a 	or	r3,r5,r2
  80de60:	18c000cc 	andi	r3,r3,3
  80de64:	1800401e 	bne	r3,zero,80df68 <memmove+0x148>
  80de68:	33fffc04 	addi	r15,r6,-16
  80de6c:	781ed13a 	srli	r15,r15,4
  80de70:	28c00104 	addi	r3,r5,4
  80de74:	13400104 	addi	r13,r2,4
  80de78:	781c913a 	slli	r14,r15,4
  80de7c:	2b000204 	addi	r12,r5,8
  80de80:	12c00204 	addi	r11,r2,8
  80de84:	73800504 	addi	r14,r14,20
  80de88:	2a800304 	addi	r10,r5,12
  80de8c:	12400304 	addi	r9,r2,12
  80de90:	2b9d883a 	add	r14,r5,r14
  80de94:	2811883a 	mov	r8,r5
  80de98:	100f883a 	mov	r7,r2
  80de9c:	41000017 	ldw	r4,0(r8)
  80dea0:	39c00404 	addi	r7,r7,16
  80dea4:	18c00404 	addi	r3,r3,16
  80dea8:	393ffc15 	stw	r4,-16(r7)
  80deac:	193ffc17 	ldw	r4,-16(r3)
  80deb0:	6b400404 	addi	r13,r13,16
  80deb4:	5ac00404 	addi	r11,r11,16
  80deb8:	693ffc15 	stw	r4,-16(r13)
  80debc:	61000017 	ldw	r4,0(r12)
  80dec0:	4a400404 	addi	r9,r9,16
  80dec4:	42000404 	addi	r8,r8,16
  80dec8:	593ffc15 	stw	r4,-16(r11)
  80decc:	51000017 	ldw	r4,0(r10)
  80ded0:	63000404 	addi	r12,r12,16
  80ded4:	52800404 	addi	r10,r10,16
  80ded8:	493ffc15 	stw	r4,-16(r9)
  80dedc:	1bbfef1e 	bne	r3,r14,80de9c <__alt_mem_onchip_mem+0xff805e9c>
  80dee0:	79000044 	addi	r4,r15,1
  80dee4:	2008913a 	slli	r4,r4,4
  80dee8:	328003cc 	andi	r10,r6,15
  80deec:	02c000c4 	movi	r11,3
  80def0:	1107883a 	add	r3,r2,r4
  80def4:	290b883a 	add	r5,r5,r4
  80def8:	5a801e2e 	bgeu	r11,r10,80df74 <memmove+0x154>
  80defc:	1813883a 	mov	r9,r3
  80df00:	2811883a 	mov	r8,r5
  80df04:	500f883a 	mov	r7,r10
  80df08:	41000017 	ldw	r4,0(r8)
  80df0c:	4a400104 	addi	r9,r9,4
  80df10:	39ffff04 	addi	r7,r7,-4
  80df14:	493fff15 	stw	r4,-4(r9)
  80df18:	42000104 	addi	r8,r8,4
  80df1c:	59fffa36 	bltu	r11,r7,80df08 <__alt_mem_onchip_mem+0xff805f08>
  80df20:	513fff04 	addi	r4,r10,-4
  80df24:	2008d0ba 	srli	r4,r4,2
  80df28:	318000cc 	andi	r6,r6,3
  80df2c:	21000044 	addi	r4,r4,1
  80df30:	2109883a 	add	r4,r4,r4
  80df34:	2109883a 	add	r4,r4,r4
  80df38:	1907883a 	add	r3,r3,r4
  80df3c:	290b883a 	add	r5,r5,r4
  80df40:	30000b26 	beq	r6,zero,80df70 <memmove+0x150>
  80df44:	198d883a 	add	r6,r3,r6
  80df48:	29c00003 	ldbu	r7,0(r5)
  80df4c:	18c00044 	addi	r3,r3,1
  80df50:	29400044 	addi	r5,r5,1
  80df54:	19ffffc5 	stb	r7,-1(r3)
  80df58:	19bffb1e 	bne	r3,r6,80df48 <__alt_mem_onchip_mem+0xff805f48>
  80df5c:	f800283a 	ret
  80df60:	1007883a 	mov	r3,r2
  80df64:	003ff606 	br	80df40 <__alt_mem_onchip_mem+0xff805f40>
  80df68:	1007883a 	mov	r3,r2
  80df6c:	003ff506 	br	80df44 <__alt_mem_onchip_mem+0xff805f44>
  80df70:	f800283a 	ret
  80df74:	500d883a 	mov	r6,r10
  80df78:	003ff106 	br	80df40 <__alt_mem_onchip_mem+0xff805f40>

0080df7c <_Balloc>:
  80df7c:	20801317 	ldw	r2,76(r4)
  80df80:	defffc04 	addi	sp,sp,-16
  80df84:	dc400115 	stw	r17,4(sp)
  80df88:	dc000015 	stw	r16,0(sp)
  80df8c:	dfc00315 	stw	ra,12(sp)
  80df90:	dc800215 	stw	r18,8(sp)
  80df94:	2023883a 	mov	r17,r4
  80df98:	2821883a 	mov	r16,r5
  80df9c:	10000f26 	beq	r2,zero,80dfdc <_Balloc+0x60>
  80dfa0:	8407883a 	add	r3,r16,r16
  80dfa4:	18c7883a 	add	r3,r3,r3
  80dfa8:	10c7883a 	add	r3,r2,r3
  80dfac:	18800017 	ldw	r2,0(r3)
  80dfb0:	10001126 	beq	r2,zero,80dff8 <_Balloc+0x7c>
  80dfb4:	11000017 	ldw	r4,0(r2)
  80dfb8:	19000015 	stw	r4,0(r3)
  80dfbc:	10000415 	stw	zero,16(r2)
  80dfc0:	10000315 	stw	zero,12(r2)
  80dfc4:	dfc00317 	ldw	ra,12(sp)
  80dfc8:	dc800217 	ldw	r18,8(sp)
  80dfcc:	dc400117 	ldw	r17,4(sp)
  80dfd0:	dc000017 	ldw	r16,0(sp)
  80dfd4:	dec00404 	addi	sp,sp,16
  80dfd8:	f800283a 	ret
  80dfdc:	01800844 	movi	r6,33
  80dfe0:	01400104 	movi	r5,4
  80dfe4:	0810cd40 	call	810cd4 <_calloc_r>
  80dfe8:	88801315 	stw	r2,76(r17)
  80dfec:	103fec1e 	bne	r2,zero,80dfa0 <__alt_mem_onchip_mem+0xff805fa0>
  80dff0:	0005883a 	mov	r2,zero
  80dff4:	003ff306 	br	80dfc4 <__alt_mem_onchip_mem+0xff805fc4>
  80dff8:	01400044 	movi	r5,1
  80dffc:	2c24983a 	sll	r18,r5,r16
  80e000:	8809883a 	mov	r4,r17
  80e004:	91800144 	addi	r6,r18,5
  80e008:	318d883a 	add	r6,r6,r6
  80e00c:	318d883a 	add	r6,r6,r6
  80e010:	0810cd40 	call	810cd4 <_calloc_r>
  80e014:	103ff626 	beq	r2,zero,80dff0 <__alt_mem_onchip_mem+0xff805ff0>
  80e018:	14000115 	stw	r16,4(r2)
  80e01c:	14800215 	stw	r18,8(r2)
  80e020:	003fe606 	br	80dfbc <__alt_mem_onchip_mem+0xff805fbc>

0080e024 <_Bfree>:
  80e024:	28000826 	beq	r5,zero,80e048 <_Bfree+0x24>
  80e028:	28c00117 	ldw	r3,4(r5)
  80e02c:	20801317 	ldw	r2,76(r4)
  80e030:	18c7883a 	add	r3,r3,r3
  80e034:	18c7883a 	add	r3,r3,r3
  80e038:	10c5883a 	add	r2,r2,r3
  80e03c:	10c00017 	ldw	r3,0(r2)
  80e040:	28c00015 	stw	r3,0(r5)
  80e044:	11400015 	stw	r5,0(r2)
  80e048:	f800283a 	ret

0080e04c <__multadd>:
  80e04c:	defffa04 	addi	sp,sp,-24
  80e050:	dc800315 	stw	r18,12(sp)
  80e054:	dc400215 	stw	r17,8(sp)
  80e058:	dc000115 	stw	r16,4(sp)
  80e05c:	2823883a 	mov	r17,r5
  80e060:	2c000417 	ldw	r16,16(r5)
  80e064:	dfc00515 	stw	ra,20(sp)
  80e068:	dcc00415 	stw	r19,16(sp)
  80e06c:	2025883a 	mov	r18,r4
  80e070:	29400504 	addi	r5,r5,20
  80e074:	0011883a 	mov	r8,zero
  80e078:	28c00017 	ldw	r3,0(r5)
  80e07c:	29400104 	addi	r5,r5,4
  80e080:	42000044 	addi	r8,r8,1
  80e084:	18bfffcc 	andi	r2,r3,65535
  80e088:	1185383a 	mul	r2,r2,r6
  80e08c:	1806d43a 	srli	r3,r3,16
  80e090:	11cf883a 	add	r7,r2,r7
  80e094:	3808d43a 	srli	r4,r7,16
  80e098:	1987383a 	mul	r3,r3,r6
  80e09c:	38bfffcc 	andi	r2,r7,65535
  80e0a0:	1907883a 	add	r3,r3,r4
  80e0a4:	1808943a 	slli	r4,r3,16
  80e0a8:	180ed43a 	srli	r7,r3,16
  80e0ac:	2085883a 	add	r2,r4,r2
  80e0b0:	28bfff15 	stw	r2,-4(r5)
  80e0b4:	443ff016 	blt	r8,r16,80e078 <__alt_mem_onchip_mem+0xff806078>
  80e0b8:	38000926 	beq	r7,zero,80e0e0 <__multadd+0x94>
  80e0bc:	88800217 	ldw	r2,8(r17)
  80e0c0:	80800f0e 	bge	r16,r2,80e100 <__multadd+0xb4>
  80e0c4:	80800144 	addi	r2,r16,5
  80e0c8:	1085883a 	add	r2,r2,r2
  80e0cc:	1085883a 	add	r2,r2,r2
  80e0d0:	8885883a 	add	r2,r17,r2
  80e0d4:	11c00015 	stw	r7,0(r2)
  80e0d8:	84000044 	addi	r16,r16,1
  80e0dc:	8c000415 	stw	r16,16(r17)
  80e0e0:	8805883a 	mov	r2,r17
  80e0e4:	dfc00517 	ldw	ra,20(sp)
  80e0e8:	dcc00417 	ldw	r19,16(sp)
  80e0ec:	dc800317 	ldw	r18,12(sp)
  80e0f0:	dc400217 	ldw	r17,8(sp)
  80e0f4:	dc000117 	ldw	r16,4(sp)
  80e0f8:	dec00604 	addi	sp,sp,24
  80e0fc:	f800283a 	ret
  80e100:	89400117 	ldw	r5,4(r17)
  80e104:	9009883a 	mov	r4,r18
  80e108:	d9c00015 	stw	r7,0(sp)
  80e10c:	29400044 	addi	r5,r5,1
  80e110:	080df7c0 	call	80df7c <_Balloc>
  80e114:	89800417 	ldw	r6,16(r17)
  80e118:	89400304 	addi	r5,r17,12
  80e11c:	11000304 	addi	r4,r2,12
  80e120:	31800084 	addi	r6,r6,2
  80e124:	318d883a 	add	r6,r6,r6
  80e128:	318d883a 	add	r6,r6,r6
  80e12c:	1027883a 	mov	r19,r2
  80e130:	080dcd80 	call	80dcd8 <memcpy>
  80e134:	d9c00017 	ldw	r7,0(sp)
  80e138:	88000a26 	beq	r17,zero,80e164 <__multadd+0x118>
  80e13c:	88c00117 	ldw	r3,4(r17)
  80e140:	90801317 	ldw	r2,76(r18)
  80e144:	18c7883a 	add	r3,r3,r3
  80e148:	18c7883a 	add	r3,r3,r3
  80e14c:	10c5883a 	add	r2,r2,r3
  80e150:	10c00017 	ldw	r3,0(r2)
  80e154:	88c00015 	stw	r3,0(r17)
  80e158:	14400015 	stw	r17,0(r2)
  80e15c:	9823883a 	mov	r17,r19
  80e160:	003fd806 	br	80e0c4 <__alt_mem_onchip_mem+0xff8060c4>
  80e164:	9823883a 	mov	r17,r19
  80e168:	003fd606 	br	80e0c4 <__alt_mem_onchip_mem+0xff8060c4>

0080e16c <__s2b>:
  80e16c:	defff904 	addi	sp,sp,-28
  80e170:	dc400115 	stw	r17,4(sp)
  80e174:	dc000015 	stw	r16,0(sp)
  80e178:	2023883a 	mov	r17,r4
  80e17c:	2821883a 	mov	r16,r5
  80e180:	39000204 	addi	r4,r7,8
  80e184:	01400244 	movi	r5,9
  80e188:	dcc00315 	stw	r19,12(sp)
  80e18c:	dc800215 	stw	r18,8(sp)
  80e190:	dfc00615 	stw	ra,24(sp)
  80e194:	dd400515 	stw	r21,20(sp)
  80e198:	dd000415 	stw	r20,16(sp)
  80e19c:	3825883a 	mov	r18,r7
  80e1a0:	3027883a 	mov	r19,r6
  80e1a4:	0811c380 	call	811c38 <__divsi3>
  80e1a8:	00c00044 	movi	r3,1
  80e1ac:	000b883a 	mov	r5,zero
  80e1b0:	1880030e 	bge	r3,r2,80e1c0 <__s2b+0x54>
  80e1b4:	18c7883a 	add	r3,r3,r3
  80e1b8:	29400044 	addi	r5,r5,1
  80e1bc:	18bffd16 	blt	r3,r2,80e1b4 <__alt_mem_onchip_mem+0xff8061b4>
  80e1c0:	8809883a 	mov	r4,r17
  80e1c4:	080df7c0 	call	80df7c <_Balloc>
  80e1c8:	d8c00717 	ldw	r3,28(sp)
  80e1cc:	10c00515 	stw	r3,20(r2)
  80e1d0:	00c00044 	movi	r3,1
  80e1d4:	10c00415 	stw	r3,16(r2)
  80e1d8:	00c00244 	movi	r3,9
  80e1dc:	1cc0210e 	bge	r3,r19,80e264 <__s2b+0xf8>
  80e1e0:	80eb883a 	add	r21,r16,r3
  80e1e4:	a829883a 	mov	r20,r21
  80e1e8:	84e1883a 	add	r16,r16,r19
  80e1ec:	a1c00007 	ldb	r7,0(r20)
  80e1f0:	01800284 	movi	r6,10
  80e1f4:	a5000044 	addi	r20,r20,1
  80e1f8:	100b883a 	mov	r5,r2
  80e1fc:	39fff404 	addi	r7,r7,-48
  80e200:	8809883a 	mov	r4,r17
  80e204:	080e04c0 	call	80e04c <__multadd>
  80e208:	a43ff81e 	bne	r20,r16,80e1ec <__alt_mem_onchip_mem+0xff8061ec>
  80e20c:	ace1883a 	add	r16,r21,r19
  80e210:	843ffe04 	addi	r16,r16,-8
  80e214:	9c800a0e 	bge	r19,r18,80e240 <__s2b+0xd4>
  80e218:	94e5c83a 	sub	r18,r18,r19
  80e21c:	84a5883a 	add	r18,r16,r18
  80e220:	81c00007 	ldb	r7,0(r16)
  80e224:	01800284 	movi	r6,10
  80e228:	84000044 	addi	r16,r16,1
  80e22c:	100b883a 	mov	r5,r2
  80e230:	39fff404 	addi	r7,r7,-48
  80e234:	8809883a 	mov	r4,r17
  80e238:	080e04c0 	call	80e04c <__multadd>
  80e23c:	84bff81e 	bne	r16,r18,80e220 <__alt_mem_onchip_mem+0xff806220>
  80e240:	dfc00617 	ldw	ra,24(sp)
  80e244:	dd400517 	ldw	r21,20(sp)
  80e248:	dd000417 	ldw	r20,16(sp)
  80e24c:	dcc00317 	ldw	r19,12(sp)
  80e250:	dc800217 	ldw	r18,8(sp)
  80e254:	dc400117 	ldw	r17,4(sp)
  80e258:	dc000017 	ldw	r16,0(sp)
  80e25c:	dec00704 	addi	sp,sp,28
  80e260:	f800283a 	ret
  80e264:	84000284 	addi	r16,r16,10
  80e268:	1827883a 	mov	r19,r3
  80e26c:	003fe906 	br	80e214 <__alt_mem_onchip_mem+0xff806214>

0080e270 <__hi0bits>:
  80e270:	20bfffec 	andhi	r2,r4,65535
  80e274:	1000141e 	bne	r2,zero,80e2c8 <__hi0bits+0x58>
  80e278:	2008943a 	slli	r4,r4,16
  80e27c:	00800404 	movi	r2,16
  80e280:	20ffc02c 	andhi	r3,r4,65280
  80e284:	1800021e 	bne	r3,zero,80e290 <__hi0bits+0x20>
  80e288:	2008923a 	slli	r4,r4,8
  80e28c:	10800204 	addi	r2,r2,8
  80e290:	20fc002c 	andhi	r3,r4,61440
  80e294:	1800021e 	bne	r3,zero,80e2a0 <__hi0bits+0x30>
  80e298:	2008913a 	slli	r4,r4,4
  80e29c:	10800104 	addi	r2,r2,4
  80e2a0:	20f0002c 	andhi	r3,r4,49152
  80e2a4:	1800031e 	bne	r3,zero,80e2b4 <__hi0bits+0x44>
  80e2a8:	2109883a 	add	r4,r4,r4
  80e2ac:	10800084 	addi	r2,r2,2
  80e2b0:	2109883a 	add	r4,r4,r4
  80e2b4:	20000316 	blt	r4,zero,80e2c4 <__hi0bits+0x54>
  80e2b8:	2110002c 	andhi	r4,r4,16384
  80e2bc:	2000041e 	bne	r4,zero,80e2d0 <__hi0bits+0x60>
  80e2c0:	00800804 	movi	r2,32
  80e2c4:	f800283a 	ret
  80e2c8:	0005883a 	mov	r2,zero
  80e2cc:	003fec06 	br	80e280 <__alt_mem_onchip_mem+0xff806280>
  80e2d0:	10800044 	addi	r2,r2,1
  80e2d4:	f800283a 	ret

0080e2d8 <__lo0bits>:
  80e2d8:	20c00017 	ldw	r3,0(r4)
  80e2dc:	188001cc 	andi	r2,r3,7
  80e2e0:	10000826 	beq	r2,zero,80e304 <__lo0bits+0x2c>
  80e2e4:	1880004c 	andi	r2,r3,1
  80e2e8:	1000211e 	bne	r2,zero,80e370 <__lo0bits+0x98>
  80e2ec:	1880008c 	andi	r2,r3,2
  80e2f0:	1000211e 	bne	r2,zero,80e378 <__lo0bits+0xa0>
  80e2f4:	1806d0ba 	srli	r3,r3,2
  80e2f8:	00800084 	movi	r2,2
  80e2fc:	20c00015 	stw	r3,0(r4)
  80e300:	f800283a 	ret
  80e304:	18bfffcc 	andi	r2,r3,65535
  80e308:	10001326 	beq	r2,zero,80e358 <__lo0bits+0x80>
  80e30c:	0005883a 	mov	r2,zero
  80e310:	19403fcc 	andi	r5,r3,255
  80e314:	2800021e 	bne	r5,zero,80e320 <__lo0bits+0x48>
  80e318:	1806d23a 	srli	r3,r3,8
  80e31c:	10800204 	addi	r2,r2,8
  80e320:	194003cc 	andi	r5,r3,15
  80e324:	2800021e 	bne	r5,zero,80e330 <__lo0bits+0x58>
  80e328:	1806d13a 	srli	r3,r3,4
  80e32c:	10800104 	addi	r2,r2,4
  80e330:	194000cc 	andi	r5,r3,3
  80e334:	2800021e 	bne	r5,zero,80e340 <__lo0bits+0x68>
  80e338:	1806d0ba 	srli	r3,r3,2
  80e33c:	10800084 	addi	r2,r2,2
  80e340:	1940004c 	andi	r5,r3,1
  80e344:	2800081e 	bne	r5,zero,80e368 <__lo0bits+0x90>
  80e348:	1806d07a 	srli	r3,r3,1
  80e34c:	1800051e 	bne	r3,zero,80e364 <__lo0bits+0x8c>
  80e350:	00800804 	movi	r2,32
  80e354:	f800283a 	ret
  80e358:	1806d43a 	srli	r3,r3,16
  80e35c:	00800404 	movi	r2,16
  80e360:	003feb06 	br	80e310 <__alt_mem_onchip_mem+0xff806310>
  80e364:	10800044 	addi	r2,r2,1
  80e368:	20c00015 	stw	r3,0(r4)
  80e36c:	f800283a 	ret
  80e370:	0005883a 	mov	r2,zero
  80e374:	f800283a 	ret
  80e378:	1806d07a 	srli	r3,r3,1
  80e37c:	00800044 	movi	r2,1
  80e380:	20c00015 	stw	r3,0(r4)
  80e384:	f800283a 	ret

0080e388 <__i2b>:
  80e388:	defffd04 	addi	sp,sp,-12
  80e38c:	dc000015 	stw	r16,0(sp)
  80e390:	04000044 	movi	r16,1
  80e394:	dc400115 	stw	r17,4(sp)
  80e398:	2823883a 	mov	r17,r5
  80e39c:	800b883a 	mov	r5,r16
  80e3a0:	dfc00215 	stw	ra,8(sp)
  80e3a4:	080df7c0 	call	80df7c <_Balloc>
  80e3a8:	14400515 	stw	r17,20(r2)
  80e3ac:	14000415 	stw	r16,16(r2)
  80e3b0:	dfc00217 	ldw	ra,8(sp)
  80e3b4:	dc400117 	ldw	r17,4(sp)
  80e3b8:	dc000017 	ldw	r16,0(sp)
  80e3bc:	dec00304 	addi	sp,sp,12
  80e3c0:	f800283a 	ret

0080e3c4 <__multiply>:
  80e3c4:	defffa04 	addi	sp,sp,-24
  80e3c8:	dcc00315 	stw	r19,12(sp)
  80e3cc:	dc800215 	stw	r18,8(sp)
  80e3d0:	34c00417 	ldw	r19,16(r6)
  80e3d4:	2c800417 	ldw	r18,16(r5)
  80e3d8:	dd000415 	stw	r20,16(sp)
  80e3dc:	dc400115 	stw	r17,4(sp)
  80e3e0:	dfc00515 	stw	ra,20(sp)
  80e3e4:	dc000015 	stw	r16,0(sp)
  80e3e8:	2829883a 	mov	r20,r5
  80e3ec:	3023883a 	mov	r17,r6
  80e3f0:	94c0050e 	bge	r18,r19,80e408 <__multiply+0x44>
  80e3f4:	9007883a 	mov	r3,r18
  80e3f8:	3029883a 	mov	r20,r6
  80e3fc:	9825883a 	mov	r18,r19
  80e400:	2823883a 	mov	r17,r5
  80e404:	1827883a 	mov	r19,r3
  80e408:	a0800217 	ldw	r2,8(r20)
  80e40c:	94e1883a 	add	r16,r18,r19
  80e410:	a1400117 	ldw	r5,4(r20)
  80e414:	1400010e 	bge	r2,r16,80e41c <__multiply+0x58>
  80e418:	29400044 	addi	r5,r5,1
  80e41c:	080df7c0 	call	80df7c <_Balloc>
  80e420:	8415883a 	add	r10,r16,r16
  80e424:	12c00504 	addi	r11,r2,20
  80e428:	5295883a 	add	r10,r10,r10
  80e42c:	5a95883a 	add	r10,r11,r10
  80e430:	5807883a 	mov	r3,r11
  80e434:	5a80032e 	bgeu	r11,r10,80e444 <__multiply+0x80>
  80e438:	18000015 	stw	zero,0(r3)
  80e43c:	18c00104 	addi	r3,r3,4
  80e440:	1abffd36 	bltu	r3,r10,80e438 <__alt_mem_onchip_mem+0xff806438>
  80e444:	9ce7883a 	add	r19,r19,r19
  80e448:	94a5883a 	add	r18,r18,r18
  80e44c:	89800504 	addi	r6,r17,20
  80e450:	9ce7883a 	add	r19,r19,r19
  80e454:	a3400504 	addi	r13,r20,20
  80e458:	94a5883a 	add	r18,r18,r18
  80e45c:	34d9883a 	add	r12,r6,r19
  80e460:	6c93883a 	add	r9,r13,r18
  80e464:	3300422e 	bgeu	r6,r12,80e570 <__multiply+0x1ac>
  80e468:	37c00017 	ldw	ra,0(r6)
  80e46c:	fbffffcc 	andi	r15,ra,65535
  80e470:	78001b26 	beq	r15,zero,80e4e0 <__multiply+0x11c>
  80e474:	5811883a 	mov	r8,r11
  80e478:	681d883a 	mov	r14,r13
  80e47c:	000f883a 	mov	r7,zero
  80e480:	71000017 	ldw	r4,0(r14)
  80e484:	40c00017 	ldw	r3,0(r8)
  80e488:	73800104 	addi	r14,r14,4
  80e48c:	217fffcc 	andi	r5,r4,65535
  80e490:	2bcb383a 	mul	r5,r5,r15
  80e494:	2008d43a 	srli	r4,r4,16
  80e498:	1c7fffcc 	andi	r17,r3,65535
  80e49c:	2c4b883a 	add	r5,r5,r17
  80e4a0:	29cb883a 	add	r5,r5,r7
  80e4a4:	23c9383a 	mul	r4,r4,r15
  80e4a8:	1806d43a 	srli	r3,r3,16
  80e4ac:	280ed43a 	srli	r7,r5,16
  80e4b0:	297fffcc 	andi	r5,r5,65535
  80e4b4:	20c7883a 	add	r3,r4,r3
  80e4b8:	19c7883a 	add	r3,r3,r7
  80e4bc:	1808943a 	slli	r4,r3,16
  80e4c0:	4023883a 	mov	r17,r8
  80e4c4:	180ed43a 	srli	r7,r3,16
  80e4c8:	214ab03a 	or	r5,r4,r5
  80e4cc:	41400015 	stw	r5,0(r8)
  80e4d0:	42000104 	addi	r8,r8,4
  80e4d4:	727fea36 	bltu	r14,r9,80e480 <__alt_mem_onchip_mem+0xff806480>
  80e4d8:	89c00115 	stw	r7,4(r17)
  80e4dc:	37c00017 	ldw	ra,0(r6)
  80e4e0:	f83ed43a 	srli	ra,ra,16
  80e4e4:	f8001f26 	beq	ra,zero,80e564 <__multiply+0x1a0>
  80e4e8:	58c00017 	ldw	r3,0(r11)
  80e4ec:	681d883a 	mov	r14,r13
  80e4f0:	581f883a 	mov	r15,r11
  80e4f4:	1811883a 	mov	r8,r3
  80e4f8:	5825883a 	mov	r18,r11
  80e4fc:	000f883a 	mov	r7,zero
  80e500:	00000106 	br	80e508 <__multiply+0x144>
  80e504:	8825883a 	mov	r18,r17
  80e508:	7140000b 	ldhu	r5,0(r14)
  80e50c:	4010d43a 	srli	r8,r8,16
  80e510:	193fffcc 	andi	r4,r3,65535
  80e514:	2fcb383a 	mul	r5,r5,ra
  80e518:	7bc00104 	addi	r15,r15,4
  80e51c:	73800104 	addi	r14,r14,4
  80e520:	2a0b883a 	add	r5,r5,r8
  80e524:	29cb883a 	add	r5,r5,r7
  80e528:	2806943a 	slli	r3,r5,16
  80e52c:	94400104 	addi	r17,r18,4
  80e530:	280ad43a 	srli	r5,r5,16
  80e534:	1908b03a 	or	r4,r3,r4
  80e538:	793fff15 	stw	r4,-4(r15)
  80e53c:	70ffff17 	ldw	r3,-4(r14)
  80e540:	8a000017 	ldw	r8,0(r17)
  80e544:	1806d43a 	srli	r3,r3,16
  80e548:	413fffcc 	andi	r4,r8,65535
  80e54c:	1fc7383a 	mul	r3,r3,ra
  80e550:	1907883a 	add	r3,r3,r4
  80e554:	1947883a 	add	r3,r3,r5
  80e558:	180ed43a 	srli	r7,r3,16
  80e55c:	727fe936 	bltu	r14,r9,80e504 <__alt_mem_onchip_mem+0xff806504>
  80e560:	90c00115 	stw	r3,4(r18)
  80e564:	31800104 	addi	r6,r6,4
  80e568:	5ac00104 	addi	r11,r11,4
  80e56c:	333fbe36 	bltu	r6,r12,80e468 <__alt_mem_onchip_mem+0xff806468>
  80e570:	0400090e 	bge	zero,r16,80e598 <__multiply+0x1d4>
  80e574:	50ffff17 	ldw	r3,-4(r10)
  80e578:	52bfff04 	addi	r10,r10,-4
  80e57c:	18000326 	beq	r3,zero,80e58c <__multiply+0x1c8>
  80e580:	00000506 	br	80e598 <__multiply+0x1d4>
  80e584:	50c00017 	ldw	r3,0(r10)
  80e588:	1800031e 	bne	r3,zero,80e598 <__multiply+0x1d4>
  80e58c:	843fffc4 	addi	r16,r16,-1
  80e590:	52bfff04 	addi	r10,r10,-4
  80e594:	803ffb1e 	bne	r16,zero,80e584 <__alt_mem_onchip_mem+0xff806584>
  80e598:	14000415 	stw	r16,16(r2)
  80e59c:	dfc00517 	ldw	ra,20(sp)
  80e5a0:	dd000417 	ldw	r20,16(sp)
  80e5a4:	dcc00317 	ldw	r19,12(sp)
  80e5a8:	dc800217 	ldw	r18,8(sp)
  80e5ac:	dc400117 	ldw	r17,4(sp)
  80e5b0:	dc000017 	ldw	r16,0(sp)
  80e5b4:	dec00604 	addi	sp,sp,24
  80e5b8:	f800283a 	ret

0080e5bc <__pow5mult>:
  80e5bc:	defffa04 	addi	sp,sp,-24
  80e5c0:	dcc00315 	stw	r19,12(sp)
  80e5c4:	dc000015 	stw	r16,0(sp)
  80e5c8:	dfc00515 	stw	ra,20(sp)
  80e5cc:	dd000415 	stw	r20,16(sp)
  80e5d0:	dc800215 	stw	r18,8(sp)
  80e5d4:	dc400115 	stw	r17,4(sp)
  80e5d8:	308000cc 	andi	r2,r6,3
  80e5dc:	3021883a 	mov	r16,r6
  80e5e0:	2027883a 	mov	r19,r4
  80e5e4:	10002f1e 	bne	r2,zero,80e6a4 <__pow5mult+0xe8>
  80e5e8:	2825883a 	mov	r18,r5
  80e5ec:	8021d0ba 	srai	r16,r16,2
  80e5f0:	80001a26 	beq	r16,zero,80e65c <__pow5mult+0xa0>
  80e5f4:	9c401217 	ldw	r17,72(r19)
  80e5f8:	8800061e 	bne	r17,zero,80e614 <__pow5mult+0x58>
  80e5fc:	00003406 	br	80e6d0 <__pow5mult+0x114>
  80e600:	8021d07a 	srai	r16,r16,1
  80e604:	80001526 	beq	r16,zero,80e65c <__pow5mult+0xa0>
  80e608:	88800017 	ldw	r2,0(r17)
  80e60c:	10001c26 	beq	r2,zero,80e680 <__pow5mult+0xc4>
  80e610:	1023883a 	mov	r17,r2
  80e614:	8080004c 	andi	r2,r16,1
  80e618:	103ff926 	beq	r2,zero,80e600 <__alt_mem_onchip_mem+0xff806600>
  80e61c:	880d883a 	mov	r6,r17
  80e620:	900b883a 	mov	r5,r18
  80e624:	9809883a 	mov	r4,r19
  80e628:	080e3c40 	call	80e3c4 <__multiply>
  80e62c:	90001b26 	beq	r18,zero,80e69c <__pow5mult+0xe0>
  80e630:	91000117 	ldw	r4,4(r18)
  80e634:	98c01317 	ldw	r3,76(r19)
  80e638:	8021d07a 	srai	r16,r16,1
  80e63c:	2109883a 	add	r4,r4,r4
  80e640:	2109883a 	add	r4,r4,r4
  80e644:	1907883a 	add	r3,r3,r4
  80e648:	19000017 	ldw	r4,0(r3)
  80e64c:	91000015 	stw	r4,0(r18)
  80e650:	1c800015 	stw	r18,0(r3)
  80e654:	1025883a 	mov	r18,r2
  80e658:	803feb1e 	bne	r16,zero,80e608 <__alt_mem_onchip_mem+0xff806608>
  80e65c:	9005883a 	mov	r2,r18
  80e660:	dfc00517 	ldw	ra,20(sp)
  80e664:	dd000417 	ldw	r20,16(sp)
  80e668:	dcc00317 	ldw	r19,12(sp)
  80e66c:	dc800217 	ldw	r18,8(sp)
  80e670:	dc400117 	ldw	r17,4(sp)
  80e674:	dc000017 	ldw	r16,0(sp)
  80e678:	dec00604 	addi	sp,sp,24
  80e67c:	f800283a 	ret
  80e680:	880d883a 	mov	r6,r17
  80e684:	880b883a 	mov	r5,r17
  80e688:	9809883a 	mov	r4,r19
  80e68c:	080e3c40 	call	80e3c4 <__multiply>
  80e690:	88800015 	stw	r2,0(r17)
  80e694:	10000015 	stw	zero,0(r2)
  80e698:	003fdd06 	br	80e610 <__alt_mem_onchip_mem+0xff806610>
  80e69c:	1025883a 	mov	r18,r2
  80e6a0:	003fd706 	br	80e600 <__alt_mem_onchip_mem+0xff806600>
  80e6a4:	10bfffc4 	addi	r2,r2,-1
  80e6a8:	1085883a 	add	r2,r2,r2
  80e6ac:	00c02074 	movhi	r3,129
  80e6b0:	18dd2104 	addi	r3,r3,29828
  80e6b4:	1085883a 	add	r2,r2,r2
  80e6b8:	1885883a 	add	r2,r3,r2
  80e6bc:	11800017 	ldw	r6,0(r2)
  80e6c0:	000f883a 	mov	r7,zero
  80e6c4:	080e04c0 	call	80e04c <__multadd>
  80e6c8:	1025883a 	mov	r18,r2
  80e6cc:	003fc706 	br	80e5ec <__alt_mem_onchip_mem+0xff8065ec>
  80e6d0:	05000044 	movi	r20,1
  80e6d4:	a00b883a 	mov	r5,r20
  80e6d8:	9809883a 	mov	r4,r19
  80e6dc:	080df7c0 	call	80df7c <_Balloc>
  80e6e0:	1023883a 	mov	r17,r2
  80e6e4:	00809c44 	movi	r2,625
  80e6e8:	88800515 	stw	r2,20(r17)
  80e6ec:	8d000415 	stw	r20,16(r17)
  80e6f0:	9c401215 	stw	r17,72(r19)
  80e6f4:	88000015 	stw	zero,0(r17)
  80e6f8:	003fc606 	br	80e614 <__alt_mem_onchip_mem+0xff806614>

0080e6fc <__lshift>:
  80e6fc:	defff904 	addi	sp,sp,-28
  80e700:	dd400515 	stw	r21,20(sp)
  80e704:	dcc00315 	stw	r19,12(sp)
  80e708:	302bd17a 	srai	r21,r6,5
  80e70c:	2cc00417 	ldw	r19,16(r5)
  80e710:	28800217 	ldw	r2,8(r5)
  80e714:	dd000415 	stw	r20,16(sp)
  80e718:	ace7883a 	add	r19,r21,r19
  80e71c:	dc800215 	stw	r18,8(sp)
  80e720:	dc400115 	stw	r17,4(sp)
  80e724:	dc000015 	stw	r16,0(sp)
  80e728:	dfc00615 	stw	ra,24(sp)
  80e72c:	9c000044 	addi	r16,r19,1
  80e730:	2823883a 	mov	r17,r5
  80e734:	3029883a 	mov	r20,r6
  80e738:	2025883a 	mov	r18,r4
  80e73c:	29400117 	ldw	r5,4(r5)
  80e740:	1400030e 	bge	r2,r16,80e750 <__lshift+0x54>
  80e744:	1085883a 	add	r2,r2,r2
  80e748:	29400044 	addi	r5,r5,1
  80e74c:	143ffd16 	blt	r2,r16,80e744 <__alt_mem_onchip_mem+0xff806744>
  80e750:	9009883a 	mov	r4,r18
  80e754:	080df7c0 	call	80df7c <_Balloc>
  80e758:	10c00504 	addi	r3,r2,20
  80e75c:	0540070e 	bge	zero,r21,80e77c <__lshift+0x80>
  80e760:	ad6b883a 	add	r21,r21,r21
  80e764:	ad6b883a 	add	r21,r21,r21
  80e768:	1809883a 	mov	r4,r3
  80e76c:	1d47883a 	add	r3,r3,r21
  80e770:	20000015 	stw	zero,0(r4)
  80e774:	21000104 	addi	r4,r4,4
  80e778:	193ffd1e 	bne	r3,r4,80e770 <__alt_mem_onchip_mem+0xff806770>
  80e77c:	8a000417 	ldw	r8,16(r17)
  80e780:	89000504 	addi	r4,r17,20
  80e784:	a18007cc 	andi	r6,r20,31
  80e788:	4211883a 	add	r8,r8,r8
  80e78c:	4211883a 	add	r8,r8,r8
  80e790:	2211883a 	add	r8,r4,r8
  80e794:	30002326 	beq	r6,zero,80e824 <__lshift+0x128>
  80e798:	02400804 	movi	r9,32
  80e79c:	4993c83a 	sub	r9,r9,r6
  80e7a0:	000b883a 	mov	r5,zero
  80e7a4:	21c00017 	ldw	r7,0(r4)
  80e7a8:	1815883a 	mov	r10,r3
  80e7ac:	18c00104 	addi	r3,r3,4
  80e7b0:	398e983a 	sll	r7,r7,r6
  80e7b4:	21000104 	addi	r4,r4,4
  80e7b8:	394ab03a 	or	r5,r7,r5
  80e7bc:	197fff15 	stw	r5,-4(r3)
  80e7c0:	217fff17 	ldw	r5,-4(r4)
  80e7c4:	2a4ad83a 	srl	r5,r5,r9
  80e7c8:	223ff636 	bltu	r4,r8,80e7a4 <__alt_mem_onchip_mem+0xff8067a4>
  80e7cc:	51400115 	stw	r5,4(r10)
  80e7d0:	28001a1e 	bne	r5,zero,80e83c <__lshift+0x140>
  80e7d4:	843fffc4 	addi	r16,r16,-1
  80e7d8:	14000415 	stw	r16,16(r2)
  80e7dc:	88000826 	beq	r17,zero,80e800 <__lshift+0x104>
  80e7e0:	89000117 	ldw	r4,4(r17)
  80e7e4:	90c01317 	ldw	r3,76(r18)
  80e7e8:	2109883a 	add	r4,r4,r4
  80e7ec:	2109883a 	add	r4,r4,r4
  80e7f0:	1907883a 	add	r3,r3,r4
  80e7f4:	19000017 	ldw	r4,0(r3)
  80e7f8:	89000015 	stw	r4,0(r17)
  80e7fc:	1c400015 	stw	r17,0(r3)
  80e800:	dfc00617 	ldw	ra,24(sp)
  80e804:	dd400517 	ldw	r21,20(sp)
  80e808:	dd000417 	ldw	r20,16(sp)
  80e80c:	dcc00317 	ldw	r19,12(sp)
  80e810:	dc800217 	ldw	r18,8(sp)
  80e814:	dc400117 	ldw	r17,4(sp)
  80e818:	dc000017 	ldw	r16,0(sp)
  80e81c:	dec00704 	addi	sp,sp,28
  80e820:	f800283a 	ret
  80e824:	21400017 	ldw	r5,0(r4)
  80e828:	18c00104 	addi	r3,r3,4
  80e82c:	21000104 	addi	r4,r4,4
  80e830:	197fff15 	stw	r5,-4(r3)
  80e834:	223ffb36 	bltu	r4,r8,80e824 <__alt_mem_onchip_mem+0xff806824>
  80e838:	003fe606 	br	80e7d4 <__alt_mem_onchip_mem+0xff8067d4>
  80e83c:	9c000084 	addi	r16,r19,2
  80e840:	003fe406 	br	80e7d4 <__alt_mem_onchip_mem+0xff8067d4>

0080e844 <__mcmp>:
  80e844:	20800417 	ldw	r2,16(r4)
  80e848:	28c00417 	ldw	r3,16(r5)
  80e84c:	10c5c83a 	sub	r2,r2,r3
  80e850:	1000111e 	bne	r2,zero,80e898 <__mcmp+0x54>
  80e854:	18c7883a 	add	r3,r3,r3
  80e858:	18c7883a 	add	r3,r3,r3
  80e85c:	21000504 	addi	r4,r4,20
  80e860:	29400504 	addi	r5,r5,20
  80e864:	20c5883a 	add	r2,r4,r3
  80e868:	28cb883a 	add	r5,r5,r3
  80e86c:	00000106 	br	80e874 <__mcmp+0x30>
  80e870:	20800a2e 	bgeu	r4,r2,80e89c <__mcmp+0x58>
  80e874:	10bfff04 	addi	r2,r2,-4
  80e878:	297fff04 	addi	r5,r5,-4
  80e87c:	11800017 	ldw	r6,0(r2)
  80e880:	28c00017 	ldw	r3,0(r5)
  80e884:	30fffa26 	beq	r6,r3,80e870 <__alt_mem_onchip_mem+0xff806870>
  80e888:	30c00236 	bltu	r6,r3,80e894 <__mcmp+0x50>
  80e88c:	00800044 	movi	r2,1
  80e890:	f800283a 	ret
  80e894:	00bfffc4 	movi	r2,-1
  80e898:	f800283a 	ret
  80e89c:	0005883a 	mov	r2,zero
  80e8a0:	f800283a 	ret

0080e8a4 <__mdiff>:
  80e8a4:	28c00417 	ldw	r3,16(r5)
  80e8a8:	30800417 	ldw	r2,16(r6)
  80e8ac:	defffa04 	addi	sp,sp,-24
  80e8b0:	dcc00315 	stw	r19,12(sp)
  80e8b4:	dc800215 	stw	r18,8(sp)
  80e8b8:	dfc00515 	stw	ra,20(sp)
  80e8bc:	dd000415 	stw	r20,16(sp)
  80e8c0:	dc400115 	stw	r17,4(sp)
  80e8c4:	dc000015 	stw	r16,0(sp)
  80e8c8:	1887c83a 	sub	r3,r3,r2
  80e8cc:	2825883a 	mov	r18,r5
  80e8d0:	3027883a 	mov	r19,r6
  80e8d4:	1800141e 	bne	r3,zero,80e928 <__mdiff+0x84>
  80e8d8:	1085883a 	add	r2,r2,r2
  80e8dc:	1085883a 	add	r2,r2,r2
  80e8e0:	2a000504 	addi	r8,r5,20
  80e8e4:	34000504 	addi	r16,r6,20
  80e8e8:	4087883a 	add	r3,r8,r2
  80e8ec:	8085883a 	add	r2,r16,r2
  80e8f0:	00000106 	br	80e8f8 <__mdiff+0x54>
  80e8f4:	40c0592e 	bgeu	r8,r3,80ea5c <__mdiff+0x1b8>
  80e8f8:	18ffff04 	addi	r3,r3,-4
  80e8fc:	10bfff04 	addi	r2,r2,-4
  80e900:	19c00017 	ldw	r7,0(r3)
  80e904:	11400017 	ldw	r5,0(r2)
  80e908:	397ffa26 	beq	r7,r5,80e8f4 <__alt_mem_onchip_mem+0xff8068f4>
  80e90c:	3940592e 	bgeu	r7,r5,80ea74 <__mdiff+0x1d0>
  80e910:	9005883a 	mov	r2,r18
  80e914:	4023883a 	mov	r17,r8
  80e918:	9825883a 	mov	r18,r19
  80e91c:	05000044 	movi	r20,1
  80e920:	1027883a 	mov	r19,r2
  80e924:	00000406 	br	80e938 <__mdiff+0x94>
  80e928:	18005616 	blt	r3,zero,80ea84 <__mdiff+0x1e0>
  80e92c:	34400504 	addi	r17,r6,20
  80e930:	2c000504 	addi	r16,r5,20
  80e934:	0029883a 	mov	r20,zero
  80e938:	91400117 	ldw	r5,4(r18)
  80e93c:	080df7c0 	call	80df7c <_Balloc>
  80e940:	92400417 	ldw	r9,16(r18)
  80e944:	9b000417 	ldw	r12,16(r19)
  80e948:	12c00504 	addi	r11,r2,20
  80e94c:	4a51883a 	add	r8,r9,r9
  80e950:	6319883a 	add	r12,r12,r12
  80e954:	4211883a 	add	r8,r8,r8
  80e958:	6319883a 	add	r12,r12,r12
  80e95c:	15000315 	stw	r20,12(r2)
  80e960:	8211883a 	add	r8,r16,r8
  80e964:	8b19883a 	add	r12,r17,r12
  80e968:	0007883a 	mov	r3,zero
  80e96c:	81400017 	ldw	r5,0(r16)
  80e970:	89c00017 	ldw	r7,0(r17)
  80e974:	59800104 	addi	r6,r11,4
  80e978:	293fffcc 	andi	r4,r5,65535
  80e97c:	20c7883a 	add	r3,r4,r3
  80e980:	393fffcc 	andi	r4,r7,65535
  80e984:	1909c83a 	sub	r4,r3,r4
  80e988:	280ad43a 	srli	r5,r5,16
  80e98c:	380ed43a 	srli	r7,r7,16
  80e990:	2007d43a 	srai	r3,r4,16
  80e994:	213fffcc 	andi	r4,r4,65535
  80e998:	29cbc83a 	sub	r5,r5,r7
  80e99c:	28c7883a 	add	r3,r5,r3
  80e9a0:	180a943a 	slli	r5,r3,16
  80e9a4:	8c400104 	addi	r17,r17,4
  80e9a8:	84000104 	addi	r16,r16,4
  80e9ac:	2908b03a 	or	r4,r5,r4
  80e9b0:	59000015 	stw	r4,0(r11)
  80e9b4:	1807d43a 	srai	r3,r3,16
  80e9b8:	3015883a 	mov	r10,r6
  80e9bc:	3017883a 	mov	r11,r6
  80e9c0:	8b3fea36 	bltu	r17,r12,80e96c <__alt_mem_onchip_mem+0xff80696c>
  80e9c4:	8200162e 	bgeu	r16,r8,80ea20 <__mdiff+0x17c>
  80e9c8:	8017883a 	mov	r11,r16
  80e9cc:	59400017 	ldw	r5,0(r11)
  80e9d0:	31800104 	addi	r6,r6,4
  80e9d4:	5ac00104 	addi	r11,r11,4
  80e9d8:	293fffcc 	andi	r4,r5,65535
  80e9dc:	20c7883a 	add	r3,r4,r3
  80e9e0:	280ed43a 	srli	r7,r5,16
  80e9e4:	180bd43a 	srai	r5,r3,16
  80e9e8:	193fffcc 	andi	r4,r3,65535
  80e9ec:	3947883a 	add	r3,r7,r5
  80e9f0:	180a943a 	slli	r5,r3,16
  80e9f4:	1807d43a 	srai	r3,r3,16
  80e9f8:	2908b03a 	or	r4,r5,r4
  80e9fc:	313fff15 	stw	r4,-4(r6)
  80ea00:	5a3ff236 	bltu	r11,r8,80e9cc <__alt_mem_onchip_mem+0xff8069cc>
  80ea04:	0406303a 	nor	r3,zero,r16
  80ea08:	1a07883a 	add	r3,r3,r8
  80ea0c:	1806d0ba 	srli	r3,r3,2
  80ea10:	18c00044 	addi	r3,r3,1
  80ea14:	18c7883a 	add	r3,r3,r3
  80ea18:	18c7883a 	add	r3,r3,r3
  80ea1c:	50d5883a 	add	r10,r10,r3
  80ea20:	50ffff04 	addi	r3,r10,-4
  80ea24:	2000041e 	bne	r4,zero,80ea38 <__mdiff+0x194>
  80ea28:	18ffff04 	addi	r3,r3,-4
  80ea2c:	19000017 	ldw	r4,0(r3)
  80ea30:	4a7fffc4 	addi	r9,r9,-1
  80ea34:	203ffc26 	beq	r4,zero,80ea28 <__alt_mem_onchip_mem+0xff806a28>
  80ea38:	12400415 	stw	r9,16(r2)
  80ea3c:	dfc00517 	ldw	ra,20(sp)
  80ea40:	dd000417 	ldw	r20,16(sp)
  80ea44:	dcc00317 	ldw	r19,12(sp)
  80ea48:	dc800217 	ldw	r18,8(sp)
  80ea4c:	dc400117 	ldw	r17,4(sp)
  80ea50:	dc000017 	ldw	r16,0(sp)
  80ea54:	dec00604 	addi	sp,sp,24
  80ea58:	f800283a 	ret
  80ea5c:	000b883a 	mov	r5,zero
  80ea60:	080df7c0 	call	80df7c <_Balloc>
  80ea64:	00c00044 	movi	r3,1
  80ea68:	10c00415 	stw	r3,16(r2)
  80ea6c:	10000515 	stw	zero,20(r2)
  80ea70:	003ff206 	br	80ea3c <__alt_mem_onchip_mem+0xff806a3c>
  80ea74:	8023883a 	mov	r17,r16
  80ea78:	0029883a 	mov	r20,zero
  80ea7c:	4021883a 	mov	r16,r8
  80ea80:	003fad06 	br	80e938 <__alt_mem_onchip_mem+0xff806938>
  80ea84:	9005883a 	mov	r2,r18
  80ea88:	94400504 	addi	r17,r18,20
  80ea8c:	9c000504 	addi	r16,r19,20
  80ea90:	9825883a 	mov	r18,r19
  80ea94:	05000044 	movi	r20,1
  80ea98:	1027883a 	mov	r19,r2
  80ea9c:	003fa606 	br	80e938 <__alt_mem_onchip_mem+0xff806938>

0080eaa0 <__ulp>:
  80eaa0:	295ffc2c 	andhi	r5,r5,32752
  80eaa4:	00bf3034 	movhi	r2,64704
  80eaa8:	2887883a 	add	r3,r5,r2
  80eaac:	00c0020e 	bge	zero,r3,80eab8 <__ulp+0x18>
  80eab0:	0005883a 	mov	r2,zero
  80eab4:	f800283a 	ret
  80eab8:	00c7c83a 	sub	r3,zero,r3
  80eabc:	1807d53a 	srai	r3,r3,20
  80eac0:	008004c4 	movi	r2,19
  80eac4:	10c00b0e 	bge	r2,r3,80eaf4 <__ulp+0x54>
  80eac8:	18bffb04 	addi	r2,r3,-20
  80eacc:	01000784 	movi	r4,30
  80ead0:	0007883a 	mov	r3,zero
  80ead4:	20800516 	blt	r4,r2,80eaec <__ulp+0x4c>
  80ead8:	010007c4 	movi	r4,31
  80eadc:	2089c83a 	sub	r4,r4,r2
  80eae0:	00800044 	movi	r2,1
  80eae4:	1104983a 	sll	r2,r2,r4
  80eae8:	f800283a 	ret
  80eaec:	00800044 	movi	r2,1
  80eaf0:	f800283a 	ret
  80eaf4:	01400234 	movhi	r5,8
  80eaf8:	28c7d83a 	sra	r3,r5,r3
  80eafc:	0005883a 	mov	r2,zero
  80eb00:	f800283a 	ret

0080eb04 <__b2d>:
  80eb04:	defffa04 	addi	sp,sp,-24
  80eb08:	dc000015 	stw	r16,0(sp)
  80eb0c:	24000417 	ldw	r16,16(r4)
  80eb10:	dc400115 	stw	r17,4(sp)
  80eb14:	24400504 	addi	r17,r4,20
  80eb18:	8421883a 	add	r16,r16,r16
  80eb1c:	8421883a 	add	r16,r16,r16
  80eb20:	8c21883a 	add	r16,r17,r16
  80eb24:	dc800215 	stw	r18,8(sp)
  80eb28:	84bfff17 	ldw	r18,-4(r16)
  80eb2c:	dd000415 	stw	r20,16(sp)
  80eb30:	dcc00315 	stw	r19,12(sp)
  80eb34:	9009883a 	mov	r4,r18
  80eb38:	2829883a 	mov	r20,r5
  80eb3c:	dfc00515 	stw	ra,20(sp)
  80eb40:	080e2700 	call	80e270 <__hi0bits>
  80eb44:	00c00804 	movi	r3,32
  80eb48:	1889c83a 	sub	r4,r3,r2
  80eb4c:	a1000015 	stw	r4,0(r20)
  80eb50:	01000284 	movi	r4,10
  80eb54:	84ffff04 	addi	r19,r16,-4
  80eb58:	20801216 	blt	r4,r2,80eba4 <__b2d+0xa0>
  80eb5c:	018002c4 	movi	r6,11
  80eb60:	308dc83a 	sub	r6,r6,r2
  80eb64:	9186d83a 	srl	r3,r18,r6
  80eb68:	18cffc34 	orhi	r3,r3,16368
  80eb6c:	8cc0212e 	bgeu	r17,r19,80ebf4 <__b2d+0xf0>
  80eb70:	813ffe17 	ldw	r4,-8(r16)
  80eb74:	218cd83a 	srl	r6,r4,r6
  80eb78:	10800544 	addi	r2,r2,21
  80eb7c:	9084983a 	sll	r2,r18,r2
  80eb80:	1184b03a 	or	r2,r2,r6
  80eb84:	dfc00517 	ldw	ra,20(sp)
  80eb88:	dd000417 	ldw	r20,16(sp)
  80eb8c:	dcc00317 	ldw	r19,12(sp)
  80eb90:	dc800217 	ldw	r18,8(sp)
  80eb94:	dc400117 	ldw	r17,4(sp)
  80eb98:	dc000017 	ldw	r16,0(sp)
  80eb9c:	dec00604 	addi	sp,sp,24
  80eba0:	f800283a 	ret
  80eba4:	8cc00f2e 	bgeu	r17,r19,80ebe4 <__b2d+0xe0>
  80eba8:	117ffd44 	addi	r5,r2,-11
  80ebac:	80bffe17 	ldw	r2,-8(r16)
  80ebb0:	28000e26 	beq	r5,zero,80ebec <__b2d+0xe8>
  80ebb4:	1949c83a 	sub	r4,r3,r5
  80ebb8:	9164983a 	sll	r18,r18,r5
  80ebbc:	1106d83a 	srl	r3,r2,r4
  80ebc0:	81bffe04 	addi	r6,r16,-8
  80ebc4:	948ffc34 	orhi	r18,r18,16368
  80ebc8:	90c6b03a 	or	r3,r18,r3
  80ebcc:	89800e2e 	bgeu	r17,r6,80ec08 <__b2d+0x104>
  80ebd0:	81bffd17 	ldw	r6,-12(r16)
  80ebd4:	1144983a 	sll	r2,r2,r5
  80ebd8:	310ad83a 	srl	r5,r6,r4
  80ebdc:	2884b03a 	or	r2,r5,r2
  80ebe0:	003fe806 	br	80eb84 <__alt_mem_onchip_mem+0xff806b84>
  80ebe4:	10bffd44 	addi	r2,r2,-11
  80ebe8:	1000041e 	bne	r2,zero,80ebfc <__b2d+0xf8>
  80ebec:	90cffc34 	orhi	r3,r18,16368
  80ebf0:	003fe406 	br	80eb84 <__alt_mem_onchip_mem+0xff806b84>
  80ebf4:	000d883a 	mov	r6,zero
  80ebf8:	003fdf06 	br	80eb78 <__alt_mem_onchip_mem+0xff806b78>
  80ebfc:	90a4983a 	sll	r18,r18,r2
  80ec00:	0005883a 	mov	r2,zero
  80ec04:	003ff906 	br	80ebec <__alt_mem_onchip_mem+0xff806bec>
  80ec08:	1144983a 	sll	r2,r2,r5
  80ec0c:	003fdd06 	br	80eb84 <__alt_mem_onchip_mem+0xff806b84>

0080ec10 <__d2b>:
  80ec10:	defff804 	addi	sp,sp,-32
  80ec14:	dc000215 	stw	r16,8(sp)
  80ec18:	3021883a 	mov	r16,r6
  80ec1c:	dc400315 	stw	r17,12(sp)
  80ec20:	8022907a 	slli	r17,r16,1
  80ec24:	dd000615 	stw	r20,24(sp)
  80ec28:	2829883a 	mov	r20,r5
  80ec2c:	01400044 	movi	r5,1
  80ec30:	dcc00515 	stw	r19,20(sp)
  80ec34:	dc800415 	stw	r18,16(sp)
  80ec38:	dfc00715 	stw	ra,28(sp)
  80ec3c:	3825883a 	mov	r18,r7
  80ec40:	8822d57a 	srli	r17,r17,21
  80ec44:	080df7c0 	call	80df7c <_Balloc>
  80ec48:	1027883a 	mov	r19,r2
  80ec4c:	00800434 	movhi	r2,16
  80ec50:	10bfffc4 	addi	r2,r2,-1
  80ec54:	808c703a 	and	r6,r16,r2
  80ec58:	88000126 	beq	r17,zero,80ec60 <__d2b+0x50>
  80ec5c:	31800434 	orhi	r6,r6,16
  80ec60:	d9800015 	stw	r6,0(sp)
  80ec64:	a0002426 	beq	r20,zero,80ecf8 <__d2b+0xe8>
  80ec68:	d9000104 	addi	r4,sp,4
  80ec6c:	dd000115 	stw	r20,4(sp)
  80ec70:	080e2d80 	call	80e2d8 <__lo0bits>
  80ec74:	d8c00017 	ldw	r3,0(sp)
  80ec78:	10002f1e 	bne	r2,zero,80ed38 <__d2b+0x128>
  80ec7c:	d9000117 	ldw	r4,4(sp)
  80ec80:	99000515 	stw	r4,20(r19)
  80ec84:	1821003a 	cmpeq	r16,r3,zero
  80ec88:	01000084 	movi	r4,2
  80ec8c:	2421c83a 	sub	r16,r4,r16
  80ec90:	98c00615 	stw	r3,24(r19)
  80ec94:	9c000415 	stw	r16,16(r19)
  80ec98:	88001f1e 	bne	r17,zero,80ed18 <__d2b+0x108>
  80ec9c:	10bef384 	addi	r2,r2,-1074
  80eca0:	90800015 	stw	r2,0(r18)
  80eca4:	00900034 	movhi	r2,16384
  80eca8:	10bfffc4 	addi	r2,r2,-1
  80ecac:	8085883a 	add	r2,r16,r2
  80ecb0:	1085883a 	add	r2,r2,r2
  80ecb4:	1085883a 	add	r2,r2,r2
  80ecb8:	9885883a 	add	r2,r19,r2
  80ecbc:	11000517 	ldw	r4,20(r2)
  80ecc0:	8020917a 	slli	r16,r16,5
  80ecc4:	080e2700 	call	80e270 <__hi0bits>
  80ecc8:	d8c00817 	ldw	r3,32(sp)
  80eccc:	8085c83a 	sub	r2,r16,r2
  80ecd0:	18800015 	stw	r2,0(r3)
  80ecd4:	9805883a 	mov	r2,r19
  80ecd8:	dfc00717 	ldw	ra,28(sp)
  80ecdc:	dd000617 	ldw	r20,24(sp)
  80ece0:	dcc00517 	ldw	r19,20(sp)
  80ece4:	dc800417 	ldw	r18,16(sp)
  80ece8:	dc400317 	ldw	r17,12(sp)
  80ecec:	dc000217 	ldw	r16,8(sp)
  80ecf0:	dec00804 	addi	sp,sp,32
  80ecf4:	f800283a 	ret
  80ecf8:	d809883a 	mov	r4,sp
  80ecfc:	080e2d80 	call	80e2d8 <__lo0bits>
  80ed00:	d8c00017 	ldw	r3,0(sp)
  80ed04:	04000044 	movi	r16,1
  80ed08:	9c000415 	stw	r16,16(r19)
  80ed0c:	98c00515 	stw	r3,20(r19)
  80ed10:	10800804 	addi	r2,r2,32
  80ed14:	883fe126 	beq	r17,zero,80ec9c <__alt_mem_onchip_mem+0xff806c9c>
  80ed18:	00c00d44 	movi	r3,53
  80ed1c:	8c7ef344 	addi	r17,r17,-1075
  80ed20:	88a3883a 	add	r17,r17,r2
  80ed24:	1885c83a 	sub	r2,r3,r2
  80ed28:	d8c00817 	ldw	r3,32(sp)
  80ed2c:	94400015 	stw	r17,0(r18)
  80ed30:	18800015 	stw	r2,0(r3)
  80ed34:	003fe706 	br	80ecd4 <__alt_mem_onchip_mem+0xff806cd4>
  80ed38:	01000804 	movi	r4,32
  80ed3c:	2089c83a 	sub	r4,r4,r2
  80ed40:	1908983a 	sll	r4,r3,r4
  80ed44:	d9400117 	ldw	r5,4(sp)
  80ed48:	1886d83a 	srl	r3,r3,r2
  80ed4c:	2148b03a 	or	r4,r4,r5
  80ed50:	99000515 	stw	r4,20(r19)
  80ed54:	d8c00015 	stw	r3,0(sp)
  80ed58:	003fca06 	br	80ec84 <__alt_mem_onchip_mem+0xff806c84>

0080ed5c <__ratio>:
  80ed5c:	defff904 	addi	sp,sp,-28
  80ed60:	dc400315 	stw	r17,12(sp)
  80ed64:	2823883a 	mov	r17,r5
  80ed68:	d9400104 	addi	r5,sp,4
  80ed6c:	dfc00615 	stw	ra,24(sp)
  80ed70:	dcc00515 	stw	r19,20(sp)
  80ed74:	dc800415 	stw	r18,16(sp)
  80ed78:	2027883a 	mov	r19,r4
  80ed7c:	dc000215 	stw	r16,8(sp)
  80ed80:	080eb040 	call	80eb04 <__b2d>
  80ed84:	d80b883a 	mov	r5,sp
  80ed88:	8809883a 	mov	r4,r17
  80ed8c:	1025883a 	mov	r18,r2
  80ed90:	1821883a 	mov	r16,r3
  80ed94:	080eb040 	call	80eb04 <__b2d>
  80ed98:	8a000417 	ldw	r8,16(r17)
  80ed9c:	99000417 	ldw	r4,16(r19)
  80eda0:	d9400117 	ldw	r5,4(sp)
  80eda4:	2209c83a 	sub	r4,r4,r8
  80eda8:	2010917a 	slli	r8,r4,5
  80edac:	d9000017 	ldw	r4,0(sp)
  80edb0:	2909c83a 	sub	r4,r5,r4
  80edb4:	4109883a 	add	r4,r8,r4
  80edb8:	01000e0e 	bge	zero,r4,80edf4 <__ratio+0x98>
  80edbc:	2008953a 	slli	r4,r4,20
  80edc0:	2421883a 	add	r16,r4,r16
  80edc4:	100d883a 	mov	r6,r2
  80edc8:	180f883a 	mov	r7,r3
  80edcc:	9009883a 	mov	r4,r18
  80edd0:	800b883a 	mov	r5,r16
  80edd4:	0811dec0 	call	811dec <__divdf3>
  80edd8:	dfc00617 	ldw	ra,24(sp)
  80eddc:	dcc00517 	ldw	r19,20(sp)
  80ede0:	dc800417 	ldw	r18,16(sp)
  80ede4:	dc400317 	ldw	r17,12(sp)
  80ede8:	dc000217 	ldw	r16,8(sp)
  80edec:	dec00704 	addi	sp,sp,28
  80edf0:	f800283a 	ret
  80edf4:	2008953a 	slli	r4,r4,20
  80edf8:	1907c83a 	sub	r3,r3,r4
  80edfc:	003ff106 	br	80edc4 <__alt_mem_onchip_mem+0xff806dc4>

0080ee00 <_mprec_log10>:
  80ee00:	defffe04 	addi	sp,sp,-8
  80ee04:	dc000015 	stw	r16,0(sp)
  80ee08:	dfc00115 	stw	ra,4(sp)
  80ee0c:	008005c4 	movi	r2,23
  80ee10:	2021883a 	mov	r16,r4
  80ee14:	11000d0e 	bge	r2,r4,80ee4c <_mprec_log10+0x4c>
  80ee18:	0005883a 	mov	r2,zero
  80ee1c:	00cffc34 	movhi	r3,16368
  80ee20:	843fffc4 	addi	r16,r16,-1
  80ee24:	000d883a 	mov	r6,zero
  80ee28:	01d00934 	movhi	r7,16420
  80ee2c:	1009883a 	mov	r4,r2
  80ee30:	180b883a 	mov	r5,r3
  80ee34:	081275c0 	call	81275c <__muldf3>
  80ee38:	803ff91e 	bne	r16,zero,80ee20 <__alt_mem_onchip_mem+0xff806e20>
  80ee3c:	dfc00117 	ldw	ra,4(sp)
  80ee40:	dc000017 	ldw	r16,0(sp)
  80ee44:	dec00204 	addi	sp,sp,8
  80ee48:	f800283a 	ret
  80ee4c:	202090fa 	slli	r16,r4,3
  80ee50:	00802074 	movhi	r2,129
  80ee54:	109d3804 	addi	r2,r2,29920
  80ee58:	1421883a 	add	r16,r2,r16
  80ee5c:	80800017 	ldw	r2,0(r16)
  80ee60:	80c00117 	ldw	r3,4(r16)
  80ee64:	dfc00117 	ldw	ra,4(sp)
  80ee68:	dc000017 	ldw	r16,0(sp)
  80ee6c:	dec00204 	addi	sp,sp,8
  80ee70:	f800283a 	ret

0080ee74 <__copybits>:
  80ee74:	297fffc4 	addi	r5,r5,-1
  80ee78:	280fd17a 	srai	r7,r5,5
  80ee7c:	30c00417 	ldw	r3,16(r6)
  80ee80:	30800504 	addi	r2,r6,20
  80ee84:	39c00044 	addi	r7,r7,1
  80ee88:	18c7883a 	add	r3,r3,r3
  80ee8c:	39cf883a 	add	r7,r7,r7
  80ee90:	18c7883a 	add	r3,r3,r3
  80ee94:	39cf883a 	add	r7,r7,r7
  80ee98:	10c7883a 	add	r3,r2,r3
  80ee9c:	21cf883a 	add	r7,r4,r7
  80eea0:	10c00d2e 	bgeu	r2,r3,80eed8 <__copybits+0x64>
  80eea4:	200b883a 	mov	r5,r4
  80eea8:	12000017 	ldw	r8,0(r2)
  80eeac:	29400104 	addi	r5,r5,4
  80eeb0:	10800104 	addi	r2,r2,4
  80eeb4:	2a3fff15 	stw	r8,-4(r5)
  80eeb8:	10fffb36 	bltu	r2,r3,80eea8 <__alt_mem_onchip_mem+0xff806ea8>
  80eebc:	1985c83a 	sub	r2,r3,r6
  80eec0:	10bffac4 	addi	r2,r2,-21
  80eec4:	1004d0ba 	srli	r2,r2,2
  80eec8:	10800044 	addi	r2,r2,1
  80eecc:	1085883a 	add	r2,r2,r2
  80eed0:	1085883a 	add	r2,r2,r2
  80eed4:	2089883a 	add	r4,r4,r2
  80eed8:	21c0032e 	bgeu	r4,r7,80eee8 <__copybits+0x74>
  80eedc:	20000015 	stw	zero,0(r4)
  80eee0:	21000104 	addi	r4,r4,4
  80eee4:	21fffd36 	bltu	r4,r7,80eedc <__alt_mem_onchip_mem+0xff806edc>
  80eee8:	f800283a 	ret

0080eeec <__any_on>:
  80eeec:	20c00417 	ldw	r3,16(r4)
  80eef0:	2805d17a 	srai	r2,r5,5
  80eef4:	21000504 	addi	r4,r4,20
  80eef8:	18800d0e 	bge	r3,r2,80ef30 <__any_on+0x44>
  80eefc:	18c7883a 	add	r3,r3,r3
  80ef00:	18c7883a 	add	r3,r3,r3
  80ef04:	20c7883a 	add	r3,r4,r3
  80ef08:	20c0192e 	bgeu	r4,r3,80ef70 <__any_on+0x84>
  80ef0c:	18bfff17 	ldw	r2,-4(r3)
  80ef10:	18ffff04 	addi	r3,r3,-4
  80ef14:	1000041e 	bne	r2,zero,80ef28 <__any_on+0x3c>
  80ef18:	20c0142e 	bgeu	r4,r3,80ef6c <__any_on+0x80>
  80ef1c:	18ffff04 	addi	r3,r3,-4
  80ef20:	19400017 	ldw	r5,0(r3)
  80ef24:	283ffc26 	beq	r5,zero,80ef18 <__alt_mem_onchip_mem+0xff806f18>
  80ef28:	00800044 	movi	r2,1
  80ef2c:	f800283a 	ret
  80ef30:	10c00a0e 	bge	r2,r3,80ef5c <__any_on+0x70>
  80ef34:	1085883a 	add	r2,r2,r2
  80ef38:	1085883a 	add	r2,r2,r2
  80ef3c:	294007cc 	andi	r5,r5,31
  80ef40:	2087883a 	add	r3,r4,r2
  80ef44:	283ff026 	beq	r5,zero,80ef08 <__alt_mem_onchip_mem+0xff806f08>
  80ef48:	19800017 	ldw	r6,0(r3)
  80ef4c:	3144d83a 	srl	r2,r6,r5
  80ef50:	114a983a 	sll	r5,r2,r5
  80ef54:	317ff41e 	bne	r6,r5,80ef28 <__alt_mem_onchip_mem+0xff806f28>
  80ef58:	003feb06 	br	80ef08 <__alt_mem_onchip_mem+0xff806f08>
  80ef5c:	1085883a 	add	r2,r2,r2
  80ef60:	1085883a 	add	r2,r2,r2
  80ef64:	2087883a 	add	r3,r4,r2
  80ef68:	003fe706 	br	80ef08 <__alt_mem_onchip_mem+0xff806f08>
  80ef6c:	f800283a 	ret
  80ef70:	0005883a 	mov	r2,zero
  80ef74:	f800283a 	ret

0080ef78 <_read_r>:
  80ef78:	defffd04 	addi	sp,sp,-12
  80ef7c:	2805883a 	mov	r2,r5
  80ef80:	dc000015 	stw	r16,0(sp)
  80ef84:	040020b4 	movhi	r16,130
  80ef88:	dc400115 	stw	r17,4(sp)
  80ef8c:	300b883a 	mov	r5,r6
  80ef90:	842cb504 	addi	r16,r16,-19756
  80ef94:	2023883a 	mov	r17,r4
  80ef98:	380d883a 	mov	r6,r7
  80ef9c:	1009883a 	mov	r4,r2
  80efa0:	dfc00215 	stw	ra,8(sp)
  80efa4:	80000015 	stw	zero,0(r16)
  80efa8:	0813a9c0 	call	813a9c <read>
  80efac:	00ffffc4 	movi	r3,-1
  80efb0:	10c00526 	beq	r2,r3,80efc8 <_read_r+0x50>
  80efb4:	dfc00217 	ldw	ra,8(sp)
  80efb8:	dc400117 	ldw	r17,4(sp)
  80efbc:	dc000017 	ldw	r16,0(sp)
  80efc0:	dec00304 	addi	sp,sp,12
  80efc4:	f800283a 	ret
  80efc8:	80c00017 	ldw	r3,0(r16)
  80efcc:	183ff926 	beq	r3,zero,80efb4 <__alt_mem_onchip_mem+0xff806fb4>
  80efd0:	88c00015 	stw	r3,0(r17)
  80efd4:	003ff706 	br	80efb4 <__alt_mem_onchip_mem+0xff806fb4>

0080efd8 <_realloc_r>:
  80efd8:	defff604 	addi	sp,sp,-40
  80efdc:	dc800215 	stw	r18,8(sp)
  80efe0:	dfc00915 	stw	ra,36(sp)
  80efe4:	df000815 	stw	fp,32(sp)
  80efe8:	ddc00715 	stw	r23,28(sp)
  80efec:	dd800615 	stw	r22,24(sp)
  80eff0:	dd400515 	stw	r21,20(sp)
  80eff4:	dd000415 	stw	r20,16(sp)
  80eff8:	dcc00315 	stw	r19,12(sp)
  80effc:	dc400115 	stw	r17,4(sp)
  80f000:	dc000015 	stw	r16,0(sp)
  80f004:	3025883a 	mov	r18,r6
  80f008:	2800b726 	beq	r5,zero,80f2e8 <_realloc_r+0x310>
  80f00c:	282b883a 	mov	r21,r5
  80f010:	2029883a 	mov	r20,r4
  80f014:	08137c40 	call	8137c4 <__malloc_lock>
  80f018:	a8bfff17 	ldw	r2,-4(r21)
  80f01c:	043fff04 	movi	r16,-4
  80f020:	90c002c4 	addi	r3,r18,11
  80f024:	01000584 	movi	r4,22
  80f028:	acfffe04 	addi	r19,r21,-8
  80f02c:	1420703a 	and	r16,r2,r16
  80f030:	20c0332e 	bgeu	r4,r3,80f100 <_realloc_r+0x128>
  80f034:	047ffe04 	movi	r17,-8
  80f038:	1c62703a 	and	r17,r3,r17
  80f03c:	8807883a 	mov	r3,r17
  80f040:	88005816 	blt	r17,zero,80f1a4 <_realloc_r+0x1cc>
  80f044:	8c805736 	bltu	r17,r18,80f1a4 <_realloc_r+0x1cc>
  80f048:	80c0300e 	bge	r16,r3,80f10c <_realloc_r+0x134>
  80f04c:	07002074 	movhi	fp,129
  80f050:	e71f2c04 	addi	fp,fp,31920
  80f054:	e1c00217 	ldw	r7,8(fp)
  80f058:	9c09883a 	add	r4,r19,r16
  80f05c:	22000117 	ldw	r8,4(r4)
  80f060:	21c06326 	beq	r4,r7,80f1f0 <_realloc_r+0x218>
  80f064:	017fff84 	movi	r5,-2
  80f068:	414a703a 	and	r5,r8,r5
  80f06c:	214b883a 	add	r5,r4,r5
  80f070:	29800117 	ldw	r6,4(r5)
  80f074:	3180004c 	andi	r6,r6,1
  80f078:	30003f26 	beq	r6,zero,80f178 <_realloc_r+0x1a0>
  80f07c:	1080004c 	andi	r2,r2,1
  80f080:	10008326 	beq	r2,zero,80f290 <_realloc_r+0x2b8>
  80f084:	900b883a 	mov	r5,r18
  80f088:	a009883a 	mov	r4,r20
  80f08c:	08086580 	call	808658 <_malloc_r>
  80f090:	1025883a 	mov	r18,r2
  80f094:	10011e26 	beq	r2,zero,80f510 <_realloc_r+0x538>
  80f098:	a93fff17 	ldw	r4,-4(r21)
  80f09c:	10fffe04 	addi	r3,r2,-8
  80f0a0:	00bfff84 	movi	r2,-2
  80f0a4:	2084703a 	and	r2,r4,r2
  80f0a8:	9885883a 	add	r2,r19,r2
  80f0ac:	1880ee26 	beq	r3,r2,80f468 <_realloc_r+0x490>
  80f0b0:	81bfff04 	addi	r6,r16,-4
  80f0b4:	00800904 	movi	r2,36
  80f0b8:	1180b836 	bltu	r2,r6,80f39c <_realloc_r+0x3c4>
  80f0bc:	00c004c4 	movi	r3,19
  80f0c0:	19809636 	bltu	r3,r6,80f31c <_realloc_r+0x344>
  80f0c4:	9005883a 	mov	r2,r18
  80f0c8:	a807883a 	mov	r3,r21
  80f0cc:	19000017 	ldw	r4,0(r3)
  80f0d0:	11000015 	stw	r4,0(r2)
  80f0d4:	19000117 	ldw	r4,4(r3)
  80f0d8:	11000115 	stw	r4,4(r2)
  80f0dc:	18c00217 	ldw	r3,8(r3)
  80f0e0:	10c00215 	stw	r3,8(r2)
  80f0e4:	a80b883a 	mov	r5,r21
  80f0e8:	a009883a 	mov	r4,r20
  80f0ec:	0807b280 	call	807b28 <_free_r>
  80f0f0:	a009883a 	mov	r4,r20
  80f0f4:	08137e80 	call	8137e8 <__malloc_unlock>
  80f0f8:	9005883a 	mov	r2,r18
  80f0fc:	00001206 	br	80f148 <_realloc_r+0x170>
  80f100:	00c00404 	movi	r3,16
  80f104:	1823883a 	mov	r17,r3
  80f108:	003fce06 	br	80f044 <__alt_mem_onchip_mem+0xff807044>
  80f10c:	a825883a 	mov	r18,r21
  80f110:	8445c83a 	sub	r2,r16,r17
  80f114:	00c003c4 	movi	r3,15
  80f118:	18802636 	bltu	r3,r2,80f1b4 <_realloc_r+0x1dc>
  80f11c:	99800117 	ldw	r6,4(r19)
  80f120:	9c07883a 	add	r3,r19,r16
  80f124:	3180004c 	andi	r6,r6,1
  80f128:	3420b03a 	or	r16,r6,r16
  80f12c:	9c000115 	stw	r16,4(r19)
  80f130:	18800117 	ldw	r2,4(r3)
  80f134:	10800054 	ori	r2,r2,1
  80f138:	18800115 	stw	r2,4(r3)
  80f13c:	a009883a 	mov	r4,r20
  80f140:	08137e80 	call	8137e8 <__malloc_unlock>
  80f144:	9005883a 	mov	r2,r18
  80f148:	dfc00917 	ldw	ra,36(sp)
  80f14c:	df000817 	ldw	fp,32(sp)
  80f150:	ddc00717 	ldw	r23,28(sp)
  80f154:	dd800617 	ldw	r22,24(sp)
  80f158:	dd400517 	ldw	r21,20(sp)
  80f15c:	dd000417 	ldw	r20,16(sp)
  80f160:	dcc00317 	ldw	r19,12(sp)
  80f164:	dc800217 	ldw	r18,8(sp)
  80f168:	dc400117 	ldw	r17,4(sp)
  80f16c:	dc000017 	ldw	r16,0(sp)
  80f170:	dec00a04 	addi	sp,sp,40
  80f174:	f800283a 	ret
  80f178:	017fff04 	movi	r5,-4
  80f17c:	414a703a 	and	r5,r8,r5
  80f180:	814d883a 	add	r6,r16,r5
  80f184:	30c01f16 	blt	r6,r3,80f204 <_realloc_r+0x22c>
  80f188:	20800317 	ldw	r2,12(r4)
  80f18c:	20c00217 	ldw	r3,8(r4)
  80f190:	a825883a 	mov	r18,r21
  80f194:	3021883a 	mov	r16,r6
  80f198:	18800315 	stw	r2,12(r3)
  80f19c:	10c00215 	stw	r3,8(r2)
  80f1a0:	003fdb06 	br	80f110 <__alt_mem_onchip_mem+0xff807110>
  80f1a4:	00800304 	movi	r2,12
  80f1a8:	a0800015 	stw	r2,0(r20)
  80f1ac:	0005883a 	mov	r2,zero
  80f1b0:	003fe506 	br	80f148 <__alt_mem_onchip_mem+0xff807148>
  80f1b4:	98c00117 	ldw	r3,4(r19)
  80f1b8:	9c4b883a 	add	r5,r19,r17
  80f1bc:	11000054 	ori	r4,r2,1
  80f1c0:	18c0004c 	andi	r3,r3,1
  80f1c4:	1c62b03a 	or	r17,r3,r17
  80f1c8:	9c400115 	stw	r17,4(r19)
  80f1cc:	29000115 	stw	r4,4(r5)
  80f1d0:	2885883a 	add	r2,r5,r2
  80f1d4:	10c00117 	ldw	r3,4(r2)
  80f1d8:	29400204 	addi	r5,r5,8
  80f1dc:	a009883a 	mov	r4,r20
  80f1e0:	18c00054 	ori	r3,r3,1
  80f1e4:	10c00115 	stw	r3,4(r2)
  80f1e8:	0807b280 	call	807b28 <_free_r>
  80f1ec:	003fd306 	br	80f13c <__alt_mem_onchip_mem+0xff80713c>
  80f1f0:	017fff04 	movi	r5,-4
  80f1f4:	414a703a 	and	r5,r8,r5
  80f1f8:	89800404 	addi	r6,r17,16
  80f1fc:	8151883a 	add	r8,r16,r5
  80f200:	4180590e 	bge	r8,r6,80f368 <_realloc_r+0x390>
  80f204:	1080004c 	andi	r2,r2,1
  80f208:	103f9e1e 	bne	r2,zero,80f084 <__alt_mem_onchip_mem+0xff807084>
  80f20c:	adbffe17 	ldw	r22,-8(r21)
  80f210:	00bfff04 	movi	r2,-4
  80f214:	9dadc83a 	sub	r22,r19,r22
  80f218:	b1800117 	ldw	r6,4(r22)
  80f21c:	3084703a 	and	r2,r6,r2
  80f220:	20002026 	beq	r4,zero,80f2a4 <_realloc_r+0x2cc>
  80f224:	80af883a 	add	r23,r16,r2
  80f228:	b96f883a 	add	r23,r23,r5
  80f22c:	21c05f26 	beq	r4,r7,80f3ac <_realloc_r+0x3d4>
  80f230:	b8c01c16 	blt	r23,r3,80f2a4 <_realloc_r+0x2cc>
  80f234:	20800317 	ldw	r2,12(r4)
  80f238:	20c00217 	ldw	r3,8(r4)
  80f23c:	81bfff04 	addi	r6,r16,-4
  80f240:	01000904 	movi	r4,36
  80f244:	18800315 	stw	r2,12(r3)
  80f248:	10c00215 	stw	r3,8(r2)
  80f24c:	b0c00217 	ldw	r3,8(r22)
  80f250:	b0800317 	ldw	r2,12(r22)
  80f254:	b4800204 	addi	r18,r22,8
  80f258:	18800315 	stw	r2,12(r3)
  80f25c:	10c00215 	stw	r3,8(r2)
  80f260:	21801b36 	bltu	r4,r6,80f2d0 <_realloc_r+0x2f8>
  80f264:	008004c4 	movi	r2,19
  80f268:	1180352e 	bgeu	r2,r6,80f340 <_realloc_r+0x368>
  80f26c:	a8800017 	ldw	r2,0(r21)
  80f270:	b0800215 	stw	r2,8(r22)
  80f274:	a8800117 	ldw	r2,4(r21)
  80f278:	b0800315 	stw	r2,12(r22)
  80f27c:	008006c4 	movi	r2,27
  80f280:	11807f36 	bltu	r2,r6,80f480 <_realloc_r+0x4a8>
  80f284:	b0800404 	addi	r2,r22,16
  80f288:	ad400204 	addi	r21,r21,8
  80f28c:	00002d06 	br	80f344 <_realloc_r+0x36c>
  80f290:	adbffe17 	ldw	r22,-8(r21)
  80f294:	00bfff04 	movi	r2,-4
  80f298:	9dadc83a 	sub	r22,r19,r22
  80f29c:	b1000117 	ldw	r4,4(r22)
  80f2a0:	2084703a 	and	r2,r4,r2
  80f2a4:	b03f7726 	beq	r22,zero,80f084 <__alt_mem_onchip_mem+0xff807084>
  80f2a8:	80af883a 	add	r23,r16,r2
  80f2ac:	b8ff7516 	blt	r23,r3,80f084 <__alt_mem_onchip_mem+0xff807084>
  80f2b0:	b0800317 	ldw	r2,12(r22)
  80f2b4:	b0c00217 	ldw	r3,8(r22)
  80f2b8:	81bfff04 	addi	r6,r16,-4
  80f2bc:	01000904 	movi	r4,36
  80f2c0:	18800315 	stw	r2,12(r3)
  80f2c4:	10c00215 	stw	r3,8(r2)
  80f2c8:	b4800204 	addi	r18,r22,8
  80f2cc:	21bfe52e 	bgeu	r4,r6,80f264 <__alt_mem_onchip_mem+0xff807264>
  80f2d0:	a80b883a 	mov	r5,r21
  80f2d4:	9009883a 	mov	r4,r18
  80f2d8:	080de200 	call	80de20 <memmove>
  80f2dc:	b821883a 	mov	r16,r23
  80f2e0:	b027883a 	mov	r19,r22
  80f2e4:	003f8a06 	br	80f110 <__alt_mem_onchip_mem+0xff807110>
  80f2e8:	300b883a 	mov	r5,r6
  80f2ec:	dfc00917 	ldw	ra,36(sp)
  80f2f0:	df000817 	ldw	fp,32(sp)
  80f2f4:	ddc00717 	ldw	r23,28(sp)
  80f2f8:	dd800617 	ldw	r22,24(sp)
  80f2fc:	dd400517 	ldw	r21,20(sp)
  80f300:	dd000417 	ldw	r20,16(sp)
  80f304:	dcc00317 	ldw	r19,12(sp)
  80f308:	dc800217 	ldw	r18,8(sp)
  80f30c:	dc400117 	ldw	r17,4(sp)
  80f310:	dc000017 	ldw	r16,0(sp)
  80f314:	dec00a04 	addi	sp,sp,40
  80f318:	08086581 	jmpi	808658 <_malloc_r>
  80f31c:	a8c00017 	ldw	r3,0(r21)
  80f320:	90c00015 	stw	r3,0(r18)
  80f324:	a8c00117 	ldw	r3,4(r21)
  80f328:	90c00115 	stw	r3,4(r18)
  80f32c:	00c006c4 	movi	r3,27
  80f330:	19804536 	bltu	r3,r6,80f448 <_realloc_r+0x470>
  80f334:	90800204 	addi	r2,r18,8
  80f338:	a8c00204 	addi	r3,r21,8
  80f33c:	003f6306 	br	80f0cc <__alt_mem_onchip_mem+0xff8070cc>
  80f340:	9005883a 	mov	r2,r18
  80f344:	a8c00017 	ldw	r3,0(r21)
  80f348:	b821883a 	mov	r16,r23
  80f34c:	b027883a 	mov	r19,r22
  80f350:	10c00015 	stw	r3,0(r2)
  80f354:	a8c00117 	ldw	r3,4(r21)
  80f358:	10c00115 	stw	r3,4(r2)
  80f35c:	a8c00217 	ldw	r3,8(r21)
  80f360:	10c00215 	stw	r3,8(r2)
  80f364:	003f6a06 	br	80f110 <__alt_mem_onchip_mem+0xff807110>
  80f368:	9c67883a 	add	r19,r19,r17
  80f36c:	4445c83a 	sub	r2,r8,r17
  80f370:	e4c00215 	stw	r19,8(fp)
  80f374:	10800054 	ori	r2,r2,1
  80f378:	98800115 	stw	r2,4(r19)
  80f37c:	a8bfff17 	ldw	r2,-4(r21)
  80f380:	a009883a 	mov	r4,r20
  80f384:	1080004c 	andi	r2,r2,1
  80f388:	1462b03a 	or	r17,r2,r17
  80f38c:	ac7fff15 	stw	r17,-4(r21)
  80f390:	08137e80 	call	8137e8 <__malloc_unlock>
  80f394:	a805883a 	mov	r2,r21
  80f398:	003f6b06 	br	80f148 <__alt_mem_onchip_mem+0xff807148>
  80f39c:	a80b883a 	mov	r5,r21
  80f3a0:	9009883a 	mov	r4,r18
  80f3a4:	080de200 	call	80de20 <memmove>
  80f3a8:	003f4e06 	br	80f0e4 <__alt_mem_onchip_mem+0xff8070e4>
  80f3ac:	89000404 	addi	r4,r17,16
  80f3b0:	b93fbc16 	blt	r23,r4,80f2a4 <__alt_mem_onchip_mem+0xff8072a4>
  80f3b4:	b0800317 	ldw	r2,12(r22)
  80f3b8:	b0c00217 	ldw	r3,8(r22)
  80f3bc:	81bfff04 	addi	r6,r16,-4
  80f3c0:	01000904 	movi	r4,36
  80f3c4:	18800315 	stw	r2,12(r3)
  80f3c8:	10c00215 	stw	r3,8(r2)
  80f3cc:	b4800204 	addi	r18,r22,8
  80f3d0:	21804336 	bltu	r4,r6,80f4e0 <_realloc_r+0x508>
  80f3d4:	008004c4 	movi	r2,19
  80f3d8:	11803f2e 	bgeu	r2,r6,80f4d8 <_realloc_r+0x500>
  80f3dc:	a8800017 	ldw	r2,0(r21)
  80f3e0:	b0800215 	stw	r2,8(r22)
  80f3e4:	a8800117 	ldw	r2,4(r21)
  80f3e8:	b0800315 	stw	r2,12(r22)
  80f3ec:	008006c4 	movi	r2,27
  80f3f0:	11803f36 	bltu	r2,r6,80f4f0 <_realloc_r+0x518>
  80f3f4:	b0800404 	addi	r2,r22,16
  80f3f8:	ad400204 	addi	r21,r21,8
  80f3fc:	a8c00017 	ldw	r3,0(r21)
  80f400:	10c00015 	stw	r3,0(r2)
  80f404:	a8c00117 	ldw	r3,4(r21)
  80f408:	10c00115 	stw	r3,4(r2)
  80f40c:	a8c00217 	ldw	r3,8(r21)
  80f410:	10c00215 	stw	r3,8(r2)
  80f414:	b447883a 	add	r3,r22,r17
  80f418:	bc45c83a 	sub	r2,r23,r17
  80f41c:	e0c00215 	stw	r3,8(fp)
  80f420:	10800054 	ori	r2,r2,1
  80f424:	18800115 	stw	r2,4(r3)
  80f428:	b0800117 	ldw	r2,4(r22)
  80f42c:	a009883a 	mov	r4,r20
  80f430:	1080004c 	andi	r2,r2,1
  80f434:	1462b03a 	or	r17,r2,r17
  80f438:	b4400115 	stw	r17,4(r22)
  80f43c:	08137e80 	call	8137e8 <__malloc_unlock>
  80f440:	9005883a 	mov	r2,r18
  80f444:	003f4006 	br	80f148 <__alt_mem_onchip_mem+0xff807148>
  80f448:	a8c00217 	ldw	r3,8(r21)
  80f44c:	90c00215 	stw	r3,8(r18)
  80f450:	a8c00317 	ldw	r3,12(r21)
  80f454:	90c00315 	stw	r3,12(r18)
  80f458:	30801126 	beq	r6,r2,80f4a0 <_realloc_r+0x4c8>
  80f45c:	90800404 	addi	r2,r18,16
  80f460:	a8c00404 	addi	r3,r21,16
  80f464:	003f1906 	br	80f0cc <__alt_mem_onchip_mem+0xff8070cc>
  80f468:	90ffff17 	ldw	r3,-4(r18)
  80f46c:	00bfff04 	movi	r2,-4
  80f470:	a825883a 	mov	r18,r21
  80f474:	1884703a 	and	r2,r3,r2
  80f478:	80a1883a 	add	r16,r16,r2
  80f47c:	003f2406 	br	80f110 <__alt_mem_onchip_mem+0xff807110>
  80f480:	a8800217 	ldw	r2,8(r21)
  80f484:	b0800415 	stw	r2,16(r22)
  80f488:	a8800317 	ldw	r2,12(r21)
  80f48c:	b0800515 	stw	r2,20(r22)
  80f490:	31000a26 	beq	r6,r4,80f4bc <_realloc_r+0x4e4>
  80f494:	b0800604 	addi	r2,r22,24
  80f498:	ad400404 	addi	r21,r21,16
  80f49c:	003fa906 	br	80f344 <__alt_mem_onchip_mem+0xff807344>
  80f4a0:	a9000417 	ldw	r4,16(r21)
  80f4a4:	90800604 	addi	r2,r18,24
  80f4a8:	a8c00604 	addi	r3,r21,24
  80f4ac:	91000415 	stw	r4,16(r18)
  80f4b0:	a9000517 	ldw	r4,20(r21)
  80f4b4:	91000515 	stw	r4,20(r18)
  80f4b8:	003f0406 	br	80f0cc <__alt_mem_onchip_mem+0xff8070cc>
  80f4bc:	a8c00417 	ldw	r3,16(r21)
  80f4c0:	ad400604 	addi	r21,r21,24
  80f4c4:	b0800804 	addi	r2,r22,32
  80f4c8:	b0c00615 	stw	r3,24(r22)
  80f4cc:	a8ffff17 	ldw	r3,-4(r21)
  80f4d0:	b0c00715 	stw	r3,28(r22)
  80f4d4:	003f9b06 	br	80f344 <__alt_mem_onchip_mem+0xff807344>
  80f4d8:	9005883a 	mov	r2,r18
  80f4dc:	003fc706 	br	80f3fc <__alt_mem_onchip_mem+0xff8073fc>
  80f4e0:	a80b883a 	mov	r5,r21
  80f4e4:	9009883a 	mov	r4,r18
  80f4e8:	080de200 	call	80de20 <memmove>
  80f4ec:	003fc906 	br	80f414 <__alt_mem_onchip_mem+0xff807414>
  80f4f0:	a8800217 	ldw	r2,8(r21)
  80f4f4:	b0800415 	stw	r2,16(r22)
  80f4f8:	a8800317 	ldw	r2,12(r21)
  80f4fc:	b0800515 	stw	r2,20(r22)
  80f500:	31000726 	beq	r6,r4,80f520 <_realloc_r+0x548>
  80f504:	b0800604 	addi	r2,r22,24
  80f508:	ad400404 	addi	r21,r21,16
  80f50c:	003fbb06 	br	80f3fc <__alt_mem_onchip_mem+0xff8073fc>
  80f510:	a009883a 	mov	r4,r20
  80f514:	08137e80 	call	8137e8 <__malloc_unlock>
  80f518:	0005883a 	mov	r2,zero
  80f51c:	003f0a06 	br	80f148 <__alt_mem_onchip_mem+0xff807148>
  80f520:	a8c00417 	ldw	r3,16(r21)
  80f524:	ad400604 	addi	r21,r21,24
  80f528:	b0800804 	addi	r2,r22,32
  80f52c:	b0c00615 	stw	r3,24(r22)
  80f530:	a8ffff17 	ldw	r3,-4(r21)
  80f534:	b0c00715 	stw	r3,28(r22)
  80f538:	003fb006 	br	80f3fc <__alt_mem_onchip_mem+0xff8073fc>

0080f53c <__fpclassifyd>:
  80f53c:	00a00034 	movhi	r2,32768
  80f540:	10bfffc4 	addi	r2,r2,-1
  80f544:	2884703a 	and	r2,r5,r2
  80f548:	10000726 	beq	r2,zero,80f568 <__fpclassifyd+0x2c>
  80f54c:	00fffc34 	movhi	r3,65520
  80f550:	019ff834 	movhi	r6,32736
  80f554:	28c7883a 	add	r3,r5,r3
  80f558:	31bfffc4 	addi	r6,r6,-1
  80f55c:	30c00536 	bltu	r6,r3,80f574 <__fpclassifyd+0x38>
  80f560:	00800104 	movi	r2,4
  80f564:	f800283a 	ret
  80f568:	2000021e 	bne	r4,zero,80f574 <__fpclassifyd+0x38>
  80f56c:	00800084 	movi	r2,2
  80f570:	f800283a 	ret
  80f574:	00dffc34 	movhi	r3,32752
  80f578:	019ff834 	movhi	r6,32736
  80f57c:	28cb883a 	add	r5,r5,r3
  80f580:	31bfffc4 	addi	r6,r6,-1
  80f584:	317ff62e 	bgeu	r6,r5,80f560 <__alt_mem_onchip_mem+0xff807560>
  80f588:	01400434 	movhi	r5,16
  80f58c:	297fffc4 	addi	r5,r5,-1
  80f590:	28800236 	bltu	r5,r2,80f59c <__fpclassifyd+0x60>
  80f594:	008000c4 	movi	r2,3
  80f598:	f800283a 	ret
  80f59c:	10c00226 	beq	r2,r3,80f5a8 <__fpclassifyd+0x6c>
  80f5a0:	0005883a 	mov	r2,zero
  80f5a4:	f800283a 	ret
  80f5a8:	2005003a 	cmpeq	r2,r4,zero
  80f5ac:	f800283a 	ret

0080f5b0 <strcmp>:
  80f5b0:	2144b03a 	or	r2,r4,r5
  80f5b4:	108000cc 	andi	r2,r2,3
  80f5b8:	1000171e 	bne	r2,zero,80f618 <strcmp+0x68>
  80f5bc:	20800017 	ldw	r2,0(r4)
  80f5c0:	28c00017 	ldw	r3,0(r5)
  80f5c4:	10c0141e 	bne	r2,r3,80f618 <strcmp+0x68>
  80f5c8:	027fbff4 	movhi	r9,65279
  80f5cc:	4a7fbfc4 	addi	r9,r9,-257
  80f5d0:	0086303a 	nor	r3,zero,r2
  80f5d4:	02202074 	movhi	r8,32897
  80f5d8:	1245883a 	add	r2,r2,r9
  80f5dc:	42202004 	addi	r8,r8,-32640
  80f5e0:	10c4703a 	and	r2,r2,r3
  80f5e4:	1204703a 	and	r2,r2,r8
  80f5e8:	10000226 	beq	r2,zero,80f5f4 <strcmp+0x44>
  80f5ec:	00002306 	br	80f67c <strcmp+0xcc>
  80f5f0:	1000221e 	bne	r2,zero,80f67c <strcmp+0xcc>
  80f5f4:	21000104 	addi	r4,r4,4
  80f5f8:	20c00017 	ldw	r3,0(r4)
  80f5fc:	29400104 	addi	r5,r5,4
  80f600:	29800017 	ldw	r6,0(r5)
  80f604:	1a4f883a 	add	r7,r3,r9
  80f608:	00c4303a 	nor	r2,zero,r3
  80f60c:	3884703a 	and	r2,r7,r2
  80f610:	1204703a 	and	r2,r2,r8
  80f614:	19bff626 	beq	r3,r6,80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  80f618:	20800003 	ldbu	r2,0(r4)
  80f61c:	10c03fcc 	andi	r3,r2,255
  80f620:	18c0201c 	xori	r3,r3,128
  80f624:	18ffe004 	addi	r3,r3,-128
  80f628:	18000c26 	beq	r3,zero,80f65c <strcmp+0xac>
  80f62c:	29800007 	ldb	r6,0(r5)
  80f630:	19800326 	beq	r3,r6,80f640 <strcmp+0x90>
  80f634:	00001306 	br	80f684 <strcmp+0xd4>
  80f638:	29800007 	ldb	r6,0(r5)
  80f63c:	11800b1e 	bne	r2,r6,80f66c <strcmp+0xbc>
  80f640:	21000044 	addi	r4,r4,1
  80f644:	20c00003 	ldbu	r3,0(r4)
  80f648:	29400044 	addi	r5,r5,1
  80f64c:	18803fcc 	andi	r2,r3,255
  80f650:	1080201c 	xori	r2,r2,128
  80f654:	10bfe004 	addi	r2,r2,-128
  80f658:	103ff71e 	bne	r2,zero,80f638 <__alt_mem_onchip_mem+0xff807638>
  80f65c:	0007883a 	mov	r3,zero
  80f660:	28800003 	ldbu	r2,0(r5)
  80f664:	1885c83a 	sub	r2,r3,r2
  80f668:	f800283a 	ret
  80f66c:	28800003 	ldbu	r2,0(r5)
  80f670:	18c03fcc 	andi	r3,r3,255
  80f674:	1885c83a 	sub	r2,r3,r2
  80f678:	f800283a 	ret
  80f67c:	0005883a 	mov	r2,zero
  80f680:	f800283a 	ret
  80f684:	10c03fcc 	andi	r3,r2,255
  80f688:	003ff506 	br	80f660 <__alt_mem_onchip_mem+0xff807660>

0080f68c <__sprint_r.part.0>:
  80f68c:	28801917 	ldw	r2,100(r5)
  80f690:	defff604 	addi	sp,sp,-40
  80f694:	dd400515 	stw	r21,20(sp)
  80f698:	dfc00915 	stw	ra,36(sp)
  80f69c:	df000815 	stw	fp,32(sp)
  80f6a0:	ddc00715 	stw	r23,28(sp)
  80f6a4:	dd800615 	stw	r22,24(sp)
  80f6a8:	dd000415 	stw	r20,16(sp)
  80f6ac:	dcc00315 	stw	r19,12(sp)
  80f6b0:	dc800215 	stw	r18,8(sp)
  80f6b4:	dc400115 	stw	r17,4(sp)
  80f6b8:	dc000015 	stw	r16,0(sp)
  80f6bc:	1088000c 	andi	r2,r2,8192
  80f6c0:	302b883a 	mov	r21,r6
  80f6c4:	10002e26 	beq	r2,zero,80f780 <__sprint_r.part.0+0xf4>
  80f6c8:	30800217 	ldw	r2,8(r6)
  80f6cc:	35800017 	ldw	r22,0(r6)
  80f6d0:	10002926 	beq	r2,zero,80f778 <__sprint_r.part.0+0xec>
  80f6d4:	2827883a 	mov	r19,r5
  80f6d8:	2029883a 	mov	r20,r4
  80f6dc:	b5c00104 	addi	r23,r22,4
  80f6e0:	04bfffc4 	movi	r18,-1
  80f6e4:	bc400017 	ldw	r17,0(r23)
  80f6e8:	b4000017 	ldw	r16,0(r22)
  80f6ec:	0039883a 	mov	fp,zero
  80f6f0:	8822d0ba 	srli	r17,r17,2
  80f6f4:	8800031e 	bne	r17,zero,80f704 <__sprint_r.part.0+0x78>
  80f6f8:	00001806 	br	80f75c <__sprint_r.part.0+0xd0>
  80f6fc:	84000104 	addi	r16,r16,4
  80f700:	8f001526 	beq	r17,fp,80f758 <__sprint_r.part.0+0xcc>
  80f704:	81400017 	ldw	r5,0(r16)
  80f708:	980d883a 	mov	r6,r19
  80f70c:	a009883a 	mov	r4,r20
  80f710:	0810efc0 	call	810efc <_fputwc_r>
  80f714:	e7000044 	addi	fp,fp,1
  80f718:	14bff81e 	bne	r2,r18,80f6fc <__alt_mem_onchip_mem+0xff8076fc>
  80f71c:	9005883a 	mov	r2,r18
  80f720:	a8000215 	stw	zero,8(r21)
  80f724:	a8000115 	stw	zero,4(r21)
  80f728:	dfc00917 	ldw	ra,36(sp)
  80f72c:	df000817 	ldw	fp,32(sp)
  80f730:	ddc00717 	ldw	r23,28(sp)
  80f734:	dd800617 	ldw	r22,24(sp)
  80f738:	dd400517 	ldw	r21,20(sp)
  80f73c:	dd000417 	ldw	r20,16(sp)
  80f740:	dcc00317 	ldw	r19,12(sp)
  80f744:	dc800217 	ldw	r18,8(sp)
  80f748:	dc400117 	ldw	r17,4(sp)
  80f74c:	dc000017 	ldw	r16,0(sp)
  80f750:	dec00a04 	addi	sp,sp,40
  80f754:	f800283a 	ret
  80f758:	a8800217 	ldw	r2,8(r21)
  80f75c:	8c63883a 	add	r17,r17,r17
  80f760:	8c63883a 	add	r17,r17,r17
  80f764:	1445c83a 	sub	r2,r2,r17
  80f768:	a8800215 	stw	r2,8(r21)
  80f76c:	b5800204 	addi	r22,r22,8
  80f770:	bdc00204 	addi	r23,r23,8
  80f774:	103fdb1e 	bne	r2,zero,80f6e4 <__alt_mem_onchip_mem+0xff8076e4>
  80f778:	0005883a 	mov	r2,zero
  80f77c:	003fe806 	br	80f720 <__alt_mem_onchip_mem+0xff807720>
  80f780:	080d5a80 	call	80d5a8 <__sfvwrite_r>
  80f784:	003fe606 	br	80f720 <__alt_mem_onchip_mem+0xff807720>

0080f788 <__sprint_r>:
  80f788:	30c00217 	ldw	r3,8(r6)
  80f78c:	18000126 	beq	r3,zero,80f794 <__sprint_r+0xc>
  80f790:	080f68c1 	jmpi	80f68c <__sprint_r.part.0>
  80f794:	30000115 	stw	zero,4(r6)
  80f798:	0005883a 	mov	r2,zero
  80f79c:	f800283a 	ret

0080f7a0 <___vfiprintf_internal_r>:
  80f7a0:	deffc904 	addi	sp,sp,-220
  80f7a4:	df003515 	stw	fp,212(sp)
  80f7a8:	dd003115 	stw	r20,196(sp)
  80f7ac:	dfc03615 	stw	ra,216(sp)
  80f7b0:	ddc03415 	stw	r23,208(sp)
  80f7b4:	dd803315 	stw	r22,204(sp)
  80f7b8:	dd403215 	stw	r21,200(sp)
  80f7bc:	dcc03015 	stw	r19,192(sp)
  80f7c0:	dc802f15 	stw	r18,188(sp)
  80f7c4:	dc402e15 	stw	r17,184(sp)
  80f7c8:	dc002d15 	stw	r16,180(sp)
  80f7cc:	d9002015 	stw	r4,128(sp)
  80f7d0:	d9c02215 	stw	r7,136(sp)
  80f7d4:	2829883a 	mov	r20,r5
  80f7d8:	3039883a 	mov	fp,r6
  80f7dc:	20000226 	beq	r4,zero,80f7e8 <___vfiprintf_internal_r+0x48>
  80f7e0:	20800e17 	ldw	r2,56(r4)
  80f7e4:	1000cf26 	beq	r2,zero,80fb24 <___vfiprintf_internal_r+0x384>
  80f7e8:	a080030b 	ldhu	r2,12(r20)
  80f7ec:	10c8000c 	andi	r3,r2,8192
  80f7f0:	1800061e 	bne	r3,zero,80f80c <___vfiprintf_internal_r+0x6c>
  80f7f4:	a1001917 	ldw	r4,100(r20)
  80f7f8:	00f7ffc4 	movi	r3,-8193
  80f7fc:	10880014 	ori	r2,r2,8192
  80f800:	20c6703a 	and	r3,r4,r3
  80f804:	a080030d 	sth	r2,12(r20)
  80f808:	a0c01915 	stw	r3,100(r20)
  80f80c:	10c0020c 	andi	r3,r2,8
  80f810:	1800a926 	beq	r3,zero,80fab8 <___vfiprintf_internal_r+0x318>
  80f814:	a0c00417 	ldw	r3,16(r20)
  80f818:	1800a726 	beq	r3,zero,80fab8 <___vfiprintf_internal_r+0x318>
  80f81c:	1080068c 	andi	r2,r2,26
  80f820:	00c00284 	movi	r3,10
  80f824:	10c0ac26 	beq	r2,r3,80fad8 <___vfiprintf_internal_r+0x338>
  80f828:	da801a04 	addi	r10,sp,104
  80f82c:	da801e15 	stw	r10,120(sp)
  80f830:	d8801e17 	ldw	r2,120(sp)
  80f834:	da8019c4 	addi	r10,sp,103
  80f838:	05802074 	movhi	r22,129
  80f83c:	05c02074 	movhi	r23,129
  80f840:	da801f15 	stw	r10,124(sp)
  80f844:	1295c83a 	sub	r10,r2,r10
  80f848:	b59d6e04 	addi	r22,r22,30136
  80f84c:	bddd6a04 	addi	r23,r23,30120
  80f850:	dec01a15 	stw	sp,104(sp)
  80f854:	d8001c15 	stw	zero,112(sp)
  80f858:	d8001b15 	stw	zero,108(sp)
  80f85c:	d8002615 	stw	zero,152(sp)
  80f860:	d8002315 	stw	zero,140(sp)
  80f864:	da802715 	stw	r10,156(sp)
  80f868:	d811883a 	mov	r8,sp
  80f86c:	dd002115 	stw	r20,132(sp)
  80f870:	e021883a 	mov	r16,fp
  80f874:	80800007 	ldb	r2,0(r16)
  80f878:	1003ea26 	beq	r2,zero,810824 <___vfiprintf_internal_r+0x1084>
  80f87c:	00c00944 	movi	r3,37
  80f880:	8025883a 	mov	r18,r16
  80f884:	10c0021e 	bne	r2,r3,80f890 <___vfiprintf_internal_r+0xf0>
  80f888:	00001606 	br	80f8e4 <___vfiprintf_internal_r+0x144>
  80f88c:	10c00326 	beq	r2,r3,80f89c <___vfiprintf_internal_r+0xfc>
  80f890:	94800044 	addi	r18,r18,1
  80f894:	90800007 	ldb	r2,0(r18)
  80f898:	103ffc1e 	bne	r2,zero,80f88c <__alt_mem_onchip_mem+0xff80788c>
  80f89c:	9423c83a 	sub	r17,r18,r16
  80f8a0:	88001026 	beq	r17,zero,80f8e4 <___vfiprintf_internal_r+0x144>
  80f8a4:	d8c01c17 	ldw	r3,112(sp)
  80f8a8:	d8801b17 	ldw	r2,108(sp)
  80f8ac:	44000015 	stw	r16,0(r8)
  80f8b0:	88c7883a 	add	r3,r17,r3
  80f8b4:	10800044 	addi	r2,r2,1
  80f8b8:	44400115 	stw	r17,4(r8)
  80f8bc:	d8c01c15 	stw	r3,112(sp)
  80f8c0:	d8801b15 	stw	r2,108(sp)
  80f8c4:	010001c4 	movi	r4,7
  80f8c8:	2080760e 	bge	r4,r2,80faa4 <___vfiprintf_internal_r+0x304>
  80f8cc:	1803821e 	bne	r3,zero,8106d8 <___vfiprintf_internal_r+0xf38>
  80f8d0:	da802317 	ldw	r10,140(sp)
  80f8d4:	d8001b15 	stw	zero,108(sp)
  80f8d8:	d811883a 	mov	r8,sp
  80f8dc:	5455883a 	add	r10,r10,r17
  80f8e0:	da802315 	stw	r10,140(sp)
  80f8e4:	90800007 	ldb	r2,0(r18)
  80f8e8:	10044626 	beq	r2,zero,810a04 <___vfiprintf_internal_r+0x1264>
  80f8ec:	90c00047 	ldb	r3,1(r18)
  80f8f0:	94000044 	addi	r16,r18,1
  80f8f4:	d8001d85 	stb	zero,118(sp)
  80f8f8:	0009883a 	mov	r4,zero
  80f8fc:	000f883a 	mov	r7,zero
  80f900:	027fffc4 	movi	r9,-1
  80f904:	0023883a 	mov	r17,zero
  80f908:	0029883a 	mov	r20,zero
  80f90c:	01401604 	movi	r5,88
  80f910:	01800244 	movi	r6,9
  80f914:	03400a84 	movi	r13,42
  80f918:	03001b04 	movi	r12,108
  80f91c:	84000044 	addi	r16,r16,1
  80f920:	18bff804 	addi	r2,r3,-32
  80f924:	28827336 	bltu	r5,r2,8102f4 <___vfiprintf_internal_r+0xb54>
  80f928:	100490ba 	slli	r2,r2,2
  80f92c:	02802074 	movhi	r10,129
  80f930:	52be5004 	addi	r10,r10,-1728
  80f934:	1285883a 	add	r2,r2,r10
  80f938:	10800017 	ldw	r2,0(r2)
  80f93c:	1000683a 	jmp	r2
  80f940:	00810028 	cmpgeui	r2,zero,1024
  80f944:	008102f4 	movhi	r2,1035
  80f948:	008102f4 	movhi	r2,1035
  80f94c:	00810048 	cmpgei	r2,zero,1025
  80f950:	008102f4 	movhi	r2,1035
  80f954:	008102f4 	movhi	r2,1035
  80f958:	008102f4 	movhi	r2,1035
  80f95c:	008102f4 	movhi	r2,1035
  80f960:	008102f4 	movhi	r2,1035
  80f964:	008102f4 	movhi	r2,1035
  80f968:	00810230 	cmpltui	r2,zero,1032
  80f96c:	0081024c 	andi	r2,zero,1033
  80f970:	008102f4 	movhi	r2,1035
  80f974:	0080fb34 	movhi	r2,1004
  80f978:	0081025c 	xori	r2,zero,1033
  80f97c:	008102f4 	movhi	r2,1035
  80f980:	00810054 	movui	r2,1025
  80f984:	00810060 	cmpeqi	r2,zero,1025
  80f988:	00810060 	cmpeqi	r2,zero,1025
  80f98c:	00810060 	cmpeqi	r2,zero,1025
  80f990:	00810060 	cmpeqi	r2,zero,1025
  80f994:	00810060 	cmpeqi	r2,zero,1025
  80f998:	00810060 	cmpeqi	r2,zero,1025
  80f99c:	00810060 	cmpeqi	r2,zero,1025
  80f9a0:	00810060 	cmpeqi	r2,zero,1025
  80f9a4:	00810060 	cmpeqi	r2,zero,1025
  80f9a8:	008102f4 	movhi	r2,1035
  80f9ac:	008102f4 	movhi	r2,1035
  80f9b0:	008102f4 	movhi	r2,1035
  80f9b4:	008102f4 	movhi	r2,1035
  80f9b8:	008102f4 	movhi	r2,1035
  80f9bc:	008102f4 	movhi	r2,1035
  80f9c0:	008102f4 	movhi	r2,1035
  80f9c4:	008102f4 	movhi	r2,1035
  80f9c8:	008102f4 	movhi	r2,1035
  80f9cc:	008102f4 	movhi	r2,1035
  80f9d0:	0081008c 	andi	r2,zero,1026
  80f9d4:	008102f4 	movhi	r2,1035
  80f9d8:	008102f4 	movhi	r2,1035
  80f9dc:	008102f4 	movhi	r2,1035
  80f9e0:	008102f4 	movhi	r2,1035
  80f9e4:	008102f4 	movhi	r2,1035
  80f9e8:	008102f4 	movhi	r2,1035
  80f9ec:	008102f4 	movhi	r2,1035
  80f9f0:	008102f4 	movhi	r2,1035
  80f9f4:	008102f4 	movhi	r2,1035
  80f9f8:	008102f4 	movhi	r2,1035
  80f9fc:	008100c4 	movi	r2,1027
  80fa00:	008102f4 	movhi	r2,1035
  80fa04:	008102f4 	movhi	r2,1035
  80fa08:	008102f4 	movhi	r2,1035
  80fa0c:	008102f4 	movhi	r2,1035
  80fa10:	008102f4 	movhi	r2,1035
  80fa14:	0081011c 	xori	r2,zero,1028
  80fa18:	008102f4 	movhi	r2,1035
  80fa1c:	008102f4 	movhi	r2,1035
  80fa20:	0081018c 	andi	r2,zero,1030
  80fa24:	008102f4 	movhi	r2,1035
  80fa28:	008102f4 	movhi	r2,1035
  80fa2c:	008102f4 	movhi	r2,1035
  80fa30:	008102f4 	movhi	r2,1035
  80fa34:	008102f4 	movhi	r2,1035
  80fa38:	008102f4 	movhi	r2,1035
  80fa3c:	008102f4 	movhi	r2,1035
  80fa40:	008102f4 	movhi	r2,1035
  80fa44:	008102f4 	movhi	r2,1035
  80fa48:	008102f4 	movhi	r2,1035
  80fa4c:	0080ff38 	rdprs	r2,zero,1020
  80fa50:	0080ff64 	muli	r2,zero,1021
  80fa54:	008102f4 	movhi	r2,1035
  80fa58:	008102f4 	movhi	r2,1035
  80fa5c:	008102f4 	movhi	r2,1035
  80fa60:	0081029c 	xori	r2,zero,1034
  80fa64:	0080ff64 	muli	r2,zero,1021
  80fa68:	008102f4 	movhi	r2,1035
  80fa6c:	008102f4 	movhi	r2,1035
  80fa70:	0080fdf8 	rdprs	r2,zero,1015
  80fa74:	008102f4 	movhi	r2,1035
  80fa78:	0080fe08 	cmpgei	r2,zero,1016
  80fa7c:	0080fe44 	movi	r2,1017
  80fa80:	0080fb40 	call	80fb4 <__alt_mem_sdram-0x77f04c>
  80fa84:	0080fdec 	andhi	r2,zero,1015
  80fa88:	008102f4 	movhi	r2,1035
  80fa8c:	008101c8 	cmpgei	r2,zero,1031
  80fa90:	008102f4 	movhi	r2,1035
  80fa94:	00810220 	cmpeqi	r2,zero,1032
  80fa98:	008102f4 	movhi	r2,1035
  80fa9c:	008102f4 	movhi	r2,1035
  80faa0:	0080fee4 	muli	r2,zero,1019
  80faa4:	42000204 	addi	r8,r8,8
  80faa8:	da802317 	ldw	r10,140(sp)
  80faac:	5455883a 	add	r10,r10,r17
  80fab0:	da802315 	stw	r10,140(sp)
  80fab4:	003f8b06 	br	80f8e4 <__alt_mem_onchip_mem+0xff8078e4>
  80fab8:	d9002017 	ldw	r4,128(sp)
  80fabc:	a00b883a 	mov	r5,r20
  80fac0:	080bacc0 	call	80bacc <__swsetup_r>
  80fac4:	1003b11e 	bne	r2,zero,81098c <___vfiprintf_internal_r+0x11ec>
  80fac8:	a080030b 	ldhu	r2,12(r20)
  80facc:	00c00284 	movi	r3,10
  80fad0:	1080068c 	andi	r2,r2,26
  80fad4:	10ff541e 	bne	r2,r3,80f828 <__alt_mem_onchip_mem+0xff807828>
  80fad8:	a080038f 	ldh	r2,14(r20)
  80fadc:	103f5216 	blt	r2,zero,80f828 <__alt_mem_onchip_mem+0xff807828>
  80fae0:	d9c02217 	ldw	r7,136(sp)
  80fae4:	d9002017 	ldw	r4,128(sp)
  80fae8:	e00d883a 	mov	r6,fp
  80faec:	a00b883a 	mov	r5,r20
  80faf0:	0810c180 	call	810c18 <__sbprintf>
  80faf4:	dfc03617 	ldw	ra,216(sp)
  80faf8:	df003517 	ldw	fp,212(sp)
  80fafc:	ddc03417 	ldw	r23,208(sp)
  80fb00:	dd803317 	ldw	r22,204(sp)
  80fb04:	dd403217 	ldw	r21,200(sp)
  80fb08:	dd003117 	ldw	r20,196(sp)
  80fb0c:	dcc03017 	ldw	r19,192(sp)
  80fb10:	dc802f17 	ldw	r18,188(sp)
  80fb14:	dc402e17 	ldw	r17,184(sp)
  80fb18:	dc002d17 	ldw	r16,180(sp)
  80fb1c:	dec03704 	addi	sp,sp,220
  80fb20:	f800283a 	ret
  80fb24:	08077bc0 	call	8077bc <__sinit>
  80fb28:	003f2f06 	br	80f7e8 <__alt_mem_onchip_mem+0xff8077e8>
  80fb2c:	0463c83a 	sub	r17,zero,r17
  80fb30:	d8802215 	stw	r2,136(sp)
  80fb34:	a5000114 	ori	r20,r20,4
  80fb38:	80c00007 	ldb	r3,0(r16)
  80fb3c:	003f7706 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  80fb40:	00800c04 	movi	r2,48
  80fb44:	da802217 	ldw	r10,136(sp)
  80fb48:	d8801d05 	stb	r2,116(sp)
  80fb4c:	00801e04 	movi	r2,120
  80fb50:	d8801d45 	stb	r2,117(sp)
  80fb54:	d8001d85 	stb	zero,118(sp)
  80fb58:	50c00104 	addi	r3,r10,4
  80fb5c:	54800017 	ldw	r18,0(r10)
  80fb60:	0027883a 	mov	r19,zero
  80fb64:	a0800094 	ori	r2,r20,2
  80fb68:	48030b16 	blt	r9,zero,810798 <___vfiprintf_internal_r+0xff8>
  80fb6c:	00bfdfc4 	movi	r2,-129
  80fb70:	a096703a 	and	r11,r20,r2
  80fb74:	d8c02215 	stw	r3,136(sp)
  80fb78:	5d000094 	ori	r20,r11,2
  80fb7c:	90032b1e 	bne	r18,zero,81082c <___vfiprintf_internal_r+0x108c>
  80fb80:	00802074 	movhi	r2,129
  80fb84:	109d0a04 	addi	r2,r2,29736
  80fb88:	d8802615 	stw	r2,152(sp)
  80fb8c:	0039883a 	mov	fp,zero
  80fb90:	48017b1e 	bne	r9,zero,810180 <___vfiprintf_internal_r+0x9e0>
  80fb94:	0013883a 	mov	r9,zero
  80fb98:	0027883a 	mov	r19,zero
  80fb9c:	dd401a04 	addi	r21,sp,104
  80fba0:	4825883a 	mov	r18,r9
  80fba4:	4cc0010e 	bge	r9,r19,80fbac <___vfiprintf_internal_r+0x40c>
  80fba8:	9825883a 	mov	r18,r19
  80fbac:	e7003fcc 	andi	fp,fp,255
  80fbb0:	e700201c 	xori	fp,fp,128
  80fbb4:	e73fe004 	addi	fp,fp,-128
  80fbb8:	e0000126 	beq	fp,zero,80fbc0 <___vfiprintf_internal_r+0x420>
  80fbbc:	94800044 	addi	r18,r18,1
  80fbc0:	a380008c 	andi	r14,r20,2
  80fbc4:	70000126 	beq	r14,zero,80fbcc <___vfiprintf_internal_r+0x42c>
  80fbc8:	94800084 	addi	r18,r18,2
  80fbcc:	a700210c 	andi	fp,r20,132
  80fbd0:	e001df1e 	bne	fp,zero,810350 <___vfiprintf_internal_r+0xbb0>
  80fbd4:	8c87c83a 	sub	r3,r17,r18
  80fbd8:	00c1dd0e 	bge	zero,r3,810350 <___vfiprintf_internal_r+0xbb0>
  80fbdc:	01c00404 	movi	r7,16
  80fbe0:	d8801c17 	ldw	r2,112(sp)
  80fbe4:	38c3ad0e 	bge	r7,r3,810a9c <___vfiprintf_internal_r+0x12fc>
  80fbe8:	02802074 	movhi	r10,129
  80fbec:	529d6e04 	addi	r10,r10,30136
  80fbf0:	dc002915 	stw	r16,164(sp)
  80fbf4:	d9801b17 	ldw	r6,108(sp)
  80fbf8:	da802415 	stw	r10,144(sp)
  80fbfc:	03c001c4 	movi	r15,7
  80fc00:	da402515 	stw	r9,148(sp)
  80fc04:	db802815 	stw	r14,160(sp)
  80fc08:	1821883a 	mov	r16,r3
  80fc0c:	00000506 	br	80fc24 <___vfiprintf_internal_r+0x484>
  80fc10:	31400084 	addi	r5,r6,2
  80fc14:	42000204 	addi	r8,r8,8
  80fc18:	200d883a 	mov	r6,r4
  80fc1c:	843ffc04 	addi	r16,r16,-16
  80fc20:	3c000d0e 	bge	r7,r16,80fc58 <___vfiprintf_internal_r+0x4b8>
  80fc24:	10800404 	addi	r2,r2,16
  80fc28:	31000044 	addi	r4,r6,1
  80fc2c:	45800015 	stw	r22,0(r8)
  80fc30:	41c00115 	stw	r7,4(r8)
  80fc34:	d8801c15 	stw	r2,112(sp)
  80fc38:	d9001b15 	stw	r4,108(sp)
  80fc3c:	793ff40e 	bge	r15,r4,80fc10 <__alt_mem_onchip_mem+0xff807c10>
  80fc40:	1001b51e 	bne	r2,zero,810318 <___vfiprintf_internal_r+0xb78>
  80fc44:	843ffc04 	addi	r16,r16,-16
  80fc48:	000d883a 	mov	r6,zero
  80fc4c:	01400044 	movi	r5,1
  80fc50:	d811883a 	mov	r8,sp
  80fc54:	3c3ff316 	blt	r7,r16,80fc24 <__alt_mem_onchip_mem+0xff807c24>
  80fc58:	8007883a 	mov	r3,r16
  80fc5c:	da402517 	ldw	r9,148(sp)
  80fc60:	db802817 	ldw	r14,160(sp)
  80fc64:	dc002917 	ldw	r16,164(sp)
  80fc68:	da802417 	ldw	r10,144(sp)
  80fc6c:	1885883a 	add	r2,r3,r2
  80fc70:	40c00115 	stw	r3,4(r8)
  80fc74:	42800015 	stw	r10,0(r8)
  80fc78:	d8801c15 	stw	r2,112(sp)
  80fc7c:	d9401b15 	stw	r5,108(sp)
  80fc80:	00c001c4 	movi	r3,7
  80fc84:	19426016 	blt	r3,r5,810608 <___vfiprintf_internal_r+0xe68>
  80fc88:	d8c01d87 	ldb	r3,118(sp)
  80fc8c:	42000204 	addi	r8,r8,8
  80fc90:	29000044 	addi	r4,r5,1
  80fc94:	1801b31e 	bne	r3,zero,810364 <___vfiprintf_internal_r+0xbc4>
  80fc98:	7001c026 	beq	r14,zero,81039c <___vfiprintf_internal_r+0xbfc>
  80fc9c:	d8c01d04 	addi	r3,sp,116
  80fca0:	10800084 	addi	r2,r2,2
  80fca4:	40c00015 	stw	r3,0(r8)
  80fca8:	00c00084 	movi	r3,2
  80fcac:	40c00115 	stw	r3,4(r8)
  80fcb0:	d8801c15 	stw	r2,112(sp)
  80fcb4:	d9001b15 	stw	r4,108(sp)
  80fcb8:	00c001c4 	movi	r3,7
  80fcbc:	1902650e 	bge	r3,r4,810654 <___vfiprintf_internal_r+0xeb4>
  80fcc0:	10029a1e 	bne	r2,zero,81072c <___vfiprintf_internal_r+0xf8c>
  80fcc4:	00c02004 	movi	r3,128
  80fcc8:	01000044 	movi	r4,1
  80fccc:	000b883a 	mov	r5,zero
  80fcd0:	d811883a 	mov	r8,sp
  80fcd4:	e0c1b31e 	bne	fp,r3,8103a4 <___vfiprintf_internal_r+0xc04>
  80fcd8:	8cb9c83a 	sub	fp,r17,r18
  80fcdc:	0701b10e 	bge	zero,fp,8103a4 <___vfiprintf_internal_r+0xc04>
  80fce0:	01c00404 	movi	r7,16
  80fce4:	3f03890e 	bge	r7,fp,810b0c <___vfiprintf_internal_r+0x136c>
  80fce8:	00c02074 	movhi	r3,129
  80fcec:	18dd6a04 	addi	r3,r3,30120
  80fcf0:	d8c02415 	stw	r3,144(sp)
  80fcf4:	8007883a 	mov	r3,r16
  80fcf8:	034001c4 	movi	r13,7
  80fcfc:	e021883a 	mov	r16,fp
  80fd00:	da402515 	stw	r9,148(sp)
  80fd04:	1839883a 	mov	fp,r3
  80fd08:	00000506 	br	80fd20 <___vfiprintf_internal_r+0x580>
  80fd0c:	29800084 	addi	r6,r5,2
  80fd10:	42000204 	addi	r8,r8,8
  80fd14:	180b883a 	mov	r5,r3
  80fd18:	843ffc04 	addi	r16,r16,-16
  80fd1c:	3c000d0e 	bge	r7,r16,80fd54 <___vfiprintf_internal_r+0x5b4>
  80fd20:	10800404 	addi	r2,r2,16
  80fd24:	28c00044 	addi	r3,r5,1
  80fd28:	45c00015 	stw	r23,0(r8)
  80fd2c:	41c00115 	stw	r7,4(r8)
  80fd30:	d8801c15 	stw	r2,112(sp)
  80fd34:	d8c01b15 	stw	r3,108(sp)
  80fd38:	68fff40e 	bge	r13,r3,80fd0c <__alt_mem_onchip_mem+0xff807d0c>
  80fd3c:	1002241e 	bne	r2,zero,8105d0 <___vfiprintf_internal_r+0xe30>
  80fd40:	843ffc04 	addi	r16,r16,-16
  80fd44:	01800044 	movi	r6,1
  80fd48:	000b883a 	mov	r5,zero
  80fd4c:	d811883a 	mov	r8,sp
  80fd50:	3c3ff316 	blt	r7,r16,80fd20 <__alt_mem_onchip_mem+0xff807d20>
  80fd54:	da402517 	ldw	r9,148(sp)
  80fd58:	e007883a 	mov	r3,fp
  80fd5c:	8039883a 	mov	fp,r16
  80fd60:	1821883a 	mov	r16,r3
  80fd64:	d8c02417 	ldw	r3,144(sp)
  80fd68:	1705883a 	add	r2,r2,fp
  80fd6c:	47000115 	stw	fp,4(r8)
  80fd70:	40c00015 	stw	r3,0(r8)
  80fd74:	d8801c15 	stw	r2,112(sp)
  80fd78:	d9801b15 	stw	r6,108(sp)
  80fd7c:	00c001c4 	movi	r3,7
  80fd80:	19827616 	blt	r3,r6,81075c <___vfiprintf_internal_r+0xfbc>
  80fd84:	4cf9c83a 	sub	fp,r9,r19
  80fd88:	42000204 	addi	r8,r8,8
  80fd8c:	31000044 	addi	r4,r6,1
  80fd90:	300b883a 	mov	r5,r6
  80fd94:	07018516 	blt	zero,fp,8103ac <___vfiprintf_internal_r+0xc0c>
  80fd98:	9885883a 	add	r2,r19,r2
  80fd9c:	45400015 	stw	r21,0(r8)
  80fda0:	44c00115 	stw	r19,4(r8)
  80fda4:	d8801c15 	stw	r2,112(sp)
  80fda8:	d9001b15 	stw	r4,108(sp)
  80fdac:	00c001c4 	movi	r3,7
  80fdb0:	1901dd0e 	bge	r3,r4,810528 <___vfiprintf_internal_r+0xd88>
  80fdb4:	1002401e 	bne	r2,zero,8106b8 <___vfiprintf_internal_r+0xf18>
  80fdb8:	d8001b15 	stw	zero,108(sp)
  80fdbc:	a2c0010c 	andi	r11,r20,4
  80fdc0:	58000226 	beq	r11,zero,80fdcc <___vfiprintf_internal_r+0x62c>
  80fdc4:	8ca7c83a 	sub	r19,r17,r18
  80fdc8:	04c2f216 	blt	zero,r19,810994 <___vfiprintf_internal_r+0x11f4>
  80fdcc:	8c80010e 	bge	r17,r18,80fdd4 <___vfiprintf_internal_r+0x634>
  80fdd0:	9023883a 	mov	r17,r18
  80fdd4:	da802317 	ldw	r10,140(sp)
  80fdd8:	5455883a 	add	r10,r10,r17
  80fddc:	da802315 	stw	r10,140(sp)
  80fde0:	d8001b15 	stw	zero,108(sp)
  80fde4:	d811883a 	mov	r8,sp
  80fde8:	003ea206 	br	80f874 <__alt_mem_onchip_mem+0xff807874>
  80fdec:	a5000814 	ori	r20,r20,32
  80fdf0:	80c00007 	ldb	r3,0(r16)
  80fdf4:	003ec906 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  80fdf8:	80c00007 	ldb	r3,0(r16)
  80fdfc:	1b030926 	beq	r3,r12,810a24 <___vfiprintf_internal_r+0x1284>
  80fe00:	a5000414 	ori	r20,r20,16
  80fe04:	003ec506 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  80fe08:	21003fcc 	andi	r4,r4,255
  80fe0c:	20035e1e 	bne	r4,zero,810b88 <___vfiprintf_internal_r+0x13e8>
  80fe10:	a080080c 	andi	r2,r20,32
  80fe14:	1002a526 	beq	r2,zero,8108ac <___vfiprintf_internal_r+0x110c>
  80fe18:	da802217 	ldw	r10,136(sp)
  80fe1c:	50800017 	ldw	r2,0(r10)
  80fe20:	da802317 	ldw	r10,140(sp)
  80fe24:	5007d7fa 	srai	r3,r10,31
  80fe28:	da802217 	ldw	r10,136(sp)
  80fe2c:	10c00115 	stw	r3,4(r2)
  80fe30:	52800104 	addi	r10,r10,4
  80fe34:	da802215 	stw	r10,136(sp)
  80fe38:	da802317 	ldw	r10,140(sp)
  80fe3c:	12800015 	stw	r10,0(r2)
  80fe40:	003e8c06 	br	80f874 <__alt_mem_onchip_mem+0xff807874>
  80fe44:	21003fcc 	andi	r4,r4,255
  80fe48:	2003511e 	bne	r4,zero,810b90 <___vfiprintf_internal_r+0x13f0>
  80fe4c:	a080080c 	andi	r2,r20,32
  80fe50:	1000a126 	beq	r2,zero,8100d8 <___vfiprintf_internal_r+0x938>
  80fe54:	da802217 	ldw	r10,136(sp)
  80fe58:	d8001d85 	stb	zero,118(sp)
  80fe5c:	50800204 	addi	r2,r10,8
  80fe60:	54800017 	ldw	r18,0(r10)
  80fe64:	54c00117 	ldw	r19,4(r10)
  80fe68:	4802b416 	blt	r9,zero,81093c <___vfiprintf_internal_r+0x119c>
  80fe6c:	013fdfc4 	movi	r4,-129
  80fe70:	94c6b03a 	or	r3,r18,r19
  80fe74:	d8802215 	stw	r2,136(sp)
  80fe78:	a128703a 	and	r20,r20,r4
  80fe7c:	1800a226 	beq	r3,zero,810108 <___vfiprintf_internal_r+0x968>
  80fe80:	0039883a 	mov	fp,zero
  80fe84:	dd401a04 	addi	r21,sp,104
  80fe88:	9006d0fa 	srli	r3,r18,3
  80fe8c:	9808977a 	slli	r4,r19,29
  80fe90:	9826d0fa 	srli	r19,r19,3
  80fe94:	948001cc 	andi	r18,r18,7
  80fe98:	90800c04 	addi	r2,r18,48
  80fe9c:	ad7fffc4 	addi	r21,r21,-1
  80fea0:	20e4b03a 	or	r18,r4,r3
  80fea4:	a8800005 	stb	r2,0(r21)
  80fea8:	94c6b03a 	or	r3,r18,r19
  80feac:	183ff61e 	bne	r3,zero,80fe88 <__alt_mem_onchip_mem+0xff807e88>
  80feb0:	a0c0004c 	andi	r3,r20,1
  80feb4:	18005926 	beq	r3,zero,81001c <___vfiprintf_internal_r+0x87c>
  80feb8:	10803fcc 	andi	r2,r2,255
  80febc:	1080201c 	xori	r2,r2,128
  80fec0:	10bfe004 	addi	r2,r2,-128
  80fec4:	00c00c04 	movi	r3,48
  80fec8:	10c05426 	beq	r2,r3,81001c <___vfiprintf_internal_r+0x87c>
  80fecc:	da801e17 	ldw	r10,120(sp)
  80fed0:	a8bfffc4 	addi	r2,r21,-1
  80fed4:	a8ffffc5 	stb	r3,-1(r21)
  80fed8:	50a7c83a 	sub	r19,r10,r2
  80fedc:	102b883a 	mov	r21,r2
  80fee0:	003f2f06 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  80fee4:	21003fcc 	andi	r4,r4,255
  80fee8:	2003421e 	bne	r4,zero,810bf4 <___vfiprintf_internal_r+0x1454>
  80feec:	00802074 	movhi	r2,129
  80fef0:	109d0a04 	addi	r2,r2,29736
  80fef4:	d8802615 	stw	r2,152(sp)
  80fef8:	a080080c 	andi	r2,r20,32
  80fefc:	1000aa26 	beq	r2,zero,8101a8 <___vfiprintf_internal_r+0xa08>
  80ff00:	da802217 	ldw	r10,136(sp)
  80ff04:	54800017 	ldw	r18,0(r10)
  80ff08:	54c00117 	ldw	r19,4(r10)
  80ff0c:	52800204 	addi	r10,r10,8
  80ff10:	da802215 	stw	r10,136(sp)
  80ff14:	a080004c 	andi	r2,r20,1
  80ff18:	1001d226 	beq	r2,zero,810664 <___vfiprintf_internal_r+0xec4>
  80ff1c:	94c4b03a 	or	r2,r18,r19
  80ff20:	1002351e 	bne	r2,zero,8107f8 <___vfiprintf_internal_r+0x1058>
  80ff24:	d8001d85 	stb	zero,118(sp)
  80ff28:	48022216 	blt	r9,zero,8107b4 <___vfiprintf_internal_r+0x1014>
  80ff2c:	00bfdfc4 	movi	r2,-129
  80ff30:	a0a8703a 	and	r20,r20,r2
  80ff34:	003f1506 	br	80fb8c <__alt_mem_onchip_mem+0xff807b8c>
  80ff38:	da802217 	ldw	r10,136(sp)
  80ff3c:	04800044 	movi	r18,1
  80ff40:	d8001d85 	stb	zero,118(sp)
  80ff44:	50800017 	ldw	r2,0(r10)
  80ff48:	52800104 	addi	r10,r10,4
  80ff4c:	da802215 	stw	r10,136(sp)
  80ff50:	d8801005 	stb	r2,64(sp)
  80ff54:	9027883a 	mov	r19,r18
  80ff58:	dd401004 	addi	r21,sp,64
  80ff5c:	0013883a 	mov	r9,zero
  80ff60:	003f1706 	br	80fbc0 <__alt_mem_onchip_mem+0xff807bc0>
  80ff64:	21003fcc 	andi	r4,r4,255
  80ff68:	2003201e 	bne	r4,zero,810bec <___vfiprintf_internal_r+0x144c>
  80ff6c:	a080080c 	andi	r2,r20,32
  80ff70:	10004b26 	beq	r2,zero,8100a0 <___vfiprintf_internal_r+0x900>
  80ff74:	da802217 	ldw	r10,136(sp)
  80ff78:	50800117 	ldw	r2,4(r10)
  80ff7c:	54800017 	ldw	r18,0(r10)
  80ff80:	52800204 	addi	r10,r10,8
  80ff84:	da802215 	stw	r10,136(sp)
  80ff88:	1027883a 	mov	r19,r2
  80ff8c:	10022c16 	blt	r2,zero,810840 <___vfiprintf_internal_r+0x10a0>
  80ff90:	df001d83 	ldbu	fp,118(sp)
  80ff94:	48007216 	blt	r9,zero,810160 <___vfiprintf_internal_r+0x9c0>
  80ff98:	00ffdfc4 	movi	r3,-129
  80ff9c:	94c4b03a 	or	r2,r18,r19
  80ffa0:	a0e8703a 	and	r20,r20,r3
  80ffa4:	1000cc26 	beq	r2,zero,8102d8 <___vfiprintf_internal_r+0xb38>
  80ffa8:	98021026 	beq	r19,zero,8107ec <___vfiprintf_internal_r+0x104c>
  80ffac:	dc402415 	stw	r17,144(sp)
  80ffb0:	dc002515 	stw	r16,148(sp)
  80ffb4:	9823883a 	mov	r17,r19
  80ffb8:	9021883a 	mov	r16,r18
  80ffbc:	dd401a04 	addi	r21,sp,104
  80ffc0:	4825883a 	mov	r18,r9
  80ffc4:	4027883a 	mov	r19,r8
  80ffc8:	8009883a 	mov	r4,r16
  80ffcc:	880b883a 	mov	r5,r17
  80ffd0:	01800284 	movi	r6,10
  80ffd4:	000f883a 	mov	r7,zero
  80ffd8:	08117000 	call	811700 <__umoddi3>
  80ffdc:	10800c04 	addi	r2,r2,48
  80ffe0:	ad7fffc4 	addi	r21,r21,-1
  80ffe4:	8009883a 	mov	r4,r16
  80ffe8:	880b883a 	mov	r5,r17
  80ffec:	a8800005 	stb	r2,0(r21)
  80fff0:	01800284 	movi	r6,10
  80fff4:	000f883a 	mov	r7,zero
  80fff8:	08111880 	call	811188 <__udivdi3>
  80fffc:	1021883a 	mov	r16,r2
  810000:	10c4b03a 	or	r2,r2,r3
  810004:	1823883a 	mov	r17,r3
  810008:	103fef1e 	bne	r2,zero,80ffc8 <__alt_mem_onchip_mem+0xff807fc8>
  81000c:	dc402417 	ldw	r17,144(sp)
  810010:	dc002517 	ldw	r16,148(sp)
  810014:	9013883a 	mov	r9,r18
  810018:	9811883a 	mov	r8,r19
  81001c:	da801e17 	ldw	r10,120(sp)
  810020:	5567c83a 	sub	r19,r10,r21
  810024:	003ede06 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  810028:	38803fcc 	andi	r2,r7,255
  81002c:	1080201c 	xori	r2,r2,128
  810030:	10bfe004 	addi	r2,r2,-128
  810034:	1002371e 	bne	r2,zero,810914 <___vfiprintf_internal_r+0x1174>
  810038:	01000044 	movi	r4,1
  81003c:	01c00804 	movi	r7,32
  810040:	80c00007 	ldb	r3,0(r16)
  810044:	003e3506 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  810048:	a5000054 	ori	r20,r20,1
  81004c:	80c00007 	ldb	r3,0(r16)
  810050:	003e3206 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  810054:	a5002014 	ori	r20,r20,128
  810058:	80c00007 	ldb	r3,0(r16)
  81005c:	003e2f06 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  810060:	8015883a 	mov	r10,r16
  810064:	0023883a 	mov	r17,zero
  810068:	18bff404 	addi	r2,r3,-48
  81006c:	50c00007 	ldb	r3,0(r10)
  810070:	8c4002a4 	muli	r17,r17,10
  810074:	84000044 	addi	r16,r16,1
  810078:	8015883a 	mov	r10,r16
  81007c:	1463883a 	add	r17,r2,r17
  810080:	18bff404 	addi	r2,r3,-48
  810084:	30bff92e 	bgeu	r6,r2,81006c <__alt_mem_onchip_mem+0xff80806c>
  810088:	003e2506 	br	80f920 <__alt_mem_onchip_mem+0xff807920>
  81008c:	21003fcc 	andi	r4,r4,255
  810090:	2002d41e 	bne	r4,zero,810be4 <___vfiprintf_internal_r+0x1444>
  810094:	a5000414 	ori	r20,r20,16
  810098:	a080080c 	andi	r2,r20,32
  81009c:	103fb51e 	bne	r2,zero,80ff74 <__alt_mem_onchip_mem+0xff807f74>
  8100a0:	a080040c 	andi	r2,r20,16
  8100a4:	1001f826 	beq	r2,zero,810888 <___vfiprintf_internal_r+0x10e8>
  8100a8:	da802217 	ldw	r10,136(sp)
  8100ac:	54800017 	ldw	r18,0(r10)
  8100b0:	52800104 	addi	r10,r10,4
  8100b4:	da802215 	stw	r10,136(sp)
  8100b8:	9027d7fa 	srai	r19,r18,31
  8100bc:	9805883a 	mov	r2,r19
  8100c0:	003fb206 	br	80ff8c <__alt_mem_onchip_mem+0xff807f8c>
  8100c4:	21003fcc 	andi	r4,r4,255
  8100c8:	2002c41e 	bne	r4,zero,810bdc <___vfiprintf_internal_r+0x143c>
  8100cc:	a5000414 	ori	r20,r20,16
  8100d0:	a080080c 	andi	r2,r20,32
  8100d4:	103f5f1e 	bne	r2,zero,80fe54 <__alt_mem_onchip_mem+0xff807e54>
  8100d8:	a080040c 	andi	r2,r20,16
  8100dc:	10020f26 	beq	r2,zero,81091c <___vfiprintf_internal_r+0x117c>
  8100e0:	da802217 	ldw	r10,136(sp)
  8100e4:	d8001d85 	stb	zero,118(sp)
  8100e8:	0027883a 	mov	r19,zero
  8100ec:	50800104 	addi	r2,r10,4
  8100f0:	54800017 	ldw	r18,0(r10)
  8100f4:	48021116 	blt	r9,zero,81093c <___vfiprintf_internal_r+0x119c>
  8100f8:	00ffdfc4 	movi	r3,-129
  8100fc:	d8802215 	stw	r2,136(sp)
  810100:	a0e8703a 	and	r20,r20,r3
  810104:	903f5e1e 	bne	r18,zero,80fe80 <__alt_mem_onchip_mem+0xff807e80>
  810108:	0039883a 	mov	fp,zero
  81010c:	4802a626 	beq	r9,zero,810ba8 <___vfiprintf_internal_r+0x1408>
  810110:	0025883a 	mov	r18,zero
  810114:	0027883a 	mov	r19,zero
  810118:	003f5a06 	br	80fe84 <__alt_mem_onchip_mem+0xff807e84>
  81011c:	21003fcc 	andi	r4,r4,255
  810120:	20029f1e 	bne	r4,zero,810ba0 <___vfiprintf_internal_r+0x1400>
  810124:	a5000414 	ori	r20,r20,16
  810128:	a080080c 	andi	r2,r20,32
  81012c:	10005e1e 	bne	r2,zero,8102a8 <___vfiprintf_internal_r+0xb08>
  810130:	a080040c 	andi	r2,r20,16
  810134:	1001a21e 	bne	r2,zero,8107c0 <___vfiprintf_internal_r+0x1020>
  810138:	a080100c 	andi	r2,r20,64
  81013c:	d8001d85 	stb	zero,118(sp)
  810140:	da802217 	ldw	r10,136(sp)
  810144:	1002231e 	bne	r2,zero,8109d4 <___vfiprintf_internal_r+0x1234>
  810148:	50800104 	addi	r2,r10,4
  81014c:	54800017 	ldw	r18,0(r10)
  810150:	0027883a 	mov	r19,zero
  810154:	4801a00e 	bge	r9,zero,8107d8 <___vfiprintf_internal_r+0x1038>
  810158:	d8802215 	stw	r2,136(sp)
  81015c:	0039883a 	mov	fp,zero
  810160:	94c4b03a 	or	r2,r18,r19
  810164:	103f901e 	bne	r2,zero,80ffa8 <__alt_mem_onchip_mem+0xff807fa8>
  810168:	00800044 	movi	r2,1
  81016c:	10803fcc 	andi	r2,r2,255
  810170:	00c00044 	movi	r3,1
  810174:	10c05926 	beq	r2,r3,8102dc <___vfiprintf_internal_r+0xb3c>
  810178:	00c00084 	movi	r3,2
  81017c:	10ffe41e 	bne	r2,r3,810110 <__alt_mem_onchip_mem+0xff808110>
  810180:	0025883a 	mov	r18,zero
  810184:	0027883a 	mov	r19,zero
  810188:	00013d06 	br	810680 <___vfiprintf_internal_r+0xee0>
  81018c:	21003fcc 	andi	r4,r4,255
  810190:	2002811e 	bne	r4,zero,810b98 <___vfiprintf_internal_r+0x13f8>
  810194:	00802074 	movhi	r2,129
  810198:	109d0504 	addi	r2,r2,29716
  81019c:	d8802615 	stw	r2,152(sp)
  8101a0:	a080080c 	andi	r2,r20,32
  8101a4:	103f561e 	bne	r2,zero,80ff00 <__alt_mem_onchip_mem+0xff807f00>
  8101a8:	a080040c 	andi	r2,r20,16
  8101ac:	1001d126 	beq	r2,zero,8108f4 <___vfiprintf_internal_r+0x1154>
  8101b0:	da802217 	ldw	r10,136(sp)
  8101b4:	0027883a 	mov	r19,zero
  8101b8:	54800017 	ldw	r18,0(r10)
  8101bc:	52800104 	addi	r10,r10,4
  8101c0:	da802215 	stw	r10,136(sp)
  8101c4:	003f5306 	br	80ff14 <__alt_mem_onchip_mem+0xff807f14>
  8101c8:	da802217 	ldw	r10,136(sp)
  8101cc:	d8001d85 	stb	zero,118(sp)
  8101d0:	55400017 	ldw	r21,0(r10)
  8101d4:	50c00104 	addi	r3,r10,4
  8101d8:	a8024226 	beq	r21,zero,810ae4 <___vfiprintf_internal_r+0x1344>
  8101dc:	48021816 	blt	r9,zero,810a40 <___vfiprintf_internal_r+0x12a0>
  8101e0:	480d883a 	mov	r6,r9
  8101e4:	000b883a 	mov	r5,zero
  8101e8:	a809883a 	mov	r4,r21
  8101ec:	d8c02a15 	stw	r3,168(sp)
  8101f0:	da002b15 	stw	r8,172(sp)
  8101f4:	da402c15 	stw	r9,176(sp)
  8101f8:	080dbf40 	call	80dbf4 <memchr>
  8101fc:	d8c02a17 	ldw	r3,168(sp)
  810200:	da002b17 	ldw	r8,172(sp)
  810204:	da402c17 	ldw	r9,176(sp)
  810208:	10024826 	beq	r2,zero,810b2c <___vfiprintf_internal_r+0x138c>
  81020c:	1567c83a 	sub	r19,r2,r21
  810210:	df001d83 	ldbu	fp,118(sp)
  810214:	d8c02215 	stw	r3,136(sp)
  810218:	0013883a 	mov	r9,zero
  81021c:	003e6006 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  810220:	21003fcc 	andi	r4,r4,255
  810224:	203fc026 	beq	r4,zero,810128 <__alt_mem_onchip_mem+0xff808128>
  810228:	d9c01d85 	stb	r7,118(sp)
  81022c:	003fbe06 	br	810128 <__alt_mem_onchip_mem+0xff808128>
  810230:	da802217 	ldw	r10,136(sp)
  810234:	54400017 	ldw	r17,0(r10)
  810238:	50800104 	addi	r2,r10,4
  81023c:	883e3b16 	blt	r17,zero,80fb2c <__alt_mem_onchip_mem+0xff807b2c>
  810240:	d8802215 	stw	r2,136(sp)
  810244:	80c00007 	ldb	r3,0(r16)
  810248:	003db406 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  81024c:	01000044 	movi	r4,1
  810250:	01c00ac4 	movi	r7,43
  810254:	80c00007 	ldb	r3,0(r16)
  810258:	003db006 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  81025c:	80c00007 	ldb	r3,0(r16)
  810260:	82800044 	addi	r10,r16,1
  810264:	1b423c26 	beq	r3,r13,810b58 <___vfiprintf_internal_r+0x13b8>
  810268:	18bff404 	addi	r2,r3,-48
  81026c:	0013883a 	mov	r9,zero
  810270:	30822b36 	bltu	r6,r2,810b20 <___vfiprintf_internal_r+0x1380>
  810274:	50c00007 	ldb	r3,0(r10)
  810278:	4a4002a4 	muli	r9,r9,10
  81027c:	54000044 	addi	r16,r10,1
  810280:	8015883a 	mov	r10,r16
  810284:	4893883a 	add	r9,r9,r2
  810288:	18bff404 	addi	r2,r3,-48
  81028c:	30bff92e 	bgeu	r6,r2,810274 <__alt_mem_onchip_mem+0xff808274>
  810290:	483da30e 	bge	r9,zero,80f920 <__alt_mem_onchip_mem+0xff807920>
  810294:	027fffc4 	movi	r9,-1
  810298:	003da106 	br	80f920 <__alt_mem_onchip_mem+0xff807920>
  81029c:	a5001014 	ori	r20,r20,64
  8102a0:	80c00007 	ldb	r3,0(r16)
  8102a4:	003d9d06 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  8102a8:	da802217 	ldw	r10,136(sp)
  8102ac:	d8001d85 	stb	zero,118(sp)
  8102b0:	50c00204 	addi	r3,r10,8
  8102b4:	54800017 	ldw	r18,0(r10)
  8102b8:	54c00117 	ldw	r19,4(r10)
  8102bc:	4801ca16 	blt	r9,zero,8109e8 <___vfiprintf_internal_r+0x1248>
  8102c0:	013fdfc4 	movi	r4,-129
  8102c4:	94c4b03a 	or	r2,r18,r19
  8102c8:	d8c02215 	stw	r3,136(sp)
  8102cc:	a128703a 	and	r20,r20,r4
  8102d0:	0039883a 	mov	fp,zero
  8102d4:	103f341e 	bne	r2,zero,80ffa8 <__alt_mem_onchip_mem+0xff807fa8>
  8102d8:	483e2e26 	beq	r9,zero,80fb94 <__alt_mem_onchip_mem+0xff807b94>
  8102dc:	0025883a 	mov	r18,zero
  8102e0:	94800c04 	addi	r18,r18,48
  8102e4:	dc8019c5 	stb	r18,103(sp)
  8102e8:	dcc02717 	ldw	r19,156(sp)
  8102ec:	dd4019c4 	addi	r21,sp,103
  8102f0:	003e2b06 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  8102f4:	21003fcc 	andi	r4,r4,255
  8102f8:	2002361e 	bne	r4,zero,810bd4 <___vfiprintf_internal_r+0x1434>
  8102fc:	1801c126 	beq	r3,zero,810a04 <___vfiprintf_internal_r+0x1264>
  810300:	04800044 	movi	r18,1
  810304:	d8c01005 	stb	r3,64(sp)
  810308:	d8001d85 	stb	zero,118(sp)
  81030c:	9027883a 	mov	r19,r18
  810310:	dd401004 	addi	r21,sp,64
  810314:	003f1106 	br	80ff5c <__alt_mem_onchip_mem+0xff807f5c>
  810318:	d9402117 	ldw	r5,132(sp)
  81031c:	d9002017 	ldw	r4,128(sp)
  810320:	d9801a04 	addi	r6,sp,104
  810324:	d9c02b15 	stw	r7,172(sp)
  810328:	dbc02a15 	stw	r15,168(sp)
  81032c:	080f68c0 	call	80f68c <__sprint_r.part.0>
  810330:	d9c02b17 	ldw	r7,172(sp)
  810334:	dbc02a17 	ldw	r15,168(sp)
  810338:	10006d1e 	bne	r2,zero,8104f0 <___vfiprintf_internal_r+0xd50>
  81033c:	d9801b17 	ldw	r6,108(sp)
  810340:	d8801c17 	ldw	r2,112(sp)
  810344:	d811883a 	mov	r8,sp
  810348:	31400044 	addi	r5,r6,1
  81034c:	003e3306 	br	80fc1c <__alt_mem_onchip_mem+0xff807c1c>
  810350:	d9401b17 	ldw	r5,108(sp)
  810354:	d8801c17 	ldw	r2,112(sp)
  810358:	29000044 	addi	r4,r5,1
  81035c:	d8c01d87 	ldb	r3,118(sp)
  810360:	183e4d26 	beq	r3,zero,80fc98 <__alt_mem_onchip_mem+0xff807c98>
  810364:	00c00044 	movi	r3,1
  810368:	d9401d84 	addi	r5,sp,118
  81036c:	10c5883a 	add	r2,r2,r3
  810370:	41400015 	stw	r5,0(r8)
  810374:	40c00115 	stw	r3,4(r8)
  810378:	d8801c15 	stw	r2,112(sp)
  81037c:	d9001b15 	stw	r4,108(sp)
  810380:	014001c4 	movi	r5,7
  810384:	2900a90e 	bge	r5,r4,81062c <___vfiprintf_internal_r+0xe8c>
  810388:	1000da1e 	bne	r2,zero,8106f4 <___vfiprintf_internal_r+0xf54>
  81038c:	7000ab1e 	bne	r14,zero,81063c <___vfiprintf_internal_r+0xe9c>
  810390:	000b883a 	mov	r5,zero
  810394:	1809883a 	mov	r4,r3
  810398:	d811883a 	mov	r8,sp
  81039c:	00c02004 	movi	r3,128
  8103a0:	e0fe4d26 	beq	fp,r3,80fcd8 <__alt_mem_onchip_mem+0xff807cd8>
  8103a4:	4cf9c83a 	sub	fp,r9,r19
  8103a8:	073e7b0e 	bge	zero,fp,80fd98 <__alt_mem_onchip_mem+0xff807d98>
  8103ac:	01c00404 	movi	r7,16
  8103b0:	3f01900e 	bge	r7,fp,8109f4 <___vfiprintf_internal_r+0x1254>
  8103b4:	00c02074 	movhi	r3,129
  8103b8:	18dd6a04 	addi	r3,r3,30120
  8103bc:	d8c02415 	stw	r3,144(sp)
  8103c0:	034001c4 	movi	r13,7
  8103c4:	00000506 	br	8103dc <___vfiprintf_internal_r+0xc3c>
  8103c8:	29000084 	addi	r4,r5,2
  8103cc:	42000204 	addi	r8,r8,8
  8103d0:	180b883a 	mov	r5,r3
  8103d4:	e73ffc04 	addi	fp,fp,-16
  8103d8:	3f000d0e 	bge	r7,fp,810410 <___vfiprintf_internal_r+0xc70>
  8103dc:	10800404 	addi	r2,r2,16
  8103e0:	28c00044 	addi	r3,r5,1
  8103e4:	45c00015 	stw	r23,0(r8)
  8103e8:	41c00115 	stw	r7,4(r8)
  8103ec:	d8801c15 	stw	r2,112(sp)
  8103f0:	d8c01b15 	stw	r3,108(sp)
  8103f4:	68fff40e 	bge	r13,r3,8103c8 <__alt_mem_onchip_mem+0xff8083c8>
  8103f8:	1000101e 	bne	r2,zero,81043c <___vfiprintf_internal_r+0xc9c>
  8103fc:	e73ffc04 	addi	fp,fp,-16
  810400:	01000044 	movi	r4,1
  810404:	000b883a 	mov	r5,zero
  810408:	d811883a 	mov	r8,sp
  81040c:	3f3ff316 	blt	r7,fp,8103dc <__alt_mem_onchip_mem+0xff8083dc>
  810410:	da802417 	ldw	r10,144(sp)
  810414:	1705883a 	add	r2,r2,fp
  810418:	47000115 	stw	fp,4(r8)
  81041c:	42800015 	stw	r10,0(r8)
  810420:	d8801c15 	stw	r2,112(sp)
  810424:	d9001b15 	stw	r4,108(sp)
  810428:	00c001c4 	movi	r3,7
  81042c:	19003616 	blt	r3,r4,810508 <___vfiprintf_internal_r+0xd68>
  810430:	42000204 	addi	r8,r8,8
  810434:	21000044 	addi	r4,r4,1
  810438:	003e5706 	br	80fd98 <__alt_mem_onchip_mem+0xff807d98>
  81043c:	d9402117 	ldw	r5,132(sp)
  810440:	d9002017 	ldw	r4,128(sp)
  810444:	d9801a04 	addi	r6,sp,104
  810448:	d9c02b15 	stw	r7,172(sp)
  81044c:	db402a15 	stw	r13,168(sp)
  810450:	080f68c0 	call	80f68c <__sprint_r.part.0>
  810454:	d9c02b17 	ldw	r7,172(sp)
  810458:	db402a17 	ldw	r13,168(sp)
  81045c:	1000241e 	bne	r2,zero,8104f0 <___vfiprintf_internal_r+0xd50>
  810460:	d9401b17 	ldw	r5,108(sp)
  810464:	d8801c17 	ldw	r2,112(sp)
  810468:	d811883a 	mov	r8,sp
  81046c:	29000044 	addi	r4,r5,1
  810470:	003fd806 	br	8103d4 <__alt_mem_onchip_mem+0xff8083d4>
  810474:	d9401b17 	ldw	r5,108(sp)
  810478:	00c02074 	movhi	r3,129
  81047c:	18dd6e04 	addi	r3,r3,30136
  810480:	d8c02415 	stw	r3,144(sp)
  810484:	29400044 	addi	r5,r5,1
  810488:	d8c02417 	ldw	r3,144(sp)
  81048c:	14c5883a 	add	r2,r2,r19
  810490:	44c00115 	stw	r19,4(r8)
  810494:	40c00015 	stw	r3,0(r8)
  810498:	d8801c15 	stw	r2,112(sp)
  81049c:	d9401b15 	stw	r5,108(sp)
  8104a0:	00c001c4 	movi	r3,7
  8104a4:	1940070e 	bge	r3,r5,8104c4 <___vfiprintf_internal_r+0xd24>
  8104a8:	103e4826 	beq	r2,zero,80fdcc <__alt_mem_onchip_mem+0xff807dcc>
  8104ac:	d9402117 	ldw	r5,132(sp)
  8104b0:	d9002017 	ldw	r4,128(sp)
  8104b4:	d9801a04 	addi	r6,sp,104
  8104b8:	080f68c0 	call	80f68c <__sprint_r.part.0>
  8104bc:	10000c1e 	bne	r2,zero,8104f0 <___vfiprintf_internal_r+0xd50>
  8104c0:	d8801c17 	ldw	r2,112(sp)
  8104c4:	8c80010e 	bge	r17,r18,8104cc <___vfiprintf_internal_r+0xd2c>
  8104c8:	9023883a 	mov	r17,r18
  8104cc:	da802317 	ldw	r10,140(sp)
  8104d0:	5455883a 	add	r10,r10,r17
  8104d4:	da802315 	stw	r10,140(sp)
  8104d8:	103e4126 	beq	r2,zero,80fde0 <__alt_mem_onchip_mem+0xff807de0>
  8104dc:	d9402117 	ldw	r5,132(sp)
  8104e0:	d9002017 	ldw	r4,128(sp)
  8104e4:	d9801a04 	addi	r6,sp,104
  8104e8:	080f68c0 	call	80f68c <__sprint_r.part.0>
  8104ec:	103e3c26 	beq	r2,zero,80fde0 <__alt_mem_onchip_mem+0xff807de0>
  8104f0:	dd002117 	ldw	r20,132(sp)
  8104f4:	a080030b 	ldhu	r2,12(r20)
  8104f8:	1080100c 	andi	r2,r2,64
  8104fc:	1001231e 	bne	r2,zero,81098c <___vfiprintf_internal_r+0x11ec>
  810500:	d8802317 	ldw	r2,140(sp)
  810504:	003d7b06 	br	80faf4 <__alt_mem_onchip_mem+0xff807af4>
  810508:	1000991e 	bne	r2,zero,810770 <___vfiprintf_internal_r+0xfd0>
  81050c:	00c00044 	movi	r3,1
  810510:	9805883a 	mov	r2,r19
  810514:	dd400015 	stw	r21,0(sp)
  810518:	dcc00115 	stw	r19,4(sp)
  81051c:	dcc01c15 	stw	r19,112(sp)
  810520:	d8c01b15 	stw	r3,108(sp)
  810524:	d811883a 	mov	r8,sp
  810528:	42000204 	addi	r8,r8,8
  81052c:	a2c0010c 	andi	r11,r20,4
  810530:	583fe426 	beq	r11,zero,8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810534:	8ca7c83a 	sub	r19,r17,r18
  810538:	04ffe20e 	bge	zero,r19,8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  81053c:	01c00404 	movi	r7,16
  810540:	3cffcc0e 	bge	r7,r19,810474 <__alt_mem_onchip_mem+0xff808474>
  810544:	02802074 	movhi	r10,129
  810548:	529d6e04 	addi	r10,r10,30136
  81054c:	d9001b17 	ldw	r4,108(sp)
  810550:	da802415 	stw	r10,144(sp)
  810554:	382b883a 	mov	r21,r7
  810558:	050001c4 	movi	r20,7
  81055c:	df002017 	ldw	fp,128(sp)
  810560:	00000506 	br	810578 <___vfiprintf_internal_r+0xdd8>
  810564:	21400084 	addi	r5,r4,2
  810568:	42000204 	addi	r8,r8,8
  81056c:	1809883a 	mov	r4,r3
  810570:	9cfffc04 	addi	r19,r19,-16
  810574:	acffc40e 	bge	r21,r19,810488 <__alt_mem_onchip_mem+0xff808488>
  810578:	10800404 	addi	r2,r2,16
  81057c:	20c00044 	addi	r3,r4,1
  810580:	45800015 	stw	r22,0(r8)
  810584:	45400115 	stw	r21,4(r8)
  810588:	d8801c15 	stw	r2,112(sp)
  81058c:	d8c01b15 	stw	r3,108(sp)
  810590:	a0fff40e 	bge	r20,r3,810564 <__alt_mem_onchip_mem+0xff808564>
  810594:	1000041e 	bne	r2,zero,8105a8 <___vfiprintf_internal_r+0xe08>
  810598:	01400044 	movi	r5,1
  81059c:	0009883a 	mov	r4,zero
  8105a0:	d811883a 	mov	r8,sp
  8105a4:	003ff206 	br	810570 <__alt_mem_onchip_mem+0xff808570>
  8105a8:	d9402117 	ldw	r5,132(sp)
  8105ac:	d9801a04 	addi	r6,sp,104
  8105b0:	e009883a 	mov	r4,fp
  8105b4:	080f68c0 	call	80f68c <__sprint_r.part.0>
  8105b8:	103fcd1e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  8105bc:	d9001b17 	ldw	r4,108(sp)
  8105c0:	d8801c17 	ldw	r2,112(sp)
  8105c4:	d811883a 	mov	r8,sp
  8105c8:	21400044 	addi	r5,r4,1
  8105cc:	003fe806 	br	810570 <__alt_mem_onchip_mem+0xff808570>
  8105d0:	d9402117 	ldw	r5,132(sp)
  8105d4:	d9002017 	ldw	r4,128(sp)
  8105d8:	d9801a04 	addi	r6,sp,104
  8105dc:	d9c02b15 	stw	r7,172(sp)
  8105e0:	db402a15 	stw	r13,168(sp)
  8105e4:	080f68c0 	call	80f68c <__sprint_r.part.0>
  8105e8:	d9c02b17 	ldw	r7,172(sp)
  8105ec:	db402a17 	ldw	r13,168(sp)
  8105f0:	103fbf1e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  8105f4:	d9401b17 	ldw	r5,108(sp)
  8105f8:	d8801c17 	ldw	r2,112(sp)
  8105fc:	d811883a 	mov	r8,sp
  810600:	29800044 	addi	r6,r5,1
  810604:	003dc406 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  810608:	1000d21e 	bne	r2,zero,810954 <___vfiprintf_internal_r+0x11b4>
  81060c:	d8c01d87 	ldb	r3,118(sp)
  810610:	18009526 	beq	r3,zero,810868 <___vfiprintf_internal_r+0x10c8>
  810614:	00800044 	movi	r2,1
  810618:	d8c01d84 	addi	r3,sp,118
  81061c:	1009883a 	mov	r4,r2
  810620:	d8c00015 	stw	r3,0(sp)
  810624:	d8800115 	stw	r2,4(sp)
  810628:	d811883a 	mov	r8,sp
  81062c:	200b883a 	mov	r5,r4
  810630:	42000204 	addi	r8,r8,8
  810634:	21000044 	addi	r4,r4,1
  810638:	003d9706 	br	80fc98 <__alt_mem_onchip_mem+0xff807c98>
  81063c:	d9001d04 	addi	r4,sp,116
  810640:	00800084 	movi	r2,2
  810644:	d9000015 	stw	r4,0(sp)
  810648:	d8800115 	stw	r2,4(sp)
  81064c:	1809883a 	mov	r4,r3
  810650:	d811883a 	mov	r8,sp
  810654:	200b883a 	mov	r5,r4
  810658:	42000204 	addi	r8,r8,8
  81065c:	21000044 	addi	r4,r4,1
  810660:	003f4e06 	br	81039c <__alt_mem_onchip_mem+0xff80839c>
  810664:	d8001d85 	stb	zero,118(sp)
  810668:	48005016 	blt	r9,zero,8107ac <___vfiprintf_internal_r+0x100c>
  81066c:	00ffdfc4 	movi	r3,-129
  810670:	94c4b03a 	or	r2,r18,r19
  810674:	a0e8703a 	and	r20,r20,r3
  810678:	103d4426 	beq	r2,zero,80fb8c <__alt_mem_onchip_mem+0xff807b8c>
  81067c:	0039883a 	mov	fp,zero
  810680:	d9002617 	ldw	r4,152(sp)
  810684:	dd401a04 	addi	r21,sp,104
  810688:	908003cc 	andi	r2,r18,15
  81068c:	9806973a 	slli	r3,r19,28
  810690:	2085883a 	add	r2,r4,r2
  810694:	9024d13a 	srli	r18,r18,4
  810698:	10800003 	ldbu	r2,0(r2)
  81069c:	9826d13a 	srli	r19,r19,4
  8106a0:	ad7fffc4 	addi	r21,r21,-1
  8106a4:	1ca4b03a 	or	r18,r3,r18
  8106a8:	a8800005 	stb	r2,0(r21)
  8106ac:	94c4b03a 	or	r2,r18,r19
  8106b0:	103ff51e 	bne	r2,zero,810688 <__alt_mem_onchip_mem+0xff808688>
  8106b4:	003e5906 	br	81001c <__alt_mem_onchip_mem+0xff80801c>
  8106b8:	d9402117 	ldw	r5,132(sp)
  8106bc:	d9002017 	ldw	r4,128(sp)
  8106c0:	d9801a04 	addi	r6,sp,104
  8106c4:	080f68c0 	call	80f68c <__sprint_r.part.0>
  8106c8:	103f891e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  8106cc:	d8801c17 	ldw	r2,112(sp)
  8106d0:	d811883a 	mov	r8,sp
  8106d4:	003f9506 	br	81052c <__alt_mem_onchip_mem+0xff80852c>
  8106d8:	d9402117 	ldw	r5,132(sp)
  8106dc:	d9002017 	ldw	r4,128(sp)
  8106e0:	d9801a04 	addi	r6,sp,104
  8106e4:	080f68c0 	call	80f68c <__sprint_r.part.0>
  8106e8:	103f811e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  8106ec:	d811883a 	mov	r8,sp
  8106f0:	003ced06 	br	80faa8 <__alt_mem_onchip_mem+0xff807aa8>
  8106f4:	d9402117 	ldw	r5,132(sp)
  8106f8:	d9002017 	ldw	r4,128(sp)
  8106fc:	d9801a04 	addi	r6,sp,104
  810700:	da402c15 	stw	r9,176(sp)
  810704:	db802a15 	stw	r14,168(sp)
  810708:	080f68c0 	call	80f68c <__sprint_r.part.0>
  81070c:	da402c17 	ldw	r9,176(sp)
  810710:	db802a17 	ldw	r14,168(sp)
  810714:	103f761e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  810718:	d9401b17 	ldw	r5,108(sp)
  81071c:	d8801c17 	ldw	r2,112(sp)
  810720:	d811883a 	mov	r8,sp
  810724:	29000044 	addi	r4,r5,1
  810728:	003d5b06 	br	80fc98 <__alt_mem_onchip_mem+0xff807c98>
  81072c:	d9402117 	ldw	r5,132(sp)
  810730:	d9002017 	ldw	r4,128(sp)
  810734:	d9801a04 	addi	r6,sp,104
  810738:	da402c15 	stw	r9,176(sp)
  81073c:	080f68c0 	call	80f68c <__sprint_r.part.0>
  810740:	da402c17 	ldw	r9,176(sp)
  810744:	103f6a1e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  810748:	d9401b17 	ldw	r5,108(sp)
  81074c:	d8801c17 	ldw	r2,112(sp)
  810750:	d811883a 	mov	r8,sp
  810754:	29000044 	addi	r4,r5,1
  810758:	003f1006 	br	81039c <__alt_mem_onchip_mem+0xff80839c>
  81075c:	1000c31e 	bne	r2,zero,810a6c <___vfiprintf_internal_r+0x12cc>
  810760:	01000044 	movi	r4,1
  810764:	000b883a 	mov	r5,zero
  810768:	d811883a 	mov	r8,sp
  81076c:	003f0d06 	br	8103a4 <__alt_mem_onchip_mem+0xff8083a4>
  810770:	d9402117 	ldw	r5,132(sp)
  810774:	d9002017 	ldw	r4,128(sp)
  810778:	d9801a04 	addi	r6,sp,104
  81077c:	080f68c0 	call	80f68c <__sprint_r.part.0>
  810780:	103f5b1e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  810784:	d9001b17 	ldw	r4,108(sp)
  810788:	d8801c17 	ldw	r2,112(sp)
  81078c:	d811883a 	mov	r8,sp
  810790:	21000044 	addi	r4,r4,1
  810794:	003d8006 	br	80fd98 <__alt_mem_onchip_mem+0xff807d98>
  810798:	01002074 	movhi	r4,129
  81079c:	211d0a04 	addi	r4,r4,29736
  8107a0:	d9002615 	stw	r4,152(sp)
  8107a4:	d8c02215 	stw	r3,136(sp)
  8107a8:	1029883a 	mov	r20,r2
  8107ac:	94c4b03a 	or	r2,r18,r19
  8107b0:	103fb21e 	bne	r2,zero,81067c <__alt_mem_onchip_mem+0xff80867c>
  8107b4:	0039883a 	mov	fp,zero
  8107b8:	00800084 	movi	r2,2
  8107bc:	003e6b06 	br	81016c <__alt_mem_onchip_mem+0xff80816c>
  8107c0:	da802217 	ldw	r10,136(sp)
  8107c4:	d8001d85 	stb	zero,118(sp)
  8107c8:	0027883a 	mov	r19,zero
  8107cc:	50800104 	addi	r2,r10,4
  8107d0:	54800017 	ldw	r18,0(r10)
  8107d4:	483e6016 	blt	r9,zero,810158 <__alt_mem_onchip_mem+0xff808158>
  8107d8:	00ffdfc4 	movi	r3,-129
  8107dc:	d8802215 	stw	r2,136(sp)
  8107e0:	a0e8703a 	and	r20,r20,r3
  8107e4:	0039883a 	mov	fp,zero
  8107e8:	903ebb26 	beq	r18,zero,8102d8 <__alt_mem_onchip_mem+0xff8082d8>
  8107ec:	00800244 	movi	r2,9
  8107f0:	14bdee36 	bltu	r2,r18,80ffac <__alt_mem_onchip_mem+0xff807fac>
  8107f4:	003eba06 	br	8102e0 <__alt_mem_onchip_mem+0xff8082e0>
  8107f8:	00800c04 	movi	r2,48
  8107fc:	d8c01d45 	stb	r3,117(sp)
  810800:	d8801d05 	stb	r2,116(sp)
  810804:	d8001d85 	stb	zero,118(sp)
  810808:	a0c00094 	ori	r3,r20,2
  81080c:	4800a916 	blt	r9,zero,810ab4 <___vfiprintf_internal_r+0x1314>
  810810:	00bfdfc4 	movi	r2,-129
  810814:	a096703a 	and	r11,r20,r2
  810818:	5d000094 	ori	r20,r11,2
  81081c:	0039883a 	mov	fp,zero
  810820:	003f9706 	br	810680 <__alt_mem_onchip_mem+0xff808680>
  810824:	8025883a 	mov	r18,r16
  810828:	003c2e06 	br	80f8e4 <__alt_mem_onchip_mem+0xff8078e4>
  81082c:	00802074 	movhi	r2,129
  810830:	109d0a04 	addi	r2,r2,29736
  810834:	0039883a 	mov	fp,zero
  810838:	d8802615 	stw	r2,152(sp)
  81083c:	003f9006 	br	810680 <__alt_mem_onchip_mem+0xff808680>
  810840:	04a5c83a 	sub	r18,zero,r18
  810844:	07000b44 	movi	fp,45
  810848:	9004c03a 	cmpne	r2,r18,zero
  81084c:	04e7c83a 	sub	r19,zero,r19
  810850:	df001d85 	stb	fp,118(sp)
  810854:	98a7c83a 	sub	r19,r19,r2
  810858:	48009f16 	blt	r9,zero,810ad8 <___vfiprintf_internal_r+0x1338>
  81085c:	00bfdfc4 	movi	r2,-129
  810860:	a0a8703a 	and	r20,r20,r2
  810864:	003dd006 	br	80ffa8 <__alt_mem_onchip_mem+0xff807fa8>
  810868:	70004c26 	beq	r14,zero,81099c <___vfiprintf_internal_r+0x11fc>
  81086c:	00800084 	movi	r2,2
  810870:	d8c01d04 	addi	r3,sp,116
  810874:	d8c00015 	stw	r3,0(sp)
  810878:	d8800115 	stw	r2,4(sp)
  81087c:	01000044 	movi	r4,1
  810880:	d811883a 	mov	r8,sp
  810884:	003f7306 	br	810654 <__alt_mem_onchip_mem+0xff808654>
  810888:	a080100c 	andi	r2,r20,64
  81088c:	da802217 	ldw	r10,136(sp)
  810890:	103e0626 	beq	r2,zero,8100ac <__alt_mem_onchip_mem+0xff8080ac>
  810894:	5480000f 	ldh	r18,0(r10)
  810898:	52800104 	addi	r10,r10,4
  81089c:	da802215 	stw	r10,136(sp)
  8108a0:	9027d7fa 	srai	r19,r18,31
  8108a4:	9805883a 	mov	r2,r19
  8108a8:	003db806 	br	80ff8c <__alt_mem_onchip_mem+0xff807f8c>
  8108ac:	a080040c 	andi	r2,r20,16
  8108b0:	1000091e 	bne	r2,zero,8108d8 <___vfiprintf_internal_r+0x1138>
  8108b4:	a2c0100c 	andi	r11,r20,64
  8108b8:	58000726 	beq	r11,zero,8108d8 <___vfiprintf_internal_r+0x1138>
  8108bc:	da802217 	ldw	r10,136(sp)
  8108c0:	50800017 	ldw	r2,0(r10)
  8108c4:	52800104 	addi	r10,r10,4
  8108c8:	da802215 	stw	r10,136(sp)
  8108cc:	da802317 	ldw	r10,140(sp)
  8108d0:	1280000d 	sth	r10,0(r2)
  8108d4:	003be706 	br	80f874 <__alt_mem_onchip_mem+0xff807874>
  8108d8:	da802217 	ldw	r10,136(sp)
  8108dc:	50800017 	ldw	r2,0(r10)
  8108e0:	52800104 	addi	r10,r10,4
  8108e4:	da802215 	stw	r10,136(sp)
  8108e8:	da802317 	ldw	r10,140(sp)
  8108ec:	12800015 	stw	r10,0(r2)
  8108f0:	003be006 	br	80f874 <__alt_mem_onchip_mem+0xff807874>
  8108f4:	a080100c 	andi	r2,r20,64
  8108f8:	da802217 	ldw	r10,136(sp)
  8108fc:	10003026 	beq	r2,zero,8109c0 <___vfiprintf_internal_r+0x1220>
  810900:	5480000b 	ldhu	r18,0(r10)
  810904:	52800104 	addi	r10,r10,4
  810908:	0027883a 	mov	r19,zero
  81090c:	da802215 	stw	r10,136(sp)
  810910:	003d8006 	br	80ff14 <__alt_mem_onchip_mem+0xff807f14>
  810914:	80c00007 	ldb	r3,0(r16)
  810918:	003c0006 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  81091c:	a080100c 	andi	r2,r20,64
  810920:	d8001d85 	stb	zero,118(sp)
  810924:	da802217 	ldw	r10,136(sp)
  810928:	1000201e 	bne	r2,zero,8109ac <___vfiprintf_internal_r+0x120c>
  81092c:	50800104 	addi	r2,r10,4
  810930:	54800017 	ldw	r18,0(r10)
  810934:	0027883a 	mov	r19,zero
  810938:	483def0e 	bge	r9,zero,8100f8 <__alt_mem_onchip_mem+0xff8080f8>
  81093c:	94c6b03a 	or	r3,r18,r19
  810940:	d8802215 	stw	r2,136(sp)
  810944:	183d4e1e 	bne	r3,zero,80fe80 <__alt_mem_onchip_mem+0xff807e80>
  810948:	0039883a 	mov	fp,zero
  81094c:	0005883a 	mov	r2,zero
  810950:	003e0606 	br	81016c <__alt_mem_onchip_mem+0xff80816c>
  810954:	d9402117 	ldw	r5,132(sp)
  810958:	d9002017 	ldw	r4,128(sp)
  81095c:	d9801a04 	addi	r6,sp,104
  810960:	da402c15 	stw	r9,176(sp)
  810964:	db802a15 	stw	r14,168(sp)
  810968:	080f68c0 	call	80f68c <__sprint_r.part.0>
  81096c:	da402c17 	ldw	r9,176(sp)
  810970:	db802a17 	ldw	r14,168(sp)
  810974:	103ede1e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  810978:	d9401b17 	ldw	r5,108(sp)
  81097c:	d8801c17 	ldw	r2,112(sp)
  810980:	d811883a 	mov	r8,sp
  810984:	29000044 	addi	r4,r5,1
  810988:	003e7406 	br	81035c <__alt_mem_onchip_mem+0xff80835c>
  81098c:	00bfffc4 	movi	r2,-1
  810990:	003c5806 	br	80faf4 <__alt_mem_onchip_mem+0xff807af4>
  810994:	d811883a 	mov	r8,sp
  810998:	003ee806 	br	81053c <__alt_mem_onchip_mem+0xff80853c>
  81099c:	000b883a 	mov	r5,zero
  8109a0:	01000044 	movi	r4,1
  8109a4:	d811883a 	mov	r8,sp
  8109a8:	003e7c06 	br	81039c <__alt_mem_onchip_mem+0xff80839c>
  8109ac:	50800104 	addi	r2,r10,4
  8109b0:	5480000b 	ldhu	r18,0(r10)
  8109b4:	0027883a 	mov	r19,zero
  8109b8:	483dcf0e 	bge	r9,zero,8100f8 <__alt_mem_onchip_mem+0xff8080f8>
  8109bc:	003fdf06 	br	81093c <__alt_mem_onchip_mem+0xff80893c>
  8109c0:	54800017 	ldw	r18,0(r10)
  8109c4:	52800104 	addi	r10,r10,4
  8109c8:	0027883a 	mov	r19,zero
  8109cc:	da802215 	stw	r10,136(sp)
  8109d0:	003d5006 	br	80ff14 <__alt_mem_onchip_mem+0xff807f14>
  8109d4:	50800104 	addi	r2,r10,4
  8109d8:	5480000b 	ldhu	r18,0(r10)
  8109dc:	0027883a 	mov	r19,zero
  8109e0:	483f7d0e 	bge	r9,zero,8107d8 <__alt_mem_onchip_mem+0xff8087d8>
  8109e4:	003ddc06 	br	810158 <__alt_mem_onchip_mem+0xff808158>
  8109e8:	d8c02215 	stw	r3,136(sp)
  8109ec:	0039883a 	mov	fp,zero
  8109f0:	003ddb06 	br	810160 <__alt_mem_onchip_mem+0xff808160>
  8109f4:	02802074 	movhi	r10,129
  8109f8:	529d6a04 	addi	r10,r10,30120
  8109fc:	da802415 	stw	r10,144(sp)
  810a00:	003e8306 	br	810410 <__alt_mem_onchip_mem+0xff808410>
  810a04:	d8801c17 	ldw	r2,112(sp)
  810a08:	dd002117 	ldw	r20,132(sp)
  810a0c:	103eb926 	beq	r2,zero,8104f4 <__alt_mem_onchip_mem+0xff8084f4>
  810a10:	d9002017 	ldw	r4,128(sp)
  810a14:	d9801a04 	addi	r6,sp,104
  810a18:	a00b883a 	mov	r5,r20
  810a1c:	080f68c0 	call	80f68c <__sprint_r.part.0>
  810a20:	003eb406 	br	8104f4 <__alt_mem_onchip_mem+0xff8084f4>
  810a24:	80c00043 	ldbu	r3,1(r16)
  810a28:	a5000814 	ori	r20,r20,32
  810a2c:	84000044 	addi	r16,r16,1
  810a30:	18c03fcc 	andi	r3,r3,255
  810a34:	18c0201c 	xori	r3,r3,128
  810a38:	18ffe004 	addi	r3,r3,-128
  810a3c:	003bb706 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  810a40:	a809883a 	mov	r4,r21
  810a44:	d8c02a15 	stw	r3,168(sp)
  810a48:	da002b15 	stw	r8,172(sp)
  810a4c:	08095a80 	call	8095a8 <strlen>
  810a50:	d8c02a17 	ldw	r3,168(sp)
  810a54:	1027883a 	mov	r19,r2
  810a58:	df001d83 	ldbu	fp,118(sp)
  810a5c:	d8c02215 	stw	r3,136(sp)
  810a60:	0013883a 	mov	r9,zero
  810a64:	da002b17 	ldw	r8,172(sp)
  810a68:	003c4d06 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  810a6c:	d9402117 	ldw	r5,132(sp)
  810a70:	d9002017 	ldw	r4,128(sp)
  810a74:	d9801a04 	addi	r6,sp,104
  810a78:	da402c15 	stw	r9,176(sp)
  810a7c:	080f68c0 	call	80f68c <__sprint_r.part.0>
  810a80:	da402c17 	ldw	r9,176(sp)
  810a84:	103e9a1e 	bne	r2,zero,8104f0 <__alt_mem_onchip_mem+0xff8084f0>
  810a88:	d9401b17 	ldw	r5,108(sp)
  810a8c:	d8801c17 	ldw	r2,112(sp)
  810a90:	d811883a 	mov	r8,sp
  810a94:	29000044 	addi	r4,r5,1
  810a98:	003e4206 	br	8103a4 <__alt_mem_onchip_mem+0xff8083a4>
  810a9c:	d9401b17 	ldw	r5,108(sp)
  810aa0:	01002074 	movhi	r4,129
  810aa4:	211d6e04 	addi	r4,r4,30136
  810aa8:	d9002415 	stw	r4,144(sp)
  810aac:	29400044 	addi	r5,r5,1
  810ab0:	003c6d06 	br	80fc68 <__alt_mem_onchip_mem+0xff807c68>
  810ab4:	0039883a 	mov	fp,zero
  810ab8:	00800084 	movi	r2,2
  810abc:	10803fcc 	andi	r2,r2,255
  810ac0:	01000044 	movi	r4,1
  810ac4:	11001e26 	beq	r2,r4,810b40 <___vfiprintf_internal_r+0x13a0>
  810ac8:	01000084 	movi	r4,2
  810acc:	11001e1e 	bne	r2,r4,810b48 <___vfiprintf_internal_r+0x13a8>
  810ad0:	1829883a 	mov	r20,r3
  810ad4:	003eea06 	br	810680 <__alt_mem_onchip_mem+0xff808680>
  810ad8:	a007883a 	mov	r3,r20
  810adc:	00800044 	movi	r2,1
  810ae0:	003ff606 	br	810abc <__alt_mem_onchip_mem+0xff808abc>
  810ae4:	00800184 	movi	r2,6
  810ae8:	1240012e 	bgeu	r2,r9,810af0 <___vfiprintf_internal_r+0x1350>
  810aec:	1013883a 	mov	r9,r2
  810af0:	4827883a 	mov	r19,r9
  810af4:	4825883a 	mov	r18,r9
  810af8:	48001516 	blt	r9,zero,810b50 <___vfiprintf_internal_r+0x13b0>
  810afc:	05402074 	movhi	r21,129
  810b00:	d8c02215 	stw	r3,136(sp)
  810b04:	ad5d0f04 	addi	r21,r21,29756
  810b08:	003d1406 	br	80ff5c <__alt_mem_onchip_mem+0xff807f5c>
  810b0c:	02802074 	movhi	r10,129
  810b10:	529d6a04 	addi	r10,r10,30120
  810b14:	da802415 	stw	r10,144(sp)
  810b18:	200d883a 	mov	r6,r4
  810b1c:	003c9106 	br	80fd64 <__alt_mem_onchip_mem+0xff807d64>
  810b20:	5021883a 	mov	r16,r10
  810b24:	0013883a 	mov	r9,zero
  810b28:	003b7d06 	br	80f920 <__alt_mem_onchip_mem+0xff807920>
  810b2c:	4827883a 	mov	r19,r9
  810b30:	df001d83 	ldbu	fp,118(sp)
  810b34:	d8c02215 	stw	r3,136(sp)
  810b38:	0013883a 	mov	r9,zero
  810b3c:	003c1806 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  810b40:	1829883a 	mov	r20,r3
  810b44:	003d1806 	br	80ffa8 <__alt_mem_onchip_mem+0xff807fa8>
  810b48:	1829883a 	mov	r20,r3
  810b4c:	003ccd06 	br	80fe84 <__alt_mem_onchip_mem+0xff807e84>
  810b50:	0025883a 	mov	r18,zero
  810b54:	003fe906 	br	810afc <__alt_mem_onchip_mem+0xff808afc>
  810b58:	d8802217 	ldw	r2,136(sp)
  810b5c:	80c00043 	ldbu	r3,1(r16)
  810b60:	5021883a 	mov	r16,r10
  810b64:	12400017 	ldw	r9,0(r2)
  810b68:	10800104 	addi	r2,r2,4
  810b6c:	d8802215 	stw	r2,136(sp)
  810b70:	483faf0e 	bge	r9,zero,810a30 <__alt_mem_onchip_mem+0xff808a30>
  810b74:	18c03fcc 	andi	r3,r3,255
  810b78:	18c0201c 	xori	r3,r3,128
  810b7c:	027fffc4 	movi	r9,-1
  810b80:	18ffe004 	addi	r3,r3,-128
  810b84:	003b6506 	br	80f91c <__alt_mem_onchip_mem+0xff80791c>
  810b88:	d9c01d85 	stb	r7,118(sp)
  810b8c:	003ca006 	br	80fe10 <__alt_mem_onchip_mem+0xff807e10>
  810b90:	d9c01d85 	stb	r7,118(sp)
  810b94:	003cad06 	br	80fe4c <__alt_mem_onchip_mem+0xff807e4c>
  810b98:	d9c01d85 	stb	r7,118(sp)
  810b9c:	003d7d06 	br	810194 <__alt_mem_onchip_mem+0xff808194>
  810ba0:	d9c01d85 	stb	r7,118(sp)
  810ba4:	003d5f06 	br	810124 <__alt_mem_onchip_mem+0xff808124>
  810ba8:	a080004c 	andi	r2,r20,1
  810bac:	0039883a 	mov	fp,zero
  810bb0:	10000526 	beq	r2,zero,810bc8 <___vfiprintf_internal_r+0x1428>
  810bb4:	00800c04 	movi	r2,48
  810bb8:	d88019c5 	stb	r2,103(sp)
  810bbc:	dcc02717 	ldw	r19,156(sp)
  810bc0:	dd4019c4 	addi	r21,sp,103
  810bc4:	003bf606 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  810bc8:	0027883a 	mov	r19,zero
  810bcc:	dd401a04 	addi	r21,sp,104
  810bd0:	003bf306 	br	80fba0 <__alt_mem_onchip_mem+0xff807ba0>
  810bd4:	d9c01d85 	stb	r7,118(sp)
  810bd8:	003dc806 	br	8102fc <__alt_mem_onchip_mem+0xff8082fc>
  810bdc:	d9c01d85 	stb	r7,118(sp)
  810be0:	003d3a06 	br	8100cc <__alt_mem_onchip_mem+0xff8080cc>
  810be4:	d9c01d85 	stb	r7,118(sp)
  810be8:	003d2a06 	br	810094 <__alt_mem_onchip_mem+0xff808094>
  810bec:	d9c01d85 	stb	r7,118(sp)
  810bf0:	003cde06 	br	80ff6c <__alt_mem_onchip_mem+0xff807f6c>
  810bf4:	d9c01d85 	stb	r7,118(sp)
  810bf8:	003cbc06 	br	80feec <__alt_mem_onchip_mem+0xff807eec>

00810bfc <__vfiprintf_internal>:
  810bfc:	008020b4 	movhi	r2,130
  810c00:	10a55004 	addi	r2,r2,-27328
  810c04:	300f883a 	mov	r7,r6
  810c08:	280d883a 	mov	r6,r5
  810c0c:	200b883a 	mov	r5,r4
  810c10:	11000017 	ldw	r4,0(r2)
  810c14:	080f7a01 	jmpi	80f7a0 <___vfiprintf_internal_r>

00810c18 <__sbprintf>:
  810c18:	2880030b 	ldhu	r2,12(r5)
  810c1c:	2ac01917 	ldw	r11,100(r5)
  810c20:	2a80038b 	ldhu	r10,14(r5)
  810c24:	2a400717 	ldw	r9,28(r5)
  810c28:	2a000917 	ldw	r8,36(r5)
  810c2c:	defee204 	addi	sp,sp,-1144
  810c30:	00c10004 	movi	r3,1024
  810c34:	dc011a15 	stw	r16,1128(sp)
  810c38:	10bfff4c 	andi	r2,r2,65533
  810c3c:	2821883a 	mov	r16,r5
  810c40:	d8cb883a 	add	r5,sp,r3
  810c44:	dc811c15 	stw	r18,1136(sp)
  810c48:	dc411b15 	stw	r17,1132(sp)
  810c4c:	dfc11d15 	stw	ra,1140(sp)
  810c50:	2025883a 	mov	r18,r4
  810c54:	d881030d 	sth	r2,1036(sp)
  810c58:	dac11915 	stw	r11,1124(sp)
  810c5c:	da81038d 	sth	r10,1038(sp)
  810c60:	da410715 	stw	r9,1052(sp)
  810c64:	da010915 	stw	r8,1060(sp)
  810c68:	dec10015 	stw	sp,1024(sp)
  810c6c:	dec10415 	stw	sp,1040(sp)
  810c70:	d8c10215 	stw	r3,1032(sp)
  810c74:	d8c10515 	stw	r3,1044(sp)
  810c78:	d8010615 	stw	zero,1048(sp)
  810c7c:	080f7a00 	call	80f7a0 <___vfiprintf_internal_r>
  810c80:	1023883a 	mov	r17,r2
  810c84:	10000416 	blt	r2,zero,810c98 <__sbprintf+0x80>
  810c88:	d9410004 	addi	r5,sp,1024
  810c8c:	9009883a 	mov	r4,r18
  810c90:	08073e00 	call	8073e0 <_fflush_r>
  810c94:	10000d1e 	bne	r2,zero,810ccc <__sbprintf+0xb4>
  810c98:	d881030b 	ldhu	r2,1036(sp)
  810c9c:	1080100c 	andi	r2,r2,64
  810ca0:	10000326 	beq	r2,zero,810cb0 <__sbprintf+0x98>
  810ca4:	8080030b 	ldhu	r2,12(r16)
  810ca8:	10801014 	ori	r2,r2,64
  810cac:	8080030d 	sth	r2,12(r16)
  810cb0:	8805883a 	mov	r2,r17
  810cb4:	dfc11d17 	ldw	ra,1140(sp)
  810cb8:	dc811c17 	ldw	r18,1136(sp)
  810cbc:	dc411b17 	ldw	r17,1132(sp)
  810cc0:	dc011a17 	ldw	r16,1128(sp)
  810cc4:	dec11e04 	addi	sp,sp,1144
  810cc8:	f800283a 	ret
  810ccc:	047fffc4 	movi	r17,-1
  810cd0:	003ff106 	br	810c98 <__alt_mem_onchip_mem+0xff808c98>

00810cd4 <_calloc_r>:
  810cd4:	298b383a 	mul	r5,r5,r6
  810cd8:	defffe04 	addi	sp,sp,-8
  810cdc:	dfc00115 	stw	ra,4(sp)
  810ce0:	dc000015 	stw	r16,0(sp)
  810ce4:	08086580 	call	808658 <_malloc_r>
  810ce8:	10002926 	beq	r2,zero,810d90 <_calloc_r+0xbc>
  810cec:	11bfff17 	ldw	r6,-4(r2)
  810cf0:	1021883a 	mov	r16,r2
  810cf4:	00bfff04 	movi	r2,-4
  810cf8:	308c703a 	and	r6,r6,r2
  810cfc:	00c00904 	movi	r3,36
  810d00:	308d883a 	add	r6,r6,r2
  810d04:	19801636 	bltu	r3,r6,810d60 <_calloc_r+0x8c>
  810d08:	008004c4 	movi	r2,19
  810d0c:	11800b2e 	bgeu	r2,r6,810d3c <_calloc_r+0x68>
  810d10:	80000015 	stw	zero,0(r16)
  810d14:	80000115 	stw	zero,4(r16)
  810d18:	008006c4 	movi	r2,27
  810d1c:	11801a2e 	bgeu	r2,r6,810d88 <_calloc_r+0xb4>
  810d20:	80000215 	stw	zero,8(r16)
  810d24:	80000315 	stw	zero,12(r16)
  810d28:	30c0151e 	bne	r6,r3,810d80 <_calloc_r+0xac>
  810d2c:	80000415 	stw	zero,16(r16)
  810d30:	80800604 	addi	r2,r16,24
  810d34:	80000515 	stw	zero,20(r16)
  810d38:	00000106 	br	810d40 <_calloc_r+0x6c>
  810d3c:	8005883a 	mov	r2,r16
  810d40:	10000015 	stw	zero,0(r2)
  810d44:	10000115 	stw	zero,4(r2)
  810d48:	10000215 	stw	zero,8(r2)
  810d4c:	8005883a 	mov	r2,r16
  810d50:	dfc00117 	ldw	ra,4(sp)
  810d54:	dc000017 	ldw	r16,0(sp)
  810d58:	dec00204 	addi	sp,sp,8
  810d5c:	f800283a 	ret
  810d60:	000b883a 	mov	r5,zero
  810d64:	8009883a 	mov	r4,r16
  810d68:	0808e640 	call	808e64 <memset>
  810d6c:	8005883a 	mov	r2,r16
  810d70:	dfc00117 	ldw	ra,4(sp)
  810d74:	dc000017 	ldw	r16,0(sp)
  810d78:	dec00204 	addi	sp,sp,8
  810d7c:	f800283a 	ret
  810d80:	80800404 	addi	r2,r16,16
  810d84:	003fee06 	br	810d40 <__alt_mem_onchip_mem+0xff808d40>
  810d88:	80800204 	addi	r2,r16,8
  810d8c:	003fec06 	br	810d40 <__alt_mem_onchip_mem+0xff808d40>
  810d90:	0005883a 	mov	r2,zero
  810d94:	003fee06 	br	810d50 <__alt_mem_onchip_mem+0xff808d50>

00810d98 <__fputwc>:
  810d98:	defff804 	addi	sp,sp,-32
  810d9c:	dcc00415 	stw	r19,16(sp)
  810da0:	dc800315 	stw	r18,12(sp)
  810da4:	dc000115 	stw	r16,4(sp)
  810da8:	dfc00715 	stw	ra,28(sp)
  810dac:	dd400615 	stw	r21,24(sp)
  810db0:	dd000515 	stw	r20,20(sp)
  810db4:	dc400215 	stw	r17,8(sp)
  810db8:	2027883a 	mov	r19,r4
  810dbc:	2825883a 	mov	r18,r5
  810dc0:	3021883a 	mov	r16,r6
  810dc4:	080db400 	call	80db40 <__locale_mb_cur_max>
  810dc8:	00c00044 	movi	r3,1
  810dcc:	10c03e26 	beq	r2,r3,810ec8 <__fputwc+0x130>
  810dd0:	81c01704 	addi	r7,r16,92
  810dd4:	900d883a 	mov	r6,r18
  810dd8:	d80b883a 	mov	r5,sp
  810ddc:	9809883a 	mov	r4,r19
  810de0:	0810fa00 	call	810fa0 <_wcrtomb_r>
  810de4:	1029883a 	mov	r20,r2
  810de8:	00bfffc4 	movi	r2,-1
  810dec:	a0802026 	beq	r20,r2,810e70 <__fputwc+0xd8>
  810df0:	d9400003 	ldbu	r5,0(sp)
  810df4:	a0001c26 	beq	r20,zero,810e68 <__fputwc+0xd0>
  810df8:	0023883a 	mov	r17,zero
  810dfc:	05400284 	movi	r21,10
  810e00:	00000906 	br	810e28 <__fputwc+0x90>
  810e04:	80800017 	ldw	r2,0(r16)
  810e08:	11400005 	stb	r5,0(r2)
  810e0c:	80c00017 	ldw	r3,0(r16)
  810e10:	18c00044 	addi	r3,r3,1
  810e14:	80c00015 	stw	r3,0(r16)
  810e18:	8c400044 	addi	r17,r17,1
  810e1c:	dc45883a 	add	r2,sp,r17
  810e20:	8d00112e 	bgeu	r17,r20,810e68 <__fputwc+0xd0>
  810e24:	11400003 	ldbu	r5,0(r2)
  810e28:	80c00217 	ldw	r3,8(r16)
  810e2c:	18ffffc4 	addi	r3,r3,-1
  810e30:	80c00215 	stw	r3,8(r16)
  810e34:	183ff30e 	bge	r3,zero,810e04 <__alt_mem_onchip_mem+0xff808e04>
  810e38:	80800617 	ldw	r2,24(r16)
  810e3c:	18801916 	blt	r3,r2,810ea4 <__fputwc+0x10c>
  810e40:	80800017 	ldw	r2,0(r16)
  810e44:	11400005 	stb	r5,0(r2)
  810e48:	80800017 	ldw	r2,0(r16)
  810e4c:	10c00003 	ldbu	r3,0(r2)
  810e50:	10800044 	addi	r2,r2,1
  810e54:	1d402326 	beq	r3,r21,810ee4 <__fputwc+0x14c>
  810e58:	80800015 	stw	r2,0(r16)
  810e5c:	8c400044 	addi	r17,r17,1
  810e60:	dc45883a 	add	r2,sp,r17
  810e64:	8d3fef36 	bltu	r17,r20,810e24 <__alt_mem_onchip_mem+0xff808e24>
  810e68:	9005883a 	mov	r2,r18
  810e6c:	00000406 	br	810e80 <__fputwc+0xe8>
  810e70:	80c0030b 	ldhu	r3,12(r16)
  810e74:	a005883a 	mov	r2,r20
  810e78:	18c01014 	ori	r3,r3,64
  810e7c:	80c0030d 	sth	r3,12(r16)
  810e80:	dfc00717 	ldw	ra,28(sp)
  810e84:	dd400617 	ldw	r21,24(sp)
  810e88:	dd000517 	ldw	r20,20(sp)
  810e8c:	dcc00417 	ldw	r19,16(sp)
  810e90:	dc800317 	ldw	r18,12(sp)
  810e94:	dc400217 	ldw	r17,8(sp)
  810e98:	dc000117 	ldw	r16,4(sp)
  810e9c:	dec00804 	addi	sp,sp,32
  810ea0:	f800283a 	ret
  810ea4:	800d883a 	mov	r6,r16
  810ea8:	29403fcc 	andi	r5,r5,255
  810eac:	9809883a 	mov	r4,r19
  810eb0:	080b9140 	call	80b914 <__swbuf_r>
  810eb4:	10bfffe0 	cmpeqi	r2,r2,-1
  810eb8:	10803fcc 	andi	r2,r2,255
  810ebc:	103fd626 	beq	r2,zero,810e18 <__alt_mem_onchip_mem+0xff808e18>
  810ec0:	00bfffc4 	movi	r2,-1
  810ec4:	003fee06 	br	810e80 <__alt_mem_onchip_mem+0xff808e80>
  810ec8:	90ffffc4 	addi	r3,r18,-1
  810ecc:	01003f84 	movi	r4,254
  810ed0:	20ffbf36 	bltu	r4,r3,810dd0 <__alt_mem_onchip_mem+0xff808dd0>
  810ed4:	900b883a 	mov	r5,r18
  810ed8:	dc800005 	stb	r18,0(sp)
  810edc:	1029883a 	mov	r20,r2
  810ee0:	003fc506 	br	810df8 <__alt_mem_onchip_mem+0xff808df8>
  810ee4:	800d883a 	mov	r6,r16
  810ee8:	a80b883a 	mov	r5,r21
  810eec:	9809883a 	mov	r4,r19
  810ef0:	080b9140 	call	80b914 <__swbuf_r>
  810ef4:	10bfffe0 	cmpeqi	r2,r2,-1
  810ef8:	003fef06 	br	810eb8 <__alt_mem_onchip_mem+0xff808eb8>

00810efc <_fputwc_r>:
  810efc:	3080030b 	ldhu	r2,12(r6)
  810f00:	10c8000c 	andi	r3,r2,8192
  810f04:	1800051e 	bne	r3,zero,810f1c <_fputwc_r+0x20>
  810f08:	30c01917 	ldw	r3,100(r6)
  810f0c:	10880014 	ori	r2,r2,8192
  810f10:	3080030d 	sth	r2,12(r6)
  810f14:	18880014 	ori	r2,r3,8192
  810f18:	30801915 	stw	r2,100(r6)
  810f1c:	0810d981 	jmpi	810d98 <__fputwc>

00810f20 <fputwc>:
  810f20:	008020b4 	movhi	r2,130
  810f24:	defffc04 	addi	sp,sp,-16
  810f28:	10a55004 	addi	r2,r2,-27328
  810f2c:	dc000115 	stw	r16,4(sp)
  810f30:	14000017 	ldw	r16,0(r2)
  810f34:	dc400215 	stw	r17,8(sp)
  810f38:	dfc00315 	stw	ra,12(sp)
  810f3c:	2023883a 	mov	r17,r4
  810f40:	80000226 	beq	r16,zero,810f4c <fputwc+0x2c>
  810f44:	80800e17 	ldw	r2,56(r16)
  810f48:	10001026 	beq	r2,zero,810f8c <fputwc+0x6c>
  810f4c:	2880030b 	ldhu	r2,12(r5)
  810f50:	10c8000c 	andi	r3,r2,8192
  810f54:	1800051e 	bne	r3,zero,810f6c <fputwc+0x4c>
  810f58:	28c01917 	ldw	r3,100(r5)
  810f5c:	10880014 	ori	r2,r2,8192
  810f60:	2880030d 	sth	r2,12(r5)
  810f64:	18880014 	ori	r2,r3,8192
  810f68:	28801915 	stw	r2,100(r5)
  810f6c:	280d883a 	mov	r6,r5
  810f70:	8009883a 	mov	r4,r16
  810f74:	880b883a 	mov	r5,r17
  810f78:	dfc00317 	ldw	ra,12(sp)
  810f7c:	dc400217 	ldw	r17,8(sp)
  810f80:	dc000117 	ldw	r16,4(sp)
  810f84:	dec00404 	addi	sp,sp,16
  810f88:	0810d981 	jmpi	810d98 <__fputwc>
  810f8c:	8009883a 	mov	r4,r16
  810f90:	d9400015 	stw	r5,0(sp)
  810f94:	08077bc0 	call	8077bc <__sinit>
  810f98:	d9400017 	ldw	r5,0(sp)
  810f9c:	003feb06 	br	810f4c <__alt_mem_onchip_mem+0xff808f4c>

00810fa0 <_wcrtomb_r>:
  810fa0:	defff604 	addi	sp,sp,-40
  810fa4:	008020b4 	movhi	r2,130
  810fa8:	dc800815 	stw	r18,32(sp)
  810fac:	dc400715 	stw	r17,28(sp)
  810fb0:	dc000615 	stw	r16,24(sp)
  810fb4:	10a55404 	addi	r2,r2,-27312
  810fb8:	dfc00915 	stw	ra,36(sp)
  810fbc:	2021883a 	mov	r16,r4
  810fc0:	3823883a 	mov	r17,r7
  810fc4:	14800017 	ldw	r18,0(r2)
  810fc8:	28001426 	beq	r5,zero,81101c <_wcrtomb_r+0x7c>
  810fcc:	d9400415 	stw	r5,16(sp)
  810fd0:	d9800515 	stw	r6,20(sp)
  810fd4:	080db340 	call	80db34 <__locale_charset>
  810fd8:	d9800517 	ldw	r6,20(sp)
  810fdc:	d9400417 	ldw	r5,16(sp)
  810fe0:	100f883a 	mov	r7,r2
  810fe4:	dc400015 	stw	r17,0(sp)
  810fe8:	8009883a 	mov	r4,r16
  810fec:	903ee83a 	callr	r18
  810ff0:	00ffffc4 	movi	r3,-1
  810ff4:	10c0031e 	bne	r2,r3,811004 <_wcrtomb_r+0x64>
  810ff8:	88000015 	stw	zero,0(r17)
  810ffc:	00c02284 	movi	r3,138
  811000:	80c00015 	stw	r3,0(r16)
  811004:	dfc00917 	ldw	ra,36(sp)
  811008:	dc800817 	ldw	r18,32(sp)
  81100c:	dc400717 	ldw	r17,28(sp)
  811010:	dc000617 	ldw	r16,24(sp)
  811014:	dec00a04 	addi	sp,sp,40
  811018:	f800283a 	ret
  81101c:	080db340 	call	80db34 <__locale_charset>
  811020:	100f883a 	mov	r7,r2
  811024:	dc400015 	stw	r17,0(sp)
  811028:	000d883a 	mov	r6,zero
  81102c:	d9400104 	addi	r5,sp,4
  811030:	8009883a 	mov	r4,r16
  811034:	903ee83a 	callr	r18
  811038:	003fed06 	br	810ff0 <__alt_mem_onchip_mem+0xff808ff0>

0081103c <wcrtomb>:
  81103c:	defff604 	addi	sp,sp,-40
  811040:	008020b4 	movhi	r2,130
  811044:	dc800615 	stw	r18,24(sp)
  811048:	dc400515 	stw	r17,20(sp)
  81104c:	10a55004 	addi	r2,r2,-27328
  811050:	dfc00915 	stw	ra,36(sp)
  811054:	dd000815 	stw	r20,32(sp)
  811058:	dcc00715 	stw	r19,28(sp)
  81105c:	dc000415 	stw	r16,16(sp)
  811060:	3025883a 	mov	r18,r6
  811064:	14400017 	ldw	r17,0(r2)
  811068:	20001926 	beq	r4,zero,8110d0 <wcrtomb+0x94>
  81106c:	008020b4 	movhi	r2,130
  811070:	10a55404 	addi	r2,r2,-27312
  811074:	15000017 	ldw	r20,0(r2)
  811078:	2021883a 	mov	r16,r4
  81107c:	2827883a 	mov	r19,r5
  811080:	080db340 	call	80db34 <__locale_charset>
  811084:	100f883a 	mov	r7,r2
  811088:	dc800015 	stw	r18,0(sp)
  81108c:	980d883a 	mov	r6,r19
  811090:	800b883a 	mov	r5,r16
  811094:	8809883a 	mov	r4,r17
  811098:	a03ee83a 	callr	r20
  81109c:	00ffffc4 	movi	r3,-1
  8110a0:	10c0031e 	bne	r2,r3,8110b0 <wcrtomb+0x74>
  8110a4:	90000015 	stw	zero,0(r18)
  8110a8:	00c02284 	movi	r3,138
  8110ac:	88c00015 	stw	r3,0(r17)
  8110b0:	dfc00917 	ldw	ra,36(sp)
  8110b4:	dd000817 	ldw	r20,32(sp)
  8110b8:	dcc00717 	ldw	r19,28(sp)
  8110bc:	dc800617 	ldw	r18,24(sp)
  8110c0:	dc400517 	ldw	r17,20(sp)
  8110c4:	dc000417 	ldw	r16,16(sp)
  8110c8:	dec00a04 	addi	sp,sp,40
  8110cc:	f800283a 	ret
  8110d0:	008020b4 	movhi	r2,130
  8110d4:	10a55404 	addi	r2,r2,-27312
  8110d8:	14000017 	ldw	r16,0(r2)
  8110dc:	080db340 	call	80db34 <__locale_charset>
  8110e0:	100f883a 	mov	r7,r2
  8110e4:	dc800015 	stw	r18,0(sp)
  8110e8:	000d883a 	mov	r6,zero
  8110ec:	d9400104 	addi	r5,sp,4
  8110f0:	8809883a 	mov	r4,r17
  8110f4:	803ee83a 	callr	r16
  8110f8:	003fe806 	br	81109c <__alt_mem_onchip_mem+0xff80909c>

008110fc <__ascii_wctomb>:
  8110fc:	28000526 	beq	r5,zero,811114 <__ascii_wctomb+0x18>
  811100:	00803fc4 	movi	r2,255
  811104:	11800536 	bltu	r2,r6,81111c <__ascii_wctomb+0x20>
  811108:	29800005 	stb	r6,0(r5)
  81110c:	00800044 	movi	r2,1
  811110:	f800283a 	ret
  811114:	0005883a 	mov	r2,zero
  811118:	f800283a 	ret
  81111c:	00802284 	movi	r2,138
  811120:	20800015 	stw	r2,0(r4)
  811124:	00bfffc4 	movi	r2,-1
  811128:	f800283a 	ret

0081112c <_wctomb_r>:
  81112c:	008020b4 	movhi	r2,130
  811130:	defff904 	addi	sp,sp,-28
  811134:	10a55404 	addi	r2,r2,-27312
  811138:	dfc00615 	stw	ra,24(sp)
  81113c:	dc400515 	stw	r17,20(sp)
  811140:	dc000415 	stw	r16,16(sp)
  811144:	3823883a 	mov	r17,r7
  811148:	14000017 	ldw	r16,0(r2)
  81114c:	d9000115 	stw	r4,4(sp)
  811150:	d9400215 	stw	r5,8(sp)
  811154:	d9800315 	stw	r6,12(sp)
  811158:	080db340 	call	80db34 <__locale_charset>
  81115c:	d9800317 	ldw	r6,12(sp)
  811160:	d9400217 	ldw	r5,8(sp)
  811164:	d9000117 	ldw	r4,4(sp)
  811168:	100f883a 	mov	r7,r2
  81116c:	dc400015 	stw	r17,0(sp)
  811170:	803ee83a 	callr	r16
  811174:	dfc00617 	ldw	ra,24(sp)
  811178:	dc400517 	ldw	r17,20(sp)
  81117c:	dc000417 	ldw	r16,16(sp)
  811180:	dec00704 	addi	sp,sp,28
  811184:	f800283a 	ret

00811188 <__udivdi3>:
  811188:	defff504 	addi	sp,sp,-44
  81118c:	dcc00415 	stw	r19,16(sp)
  811190:	dc000115 	stw	r16,4(sp)
  811194:	dfc00a15 	stw	ra,40(sp)
  811198:	df000915 	stw	fp,36(sp)
  81119c:	ddc00815 	stw	r23,32(sp)
  8111a0:	dd800715 	stw	r22,28(sp)
  8111a4:	dd400615 	stw	r21,24(sp)
  8111a8:	dd000515 	stw	r20,20(sp)
  8111ac:	dc800315 	stw	r18,12(sp)
  8111b0:	dc400215 	stw	r17,8(sp)
  8111b4:	2027883a 	mov	r19,r4
  8111b8:	2821883a 	mov	r16,r5
  8111bc:	3800411e 	bne	r7,zero,8112c4 <__udivdi3+0x13c>
  8111c0:	3023883a 	mov	r17,r6
  8111c4:	2025883a 	mov	r18,r4
  8111c8:	2980522e 	bgeu	r5,r6,811314 <__udivdi3+0x18c>
  8111cc:	00bfffd4 	movui	r2,65535
  8111d0:	282d883a 	mov	r22,r5
  8111d4:	1180a836 	bltu	r2,r6,811478 <__udivdi3+0x2f0>
  8111d8:	00803fc4 	movi	r2,255
  8111dc:	1185803a 	cmpltu	r2,r2,r6
  8111e0:	100490fa 	slli	r2,r2,3
  8111e4:	3086d83a 	srl	r3,r6,r2
  8111e8:	01002074 	movhi	r4,129
  8111ec:	211cbec4 	addi	r4,r4,29435
  8111f0:	20c7883a 	add	r3,r4,r3
  8111f4:	18c00003 	ldbu	r3,0(r3)
  8111f8:	1885883a 	add	r2,r3,r2
  8111fc:	00c00804 	movi	r3,32
  811200:	1887c83a 	sub	r3,r3,r2
  811204:	18000526 	beq	r3,zero,81121c <__udivdi3+0x94>
  811208:	80e0983a 	sll	r16,r16,r3
  81120c:	9884d83a 	srl	r2,r19,r2
  811210:	30e2983a 	sll	r17,r6,r3
  811214:	98e4983a 	sll	r18,r19,r3
  811218:	142cb03a 	or	r22,r2,r16
  81121c:	882ad43a 	srli	r21,r17,16
  811220:	b009883a 	mov	r4,r22
  811224:	8d3fffcc 	andi	r20,r17,65535
  811228:	a80b883a 	mov	r5,r21
  81122c:	0811d940 	call	811d94 <__umodsi3>
  811230:	b009883a 	mov	r4,r22
  811234:	a80b883a 	mov	r5,r21
  811238:	1027883a 	mov	r19,r2
  81123c:	0811d300 	call	811d30 <__udivsi3>
  811240:	102d883a 	mov	r22,r2
  811244:	9826943a 	slli	r19,r19,16
  811248:	9004d43a 	srli	r2,r18,16
  81124c:	a5a1383a 	mul	r16,r20,r22
  811250:	14c4b03a 	or	r2,r2,r19
  811254:	1400052e 	bgeu	r2,r16,81126c <__udivdi3+0xe4>
  811258:	1445883a 	add	r2,r2,r17
  81125c:	b0ffffc4 	addi	r3,r22,-1
  811260:	14400136 	bltu	r2,r17,811268 <__udivdi3+0xe0>
  811264:	14012336 	bltu	r2,r16,8116f4 <__udivdi3+0x56c>
  811268:	182d883a 	mov	r22,r3
  81126c:	1421c83a 	sub	r16,r2,r16
  811270:	a80b883a 	mov	r5,r21
  811274:	8009883a 	mov	r4,r16
  811278:	0811d940 	call	811d94 <__umodsi3>
  81127c:	1027883a 	mov	r19,r2
  811280:	a80b883a 	mov	r5,r21
  811284:	8009883a 	mov	r4,r16
  811288:	0811d300 	call	811d30 <__udivsi3>
  81128c:	9826943a 	slli	r19,r19,16
  811290:	a0a9383a 	mul	r20,r20,r2
  811294:	94bfffcc 	andi	r18,r18,65535
  811298:	94e4b03a 	or	r18,r18,r19
  81129c:	9500052e 	bgeu	r18,r20,8112b4 <__udivdi3+0x12c>
  8112a0:	8ca5883a 	add	r18,r17,r18
  8112a4:	10ffffc4 	addi	r3,r2,-1
  8112a8:	9440f136 	bltu	r18,r17,811670 <__udivdi3+0x4e8>
  8112ac:	9500f02e 	bgeu	r18,r20,811670 <__udivdi3+0x4e8>
  8112b0:	10bfff84 	addi	r2,r2,-2
  8112b4:	b00c943a 	slli	r6,r22,16
  8112b8:	0007883a 	mov	r3,zero
  8112bc:	3084b03a 	or	r2,r6,r2
  8112c0:	00005906 	br	811428 <__udivdi3+0x2a0>
  8112c4:	29c05636 	bltu	r5,r7,811420 <__udivdi3+0x298>
  8112c8:	00bfffd4 	movui	r2,65535
  8112cc:	11c0622e 	bgeu	r2,r7,811458 <__udivdi3+0x2d0>
  8112d0:	00804034 	movhi	r2,256
  8112d4:	10bfffc4 	addi	r2,r2,-1
  8112d8:	11c0ee36 	bltu	r2,r7,811694 <__udivdi3+0x50c>
  8112dc:	00800404 	movi	r2,16
  8112e0:	3886d83a 	srl	r3,r7,r2
  8112e4:	01002074 	movhi	r4,129
  8112e8:	211cbec4 	addi	r4,r4,29435
  8112ec:	20c7883a 	add	r3,r4,r3
  8112f0:	18c00003 	ldbu	r3,0(r3)
  8112f4:	05400804 	movi	r21,32
  8112f8:	1885883a 	add	r2,r3,r2
  8112fc:	a8abc83a 	sub	r21,r21,r2
  811300:	a800621e 	bne	r21,zero,81148c <__udivdi3+0x304>
  811304:	3c00e936 	bltu	r7,r16,8116ac <__udivdi3+0x524>
  811308:	9985403a 	cmpgeu	r2,r19,r6
  81130c:	0007883a 	mov	r3,zero
  811310:	00004506 	br	811428 <__udivdi3+0x2a0>
  811314:	3000041e 	bne	r6,zero,811328 <__udivdi3+0x1a0>
  811318:	000b883a 	mov	r5,zero
  81131c:	01000044 	movi	r4,1
  811320:	0811d300 	call	811d30 <__udivsi3>
  811324:	1023883a 	mov	r17,r2
  811328:	00bfffd4 	movui	r2,65535
  81132c:	14404e2e 	bgeu	r2,r17,811468 <__udivdi3+0x2e0>
  811330:	00804034 	movhi	r2,256
  811334:	10bfffc4 	addi	r2,r2,-1
  811338:	1440d836 	bltu	r2,r17,81169c <__udivdi3+0x514>
  81133c:	00800404 	movi	r2,16
  811340:	8886d83a 	srl	r3,r17,r2
  811344:	01002074 	movhi	r4,129
  811348:	211cbec4 	addi	r4,r4,29435
  81134c:	20c7883a 	add	r3,r4,r3
  811350:	18c00003 	ldbu	r3,0(r3)
  811354:	1885883a 	add	r2,r3,r2
  811358:	00c00804 	movi	r3,32
  81135c:	1887c83a 	sub	r3,r3,r2
  811360:	18008f1e 	bne	r3,zero,8115a0 <__udivdi3+0x418>
  811364:	882ad43a 	srli	r21,r17,16
  811368:	8461c83a 	sub	r16,r16,r17
  81136c:	8d3fffcc 	andi	r20,r17,65535
  811370:	00c00044 	movi	r3,1
  811374:	8009883a 	mov	r4,r16
  811378:	a80b883a 	mov	r5,r21
  81137c:	d8c00015 	stw	r3,0(sp)
  811380:	0811d940 	call	811d94 <__umodsi3>
  811384:	8009883a 	mov	r4,r16
  811388:	a80b883a 	mov	r5,r21
  81138c:	1027883a 	mov	r19,r2
  811390:	0811d300 	call	811d30 <__udivsi3>
  811394:	9826943a 	slli	r19,r19,16
  811398:	9008d43a 	srli	r4,r18,16
  81139c:	1521383a 	mul	r16,r2,r20
  8113a0:	102d883a 	mov	r22,r2
  8113a4:	24c8b03a 	or	r4,r4,r19
  8113a8:	d8c00017 	ldw	r3,0(sp)
  8113ac:	2400052e 	bgeu	r4,r16,8113c4 <__udivdi3+0x23c>
  8113b0:	2449883a 	add	r4,r4,r17
  8113b4:	b0bfffc4 	addi	r2,r22,-1
  8113b8:	24400136 	bltu	r4,r17,8113c0 <__udivdi3+0x238>
  8113bc:	2400ca36 	bltu	r4,r16,8116e8 <__udivdi3+0x560>
  8113c0:	102d883a 	mov	r22,r2
  8113c4:	2421c83a 	sub	r16,r4,r16
  8113c8:	a80b883a 	mov	r5,r21
  8113cc:	8009883a 	mov	r4,r16
  8113d0:	d8c00015 	stw	r3,0(sp)
  8113d4:	0811d940 	call	811d94 <__umodsi3>
  8113d8:	1027883a 	mov	r19,r2
  8113dc:	a80b883a 	mov	r5,r21
  8113e0:	8009883a 	mov	r4,r16
  8113e4:	0811d300 	call	811d30 <__udivsi3>
  8113e8:	9826943a 	slli	r19,r19,16
  8113ec:	1529383a 	mul	r20,r2,r20
  8113f0:	94bfffcc 	andi	r18,r18,65535
  8113f4:	94e4b03a 	or	r18,r18,r19
  8113f8:	d8c00017 	ldw	r3,0(sp)
  8113fc:	9500052e 	bgeu	r18,r20,811414 <__udivdi3+0x28c>
  811400:	8ca5883a 	add	r18,r17,r18
  811404:	113fffc4 	addi	r4,r2,-1
  811408:	94409736 	bltu	r18,r17,811668 <__udivdi3+0x4e0>
  81140c:	9500962e 	bgeu	r18,r20,811668 <__udivdi3+0x4e0>
  811410:	10bfff84 	addi	r2,r2,-2
  811414:	b00c943a 	slli	r6,r22,16
  811418:	3084b03a 	or	r2,r6,r2
  81141c:	00000206 	br	811428 <__udivdi3+0x2a0>
  811420:	0007883a 	mov	r3,zero
  811424:	0005883a 	mov	r2,zero
  811428:	dfc00a17 	ldw	ra,40(sp)
  81142c:	df000917 	ldw	fp,36(sp)
  811430:	ddc00817 	ldw	r23,32(sp)
  811434:	dd800717 	ldw	r22,28(sp)
  811438:	dd400617 	ldw	r21,24(sp)
  81143c:	dd000517 	ldw	r20,20(sp)
  811440:	dcc00417 	ldw	r19,16(sp)
  811444:	dc800317 	ldw	r18,12(sp)
  811448:	dc400217 	ldw	r17,8(sp)
  81144c:	dc000117 	ldw	r16,4(sp)
  811450:	dec00b04 	addi	sp,sp,44
  811454:	f800283a 	ret
  811458:	00803fc4 	movi	r2,255
  81145c:	11c5803a 	cmpltu	r2,r2,r7
  811460:	100490fa 	slli	r2,r2,3
  811464:	003f9e06 	br	8112e0 <__alt_mem_onchip_mem+0xff8092e0>
  811468:	00803fc4 	movi	r2,255
  81146c:	1445803a 	cmpltu	r2,r2,r17
  811470:	100490fa 	slli	r2,r2,3
  811474:	003fb206 	br	811340 <__alt_mem_onchip_mem+0xff809340>
  811478:	00804034 	movhi	r2,256
  81147c:	10bfffc4 	addi	r2,r2,-1
  811480:	11808836 	bltu	r2,r6,8116a4 <__udivdi3+0x51c>
  811484:	00800404 	movi	r2,16
  811488:	003f5606 	br	8111e4 <__alt_mem_onchip_mem+0xff8091e4>
  81148c:	30aed83a 	srl	r23,r6,r2
  811490:	3d4e983a 	sll	r7,r7,r21
  811494:	80acd83a 	srl	r22,r16,r2
  811498:	9884d83a 	srl	r2,r19,r2
  81149c:	3deeb03a 	or	r23,r7,r23
  8114a0:	b824d43a 	srli	r18,r23,16
  8114a4:	8560983a 	sll	r16,r16,r21
  8114a8:	b009883a 	mov	r4,r22
  8114ac:	900b883a 	mov	r5,r18
  8114b0:	3568983a 	sll	r20,r6,r21
  8114b4:	1420b03a 	or	r16,r2,r16
  8114b8:	0811d940 	call	811d94 <__umodsi3>
  8114bc:	b009883a 	mov	r4,r22
  8114c0:	900b883a 	mov	r5,r18
  8114c4:	1023883a 	mov	r17,r2
  8114c8:	0811d300 	call	811d30 <__udivsi3>
  8114cc:	8808943a 	slli	r4,r17,16
  8114d0:	bf3fffcc 	andi	fp,r23,65535
  8114d4:	8006d43a 	srli	r3,r16,16
  8114d8:	e0a3383a 	mul	r17,fp,r2
  8114dc:	100d883a 	mov	r6,r2
  8114e0:	1906b03a 	or	r3,r3,r4
  8114e4:	1c40042e 	bgeu	r3,r17,8114f8 <__udivdi3+0x370>
  8114e8:	1dc7883a 	add	r3,r3,r23
  8114ec:	10bfffc4 	addi	r2,r2,-1
  8114f0:	1dc0752e 	bgeu	r3,r23,8116c8 <__udivdi3+0x540>
  8114f4:	100d883a 	mov	r6,r2
  8114f8:	1c63c83a 	sub	r17,r3,r17
  8114fc:	900b883a 	mov	r5,r18
  811500:	8809883a 	mov	r4,r17
  811504:	d9800015 	stw	r6,0(sp)
  811508:	0811d940 	call	811d94 <__umodsi3>
  81150c:	102d883a 	mov	r22,r2
  811510:	8809883a 	mov	r4,r17
  811514:	900b883a 	mov	r5,r18
  811518:	0811d300 	call	811d30 <__udivsi3>
  81151c:	b02c943a 	slli	r22,r22,16
  811520:	e089383a 	mul	r4,fp,r2
  811524:	843fffcc 	andi	r16,r16,65535
  811528:	85a0b03a 	or	r16,r16,r22
  81152c:	d9800017 	ldw	r6,0(sp)
  811530:	8100042e 	bgeu	r16,r4,811544 <__udivdi3+0x3bc>
  811534:	85e1883a 	add	r16,r16,r23
  811538:	10ffffc4 	addi	r3,r2,-1
  81153c:	85c05e2e 	bgeu	r16,r23,8116b8 <__udivdi3+0x530>
  811540:	1805883a 	mov	r2,r3
  811544:	300c943a 	slli	r6,r6,16
  811548:	a17fffcc 	andi	r5,r20,65535
  81154c:	a028d43a 	srli	r20,r20,16
  811550:	3084b03a 	or	r2,r6,r2
  811554:	10ffffcc 	andi	r3,r2,65535
  811558:	100cd43a 	srli	r6,r2,16
  81155c:	194f383a 	mul	r7,r3,r5
  811560:	1d07383a 	mul	r3,r3,r20
  811564:	314b383a 	mul	r5,r6,r5
  811568:	3810d43a 	srli	r8,r7,16
  81156c:	8121c83a 	sub	r16,r16,r4
  811570:	1947883a 	add	r3,r3,r5
  811574:	40c7883a 	add	r3,r8,r3
  811578:	350d383a 	mul	r6,r6,r20
  81157c:	1940022e 	bgeu	r3,r5,811588 <__udivdi3+0x400>
  811580:	01000074 	movhi	r4,1
  811584:	310d883a 	add	r6,r6,r4
  811588:	1828d43a 	srli	r20,r3,16
  81158c:	a18d883a 	add	r6,r20,r6
  811590:	81803e36 	bltu	r16,r6,81168c <__udivdi3+0x504>
  811594:	81803826 	beq	r16,r6,811678 <__udivdi3+0x4f0>
  811598:	0007883a 	mov	r3,zero
  81159c:	003fa206 	br	811428 <__alt_mem_onchip_mem+0xff809428>
  8115a0:	88e2983a 	sll	r17,r17,r3
  8115a4:	80a8d83a 	srl	r20,r16,r2
  8115a8:	80e0983a 	sll	r16,r16,r3
  8115ac:	882ad43a 	srli	r21,r17,16
  8115b0:	9884d83a 	srl	r2,r19,r2
  8115b4:	a009883a 	mov	r4,r20
  8115b8:	a80b883a 	mov	r5,r21
  8115bc:	142eb03a 	or	r23,r2,r16
  8115c0:	98e4983a 	sll	r18,r19,r3
  8115c4:	0811d940 	call	811d94 <__umodsi3>
  8115c8:	a009883a 	mov	r4,r20
  8115cc:	a80b883a 	mov	r5,r21
  8115d0:	1021883a 	mov	r16,r2
  8115d4:	0811d300 	call	811d30 <__udivsi3>
  8115d8:	1039883a 	mov	fp,r2
  8115dc:	8d3fffcc 	andi	r20,r17,65535
  8115e0:	8020943a 	slli	r16,r16,16
  8115e4:	b804d43a 	srli	r2,r23,16
  8115e8:	a72d383a 	mul	r22,r20,fp
  8115ec:	1404b03a 	or	r2,r2,r16
  8115f0:	1580062e 	bgeu	r2,r22,81160c <__udivdi3+0x484>
  8115f4:	1445883a 	add	r2,r2,r17
  8115f8:	e0ffffc4 	addi	r3,fp,-1
  8115fc:	14403836 	bltu	r2,r17,8116e0 <__udivdi3+0x558>
  811600:	1580372e 	bgeu	r2,r22,8116e0 <__udivdi3+0x558>
  811604:	e73fff84 	addi	fp,fp,-2
  811608:	1445883a 	add	r2,r2,r17
  81160c:	15adc83a 	sub	r22,r2,r22
  811610:	a80b883a 	mov	r5,r21
  811614:	b009883a 	mov	r4,r22
  811618:	0811d940 	call	811d94 <__umodsi3>
  81161c:	1027883a 	mov	r19,r2
  811620:	b009883a 	mov	r4,r22
  811624:	a80b883a 	mov	r5,r21
  811628:	0811d300 	call	811d30 <__udivsi3>
  81162c:	9826943a 	slli	r19,r19,16
  811630:	a0a1383a 	mul	r16,r20,r2
  811634:	b93fffcc 	andi	r4,r23,65535
  811638:	24c8b03a 	or	r4,r4,r19
  81163c:	2400062e 	bgeu	r4,r16,811658 <__udivdi3+0x4d0>
  811640:	2449883a 	add	r4,r4,r17
  811644:	10ffffc4 	addi	r3,r2,-1
  811648:	24402336 	bltu	r4,r17,8116d8 <__udivdi3+0x550>
  81164c:	2400222e 	bgeu	r4,r16,8116d8 <__udivdi3+0x550>
  811650:	10bfff84 	addi	r2,r2,-2
  811654:	2449883a 	add	r4,r4,r17
  811658:	e038943a 	slli	fp,fp,16
  81165c:	2421c83a 	sub	r16,r4,r16
  811660:	e086b03a 	or	r3,fp,r2
  811664:	003f4306 	br	811374 <__alt_mem_onchip_mem+0xff809374>
  811668:	2005883a 	mov	r2,r4
  81166c:	003f6906 	br	811414 <__alt_mem_onchip_mem+0xff809414>
  811670:	1805883a 	mov	r2,r3
  811674:	003f0f06 	br	8112b4 <__alt_mem_onchip_mem+0xff8092b4>
  811678:	1806943a 	slli	r3,r3,16
  81167c:	9d66983a 	sll	r19,r19,r21
  811680:	39ffffcc 	andi	r7,r7,65535
  811684:	19c7883a 	add	r3,r3,r7
  811688:	98ffc32e 	bgeu	r19,r3,811598 <__alt_mem_onchip_mem+0xff809598>
  81168c:	10bfffc4 	addi	r2,r2,-1
  811690:	003fc106 	br	811598 <__alt_mem_onchip_mem+0xff809598>
  811694:	00800604 	movi	r2,24
  811698:	003f1106 	br	8112e0 <__alt_mem_onchip_mem+0xff8092e0>
  81169c:	00800604 	movi	r2,24
  8116a0:	003f2706 	br	811340 <__alt_mem_onchip_mem+0xff809340>
  8116a4:	00800604 	movi	r2,24
  8116a8:	003ece06 	br	8111e4 <__alt_mem_onchip_mem+0xff8091e4>
  8116ac:	0007883a 	mov	r3,zero
  8116b0:	00800044 	movi	r2,1
  8116b4:	003f5c06 	br	811428 <__alt_mem_onchip_mem+0xff809428>
  8116b8:	813fa12e 	bgeu	r16,r4,811540 <__alt_mem_onchip_mem+0xff809540>
  8116bc:	10bfff84 	addi	r2,r2,-2
  8116c0:	85e1883a 	add	r16,r16,r23
  8116c4:	003f9f06 	br	811544 <__alt_mem_onchip_mem+0xff809544>
  8116c8:	1c7f8a2e 	bgeu	r3,r17,8114f4 <__alt_mem_onchip_mem+0xff8094f4>
  8116cc:	31bfff84 	addi	r6,r6,-2
  8116d0:	1dc7883a 	add	r3,r3,r23
  8116d4:	003f8806 	br	8114f8 <__alt_mem_onchip_mem+0xff8094f8>
  8116d8:	1805883a 	mov	r2,r3
  8116dc:	003fde06 	br	811658 <__alt_mem_onchip_mem+0xff809658>
  8116e0:	1839883a 	mov	fp,r3
  8116e4:	003fc906 	br	81160c <__alt_mem_onchip_mem+0xff80960c>
  8116e8:	b5bfff84 	addi	r22,r22,-2
  8116ec:	2449883a 	add	r4,r4,r17
  8116f0:	003f3406 	br	8113c4 <__alt_mem_onchip_mem+0xff8093c4>
  8116f4:	b5bfff84 	addi	r22,r22,-2
  8116f8:	1445883a 	add	r2,r2,r17
  8116fc:	003edb06 	br	81126c <__alt_mem_onchip_mem+0xff80926c>

00811700 <__umoddi3>:
  811700:	defff404 	addi	sp,sp,-48
  811704:	df000a15 	stw	fp,40(sp)
  811708:	dc400315 	stw	r17,12(sp)
  81170c:	dc000215 	stw	r16,8(sp)
  811710:	dfc00b15 	stw	ra,44(sp)
  811714:	ddc00915 	stw	r23,36(sp)
  811718:	dd800815 	stw	r22,32(sp)
  81171c:	dd400715 	stw	r21,28(sp)
  811720:	dd000615 	stw	r20,24(sp)
  811724:	dcc00515 	stw	r19,20(sp)
  811728:	dc800415 	stw	r18,16(sp)
  81172c:	2021883a 	mov	r16,r4
  811730:	2823883a 	mov	r17,r5
  811734:	2839883a 	mov	fp,r5
  811738:	38003c1e 	bne	r7,zero,81182c <__umoddi3+0x12c>
  81173c:	3027883a 	mov	r19,r6
  811740:	2029883a 	mov	r20,r4
  811744:	2980512e 	bgeu	r5,r6,81188c <__umoddi3+0x18c>
  811748:	00bfffd4 	movui	r2,65535
  81174c:	11809a36 	bltu	r2,r6,8119b8 <__umoddi3+0x2b8>
  811750:	01003fc4 	movi	r4,255
  811754:	2189803a 	cmpltu	r4,r4,r6
  811758:	200890fa 	slli	r4,r4,3
  81175c:	3104d83a 	srl	r2,r6,r4
  811760:	00c02074 	movhi	r3,129
  811764:	18dcbec4 	addi	r3,r3,29435
  811768:	1885883a 	add	r2,r3,r2
  81176c:	10c00003 	ldbu	r3,0(r2)
  811770:	00800804 	movi	r2,32
  811774:	1909883a 	add	r4,r3,r4
  811778:	1125c83a 	sub	r18,r2,r4
  81177c:	90000526 	beq	r18,zero,811794 <__umoddi3+0x94>
  811780:	8ca2983a 	sll	r17,r17,r18
  811784:	8108d83a 	srl	r4,r16,r4
  811788:	34a6983a 	sll	r19,r6,r18
  81178c:	84a8983a 	sll	r20,r16,r18
  811790:	2478b03a 	or	fp,r4,r17
  811794:	982ed43a 	srli	r23,r19,16
  811798:	e009883a 	mov	r4,fp
  81179c:	9dbfffcc 	andi	r22,r19,65535
  8117a0:	b80b883a 	mov	r5,r23
  8117a4:	0811d940 	call	811d94 <__umodsi3>
  8117a8:	e009883a 	mov	r4,fp
  8117ac:	b80b883a 	mov	r5,r23
  8117b0:	102b883a 	mov	r21,r2
  8117b4:	0811d300 	call	811d30 <__udivsi3>
  8117b8:	a806943a 	slli	r3,r21,16
  8117bc:	a008d43a 	srli	r4,r20,16
  8117c0:	b085383a 	mul	r2,r22,r2
  8117c4:	20c8b03a 	or	r4,r4,r3
  8117c8:	2080032e 	bgeu	r4,r2,8117d8 <__umoddi3+0xd8>
  8117cc:	24c9883a 	add	r4,r4,r19
  8117d0:	24c00136 	bltu	r4,r19,8117d8 <__umoddi3+0xd8>
  8117d4:	20811036 	bltu	r4,r2,811c18 <__umoddi3+0x518>
  8117d8:	20abc83a 	sub	r21,r4,r2
  8117dc:	b80b883a 	mov	r5,r23
  8117e0:	a809883a 	mov	r4,r21
  8117e4:	0811d940 	call	811d94 <__umodsi3>
  8117e8:	1023883a 	mov	r17,r2
  8117ec:	b80b883a 	mov	r5,r23
  8117f0:	a809883a 	mov	r4,r21
  8117f4:	0811d300 	call	811d30 <__udivsi3>
  8117f8:	8822943a 	slli	r17,r17,16
  8117fc:	b085383a 	mul	r2,r22,r2
  811800:	a0ffffcc 	andi	r3,r20,65535
  811804:	1c46b03a 	or	r3,r3,r17
  811808:	1880042e 	bgeu	r3,r2,81181c <__umoddi3+0x11c>
  81180c:	1cc7883a 	add	r3,r3,r19
  811810:	1cc00236 	bltu	r3,r19,81181c <__umoddi3+0x11c>
  811814:	1880012e 	bgeu	r3,r2,81181c <__umoddi3+0x11c>
  811818:	1cc7883a 	add	r3,r3,r19
  81181c:	1885c83a 	sub	r2,r3,r2
  811820:	1484d83a 	srl	r2,r2,r18
  811824:	0007883a 	mov	r3,zero
  811828:	00004f06 	br	811968 <__umoddi3+0x268>
  81182c:	29c04c36 	bltu	r5,r7,811960 <__umoddi3+0x260>
  811830:	00bfffd4 	movui	r2,65535
  811834:	11c0582e 	bgeu	r2,r7,811998 <__umoddi3+0x298>
  811838:	00804034 	movhi	r2,256
  81183c:	10bfffc4 	addi	r2,r2,-1
  811840:	11c0e736 	bltu	r2,r7,811be0 <__umoddi3+0x4e0>
  811844:	01000404 	movi	r4,16
  811848:	3904d83a 	srl	r2,r7,r4
  81184c:	00c02074 	movhi	r3,129
  811850:	18dcbec4 	addi	r3,r3,29435
  811854:	1885883a 	add	r2,r3,r2
  811858:	14c00003 	ldbu	r19,0(r2)
  81185c:	00c00804 	movi	r3,32
  811860:	9927883a 	add	r19,r19,r4
  811864:	1ce9c83a 	sub	r20,r3,r19
  811868:	a000581e 	bne	r20,zero,8119cc <__umoddi3+0x2cc>
  81186c:	3c400136 	bltu	r7,r17,811874 <__umoddi3+0x174>
  811870:	8180eb36 	bltu	r16,r6,811c20 <__umoddi3+0x520>
  811874:	8185c83a 	sub	r2,r16,r6
  811878:	89e3c83a 	sub	r17,r17,r7
  81187c:	8089803a 	cmpltu	r4,r16,r2
  811880:	8939c83a 	sub	fp,r17,r4
  811884:	e007883a 	mov	r3,fp
  811888:	00003706 	br	811968 <__umoddi3+0x268>
  81188c:	3000041e 	bne	r6,zero,8118a0 <__umoddi3+0x1a0>
  811890:	000b883a 	mov	r5,zero
  811894:	01000044 	movi	r4,1
  811898:	0811d300 	call	811d30 <__udivsi3>
  81189c:	1027883a 	mov	r19,r2
  8118a0:	00bfffd4 	movui	r2,65535
  8118a4:	14c0402e 	bgeu	r2,r19,8119a8 <__umoddi3+0x2a8>
  8118a8:	00804034 	movhi	r2,256
  8118ac:	10bfffc4 	addi	r2,r2,-1
  8118b0:	14c0cd36 	bltu	r2,r19,811be8 <__umoddi3+0x4e8>
  8118b4:	00800404 	movi	r2,16
  8118b8:	9886d83a 	srl	r3,r19,r2
  8118bc:	01002074 	movhi	r4,129
  8118c0:	211cbec4 	addi	r4,r4,29435
  8118c4:	20c7883a 	add	r3,r4,r3
  8118c8:	18c00003 	ldbu	r3,0(r3)
  8118cc:	1887883a 	add	r3,r3,r2
  8118d0:	00800804 	movi	r2,32
  8118d4:	10e5c83a 	sub	r18,r2,r3
  8118d8:	9000901e 	bne	r18,zero,811b1c <__umoddi3+0x41c>
  8118dc:	982cd43a 	srli	r22,r19,16
  8118e0:	8ce3c83a 	sub	r17,r17,r19
  8118e4:	9d7fffcc 	andi	r21,r19,65535
  8118e8:	b00b883a 	mov	r5,r22
  8118ec:	8809883a 	mov	r4,r17
  8118f0:	0811d940 	call	811d94 <__umodsi3>
  8118f4:	8809883a 	mov	r4,r17
  8118f8:	b00b883a 	mov	r5,r22
  8118fc:	1021883a 	mov	r16,r2
  811900:	0811d300 	call	811d30 <__udivsi3>
  811904:	8006943a 	slli	r3,r16,16
  811908:	a008d43a 	srli	r4,r20,16
  81190c:	1545383a 	mul	r2,r2,r21
  811910:	20c8b03a 	or	r4,r4,r3
  811914:	2080042e 	bgeu	r4,r2,811928 <__umoddi3+0x228>
  811918:	24c9883a 	add	r4,r4,r19
  81191c:	24c00236 	bltu	r4,r19,811928 <__umoddi3+0x228>
  811920:	2080012e 	bgeu	r4,r2,811928 <__umoddi3+0x228>
  811924:	24c9883a 	add	r4,r4,r19
  811928:	20a1c83a 	sub	r16,r4,r2
  81192c:	b00b883a 	mov	r5,r22
  811930:	8009883a 	mov	r4,r16
  811934:	0811d940 	call	811d94 <__umodsi3>
  811938:	1023883a 	mov	r17,r2
  81193c:	b00b883a 	mov	r5,r22
  811940:	8009883a 	mov	r4,r16
  811944:	0811d300 	call	811d30 <__udivsi3>
  811948:	8822943a 	slli	r17,r17,16
  81194c:	1545383a 	mul	r2,r2,r21
  811950:	a53fffcc 	andi	r20,r20,65535
  811954:	a446b03a 	or	r3,r20,r17
  811958:	18bfb02e 	bgeu	r3,r2,81181c <__alt_mem_onchip_mem+0xff80981c>
  81195c:	003fab06 	br	81180c <__alt_mem_onchip_mem+0xff80980c>
  811960:	2005883a 	mov	r2,r4
  811964:	2807883a 	mov	r3,r5
  811968:	dfc00b17 	ldw	ra,44(sp)
  81196c:	df000a17 	ldw	fp,40(sp)
  811970:	ddc00917 	ldw	r23,36(sp)
  811974:	dd800817 	ldw	r22,32(sp)
  811978:	dd400717 	ldw	r21,28(sp)
  81197c:	dd000617 	ldw	r20,24(sp)
  811980:	dcc00517 	ldw	r19,20(sp)
  811984:	dc800417 	ldw	r18,16(sp)
  811988:	dc400317 	ldw	r17,12(sp)
  81198c:	dc000217 	ldw	r16,8(sp)
  811990:	dec00c04 	addi	sp,sp,48
  811994:	f800283a 	ret
  811998:	04c03fc4 	movi	r19,255
  81199c:	99c9803a 	cmpltu	r4,r19,r7
  8119a0:	200890fa 	slli	r4,r4,3
  8119a4:	003fa806 	br	811848 <__alt_mem_onchip_mem+0xff809848>
  8119a8:	00803fc4 	movi	r2,255
  8119ac:	14c5803a 	cmpltu	r2,r2,r19
  8119b0:	100490fa 	slli	r2,r2,3
  8119b4:	003fc006 	br	8118b8 <__alt_mem_onchip_mem+0xff8098b8>
  8119b8:	00804034 	movhi	r2,256
  8119bc:	10bfffc4 	addi	r2,r2,-1
  8119c0:	11808b36 	bltu	r2,r6,811bf0 <__umoddi3+0x4f0>
  8119c4:	01000404 	movi	r4,16
  8119c8:	003f6406 	br	81175c <__alt_mem_onchip_mem+0xff80975c>
  8119cc:	34c4d83a 	srl	r2,r6,r19
  8119d0:	3d0e983a 	sll	r7,r7,r20
  8119d4:	8cf8d83a 	srl	fp,r17,r19
  8119d8:	8d10983a 	sll	r8,r17,r20
  8119dc:	38aab03a 	or	r21,r7,r2
  8119e0:	a82cd43a 	srli	r22,r21,16
  8119e4:	84e2d83a 	srl	r17,r16,r19
  8119e8:	e009883a 	mov	r4,fp
  8119ec:	b00b883a 	mov	r5,r22
  8119f0:	8a22b03a 	or	r17,r17,r8
  8119f4:	3524983a 	sll	r18,r6,r20
  8119f8:	0811d940 	call	811d94 <__umodsi3>
  8119fc:	e009883a 	mov	r4,fp
  811a00:	b00b883a 	mov	r5,r22
  811a04:	102f883a 	mov	r23,r2
  811a08:	0811d300 	call	811d30 <__udivsi3>
  811a0c:	100d883a 	mov	r6,r2
  811a10:	b808943a 	slli	r4,r23,16
  811a14:	aa3fffcc 	andi	r8,r21,65535
  811a18:	8804d43a 	srli	r2,r17,16
  811a1c:	41af383a 	mul	r23,r8,r6
  811a20:	8520983a 	sll	r16,r16,r20
  811a24:	1104b03a 	or	r2,r2,r4
  811a28:	15c0042e 	bgeu	r2,r23,811a3c <__umoddi3+0x33c>
  811a2c:	1545883a 	add	r2,r2,r21
  811a30:	30ffffc4 	addi	r3,r6,-1
  811a34:	1540742e 	bgeu	r2,r21,811c08 <__umoddi3+0x508>
  811a38:	180d883a 	mov	r6,r3
  811a3c:	15efc83a 	sub	r23,r2,r23
  811a40:	b00b883a 	mov	r5,r22
  811a44:	b809883a 	mov	r4,r23
  811a48:	d9800115 	stw	r6,4(sp)
  811a4c:	da000015 	stw	r8,0(sp)
  811a50:	0811d940 	call	811d94 <__umodsi3>
  811a54:	b00b883a 	mov	r5,r22
  811a58:	b809883a 	mov	r4,r23
  811a5c:	1039883a 	mov	fp,r2
  811a60:	0811d300 	call	811d30 <__udivsi3>
  811a64:	da000017 	ldw	r8,0(sp)
  811a68:	e038943a 	slli	fp,fp,16
  811a6c:	100b883a 	mov	r5,r2
  811a70:	4089383a 	mul	r4,r8,r2
  811a74:	8a3fffcc 	andi	r8,r17,65535
  811a78:	4710b03a 	or	r8,r8,fp
  811a7c:	d9800117 	ldw	r6,4(sp)
  811a80:	4100042e 	bgeu	r8,r4,811a94 <__umoddi3+0x394>
  811a84:	4551883a 	add	r8,r8,r21
  811a88:	10bfffc4 	addi	r2,r2,-1
  811a8c:	45405a2e 	bgeu	r8,r21,811bf8 <__umoddi3+0x4f8>
  811a90:	100b883a 	mov	r5,r2
  811a94:	300c943a 	slli	r6,r6,16
  811a98:	91ffffcc 	andi	r7,r18,65535
  811a9c:	9004d43a 	srli	r2,r18,16
  811aa0:	314cb03a 	or	r6,r6,r5
  811aa4:	317fffcc 	andi	r5,r6,65535
  811aa8:	300cd43a 	srli	r6,r6,16
  811aac:	29d3383a 	mul	r9,r5,r7
  811ab0:	288b383a 	mul	r5,r5,r2
  811ab4:	31cf383a 	mul	r7,r6,r7
  811ab8:	4806d43a 	srli	r3,r9,16
  811abc:	4111c83a 	sub	r8,r8,r4
  811ac0:	29cb883a 	add	r5,r5,r7
  811ac4:	194b883a 	add	r5,r3,r5
  811ac8:	3085383a 	mul	r2,r6,r2
  811acc:	29c0022e 	bgeu	r5,r7,811ad8 <__umoddi3+0x3d8>
  811ad0:	00c00074 	movhi	r3,1
  811ad4:	10c5883a 	add	r2,r2,r3
  811ad8:	2808d43a 	srli	r4,r5,16
  811adc:	280a943a 	slli	r5,r5,16
  811ae0:	4a7fffcc 	andi	r9,r9,65535
  811ae4:	2085883a 	add	r2,r4,r2
  811ae8:	2a4b883a 	add	r5,r5,r9
  811aec:	40803636 	bltu	r8,r2,811bc8 <__umoddi3+0x4c8>
  811af0:	40804d26 	beq	r8,r2,811c28 <__umoddi3+0x528>
  811af4:	4089c83a 	sub	r4,r8,r2
  811af8:	280f883a 	mov	r7,r5
  811afc:	81cfc83a 	sub	r7,r16,r7
  811b00:	81c7803a 	cmpltu	r3,r16,r7
  811b04:	20c7c83a 	sub	r3,r4,r3
  811b08:	1cc4983a 	sll	r2,r3,r19
  811b0c:	3d0ed83a 	srl	r7,r7,r20
  811b10:	1d06d83a 	srl	r3,r3,r20
  811b14:	11c4b03a 	or	r2,r2,r7
  811b18:	003f9306 	br	811968 <__alt_mem_onchip_mem+0xff809968>
  811b1c:	9ca6983a 	sll	r19,r19,r18
  811b20:	88e8d83a 	srl	r20,r17,r3
  811b24:	80c4d83a 	srl	r2,r16,r3
  811b28:	982cd43a 	srli	r22,r19,16
  811b2c:	8ca2983a 	sll	r17,r17,r18
  811b30:	a009883a 	mov	r4,r20
  811b34:	b00b883a 	mov	r5,r22
  811b38:	1478b03a 	or	fp,r2,r17
  811b3c:	0811d940 	call	811d94 <__umodsi3>
  811b40:	a009883a 	mov	r4,r20
  811b44:	b00b883a 	mov	r5,r22
  811b48:	1023883a 	mov	r17,r2
  811b4c:	0811d300 	call	811d30 <__udivsi3>
  811b50:	9d7fffcc 	andi	r21,r19,65535
  811b54:	880a943a 	slli	r5,r17,16
  811b58:	e008d43a 	srli	r4,fp,16
  811b5c:	a885383a 	mul	r2,r21,r2
  811b60:	84a8983a 	sll	r20,r16,r18
  811b64:	2148b03a 	or	r4,r4,r5
  811b68:	2080042e 	bgeu	r4,r2,811b7c <__umoddi3+0x47c>
  811b6c:	24c9883a 	add	r4,r4,r19
  811b70:	24c00236 	bltu	r4,r19,811b7c <__umoddi3+0x47c>
  811b74:	2080012e 	bgeu	r4,r2,811b7c <__umoddi3+0x47c>
  811b78:	24c9883a 	add	r4,r4,r19
  811b7c:	20a3c83a 	sub	r17,r4,r2
  811b80:	b00b883a 	mov	r5,r22
  811b84:	8809883a 	mov	r4,r17
  811b88:	0811d940 	call	811d94 <__umodsi3>
  811b8c:	102f883a 	mov	r23,r2
  811b90:	8809883a 	mov	r4,r17
  811b94:	b00b883a 	mov	r5,r22
  811b98:	0811d300 	call	811d30 <__udivsi3>
  811b9c:	b82e943a 	slli	r23,r23,16
  811ba0:	a885383a 	mul	r2,r21,r2
  811ba4:	e13fffcc 	andi	r4,fp,65535
  811ba8:	25c8b03a 	or	r4,r4,r23
  811bac:	2080042e 	bgeu	r4,r2,811bc0 <__umoddi3+0x4c0>
  811bb0:	24c9883a 	add	r4,r4,r19
  811bb4:	24c00236 	bltu	r4,r19,811bc0 <__umoddi3+0x4c0>
  811bb8:	2080012e 	bgeu	r4,r2,811bc0 <__umoddi3+0x4c0>
  811bbc:	24c9883a 	add	r4,r4,r19
  811bc0:	20a3c83a 	sub	r17,r4,r2
  811bc4:	003f4806 	br	8118e8 <__alt_mem_onchip_mem+0xff8098e8>
  811bc8:	2c8fc83a 	sub	r7,r5,r18
  811bcc:	1545c83a 	sub	r2,r2,r21
  811bd0:	29cb803a 	cmpltu	r5,r5,r7
  811bd4:	1145c83a 	sub	r2,r2,r5
  811bd8:	4089c83a 	sub	r4,r8,r2
  811bdc:	003fc706 	br	811afc <__alt_mem_onchip_mem+0xff809afc>
  811be0:	01000604 	movi	r4,24
  811be4:	003f1806 	br	811848 <__alt_mem_onchip_mem+0xff809848>
  811be8:	00800604 	movi	r2,24
  811bec:	003f3206 	br	8118b8 <__alt_mem_onchip_mem+0xff8098b8>
  811bf0:	01000604 	movi	r4,24
  811bf4:	003ed906 	br	81175c <__alt_mem_onchip_mem+0xff80975c>
  811bf8:	413fa52e 	bgeu	r8,r4,811a90 <__alt_mem_onchip_mem+0xff809a90>
  811bfc:	297fff84 	addi	r5,r5,-2
  811c00:	4551883a 	add	r8,r8,r21
  811c04:	003fa306 	br	811a94 <__alt_mem_onchip_mem+0xff809a94>
  811c08:	15ff8b2e 	bgeu	r2,r23,811a38 <__alt_mem_onchip_mem+0xff809a38>
  811c0c:	31bfff84 	addi	r6,r6,-2
  811c10:	1545883a 	add	r2,r2,r21
  811c14:	003f8906 	br	811a3c <__alt_mem_onchip_mem+0xff809a3c>
  811c18:	24c9883a 	add	r4,r4,r19
  811c1c:	003eee06 	br	8117d8 <__alt_mem_onchip_mem+0xff8097d8>
  811c20:	8005883a 	mov	r2,r16
  811c24:	003f1706 	br	811884 <__alt_mem_onchip_mem+0xff809884>
  811c28:	817fe736 	bltu	r16,r5,811bc8 <__alt_mem_onchip_mem+0xff809bc8>
  811c2c:	280f883a 	mov	r7,r5
  811c30:	0009883a 	mov	r4,zero
  811c34:	003fb106 	br	811afc <__alt_mem_onchip_mem+0xff809afc>

00811c38 <__divsi3>:
  811c38:	20001b16 	blt	r4,zero,811ca8 <__divsi3+0x70>
  811c3c:	000f883a 	mov	r7,zero
  811c40:	28001616 	blt	r5,zero,811c9c <__divsi3+0x64>
  811c44:	200d883a 	mov	r6,r4
  811c48:	29001a2e 	bgeu	r5,r4,811cb4 <__divsi3+0x7c>
  811c4c:	00800804 	movi	r2,32
  811c50:	00c00044 	movi	r3,1
  811c54:	00000106 	br	811c5c <__divsi3+0x24>
  811c58:	10000d26 	beq	r2,zero,811c90 <__divsi3+0x58>
  811c5c:	294b883a 	add	r5,r5,r5
  811c60:	10bfffc4 	addi	r2,r2,-1
  811c64:	18c7883a 	add	r3,r3,r3
  811c68:	293ffb36 	bltu	r5,r4,811c58 <__alt_mem_onchip_mem+0xff809c58>
  811c6c:	0005883a 	mov	r2,zero
  811c70:	18000726 	beq	r3,zero,811c90 <__divsi3+0x58>
  811c74:	0005883a 	mov	r2,zero
  811c78:	31400236 	bltu	r6,r5,811c84 <__divsi3+0x4c>
  811c7c:	314dc83a 	sub	r6,r6,r5
  811c80:	10c4b03a 	or	r2,r2,r3
  811c84:	1806d07a 	srli	r3,r3,1
  811c88:	280ad07a 	srli	r5,r5,1
  811c8c:	183ffa1e 	bne	r3,zero,811c78 <__alt_mem_onchip_mem+0xff809c78>
  811c90:	38000126 	beq	r7,zero,811c98 <__divsi3+0x60>
  811c94:	0085c83a 	sub	r2,zero,r2
  811c98:	f800283a 	ret
  811c9c:	014bc83a 	sub	r5,zero,r5
  811ca0:	39c0005c 	xori	r7,r7,1
  811ca4:	003fe706 	br	811c44 <__alt_mem_onchip_mem+0xff809c44>
  811ca8:	0109c83a 	sub	r4,zero,r4
  811cac:	01c00044 	movi	r7,1
  811cb0:	003fe306 	br	811c40 <__alt_mem_onchip_mem+0xff809c40>
  811cb4:	00c00044 	movi	r3,1
  811cb8:	003fee06 	br	811c74 <__alt_mem_onchip_mem+0xff809c74>

00811cbc <__modsi3>:
  811cbc:	20001716 	blt	r4,zero,811d1c <__modsi3+0x60>
  811cc0:	000f883a 	mov	r7,zero
  811cc4:	2005883a 	mov	r2,r4
  811cc8:	28001216 	blt	r5,zero,811d14 <__modsi3+0x58>
  811ccc:	2900162e 	bgeu	r5,r4,811d28 <__modsi3+0x6c>
  811cd0:	01800804 	movi	r6,32
  811cd4:	00c00044 	movi	r3,1
  811cd8:	00000106 	br	811ce0 <__modsi3+0x24>
  811cdc:	30000a26 	beq	r6,zero,811d08 <__modsi3+0x4c>
  811ce0:	294b883a 	add	r5,r5,r5
  811ce4:	31bfffc4 	addi	r6,r6,-1
  811ce8:	18c7883a 	add	r3,r3,r3
  811cec:	293ffb36 	bltu	r5,r4,811cdc <__alt_mem_onchip_mem+0xff809cdc>
  811cf0:	18000526 	beq	r3,zero,811d08 <__modsi3+0x4c>
  811cf4:	1806d07a 	srli	r3,r3,1
  811cf8:	11400136 	bltu	r2,r5,811d00 <__modsi3+0x44>
  811cfc:	1145c83a 	sub	r2,r2,r5
  811d00:	280ad07a 	srli	r5,r5,1
  811d04:	183ffb1e 	bne	r3,zero,811cf4 <__alt_mem_onchip_mem+0xff809cf4>
  811d08:	38000126 	beq	r7,zero,811d10 <__modsi3+0x54>
  811d0c:	0085c83a 	sub	r2,zero,r2
  811d10:	f800283a 	ret
  811d14:	014bc83a 	sub	r5,zero,r5
  811d18:	003fec06 	br	811ccc <__alt_mem_onchip_mem+0xff809ccc>
  811d1c:	0109c83a 	sub	r4,zero,r4
  811d20:	01c00044 	movi	r7,1
  811d24:	003fe706 	br	811cc4 <__alt_mem_onchip_mem+0xff809cc4>
  811d28:	00c00044 	movi	r3,1
  811d2c:	003ff106 	br	811cf4 <__alt_mem_onchip_mem+0xff809cf4>

00811d30 <__udivsi3>:
  811d30:	200d883a 	mov	r6,r4
  811d34:	2900152e 	bgeu	r5,r4,811d8c <__udivsi3+0x5c>
  811d38:	28001416 	blt	r5,zero,811d8c <__udivsi3+0x5c>
  811d3c:	00800804 	movi	r2,32
  811d40:	00c00044 	movi	r3,1
  811d44:	00000206 	br	811d50 <__udivsi3+0x20>
  811d48:	10000e26 	beq	r2,zero,811d84 <__udivsi3+0x54>
  811d4c:	28000516 	blt	r5,zero,811d64 <__udivsi3+0x34>
  811d50:	294b883a 	add	r5,r5,r5
  811d54:	10bfffc4 	addi	r2,r2,-1
  811d58:	18c7883a 	add	r3,r3,r3
  811d5c:	293ffa36 	bltu	r5,r4,811d48 <__alt_mem_onchip_mem+0xff809d48>
  811d60:	18000826 	beq	r3,zero,811d84 <__udivsi3+0x54>
  811d64:	0005883a 	mov	r2,zero
  811d68:	31400236 	bltu	r6,r5,811d74 <__udivsi3+0x44>
  811d6c:	314dc83a 	sub	r6,r6,r5
  811d70:	10c4b03a 	or	r2,r2,r3
  811d74:	1806d07a 	srli	r3,r3,1
  811d78:	280ad07a 	srli	r5,r5,1
  811d7c:	183ffa1e 	bne	r3,zero,811d68 <__alt_mem_onchip_mem+0xff809d68>
  811d80:	f800283a 	ret
  811d84:	0005883a 	mov	r2,zero
  811d88:	f800283a 	ret
  811d8c:	00c00044 	movi	r3,1
  811d90:	003ff406 	br	811d64 <__alt_mem_onchip_mem+0xff809d64>

00811d94 <__umodsi3>:
  811d94:	2005883a 	mov	r2,r4
  811d98:	2900122e 	bgeu	r5,r4,811de4 <__umodsi3+0x50>
  811d9c:	28001116 	blt	r5,zero,811de4 <__umodsi3+0x50>
  811da0:	01800804 	movi	r6,32
  811da4:	00c00044 	movi	r3,1
  811da8:	00000206 	br	811db4 <__umodsi3+0x20>
  811dac:	30000c26 	beq	r6,zero,811de0 <__umodsi3+0x4c>
  811db0:	28000516 	blt	r5,zero,811dc8 <__umodsi3+0x34>
  811db4:	294b883a 	add	r5,r5,r5
  811db8:	31bfffc4 	addi	r6,r6,-1
  811dbc:	18c7883a 	add	r3,r3,r3
  811dc0:	293ffa36 	bltu	r5,r4,811dac <__alt_mem_onchip_mem+0xff809dac>
  811dc4:	18000626 	beq	r3,zero,811de0 <__umodsi3+0x4c>
  811dc8:	1806d07a 	srli	r3,r3,1
  811dcc:	11400136 	bltu	r2,r5,811dd4 <__umodsi3+0x40>
  811dd0:	1145c83a 	sub	r2,r2,r5
  811dd4:	280ad07a 	srli	r5,r5,1
  811dd8:	183ffb1e 	bne	r3,zero,811dc8 <__alt_mem_onchip_mem+0xff809dc8>
  811ddc:	f800283a 	ret
  811de0:	f800283a 	ret
  811de4:	00c00044 	movi	r3,1
  811de8:	003ff706 	br	811dc8 <__alt_mem_onchip_mem+0xff809dc8>

00811dec <__divdf3>:
  811dec:	defff204 	addi	sp,sp,-56
  811df0:	dd400915 	stw	r21,36(sp)
  811df4:	282ad53a 	srli	r21,r5,20
  811df8:	dd000815 	stw	r20,32(sp)
  811dfc:	2828d7fa 	srli	r20,r5,31
  811e00:	dc000415 	stw	r16,16(sp)
  811e04:	04000434 	movhi	r16,16
  811e08:	df000c15 	stw	fp,48(sp)
  811e0c:	843fffc4 	addi	r16,r16,-1
  811e10:	dfc00d15 	stw	ra,52(sp)
  811e14:	ddc00b15 	stw	r23,44(sp)
  811e18:	dd800a15 	stw	r22,40(sp)
  811e1c:	dcc00715 	stw	r19,28(sp)
  811e20:	dc800615 	stw	r18,24(sp)
  811e24:	dc400515 	stw	r17,20(sp)
  811e28:	ad41ffcc 	andi	r21,r21,2047
  811e2c:	2c20703a 	and	r16,r5,r16
  811e30:	a7003fcc 	andi	fp,r20,255
  811e34:	a8006126 	beq	r21,zero,811fbc <__divdf3+0x1d0>
  811e38:	0081ffc4 	movi	r2,2047
  811e3c:	2025883a 	mov	r18,r4
  811e40:	a8803726 	beq	r21,r2,811f20 <__divdf3+0x134>
  811e44:	80800434 	orhi	r2,r16,16
  811e48:	100490fa 	slli	r2,r2,3
  811e4c:	2020d77a 	srli	r16,r4,29
  811e50:	202490fa 	slli	r18,r4,3
  811e54:	ad7f0044 	addi	r21,r21,-1023
  811e58:	80a0b03a 	or	r16,r16,r2
  811e5c:	0027883a 	mov	r19,zero
  811e60:	0013883a 	mov	r9,zero
  811e64:	3804d53a 	srli	r2,r7,20
  811e68:	382cd7fa 	srli	r22,r7,31
  811e6c:	04400434 	movhi	r17,16
  811e70:	8c7fffc4 	addi	r17,r17,-1
  811e74:	1081ffcc 	andi	r2,r2,2047
  811e78:	3011883a 	mov	r8,r6
  811e7c:	3c62703a 	and	r17,r7,r17
  811e80:	b5c03fcc 	andi	r23,r22,255
  811e84:	10006c26 	beq	r2,zero,812038 <__divdf3+0x24c>
  811e88:	00c1ffc4 	movi	r3,2047
  811e8c:	10c06426 	beq	r2,r3,812020 <__divdf3+0x234>
  811e90:	88c00434 	orhi	r3,r17,16
  811e94:	180690fa 	slli	r3,r3,3
  811e98:	3022d77a 	srli	r17,r6,29
  811e9c:	301090fa 	slli	r8,r6,3
  811ea0:	10bf0044 	addi	r2,r2,-1023
  811ea4:	88e2b03a 	or	r17,r17,r3
  811ea8:	000f883a 	mov	r7,zero
  811eac:	a58cf03a 	xor	r6,r20,r22
  811eb0:	3cc8b03a 	or	r4,r7,r19
  811eb4:	a8abc83a 	sub	r21,r21,r2
  811eb8:	008003c4 	movi	r2,15
  811ebc:	3007883a 	mov	r3,r6
  811ec0:	34c03fcc 	andi	r19,r6,255
  811ec4:	11009036 	bltu	r2,r4,812108 <__divdf3+0x31c>
  811ec8:	200890ba 	slli	r4,r4,2
  811ecc:	00802074 	movhi	r2,129
  811ed0:	1087b804 	addi	r2,r2,7904
  811ed4:	2089883a 	add	r4,r4,r2
  811ed8:	20800017 	ldw	r2,0(r4)
  811edc:	1000683a 	jmp	r2
  811ee0:	00812108 	cmpgei	r2,zero,1156
  811ee4:	00811f58 	cmpnei	r2,zero,1149
  811ee8:	008120f8 	rdprs	r2,zero,1155
  811eec:	00811f4c 	andi	r2,zero,1149
  811ef0:	008120f8 	rdprs	r2,zero,1155
  811ef4:	008120cc 	andi	r2,zero,1155
  811ef8:	008120f8 	rdprs	r2,zero,1155
  811efc:	00811f4c 	andi	r2,zero,1149
  811f00:	00811f58 	cmpnei	r2,zero,1149
  811f04:	00811f58 	cmpnei	r2,zero,1149
  811f08:	008120cc 	andi	r2,zero,1155
  811f0c:	00811f4c 	andi	r2,zero,1149
  811f10:	00811f3c 	xorhi	r2,zero,1148
  811f14:	00811f3c 	xorhi	r2,zero,1148
  811f18:	00811f3c 	xorhi	r2,zero,1148
  811f1c:	008123ec 	andhi	r2,zero,1167
  811f20:	2404b03a 	or	r2,r4,r16
  811f24:	1000661e 	bne	r2,zero,8120c0 <__divdf3+0x2d4>
  811f28:	04c00204 	movi	r19,8
  811f2c:	0021883a 	mov	r16,zero
  811f30:	0025883a 	mov	r18,zero
  811f34:	02400084 	movi	r9,2
  811f38:	003fca06 	br	811e64 <__alt_mem_onchip_mem+0xff809e64>
  811f3c:	8023883a 	mov	r17,r16
  811f40:	9011883a 	mov	r8,r18
  811f44:	e02f883a 	mov	r23,fp
  811f48:	480f883a 	mov	r7,r9
  811f4c:	00800084 	movi	r2,2
  811f50:	3881311e 	bne	r7,r2,812418 <__divdf3+0x62c>
  811f54:	b827883a 	mov	r19,r23
  811f58:	98c0004c 	andi	r3,r19,1
  811f5c:	0081ffc4 	movi	r2,2047
  811f60:	000b883a 	mov	r5,zero
  811f64:	0025883a 	mov	r18,zero
  811f68:	1004953a 	slli	r2,r2,20
  811f6c:	18c03fcc 	andi	r3,r3,255
  811f70:	04400434 	movhi	r17,16
  811f74:	8c7fffc4 	addi	r17,r17,-1
  811f78:	180697fa 	slli	r3,r3,31
  811f7c:	2c4a703a 	and	r5,r5,r17
  811f80:	288ab03a 	or	r5,r5,r2
  811f84:	28c6b03a 	or	r3,r5,r3
  811f88:	9005883a 	mov	r2,r18
  811f8c:	dfc00d17 	ldw	ra,52(sp)
  811f90:	df000c17 	ldw	fp,48(sp)
  811f94:	ddc00b17 	ldw	r23,44(sp)
  811f98:	dd800a17 	ldw	r22,40(sp)
  811f9c:	dd400917 	ldw	r21,36(sp)
  811fa0:	dd000817 	ldw	r20,32(sp)
  811fa4:	dcc00717 	ldw	r19,28(sp)
  811fa8:	dc800617 	ldw	r18,24(sp)
  811fac:	dc400517 	ldw	r17,20(sp)
  811fb0:	dc000417 	ldw	r16,16(sp)
  811fb4:	dec00e04 	addi	sp,sp,56
  811fb8:	f800283a 	ret
  811fbc:	2404b03a 	or	r2,r4,r16
  811fc0:	2027883a 	mov	r19,r4
  811fc4:	10003926 	beq	r2,zero,8120ac <__divdf3+0x2c0>
  811fc8:	80012e26 	beq	r16,zero,812484 <__divdf3+0x698>
  811fcc:	8009883a 	mov	r4,r16
  811fd0:	d9800315 	stw	r6,12(sp)
  811fd4:	d9c00215 	stw	r7,8(sp)
  811fd8:	080705c0 	call	80705c <__clzsi2>
  811fdc:	d9800317 	ldw	r6,12(sp)
  811fe0:	d9c00217 	ldw	r7,8(sp)
  811fe4:	113ffd44 	addi	r4,r2,-11
  811fe8:	00c00704 	movi	r3,28
  811fec:	19012116 	blt	r3,r4,812474 <__divdf3+0x688>
  811ff0:	00c00744 	movi	r3,29
  811ff4:	147ffe04 	addi	r17,r2,-8
  811ff8:	1907c83a 	sub	r3,r3,r4
  811ffc:	8460983a 	sll	r16,r16,r17
  812000:	98c6d83a 	srl	r3,r19,r3
  812004:	9c64983a 	sll	r18,r19,r17
  812008:	1c20b03a 	or	r16,r3,r16
  81200c:	1080fcc4 	addi	r2,r2,1011
  812010:	00abc83a 	sub	r21,zero,r2
  812014:	0027883a 	mov	r19,zero
  812018:	0013883a 	mov	r9,zero
  81201c:	003f9106 	br	811e64 <__alt_mem_onchip_mem+0xff809e64>
  812020:	3446b03a 	or	r3,r6,r17
  812024:	18001f1e 	bne	r3,zero,8120a4 <__divdf3+0x2b8>
  812028:	0023883a 	mov	r17,zero
  81202c:	0011883a 	mov	r8,zero
  812030:	01c00084 	movi	r7,2
  812034:	003f9d06 	br	811eac <__alt_mem_onchip_mem+0xff809eac>
  812038:	3446b03a 	or	r3,r6,r17
  81203c:	18001526 	beq	r3,zero,812094 <__divdf3+0x2a8>
  812040:	88011b26 	beq	r17,zero,8124b0 <__divdf3+0x6c4>
  812044:	8809883a 	mov	r4,r17
  812048:	d9800315 	stw	r6,12(sp)
  81204c:	da400115 	stw	r9,4(sp)
  812050:	080705c0 	call	80705c <__clzsi2>
  812054:	d9800317 	ldw	r6,12(sp)
  812058:	da400117 	ldw	r9,4(sp)
  81205c:	113ffd44 	addi	r4,r2,-11
  812060:	00c00704 	movi	r3,28
  812064:	19010e16 	blt	r3,r4,8124a0 <__divdf3+0x6b4>
  812068:	00c00744 	movi	r3,29
  81206c:	123ffe04 	addi	r8,r2,-8
  812070:	1907c83a 	sub	r3,r3,r4
  812074:	8a22983a 	sll	r17,r17,r8
  812078:	30c6d83a 	srl	r3,r6,r3
  81207c:	3210983a 	sll	r8,r6,r8
  812080:	1c62b03a 	or	r17,r3,r17
  812084:	1080fcc4 	addi	r2,r2,1011
  812088:	0085c83a 	sub	r2,zero,r2
  81208c:	000f883a 	mov	r7,zero
  812090:	003f8606 	br	811eac <__alt_mem_onchip_mem+0xff809eac>
  812094:	0023883a 	mov	r17,zero
  812098:	0011883a 	mov	r8,zero
  81209c:	01c00044 	movi	r7,1
  8120a0:	003f8206 	br	811eac <__alt_mem_onchip_mem+0xff809eac>
  8120a4:	01c000c4 	movi	r7,3
  8120a8:	003f8006 	br	811eac <__alt_mem_onchip_mem+0xff809eac>
  8120ac:	04c00104 	movi	r19,4
  8120b0:	0021883a 	mov	r16,zero
  8120b4:	0025883a 	mov	r18,zero
  8120b8:	02400044 	movi	r9,1
  8120bc:	003f6906 	br	811e64 <__alt_mem_onchip_mem+0xff809e64>
  8120c0:	04c00304 	movi	r19,12
  8120c4:	024000c4 	movi	r9,3
  8120c8:	003f6606 	br	811e64 <__alt_mem_onchip_mem+0xff809e64>
  8120cc:	01400434 	movhi	r5,16
  8120d0:	0007883a 	mov	r3,zero
  8120d4:	297fffc4 	addi	r5,r5,-1
  8120d8:	04bfffc4 	movi	r18,-1
  8120dc:	0081ffc4 	movi	r2,2047
  8120e0:	003fa106 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  8120e4:	00c00044 	movi	r3,1
  8120e8:	1887c83a 	sub	r3,r3,r2
  8120ec:	01000e04 	movi	r4,56
  8120f0:	20c1210e 	bge	r4,r3,812578 <__divdf3+0x78c>
  8120f4:	98c0004c 	andi	r3,r19,1
  8120f8:	0005883a 	mov	r2,zero
  8120fc:	000b883a 	mov	r5,zero
  812100:	0025883a 	mov	r18,zero
  812104:	003f9806 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  812108:	8c00fd36 	bltu	r17,r16,812500 <__divdf3+0x714>
  81210c:	8440fb26 	beq	r16,r17,8124fc <__divdf3+0x710>
  812110:	8007883a 	mov	r3,r16
  812114:	ad7fffc4 	addi	r21,r21,-1
  812118:	0021883a 	mov	r16,zero
  81211c:	4004d63a 	srli	r2,r8,24
  812120:	8822923a 	slli	r17,r17,8
  812124:	1809883a 	mov	r4,r3
  812128:	402c923a 	slli	r22,r8,8
  81212c:	88b8b03a 	or	fp,r17,r2
  812130:	e028d43a 	srli	r20,fp,16
  812134:	d8c00015 	stw	r3,0(sp)
  812138:	e5ffffcc 	andi	r23,fp,65535
  81213c:	a00b883a 	mov	r5,r20
  812140:	0811d300 	call	811d30 <__udivsi3>
  812144:	d8c00017 	ldw	r3,0(sp)
  812148:	a00b883a 	mov	r5,r20
  81214c:	d8800315 	stw	r2,12(sp)
  812150:	1809883a 	mov	r4,r3
  812154:	0811d940 	call	811d94 <__umodsi3>
  812158:	d9800317 	ldw	r6,12(sp)
  81215c:	1006943a 	slli	r3,r2,16
  812160:	9004d43a 	srli	r2,r18,16
  812164:	b9a3383a 	mul	r17,r23,r6
  812168:	10c4b03a 	or	r2,r2,r3
  81216c:	1440062e 	bgeu	r2,r17,812188 <__divdf3+0x39c>
  812170:	1705883a 	add	r2,r2,fp
  812174:	30ffffc4 	addi	r3,r6,-1
  812178:	1700ee36 	bltu	r2,fp,812534 <__divdf3+0x748>
  81217c:	1440ed2e 	bgeu	r2,r17,812534 <__divdf3+0x748>
  812180:	31bfff84 	addi	r6,r6,-2
  812184:	1705883a 	add	r2,r2,fp
  812188:	1463c83a 	sub	r17,r2,r17
  81218c:	a00b883a 	mov	r5,r20
  812190:	8809883a 	mov	r4,r17
  812194:	d9800315 	stw	r6,12(sp)
  812198:	0811d300 	call	811d30 <__udivsi3>
  81219c:	a00b883a 	mov	r5,r20
  8121a0:	8809883a 	mov	r4,r17
  8121a4:	d8800215 	stw	r2,8(sp)
  8121a8:	0811d940 	call	811d94 <__umodsi3>
  8121ac:	d9c00217 	ldw	r7,8(sp)
  8121b0:	1004943a 	slli	r2,r2,16
  8121b4:	94bfffcc 	andi	r18,r18,65535
  8121b8:	b9d1383a 	mul	r8,r23,r7
  8121bc:	90a4b03a 	or	r18,r18,r2
  8121c0:	d9800317 	ldw	r6,12(sp)
  8121c4:	9200062e 	bgeu	r18,r8,8121e0 <__divdf3+0x3f4>
  8121c8:	9725883a 	add	r18,r18,fp
  8121cc:	38bfffc4 	addi	r2,r7,-1
  8121d0:	9700d636 	bltu	r18,fp,81252c <__divdf3+0x740>
  8121d4:	9200d52e 	bgeu	r18,r8,81252c <__divdf3+0x740>
  8121d8:	39ffff84 	addi	r7,r7,-2
  8121dc:	9725883a 	add	r18,r18,fp
  8121e0:	3004943a 	slli	r2,r6,16
  8121e4:	b012d43a 	srli	r9,r22,16
  8121e8:	b1bfffcc 	andi	r6,r22,65535
  8121ec:	11e2b03a 	or	r17,r2,r7
  8121f0:	8806d43a 	srli	r3,r17,16
  8121f4:	893fffcc 	andi	r4,r17,65535
  8121f8:	218b383a 	mul	r5,r4,r6
  8121fc:	30c5383a 	mul	r2,r6,r3
  812200:	2249383a 	mul	r4,r4,r9
  812204:	280ed43a 	srli	r7,r5,16
  812208:	9225c83a 	sub	r18,r18,r8
  81220c:	2089883a 	add	r4,r4,r2
  812210:	3909883a 	add	r4,r7,r4
  812214:	1a47383a 	mul	r3,r3,r9
  812218:	2080022e 	bgeu	r4,r2,812224 <__divdf3+0x438>
  81221c:	00800074 	movhi	r2,1
  812220:	1887883a 	add	r3,r3,r2
  812224:	2004d43a 	srli	r2,r4,16
  812228:	2008943a 	slli	r4,r4,16
  81222c:	297fffcc 	andi	r5,r5,65535
  812230:	10c7883a 	add	r3,r2,r3
  812234:	2149883a 	add	r4,r4,r5
  812238:	90c0a536 	bltu	r18,r3,8124d0 <__divdf3+0x6e4>
  81223c:	90c0bf26 	beq	r18,r3,81253c <__divdf3+0x750>
  812240:	90c7c83a 	sub	r3,r18,r3
  812244:	810fc83a 	sub	r7,r16,r4
  812248:	81e5803a 	cmpltu	r18,r16,r7
  81224c:	1ca5c83a 	sub	r18,r3,r18
  812250:	e480c126 	beq	fp,r18,812558 <__divdf3+0x76c>
  812254:	a00b883a 	mov	r5,r20
  812258:	9009883a 	mov	r4,r18
  81225c:	d9800315 	stw	r6,12(sp)
  812260:	d9c00215 	stw	r7,8(sp)
  812264:	da400115 	stw	r9,4(sp)
  812268:	0811d300 	call	811d30 <__udivsi3>
  81226c:	a00b883a 	mov	r5,r20
  812270:	9009883a 	mov	r4,r18
  812274:	d8800015 	stw	r2,0(sp)
  812278:	0811d940 	call	811d94 <__umodsi3>
  81227c:	d9c00217 	ldw	r7,8(sp)
  812280:	da000017 	ldw	r8,0(sp)
  812284:	1006943a 	slli	r3,r2,16
  812288:	3804d43a 	srli	r2,r7,16
  81228c:	ba21383a 	mul	r16,r23,r8
  812290:	d9800317 	ldw	r6,12(sp)
  812294:	10c4b03a 	or	r2,r2,r3
  812298:	da400117 	ldw	r9,4(sp)
  81229c:	1400062e 	bgeu	r2,r16,8122b8 <__divdf3+0x4cc>
  8122a0:	1705883a 	add	r2,r2,fp
  8122a4:	40ffffc4 	addi	r3,r8,-1
  8122a8:	1700ad36 	bltu	r2,fp,812560 <__divdf3+0x774>
  8122ac:	1400ac2e 	bgeu	r2,r16,812560 <__divdf3+0x774>
  8122b0:	423fff84 	addi	r8,r8,-2
  8122b4:	1705883a 	add	r2,r2,fp
  8122b8:	1421c83a 	sub	r16,r2,r16
  8122bc:	a00b883a 	mov	r5,r20
  8122c0:	8009883a 	mov	r4,r16
  8122c4:	d9800315 	stw	r6,12(sp)
  8122c8:	d9c00215 	stw	r7,8(sp)
  8122cc:	da000015 	stw	r8,0(sp)
  8122d0:	da400115 	stw	r9,4(sp)
  8122d4:	0811d300 	call	811d30 <__udivsi3>
  8122d8:	8009883a 	mov	r4,r16
  8122dc:	a00b883a 	mov	r5,r20
  8122e0:	1025883a 	mov	r18,r2
  8122e4:	0811d940 	call	811d94 <__umodsi3>
  8122e8:	d9c00217 	ldw	r7,8(sp)
  8122ec:	1004943a 	slli	r2,r2,16
  8122f0:	bcaf383a 	mul	r23,r23,r18
  8122f4:	393fffcc 	andi	r4,r7,65535
  8122f8:	2088b03a 	or	r4,r4,r2
  8122fc:	d9800317 	ldw	r6,12(sp)
  812300:	da000017 	ldw	r8,0(sp)
  812304:	da400117 	ldw	r9,4(sp)
  812308:	25c0062e 	bgeu	r4,r23,812324 <__divdf3+0x538>
  81230c:	2709883a 	add	r4,r4,fp
  812310:	90bfffc4 	addi	r2,r18,-1
  812314:	27009436 	bltu	r4,fp,812568 <__divdf3+0x77c>
  812318:	25c0932e 	bgeu	r4,r23,812568 <__divdf3+0x77c>
  81231c:	94bfff84 	addi	r18,r18,-2
  812320:	2709883a 	add	r4,r4,fp
  812324:	4004943a 	slli	r2,r8,16
  812328:	25efc83a 	sub	r23,r4,r23
  81232c:	1490b03a 	or	r8,r2,r18
  812330:	4008d43a 	srli	r4,r8,16
  812334:	40ffffcc 	andi	r3,r8,65535
  812338:	30c5383a 	mul	r2,r6,r3
  81233c:	1a47383a 	mul	r3,r3,r9
  812340:	310d383a 	mul	r6,r6,r4
  812344:	100ad43a 	srli	r5,r2,16
  812348:	4913383a 	mul	r9,r9,r4
  81234c:	1987883a 	add	r3,r3,r6
  812350:	28c7883a 	add	r3,r5,r3
  812354:	1980022e 	bgeu	r3,r6,812360 <__divdf3+0x574>
  812358:	01000074 	movhi	r4,1
  81235c:	4913883a 	add	r9,r9,r4
  812360:	1808d43a 	srli	r4,r3,16
  812364:	1806943a 	slli	r3,r3,16
  812368:	10bfffcc 	andi	r2,r2,65535
  81236c:	2253883a 	add	r9,r4,r9
  812370:	1887883a 	add	r3,r3,r2
  812374:	ba403836 	bltu	r23,r9,812458 <__divdf3+0x66c>
  812378:	ba403626 	beq	r23,r9,812454 <__divdf3+0x668>
  81237c:	42000054 	ori	r8,r8,1
  812380:	a880ffc4 	addi	r2,r21,1023
  812384:	00bf570e 	bge	zero,r2,8120e4 <__alt_mem_onchip_mem+0xff80a0e4>
  812388:	40c001cc 	andi	r3,r8,7
  81238c:	18000726 	beq	r3,zero,8123ac <__divdf3+0x5c0>
  812390:	40c003cc 	andi	r3,r8,15
  812394:	01000104 	movi	r4,4
  812398:	19000426 	beq	r3,r4,8123ac <__divdf3+0x5c0>
  81239c:	4107883a 	add	r3,r8,r4
  8123a0:	1a11803a 	cmpltu	r8,r3,r8
  8123a4:	8a23883a 	add	r17,r17,r8
  8123a8:	1811883a 	mov	r8,r3
  8123ac:	88c0402c 	andhi	r3,r17,256
  8123b0:	18000426 	beq	r3,zero,8123c4 <__divdf3+0x5d8>
  8123b4:	00ffc034 	movhi	r3,65280
  8123b8:	18ffffc4 	addi	r3,r3,-1
  8123bc:	a8810004 	addi	r2,r21,1024
  8123c0:	88e2703a 	and	r17,r17,r3
  8123c4:	00c1ff84 	movi	r3,2046
  8123c8:	18bee316 	blt	r3,r2,811f58 <__alt_mem_onchip_mem+0xff809f58>
  8123cc:	8824977a 	slli	r18,r17,29
  8123d0:	4010d0fa 	srli	r8,r8,3
  8123d4:	8822927a 	slli	r17,r17,9
  8123d8:	1081ffcc 	andi	r2,r2,2047
  8123dc:	9224b03a 	or	r18,r18,r8
  8123e0:	880ad33a 	srli	r5,r17,12
  8123e4:	98c0004c 	andi	r3,r19,1
  8123e8:	003edf06 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  8123ec:	8080022c 	andhi	r2,r16,8
  8123f0:	10001226 	beq	r2,zero,81243c <__divdf3+0x650>
  8123f4:	8880022c 	andhi	r2,r17,8
  8123f8:	1000101e 	bne	r2,zero,81243c <__divdf3+0x650>
  8123fc:	00800434 	movhi	r2,16
  812400:	89400234 	orhi	r5,r17,8
  812404:	10bfffc4 	addi	r2,r2,-1
  812408:	b007883a 	mov	r3,r22
  81240c:	288a703a 	and	r5,r5,r2
  812410:	4025883a 	mov	r18,r8
  812414:	003f3106 	br	8120dc <__alt_mem_onchip_mem+0xff80a0dc>
  812418:	008000c4 	movi	r2,3
  81241c:	3880a626 	beq	r7,r2,8126b8 <__divdf3+0x8cc>
  812420:	00800044 	movi	r2,1
  812424:	3880521e 	bne	r7,r2,812570 <__divdf3+0x784>
  812428:	b807883a 	mov	r3,r23
  81242c:	0005883a 	mov	r2,zero
  812430:	000b883a 	mov	r5,zero
  812434:	0025883a 	mov	r18,zero
  812438:	003ecb06 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  81243c:	00800434 	movhi	r2,16
  812440:	81400234 	orhi	r5,r16,8
  812444:	10bfffc4 	addi	r2,r2,-1
  812448:	a007883a 	mov	r3,r20
  81244c:	288a703a 	and	r5,r5,r2
  812450:	003f2206 	br	8120dc <__alt_mem_onchip_mem+0xff80a0dc>
  812454:	183fca26 	beq	r3,zero,812380 <__alt_mem_onchip_mem+0xff80a380>
  812458:	e5ef883a 	add	r23,fp,r23
  81245c:	40bfffc4 	addi	r2,r8,-1
  812460:	bf00392e 	bgeu	r23,fp,812548 <__divdf3+0x75c>
  812464:	1011883a 	mov	r8,r2
  812468:	ba7fc41e 	bne	r23,r9,81237c <__alt_mem_onchip_mem+0xff80a37c>
  81246c:	b0ffc31e 	bne	r22,r3,81237c <__alt_mem_onchip_mem+0xff80a37c>
  812470:	003fc306 	br	812380 <__alt_mem_onchip_mem+0xff80a380>
  812474:	143ff604 	addi	r16,r2,-40
  812478:	9c20983a 	sll	r16,r19,r16
  81247c:	0025883a 	mov	r18,zero
  812480:	003ee206 	br	81200c <__alt_mem_onchip_mem+0xff80a00c>
  812484:	d9800315 	stw	r6,12(sp)
  812488:	d9c00215 	stw	r7,8(sp)
  81248c:	080705c0 	call	80705c <__clzsi2>
  812490:	10800804 	addi	r2,r2,32
  812494:	d9c00217 	ldw	r7,8(sp)
  812498:	d9800317 	ldw	r6,12(sp)
  81249c:	003ed106 	br	811fe4 <__alt_mem_onchip_mem+0xff809fe4>
  8124a0:	147ff604 	addi	r17,r2,-40
  8124a4:	3462983a 	sll	r17,r6,r17
  8124a8:	0011883a 	mov	r8,zero
  8124ac:	003ef506 	br	812084 <__alt_mem_onchip_mem+0xff80a084>
  8124b0:	3009883a 	mov	r4,r6
  8124b4:	d9800315 	stw	r6,12(sp)
  8124b8:	da400115 	stw	r9,4(sp)
  8124bc:	080705c0 	call	80705c <__clzsi2>
  8124c0:	10800804 	addi	r2,r2,32
  8124c4:	da400117 	ldw	r9,4(sp)
  8124c8:	d9800317 	ldw	r6,12(sp)
  8124cc:	003ee306 	br	81205c <__alt_mem_onchip_mem+0xff80a05c>
  8124d0:	85a1883a 	add	r16,r16,r22
  8124d4:	8585803a 	cmpltu	r2,r16,r22
  8124d8:	1705883a 	add	r2,r2,fp
  8124dc:	14a5883a 	add	r18,r2,r18
  8124e0:	88bfffc4 	addi	r2,r17,-1
  8124e4:	e4800c2e 	bgeu	fp,r18,812518 <__divdf3+0x72c>
  8124e8:	90c03e36 	bltu	r18,r3,8125e4 <__divdf3+0x7f8>
  8124ec:	1c806926 	beq	r3,r18,812694 <__divdf3+0x8a8>
  8124f0:	90c7c83a 	sub	r3,r18,r3
  8124f4:	1023883a 	mov	r17,r2
  8124f8:	003f5206 	br	812244 <__alt_mem_onchip_mem+0xff80a244>
  8124fc:	923f0436 	bltu	r18,r8,812110 <__alt_mem_onchip_mem+0xff80a110>
  812500:	800897fa 	slli	r4,r16,31
  812504:	9004d07a 	srli	r2,r18,1
  812508:	8006d07a 	srli	r3,r16,1
  81250c:	902097fa 	slli	r16,r18,31
  812510:	20a4b03a 	or	r18,r4,r2
  812514:	003f0106 	br	81211c <__alt_mem_onchip_mem+0xff80a11c>
  812518:	e4bff51e 	bne	fp,r18,8124f0 <__alt_mem_onchip_mem+0xff80a4f0>
  81251c:	85bff22e 	bgeu	r16,r22,8124e8 <__alt_mem_onchip_mem+0xff80a4e8>
  812520:	e0c7c83a 	sub	r3,fp,r3
  812524:	1023883a 	mov	r17,r2
  812528:	003f4606 	br	812244 <__alt_mem_onchip_mem+0xff80a244>
  81252c:	100f883a 	mov	r7,r2
  812530:	003f2b06 	br	8121e0 <__alt_mem_onchip_mem+0xff80a1e0>
  812534:	180d883a 	mov	r6,r3
  812538:	003f1306 	br	812188 <__alt_mem_onchip_mem+0xff80a188>
  81253c:	813fe436 	bltu	r16,r4,8124d0 <__alt_mem_onchip_mem+0xff80a4d0>
  812540:	0007883a 	mov	r3,zero
  812544:	003f3f06 	br	812244 <__alt_mem_onchip_mem+0xff80a244>
  812548:	ba402c36 	bltu	r23,r9,8125fc <__divdf3+0x810>
  81254c:	4dc05426 	beq	r9,r23,8126a0 <__divdf3+0x8b4>
  812550:	1011883a 	mov	r8,r2
  812554:	003f8906 	br	81237c <__alt_mem_onchip_mem+0xff80a37c>
  812558:	023fffc4 	movi	r8,-1
  81255c:	003f8806 	br	812380 <__alt_mem_onchip_mem+0xff80a380>
  812560:	1811883a 	mov	r8,r3
  812564:	003f5406 	br	8122b8 <__alt_mem_onchip_mem+0xff80a2b8>
  812568:	1025883a 	mov	r18,r2
  81256c:	003f6d06 	br	812324 <__alt_mem_onchip_mem+0xff80a324>
  812570:	b827883a 	mov	r19,r23
  812574:	003f8206 	br	812380 <__alt_mem_onchip_mem+0xff80a380>
  812578:	010007c4 	movi	r4,31
  81257c:	20c02616 	blt	r4,r3,812618 <__divdf3+0x82c>
  812580:	00800804 	movi	r2,32
  812584:	10c5c83a 	sub	r2,r2,r3
  812588:	888a983a 	sll	r5,r17,r2
  81258c:	40c8d83a 	srl	r4,r8,r3
  812590:	4084983a 	sll	r2,r8,r2
  812594:	88e2d83a 	srl	r17,r17,r3
  812598:	2906b03a 	or	r3,r5,r4
  81259c:	1004c03a 	cmpne	r2,r2,zero
  8125a0:	1886b03a 	or	r3,r3,r2
  8125a4:	188001cc 	andi	r2,r3,7
  8125a8:	10000726 	beq	r2,zero,8125c8 <__divdf3+0x7dc>
  8125ac:	188003cc 	andi	r2,r3,15
  8125b0:	01000104 	movi	r4,4
  8125b4:	11000426 	beq	r2,r4,8125c8 <__divdf3+0x7dc>
  8125b8:	1805883a 	mov	r2,r3
  8125bc:	10c00104 	addi	r3,r2,4
  8125c0:	1885803a 	cmpltu	r2,r3,r2
  8125c4:	88a3883a 	add	r17,r17,r2
  8125c8:	8880202c 	andhi	r2,r17,128
  8125cc:	10002726 	beq	r2,zero,81266c <__divdf3+0x880>
  8125d0:	98c0004c 	andi	r3,r19,1
  8125d4:	00800044 	movi	r2,1
  8125d8:	000b883a 	mov	r5,zero
  8125dc:	0025883a 	mov	r18,zero
  8125e0:	003e6106 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  8125e4:	85a1883a 	add	r16,r16,r22
  8125e8:	8585803a 	cmpltu	r2,r16,r22
  8125ec:	1705883a 	add	r2,r2,fp
  8125f0:	14a5883a 	add	r18,r2,r18
  8125f4:	8c7fff84 	addi	r17,r17,-2
  8125f8:	003f1106 	br	812240 <__alt_mem_onchip_mem+0xff80a240>
  8125fc:	b589883a 	add	r4,r22,r22
  812600:	25ad803a 	cmpltu	r22,r4,r22
  812604:	b739883a 	add	fp,r22,fp
  812608:	40bfff84 	addi	r2,r8,-2
  81260c:	bf2f883a 	add	r23,r23,fp
  812610:	202d883a 	mov	r22,r4
  812614:	003f9306 	br	812464 <__alt_mem_onchip_mem+0xff80a464>
  812618:	013ff844 	movi	r4,-31
  81261c:	2085c83a 	sub	r2,r4,r2
  812620:	8888d83a 	srl	r4,r17,r2
  812624:	00800804 	movi	r2,32
  812628:	18802126 	beq	r3,r2,8126b0 <__divdf3+0x8c4>
  81262c:	00801004 	movi	r2,64
  812630:	10c5c83a 	sub	r2,r2,r3
  812634:	8884983a 	sll	r2,r17,r2
  812638:	1204b03a 	or	r2,r2,r8
  81263c:	1004c03a 	cmpne	r2,r2,zero
  812640:	2084b03a 	or	r2,r4,r2
  812644:	144001cc 	andi	r17,r2,7
  812648:	88000d1e 	bne	r17,zero,812680 <__divdf3+0x894>
  81264c:	000b883a 	mov	r5,zero
  812650:	1024d0fa 	srli	r18,r2,3
  812654:	98c0004c 	andi	r3,r19,1
  812658:	0005883a 	mov	r2,zero
  81265c:	9464b03a 	or	r18,r18,r17
  812660:	003e4106 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  812664:	1007883a 	mov	r3,r2
  812668:	0023883a 	mov	r17,zero
  81266c:	880a927a 	slli	r5,r17,9
  812670:	1805883a 	mov	r2,r3
  812674:	8822977a 	slli	r17,r17,29
  812678:	280ad33a 	srli	r5,r5,12
  81267c:	003ff406 	br	812650 <__alt_mem_onchip_mem+0xff80a650>
  812680:	10c003cc 	andi	r3,r2,15
  812684:	01000104 	movi	r4,4
  812688:	193ff626 	beq	r3,r4,812664 <__alt_mem_onchip_mem+0xff80a664>
  81268c:	0023883a 	mov	r17,zero
  812690:	003fca06 	br	8125bc <__alt_mem_onchip_mem+0xff80a5bc>
  812694:	813fd336 	bltu	r16,r4,8125e4 <__alt_mem_onchip_mem+0xff80a5e4>
  812698:	1023883a 	mov	r17,r2
  81269c:	003fa806 	br	812540 <__alt_mem_onchip_mem+0xff80a540>
  8126a0:	b0ffd636 	bltu	r22,r3,8125fc <__alt_mem_onchip_mem+0xff80a5fc>
  8126a4:	1011883a 	mov	r8,r2
  8126a8:	b0ff341e 	bne	r22,r3,81237c <__alt_mem_onchip_mem+0xff80a37c>
  8126ac:	003f3406 	br	812380 <__alt_mem_onchip_mem+0xff80a380>
  8126b0:	0005883a 	mov	r2,zero
  8126b4:	003fe006 	br	812638 <__alt_mem_onchip_mem+0xff80a638>
  8126b8:	00800434 	movhi	r2,16
  8126bc:	89400234 	orhi	r5,r17,8
  8126c0:	10bfffc4 	addi	r2,r2,-1
  8126c4:	b807883a 	mov	r3,r23
  8126c8:	288a703a 	and	r5,r5,r2
  8126cc:	4025883a 	mov	r18,r8
  8126d0:	003e8206 	br	8120dc <__alt_mem_onchip_mem+0xff80a0dc>

008126d4 <__eqdf2>:
  8126d4:	2804d53a 	srli	r2,r5,20
  8126d8:	3806d53a 	srli	r3,r7,20
  8126dc:	02000434 	movhi	r8,16
  8126e0:	423fffc4 	addi	r8,r8,-1
  8126e4:	1081ffcc 	andi	r2,r2,2047
  8126e8:	0281ffc4 	movi	r10,2047
  8126ec:	2a12703a 	and	r9,r5,r8
  8126f0:	18c1ffcc 	andi	r3,r3,2047
  8126f4:	3a10703a 	and	r8,r7,r8
  8126f8:	280ad7fa 	srli	r5,r5,31
  8126fc:	380ed7fa 	srli	r7,r7,31
  812700:	12801026 	beq	r2,r10,812744 <__eqdf2+0x70>
  812704:	0281ffc4 	movi	r10,2047
  812708:	1a800a26 	beq	r3,r10,812734 <__eqdf2+0x60>
  81270c:	10c00226 	beq	r2,r3,812718 <__eqdf2+0x44>
  812710:	00800044 	movi	r2,1
  812714:	f800283a 	ret
  812718:	4a3ffd1e 	bne	r9,r8,812710 <__alt_mem_onchip_mem+0xff80a710>
  81271c:	21bffc1e 	bne	r4,r6,812710 <__alt_mem_onchip_mem+0xff80a710>
  812720:	29c00c26 	beq	r5,r7,812754 <__eqdf2+0x80>
  812724:	103ffa1e 	bne	r2,zero,812710 <__alt_mem_onchip_mem+0xff80a710>
  812728:	2244b03a 	or	r2,r4,r9
  81272c:	1004c03a 	cmpne	r2,r2,zero
  812730:	f800283a 	ret
  812734:	3214b03a 	or	r10,r6,r8
  812738:	503ff426 	beq	r10,zero,81270c <__alt_mem_onchip_mem+0xff80a70c>
  81273c:	00800044 	movi	r2,1
  812740:	f800283a 	ret
  812744:	2254b03a 	or	r10,r4,r9
  812748:	503fee26 	beq	r10,zero,812704 <__alt_mem_onchip_mem+0xff80a704>
  81274c:	00800044 	movi	r2,1
  812750:	f800283a 	ret
  812754:	0005883a 	mov	r2,zero
  812758:	f800283a 	ret

0081275c <__muldf3>:
  81275c:	defff304 	addi	sp,sp,-52
  812760:	2804d53a 	srli	r2,r5,20
  812764:	dd800915 	stw	r22,36(sp)
  812768:	282cd7fa 	srli	r22,r5,31
  81276c:	dc000315 	stw	r16,12(sp)
  812770:	04000434 	movhi	r16,16
  812774:	dd400815 	stw	r21,32(sp)
  812778:	dc800515 	stw	r18,20(sp)
  81277c:	843fffc4 	addi	r16,r16,-1
  812780:	dfc00c15 	stw	ra,48(sp)
  812784:	df000b15 	stw	fp,44(sp)
  812788:	ddc00a15 	stw	r23,40(sp)
  81278c:	dd000715 	stw	r20,28(sp)
  812790:	dcc00615 	stw	r19,24(sp)
  812794:	dc400415 	stw	r17,16(sp)
  812798:	1481ffcc 	andi	r18,r2,2047
  81279c:	2c20703a 	and	r16,r5,r16
  8127a0:	b02b883a 	mov	r21,r22
  8127a4:	b2403fcc 	andi	r9,r22,255
  8127a8:	90006026 	beq	r18,zero,81292c <__muldf3+0x1d0>
  8127ac:	0081ffc4 	movi	r2,2047
  8127b0:	2029883a 	mov	r20,r4
  8127b4:	90803626 	beq	r18,r2,812890 <__muldf3+0x134>
  8127b8:	80800434 	orhi	r2,r16,16
  8127bc:	100490fa 	slli	r2,r2,3
  8127c0:	2020d77a 	srli	r16,r4,29
  8127c4:	202890fa 	slli	r20,r4,3
  8127c8:	94bf0044 	addi	r18,r18,-1023
  8127cc:	80a0b03a 	or	r16,r16,r2
  8127d0:	0027883a 	mov	r19,zero
  8127d4:	0039883a 	mov	fp,zero
  8127d8:	3804d53a 	srli	r2,r7,20
  8127dc:	382ed7fa 	srli	r23,r7,31
  8127e0:	04400434 	movhi	r17,16
  8127e4:	8c7fffc4 	addi	r17,r17,-1
  8127e8:	1081ffcc 	andi	r2,r2,2047
  8127ec:	3011883a 	mov	r8,r6
  8127f0:	3c62703a 	and	r17,r7,r17
  8127f4:	ba803fcc 	andi	r10,r23,255
  8127f8:	10006d26 	beq	r2,zero,8129b0 <__muldf3+0x254>
  8127fc:	00c1ffc4 	movi	r3,2047
  812800:	10c06526 	beq	r2,r3,812998 <__muldf3+0x23c>
  812804:	88c00434 	orhi	r3,r17,16
  812808:	180690fa 	slli	r3,r3,3
  81280c:	3022d77a 	srli	r17,r6,29
  812810:	301090fa 	slli	r8,r6,3
  812814:	10bf0044 	addi	r2,r2,-1023
  812818:	88e2b03a 	or	r17,r17,r3
  81281c:	000b883a 	mov	r5,zero
  812820:	9085883a 	add	r2,r18,r2
  812824:	2cc8b03a 	or	r4,r5,r19
  812828:	00c003c4 	movi	r3,15
  81282c:	bdacf03a 	xor	r22,r23,r22
  812830:	12c00044 	addi	r11,r2,1
  812834:	19009936 	bltu	r3,r4,812a9c <__muldf3+0x340>
  812838:	200890ba 	slli	r4,r4,2
  81283c:	00c02074 	movhi	r3,129
  812840:	18ca1404 	addi	r3,r3,10320
  812844:	20c9883a 	add	r4,r4,r3
  812848:	20c00017 	ldw	r3,0(r4)
  81284c:	1800683a 	jmp	r3
  812850:	00812a9c 	xori	r2,zero,1194
  812854:	008128b0 	cmpltui	r2,zero,1186
  812858:	008128b0 	cmpltui	r2,zero,1186
  81285c:	008128ac 	andhi	r2,zero,1186
  812860:	00812a78 	rdprs	r2,zero,1193
  812864:	00812a78 	rdprs	r2,zero,1193
  812868:	00812a60 	cmpeqi	r2,zero,1193
  81286c:	008128ac 	andhi	r2,zero,1186
  812870:	00812a78 	rdprs	r2,zero,1193
  812874:	00812a60 	cmpeqi	r2,zero,1193
  812878:	00812a78 	rdprs	r2,zero,1193
  81287c:	008128ac 	andhi	r2,zero,1186
  812880:	00812a88 	cmpgei	r2,zero,1194
  812884:	00812a88 	cmpgei	r2,zero,1194
  812888:	00812a88 	cmpgei	r2,zero,1194
  81288c:	00812ca4 	muli	r2,zero,1202
  812890:	2404b03a 	or	r2,r4,r16
  812894:	10006f1e 	bne	r2,zero,812a54 <__muldf3+0x2f8>
  812898:	04c00204 	movi	r19,8
  81289c:	0021883a 	mov	r16,zero
  8128a0:	0029883a 	mov	r20,zero
  8128a4:	07000084 	movi	fp,2
  8128a8:	003fcb06 	br	8127d8 <__alt_mem_onchip_mem+0xff80a7d8>
  8128ac:	502d883a 	mov	r22,r10
  8128b0:	00800084 	movi	r2,2
  8128b4:	28805726 	beq	r5,r2,812a14 <__muldf3+0x2b8>
  8128b8:	008000c4 	movi	r2,3
  8128bc:	28816626 	beq	r5,r2,812e58 <__muldf3+0x6fc>
  8128c0:	00800044 	movi	r2,1
  8128c4:	2881411e 	bne	r5,r2,812dcc <__muldf3+0x670>
  8128c8:	b02b883a 	mov	r21,r22
  8128cc:	0005883a 	mov	r2,zero
  8128d0:	000b883a 	mov	r5,zero
  8128d4:	0029883a 	mov	r20,zero
  8128d8:	1004953a 	slli	r2,r2,20
  8128dc:	a8c03fcc 	andi	r3,r21,255
  8128e0:	04400434 	movhi	r17,16
  8128e4:	8c7fffc4 	addi	r17,r17,-1
  8128e8:	180697fa 	slli	r3,r3,31
  8128ec:	2c4a703a 	and	r5,r5,r17
  8128f0:	288ab03a 	or	r5,r5,r2
  8128f4:	28c6b03a 	or	r3,r5,r3
  8128f8:	a005883a 	mov	r2,r20
  8128fc:	dfc00c17 	ldw	ra,48(sp)
  812900:	df000b17 	ldw	fp,44(sp)
  812904:	ddc00a17 	ldw	r23,40(sp)
  812908:	dd800917 	ldw	r22,36(sp)
  81290c:	dd400817 	ldw	r21,32(sp)
  812910:	dd000717 	ldw	r20,28(sp)
  812914:	dcc00617 	ldw	r19,24(sp)
  812918:	dc800517 	ldw	r18,20(sp)
  81291c:	dc400417 	ldw	r17,16(sp)
  812920:	dc000317 	ldw	r16,12(sp)
  812924:	dec00d04 	addi	sp,sp,52
  812928:	f800283a 	ret
  81292c:	2404b03a 	or	r2,r4,r16
  812930:	2027883a 	mov	r19,r4
  812934:	10004226 	beq	r2,zero,812a40 <__muldf3+0x2e4>
  812938:	8000fc26 	beq	r16,zero,812d2c <__muldf3+0x5d0>
  81293c:	8009883a 	mov	r4,r16
  812940:	d9800215 	stw	r6,8(sp)
  812944:	d9c00015 	stw	r7,0(sp)
  812948:	da400115 	stw	r9,4(sp)
  81294c:	080705c0 	call	80705c <__clzsi2>
  812950:	d9800217 	ldw	r6,8(sp)
  812954:	d9c00017 	ldw	r7,0(sp)
  812958:	da400117 	ldw	r9,4(sp)
  81295c:	113ffd44 	addi	r4,r2,-11
  812960:	00c00704 	movi	r3,28
  812964:	1900ed16 	blt	r3,r4,812d1c <__muldf3+0x5c0>
  812968:	00c00744 	movi	r3,29
  81296c:	147ffe04 	addi	r17,r2,-8
  812970:	1907c83a 	sub	r3,r3,r4
  812974:	8460983a 	sll	r16,r16,r17
  812978:	98c6d83a 	srl	r3,r19,r3
  81297c:	9c68983a 	sll	r20,r19,r17
  812980:	1c20b03a 	or	r16,r3,r16
  812984:	1080fcc4 	addi	r2,r2,1011
  812988:	00a5c83a 	sub	r18,zero,r2
  81298c:	0027883a 	mov	r19,zero
  812990:	0039883a 	mov	fp,zero
  812994:	003f9006 	br	8127d8 <__alt_mem_onchip_mem+0xff80a7d8>
  812998:	3446b03a 	or	r3,r6,r17
  81299c:	1800261e 	bne	r3,zero,812a38 <__muldf3+0x2dc>
  8129a0:	0023883a 	mov	r17,zero
  8129a4:	0011883a 	mov	r8,zero
  8129a8:	01400084 	movi	r5,2
  8129ac:	003f9c06 	br	812820 <__alt_mem_onchip_mem+0xff80a820>
  8129b0:	3446b03a 	or	r3,r6,r17
  8129b4:	18001c26 	beq	r3,zero,812a28 <__muldf3+0x2cc>
  8129b8:	8800ce26 	beq	r17,zero,812cf4 <__muldf3+0x598>
  8129bc:	8809883a 	mov	r4,r17
  8129c0:	d9800215 	stw	r6,8(sp)
  8129c4:	da400115 	stw	r9,4(sp)
  8129c8:	da800015 	stw	r10,0(sp)
  8129cc:	080705c0 	call	80705c <__clzsi2>
  8129d0:	d9800217 	ldw	r6,8(sp)
  8129d4:	da400117 	ldw	r9,4(sp)
  8129d8:	da800017 	ldw	r10,0(sp)
  8129dc:	113ffd44 	addi	r4,r2,-11
  8129e0:	00c00704 	movi	r3,28
  8129e4:	1900bf16 	blt	r3,r4,812ce4 <__muldf3+0x588>
  8129e8:	00c00744 	movi	r3,29
  8129ec:	123ffe04 	addi	r8,r2,-8
  8129f0:	1907c83a 	sub	r3,r3,r4
  8129f4:	8a22983a 	sll	r17,r17,r8
  8129f8:	30c6d83a 	srl	r3,r6,r3
  8129fc:	3210983a 	sll	r8,r6,r8
  812a00:	1c62b03a 	or	r17,r3,r17
  812a04:	1080fcc4 	addi	r2,r2,1011
  812a08:	0085c83a 	sub	r2,zero,r2
  812a0c:	000b883a 	mov	r5,zero
  812a10:	003f8306 	br	812820 <__alt_mem_onchip_mem+0xff80a820>
  812a14:	b02b883a 	mov	r21,r22
  812a18:	0081ffc4 	movi	r2,2047
  812a1c:	000b883a 	mov	r5,zero
  812a20:	0029883a 	mov	r20,zero
  812a24:	003fac06 	br	8128d8 <__alt_mem_onchip_mem+0xff80a8d8>
  812a28:	0023883a 	mov	r17,zero
  812a2c:	0011883a 	mov	r8,zero
  812a30:	01400044 	movi	r5,1
  812a34:	003f7a06 	br	812820 <__alt_mem_onchip_mem+0xff80a820>
  812a38:	014000c4 	movi	r5,3
  812a3c:	003f7806 	br	812820 <__alt_mem_onchip_mem+0xff80a820>
  812a40:	04c00104 	movi	r19,4
  812a44:	0021883a 	mov	r16,zero
  812a48:	0029883a 	mov	r20,zero
  812a4c:	07000044 	movi	fp,1
  812a50:	003f6106 	br	8127d8 <__alt_mem_onchip_mem+0xff80a7d8>
  812a54:	04c00304 	movi	r19,12
  812a58:	070000c4 	movi	fp,3
  812a5c:	003f5e06 	br	8127d8 <__alt_mem_onchip_mem+0xff80a7d8>
  812a60:	01400434 	movhi	r5,16
  812a64:	002b883a 	mov	r21,zero
  812a68:	297fffc4 	addi	r5,r5,-1
  812a6c:	053fffc4 	movi	r20,-1
  812a70:	0081ffc4 	movi	r2,2047
  812a74:	003f9806 	br	8128d8 <__alt_mem_onchip_mem+0xff80a8d8>
  812a78:	8023883a 	mov	r17,r16
  812a7c:	a011883a 	mov	r8,r20
  812a80:	e00b883a 	mov	r5,fp
  812a84:	003f8a06 	br	8128b0 <__alt_mem_onchip_mem+0xff80a8b0>
  812a88:	8023883a 	mov	r17,r16
  812a8c:	a011883a 	mov	r8,r20
  812a90:	482d883a 	mov	r22,r9
  812a94:	e00b883a 	mov	r5,fp
  812a98:	003f8506 	br	8128b0 <__alt_mem_onchip_mem+0xff80a8b0>
  812a9c:	a00ad43a 	srli	r5,r20,16
  812aa0:	401ad43a 	srli	r13,r8,16
  812aa4:	a53fffcc 	andi	r20,r20,65535
  812aa8:	423fffcc 	andi	r8,r8,65535
  812aac:	4519383a 	mul	r12,r8,r20
  812ab0:	4147383a 	mul	r3,r8,r5
  812ab4:	6d09383a 	mul	r4,r13,r20
  812ab8:	600cd43a 	srli	r6,r12,16
  812abc:	2b5d383a 	mul	r14,r5,r13
  812ac0:	20c9883a 	add	r4,r4,r3
  812ac4:	310d883a 	add	r6,r6,r4
  812ac8:	30c0022e 	bgeu	r6,r3,812ad4 <__muldf3+0x378>
  812acc:	00c00074 	movhi	r3,1
  812ad0:	70dd883a 	add	r14,r14,r3
  812ad4:	8826d43a 	srli	r19,r17,16
  812ad8:	8bffffcc 	andi	r15,r17,65535
  812adc:	7d23383a 	mul	r17,r15,r20
  812ae0:	7949383a 	mul	r4,r15,r5
  812ae4:	9d29383a 	mul	r20,r19,r20
  812ae8:	8814d43a 	srli	r10,r17,16
  812aec:	3012943a 	slli	r9,r6,16
  812af0:	a129883a 	add	r20,r20,r4
  812af4:	633fffcc 	andi	r12,r12,65535
  812af8:	5515883a 	add	r10,r10,r20
  812afc:	3006d43a 	srli	r3,r6,16
  812b00:	4b13883a 	add	r9,r9,r12
  812b04:	2ccb383a 	mul	r5,r5,r19
  812b08:	5100022e 	bgeu	r10,r4,812b14 <__muldf3+0x3b8>
  812b0c:	01000074 	movhi	r4,1
  812b10:	290b883a 	add	r5,r5,r4
  812b14:	802ad43a 	srli	r21,r16,16
  812b18:	843fffcc 	andi	r16,r16,65535
  812b1c:	440d383a 	mul	r6,r8,r16
  812b20:	4565383a 	mul	r18,r8,r21
  812b24:	8349383a 	mul	r4,r16,r13
  812b28:	500e943a 	slli	r7,r10,16
  812b2c:	3010d43a 	srli	r8,r6,16
  812b30:	5028d43a 	srli	r20,r10,16
  812b34:	2489883a 	add	r4,r4,r18
  812b38:	8abfffcc 	andi	r10,r17,65535
  812b3c:	3a95883a 	add	r10,r7,r10
  812b40:	4119883a 	add	r12,r8,r4
  812b44:	a169883a 	add	r20,r20,r5
  812b48:	1a87883a 	add	r3,r3,r10
  812b4c:	6d5b383a 	mul	r13,r13,r21
  812b50:	6480022e 	bgeu	r12,r18,812b5c <__muldf3+0x400>
  812b54:	01000074 	movhi	r4,1
  812b58:	691b883a 	add	r13,r13,r4
  812b5c:	7c25383a 	mul	r18,r15,r16
  812b60:	7d4b383a 	mul	r5,r15,r21
  812b64:	84cf383a 	mul	r7,r16,r19
  812b68:	901ed43a 	srli	r15,r18,16
  812b6c:	6008d43a 	srli	r4,r12,16
  812b70:	6010943a 	slli	r8,r12,16
  812b74:	394f883a 	add	r7,r7,r5
  812b78:	333fffcc 	andi	r12,r6,65535
  812b7c:	79df883a 	add	r15,r15,r7
  812b80:	235b883a 	add	r13,r4,r13
  812b84:	9d63383a 	mul	r17,r19,r21
  812b88:	4309883a 	add	r4,r8,r12
  812b8c:	7940022e 	bgeu	r15,r5,812b98 <__muldf3+0x43c>
  812b90:	01400074 	movhi	r5,1
  812b94:	8963883a 	add	r17,r17,r5
  812b98:	780a943a 	slli	r5,r15,16
  812b9c:	91bfffcc 	andi	r6,r18,65535
  812ba0:	70c7883a 	add	r3,r14,r3
  812ba4:	298d883a 	add	r6,r5,r6
  812ba8:	1a8f803a 	cmpltu	r7,r3,r10
  812bac:	350b883a 	add	r5,r6,r20
  812bb0:	20c7883a 	add	r3,r4,r3
  812bb4:	3955883a 	add	r10,r7,r5
  812bb8:	1909803a 	cmpltu	r4,r3,r4
  812bbc:	6a91883a 	add	r8,r13,r10
  812bc0:	780cd43a 	srli	r6,r15,16
  812bc4:	2219883a 	add	r12,r4,r8
  812bc8:	2d0b803a 	cmpltu	r5,r5,r20
  812bcc:	51cf803a 	cmpltu	r7,r10,r7
  812bd0:	29ceb03a 	or	r7,r5,r7
  812bd4:	4351803a 	cmpltu	r8,r8,r13
  812bd8:	610b803a 	cmpltu	r5,r12,r4
  812bdc:	4148b03a 	or	r4,r8,r5
  812be0:	398f883a 	add	r7,r7,r6
  812be4:	3909883a 	add	r4,r7,r4
  812be8:	1810927a 	slli	r8,r3,9
  812bec:	2449883a 	add	r4,r4,r17
  812bf0:	2008927a 	slli	r4,r4,9
  812bf4:	6022d5fa 	srli	r17,r12,23
  812bf8:	1806d5fa 	srli	r3,r3,23
  812bfc:	4252b03a 	or	r9,r8,r9
  812c00:	600a927a 	slli	r5,r12,9
  812c04:	4810c03a 	cmpne	r8,r9,zero
  812c08:	2462b03a 	or	r17,r4,r17
  812c0c:	40c6b03a 	or	r3,r8,r3
  812c10:	8900402c 	andhi	r4,r17,256
  812c14:	1950b03a 	or	r8,r3,r5
  812c18:	20000726 	beq	r4,zero,812c38 <__muldf3+0x4dc>
  812c1c:	4006d07a 	srli	r3,r8,1
  812c20:	880497fa 	slli	r2,r17,31
  812c24:	4200004c 	andi	r8,r8,1
  812c28:	8822d07a 	srli	r17,r17,1
  812c2c:	1a10b03a 	or	r8,r3,r8
  812c30:	1210b03a 	or	r8,r2,r8
  812c34:	5805883a 	mov	r2,r11
  812c38:	1140ffc4 	addi	r5,r2,1023
  812c3c:	0140440e 	bge	zero,r5,812d50 <__muldf3+0x5f4>
  812c40:	40c001cc 	andi	r3,r8,7
  812c44:	18000726 	beq	r3,zero,812c64 <__muldf3+0x508>
  812c48:	40c003cc 	andi	r3,r8,15
  812c4c:	01000104 	movi	r4,4
  812c50:	19000426 	beq	r3,r4,812c64 <__muldf3+0x508>
  812c54:	4107883a 	add	r3,r8,r4
  812c58:	1a11803a 	cmpltu	r8,r3,r8
  812c5c:	8a23883a 	add	r17,r17,r8
  812c60:	1811883a 	mov	r8,r3
  812c64:	88c0402c 	andhi	r3,r17,256
  812c68:	18000426 	beq	r3,zero,812c7c <__muldf3+0x520>
  812c6c:	11410004 	addi	r5,r2,1024
  812c70:	00bfc034 	movhi	r2,65280
  812c74:	10bfffc4 	addi	r2,r2,-1
  812c78:	88a2703a 	and	r17,r17,r2
  812c7c:	0081ff84 	movi	r2,2046
  812c80:	117f6416 	blt	r2,r5,812a14 <__alt_mem_onchip_mem+0xff80aa14>
  812c84:	8828977a 	slli	r20,r17,29
  812c88:	4010d0fa 	srli	r8,r8,3
  812c8c:	8822927a 	slli	r17,r17,9
  812c90:	2881ffcc 	andi	r2,r5,2047
  812c94:	a228b03a 	or	r20,r20,r8
  812c98:	880ad33a 	srli	r5,r17,12
  812c9c:	b02b883a 	mov	r21,r22
  812ca0:	003f0d06 	br	8128d8 <__alt_mem_onchip_mem+0xff80a8d8>
  812ca4:	8080022c 	andhi	r2,r16,8
  812ca8:	10000926 	beq	r2,zero,812cd0 <__muldf3+0x574>
  812cac:	8880022c 	andhi	r2,r17,8
  812cb0:	1000071e 	bne	r2,zero,812cd0 <__muldf3+0x574>
  812cb4:	00800434 	movhi	r2,16
  812cb8:	89400234 	orhi	r5,r17,8
  812cbc:	10bfffc4 	addi	r2,r2,-1
  812cc0:	b82b883a 	mov	r21,r23
  812cc4:	288a703a 	and	r5,r5,r2
  812cc8:	4029883a 	mov	r20,r8
  812ccc:	003f6806 	br	812a70 <__alt_mem_onchip_mem+0xff80aa70>
  812cd0:	00800434 	movhi	r2,16
  812cd4:	81400234 	orhi	r5,r16,8
  812cd8:	10bfffc4 	addi	r2,r2,-1
  812cdc:	288a703a 	and	r5,r5,r2
  812ce0:	003f6306 	br	812a70 <__alt_mem_onchip_mem+0xff80aa70>
  812ce4:	147ff604 	addi	r17,r2,-40
  812ce8:	3462983a 	sll	r17,r6,r17
  812cec:	0011883a 	mov	r8,zero
  812cf0:	003f4406 	br	812a04 <__alt_mem_onchip_mem+0xff80aa04>
  812cf4:	3009883a 	mov	r4,r6
  812cf8:	d9800215 	stw	r6,8(sp)
  812cfc:	da400115 	stw	r9,4(sp)
  812d00:	da800015 	stw	r10,0(sp)
  812d04:	080705c0 	call	80705c <__clzsi2>
  812d08:	10800804 	addi	r2,r2,32
  812d0c:	da800017 	ldw	r10,0(sp)
  812d10:	da400117 	ldw	r9,4(sp)
  812d14:	d9800217 	ldw	r6,8(sp)
  812d18:	003f3006 	br	8129dc <__alt_mem_onchip_mem+0xff80a9dc>
  812d1c:	143ff604 	addi	r16,r2,-40
  812d20:	9c20983a 	sll	r16,r19,r16
  812d24:	0029883a 	mov	r20,zero
  812d28:	003f1606 	br	812984 <__alt_mem_onchip_mem+0xff80a984>
  812d2c:	d9800215 	stw	r6,8(sp)
  812d30:	d9c00015 	stw	r7,0(sp)
  812d34:	da400115 	stw	r9,4(sp)
  812d38:	080705c0 	call	80705c <__clzsi2>
  812d3c:	10800804 	addi	r2,r2,32
  812d40:	da400117 	ldw	r9,4(sp)
  812d44:	d9c00017 	ldw	r7,0(sp)
  812d48:	d9800217 	ldw	r6,8(sp)
  812d4c:	003f0306 	br	81295c <__alt_mem_onchip_mem+0xff80a95c>
  812d50:	00c00044 	movi	r3,1
  812d54:	1947c83a 	sub	r3,r3,r5
  812d58:	00800e04 	movi	r2,56
  812d5c:	10feda16 	blt	r2,r3,8128c8 <__alt_mem_onchip_mem+0xff80a8c8>
  812d60:	008007c4 	movi	r2,31
  812d64:	10c01b16 	blt	r2,r3,812dd4 <__muldf3+0x678>
  812d68:	00800804 	movi	r2,32
  812d6c:	10c5c83a 	sub	r2,r2,r3
  812d70:	888a983a 	sll	r5,r17,r2
  812d74:	40c8d83a 	srl	r4,r8,r3
  812d78:	4084983a 	sll	r2,r8,r2
  812d7c:	88e2d83a 	srl	r17,r17,r3
  812d80:	2906b03a 	or	r3,r5,r4
  812d84:	1004c03a 	cmpne	r2,r2,zero
  812d88:	1886b03a 	or	r3,r3,r2
  812d8c:	188001cc 	andi	r2,r3,7
  812d90:	10000726 	beq	r2,zero,812db0 <__muldf3+0x654>
  812d94:	188003cc 	andi	r2,r3,15
  812d98:	01000104 	movi	r4,4
  812d9c:	11000426 	beq	r2,r4,812db0 <__muldf3+0x654>
  812da0:	1805883a 	mov	r2,r3
  812da4:	10c00104 	addi	r3,r2,4
  812da8:	1885803a 	cmpltu	r2,r3,r2
  812dac:	88a3883a 	add	r17,r17,r2
  812db0:	8880202c 	andhi	r2,r17,128
  812db4:	10001c26 	beq	r2,zero,812e28 <__muldf3+0x6cc>
  812db8:	b02b883a 	mov	r21,r22
  812dbc:	00800044 	movi	r2,1
  812dc0:	000b883a 	mov	r5,zero
  812dc4:	0029883a 	mov	r20,zero
  812dc8:	003ec306 	br	8128d8 <__alt_mem_onchip_mem+0xff80a8d8>
  812dcc:	5805883a 	mov	r2,r11
  812dd0:	003f9906 	br	812c38 <__alt_mem_onchip_mem+0xff80ac38>
  812dd4:	00bff844 	movi	r2,-31
  812dd8:	1145c83a 	sub	r2,r2,r5
  812ddc:	8888d83a 	srl	r4,r17,r2
  812de0:	00800804 	movi	r2,32
  812de4:	18801a26 	beq	r3,r2,812e50 <__muldf3+0x6f4>
  812de8:	00801004 	movi	r2,64
  812dec:	10c5c83a 	sub	r2,r2,r3
  812df0:	8884983a 	sll	r2,r17,r2
  812df4:	1204b03a 	or	r2,r2,r8
  812df8:	1004c03a 	cmpne	r2,r2,zero
  812dfc:	2084b03a 	or	r2,r4,r2
  812e00:	144001cc 	andi	r17,r2,7
  812e04:	88000d1e 	bne	r17,zero,812e3c <__muldf3+0x6e0>
  812e08:	000b883a 	mov	r5,zero
  812e0c:	1028d0fa 	srli	r20,r2,3
  812e10:	b02b883a 	mov	r21,r22
  812e14:	0005883a 	mov	r2,zero
  812e18:	a468b03a 	or	r20,r20,r17
  812e1c:	003eae06 	br	8128d8 <__alt_mem_onchip_mem+0xff80a8d8>
  812e20:	1007883a 	mov	r3,r2
  812e24:	0023883a 	mov	r17,zero
  812e28:	880a927a 	slli	r5,r17,9
  812e2c:	1805883a 	mov	r2,r3
  812e30:	8822977a 	slli	r17,r17,29
  812e34:	280ad33a 	srli	r5,r5,12
  812e38:	003ff406 	br	812e0c <__alt_mem_onchip_mem+0xff80ae0c>
  812e3c:	10c003cc 	andi	r3,r2,15
  812e40:	01000104 	movi	r4,4
  812e44:	193ff626 	beq	r3,r4,812e20 <__alt_mem_onchip_mem+0xff80ae20>
  812e48:	0023883a 	mov	r17,zero
  812e4c:	003fd506 	br	812da4 <__alt_mem_onchip_mem+0xff80ada4>
  812e50:	0005883a 	mov	r2,zero
  812e54:	003fe706 	br	812df4 <__alt_mem_onchip_mem+0xff80adf4>
  812e58:	00800434 	movhi	r2,16
  812e5c:	89400234 	orhi	r5,r17,8
  812e60:	10bfffc4 	addi	r2,r2,-1
  812e64:	b02b883a 	mov	r21,r22
  812e68:	288a703a 	and	r5,r5,r2
  812e6c:	4029883a 	mov	r20,r8
  812e70:	003eff06 	br	812a70 <__alt_mem_onchip_mem+0xff80aa70>

00812e74 <__fixdfsi>:
  812e74:	280cd53a 	srli	r6,r5,20
  812e78:	00c00434 	movhi	r3,16
  812e7c:	18ffffc4 	addi	r3,r3,-1
  812e80:	3181ffcc 	andi	r6,r6,2047
  812e84:	01c0ff84 	movi	r7,1022
  812e88:	28c6703a 	and	r3,r5,r3
  812e8c:	280ad7fa 	srli	r5,r5,31
  812e90:	3980120e 	bge	r7,r6,812edc <__fixdfsi+0x68>
  812e94:	00810744 	movi	r2,1053
  812e98:	11800c16 	blt	r2,r6,812ecc <__fixdfsi+0x58>
  812e9c:	00810cc4 	movi	r2,1075
  812ea0:	1185c83a 	sub	r2,r2,r6
  812ea4:	01c007c4 	movi	r7,31
  812ea8:	18c00434 	orhi	r3,r3,16
  812eac:	38800d16 	blt	r7,r2,812ee4 <__fixdfsi+0x70>
  812eb0:	31befb44 	addi	r6,r6,-1043
  812eb4:	2084d83a 	srl	r2,r4,r2
  812eb8:	1986983a 	sll	r3,r3,r6
  812ebc:	1884b03a 	or	r2,r3,r2
  812ec0:	28000726 	beq	r5,zero,812ee0 <__fixdfsi+0x6c>
  812ec4:	0085c83a 	sub	r2,zero,r2
  812ec8:	f800283a 	ret
  812ecc:	00a00034 	movhi	r2,32768
  812ed0:	10bfffc4 	addi	r2,r2,-1
  812ed4:	2885883a 	add	r2,r5,r2
  812ed8:	f800283a 	ret
  812edc:	0005883a 	mov	r2,zero
  812ee0:	f800283a 	ret
  812ee4:	008104c4 	movi	r2,1043
  812ee8:	1185c83a 	sub	r2,r2,r6
  812eec:	1884d83a 	srl	r2,r3,r2
  812ef0:	003ff306 	br	812ec0 <__alt_mem_onchip_mem+0xff80aec0>

00812ef4 <__floatunsidf>:
  812ef4:	defffe04 	addi	sp,sp,-8
  812ef8:	dc000015 	stw	r16,0(sp)
  812efc:	dfc00115 	stw	ra,4(sp)
  812f00:	2021883a 	mov	r16,r4
  812f04:	20002226 	beq	r4,zero,812f90 <__floatunsidf+0x9c>
  812f08:	080705c0 	call	80705c <__clzsi2>
  812f0c:	01010784 	movi	r4,1054
  812f10:	2089c83a 	sub	r4,r4,r2
  812f14:	01810cc4 	movi	r6,1075
  812f18:	310dc83a 	sub	r6,r6,r4
  812f1c:	00c007c4 	movi	r3,31
  812f20:	1980120e 	bge	r3,r6,812f6c <__floatunsidf+0x78>
  812f24:	00c104c4 	movi	r3,1043
  812f28:	1907c83a 	sub	r3,r3,r4
  812f2c:	80ca983a 	sll	r5,r16,r3
  812f30:	00800434 	movhi	r2,16
  812f34:	10bfffc4 	addi	r2,r2,-1
  812f38:	2101ffcc 	andi	r4,r4,2047
  812f3c:	0021883a 	mov	r16,zero
  812f40:	288a703a 	and	r5,r5,r2
  812f44:	2008953a 	slli	r4,r4,20
  812f48:	00c00434 	movhi	r3,16
  812f4c:	18ffffc4 	addi	r3,r3,-1
  812f50:	28c6703a 	and	r3,r5,r3
  812f54:	8005883a 	mov	r2,r16
  812f58:	1906b03a 	or	r3,r3,r4
  812f5c:	dfc00117 	ldw	ra,4(sp)
  812f60:	dc000017 	ldw	r16,0(sp)
  812f64:	dec00204 	addi	sp,sp,8
  812f68:	f800283a 	ret
  812f6c:	00c002c4 	movi	r3,11
  812f70:	188bc83a 	sub	r5,r3,r2
  812f74:	814ad83a 	srl	r5,r16,r5
  812f78:	00c00434 	movhi	r3,16
  812f7c:	18ffffc4 	addi	r3,r3,-1
  812f80:	81a0983a 	sll	r16,r16,r6
  812f84:	2101ffcc 	andi	r4,r4,2047
  812f88:	28ca703a 	and	r5,r5,r3
  812f8c:	003fed06 	br	812f44 <__alt_mem_onchip_mem+0xff80af44>
  812f90:	0009883a 	mov	r4,zero
  812f94:	000b883a 	mov	r5,zero
  812f98:	003fea06 	br	812f44 <__alt_mem_onchip_mem+0xff80af44>

00812f9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812f9c:	defff504 	addi	sp,sp,-44
  812fa0:	df000a15 	stw	fp,40(sp)
  812fa4:	df000a04 	addi	fp,sp,40
  812fa8:	e13ffc15 	stw	r4,-16(fp)
  812fac:	e17ffd15 	stw	r5,-12(fp)
  812fb0:	e1bffe15 	stw	r6,-8(fp)
  812fb4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  812fb8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812fbc:	d0a77917 	ldw	r2,-25116(gp)
  
  if (alt_ticks_per_second ())
  812fc0:	10003c26 	beq	r2,zero,8130b4 <alt_alarm_start+0x118>
  {
    if (alarm)
  812fc4:	e0bffc17 	ldw	r2,-16(fp)
  812fc8:	10003826 	beq	r2,zero,8130ac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  812fcc:	e0bffc17 	ldw	r2,-16(fp)
  812fd0:	e0fffe17 	ldw	r3,-8(fp)
  812fd4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  812fd8:	e0bffc17 	ldw	r2,-16(fp)
  812fdc:	e0ffff17 	ldw	r3,-4(fp)
  812fe0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812fe4:	0005303a 	rdctl	r2,status
  812fe8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812fec:	e0fff917 	ldw	r3,-28(fp)
  812ff0:	00bfff84 	movi	r2,-2
  812ff4:	1884703a 	and	r2,r3,r2
  812ff8:	1001703a 	wrctl	status,r2
  
  return context;
  812ffc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  813000:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813004:	d0a77a17 	ldw	r2,-25112(gp)
      
      current_nticks = alt_nticks();
  813008:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81300c:	e0fffd17 	ldw	r3,-12(fp)
  813010:	e0bff617 	ldw	r2,-40(fp)
  813014:	1885883a 	add	r2,r3,r2
  813018:	10c00044 	addi	r3,r2,1
  81301c:	e0bffc17 	ldw	r2,-16(fp)
  813020:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  813024:	e0bffc17 	ldw	r2,-16(fp)
  813028:	10c00217 	ldw	r3,8(r2)
  81302c:	e0bff617 	ldw	r2,-40(fp)
  813030:	1880042e 	bgeu	r3,r2,813044 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  813034:	e0bffc17 	ldw	r2,-16(fp)
  813038:	00c00044 	movi	r3,1
  81303c:	10c00405 	stb	r3,16(r2)
  813040:	00000206 	br	81304c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  813044:	e0bffc17 	ldw	r2,-16(fp)
  813048:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81304c:	e0bffc17 	ldw	r2,-16(fp)
  813050:	d0e01604 	addi	r3,gp,-32680
  813054:	e0fffa15 	stw	r3,-24(fp)
  813058:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81305c:	e0bffb17 	ldw	r2,-20(fp)
  813060:	e0fffa17 	ldw	r3,-24(fp)
  813064:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  813068:	e0bffa17 	ldw	r2,-24(fp)
  81306c:	10c00017 	ldw	r3,0(r2)
  813070:	e0bffb17 	ldw	r2,-20(fp)
  813074:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813078:	e0bffa17 	ldw	r2,-24(fp)
  81307c:	10800017 	ldw	r2,0(r2)
  813080:	e0fffb17 	ldw	r3,-20(fp)
  813084:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  813088:	e0bffa17 	ldw	r2,-24(fp)
  81308c:	e0fffb17 	ldw	r3,-20(fp)
  813090:	10c00015 	stw	r3,0(r2)
  813094:	e0bff817 	ldw	r2,-32(fp)
  813098:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81309c:	e0bff717 	ldw	r2,-36(fp)
  8130a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8130a4:	0005883a 	mov	r2,zero
  8130a8:	00000306 	br	8130b8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8130ac:	00bffa84 	movi	r2,-22
  8130b0:	00000106 	br	8130b8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  8130b4:	00bfde84 	movi	r2,-134
  }
}
  8130b8:	e037883a 	mov	sp,fp
  8130bc:	df000017 	ldw	fp,0(sp)
  8130c0:	dec00104 	addi	sp,sp,4
  8130c4:	f800283a 	ret

008130c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8130c8:	defffe04 	addi	sp,sp,-8
  8130cc:	dfc00115 	stw	ra,4(sp)
  8130d0:	df000015 	stw	fp,0(sp)
  8130d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8130d8:	d0a01317 	ldw	r2,-32692(gp)
  8130dc:	10000326 	beq	r2,zero,8130ec <alt_get_errno+0x24>
  8130e0:	d0a01317 	ldw	r2,-32692(gp)
  8130e4:	103ee83a 	callr	r2
  8130e8:	00000106 	br	8130f0 <alt_get_errno+0x28>
  8130ec:	d0a76e04 	addi	r2,gp,-25160
}
  8130f0:	e037883a 	mov	sp,fp
  8130f4:	dfc00117 	ldw	ra,4(sp)
  8130f8:	df000017 	ldw	fp,0(sp)
  8130fc:	dec00204 	addi	sp,sp,8
  813100:	f800283a 	ret

00813104 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  813104:	defffb04 	addi	sp,sp,-20
  813108:	dfc00415 	stw	ra,16(sp)
  81310c:	df000315 	stw	fp,12(sp)
  813110:	df000304 	addi	fp,sp,12
  813114:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  813118:	e0bfff17 	ldw	r2,-4(fp)
  81311c:	10000616 	blt	r2,zero,813138 <close+0x34>
  813120:	e0bfff17 	ldw	r2,-4(fp)
  813124:	10c00324 	muli	r3,r2,12
  813128:	008020b4 	movhi	r2,130
  81312c:	10a05604 	addi	r2,r2,-32424
  813130:	1885883a 	add	r2,r3,r2
  813134:	00000106 	br	81313c <close+0x38>
  813138:	0005883a 	mov	r2,zero
  81313c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  813140:	e0bffd17 	ldw	r2,-12(fp)
  813144:	10001926 	beq	r2,zero,8131ac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  813148:	e0bffd17 	ldw	r2,-12(fp)
  81314c:	10800017 	ldw	r2,0(r2)
  813150:	10800417 	ldw	r2,16(r2)
  813154:	10000626 	beq	r2,zero,813170 <close+0x6c>
  813158:	e0bffd17 	ldw	r2,-12(fp)
  81315c:	10800017 	ldw	r2,0(r2)
  813160:	10800417 	ldw	r2,16(r2)
  813164:	e13ffd17 	ldw	r4,-12(fp)
  813168:	103ee83a 	callr	r2
  81316c:	00000106 	br	813174 <close+0x70>
  813170:	0005883a 	mov	r2,zero
  813174:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  813178:	e13fff17 	ldw	r4,-4(fp)
  81317c:	0813b980 	call	813b98 <alt_release_fd>
    if (rval < 0)
  813180:	e0bffe17 	ldw	r2,-8(fp)
  813184:	1000070e 	bge	r2,zero,8131a4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  813188:	08130c80 	call	8130c8 <alt_get_errno>
  81318c:	1007883a 	mov	r3,r2
  813190:	e0bffe17 	ldw	r2,-8(fp)
  813194:	0085c83a 	sub	r2,zero,r2
  813198:	18800015 	stw	r2,0(r3)
      return -1;
  81319c:	00bfffc4 	movi	r2,-1
  8131a0:	00000706 	br	8131c0 <close+0xbc>
    }
    return 0;
  8131a4:	0005883a 	mov	r2,zero
  8131a8:	00000506 	br	8131c0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8131ac:	08130c80 	call	8130c8 <alt_get_errno>
  8131b0:	1007883a 	mov	r3,r2
  8131b4:	00801444 	movi	r2,81
  8131b8:	18800015 	stw	r2,0(r3)
    return -1;
  8131bc:	00bfffc4 	movi	r2,-1
  }
}
  8131c0:	e037883a 	mov	sp,fp
  8131c4:	dfc00117 	ldw	ra,4(sp)
  8131c8:	df000017 	ldw	fp,0(sp)
  8131cc:	dec00204 	addi	sp,sp,8
  8131d0:	f800283a 	ret

008131d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8131d4:	defffc04 	addi	sp,sp,-16
  8131d8:	df000315 	stw	fp,12(sp)
  8131dc:	df000304 	addi	fp,sp,12
  8131e0:	e13ffd15 	stw	r4,-12(fp)
  8131e4:	e17ffe15 	stw	r5,-8(fp)
  8131e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8131ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8131f0:	e037883a 	mov	sp,fp
  8131f4:	df000017 	ldw	fp,0(sp)
  8131f8:	dec00104 	addi	sp,sp,4
  8131fc:	f800283a 	ret

00813200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813200:	defffe04 	addi	sp,sp,-8
  813204:	dfc00115 	stw	ra,4(sp)
  813208:	df000015 	stw	fp,0(sp)
  81320c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813210:	d0a01317 	ldw	r2,-32692(gp)
  813214:	10000326 	beq	r2,zero,813224 <alt_get_errno+0x24>
  813218:	d0a01317 	ldw	r2,-32692(gp)
  81321c:	103ee83a 	callr	r2
  813220:	00000106 	br	813228 <alt_get_errno+0x28>
  813224:	d0a76e04 	addi	r2,gp,-25160
}
  813228:	e037883a 	mov	sp,fp
  81322c:	dfc00117 	ldw	ra,4(sp)
  813230:	df000017 	ldw	fp,0(sp)
  813234:	dec00204 	addi	sp,sp,8
  813238:	f800283a 	ret

0081323c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81323c:	defffb04 	addi	sp,sp,-20
  813240:	dfc00415 	stw	ra,16(sp)
  813244:	df000315 	stw	fp,12(sp)
  813248:	df000304 	addi	fp,sp,12
  81324c:	e13ffe15 	stw	r4,-8(fp)
  813250:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813254:	e0bffe17 	ldw	r2,-8(fp)
  813258:	10000616 	blt	r2,zero,813274 <fstat+0x38>
  81325c:	e0bffe17 	ldw	r2,-8(fp)
  813260:	10c00324 	muli	r3,r2,12
  813264:	008020b4 	movhi	r2,130
  813268:	10a05604 	addi	r2,r2,-32424
  81326c:	1885883a 	add	r2,r3,r2
  813270:	00000106 	br	813278 <fstat+0x3c>
  813274:	0005883a 	mov	r2,zero
  813278:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  81327c:	e0bffd17 	ldw	r2,-12(fp)
  813280:	10001026 	beq	r2,zero,8132c4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  813284:	e0bffd17 	ldw	r2,-12(fp)
  813288:	10800017 	ldw	r2,0(r2)
  81328c:	10800817 	ldw	r2,32(r2)
  813290:	10000726 	beq	r2,zero,8132b0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  813294:	e0bffd17 	ldw	r2,-12(fp)
  813298:	10800017 	ldw	r2,0(r2)
  81329c:	10800817 	ldw	r2,32(r2)
  8132a0:	e17fff17 	ldw	r5,-4(fp)
  8132a4:	e13ffd17 	ldw	r4,-12(fp)
  8132a8:	103ee83a 	callr	r2
  8132ac:	00000a06 	br	8132d8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8132b0:	e0bfff17 	ldw	r2,-4(fp)
  8132b4:	00c80004 	movi	r3,8192
  8132b8:	10c00115 	stw	r3,4(r2)
      return 0;
  8132bc:	0005883a 	mov	r2,zero
  8132c0:	00000506 	br	8132d8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8132c4:	08132000 	call	813200 <alt_get_errno>
  8132c8:	1007883a 	mov	r3,r2
  8132cc:	00801444 	movi	r2,81
  8132d0:	18800015 	stw	r2,0(r3)
    return -1;
  8132d4:	00bfffc4 	movi	r2,-1
  }
}
  8132d8:	e037883a 	mov	sp,fp
  8132dc:	dfc00117 	ldw	ra,4(sp)
  8132e0:	df000017 	ldw	fp,0(sp)
  8132e4:	dec00204 	addi	sp,sp,8
  8132e8:	f800283a 	ret

008132ec <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8132ec:	defff004 	addi	sp,sp,-64
  8132f0:	df000f15 	stw	fp,60(sp)
  8132f4:	df000f04 	addi	fp,sp,60
  8132f8:	e13ffd15 	stw	r4,-12(fp)
  8132fc:	e17ffe15 	stw	r5,-8(fp)
  813300:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  813304:	00bffa84 	movi	r2,-22
  813308:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81330c:	e0bffd17 	ldw	r2,-12(fp)
  813310:	10800828 	cmpgeui	r2,r2,32
  813314:	1000501e 	bne	r2,zero,813458 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813318:	0005303a 	rdctl	r2,status
  81331c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813320:	e0fff617 	ldw	r3,-40(fp)
  813324:	00bfff84 	movi	r2,-2
  813328:	1884703a 	and	r2,r3,r2
  81332c:	1001703a 	wrctl	status,r2
  
  return context;
  813330:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  813334:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  813338:	008020b4 	movhi	r2,130
  81333c:	10ad3104 	addi	r2,r2,-19260
  813340:	e0fffd17 	ldw	r3,-12(fp)
  813344:	180690fa 	slli	r3,r3,3
  813348:	10c5883a 	add	r2,r2,r3
  81334c:	e0ffff17 	ldw	r3,-4(fp)
  813350:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  813354:	008020b4 	movhi	r2,130
  813358:	10ad3104 	addi	r2,r2,-19260
  81335c:	e0fffd17 	ldw	r3,-12(fp)
  813360:	180690fa 	slli	r3,r3,3
  813364:	10c5883a 	add	r2,r2,r3
  813368:	10800104 	addi	r2,r2,4
  81336c:	e0fffe17 	ldw	r3,-8(fp)
  813370:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  813374:	e0bfff17 	ldw	r2,-4(fp)
  813378:	10001926 	beq	r2,zero,8133e0 <alt_irq_register+0xf4>
  81337c:	e0bffd17 	ldw	r2,-12(fp)
  813380:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813384:	0005303a 	rdctl	r2,status
  813388:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81338c:	e0fff717 	ldw	r3,-36(fp)
  813390:	00bfff84 	movi	r2,-2
  813394:	1884703a 	and	r2,r3,r2
  813398:	1001703a 	wrctl	status,r2
  
  return context;
  81339c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8133a0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8133a4:	00c00044 	movi	r3,1
  8133a8:	e0bff217 	ldw	r2,-56(fp)
  8133ac:	1884983a 	sll	r2,r3,r2
  8133b0:	1007883a 	mov	r3,r2
  8133b4:	d0a77517 	ldw	r2,-25132(gp)
  8133b8:	1884b03a 	or	r2,r3,r2
  8133bc:	d0a77515 	stw	r2,-25132(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8133c0:	d0a77517 	ldw	r2,-25132(gp)
  8133c4:	100170fa 	wrctl	ienable,r2
  8133c8:	e0bff817 	ldw	r2,-32(fp)
  8133cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133d0:	e0bff917 	ldw	r2,-28(fp)
  8133d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8133d8:	0005883a 	mov	r2,zero
  8133dc:	00001906 	br	813444 <alt_irq_register+0x158>
  8133e0:	e0bffd17 	ldw	r2,-12(fp)
  8133e4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133e8:	0005303a 	rdctl	r2,status
  8133ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133f0:	e0fffa17 	ldw	r3,-24(fp)
  8133f4:	00bfff84 	movi	r2,-2
  8133f8:	1884703a 	and	r2,r3,r2
  8133fc:	1001703a 	wrctl	status,r2
  
  return context;
  813400:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813404:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  813408:	00c00044 	movi	r3,1
  81340c:	e0bff417 	ldw	r2,-48(fp)
  813410:	1884983a 	sll	r2,r3,r2
  813414:	0084303a 	nor	r2,zero,r2
  813418:	1007883a 	mov	r3,r2
  81341c:	d0a77517 	ldw	r2,-25132(gp)
  813420:	1884703a 	and	r2,r3,r2
  813424:	d0a77515 	stw	r2,-25132(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813428:	d0a77517 	ldw	r2,-25132(gp)
  81342c:	100170fa 	wrctl	ienable,r2
  813430:	e0bffb17 	ldw	r2,-20(fp)
  813434:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813438:	e0bffc17 	ldw	r2,-16(fp)
  81343c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813440:	0005883a 	mov	r2,zero
  813444:	e0bff115 	stw	r2,-60(fp)
  813448:	e0bff317 	ldw	r2,-52(fp)
  81344c:	e0bff515 	stw	r2,-44(fp)
  813450:	e0bff517 	ldw	r2,-44(fp)
  813454:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  813458:	e0bff117 	ldw	r2,-60(fp)
}
  81345c:	e037883a 	mov	sp,fp
  813460:	df000017 	ldw	fp,0(sp)
  813464:	dec00104 	addi	sp,sp,4
  813468:	f800283a 	ret

0081346c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81346c:	defffe04 	addi	sp,sp,-8
  813470:	dfc00115 	stw	ra,4(sp)
  813474:	df000015 	stw	fp,0(sp)
  813478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81347c:	d0a01317 	ldw	r2,-32692(gp)
  813480:	10000326 	beq	r2,zero,813490 <alt_get_errno+0x24>
  813484:	d0a01317 	ldw	r2,-32692(gp)
  813488:	103ee83a 	callr	r2
  81348c:	00000106 	br	813494 <alt_get_errno+0x28>
  813490:	d0a76e04 	addi	r2,gp,-25160
}
  813494:	e037883a 	mov	sp,fp
  813498:	dfc00117 	ldw	ra,4(sp)
  81349c:	df000017 	ldw	fp,0(sp)
  8134a0:	dec00204 	addi	sp,sp,8
  8134a4:	f800283a 	ret

008134a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8134a8:	deffed04 	addi	sp,sp,-76
  8134ac:	dfc01215 	stw	ra,72(sp)
  8134b0:	df001115 	stw	fp,68(sp)
  8134b4:	df001104 	addi	fp,sp,68
  8134b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8134bc:	e0bfff17 	ldw	r2,-4(fp)
  8134c0:	10000616 	blt	r2,zero,8134dc <isatty+0x34>
  8134c4:	e0bfff17 	ldw	r2,-4(fp)
  8134c8:	10c00324 	muli	r3,r2,12
  8134cc:	008020b4 	movhi	r2,130
  8134d0:	10a05604 	addi	r2,r2,-32424
  8134d4:	1885883a 	add	r2,r3,r2
  8134d8:	00000106 	br	8134e0 <isatty+0x38>
  8134dc:	0005883a 	mov	r2,zero
  8134e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8134e4:	e0bfef17 	ldw	r2,-68(fp)
  8134e8:	10000e26 	beq	r2,zero,813524 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8134ec:	e0bfef17 	ldw	r2,-68(fp)
  8134f0:	10800017 	ldw	r2,0(r2)
  8134f4:	10800817 	ldw	r2,32(r2)
  8134f8:	1000021e 	bne	r2,zero,813504 <isatty+0x5c>
    {
      return 1;
  8134fc:	00800044 	movi	r2,1
  813500:	00000d06 	br	813538 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  813504:	e0bff004 	addi	r2,fp,-64
  813508:	100b883a 	mov	r5,r2
  81350c:	e13fff17 	ldw	r4,-4(fp)
  813510:	081323c0 	call	81323c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  813514:	e0bff117 	ldw	r2,-60(fp)
  813518:	10880020 	cmpeqi	r2,r2,8192
  81351c:	10803fcc 	andi	r2,r2,255
  813520:	00000506 	br	813538 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  813524:	081346c0 	call	81346c <alt_get_errno>
  813528:	1007883a 	mov	r3,r2
  81352c:	00801444 	movi	r2,81
  813530:	18800015 	stw	r2,0(r3)
    return 0;
  813534:	0005883a 	mov	r2,zero
  }
}
  813538:	e037883a 	mov	sp,fp
  81353c:	dfc00117 	ldw	ra,4(sp)
  813540:	df000017 	ldw	fp,0(sp)
  813544:	dec00204 	addi	sp,sp,8
  813548:	f800283a 	ret

0081354c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  81354c:	defffc04 	addi	sp,sp,-16
  813550:	df000315 	stw	fp,12(sp)
  813554:	df000304 	addi	fp,sp,12
  813558:	e13ffd15 	stw	r4,-12(fp)
  81355c:	e17ffe15 	stw	r5,-8(fp)
  813560:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  813564:	e0fffe17 	ldw	r3,-8(fp)
  813568:	e0bffd17 	ldw	r2,-12(fp)
  81356c:	18800c26 	beq	r3,r2,8135a0 <alt_load_section+0x54>
  {
    while( to != end )
  813570:	00000806 	br	813594 <alt_load_section+0x48>
    {
      *to++ = *from++;
  813574:	e0bffe17 	ldw	r2,-8(fp)
  813578:	10c00104 	addi	r3,r2,4
  81357c:	e0fffe15 	stw	r3,-8(fp)
  813580:	e0fffd17 	ldw	r3,-12(fp)
  813584:	19000104 	addi	r4,r3,4
  813588:	e13ffd15 	stw	r4,-12(fp)
  81358c:	18c00017 	ldw	r3,0(r3)
  813590:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  813594:	e0fffe17 	ldw	r3,-8(fp)
  813598:	e0bfff17 	ldw	r2,-4(fp)
  81359c:	18bff51e 	bne	r3,r2,813574 <__alt_mem_onchip_mem+0xff80b574>
    {
      *to++ = *from++;
    }
  }
}
  8135a0:	0001883a 	nop
  8135a4:	e037883a 	mov	sp,fp
  8135a8:	df000017 	ldw	fp,0(sp)
  8135ac:	dec00104 	addi	sp,sp,4
  8135b0:	f800283a 	ret

008135b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8135b4:	defffe04 	addi	sp,sp,-8
  8135b8:	dfc00115 	stw	ra,4(sp)
  8135bc:	df000015 	stw	fp,0(sp)
  8135c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8135c4:	018020b4 	movhi	r6,130
  8135c8:	31a56104 	addi	r6,r6,-27260
  8135cc:	01402074 	movhi	r5,129
  8135d0:	295e2304 	addi	r5,r5,30860
  8135d4:	010020b4 	movhi	r4,130
  8135d8:	21256104 	addi	r4,r4,-27260
  8135dc:	081354c0 	call	81354c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8135e0:	01802034 	movhi	r6,128
  8135e4:	31809104 	addi	r6,r6,580
  8135e8:	01402034 	movhi	r5,128
  8135ec:	29400804 	addi	r5,r5,32
  8135f0:	01002034 	movhi	r4,128
  8135f4:	21000804 	addi	r4,r4,32
  8135f8:	081354c0 	call	81354c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8135fc:	01802074 	movhi	r6,129
  813600:	319e2304 	addi	r6,r6,30860
  813604:	01402074 	movhi	r5,129
  813608:	295c8f04 	addi	r5,r5,29244
  81360c:	01002074 	movhi	r4,129
  813610:	211c8f04 	addi	r4,r4,29244
  813614:	081354c0 	call	81354c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  813618:	08165200 	call	816520 <alt_dcache_flush_all>
  alt_icache_flush_all();
  81361c:	08169440 	call	816944 <alt_icache_flush_all>
}
  813620:	0001883a 	nop
  813624:	e037883a 	mov	sp,fp
  813628:	dfc00117 	ldw	ra,4(sp)
  81362c:	df000017 	ldw	fp,0(sp)
  813630:	dec00204 	addi	sp,sp,8
  813634:	f800283a 	ret

00813638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813638:	defffe04 	addi	sp,sp,-8
  81363c:	dfc00115 	stw	ra,4(sp)
  813640:	df000015 	stw	fp,0(sp)
  813644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813648:	d0a01317 	ldw	r2,-32692(gp)
  81364c:	10000326 	beq	r2,zero,81365c <alt_get_errno+0x24>
  813650:	d0a01317 	ldw	r2,-32692(gp)
  813654:	103ee83a 	callr	r2
  813658:	00000106 	br	813660 <alt_get_errno+0x28>
  81365c:	d0a76e04 	addi	r2,gp,-25160
}
  813660:	e037883a 	mov	sp,fp
  813664:	dfc00117 	ldw	ra,4(sp)
  813668:	df000017 	ldw	fp,0(sp)
  81366c:	dec00204 	addi	sp,sp,8
  813670:	f800283a 	ret

00813674 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  813674:	defff904 	addi	sp,sp,-28
  813678:	dfc00615 	stw	ra,24(sp)
  81367c:	df000515 	stw	fp,20(sp)
  813680:	df000504 	addi	fp,sp,20
  813684:	e13ffd15 	stw	r4,-12(fp)
  813688:	e17ffe15 	stw	r5,-8(fp)
  81368c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  813690:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813694:	e0bffd17 	ldw	r2,-12(fp)
  813698:	10000616 	blt	r2,zero,8136b4 <lseek+0x40>
  81369c:	e0bffd17 	ldw	r2,-12(fp)
  8136a0:	10c00324 	muli	r3,r2,12
  8136a4:	008020b4 	movhi	r2,130
  8136a8:	10a05604 	addi	r2,r2,-32424
  8136ac:	1885883a 	add	r2,r3,r2
  8136b0:	00000106 	br	8136b8 <lseek+0x44>
  8136b4:	0005883a 	mov	r2,zero
  8136b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8136bc:	e0bffc17 	ldw	r2,-16(fp)
  8136c0:	10001026 	beq	r2,zero,813704 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8136c4:	e0bffc17 	ldw	r2,-16(fp)
  8136c8:	10800017 	ldw	r2,0(r2)
  8136cc:	10800717 	ldw	r2,28(r2)
  8136d0:	10000926 	beq	r2,zero,8136f8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8136d4:	e0bffc17 	ldw	r2,-16(fp)
  8136d8:	10800017 	ldw	r2,0(r2)
  8136dc:	10800717 	ldw	r2,28(r2)
  8136e0:	e1bfff17 	ldw	r6,-4(fp)
  8136e4:	e17ffe17 	ldw	r5,-8(fp)
  8136e8:	e13ffc17 	ldw	r4,-16(fp)
  8136ec:	103ee83a 	callr	r2
  8136f0:	e0bffb15 	stw	r2,-20(fp)
  8136f4:	00000506 	br	81370c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8136f8:	00bfde84 	movi	r2,-134
  8136fc:	e0bffb15 	stw	r2,-20(fp)
  813700:	00000206 	br	81370c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  813704:	00bfebc4 	movi	r2,-81
  813708:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  81370c:	e0bffb17 	ldw	r2,-20(fp)
  813710:	1000070e 	bge	r2,zero,813730 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  813714:	08136380 	call	813638 <alt_get_errno>
  813718:	1007883a 	mov	r3,r2
  81371c:	e0bffb17 	ldw	r2,-20(fp)
  813720:	0085c83a 	sub	r2,zero,r2
  813724:	18800015 	stw	r2,0(r3)
    rc = -1;
  813728:	00bfffc4 	movi	r2,-1
  81372c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  813730:	e0bffb17 	ldw	r2,-20(fp)
}
  813734:	e037883a 	mov	sp,fp
  813738:	dfc00117 	ldw	ra,4(sp)
  81373c:	df000017 	ldw	fp,0(sp)
  813740:	dec00204 	addi	sp,sp,8
  813744:	f800283a 	ret

00813748 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  813748:	defffd04 	addi	sp,sp,-12
  81374c:	dfc00215 	stw	ra,8(sp)
  813750:	df000115 	stw	fp,4(sp)
  813754:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  813758:	0009883a 	mov	r4,zero
  81375c:	0813fe80 	call	813fe8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  813760:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  813764:	08140200 	call	814020 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  813768:	01802074 	movhi	r6,129
  81376c:	319d7504 	addi	r6,r6,30164
  813770:	01402074 	movhi	r5,129
  813774:	295d7504 	addi	r5,r5,30164
  813778:	01002074 	movhi	r4,129
  81377c:	211d7504 	addi	r4,r4,30164
  813780:	0816cdc0 	call	816cdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  813784:	08166480 	call	816648 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  813788:	01002074 	movhi	r4,129
  81378c:	2119aa04 	addi	r4,r4,26280
  813790:	0816ea80 	call	816ea8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  813794:	d0a77617 	ldw	r2,-25128(gp)
  813798:	d0e77717 	ldw	r3,-25124(gp)
  81379c:	d1277817 	ldw	r4,-25120(gp)
  8137a0:	200d883a 	mov	r6,r4
  8137a4:	180b883a 	mov	r5,r3
  8137a8:	1009883a 	mov	r4,r2
  8137ac:	080038c0 	call	80038c <main>
  8137b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8137b4:	01000044 	movi	r4,1
  8137b8:	08131040 	call	813104 <close>
  exit (result);
  8137bc:	e13fff17 	ldw	r4,-4(fp)
  8137c0:	0816ebc0 	call	816ebc <exit>

008137c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8137c4:	defffe04 	addi	sp,sp,-8
  8137c8:	df000115 	stw	fp,4(sp)
  8137cc:	df000104 	addi	fp,sp,4
  8137d0:	e13fff15 	stw	r4,-4(fp)
}
  8137d4:	0001883a 	nop
  8137d8:	e037883a 	mov	sp,fp
  8137dc:	df000017 	ldw	fp,0(sp)
  8137e0:	dec00104 	addi	sp,sp,4
  8137e4:	f800283a 	ret

008137e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8137e8:	defffe04 	addi	sp,sp,-8
  8137ec:	df000115 	stw	fp,4(sp)
  8137f0:	df000104 	addi	fp,sp,4
  8137f4:	e13fff15 	stw	r4,-4(fp)
}
  8137f8:	0001883a 	nop
  8137fc:	e037883a 	mov	sp,fp
  813800:	df000017 	ldw	fp,0(sp)
  813804:	dec00104 	addi	sp,sp,4
  813808:	f800283a 	ret

0081380c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81380c:	defffe04 	addi	sp,sp,-8
  813810:	dfc00115 	stw	ra,4(sp)
  813814:	df000015 	stw	fp,0(sp)
  813818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81381c:	d0a01317 	ldw	r2,-32692(gp)
  813820:	10000326 	beq	r2,zero,813830 <alt_get_errno+0x24>
  813824:	d0a01317 	ldw	r2,-32692(gp)
  813828:	103ee83a 	callr	r2
  81382c:	00000106 	br	813834 <alt_get_errno+0x28>
  813830:	d0a76e04 	addi	r2,gp,-25160
}
  813834:	e037883a 	mov	sp,fp
  813838:	dfc00117 	ldw	ra,4(sp)
  81383c:	df000017 	ldw	fp,0(sp)
  813840:	dec00204 	addi	sp,sp,8
  813844:	f800283a 	ret

00813848 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  813848:	defffd04 	addi	sp,sp,-12
  81384c:	df000215 	stw	fp,8(sp)
  813850:	df000204 	addi	fp,sp,8
  813854:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  813858:	e0bfff17 	ldw	r2,-4(fp)
  81385c:	10800217 	ldw	r2,8(r2)
  813860:	10d00034 	orhi	r3,r2,16384
  813864:	e0bfff17 	ldw	r2,-4(fp)
  813868:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81386c:	e03ffe15 	stw	zero,-8(fp)
  813870:	00001d06 	br	8138e8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813874:	008020b4 	movhi	r2,130
  813878:	10a05604 	addi	r2,r2,-32424
  81387c:	e0fffe17 	ldw	r3,-8(fp)
  813880:	18c00324 	muli	r3,r3,12
  813884:	10c5883a 	add	r2,r2,r3
  813888:	10c00017 	ldw	r3,0(r2)
  81388c:	e0bfff17 	ldw	r2,-4(fp)
  813890:	10800017 	ldw	r2,0(r2)
  813894:	1880111e 	bne	r3,r2,8138dc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813898:	008020b4 	movhi	r2,130
  81389c:	10a05604 	addi	r2,r2,-32424
  8138a0:	e0fffe17 	ldw	r3,-8(fp)
  8138a4:	18c00324 	muli	r3,r3,12
  8138a8:	10c5883a 	add	r2,r2,r3
  8138ac:	10800204 	addi	r2,r2,8
  8138b0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8138b4:	1000090e 	bge	r2,zero,8138dc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8138b8:	e0bffe17 	ldw	r2,-8(fp)
  8138bc:	10c00324 	muli	r3,r2,12
  8138c0:	008020b4 	movhi	r2,130
  8138c4:	10a05604 	addi	r2,r2,-32424
  8138c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8138cc:	e0bfff17 	ldw	r2,-4(fp)
  8138d0:	18800226 	beq	r3,r2,8138dc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8138d4:	00bffcc4 	movi	r2,-13
  8138d8:	00000806 	br	8138fc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8138dc:	e0bffe17 	ldw	r2,-8(fp)
  8138e0:	10800044 	addi	r2,r2,1
  8138e4:	e0bffe15 	stw	r2,-8(fp)
  8138e8:	d0a01217 	ldw	r2,-32696(gp)
  8138ec:	1007883a 	mov	r3,r2
  8138f0:	e0bffe17 	ldw	r2,-8(fp)
  8138f4:	18bfdf2e 	bgeu	r3,r2,813874 <__alt_mem_onchip_mem+0xff80b874>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8138f8:	0005883a 	mov	r2,zero
}
  8138fc:	e037883a 	mov	sp,fp
  813900:	df000017 	ldw	fp,0(sp)
  813904:	dec00104 	addi	sp,sp,4
  813908:	f800283a 	ret

0081390c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81390c:	defff604 	addi	sp,sp,-40
  813910:	dfc00915 	stw	ra,36(sp)
  813914:	df000815 	stw	fp,32(sp)
  813918:	df000804 	addi	fp,sp,32
  81391c:	e13ffd15 	stw	r4,-12(fp)
  813920:	e17ffe15 	stw	r5,-8(fp)
  813924:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  813928:	00bfffc4 	movi	r2,-1
  81392c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  813930:	00bffb44 	movi	r2,-19
  813934:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  813938:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81393c:	d1601004 	addi	r5,gp,-32704
  813940:	e13ffd17 	ldw	r4,-12(fp)
  813944:	08167080 	call	816708 <alt_find_dev>
  813948:	e0bff815 	stw	r2,-32(fp)
  81394c:	e0bff817 	ldw	r2,-32(fp)
  813950:	1000051e 	bne	r2,zero,813968 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  813954:	e13ffd17 	ldw	r4,-12(fp)
  813958:	08167980 	call	816798 <alt_find_file>
  81395c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  813960:	00800044 	movi	r2,1
  813964:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  813968:	e0bff817 	ldw	r2,-32(fp)
  81396c:	10002926 	beq	r2,zero,813a14 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  813970:	e13ff817 	ldw	r4,-32(fp)
  813974:	08168a00 	call	8168a0 <alt_get_fd>
  813978:	e0bff915 	stw	r2,-28(fp)
  81397c:	e0bff917 	ldw	r2,-28(fp)
  813980:	1000030e 	bge	r2,zero,813990 <open+0x84>
    {
      status = index;
  813984:	e0bff917 	ldw	r2,-28(fp)
  813988:	e0bffa15 	stw	r2,-24(fp)
  81398c:	00002306 	br	813a1c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  813990:	e0bff917 	ldw	r2,-28(fp)
  813994:	10c00324 	muli	r3,r2,12
  813998:	008020b4 	movhi	r2,130
  81399c:	10a05604 	addi	r2,r2,-32424
  8139a0:	1885883a 	add	r2,r3,r2
  8139a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8139a8:	e0fffe17 	ldw	r3,-8(fp)
  8139ac:	00900034 	movhi	r2,16384
  8139b0:	10bfffc4 	addi	r2,r2,-1
  8139b4:	1886703a 	and	r3,r3,r2
  8139b8:	e0bffc17 	ldw	r2,-16(fp)
  8139bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8139c0:	e0bffb17 	ldw	r2,-20(fp)
  8139c4:	1000051e 	bne	r2,zero,8139dc <open+0xd0>
  8139c8:	e13ffc17 	ldw	r4,-16(fp)
  8139cc:	08138480 	call	813848 <alt_file_locked>
  8139d0:	e0bffa15 	stw	r2,-24(fp)
  8139d4:	e0bffa17 	ldw	r2,-24(fp)
  8139d8:	10001016 	blt	r2,zero,813a1c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8139dc:	e0bff817 	ldw	r2,-32(fp)
  8139e0:	10800317 	ldw	r2,12(r2)
  8139e4:	10000826 	beq	r2,zero,813a08 <open+0xfc>
  8139e8:	e0bff817 	ldw	r2,-32(fp)
  8139ec:	10800317 	ldw	r2,12(r2)
  8139f0:	e1ffff17 	ldw	r7,-4(fp)
  8139f4:	e1bffe17 	ldw	r6,-8(fp)
  8139f8:	e17ffd17 	ldw	r5,-12(fp)
  8139fc:	e13ffc17 	ldw	r4,-16(fp)
  813a00:	103ee83a 	callr	r2
  813a04:	00000106 	br	813a0c <open+0x100>
  813a08:	0005883a 	mov	r2,zero
  813a0c:	e0bffa15 	stw	r2,-24(fp)
  813a10:	00000206 	br	813a1c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  813a14:	00bffb44 	movi	r2,-19
  813a18:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813a1c:	e0bffa17 	ldw	r2,-24(fp)
  813a20:	1000090e 	bge	r2,zero,813a48 <open+0x13c>
  {
    alt_release_fd (index);  
  813a24:	e13ff917 	ldw	r4,-28(fp)
  813a28:	0813b980 	call	813b98 <alt_release_fd>
    ALT_ERRNO = -status;
  813a2c:	081380c0 	call	81380c <alt_get_errno>
  813a30:	1007883a 	mov	r3,r2
  813a34:	e0bffa17 	ldw	r2,-24(fp)
  813a38:	0085c83a 	sub	r2,zero,r2
  813a3c:	18800015 	stw	r2,0(r3)
    return -1;
  813a40:	00bfffc4 	movi	r2,-1
  813a44:	00000106 	br	813a4c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  813a48:	e0bff917 	ldw	r2,-28(fp)
}
  813a4c:	e037883a 	mov	sp,fp
  813a50:	dfc00117 	ldw	ra,4(sp)
  813a54:	df000017 	ldw	fp,0(sp)
  813a58:	dec00204 	addi	sp,sp,8
  813a5c:	f800283a 	ret

00813a60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813a60:	defffe04 	addi	sp,sp,-8
  813a64:	dfc00115 	stw	ra,4(sp)
  813a68:	df000015 	stw	fp,0(sp)
  813a6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813a70:	d0a01317 	ldw	r2,-32692(gp)
  813a74:	10000326 	beq	r2,zero,813a84 <alt_get_errno+0x24>
  813a78:	d0a01317 	ldw	r2,-32692(gp)
  813a7c:	103ee83a 	callr	r2
  813a80:	00000106 	br	813a88 <alt_get_errno+0x28>
  813a84:	d0a76e04 	addi	r2,gp,-25160
}
  813a88:	e037883a 	mov	sp,fp
  813a8c:	dfc00117 	ldw	ra,4(sp)
  813a90:	df000017 	ldw	fp,0(sp)
  813a94:	dec00204 	addi	sp,sp,8
  813a98:	f800283a 	ret

00813a9c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  813a9c:	defff904 	addi	sp,sp,-28
  813aa0:	dfc00615 	stw	ra,24(sp)
  813aa4:	df000515 	stw	fp,20(sp)
  813aa8:	df000504 	addi	fp,sp,20
  813aac:	e13ffd15 	stw	r4,-12(fp)
  813ab0:	e17ffe15 	stw	r5,-8(fp)
  813ab4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813ab8:	e0bffd17 	ldw	r2,-12(fp)
  813abc:	10000616 	blt	r2,zero,813ad8 <read+0x3c>
  813ac0:	e0bffd17 	ldw	r2,-12(fp)
  813ac4:	10c00324 	muli	r3,r2,12
  813ac8:	008020b4 	movhi	r2,130
  813acc:	10a05604 	addi	r2,r2,-32424
  813ad0:	1885883a 	add	r2,r3,r2
  813ad4:	00000106 	br	813adc <read+0x40>
  813ad8:	0005883a 	mov	r2,zero
  813adc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813ae0:	e0bffb17 	ldw	r2,-20(fp)
  813ae4:	10002226 	beq	r2,zero,813b70 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  813ae8:	e0bffb17 	ldw	r2,-20(fp)
  813aec:	10800217 	ldw	r2,8(r2)
  813af0:	108000cc 	andi	r2,r2,3
  813af4:	10800060 	cmpeqi	r2,r2,1
  813af8:	1000181e 	bne	r2,zero,813b5c <read+0xc0>
        (fd->dev->read))
  813afc:	e0bffb17 	ldw	r2,-20(fp)
  813b00:	10800017 	ldw	r2,0(r2)
  813b04:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  813b08:	10001426 	beq	r2,zero,813b5c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  813b0c:	e0bffb17 	ldw	r2,-20(fp)
  813b10:	10800017 	ldw	r2,0(r2)
  813b14:	10800517 	ldw	r2,20(r2)
  813b18:	e0ffff17 	ldw	r3,-4(fp)
  813b1c:	180d883a 	mov	r6,r3
  813b20:	e17ffe17 	ldw	r5,-8(fp)
  813b24:	e13ffb17 	ldw	r4,-20(fp)
  813b28:	103ee83a 	callr	r2
  813b2c:	e0bffc15 	stw	r2,-16(fp)
  813b30:	e0bffc17 	ldw	r2,-16(fp)
  813b34:	1000070e 	bge	r2,zero,813b54 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  813b38:	0813a600 	call	813a60 <alt_get_errno>
  813b3c:	1007883a 	mov	r3,r2
  813b40:	e0bffc17 	ldw	r2,-16(fp)
  813b44:	0085c83a 	sub	r2,zero,r2
  813b48:	18800015 	stw	r2,0(r3)
          return -1;
  813b4c:	00bfffc4 	movi	r2,-1
  813b50:	00000c06 	br	813b84 <read+0xe8>
        }
        return rval;
  813b54:	e0bffc17 	ldw	r2,-16(fp)
  813b58:	00000a06 	br	813b84 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  813b5c:	0813a600 	call	813a60 <alt_get_errno>
  813b60:	1007883a 	mov	r3,r2
  813b64:	00800344 	movi	r2,13
  813b68:	18800015 	stw	r2,0(r3)
  813b6c:	00000406 	br	813b80 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  813b70:	0813a600 	call	813a60 <alt_get_errno>
  813b74:	1007883a 	mov	r3,r2
  813b78:	00801444 	movi	r2,81
  813b7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  813b80:	00bfffc4 	movi	r2,-1
}
  813b84:	e037883a 	mov	sp,fp
  813b88:	dfc00117 	ldw	ra,4(sp)
  813b8c:	df000017 	ldw	fp,0(sp)
  813b90:	dec00204 	addi	sp,sp,8
  813b94:	f800283a 	ret

00813b98 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  813b98:	defffe04 	addi	sp,sp,-8
  813b9c:	df000115 	stw	fp,4(sp)
  813ba0:	df000104 	addi	fp,sp,4
  813ba4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  813ba8:	e0bfff17 	ldw	r2,-4(fp)
  813bac:	108000d0 	cmplti	r2,r2,3
  813bb0:	10000d1e 	bne	r2,zero,813be8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  813bb4:	008020b4 	movhi	r2,130
  813bb8:	10a05604 	addi	r2,r2,-32424
  813bbc:	e0ffff17 	ldw	r3,-4(fp)
  813bc0:	18c00324 	muli	r3,r3,12
  813bc4:	10c5883a 	add	r2,r2,r3
  813bc8:	10800204 	addi	r2,r2,8
  813bcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  813bd0:	008020b4 	movhi	r2,130
  813bd4:	10a05604 	addi	r2,r2,-32424
  813bd8:	e0ffff17 	ldw	r3,-4(fp)
  813bdc:	18c00324 	muli	r3,r3,12
  813be0:	10c5883a 	add	r2,r2,r3
  813be4:	10000015 	stw	zero,0(r2)
  }
}
  813be8:	0001883a 	nop
  813bec:	e037883a 	mov	sp,fp
  813bf0:	df000017 	ldw	fp,0(sp)
  813bf4:	dec00104 	addi	sp,sp,4
  813bf8:	f800283a 	ret

00813bfc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  813bfc:	defff904 	addi	sp,sp,-28
  813c00:	df000615 	stw	fp,24(sp)
  813c04:	df000604 	addi	fp,sp,24
  813c08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c0c:	0005303a 	rdctl	r2,status
  813c10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c14:	e0fffe17 	ldw	r3,-8(fp)
  813c18:	00bfff84 	movi	r2,-2
  813c1c:	1884703a 	and	r2,r3,r2
  813c20:	1001703a 	wrctl	status,r2
  
  return context;
  813c24:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  813c28:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  813c2c:	d0a01517 	ldw	r2,-32684(gp)
  813c30:	10c000c4 	addi	r3,r2,3
  813c34:	00bfff04 	movi	r2,-4
  813c38:	1884703a 	and	r2,r3,r2
  813c3c:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  813c40:	d0e01517 	ldw	r3,-32684(gp)
  813c44:	e0bfff17 	ldw	r2,-4(fp)
  813c48:	1887883a 	add	r3,r3,r2
  813c4c:	00804034 	movhi	r2,256
  813c50:	10800004 	addi	r2,r2,0
  813c54:	10c0062e 	bgeu	r2,r3,813c70 <sbrk+0x74>
  813c58:	e0bffb17 	ldw	r2,-20(fp)
  813c5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813c60:	e0bffa17 	ldw	r2,-24(fp)
  813c64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  813c68:	00bfffc4 	movi	r2,-1
  813c6c:	00000b06 	br	813c9c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  813c70:	d0a01517 	ldw	r2,-32684(gp)
  813c74:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  813c78:	d0e01517 	ldw	r3,-32684(gp)
  813c7c:	e0bfff17 	ldw	r2,-4(fp)
  813c80:	1885883a 	add	r2,r3,r2
  813c84:	d0a01515 	stw	r2,-32684(gp)
  813c88:	e0bffb17 	ldw	r2,-20(fp)
  813c8c:	e0bffc15 	stw	r2,-16(fp)
  813c90:	e0bffc17 	ldw	r2,-16(fp)
  813c94:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  813c98:	e0bffd17 	ldw	r2,-12(fp)
} 
  813c9c:	e037883a 	mov	sp,fp
  813ca0:	df000017 	ldw	fp,0(sp)
  813ca4:	dec00104 	addi	sp,sp,4
  813ca8:	f800283a 	ret

00813cac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  813cac:	defffa04 	addi	sp,sp,-24
  813cb0:	df000515 	stw	fp,20(sp)
  813cb4:	df000504 	addi	fp,sp,20
  813cb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813cbc:	0005303a 	rdctl	r2,status
  813cc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813cc4:	e0fffc17 	ldw	r3,-16(fp)
  813cc8:	00bfff84 	movi	r2,-2
  813ccc:	1884703a 	and	r2,r3,r2
  813cd0:	1001703a 	wrctl	status,r2
  
  return context;
  813cd4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  813cd8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  813cdc:	e0bfff17 	ldw	r2,-4(fp)
  813ce0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  813ce4:	e0bffd17 	ldw	r2,-12(fp)
  813ce8:	10800017 	ldw	r2,0(r2)
  813cec:	e0fffd17 	ldw	r3,-12(fp)
  813cf0:	18c00117 	ldw	r3,4(r3)
  813cf4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  813cf8:	e0bffd17 	ldw	r2,-12(fp)
  813cfc:	10800117 	ldw	r2,4(r2)
  813d00:	e0fffd17 	ldw	r3,-12(fp)
  813d04:	18c00017 	ldw	r3,0(r3)
  813d08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813d0c:	e0bffd17 	ldw	r2,-12(fp)
  813d10:	e0fffd17 	ldw	r3,-12(fp)
  813d14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  813d18:	e0bffd17 	ldw	r2,-12(fp)
  813d1c:	e0fffd17 	ldw	r3,-12(fp)
  813d20:	10c00015 	stw	r3,0(r2)
  813d24:	e0bffb17 	ldw	r2,-20(fp)
  813d28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813d2c:	e0bffe17 	ldw	r2,-8(fp)
  813d30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  813d34:	0001883a 	nop
  813d38:	e037883a 	mov	sp,fp
  813d3c:	df000017 	ldw	fp,0(sp)
  813d40:	dec00104 	addi	sp,sp,4
  813d44:	f800283a 	ret

00813d48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813d48:	defffb04 	addi	sp,sp,-20
  813d4c:	dfc00415 	stw	ra,16(sp)
  813d50:	df000315 	stw	fp,12(sp)
  813d54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  813d58:	d0a01617 	ldw	r2,-32680(gp)
  813d5c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813d60:	d0a77a17 	ldw	r2,-25112(gp)
  813d64:	10800044 	addi	r2,r2,1
  813d68:	d0a77a15 	stw	r2,-25112(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813d6c:	00002e06 	br	813e28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  813d70:	e0bffd17 	ldw	r2,-12(fp)
  813d74:	10800017 	ldw	r2,0(r2)
  813d78:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813d7c:	e0bffd17 	ldw	r2,-12(fp)
  813d80:	10800403 	ldbu	r2,16(r2)
  813d84:	10803fcc 	andi	r2,r2,255
  813d88:	10000426 	beq	r2,zero,813d9c <alt_tick+0x54>
  813d8c:	d0a77a17 	ldw	r2,-25112(gp)
  813d90:	1000021e 	bne	r2,zero,813d9c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  813d94:	e0bffd17 	ldw	r2,-12(fp)
  813d98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  813d9c:	e0bffd17 	ldw	r2,-12(fp)
  813da0:	10800217 	ldw	r2,8(r2)
  813da4:	d0e77a17 	ldw	r3,-25112(gp)
  813da8:	18801d36 	bltu	r3,r2,813e20 <alt_tick+0xd8>
  813dac:	e0bffd17 	ldw	r2,-12(fp)
  813db0:	10800403 	ldbu	r2,16(r2)
  813db4:	10803fcc 	andi	r2,r2,255
  813db8:	1000191e 	bne	r2,zero,813e20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  813dbc:	e0bffd17 	ldw	r2,-12(fp)
  813dc0:	10800317 	ldw	r2,12(r2)
  813dc4:	e0fffd17 	ldw	r3,-12(fp)
  813dc8:	18c00517 	ldw	r3,20(r3)
  813dcc:	1809883a 	mov	r4,r3
  813dd0:	103ee83a 	callr	r2
  813dd4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  813dd8:	e0bfff17 	ldw	r2,-4(fp)
  813ddc:	1000031e 	bne	r2,zero,813dec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  813de0:	e13ffd17 	ldw	r4,-12(fp)
  813de4:	0813cac0 	call	813cac <alt_alarm_stop>
  813de8:	00000d06 	br	813e20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  813dec:	e0bffd17 	ldw	r2,-12(fp)
  813df0:	10c00217 	ldw	r3,8(r2)
  813df4:	e0bfff17 	ldw	r2,-4(fp)
  813df8:	1887883a 	add	r3,r3,r2
  813dfc:	e0bffd17 	ldw	r2,-12(fp)
  813e00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  813e04:	e0bffd17 	ldw	r2,-12(fp)
  813e08:	10c00217 	ldw	r3,8(r2)
  813e0c:	d0a77a17 	ldw	r2,-25112(gp)
  813e10:	1880032e 	bgeu	r3,r2,813e20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  813e14:	e0bffd17 	ldw	r2,-12(fp)
  813e18:	00c00044 	movi	r3,1
  813e1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  813e20:	e0bffe17 	ldw	r2,-8(fp)
  813e24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813e28:	e0fffd17 	ldw	r3,-12(fp)
  813e2c:	d0a01604 	addi	r2,gp,-32680
  813e30:	18bfcf1e 	bne	r3,r2,813d70 <__alt_mem_onchip_mem+0xff80bd70>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  813e34:	0001883a 	nop
}
  813e38:	0001883a 	nop
  813e3c:	e037883a 	mov	sp,fp
  813e40:	dfc00117 	ldw	ra,4(sp)
  813e44:	df000017 	ldw	fp,0(sp)
  813e48:	dec00204 	addi	sp,sp,8
  813e4c:	f800283a 	ret

00813e50 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  813e50:	defffd04 	addi	sp,sp,-12
  813e54:	dfc00215 	stw	ra,8(sp)
  813e58:	df000115 	stw	fp,4(sp)
  813e5c:	df000104 	addi	fp,sp,4
  813e60:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  813e64:	e13fff17 	ldw	r4,-4(fp)
  813e68:	08163c80 	call	8163c8 <alt_busy_sleep>
}
  813e6c:	e037883a 	mov	sp,fp
  813e70:	dfc00117 	ldw	ra,4(sp)
  813e74:	df000017 	ldw	fp,0(sp)
  813e78:	dec00204 	addi	sp,sp,8
  813e7c:	f800283a 	ret

00813e80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813e80:	defffe04 	addi	sp,sp,-8
  813e84:	dfc00115 	stw	ra,4(sp)
  813e88:	df000015 	stw	fp,0(sp)
  813e8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813e90:	d0a01317 	ldw	r2,-32692(gp)
  813e94:	10000326 	beq	r2,zero,813ea4 <alt_get_errno+0x24>
  813e98:	d0a01317 	ldw	r2,-32692(gp)
  813e9c:	103ee83a 	callr	r2
  813ea0:	00000106 	br	813ea8 <alt_get_errno+0x28>
  813ea4:	d0a76e04 	addi	r2,gp,-25160
}
  813ea8:	e037883a 	mov	sp,fp
  813eac:	dfc00117 	ldw	ra,4(sp)
  813eb0:	df000017 	ldw	fp,0(sp)
  813eb4:	dec00204 	addi	sp,sp,8
  813eb8:	f800283a 	ret

00813ebc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  813ebc:	defff904 	addi	sp,sp,-28
  813ec0:	dfc00615 	stw	ra,24(sp)
  813ec4:	df000515 	stw	fp,20(sp)
  813ec8:	df000504 	addi	fp,sp,20
  813ecc:	e13ffd15 	stw	r4,-12(fp)
  813ed0:	e17ffe15 	stw	r5,-8(fp)
  813ed4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813ed8:	e0bffd17 	ldw	r2,-12(fp)
  813edc:	10000616 	blt	r2,zero,813ef8 <write+0x3c>
  813ee0:	e0bffd17 	ldw	r2,-12(fp)
  813ee4:	10c00324 	muli	r3,r2,12
  813ee8:	008020b4 	movhi	r2,130
  813eec:	10a05604 	addi	r2,r2,-32424
  813ef0:	1885883a 	add	r2,r3,r2
  813ef4:	00000106 	br	813efc <write+0x40>
  813ef8:	0005883a 	mov	r2,zero
  813efc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813f00:	e0bffb17 	ldw	r2,-20(fp)
  813f04:	10002126 	beq	r2,zero,813f8c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  813f08:	e0bffb17 	ldw	r2,-20(fp)
  813f0c:	10800217 	ldw	r2,8(r2)
  813f10:	108000cc 	andi	r2,r2,3
  813f14:	10001826 	beq	r2,zero,813f78 <write+0xbc>
  813f18:	e0bffb17 	ldw	r2,-20(fp)
  813f1c:	10800017 	ldw	r2,0(r2)
  813f20:	10800617 	ldw	r2,24(r2)
  813f24:	10001426 	beq	r2,zero,813f78 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  813f28:	e0bffb17 	ldw	r2,-20(fp)
  813f2c:	10800017 	ldw	r2,0(r2)
  813f30:	10800617 	ldw	r2,24(r2)
  813f34:	e0ffff17 	ldw	r3,-4(fp)
  813f38:	180d883a 	mov	r6,r3
  813f3c:	e17ffe17 	ldw	r5,-8(fp)
  813f40:	e13ffb17 	ldw	r4,-20(fp)
  813f44:	103ee83a 	callr	r2
  813f48:	e0bffc15 	stw	r2,-16(fp)
  813f4c:	e0bffc17 	ldw	r2,-16(fp)
  813f50:	1000070e 	bge	r2,zero,813f70 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  813f54:	0813e800 	call	813e80 <alt_get_errno>
  813f58:	1007883a 	mov	r3,r2
  813f5c:	e0bffc17 	ldw	r2,-16(fp)
  813f60:	0085c83a 	sub	r2,zero,r2
  813f64:	18800015 	stw	r2,0(r3)
        return -1;
  813f68:	00bfffc4 	movi	r2,-1
  813f6c:	00000c06 	br	813fa0 <write+0xe4>
      }
      return rval;
  813f70:	e0bffc17 	ldw	r2,-16(fp)
  813f74:	00000a06 	br	813fa0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  813f78:	0813e800 	call	813e80 <alt_get_errno>
  813f7c:	1007883a 	mov	r3,r2
  813f80:	00800344 	movi	r2,13
  813f84:	18800015 	stw	r2,0(r3)
  813f88:	00000406 	br	813f9c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  813f8c:	0813e800 	call	813e80 <alt_get_errno>
  813f90:	1007883a 	mov	r3,r2
  813f94:	00801444 	movi	r2,81
  813f98:	18800015 	stw	r2,0(r3)
  }
  return -1;
  813f9c:	00bfffc4 	movi	r2,-1
}
  813fa0:	e037883a 	mov	sp,fp
  813fa4:	dfc00117 	ldw	ra,4(sp)
  813fa8:	df000017 	ldw	fp,0(sp)
  813fac:	dec00204 	addi	sp,sp,8
  813fb0:	f800283a 	ret

00813fb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  813fb4:	defffd04 	addi	sp,sp,-12
  813fb8:	dfc00215 	stw	ra,8(sp)
  813fbc:	df000115 	stw	fp,4(sp)
  813fc0:	df000104 	addi	fp,sp,4
  813fc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  813fc8:	d1601004 	addi	r5,gp,-32704
  813fcc:	e13fff17 	ldw	r4,-4(fp)
  813fd0:	08165a40 	call	8165a4 <alt_dev_llist_insert>
}
  813fd4:	e037883a 	mov	sp,fp
  813fd8:	dfc00117 	ldw	ra,4(sp)
  813fdc:	df000017 	ldw	fp,0(sp)
  813fe0:	dec00204 	addi	sp,sp,8
  813fe4:	f800283a 	ret

00813fe8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  813fe8:	defffd04 	addi	sp,sp,-12
  813fec:	dfc00215 	stw	ra,8(sp)
  813ff0:	df000115 	stw	fp,4(sp)
  813ff4:	df000104 	addi	fp,sp,4
  813ff8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  813ffc:	0816d580 	call	816d58 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  814000:	00800044 	movi	r2,1
  814004:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  814008:	0001883a 	nop
  81400c:	e037883a 	mov	sp,fp
  814010:	dfc00117 	ldw	ra,4(sp)
  814014:	df000017 	ldw	fp,0(sp)
  814018:	dec00204 	addi	sp,sp,8
  81401c:	f800283a 	ret

00814020 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  814020:	defffe04 	addi	sp,sp,-8
  814024:	dfc00115 	stw	ra,4(sp)
  814028:	df000015 	stw	fp,0(sp)
  81402c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  814030:	01c0fa04 	movi	r7,1000
  814034:	01800084 	movi	r6,2
  814038:	000b883a 	mov	r5,zero
  81403c:	01004074 	movhi	r4,257
  814040:	21040804 	addi	r4,r4,4128
  814044:	0815a740 	call	815a74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  814048:	01800044 	movi	r6,1
  81404c:	000b883a 	mov	r5,zero
  814050:	010020b4 	movhi	r4,130
  814054:	2120c004 	addi	r4,r4,-32000
  814058:	081421c0 	call	81421c <altera_avalon_jtag_uart_init>
  81405c:	010020b4 	movhi	r4,130
  814060:	2120b604 	addi	r4,r4,-32040
  814064:	0813fb40 	call	813fb4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  814068:	010020b4 	movhi	r4,130
  81406c:	2124d804 	addi	r4,r4,-27808
  814070:	08158680 	call	815868 <altera_avalon_lcd_16207_init>
  814074:	010020b4 	movhi	r4,130
  814078:	2124ce04 	addi	r4,r4,-27848
  81407c:	0813fb40 	call	813fb4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  814080:	000d883a 	mov	r6,zero
  814084:	000b883a 	mov	r5,zero
  814088:	010020b4 	movhi	r4,130
  81408c:	21252004 	addi	r4,r4,-27520
  814090:	0815c000 	call	815c00 <altera_avalon_uart_init>
  814094:	010020b4 	movhi	r4,130
  814098:	21251604 	addi	r4,r4,-27560
  81409c:	0813fb40 	call	813fb4 <alt_dev_reg>
}
  8140a0:	0001883a 	nop
  8140a4:	e037883a 	mov	sp,fp
  8140a8:	dfc00117 	ldw	ra,4(sp)
  8140ac:	df000017 	ldw	fp,0(sp)
  8140b0:	dec00204 	addi	sp,sp,8
  8140b4:	f800283a 	ret

008140b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8140b8:	defffa04 	addi	sp,sp,-24
  8140bc:	dfc00515 	stw	ra,20(sp)
  8140c0:	df000415 	stw	fp,16(sp)
  8140c4:	df000404 	addi	fp,sp,16
  8140c8:	e13ffd15 	stw	r4,-12(fp)
  8140cc:	e17ffe15 	stw	r5,-8(fp)
  8140d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8140d4:	e0bffd17 	ldw	r2,-12(fp)
  8140d8:	10800017 	ldw	r2,0(r2)
  8140dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8140e0:	e0bffc17 	ldw	r2,-16(fp)
  8140e4:	10c00a04 	addi	r3,r2,40
  8140e8:	e0bffd17 	ldw	r2,-12(fp)
  8140ec:	10800217 	ldw	r2,8(r2)
  8140f0:	100f883a 	mov	r7,r2
  8140f4:	e1bfff17 	ldw	r6,-4(fp)
  8140f8:	e17ffe17 	ldw	r5,-8(fp)
  8140fc:	1809883a 	mov	r4,r3
  814100:	08146e00 	call	8146e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  814104:	e037883a 	mov	sp,fp
  814108:	dfc00117 	ldw	ra,4(sp)
  81410c:	df000017 	ldw	fp,0(sp)
  814110:	dec00204 	addi	sp,sp,8
  814114:	f800283a 	ret

00814118 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  814118:	defffa04 	addi	sp,sp,-24
  81411c:	dfc00515 	stw	ra,20(sp)
  814120:	df000415 	stw	fp,16(sp)
  814124:	df000404 	addi	fp,sp,16
  814128:	e13ffd15 	stw	r4,-12(fp)
  81412c:	e17ffe15 	stw	r5,-8(fp)
  814130:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814134:	e0bffd17 	ldw	r2,-12(fp)
  814138:	10800017 	ldw	r2,0(r2)
  81413c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  814140:	e0bffc17 	ldw	r2,-16(fp)
  814144:	10c00a04 	addi	r3,r2,40
  814148:	e0bffd17 	ldw	r2,-12(fp)
  81414c:	10800217 	ldw	r2,8(r2)
  814150:	100f883a 	mov	r7,r2
  814154:	e1bfff17 	ldw	r6,-4(fp)
  814158:	e17ffe17 	ldw	r5,-8(fp)
  81415c:	1809883a 	mov	r4,r3
  814160:	08148fc0 	call	8148fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  814164:	e037883a 	mov	sp,fp
  814168:	dfc00117 	ldw	ra,4(sp)
  81416c:	df000017 	ldw	fp,0(sp)
  814170:	dec00204 	addi	sp,sp,8
  814174:	f800283a 	ret

00814178 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  814178:	defffc04 	addi	sp,sp,-16
  81417c:	dfc00315 	stw	ra,12(sp)
  814180:	df000215 	stw	fp,8(sp)
  814184:	df000204 	addi	fp,sp,8
  814188:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81418c:	e0bfff17 	ldw	r2,-4(fp)
  814190:	10800017 	ldw	r2,0(r2)
  814194:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  814198:	e0bffe17 	ldw	r2,-8(fp)
  81419c:	10c00a04 	addi	r3,r2,40
  8141a0:	e0bfff17 	ldw	r2,-4(fp)
  8141a4:	10800217 	ldw	r2,8(r2)
  8141a8:	100b883a 	mov	r5,r2
  8141ac:	1809883a 	mov	r4,r3
  8141b0:	08145880 	call	814588 <altera_avalon_jtag_uart_close>
}
  8141b4:	e037883a 	mov	sp,fp
  8141b8:	dfc00117 	ldw	ra,4(sp)
  8141bc:	df000017 	ldw	fp,0(sp)
  8141c0:	dec00204 	addi	sp,sp,8
  8141c4:	f800283a 	ret

008141c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8141c8:	defffa04 	addi	sp,sp,-24
  8141cc:	dfc00515 	stw	ra,20(sp)
  8141d0:	df000415 	stw	fp,16(sp)
  8141d4:	df000404 	addi	fp,sp,16
  8141d8:	e13ffd15 	stw	r4,-12(fp)
  8141dc:	e17ffe15 	stw	r5,-8(fp)
  8141e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8141e4:	e0bffd17 	ldw	r2,-12(fp)
  8141e8:	10800017 	ldw	r2,0(r2)
  8141ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8141f0:	e0bffc17 	ldw	r2,-16(fp)
  8141f4:	10800a04 	addi	r2,r2,40
  8141f8:	e1bfff17 	ldw	r6,-4(fp)
  8141fc:	e17ffe17 	ldw	r5,-8(fp)
  814200:	1009883a 	mov	r4,r2
  814204:	08145f00 	call	8145f0 <altera_avalon_jtag_uart_ioctl>
}
  814208:	e037883a 	mov	sp,fp
  81420c:	dfc00117 	ldw	ra,4(sp)
  814210:	df000017 	ldw	fp,0(sp)
  814214:	dec00204 	addi	sp,sp,8
  814218:	f800283a 	ret

0081421c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81421c:	defffa04 	addi	sp,sp,-24
  814220:	dfc00515 	stw	ra,20(sp)
  814224:	df000415 	stw	fp,16(sp)
  814228:	df000404 	addi	fp,sp,16
  81422c:	e13ffd15 	stw	r4,-12(fp)
  814230:	e17ffe15 	stw	r5,-8(fp)
  814234:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814238:	e0bffd17 	ldw	r2,-12(fp)
  81423c:	00c00044 	movi	r3,1
  814240:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  814244:	e0bffd17 	ldw	r2,-12(fp)
  814248:	10800017 	ldw	r2,0(r2)
  81424c:	10800104 	addi	r2,r2,4
  814250:	1007883a 	mov	r3,r2
  814254:	e0bffd17 	ldw	r2,-12(fp)
  814258:	10800817 	ldw	r2,32(r2)
  81425c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  814260:	e0bffe17 	ldw	r2,-8(fp)
  814264:	e0ffff17 	ldw	r3,-4(fp)
  814268:	d8000015 	stw	zero,0(sp)
  81426c:	e1fffd17 	ldw	r7,-12(fp)
  814270:	01802074 	movhi	r6,129
  814274:	3190b704 	addi	r6,r6,17116
  814278:	180b883a 	mov	r5,r3
  81427c:	1009883a 	mov	r4,r2
  814280:	08169780 	call	816978 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  814284:	e0bffd17 	ldw	r2,-12(fp)
  814288:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81428c:	e0bffd17 	ldw	r2,-12(fp)
  814290:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  814294:	d0e77917 	ldw	r3,-25116(gp)
  814298:	e1fffd17 	ldw	r7,-12(fp)
  81429c:	01802074 	movhi	r6,129
  8142a0:	31913a04 	addi	r6,r6,17640
  8142a4:	180b883a 	mov	r5,r3
  8142a8:	1009883a 	mov	r4,r2
  8142ac:	0812f9c0 	call	812f9c <alt_alarm_start>
  8142b0:	1000040e 	bge	r2,zero,8142c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8142b4:	e0fffd17 	ldw	r3,-12(fp)
  8142b8:	00a00034 	movhi	r2,32768
  8142bc:	10bfffc4 	addi	r2,r2,-1
  8142c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8142c4:	0001883a 	nop
  8142c8:	e037883a 	mov	sp,fp
  8142cc:	dfc00117 	ldw	ra,4(sp)
  8142d0:	df000017 	ldw	fp,0(sp)
  8142d4:	dec00204 	addi	sp,sp,8
  8142d8:	f800283a 	ret

008142dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8142dc:	defff804 	addi	sp,sp,-32
  8142e0:	df000715 	stw	fp,28(sp)
  8142e4:	df000704 	addi	fp,sp,28
  8142e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8142ec:	e0bfff17 	ldw	r2,-4(fp)
  8142f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  8142f4:	e0bffb17 	ldw	r2,-20(fp)
  8142f8:	10800017 	ldw	r2,0(r2)
  8142fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814300:	e0bffc17 	ldw	r2,-16(fp)
  814304:	10800104 	addi	r2,r2,4
  814308:	10800037 	ldwio	r2,0(r2)
  81430c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  814310:	e0bffd17 	ldw	r2,-12(fp)
  814314:	1080c00c 	andi	r2,r2,768
  814318:	10006d26 	beq	r2,zero,8144d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81431c:	e0bffd17 	ldw	r2,-12(fp)
  814320:	1080400c 	andi	r2,r2,256
  814324:	10003526 	beq	r2,zero,8143fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  814328:	00800074 	movhi	r2,1
  81432c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814330:	e0bffb17 	ldw	r2,-20(fp)
  814334:	10800a17 	ldw	r2,40(r2)
  814338:	10800044 	addi	r2,r2,1
  81433c:	1081ffcc 	andi	r2,r2,2047
  814340:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  814344:	e0bffb17 	ldw	r2,-20(fp)
  814348:	10c00b17 	ldw	r3,44(r2)
  81434c:	e0bffe17 	ldw	r2,-8(fp)
  814350:	18801526 	beq	r3,r2,8143a8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  814354:	e0bffc17 	ldw	r2,-16(fp)
  814358:	10800037 	ldwio	r2,0(r2)
  81435c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  814360:	e0bff917 	ldw	r2,-28(fp)
  814364:	10a0000c 	andi	r2,r2,32768
  814368:	10001126 	beq	r2,zero,8143b0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81436c:	e0bffb17 	ldw	r2,-20(fp)
  814370:	10800a17 	ldw	r2,40(r2)
  814374:	e0fff917 	ldw	r3,-28(fp)
  814378:	1809883a 	mov	r4,r3
  81437c:	e0fffb17 	ldw	r3,-20(fp)
  814380:	1885883a 	add	r2,r3,r2
  814384:	10800e04 	addi	r2,r2,56
  814388:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81438c:	e0bffb17 	ldw	r2,-20(fp)
  814390:	10800a17 	ldw	r2,40(r2)
  814394:	10800044 	addi	r2,r2,1
  814398:	10c1ffcc 	andi	r3,r2,2047
  81439c:	e0bffb17 	ldw	r2,-20(fp)
  8143a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8143a4:	003fe206 	br	814330 <__alt_mem_onchip_mem+0xff80c330>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  8143a8:	0001883a 	nop
  8143ac:	00000106 	br	8143b4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  8143b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8143b4:	e0bff917 	ldw	r2,-28(fp)
  8143b8:	10bfffec 	andhi	r2,r2,65535
  8143bc:	10000f26 	beq	r2,zero,8143fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8143c0:	e0bffb17 	ldw	r2,-20(fp)
  8143c4:	10c00817 	ldw	r3,32(r2)
  8143c8:	00bfff84 	movi	r2,-2
  8143cc:	1886703a 	and	r3,r3,r2
  8143d0:	e0bffb17 	ldw	r2,-20(fp)
  8143d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8143d8:	e0bffc17 	ldw	r2,-16(fp)
  8143dc:	10800104 	addi	r2,r2,4
  8143e0:	1007883a 	mov	r3,r2
  8143e4:	e0bffb17 	ldw	r2,-20(fp)
  8143e8:	10800817 	ldw	r2,32(r2)
  8143ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8143f0:	e0bffc17 	ldw	r2,-16(fp)
  8143f4:	10800104 	addi	r2,r2,4
  8143f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8143fc:	e0bffd17 	ldw	r2,-12(fp)
  814400:	1080800c 	andi	r2,r2,512
  814404:	103fbe26 	beq	r2,zero,814300 <__alt_mem_onchip_mem+0xff80c300>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  814408:	e0bffd17 	ldw	r2,-12(fp)
  81440c:	1004d43a 	srli	r2,r2,16
  814410:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  814414:	00001406 	br	814468 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  814418:	e0bffc17 	ldw	r2,-16(fp)
  81441c:	e0fffb17 	ldw	r3,-20(fp)
  814420:	18c00d17 	ldw	r3,52(r3)
  814424:	e13ffb17 	ldw	r4,-20(fp)
  814428:	20c7883a 	add	r3,r4,r3
  81442c:	18c20e04 	addi	r3,r3,2104
  814430:	18c00003 	ldbu	r3,0(r3)
  814434:	18c03fcc 	andi	r3,r3,255
  814438:	18c0201c 	xori	r3,r3,128
  81443c:	18ffe004 	addi	r3,r3,-128
  814440:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814444:	e0bffb17 	ldw	r2,-20(fp)
  814448:	10800d17 	ldw	r2,52(r2)
  81444c:	10800044 	addi	r2,r2,1
  814450:	10c1ffcc 	andi	r3,r2,2047
  814454:	e0bffb17 	ldw	r2,-20(fp)
  814458:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  81445c:	e0bffa17 	ldw	r2,-24(fp)
  814460:	10bfffc4 	addi	r2,r2,-1
  814464:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  814468:	e0bffa17 	ldw	r2,-24(fp)
  81446c:	10000526 	beq	r2,zero,814484 <altera_avalon_jtag_uart_irq+0x1a8>
  814470:	e0bffb17 	ldw	r2,-20(fp)
  814474:	10c00d17 	ldw	r3,52(r2)
  814478:	e0bffb17 	ldw	r2,-20(fp)
  81447c:	10800c17 	ldw	r2,48(r2)
  814480:	18bfe51e 	bne	r3,r2,814418 <__alt_mem_onchip_mem+0xff80c418>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  814484:	e0bffa17 	ldw	r2,-24(fp)
  814488:	103f9d26 	beq	r2,zero,814300 <__alt_mem_onchip_mem+0xff80c300>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81448c:	e0bffb17 	ldw	r2,-20(fp)
  814490:	10c00817 	ldw	r3,32(r2)
  814494:	00bfff44 	movi	r2,-3
  814498:	1886703a 	and	r3,r3,r2
  81449c:	e0bffb17 	ldw	r2,-20(fp)
  8144a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8144a4:	e0bffb17 	ldw	r2,-20(fp)
  8144a8:	10800017 	ldw	r2,0(r2)
  8144ac:	10800104 	addi	r2,r2,4
  8144b0:	1007883a 	mov	r3,r2
  8144b4:	e0bffb17 	ldw	r2,-20(fp)
  8144b8:	10800817 	ldw	r2,32(r2)
  8144bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8144c0:	e0bffc17 	ldw	r2,-16(fp)
  8144c4:	10800104 	addi	r2,r2,4
  8144c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8144cc:	003f8c06 	br	814300 <__alt_mem_onchip_mem+0xff80c300>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  8144d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  8144d4:	0001883a 	nop
  8144d8:	e037883a 	mov	sp,fp
  8144dc:	df000017 	ldw	fp,0(sp)
  8144e0:	dec00104 	addi	sp,sp,4
  8144e4:	f800283a 	ret

008144e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8144e8:	defff804 	addi	sp,sp,-32
  8144ec:	df000715 	stw	fp,28(sp)
  8144f0:	df000704 	addi	fp,sp,28
  8144f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8144f8:	e0bffb17 	ldw	r2,-20(fp)
  8144fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  814500:	e0bff917 	ldw	r2,-28(fp)
  814504:	10800017 	ldw	r2,0(r2)
  814508:	10800104 	addi	r2,r2,4
  81450c:	10800037 	ldwio	r2,0(r2)
  814510:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  814514:	e0bffa17 	ldw	r2,-24(fp)
  814518:	1081000c 	andi	r2,r2,1024
  81451c:	10000b26 	beq	r2,zero,81454c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  814520:	e0bff917 	ldw	r2,-28(fp)
  814524:	10800017 	ldw	r2,0(r2)
  814528:	10800104 	addi	r2,r2,4
  81452c:	1007883a 	mov	r3,r2
  814530:	e0bff917 	ldw	r2,-28(fp)
  814534:	10800817 	ldw	r2,32(r2)
  814538:	10810014 	ori	r2,r2,1024
  81453c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  814540:	e0bff917 	ldw	r2,-28(fp)
  814544:	10000915 	stw	zero,36(r2)
  814548:	00000a06 	br	814574 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81454c:	e0bff917 	ldw	r2,-28(fp)
  814550:	10c00917 	ldw	r3,36(r2)
  814554:	00a00034 	movhi	r2,32768
  814558:	10bfff04 	addi	r2,r2,-4
  81455c:	10c00536 	bltu	r2,r3,814574 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  814560:	e0bff917 	ldw	r2,-28(fp)
  814564:	10800917 	ldw	r2,36(r2)
  814568:	10c00044 	addi	r3,r2,1
  81456c:	e0bff917 	ldw	r2,-28(fp)
  814570:	10c00915 	stw	r3,36(r2)
  814574:	d0a77917 	ldw	r2,-25116(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  814578:	e037883a 	mov	sp,fp
  81457c:	df000017 	ldw	fp,0(sp)
  814580:	dec00104 	addi	sp,sp,4
  814584:	f800283a 	ret

00814588 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  814588:	defffd04 	addi	sp,sp,-12
  81458c:	df000215 	stw	fp,8(sp)
  814590:	df000204 	addi	fp,sp,8
  814594:	e13ffe15 	stw	r4,-8(fp)
  814598:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81459c:	00000506 	br	8145b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8145a0:	e0bfff17 	ldw	r2,-4(fp)
  8145a4:	1090000c 	andi	r2,r2,16384
  8145a8:	10000226 	beq	r2,zero,8145b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8145ac:	00bffd44 	movi	r2,-11
  8145b0:	00000b06 	br	8145e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8145b4:	e0bffe17 	ldw	r2,-8(fp)
  8145b8:	10c00d17 	ldw	r3,52(r2)
  8145bc:	e0bffe17 	ldw	r2,-8(fp)
  8145c0:	10800c17 	ldw	r2,48(r2)
  8145c4:	18800526 	beq	r3,r2,8145dc <altera_avalon_jtag_uart_close+0x54>
  8145c8:	e0bffe17 	ldw	r2,-8(fp)
  8145cc:	10c00917 	ldw	r3,36(r2)
  8145d0:	e0bffe17 	ldw	r2,-8(fp)
  8145d4:	10800117 	ldw	r2,4(r2)
  8145d8:	18bff136 	bltu	r3,r2,8145a0 <__alt_mem_onchip_mem+0xff80c5a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8145dc:	0005883a 	mov	r2,zero
}
  8145e0:	e037883a 	mov	sp,fp
  8145e4:	df000017 	ldw	fp,0(sp)
  8145e8:	dec00104 	addi	sp,sp,4
  8145ec:	f800283a 	ret

008145f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8145f0:	defffa04 	addi	sp,sp,-24
  8145f4:	df000515 	stw	fp,20(sp)
  8145f8:	df000504 	addi	fp,sp,20
  8145fc:	e13ffd15 	stw	r4,-12(fp)
  814600:	e17ffe15 	stw	r5,-8(fp)
  814604:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  814608:	00bff9c4 	movi	r2,-25
  81460c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  814610:	e0bffe17 	ldw	r2,-8(fp)
  814614:	10da8060 	cmpeqi	r3,r2,27137
  814618:	1800031e 	bne	r3,zero,814628 <altera_avalon_jtag_uart_ioctl+0x38>
  81461c:	109a80a0 	cmpeqi	r2,r2,27138
  814620:	1000181e 	bne	r2,zero,814684 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  814624:	00002906 	br	8146cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  814628:	e0bffd17 	ldw	r2,-12(fp)
  81462c:	10c00117 	ldw	r3,4(r2)
  814630:	00a00034 	movhi	r2,32768
  814634:	10bfffc4 	addi	r2,r2,-1
  814638:	18802126 	beq	r3,r2,8146c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  81463c:	e0bfff17 	ldw	r2,-4(fp)
  814640:	10800017 	ldw	r2,0(r2)
  814644:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  814648:	e0bffc17 	ldw	r2,-16(fp)
  81464c:	10800090 	cmplti	r2,r2,2
  814650:	1000061e 	bne	r2,zero,81466c <altera_avalon_jtag_uart_ioctl+0x7c>
  814654:	e0fffc17 	ldw	r3,-16(fp)
  814658:	00a00034 	movhi	r2,32768
  81465c:	10bfffc4 	addi	r2,r2,-1
  814660:	18800226 	beq	r3,r2,81466c <altera_avalon_jtag_uart_ioctl+0x7c>
  814664:	e0bffc17 	ldw	r2,-16(fp)
  814668:	00000206 	br	814674 <altera_avalon_jtag_uart_ioctl+0x84>
  81466c:	00a00034 	movhi	r2,32768
  814670:	10bfff84 	addi	r2,r2,-2
  814674:	e0fffd17 	ldw	r3,-12(fp)
  814678:	18800115 	stw	r2,4(r3)
      rc = 0;
  81467c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  814680:	00000f06 	br	8146c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  814684:	e0bffd17 	ldw	r2,-12(fp)
  814688:	10c00117 	ldw	r3,4(r2)
  81468c:	00a00034 	movhi	r2,32768
  814690:	10bfffc4 	addi	r2,r2,-1
  814694:	18800c26 	beq	r3,r2,8146c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  814698:	e0bffd17 	ldw	r2,-12(fp)
  81469c:	10c00917 	ldw	r3,36(r2)
  8146a0:	e0bffd17 	ldw	r2,-12(fp)
  8146a4:	10800117 	ldw	r2,4(r2)
  8146a8:	1885803a 	cmpltu	r2,r3,r2
  8146ac:	10c03fcc 	andi	r3,r2,255
  8146b0:	e0bfff17 	ldw	r2,-4(fp)
  8146b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8146b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8146bc:	00000206 	br	8146c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8146c0:	0001883a 	nop
  8146c4:	00000106 	br	8146cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8146c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8146cc:	e0bffb17 	ldw	r2,-20(fp)
}
  8146d0:	e037883a 	mov	sp,fp
  8146d4:	df000017 	ldw	fp,0(sp)
  8146d8:	dec00104 	addi	sp,sp,4
  8146dc:	f800283a 	ret

008146e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8146e0:	defff304 	addi	sp,sp,-52
  8146e4:	dfc00c15 	stw	ra,48(sp)
  8146e8:	df000b15 	stw	fp,44(sp)
  8146ec:	df000b04 	addi	fp,sp,44
  8146f0:	e13ffc15 	stw	r4,-16(fp)
  8146f4:	e17ffd15 	stw	r5,-12(fp)
  8146f8:	e1bffe15 	stw	r6,-8(fp)
  8146fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  814700:	e0bffd17 	ldw	r2,-12(fp)
  814704:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  814708:	00004706 	br	814828 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81470c:	e0bffc17 	ldw	r2,-16(fp)
  814710:	10800a17 	ldw	r2,40(r2)
  814714:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  814718:	e0bffc17 	ldw	r2,-16(fp)
  81471c:	10800b17 	ldw	r2,44(r2)
  814720:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  814724:	e0fff717 	ldw	r3,-36(fp)
  814728:	e0bff817 	ldw	r2,-32(fp)
  81472c:	18800536 	bltu	r3,r2,814744 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  814730:	e0fff717 	ldw	r3,-36(fp)
  814734:	e0bff817 	ldw	r2,-32(fp)
  814738:	1885c83a 	sub	r2,r3,r2
  81473c:	e0bff615 	stw	r2,-40(fp)
  814740:	00000406 	br	814754 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  814744:	00c20004 	movi	r3,2048
  814748:	e0bff817 	ldw	r2,-32(fp)
  81474c:	1885c83a 	sub	r2,r3,r2
  814750:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  814754:	e0bff617 	ldw	r2,-40(fp)
  814758:	10001e26 	beq	r2,zero,8147d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  81475c:	e0fffe17 	ldw	r3,-8(fp)
  814760:	e0bff617 	ldw	r2,-40(fp)
  814764:	1880022e 	bgeu	r3,r2,814770 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  814768:	e0bffe17 	ldw	r2,-8(fp)
  81476c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  814770:	e0bffc17 	ldw	r2,-16(fp)
  814774:	10c00e04 	addi	r3,r2,56
  814778:	e0bff817 	ldw	r2,-32(fp)
  81477c:	1885883a 	add	r2,r3,r2
  814780:	e1bff617 	ldw	r6,-40(fp)
  814784:	100b883a 	mov	r5,r2
  814788:	e13ff517 	ldw	r4,-44(fp)
  81478c:	080dcd80 	call	80dcd8 <memcpy>
      ptr   += n;
  814790:	e0fff517 	ldw	r3,-44(fp)
  814794:	e0bff617 	ldw	r2,-40(fp)
  814798:	1885883a 	add	r2,r3,r2
  81479c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8147a0:	e0fffe17 	ldw	r3,-8(fp)
  8147a4:	e0bff617 	ldw	r2,-40(fp)
  8147a8:	1885c83a 	sub	r2,r3,r2
  8147ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8147b0:	e0fff817 	ldw	r3,-32(fp)
  8147b4:	e0bff617 	ldw	r2,-40(fp)
  8147b8:	1885883a 	add	r2,r3,r2
  8147bc:	10c1ffcc 	andi	r3,r2,2047
  8147c0:	e0bffc17 	ldw	r2,-16(fp)
  8147c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8147c8:	e0bffe17 	ldw	r2,-8(fp)
  8147cc:	00bfcf16 	blt	zero,r2,81470c <__alt_mem_onchip_mem+0xff80c70c>
  8147d0:	00000106 	br	8147d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8147d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8147d8:	e0fff517 	ldw	r3,-44(fp)
  8147dc:	e0bffd17 	ldw	r2,-12(fp)
  8147e0:	1880141e 	bne	r3,r2,814834 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8147e4:	e0bfff17 	ldw	r2,-4(fp)
  8147e8:	1090000c 	andi	r2,r2,16384
  8147ec:	1000131e 	bne	r2,zero,81483c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8147f0:	0001883a 	nop
  8147f4:	e0bffc17 	ldw	r2,-16(fp)
  8147f8:	10c00a17 	ldw	r3,40(r2)
  8147fc:	e0bff717 	ldw	r2,-36(fp)
  814800:	1880051e 	bne	r3,r2,814818 <altera_avalon_jtag_uart_read+0x138>
  814804:	e0bffc17 	ldw	r2,-16(fp)
  814808:	10c00917 	ldw	r3,36(r2)
  81480c:	e0bffc17 	ldw	r2,-16(fp)
  814810:	10800117 	ldw	r2,4(r2)
  814814:	18bff736 	bltu	r3,r2,8147f4 <__alt_mem_onchip_mem+0xff80c7f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  814818:	e0bffc17 	ldw	r2,-16(fp)
  81481c:	10c00a17 	ldw	r3,40(r2)
  814820:	e0bff717 	ldw	r2,-36(fp)
  814824:	18800726 	beq	r3,r2,814844 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  814828:	e0bffe17 	ldw	r2,-8(fp)
  81482c:	00bfb716 	blt	zero,r2,81470c <__alt_mem_onchip_mem+0xff80c70c>
  814830:	00000506 	br	814848 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  814834:	0001883a 	nop
  814838:	00000306 	br	814848 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  81483c:	0001883a 	nop
  814840:	00000106 	br	814848 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  814844:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  814848:	e0fff517 	ldw	r3,-44(fp)
  81484c:	e0bffd17 	ldw	r2,-12(fp)
  814850:	18801826 	beq	r3,r2,8148b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814854:	0005303a 	rdctl	r2,status
  814858:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81485c:	e0fffb17 	ldw	r3,-20(fp)
  814860:	00bfff84 	movi	r2,-2
  814864:	1884703a 	and	r2,r3,r2
  814868:	1001703a 	wrctl	status,r2
  
  return context;
  81486c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  814870:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814874:	e0bffc17 	ldw	r2,-16(fp)
  814878:	10800817 	ldw	r2,32(r2)
  81487c:	10c00054 	ori	r3,r2,1
  814880:	e0bffc17 	ldw	r2,-16(fp)
  814884:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814888:	e0bffc17 	ldw	r2,-16(fp)
  81488c:	10800017 	ldw	r2,0(r2)
  814890:	10800104 	addi	r2,r2,4
  814894:	1007883a 	mov	r3,r2
  814898:	e0bffc17 	ldw	r2,-16(fp)
  81489c:	10800817 	ldw	r2,32(r2)
  8148a0:	18800035 	stwio	r2,0(r3)
  8148a4:	e0bffa17 	ldw	r2,-24(fp)
  8148a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8148ac:	e0bff917 	ldw	r2,-28(fp)
  8148b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8148b4:	e0fff517 	ldw	r3,-44(fp)
  8148b8:	e0bffd17 	ldw	r2,-12(fp)
  8148bc:	18800426 	beq	r3,r2,8148d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8148c0:	e0fff517 	ldw	r3,-44(fp)
  8148c4:	e0bffd17 	ldw	r2,-12(fp)
  8148c8:	1885c83a 	sub	r2,r3,r2
  8148cc:	00000606 	br	8148e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8148d0:	e0bfff17 	ldw	r2,-4(fp)
  8148d4:	1090000c 	andi	r2,r2,16384
  8148d8:	10000226 	beq	r2,zero,8148e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8148dc:	00bffd44 	movi	r2,-11
  8148e0:	00000106 	br	8148e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8148e4:	00bffec4 	movi	r2,-5
}
  8148e8:	e037883a 	mov	sp,fp
  8148ec:	dfc00117 	ldw	ra,4(sp)
  8148f0:	df000017 	ldw	fp,0(sp)
  8148f4:	dec00204 	addi	sp,sp,8
  8148f8:	f800283a 	ret

008148fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8148fc:	defff304 	addi	sp,sp,-52
  814900:	dfc00c15 	stw	ra,48(sp)
  814904:	df000b15 	stw	fp,44(sp)
  814908:	df000b04 	addi	fp,sp,44
  81490c:	e13ffc15 	stw	r4,-16(fp)
  814910:	e17ffd15 	stw	r5,-12(fp)
  814914:	e1bffe15 	stw	r6,-8(fp)
  814918:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81491c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  814920:	e0bffd17 	ldw	r2,-12(fp)
  814924:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  814928:	00003706 	br	814a08 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81492c:	e0bffc17 	ldw	r2,-16(fp)
  814930:	10800c17 	ldw	r2,48(r2)
  814934:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  814938:	e0bffc17 	ldw	r2,-16(fp)
  81493c:	10800d17 	ldw	r2,52(r2)
  814940:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  814944:	e0fff917 	ldw	r3,-28(fp)
  814948:	e0bff517 	ldw	r2,-44(fp)
  81494c:	1880062e 	bgeu	r3,r2,814968 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  814950:	e0fff517 	ldw	r3,-44(fp)
  814954:	e0bff917 	ldw	r2,-28(fp)
  814958:	1885c83a 	sub	r2,r3,r2
  81495c:	10bfffc4 	addi	r2,r2,-1
  814960:	e0bff615 	stw	r2,-40(fp)
  814964:	00000b06 	br	814994 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  814968:	e0bff517 	ldw	r2,-44(fp)
  81496c:	10000526 	beq	r2,zero,814984 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  814970:	00c20004 	movi	r3,2048
  814974:	e0bff917 	ldw	r2,-28(fp)
  814978:	1885c83a 	sub	r2,r3,r2
  81497c:	e0bff615 	stw	r2,-40(fp)
  814980:	00000406 	br	814994 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  814984:	00c1ffc4 	movi	r3,2047
  814988:	e0bff917 	ldw	r2,-28(fp)
  81498c:	1885c83a 	sub	r2,r3,r2
  814990:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  814994:	e0bff617 	ldw	r2,-40(fp)
  814998:	10001e26 	beq	r2,zero,814a14 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  81499c:	e0fffe17 	ldw	r3,-8(fp)
  8149a0:	e0bff617 	ldw	r2,-40(fp)
  8149a4:	1880022e 	bgeu	r3,r2,8149b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8149a8:	e0bffe17 	ldw	r2,-8(fp)
  8149ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8149b0:	e0bffc17 	ldw	r2,-16(fp)
  8149b4:	10c20e04 	addi	r3,r2,2104
  8149b8:	e0bff917 	ldw	r2,-28(fp)
  8149bc:	1885883a 	add	r2,r3,r2
  8149c0:	e1bff617 	ldw	r6,-40(fp)
  8149c4:	e17ffd17 	ldw	r5,-12(fp)
  8149c8:	1009883a 	mov	r4,r2
  8149cc:	080dcd80 	call	80dcd8 <memcpy>
      ptr   += n;
  8149d0:	e0fffd17 	ldw	r3,-12(fp)
  8149d4:	e0bff617 	ldw	r2,-40(fp)
  8149d8:	1885883a 	add	r2,r3,r2
  8149dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8149e0:	e0fffe17 	ldw	r3,-8(fp)
  8149e4:	e0bff617 	ldw	r2,-40(fp)
  8149e8:	1885c83a 	sub	r2,r3,r2
  8149ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8149f0:	e0fff917 	ldw	r3,-28(fp)
  8149f4:	e0bff617 	ldw	r2,-40(fp)
  8149f8:	1885883a 	add	r2,r3,r2
  8149fc:	10c1ffcc 	andi	r3,r2,2047
  814a00:	e0bffc17 	ldw	r2,-16(fp)
  814a04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  814a08:	e0bffe17 	ldw	r2,-8(fp)
  814a0c:	00bfc716 	blt	zero,r2,81492c <__alt_mem_onchip_mem+0xff80c92c>
  814a10:	00000106 	br	814a18 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  814a14:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814a18:	0005303a 	rdctl	r2,status
  814a1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814a20:	e0fffb17 	ldw	r3,-20(fp)
  814a24:	00bfff84 	movi	r2,-2
  814a28:	1884703a 	and	r2,r3,r2
  814a2c:	1001703a 	wrctl	status,r2
  
  return context;
  814a30:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  814a34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  814a38:	e0bffc17 	ldw	r2,-16(fp)
  814a3c:	10800817 	ldw	r2,32(r2)
  814a40:	10c00094 	ori	r3,r2,2
  814a44:	e0bffc17 	ldw	r2,-16(fp)
  814a48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814a4c:	e0bffc17 	ldw	r2,-16(fp)
  814a50:	10800017 	ldw	r2,0(r2)
  814a54:	10800104 	addi	r2,r2,4
  814a58:	1007883a 	mov	r3,r2
  814a5c:	e0bffc17 	ldw	r2,-16(fp)
  814a60:	10800817 	ldw	r2,32(r2)
  814a64:	18800035 	stwio	r2,0(r3)
  814a68:	e0bffa17 	ldw	r2,-24(fp)
  814a6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814a70:	e0bff817 	ldw	r2,-32(fp)
  814a74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  814a78:	e0bffe17 	ldw	r2,-8(fp)
  814a7c:	0080100e 	bge	zero,r2,814ac0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  814a80:	e0bfff17 	ldw	r2,-4(fp)
  814a84:	1090000c 	andi	r2,r2,16384
  814a88:	1000101e 	bne	r2,zero,814acc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814a8c:	0001883a 	nop
  814a90:	e0bffc17 	ldw	r2,-16(fp)
  814a94:	10c00d17 	ldw	r3,52(r2)
  814a98:	e0bff517 	ldw	r2,-44(fp)
  814a9c:	1880051e 	bne	r3,r2,814ab4 <altera_avalon_jtag_uart_write+0x1b8>
  814aa0:	e0bffc17 	ldw	r2,-16(fp)
  814aa4:	10c00917 	ldw	r3,36(r2)
  814aa8:	e0bffc17 	ldw	r2,-16(fp)
  814aac:	10800117 	ldw	r2,4(r2)
  814ab0:	18bff736 	bltu	r3,r2,814a90 <__alt_mem_onchip_mem+0xff80ca90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  814ab4:	e0bffc17 	ldw	r2,-16(fp)
  814ab8:	10800917 	ldw	r2,36(r2)
  814abc:	1000051e 	bne	r2,zero,814ad4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  814ac0:	e0bffe17 	ldw	r2,-8(fp)
  814ac4:	00bfd016 	blt	zero,r2,814a08 <__alt_mem_onchip_mem+0xff80ca08>
  814ac8:	00000306 	br	814ad8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  814acc:	0001883a 	nop
  814ad0:	00000106 	br	814ad8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  814ad4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  814ad8:	e0fffd17 	ldw	r3,-12(fp)
  814adc:	e0bff717 	ldw	r2,-36(fp)
  814ae0:	18800426 	beq	r3,r2,814af4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  814ae4:	e0fffd17 	ldw	r3,-12(fp)
  814ae8:	e0bff717 	ldw	r2,-36(fp)
  814aec:	1885c83a 	sub	r2,r3,r2
  814af0:	00000606 	br	814b0c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  814af4:	e0bfff17 	ldw	r2,-4(fp)
  814af8:	1090000c 	andi	r2,r2,16384
  814afc:	10000226 	beq	r2,zero,814b08 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  814b00:	00bffd44 	movi	r2,-11
  814b04:	00000106 	br	814b0c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  814b08:	00bffec4 	movi	r2,-5
}
  814b0c:	e037883a 	mov	sp,fp
  814b10:	dfc00117 	ldw	ra,4(sp)
  814b14:	df000017 	ldw	fp,0(sp)
  814b18:	dec00204 	addi	sp,sp,8
  814b1c:	f800283a 	ret

00814b20 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  814b20:	defffa04 	addi	sp,sp,-24
  814b24:	dfc00515 	stw	ra,20(sp)
  814b28:	df000415 	stw	fp,16(sp)
  814b2c:	df000404 	addi	fp,sp,16
  814b30:	e13ffe15 	stw	r4,-8(fp)
  814b34:	2805883a 	mov	r2,r5
  814b38:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  814b3c:	e0bffe17 	ldw	r2,-8(fp)
  814b40:	10800017 	ldw	r2,0(r2)
  814b44:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  814b48:	008003f4 	movhi	r2,15
  814b4c:	10909004 	addi	r2,r2,16960
  814b50:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  814b54:	e0bffe17 	ldw	r2,-8(fp)
  814b58:	10800803 	ldbu	r2,32(r2)
  814b5c:	10803fcc 	andi	r2,r2,255
  814b60:	1080201c 	xori	r2,r2,128
  814b64:	10bfe004 	addi	r2,r2,-128
  814b68:	1000151e 	bne	r2,zero,814bc0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814b6c:	00000906 	br	814b94 <lcd_write_command+0x74>
    if (--i == 0)
  814b70:	e0bffc17 	ldw	r2,-16(fp)
  814b74:	10bfffc4 	addi	r2,r2,-1
  814b78:	e0bffc15 	stw	r2,-16(fp)
  814b7c:	e0bffc17 	ldw	r2,-16(fp)
  814b80:	1000041e 	bne	r2,zero,814b94 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  814b84:	e0bffe17 	ldw	r2,-8(fp)
  814b88:	00c00044 	movi	r3,1
  814b8c:	10c00805 	stb	r3,32(r2)
      return;
  814b90:	00000c06 	br	814bc4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814b94:	e0bffd17 	ldw	r2,-12(fp)
  814b98:	10800104 	addi	r2,r2,4
  814b9c:	10800037 	ldwio	r2,0(r2)
  814ba0:	1080200c 	andi	r2,r2,128
  814ba4:	103ff21e 	bne	r2,zero,814b70 <__alt_mem_onchip_mem+0xff80cb70>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  814ba8:	01001904 	movi	r4,100
  814bac:	0813e500 	call	813e50 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  814bb0:	e0bffd17 	ldw	r2,-12(fp)
  814bb4:	e0ffff03 	ldbu	r3,-4(fp)
  814bb8:	10c00035 	stwio	r3,0(r2)
  814bbc:	00000106 	br	814bc4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  814bc0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  814bc4:	e037883a 	mov	sp,fp
  814bc8:	dfc00117 	ldw	ra,4(sp)
  814bcc:	df000017 	ldw	fp,0(sp)
  814bd0:	dec00204 	addi	sp,sp,8
  814bd4:	f800283a 	ret

00814bd8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  814bd8:	defffa04 	addi	sp,sp,-24
  814bdc:	dfc00515 	stw	ra,20(sp)
  814be0:	df000415 	stw	fp,16(sp)
  814be4:	df000404 	addi	fp,sp,16
  814be8:	e13ffe15 	stw	r4,-8(fp)
  814bec:	2805883a 	mov	r2,r5
  814bf0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  814bf4:	e0bffe17 	ldw	r2,-8(fp)
  814bf8:	10800017 	ldw	r2,0(r2)
  814bfc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  814c00:	008003f4 	movhi	r2,15
  814c04:	10909004 	addi	r2,r2,16960
  814c08:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  814c0c:	e0bffe17 	ldw	r2,-8(fp)
  814c10:	10800803 	ldbu	r2,32(r2)
  814c14:	10803fcc 	andi	r2,r2,255
  814c18:	1080201c 	xori	r2,r2,128
  814c1c:	10bfe004 	addi	r2,r2,-128
  814c20:	10001d1e 	bne	r2,zero,814c98 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814c24:	00000906 	br	814c4c <lcd_write_data+0x74>
    if (--i == 0)
  814c28:	e0bffc17 	ldw	r2,-16(fp)
  814c2c:	10bfffc4 	addi	r2,r2,-1
  814c30:	e0bffc15 	stw	r2,-16(fp)
  814c34:	e0bffc17 	ldw	r2,-16(fp)
  814c38:	1000041e 	bne	r2,zero,814c4c <lcd_write_data+0x74>
    {
      sp->broken = 1;
  814c3c:	e0bffe17 	ldw	r2,-8(fp)
  814c40:	00c00044 	movi	r3,1
  814c44:	10c00805 	stb	r3,32(r2)
      return;
  814c48:	00001406 	br	814c9c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814c4c:	e0bffd17 	ldw	r2,-12(fp)
  814c50:	10800104 	addi	r2,r2,4
  814c54:	10800037 	ldwio	r2,0(r2)
  814c58:	1080200c 	andi	r2,r2,128
  814c5c:	103ff21e 	bne	r2,zero,814c28 <__alt_mem_onchip_mem+0xff80cc28>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  814c60:	01001904 	movi	r4,100
  814c64:	0813e500 	call	813e50 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  814c68:	e0bffd17 	ldw	r2,-12(fp)
  814c6c:	10800204 	addi	r2,r2,8
  814c70:	1007883a 	mov	r3,r2
  814c74:	e0bfff03 	ldbu	r2,-4(fp)
  814c78:	18800035 	stwio	r2,0(r3)

  sp->address++;
  814c7c:	e0bffe17 	ldw	r2,-8(fp)
  814c80:	108008c3 	ldbu	r2,35(r2)
  814c84:	10800044 	addi	r2,r2,1
  814c88:	1007883a 	mov	r3,r2
  814c8c:	e0bffe17 	ldw	r2,-8(fp)
  814c90:	10c008c5 	stb	r3,35(r2)
  814c94:	00000106 	br	814c9c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  814c98:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  814c9c:	e037883a 	mov	sp,fp
  814ca0:	dfc00117 	ldw	ra,4(sp)
  814ca4:	df000017 	ldw	fp,0(sp)
  814ca8:	dec00204 	addi	sp,sp,8
  814cac:	f800283a 	ret

00814cb0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  814cb0:	defffc04 	addi	sp,sp,-16
  814cb4:	dfc00315 	stw	ra,12(sp)
  814cb8:	df000215 	stw	fp,8(sp)
  814cbc:	df000204 	addi	fp,sp,8
  814cc0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  814cc4:	01400044 	movi	r5,1
  814cc8:	e13fff17 	ldw	r4,-4(fp)
  814ccc:	0814b200 	call	814b20 <lcd_write_command>

  sp->x = 0;
  814cd0:	e0bfff17 	ldw	r2,-4(fp)
  814cd4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  814cd8:	e0bfff17 	ldw	r2,-4(fp)
  814cdc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  814ce0:	e0bfff17 	ldw	r2,-4(fp)
  814ce4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814ce8:	e03ffe15 	stw	zero,-8(fp)
  814cec:	00001b06 	br	814d5c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  814cf0:	e0bffe17 	ldw	r2,-8(fp)
  814cf4:	108018e4 	muli	r2,r2,99
  814cf8:	10801004 	addi	r2,r2,64
  814cfc:	e0ffff17 	ldw	r3,-4(fp)
  814d00:	1885883a 	add	r2,r3,r2
  814d04:	01801444 	movi	r6,81
  814d08:	01400804 	movi	r5,32
  814d0c:	1009883a 	mov	r4,r2
  814d10:	0808e640 	call	808e64 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  814d14:	e0bffe17 	ldw	r2,-8(fp)
  814d18:	108018e4 	muli	r2,r2,99
  814d1c:	10800c04 	addi	r2,r2,48
  814d20:	e0ffff17 	ldw	r3,-4(fp)
  814d24:	1885883a 	add	r2,r3,r2
  814d28:	01800404 	movi	r6,16
  814d2c:	01400804 	movi	r5,32
  814d30:	1009883a 	mov	r4,r2
  814d34:	0808e640 	call	808e64 <memset>
    sp->line[y].width = 0;
  814d38:	e0ffff17 	ldw	r3,-4(fp)
  814d3c:	e0bffe17 	ldw	r2,-8(fp)
  814d40:	108018e4 	muli	r2,r2,99
  814d44:	1885883a 	add	r2,r3,r2
  814d48:	10802444 	addi	r2,r2,145
  814d4c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814d50:	e0bffe17 	ldw	r2,-8(fp)
  814d54:	10800044 	addi	r2,r2,1
  814d58:	e0bffe15 	stw	r2,-8(fp)
  814d5c:	e0bffe17 	ldw	r2,-8(fp)
  814d60:	10800090 	cmplti	r2,r2,2
  814d64:	103fe21e 	bne	r2,zero,814cf0 <__alt_mem_onchip_mem+0xff80ccf0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  814d68:	0001883a 	nop
  814d6c:	e037883a 	mov	sp,fp
  814d70:	dfc00117 	ldw	ra,4(sp)
  814d74:	df000017 	ldw	fp,0(sp)
  814d78:	dec00204 	addi	sp,sp,8
  814d7c:	f800283a 	ret

00814d80 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  814d80:	defff704 	addi	sp,sp,-36
  814d84:	dfc00815 	stw	ra,32(sp)
  814d88:	df000715 	stw	fp,28(sp)
  814d8c:	df000704 	addi	fp,sp,28
  814d90:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  814d94:	e0bfff17 	ldw	r2,-4(fp)
  814d98:	10800943 	ldbu	r2,37(r2)
  814d9c:	10803fcc 	andi	r2,r2,255
  814da0:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814da4:	e03ff915 	stw	zero,-28(fp)
  814da8:	00006706 	br	814f48 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  814dac:	e0ffff17 	ldw	r3,-4(fp)
  814db0:	e0bff917 	ldw	r2,-28(fp)
  814db4:	108018e4 	muli	r2,r2,99
  814db8:	1885883a 	add	r2,r3,r2
  814dbc:	10802444 	addi	r2,r2,145
  814dc0:	10800003 	ldbu	r2,0(r2)
  814dc4:	10803fcc 	andi	r2,r2,255
  814dc8:	1080201c 	xori	r2,r2,128
  814dcc:	10bfe004 	addi	r2,r2,-128
  814dd0:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  814dd4:	e0ffff17 	ldw	r3,-4(fp)
  814dd8:	e0bff917 	ldw	r2,-28(fp)
  814ddc:	108018e4 	muli	r2,r2,99
  814de0:	1885883a 	add	r2,r3,r2
  814de4:	10802484 	addi	r2,r2,146
  814de8:	10800003 	ldbu	r2,0(r2)
  814dec:	10c03fcc 	andi	r3,r2,255
  814df0:	e0bffc17 	ldw	r2,-16(fp)
  814df4:	1885383a 	mul	r2,r3,r2
  814df8:	1005d23a 	srai	r2,r2,8
  814dfc:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  814e00:	e0fffb17 	ldw	r3,-20(fp)
  814e04:	e0bffd17 	ldw	r2,-12(fp)
  814e08:	18800116 	blt	r3,r2,814e10 <lcd_repaint_screen+0x90>
      offset = 0;
  814e0c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  814e10:	e03ffa15 	stw	zero,-24(fp)
  814e14:	00004606 	br	814f30 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  814e18:	e0fffa17 	ldw	r3,-24(fp)
  814e1c:	e0bffb17 	ldw	r2,-20(fp)
  814e20:	1885883a 	add	r2,r3,r2
  814e24:	e17ffd17 	ldw	r5,-12(fp)
  814e28:	1009883a 	mov	r4,r2
  814e2c:	0811cbc0 	call	811cbc <__modsi3>
  814e30:	1009883a 	mov	r4,r2
  814e34:	e0ffff17 	ldw	r3,-4(fp)
  814e38:	e0bff917 	ldw	r2,-28(fp)
  814e3c:	108018e4 	muli	r2,r2,99
  814e40:	1885883a 	add	r2,r3,r2
  814e44:	1105883a 	add	r2,r2,r4
  814e48:	10801004 	addi	r2,r2,64
  814e4c:	10800003 	ldbu	r2,0(r2)
  814e50:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  814e54:	e0ffff17 	ldw	r3,-4(fp)
  814e58:	e0bff917 	ldw	r2,-28(fp)
  814e5c:	108018e4 	muli	r2,r2,99
  814e60:	1887883a 	add	r3,r3,r2
  814e64:	e0bffa17 	ldw	r2,-24(fp)
  814e68:	1885883a 	add	r2,r3,r2
  814e6c:	10800c04 	addi	r2,r2,48
  814e70:	10800003 	ldbu	r2,0(r2)
  814e74:	10c03fcc 	andi	r3,r2,255
  814e78:	18c0201c 	xori	r3,r3,128
  814e7c:	18ffe004 	addi	r3,r3,-128
  814e80:	e0bffe07 	ldb	r2,-8(fp)
  814e84:	18802726 	beq	r3,r2,814f24 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  814e88:	e0fff917 	ldw	r3,-28(fp)
  814e8c:	d0a01804 	addi	r2,gp,-32672
  814e90:	1885883a 	add	r2,r3,r2
  814e94:	10800003 	ldbu	r2,0(r2)
  814e98:	1007883a 	mov	r3,r2
  814e9c:	e0bffa17 	ldw	r2,-24(fp)
  814ea0:	1885883a 	add	r2,r3,r2
  814ea4:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  814ea8:	e0fffe43 	ldbu	r3,-7(fp)
  814eac:	e0bfff17 	ldw	r2,-4(fp)
  814eb0:	108008c3 	ldbu	r2,35(r2)
  814eb4:	10803fcc 	andi	r2,r2,255
  814eb8:	1080201c 	xori	r2,r2,128
  814ebc:	10bfe004 	addi	r2,r2,-128
  814ec0:	18800a26 	beq	r3,r2,814eec <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  814ec4:	e0fffe43 	ldbu	r3,-7(fp)
  814ec8:	00bfe004 	movi	r2,-128
  814ecc:	1884b03a 	or	r2,r3,r2
  814ed0:	10803fcc 	andi	r2,r2,255
  814ed4:	100b883a 	mov	r5,r2
  814ed8:	e13fff17 	ldw	r4,-4(fp)
  814edc:	0814b200 	call	814b20 <lcd_write_command>
          sp->address = address;
  814ee0:	e0fffe43 	ldbu	r3,-7(fp)
  814ee4:	e0bfff17 	ldw	r2,-4(fp)
  814ee8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  814eec:	e0bffe03 	ldbu	r2,-8(fp)
  814ef0:	10803fcc 	andi	r2,r2,255
  814ef4:	100b883a 	mov	r5,r2
  814ef8:	e13fff17 	ldw	r4,-4(fp)
  814efc:	0814bd80 	call	814bd8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  814f00:	e0ffff17 	ldw	r3,-4(fp)
  814f04:	e0bff917 	ldw	r2,-28(fp)
  814f08:	108018e4 	muli	r2,r2,99
  814f0c:	1887883a 	add	r3,r3,r2
  814f10:	e0bffa17 	ldw	r2,-24(fp)
  814f14:	1885883a 	add	r2,r3,r2
  814f18:	10800c04 	addi	r2,r2,48
  814f1c:	e0fffe03 	ldbu	r3,-8(fp)
  814f20:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  814f24:	e0bffa17 	ldw	r2,-24(fp)
  814f28:	10800044 	addi	r2,r2,1
  814f2c:	e0bffa15 	stw	r2,-24(fp)
  814f30:	e0bffa17 	ldw	r2,-24(fp)
  814f34:	10800410 	cmplti	r2,r2,16
  814f38:	103fb71e 	bne	r2,zero,814e18 <__alt_mem_onchip_mem+0xff80ce18>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814f3c:	e0bff917 	ldw	r2,-28(fp)
  814f40:	10800044 	addi	r2,r2,1
  814f44:	e0bff915 	stw	r2,-28(fp)
  814f48:	e0bff917 	ldw	r2,-28(fp)
  814f4c:	10800090 	cmplti	r2,r2,2
  814f50:	103f961e 	bne	r2,zero,814dac <__alt_mem_onchip_mem+0xff80cdac>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  814f54:	0001883a 	nop
  814f58:	e037883a 	mov	sp,fp
  814f5c:	dfc00117 	ldw	ra,4(sp)
  814f60:	df000017 	ldw	fp,0(sp)
  814f64:	dec00204 	addi	sp,sp,8
  814f68:	f800283a 	ret

00814f6c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  814f6c:	defffc04 	addi	sp,sp,-16
  814f70:	dfc00315 	stw	ra,12(sp)
  814f74:	df000215 	stw	fp,8(sp)
  814f78:	df000204 	addi	fp,sp,8
  814f7c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814f80:	e03ffe15 	stw	zero,-8(fp)
  814f84:	00001d06 	br	814ffc <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  814f88:	e0bffe17 	ldw	r2,-8(fp)
  814f8c:	00800f16 	blt	zero,r2,814fcc <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  814f90:	e0bffe17 	ldw	r2,-8(fp)
  814f94:	108018e4 	muli	r2,r2,99
  814f98:	10801004 	addi	r2,r2,64
  814f9c:	e0ffff17 	ldw	r3,-4(fp)
  814fa0:	1889883a 	add	r4,r3,r2
  814fa4:	e0bffe17 	ldw	r2,-8(fp)
  814fa8:	10800044 	addi	r2,r2,1
  814fac:	108018e4 	muli	r2,r2,99
  814fb0:	10801004 	addi	r2,r2,64
  814fb4:	e0ffff17 	ldw	r3,-4(fp)
  814fb8:	1885883a 	add	r2,r3,r2
  814fbc:	01801404 	movi	r6,80
  814fc0:	100b883a 	mov	r5,r2
  814fc4:	080dcd80 	call	80dcd8 <memcpy>
  814fc8:	00000906 	br	814ff0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  814fcc:	e0bffe17 	ldw	r2,-8(fp)
  814fd0:	108018e4 	muli	r2,r2,99
  814fd4:	10801004 	addi	r2,r2,64
  814fd8:	e0ffff17 	ldw	r3,-4(fp)
  814fdc:	1885883a 	add	r2,r3,r2
  814fe0:	01801404 	movi	r6,80
  814fe4:	01400804 	movi	r5,32
  814fe8:	1009883a 	mov	r4,r2
  814fec:	0808e640 	call	808e64 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814ff0:	e0bffe17 	ldw	r2,-8(fp)
  814ff4:	10800044 	addi	r2,r2,1
  814ff8:	e0bffe15 	stw	r2,-8(fp)
  814ffc:	e0bffe17 	ldw	r2,-8(fp)
  815000:	10800090 	cmplti	r2,r2,2
  815004:	103fe01e 	bne	r2,zero,814f88 <__alt_mem_onchip_mem+0xff80cf88>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  815008:	e0bfff17 	ldw	r2,-4(fp)
  81500c:	10800883 	ldbu	r2,34(r2)
  815010:	10bfffc4 	addi	r2,r2,-1
  815014:	1007883a 	mov	r3,r2
  815018:	e0bfff17 	ldw	r2,-4(fp)
  81501c:	10c00885 	stb	r3,34(r2)
}
  815020:	0001883a 	nop
  815024:	e037883a 	mov	sp,fp
  815028:	dfc00117 	ldw	ra,4(sp)
  81502c:	df000017 	ldw	fp,0(sp)
  815030:	dec00204 	addi	sp,sp,8
  815034:	f800283a 	ret

00815038 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  815038:	defff904 	addi	sp,sp,-28
  81503c:	dfc00615 	stw	ra,24(sp)
  815040:	df000515 	stw	fp,20(sp)
  815044:	df000504 	addi	fp,sp,20
  815048:	e13ffe15 	stw	r4,-8(fp)
  81504c:	2805883a 	mov	r2,r5
  815050:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  815054:	e03ffb15 	stw	zero,-20(fp)
  815058:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  81505c:	e0bffe17 	ldw	r2,-8(fp)
  815060:	10800a03 	ldbu	r2,40(r2)
  815064:	10803fcc 	andi	r2,r2,255
  815068:	1080201c 	xori	r2,r2,128
  81506c:	10bfe004 	addi	r2,r2,-128
  815070:	108016d8 	cmpnei	r2,r2,91
  815074:	1000411e 	bne	r2,zero,81517c <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  815078:	e0bffe17 	ldw	r2,-8(fp)
  81507c:	10800a04 	addi	r2,r2,40
  815080:	10800044 	addi	r2,r2,1
  815084:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  815088:	00000c06 	br	8150bc <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  81508c:	e0bffb17 	ldw	r2,-20(fp)
  815090:	10c002a4 	muli	r3,r2,10
  815094:	e0bffd17 	ldw	r2,-12(fp)
  815098:	11000044 	addi	r4,r2,1
  81509c:	e13ffd15 	stw	r4,-12(fp)
  8150a0:	10800003 	ldbu	r2,0(r2)
  8150a4:	10803fcc 	andi	r2,r2,255
  8150a8:	1080201c 	xori	r2,r2,128
  8150ac:	10bfe004 	addi	r2,r2,-128
  8150b0:	10bff404 	addi	r2,r2,-48
  8150b4:	1885883a 	add	r2,r3,r2
  8150b8:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8150bc:	d0e01917 	ldw	r3,-32668(gp)
  8150c0:	e0bffd17 	ldw	r2,-12(fp)
  8150c4:	10800003 	ldbu	r2,0(r2)
  8150c8:	10803fcc 	andi	r2,r2,255
  8150cc:	1080201c 	xori	r2,r2,128
  8150d0:	10bfe004 	addi	r2,r2,-128
  8150d4:	10800044 	addi	r2,r2,1
  8150d8:	1885883a 	add	r2,r3,r2
  8150dc:	10800003 	ldbu	r2,0(r2)
  8150e0:	10803fcc 	andi	r2,r2,255
  8150e4:	1080010c 	andi	r2,r2,4
  8150e8:	103fe81e 	bne	r2,zero,81508c <__alt_mem_onchip_mem+0xff80d08c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8150ec:	e0bffd17 	ldw	r2,-12(fp)
  8150f0:	10800003 	ldbu	r2,0(r2)
  8150f4:	10803fcc 	andi	r2,r2,255
  8150f8:	1080201c 	xori	r2,r2,128
  8150fc:	10bfe004 	addi	r2,r2,-128
  815100:	10800ed8 	cmpnei	r2,r2,59
  815104:	10001f1e 	bne	r2,zero,815184 <lcd_handle_escape+0x14c>
    {
      ptr++;
  815108:	e0bffd17 	ldw	r2,-12(fp)
  81510c:	10800044 	addi	r2,r2,1
  815110:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  815114:	00000c06 	br	815148 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  815118:	e0bffc17 	ldw	r2,-16(fp)
  81511c:	10c002a4 	muli	r3,r2,10
  815120:	e0bffd17 	ldw	r2,-12(fp)
  815124:	11000044 	addi	r4,r2,1
  815128:	e13ffd15 	stw	r4,-12(fp)
  81512c:	10800003 	ldbu	r2,0(r2)
  815130:	10803fcc 	andi	r2,r2,255
  815134:	1080201c 	xori	r2,r2,128
  815138:	10bfe004 	addi	r2,r2,-128
  81513c:	10bff404 	addi	r2,r2,-48
  815140:	1885883a 	add	r2,r3,r2
  815144:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  815148:	d0e01917 	ldw	r3,-32668(gp)
  81514c:	e0bffd17 	ldw	r2,-12(fp)
  815150:	10800003 	ldbu	r2,0(r2)
  815154:	10803fcc 	andi	r2,r2,255
  815158:	1080201c 	xori	r2,r2,128
  81515c:	10bfe004 	addi	r2,r2,-128
  815160:	10800044 	addi	r2,r2,1
  815164:	1885883a 	add	r2,r3,r2
  815168:	10800003 	ldbu	r2,0(r2)
  81516c:	10803fcc 	andi	r2,r2,255
  815170:	1080010c 	andi	r2,r2,4
  815174:	103fe81e 	bne	r2,zero,815118 <__alt_mem_onchip_mem+0xff80d118>
  815178:	00000206 	br	815184 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  81517c:	00bfffc4 	movi	r2,-1
  815180:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  815184:	e0bfff07 	ldb	r2,-4(fp)
  815188:	10c012a0 	cmpeqi	r3,r2,74
  81518c:	1800291e 	bne	r3,zero,815234 <lcd_handle_escape+0x1fc>
  815190:	10c012c8 	cmpgei	r3,r2,75
  815194:	1800031e 	bne	r3,zero,8151a4 <lcd_handle_escape+0x16c>
  815198:	10801220 	cmpeqi	r2,r2,72
  81519c:	1000061e 	bne	r2,zero,8151b8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8151a0:	00004a06 	br	8152cc <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  8151a4:	10c012e0 	cmpeqi	r3,r2,75
  8151a8:	1800281e 	bne	r3,zero,81524c <lcd_handle_escape+0x214>
  8151ac:	108019a0 	cmpeqi	r2,r2,102
  8151b0:	1000011e 	bne	r2,zero,8151b8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8151b4:	00004506 	br	8152cc <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8151b8:	e0bffc17 	ldw	r2,-16(fp)
  8151bc:	0080050e 	bge	zero,r2,8151d4 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  8151c0:	e0bffc17 	ldw	r2,-16(fp)
  8151c4:	10bfffc4 	addi	r2,r2,-1
  8151c8:	1007883a 	mov	r3,r2
  8151cc:	e0bffe17 	ldw	r2,-8(fp)
  8151d0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8151d4:	e0bffb17 	ldw	r2,-20(fp)
  8151d8:	0080370e 	bge	zero,r2,8152b8 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  8151dc:	e0bffb17 	ldw	r2,-20(fp)
  8151e0:	10bfffc4 	addi	r2,r2,-1
  8151e4:	1007883a 	mov	r3,r2
  8151e8:	e0bffe17 	ldw	r2,-8(fp)
  8151ec:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8151f0:	e0bffe17 	ldw	r2,-8(fp)
  8151f4:	10800883 	ldbu	r2,34(r2)
  8151f8:	10803fcc 	andi	r2,r2,255
  8151fc:	10800170 	cmpltui	r2,r2,5
  815200:	1000061e 	bne	r2,zero,81521c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  815204:	e0bffe17 	ldw	r2,-8(fp)
  815208:	00c00104 	movi	r3,4
  81520c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  815210:	00000206 	br	81521c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  815214:	e13ffe17 	ldw	r4,-8(fp)
  815218:	0814f6c0 	call	814f6c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  81521c:	e0bffe17 	ldw	r2,-8(fp)
  815220:	10800883 	ldbu	r2,34(r2)
  815224:	10803fcc 	andi	r2,r2,255
  815228:	108000e8 	cmpgeui	r2,r2,3
  81522c:	103ff91e 	bne	r2,zero,815214 <__alt_mem_onchip_mem+0xff80d214>
        lcd_scroll_up(sp);
    }
    break;
  815230:	00002106 	br	8152b8 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  815234:	e0bffb17 	ldw	r2,-20(fp)
  815238:	10800098 	cmpnei	r2,r2,2
  81523c:	1000201e 	bne	r2,zero,8152c0 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  815240:	e13ffe17 	ldw	r4,-8(fp)
  815244:	0814cb00 	call	814cb0 <lcd_clear_screen>
    break;
  815248:	00001d06 	br	8152c0 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  81524c:	e0bffb17 	ldw	r2,-20(fp)
  815250:	00801d16 	blt	zero,r2,8152c8 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  815254:	e0bffe17 	ldw	r2,-8(fp)
  815258:	10800843 	ldbu	r2,33(r2)
  81525c:	10803fcc 	andi	r2,r2,255
  815260:	10801428 	cmpgeui	r2,r2,80
  815264:	1000181e 	bne	r2,zero,8152c8 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  815268:	e0bffe17 	ldw	r2,-8(fp)
  81526c:	10800883 	ldbu	r2,34(r2)
  815270:	10803fcc 	andi	r2,r2,255
  815274:	108018e4 	muli	r2,r2,99
  815278:	10801004 	addi	r2,r2,64
  81527c:	e0fffe17 	ldw	r3,-8(fp)
  815280:	1887883a 	add	r3,r3,r2
  815284:	e0bffe17 	ldw	r2,-8(fp)
  815288:	10800843 	ldbu	r2,33(r2)
  81528c:	10803fcc 	andi	r2,r2,255
  815290:	1889883a 	add	r4,r3,r2
  815294:	e0bffe17 	ldw	r2,-8(fp)
  815298:	10800843 	ldbu	r2,33(r2)
  81529c:	10803fcc 	andi	r2,r2,255
  8152a0:	00c01404 	movi	r3,80
  8152a4:	1885c83a 	sub	r2,r3,r2
  8152a8:	100d883a 	mov	r6,r2
  8152ac:	01400804 	movi	r5,32
  8152b0:	0808e640 	call	808e64 <memset>
    }
    break;
  8152b4:	00000406 	br	8152c8 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  8152b8:	0001883a 	nop
  8152bc:	00000306 	br	8152cc <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  8152c0:	0001883a 	nop
  8152c4:	00000106 	br	8152cc <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  8152c8:	0001883a 	nop
  }
}
  8152cc:	0001883a 	nop
  8152d0:	e037883a 	mov	sp,fp
  8152d4:	dfc00117 	ldw	ra,4(sp)
  8152d8:	df000017 	ldw	fp,0(sp)
  8152dc:	dec00204 	addi	sp,sp,8
  8152e0:	f800283a 	ret

008152e4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8152e4:	defff304 	addi	sp,sp,-52
  8152e8:	dfc00c15 	stw	ra,48(sp)
  8152ec:	df000b15 	stw	fp,44(sp)
  8152f0:	df000b04 	addi	fp,sp,44
  8152f4:	e13ffc15 	stw	r4,-16(fp)
  8152f8:	e17ffd15 	stw	r5,-12(fp)
  8152fc:	e1bffe15 	stw	r6,-8(fp)
  815300:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  815304:	e0bffe17 	ldw	r2,-8(fp)
  815308:	e0fffd17 	ldw	r3,-12(fp)
  81530c:	1885883a 	add	r2,r3,r2
  815310:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  815314:	e0bffc17 	ldw	r2,-16(fp)
  815318:	00c00044 	movi	r3,1
  81531c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  815320:	00009906 	br	815588 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  815324:	e0bffd17 	ldw	r2,-12(fp)
  815328:	10800003 	ldbu	r2,0(r2)
  81532c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  815330:	e0bffc17 	ldw	r2,-16(fp)
  815334:	10800903 	ldbu	r2,36(r2)
  815338:	10803fcc 	andi	r2,r2,255
  81533c:	1080201c 	xori	r2,r2,128
  815340:	10bfe004 	addi	r2,r2,-128
  815344:	10003716 	blt	r2,zero,815424 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  815348:	e0bffc17 	ldw	r2,-16(fp)
  81534c:	10800903 	ldbu	r2,36(r2)
  815350:	10803fcc 	andi	r2,r2,255
  815354:	1080201c 	xori	r2,r2,128
  815358:	10bfe004 	addi	r2,r2,-128
  81535c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  815360:	e0bffa17 	ldw	r2,-24(fp)
  815364:	1000031e 	bne	r2,zero,815374 <altera_avalon_lcd_16207_write+0x90>
  815368:	e0bff907 	ldb	r2,-28(fp)
  81536c:	108016d8 	cmpnei	r2,r2,91
  815370:	10000d1e 	bne	r2,zero,8153a8 <altera_avalon_lcd_16207_write+0xc4>
  815374:	e0bffa17 	ldw	r2,-24(fp)
  815378:	10001826 	beq	r2,zero,8153dc <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  81537c:	d0e01917 	ldw	r3,-32668(gp)
  815380:	e0bff907 	ldb	r2,-28(fp)
  815384:	10800044 	addi	r2,r2,1
  815388:	1885883a 	add	r2,r3,r2
  81538c:	10800003 	ldbu	r2,0(r2)
  815390:	10803fcc 	andi	r2,r2,255
  815394:	1080010c 	andi	r2,r2,4
  815398:	1000101e 	bne	r2,zero,8153dc <altera_avalon_lcd_16207_write+0xf8>
  81539c:	e0bff907 	ldb	r2,-28(fp)
  8153a0:	10800ee0 	cmpeqi	r2,r2,59
  8153a4:	10000d1e 	bne	r2,zero,8153dc <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  8153a8:	e0fffc17 	ldw	r3,-16(fp)
  8153ac:	e0bffa17 	ldw	r2,-24(fp)
  8153b0:	1885883a 	add	r2,r3,r2
  8153b4:	10800a04 	addi	r2,r2,40
  8153b8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8153bc:	e0bff907 	ldb	r2,-28(fp)
  8153c0:	100b883a 	mov	r5,r2
  8153c4:	e13ffc17 	ldw	r4,-16(fp)
  8153c8:	08150380 	call	815038 <lcd_handle_escape>

        sp->esccount = -1;
  8153cc:	e0bffc17 	ldw	r2,-16(fp)
  8153d0:	00ffffc4 	movi	r3,-1
  8153d4:	10c00905 	stb	r3,36(r2)
  8153d8:	00006806 	br	81557c <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  8153dc:	e0bffc17 	ldw	r2,-16(fp)
  8153e0:	10800903 	ldbu	r2,36(r2)
  8153e4:	10803fcc 	andi	r2,r2,255
  8153e8:	108001e8 	cmpgeui	r2,r2,7
  8153ec:	1000631e 	bne	r2,zero,81557c <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  8153f0:	e0fffc17 	ldw	r3,-16(fp)
  8153f4:	e0bffa17 	ldw	r2,-24(fp)
  8153f8:	1885883a 	add	r2,r3,r2
  8153fc:	10800a04 	addi	r2,r2,40
  815400:	e0fff903 	ldbu	r3,-28(fp)
  815404:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  815408:	e0bffc17 	ldw	r2,-16(fp)
  81540c:	10800903 	ldbu	r2,36(r2)
  815410:	10800044 	addi	r2,r2,1
  815414:	1007883a 	mov	r3,r2
  815418:	e0bffc17 	ldw	r2,-16(fp)
  81541c:	10c00905 	stb	r3,36(r2)
  815420:	00005606 	br	81557c <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  815424:	e0bff907 	ldb	r2,-28(fp)
  815428:	108006d8 	cmpnei	r2,r2,27
  81542c:	1000031e 	bne	r2,zero,81543c <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  815430:	e0bffc17 	ldw	r2,-16(fp)
  815434:	10000905 	stb	zero,36(r2)
  815438:	00005006 	br	81557c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  81543c:	e0bff907 	ldb	r2,-28(fp)
  815440:	10800358 	cmpnei	r2,r2,13
  815444:	1000031e 	bne	r2,zero,815454 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  815448:	e0bffc17 	ldw	r2,-16(fp)
  81544c:	10000845 	stb	zero,33(r2)
  815450:	00004a06 	br	81557c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  815454:	e0bff907 	ldb	r2,-28(fp)
  815458:	10800298 	cmpnei	r2,r2,10
  81545c:	1000101e 	bne	r2,zero,8154a0 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  815460:	e0bffc17 	ldw	r2,-16(fp)
  815464:	10000845 	stb	zero,33(r2)
      sp->y++;
  815468:	e0bffc17 	ldw	r2,-16(fp)
  81546c:	10800883 	ldbu	r2,34(r2)
  815470:	10800044 	addi	r2,r2,1
  815474:	1007883a 	mov	r3,r2
  815478:	e0bffc17 	ldw	r2,-16(fp)
  81547c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  815480:	e0bffc17 	ldw	r2,-16(fp)
  815484:	10800883 	ldbu	r2,34(r2)
  815488:	10803fcc 	andi	r2,r2,255
  81548c:	108000f0 	cmpltui	r2,r2,3
  815490:	10003a1e 	bne	r2,zero,81557c <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  815494:	e13ffc17 	ldw	r4,-16(fp)
  815498:	0814f6c0 	call	814f6c <lcd_scroll_up>
  81549c:	00003706 	br	81557c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8154a0:	e0bff907 	ldb	r2,-28(fp)
  8154a4:	10800218 	cmpnei	r2,r2,8
  8154a8:	10000b1e 	bne	r2,zero,8154d8 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  8154ac:	e0bffc17 	ldw	r2,-16(fp)
  8154b0:	10800843 	ldbu	r2,33(r2)
  8154b4:	10803fcc 	andi	r2,r2,255
  8154b8:	10003026 	beq	r2,zero,81557c <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  8154bc:	e0bffc17 	ldw	r2,-16(fp)
  8154c0:	10800843 	ldbu	r2,33(r2)
  8154c4:	10bfffc4 	addi	r2,r2,-1
  8154c8:	1007883a 	mov	r3,r2
  8154cc:	e0bffc17 	ldw	r2,-16(fp)
  8154d0:	10c00845 	stb	r3,33(r2)
  8154d4:	00002906 	br	81557c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  8154d8:	d0e01917 	ldw	r3,-32668(gp)
  8154dc:	e0bff907 	ldb	r2,-28(fp)
  8154e0:	10800044 	addi	r2,r2,1
  8154e4:	1885883a 	add	r2,r3,r2
  8154e8:	10800003 	ldbu	r2,0(r2)
  8154ec:	10803fcc 	andi	r2,r2,255
  8154f0:	1080201c 	xori	r2,r2,128
  8154f4:	10bfe004 	addi	r2,r2,-128
  8154f8:	108025cc 	andi	r2,r2,151
  8154fc:	10001f26 	beq	r2,zero,81557c <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  815500:	e0bffc17 	ldw	r2,-16(fp)
  815504:	10800883 	ldbu	r2,34(r2)
  815508:	10803fcc 	andi	r2,r2,255
  81550c:	108000b0 	cmpltui	r2,r2,2
  815510:	1000021e 	bne	r2,zero,81551c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  815514:	e13ffc17 	ldw	r4,-16(fp)
  815518:	0814f6c0 	call	814f6c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81551c:	e0bffc17 	ldw	r2,-16(fp)
  815520:	10800843 	ldbu	r2,33(r2)
  815524:	10803fcc 	andi	r2,r2,255
  815528:	10801428 	cmpgeui	r2,r2,80
  81552c:	10000d1e 	bne	r2,zero,815564 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  815530:	e0bffc17 	ldw	r2,-16(fp)
  815534:	10800883 	ldbu	r2,34(r2)
  815538:	10c03fcc 	andi	r3,r2,255
  81553c:	e0bffc17 	ldw	r2,-16(fp)
  815540:	10800843 	ldbu	r2,33(r2)
  815544:	10803fcc 	andi	r2,r2,255
  815548:	e13ffc17 	ldw	r4,-16(fp)
  81554c:	18c018e4 	muli	r3,r3,99
  815550:	20c7883a 	add	r3,r4,r3
  815554:	1885883a 	add	r2,r3,r2
  815558:	10801004 	addi	r2,r2,64
  81555c:	e0fff903 	ldbu	r3,-28(fp)
  815560:	10c00005 	stb	r3,0(r2)

      sp->x++;
  815564:	e0bffc17 	ldw	r2,-16(fp)
  815568:	10800843 	ldbu	r2,33(r2)
  81556c:	10800044 	addi	r2,r2,1
  815570:	1007883a 	mov	r3,r2
  815574:	e0bffc17 	ldw	r2,-16(fp)
  815578:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  81557c:	e0bffd17 	ldw	r2,-12(fp)
  815580:	10800044 	addi	r2,r2,1
  815584:	e0bffd15 	stw	r2,-12(fp)
  815588:	e0fffd17 	ldw	r3,-12(fp)
  81558c:	e0bff817 	ldw	r2,-32(fp)
  815590:	18bf6436 	bltu	r3,r2,815324 <__alt_mem_onchip_mem+0xff80d324>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  815594:	00800404 	movi	r2,16
  815598:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81559c:	e03ff515 	stw	zero,-44(fp)
  8155a0:	00003706 	br	815680 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8155a4:	00801404 	movi	r2,80
  8155a8:	e0bff715 	stw	r2,-36(fp)
  8155ac:	00001106 	br	8155f4 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  8155b0:	e0bff717 	ldw	r2,-36(fp)
  8155b4:	10bfffc4 	addi	r2,r2,-1
  8155b8:	e13ffc17 	ldw	r4,-16(fp)
  8155bc:	e0fff517 	ldw	r3,-44(fp)
  8155c0:	18c018e4 	muli	r3,r3,99
  8155c4:	20c7883a 	add	r3,r4,r3
  8155c8:	1885883a 	add	r2,r3,r2
  8155cc:	10801004 	addi	r2,r2,64
  8155d0:	10800003 	ldbu	r2,0(r2)
  8155d4:	10803fcc 	andi	r2,r2,255
  8155d8:	1080201c 	xori	r2,r2,128
  8155dc:	10bfe004 	addi	r2,r2,-128
  8155e0:	10800820 	cmpeqi	r2,r2,32
  8155e4:	10000626 	beq	r2,zero,815600 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8155e8:	e0bff717 	ldw	r2,-36(fp)
  8155ec:	10bfffc4 	addi	r2,r2,-1
  8155f0:	e0bff715 	stw	r2,-36(fp)
  8155f4:	e0bff717 	ldw	r2,-36(fp)
  8155f8:	00bfed16 	blt	zero,r2,8155b0 <__alt_mem_onchip_mem+0xff80d5b0>
  8155fc:	00000106 	br	815604 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  815600:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  815604:	e0bff717 	ldw	r2,-36(fp)
  815608:	10800448 	cmpgei	r2,r2,17
  81560c:	1000031e 	bne	r2,zero,81561c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  815610:	00800404 	movi	r2,16
  815614:	e0bff715 	stw	r2,-36(fp)
  815618:	00000306 	br	815628 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  81561c:	e0bff717 	ldw	r2,-36(fp)
  815620:	10800044 	addi	r2,r2,1
  815624:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  815628:	e0bff717 	ldw	r2,-36(fp)
  81562c:	1009883a 	mov	r4,r2
  815630:	e0fffc17 	ldw	r3,-16(fp)
  815634:	e0bff517 	ldw	r2,-44(fp)
  815638:	108018e4 	muli	r2,r2,99
  81563c:	1885883a 	add	r2,r3,r2
  815640:	10802444 	addi	r2,r2,145
  815644:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  815648:	e0fff617 	ldw	r3,-40(fp)
  81564c:	e0bff717 	ldw	r2,-36(fp)
  815650:	1880020e 	bge	r3,r2,81565c <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  815654:	e0bff717 	ldw	r2,-36(fp)
  815658:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  81565c:	e0fffc17 	ldw	r3,-16(fp)
  815660:	e0bff517 	ldw	r2,-44(fp)
  815664:	108018e4 	muli	r2,r2,99
  815668:	1885883a 	add	r2,r3,r2
  81566c:	10802484 	addi	r2,r2,146
  815670:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815674:	e0bff517 	ldw	r2,-44(fp)
  815678:	10800044 	addi	r2,r2,1
  81567c:	e0bff515 	stw	r2,-44(fp)
  815680:	e0bff517 	ldw	r2,-44(fp)
  815684:	10800090 	cmplti	r2,r2,2
  815688:	103fc61e 	bne	r2,zero,8155a4 <__alt_mem_onchip_mem+0xff80d5a4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  81568c:	e0bff617 	ldw	r2,-40(fp)
  815690:	10800448 	cmpgei	r2,r2,17
  815694:	1000031e 	bne	r2,zero,8156a4 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  815698:	e0bffc17 	ldw	r2,-16(fp)
  81569c:	10000985 	stb	zero,38(r2)
  8156a0:	00002e06 	br	81575c <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8156a4:	e0bff617 	ldw	r2,-40(fp)
  8156a8:	1085883a 	add	r2,r2,r2
  8156ac:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8156b0:	e0bff617 	ldw	r2,-40(fp)
  8156b4:	1007883a 	mov	r3,r2
  8156b8:	e0bffc17 	ldw	r2,-16(fp)
  8156bc:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8156c0:	e03ff515 	stw	zero,-44(fp)
  8156c4:	00002206 	br	815750 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8156c8:	e0fffc17 	ldw	r3,-16(fp)
  8156cc:	e0bff517 	ldw	r2,-44(fp)
  8156d0:	108018e4 	muli	r2,r2,99
  8156d4:	1885883a 	add	r2,r3,r2
  8156d8:	10802444 	addi	r2,r2,145
  8156dc:	10800003 	ldbu	r2,0(r2)
  8156e0:	10803fcc 	andi	r2,r2,255
  8156e4:	1080201c 	xori	r2,r2,128
  8156e8:	10bfe004 	addi	r2,r2,-128
  8156ec:	10800450 	cmplti	r2,r2,17
  8156f0:	1000141e 	bne	r2,zero,815744 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8156f4:	e0fffc17 	ldw	r3,-16(fp)
  8156f8:	e0bff517 	ldw	r2,-44(fp)
  8156fc:	108018e4 	muli	r2,r2,99
  815700:	1885883a 	add	r2,r3,r2
  815704:	10802444 	addi	r2,r2,145
  815708:	10800003 	ldbu	r2,0(r2)
  81570c:	10803fcc 	andi	r2,r2,255
  815710:	1080201c 	xori	r2,r2,128
  815714:	10bfe004 	addi	r2,r2,-128
  815718:	1004923a 	slli	r2,r2,8
  81571c:	e17ff617 	ldw	r5,-40(fp)
  815720:	1009883a 	mov	r4,r2
  815724:	0811c380 	call	811c38 <__divsi3>
  815728:	1009883a 	mov	r4,r2
  81572c:	e0fffc17 	ldw	r3,-16(fp)
  815730:	e0bff517 	ldw	r2,-44(fp)
  815734:	108018e4 	muli	r2,r2,99
  815738:	1885883a 	add	r2,r3,r2
  81573c:	10802484 	addi	r2,r2,146
  815740:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815744:	e0bff517 	ldw	r2,-44(fp)
  815748:	10800044 	addi	r2,r2,1
  81574c:	e0bff515 	stw	r2,-44(fp)
  815750:	e0bff517 	ldw	r2,-44(fp)
  815754:	10800090 	cmplti	r2,r2,2
  815758:	103fdb1e 	bne	r2,zero,8156c8 <__alt_mem_onchip_mem+0xff80d6c8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  81575c:	e0bffc17 	ldw	r2,-16(fp)
  815760:	10800943 	ldbu	r2,37(r2)
  815764:	10803fcc 	andi	r2,r2,255
  815768:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  81576c:	e13ffc17 	ldw	r4,-16(fp)
  815770:	0814d800 	call	814d80 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  815774:	e0bffc17 	ldw	r2,-16(fp)
  815778:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  81577c:	e0bffc17 	ldw	r2,-16(fp)
  815780:	10800943 	ldbu	r2,37(r2)
  815784:	10c03fcc 	andi	r3,r2,255
  815788:	e0bffb17 	ldw	r2,-20(fp)
  81578c:	18800426 	beq	r3,r2,8157a0 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  815790:	e0bffc17 	ldw	r2,-16(fp)
  815794:	00c00044 	movi	r3,1
  815798:	10c009c5 	stb	r3,39(r2)
  }
  81579c:	003fef06 	br	81575c <__alt_mem_onchip_mem+0xff80d75c>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8157a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8157a4:	e0bffe17 	ldw	r2,-8(fp)
}
  8157a8:	e037883a 	mov	sp,fp
  8157ac:	dfc00117 	ldw	ra,4(sp)
  8157b0:	df000017 	ldw	fp,0(sp)
  8157b4:	dec00204 	addi	sp,sp,8
  8157b8:	f800283a 	ret

008157bc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8157bc:	defffc04 	addi	sp,sp,-16
  8157c0:	dfc00315 	stw	ra,12(sp)
  8157c4:	df000215 	stw	fp,8(sp)
  8157c8:	df000204 	addi	fp,sp,8
  8157cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8157d0:	e0bfff17 	ldw	r2,-4(fp)
  8157d4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8157d8:	e0bffe17 	ldw	r2,-8(fp)
  8157dc:	10800943 	ldbu	r2,37(r2)
  8157e0:	10803fcc 	andi	r2,r2,255
  8157e4:	10c00044 	addi	r3,r2,1
  8157e8:	e0bffe17 	ldw	r2,-8(fp)
  8157ec:	10800983 	ldbu	r2,38(r2)
  8157f0:	10803fcc 	andi	r2,r2,255
  8157f4:	18800316 	blt	r3,r2,815804 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8157f8:	e0bffe17 	ldw	r2,-8(fp)
  8157fc:	10000945 	stb	zero,37(r2)
  815800:	00000606 	br	81581c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  815804:	e0bffe17 	ldw	r2,-8(fp)
  815808:	10800943 	ldbu	r2,37(r2)
  81580c:	10800044 	addi	r2,r2,1
  815810:	1007883a 	mov	r3,r2
  815814:	e0bffe17 	ldw	r2,-8(fp)
  815818:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  81581c:	e0bffe17 	ldw	r2,-8(fp)
  815820:	10800983 	ldbu	r2,38(r2)
  815824:	10803fcc 	andi	r2,r2,255
  815828:	10000826 	beq	r2,zero,81584c <alt_lcd_16207_timeout+0x90>
  81582c:	e0bffe17 	ldw	r2,-8(fp)
  815830:	108009c3 	ldbu	r2,39(r2)
  815834:	10803fcc 	andi	r2,r2,255
  815838:	1080201c 	xori	r2,r2,128
  81583c:	10bfe004 	addi	r2,r2,-128
  815840:	1000021e 	bne	r2,zero,81584c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  815844:	e13ffe17 	ldw	r4,-8(fp)
  815848:	0814d800 	call	814d80 <lcd_repaint_screen>

  return sp->period;
  81584c:	e0bffe17 	ldw	r2,-8(fp)
  815850:	10800717 	ldw	r2,28(r2)
}
  815854:	e037883a 	mov	sp,fp
  815858:	dfc00117 	ldw	ra,4(sp)
  81585c:	df000017 	ldw	fp,0(sp)
  815860:	dec00204 	addi	sp,sp,8
  815864:	f800283a 	ret

00815868 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  815868:	defffc04 	addi	sp,sp,-16
  81586c:	dfc00315 	stw	ra,12(sp)
  815870:	df000215 	stw	fp,8(sp)
  815874:	df000204 	addi	fp,sp,8
  815878:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  81587c:	e0bfff17 	ldw	r2,-4(fp)
  815880:	10800017 	ldw	r2,0(r2)
  815884:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  815888:	e0bfff17 	ldw	r2,-4(fp)
  81588c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  815890:	010ea604 	movi	r4,15000
  815894:	0813e500 	call	813e50 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815898:	e0bffe17 	ldw	r2,-8(fp)
  81589c:	00c00c04 	movi	r3,48
  8158a0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8158a4:	01040104 	movi	r4,4100
  8158a8:	0813e500 	call	813e50 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8158ac:	e0bffe17 	ldw	r2,-8(fp)
  8158b0:	00c00c04 	movi	r3,48
  8158b4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8158b8:	0100fa04 	movi	r4,1000
  8158bc:	0813e500 	call	813e50 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8158c0:	e0bffe17 	ldw	r2,-8(fp)
  8158c4:	00c00c04 	movi	r3,48
  8158c8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8158cc:	01400e04 	movi	r5,56
  8158d0:	e13fff17 	ldw	r4,-4(fp)
  8158d4:	0814b200 	call	814b20 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8158d8:	01400204 	movi	r5,8
  8158dc:	e13fff17 	ldw	r4,-4(fp)
  8158e0:	0814b200 	call	814b20 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8158e4:	e13fff17 	ldw	r4,-4(fp)
  8158e8:	0814cb00 	call	814cb0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8158ec:	01400184 	movi	r5,6
  8158f0:	e13fff17 	ldw	r4,-4(fp)
  8158f4:	0814b200 	call	814b20 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8158f8:	01400304 	movi	r5,12
  8158fc:	e13fff17 	ldw	r4,-4(fp)
  815900:	0814b200 	call	814b20 <lcd_write_command>

  sp->esccount = -1;
  815904:	e0bfff17 	ldw	r2,-4(fp)
  815908:	00ffffc4 	movi	r3,-1
  81590c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  815910:	e0bfff17 	ldw	r2,-4(fp)
  815914:	10800a04 	addi	r2,r2,40
  815918:	01800204 	movi	r6,8
  81591c:	000b883a 	mov	r5,zero
  815920:	1009883a 	mov	r4,r2
  815924:	0808e640 	call	808e64 <memset>

  sp->scrollpos = 0;
  815928:	e0bfff17 	ldw	r2,-4(fp)
  81592c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  815930:	e0bfff17 	ldw	r2,-4(fp)
  815934:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  815938:	e0bfff17 	ldw	r2,-4(fp)
  81593c:	100009c5 	stb	zero,39(r2)
  815940:	d0a77917 	ldw	r2,-25116(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  815944:	01400284 	movi	r5,10
  815948:	1009883a 	mov	r4,r2
  81594c:	0811d300 	call	811d30 <__udivsi3>
  815950:	1007883a 	mov	r3,r2
  815954:	e0bfff17 	ldw	r2,-4(fp)
  815958:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  81595c:	e0bfff17 	ldw	r2,-4(fp)
  815960:	10c00104 	addi	r3,r2,4
  815964:	e0bfff17 	ldw	r2,-4(fp)
  815968:	10800717 	ldw	r2,28(r2)
  81596c:	e1ffff17 	ldw	r7,-4(fp)
  815970:	01802074 	movhi	r6,129
  815974:	3195ef04 	addi	r6,r6,22460
  815978:	100b883a 	mov	r5,r2
  81597c:	1809883a 	mov	r4,r3
  815980:	0812f9c0 	call	812f9c <alt_alarm_start>
}
  815984:	0001883a 	nop
  815988:	e037883a 	mov	sp,fp
  81598c:	dfc00117 	ldw	ra,4(sp)
  815990:	df000017 	ldw	fp,0(sp)
  815994:	dec00204 	addi	sp,sp,8
  815998:	f800283a 	ret

0081599c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81599c:	defffa04 	addi	sp,sp,-24
  8159a0:	dfc00515 	stw	ra,20(sp)
  8159a4:	df000415 	stw	fp,16(sp)
  8159a8:	df000404 	addi	fp,sp,16
  8159ac:	e13ffd15 	stw	r4,-12(fp)
  8159b0:	e17ffe15 	stw	r5,-8(fp)
  8159b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8159b8:	e0bffd17 	ldw	r2,-12(fp)
  8159bc:	10800017 	ldw	r2,0(r2)
  8159c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8159c4:	e0bffc17 	ldw	r2,-16(fp)
  8159c8:	10c00a04 	addi	r3,r2,40
  8159cc:	e0bffd17 	ldw	r2,-12(fp)
  8159d0:	10800217 	ldw	r2,8(r2)
  8159d4:	100f883a 	mov	r7,r2
  8159d8:	e1bfff17 	ldw	r6,-4(fp)
  8159dc:	e17ffe17 	ldw	r5,-8(fp)
  8159e0:	1809883a 	mov	r4,r3
  8159e4:	08152e40 	call	8152e4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8159e8:	e037883a 	mov	sp,fp
  8159ec:	dfc00117 	ldw	ra,4(sp)
  8159f0:	df000017 	ldw	fp,0(sp)
  8159f4:	dec00204 	addi	sp,sp,8
  8159f8:	f800283a 	ret

008159fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8159fc:	defffa04 	addi	sp,sp,-24
  815a00:	dfc00515 	stw	ra,20(sp)
  815a04:	df000415 	stw	fp,16(sp)
  815a08:	df000404 	addi	fp,sp,16
  815a0c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  815a10:	0007883a 	mov	r3,zero
  815a14:	e0bfff17 	ldw	r2,-4(fp)
  815a18:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  815a1c:	e0bfff17 	ldw	r2,-4(fp)
  815a20:	10800104 	addi	r2,r2,4
  815a24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a28:	0005303a 	rdctl	r2,status
  815a2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a30:	e0fffd17 	ldw	r3,-12(fp)
  815a34:	00bfff84 	movi	r2,-2
  815a38:	1884703a 	and	r2,r3,r2
  815a3c:	1001703a 	wrctl	status,r2
  
  return context;
  815a40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  815a44:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  815a48:	0813d480 	call	813d48 <alt_tick>
  815a4c:	e0bffc17 	ldw	r2,-16(fp)
  815a50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815a54:	e0bffe17 	ldw	r2,-8(fp)
  815a58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  815a5c:	0001883a 	nop
  815a60:	e037883a 	mov	sp,fp
  815a64:	dfc00117 	ldw	ra,4(sp)
  815a68:	df000017 	ldw	fp,0(sp)
  815a6c:	dec00204 	addi	sp,sp,8
  815a70:	f800283a 	ret

00815a74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  815a74:	defff804 	addi	sp,sp,-32
  815a78:	dfc00715 	stw	ra,28(sp)
  815a7c:	df000615 	stw	fp,24(sp)
  815a80:	df000604 	addi	fp,sp,24
  815a84:	e13ffc15 	stw	r4,-16(fp)
  815a88:	e17ffd15 	stw	r5,-12(fp)
  815a8c:	e1bffe15 	stw	r6,-8(fp)
  815a90:	e1ffff15 	stw	r7,-4(fp)
  815a94:	e0bfff17 	ldw	r2,-4(fp)
  815a98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  815a9c:	d0a77917 	ldw	r2,-25116(gp)
  815aa0:	1000021e 	bne	r2,zero,815aac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  815aa4:	e0bffb17 	ldw	r2,-20(fp)
  815aa8:	d0a77915 	stw	r2,-25116(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  815aac:	e0bffc17 	ldw	r2,-16(fp)
  815ab0:	10800104 	addi	r2,r2,4
  815ab4:	00c001c4 	movi	r3,7
  815ab8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  815abc:	d8000015 	stw	zero,0(sp)
  815ac0:	e1fffc17 	ldw	r7,-16(fp)
  815ac4:	01802074 	movhi	r6,129
  815ac8:	31967f04 	addi	r6,r6,23036
  815acc:	e17ffe17 	ldw	r5,-8(fp)
  815ad0:	e13ffd17 	ldw	r4,-12(fp)
  815ad4:	08169780 	call	816978 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  815ad8:	0001883a 	nop
  815adc:	e037883a 	mov	sp,fp
  815ae0:	dfc00117 	ldw	ra,4(sp)
  815ae4:	df000017 	ldw	fp,0(sp)
  815ae8:	dec00204 	addi	sp,sp,8
  815aec:	f800283a 	ret

00815af0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  815af0:	defffa04 	addi	sp,sp,-24
  815af4:	dfc00515 	stw	ra,20(sp)
  815af8:	df000415 	stw	fp,16(sp)
  815afc:	df000404 	addi	fp,sp,16
  815b00:	e13ffd15 	stw	r4,-12(fp)
  815b04:	e17ffe15 	stw	r5,-8(fp)
  815b08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815b0c:	e0bffd17 	ldw	r2,-12(fp)
  815b10:	10800017 	ldw	r2,0(r2)
  815b14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  815b18:	e0bffc17 	ldw	r2,-16(fp)
  815b1c:	10c00a04 	addi	r3,r2,40
  815b20:	e0bffd17 	ldw	r2,-12(fp)
  815b24:	10800217 	ldw	r2,8(r2)
  815b28:	100f883a 	mov	r7,r2
  815b2c:	e1bfff17 	ldw	r6,-4(fp)
  815b30:	e17ffe17 	ldw	r5,-8(fp)
  815b34:	1809883a 	mov	r4,r3
  815b38:	08160040 	call	816004 <altera_avalon_uart_read>
      fd->fd_flags);
}
  815b3c:	e037883a 	mov	sp,fp
  815b40:	dfc00117 	ldw	ra,4(sp)
  815b44:	df000017 	ldw	fp,0(sp)
  815b48:	dec00204 	addi	sp,sp,8
  815b4c:	f800283a 	ret

00815b50 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815b50:	defffa04 	addi	sp,sp,-24
  815b54:	dfc00515 	stw	ra,20(sp)
  815b58:	df000415 	stw	fp,16(sp)
  815b5c:	df000404 	addi	fp,sp,16
  815b60:	e13ffd15 	stw	r4,-12(fp)
  815b64:	e17ffe15 	stw	r5,-8(fp)
  815b68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815b6c:	e0bffd17 	ldw	r2,-12(fp)
  815b70:	10800017 	ldw	r2,0(r2)
  815b74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  815b78:	e0bffc17 	ldw	r2,-16(fp)
  815b7c:	10c00a04 	addi	r3,r2,40
  815b80:	e0bffd17 	ldw	r2,-12(fp)
  815b84:	10800217 	ldw	r2,8(r2)
  815b88:	100f883a 	mov	r7,r2
  815b8c:	e1bfff17 	ldw	r6,-4(fp)
  815b90:	e17ffe17 	ldw	r5,-8(fp)
  815b94:	1809883a 	mov	r4,r3
  815b98:	081621c0 	call	81621c <altera_avalon_uart_write>
      fd->fd_flags);
}
  815b9c:	e037883a 	mov	sp,fp
  815ba0:	dfc00117 	ldw	ra,4(sp)
  815ba4:	df000017 	ldw	fp,0(sp)
  815ba8:	dec00204 	addi	sp,sp,8
  815bac:	f800283a 	ret

00815bb0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  815bb0:	defffc04 	addi	sp,sp,-16
  815bb4:	dfc00315 	stw	ra,12(sp)
  815bb8:	df000215 	stw	fp,8(sp)
  815bbc:	df000204 	addi	fp,sp,8
  815bc0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815bc4:	e0bfff17 	ldw	r2,-4(fp)
  815bc8:	10800017 	ldw	r2,0(r2)
  815bcc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  815bd0:	e0bffe17 	ldw	r2,-8(fp)
  815bd4:	10c00a04 	addi	r3,r2,40
  815bd8:	e0bfff17 	ldw	r2,-4(fp)
  815bdc:	10800217 	ldw	r2,8(r2)
  815be0:	100b883a 	mov	r5,r2
  815be4:	1809883a 	mov	r4,r3
  815be8:	0815f740 	call	815f74 <altera_avalon_uart_close>
}
  815bec:	e037883a 	mov	sp,fp
  815bf0:	dfc00117 	ldw	ra,4(sp)
  815bf4:	df000017 	ldw	fp,0(sp)
  815bf8:	dec00204 	addi	sp,sp,8
  815bfc:	f800283a 	ret

00815c00 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  815c00:	defff804 	addi	sp,sp,-32
  815c04:	dfc00715 	stw	ra,28(sp)
  815c08:	df000615 	stw	fp,24(sp)
  815c0c:	df000604 	addi	fp,sp,24
  815c10:	e13ffd15 	stw	r4,-12(fp)
  815c14:	e17ffe15 	stw	r5,-8(fp)
  815c18:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  815c1c:	e0bffd17 	ldw	r2,-12(fp)
  815c20:	10800017 	ldw	r2,0(r2)
  815c24:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  815c28:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815c2c:	1000041e 	bne	r2,zero,815c40 <altera_avalon_uart_init+0x40>
  815c30:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  815c34:	1000021e 	bne	r2,zero,815c40 <altera_avalon_uart_init+0x40>
  815c38:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815c3c:	10000226 	beq	r2,zero,815c48 <altera_avalon_uart_init+0x48>
  815c40:	00800044 	movi	r2,1
  815c44:	00000106 	br	815c4c <altera_avalon_uart_init+0x4c>
  815c48:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  815c4c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  815c50:	e0bffc17 	ldw	r2,-16(fp)
  815c54:	10000f1e 	bne	r2,zero,815c94 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  815c58:	e0bffd17 	ldw	r2,-12(fp)
  815c5c:	00c32004 	movi	r3,3200
  815c60:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  815c64:	e0bffb17 	ldw	r2,-20(fp)
  815c68:	10800304 	addi	r2,r2,12
  815c6c:	e0fffd17 	ldw	r3,-12(fp)
  815c70:	18c00117 	ldw	r3,4(r3)
  815c74:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  815c78:	d8000015 	stw	zero,0(sp)
  815c7c:	e1fffd17 	ldw	r7,-12(fp)
  815c80:	01802074 	movhi	r6,129
  815c84:	31972b04 	addi	r6,r6,23724
  815c88:	e17fff17 	ldw	r5,-4(fp)
  815c8c:	e13ffe17 	ldw	r4,-8(fp)
  815c90:	08169780 	call	816978 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  815c94:	0001883a 	nop
  815c98:	e037883a 	mov	sp,fp
  815c9c:	dfc00117 	ldw	ra,4(sp)
  815ca0:	df000017 	ldw	fp,0(sp)
  815ca4:	dec00204 	addi	sp,sp,8
  815ca8:	f800283a 	ret

00815cac <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  815cac:	defffa04 	addi	sp,sp,-24
  815cb0:	dfc00515 	stw	ra,20(sp)
  815cb4:	df000415 	stw	fp,16(sp)
  815cb8:	df000404 	addi	fp,sp,16
  815cbc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  815cc0:	e0bfff17 	ldw	r2,-4(fp)
  815cc4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  815cc8:	e0bffc17 	ldw	r2,-16(fp)
  815ccc:	10800017 	ldw	r2,0(r2)
  815cd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  815cd4:	e0bffd17 	ldw	r2,-12(fp)
  815cd8:	10800204 	addi	r2,r2,8
  815cdc:	10800037 	ldwio	r2,0(r2)
  815ce0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  815ce4:	e0bffd17 	ldw	r2,-12(fp)
  815ce8:	10800204 	addi	r2,r2,8
  815cec:	0007883a 	mov	r3,zero
  815cf0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  815cf4:	e0bffd17 	ldw	r2,-12(fp)
  815cf8:	10800204 	addi	r2,r2,8
  815cfc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  815d00:	e0bffe17 	ldw	r2,-8(fp)
  815d04:	1080200c 	andi	r2,r2,128
  815d08:	10000326 	beq	r2,zero,815d18 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  815d0c:	e17ffe17 	ldw	r5,-8(fp)
  815d10:	e13ffc17 	ldw	r4,-16(fp)
  815d14:	0815d480 	call	815d48 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  815d18:	e0bffe17 	ldw	r2,-8(fp)
  815d1c:	1081100c 	andi	r2,r2,1088
  815d20:	10000326 	beq	r2,zero,815d30 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  815d24:	e17ffe17 	ldw	r5,-8(fp)
  815d28:	e13ffc17 	ldw	r4,-16(fp)
  815d2c:	0815e2c0 	call	815e2c <altera_avalon_uart_txirq>
  }
  

}
  815d30:	0001883a 	nop
  815d34:	e037883a 	mov	sp,fp
  815d38:	dfc00117 	ldw	ra,4(sp)
  815d3c:	df000017 	ldw	fp,0(sp)
  815d40:	dec00204 	addi	sp,sp,8
  815d44:	f800283a 	ret

00815d48 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  815d48:	defffc04 	addi	sp,sp,-16
  815d4c:	df000315 	stw	fp,12(sp)
  815d50:	df000304 	addi	fp,sp,12
  815d54:	e13ffe15 	stw	r4,-8(fp)
  815d58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  815d5c:	e0bfff17 	ldw	r2,-4(fp)
  815d60:	108000cc 	andi	r2,r2,3
  815d64:	10002c1e 	bne	r2,zero,815e18 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  815d68:	e0bffe17 	ldw	r2,-8(fp)
  815d6c:	10800317 	ldw	r2,12(r2)
  815d70:	e0bffe17 	ldw	r2,-8(fp)
  815d74:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815d78:	e0bffe17 	ldw	r2,-8(fp)
  815d7c:	10800317 	ldw	r2,12(r2)
  815d80:	10800044 	addi	r2,r2,1
  815d84:	10800fcc 	andi	r2,r2,63
  815d88:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  815d8c:	e0bffe17 	ldw	r2,-8(fp)
  815d90:	10800317 	ldw	r2,12(r2)
  815d94:	e0fffe17 	ldw	r3,-8(fp)
  815d98:	18c00017 	ldw	r3,0(r3)
  815d9c:	18c00037 	ldwio	r3,0(r3)
  815da0:	1809883a 	mov	r4,r3
  815da4:	e0fffe17 	ldw	r3,-8(fp)
  815da8:	1885883a 	add	r2,r3,r2
  815dac:	10800704 	addi	r2,r2,28
  815db0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  815db4:	e0bffe17 	ldw	r2,-8(fp)
  815db8:	e0fffd17 	ldw	r3,-12(fp)
  815dbc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815dc0:	e0bffe17 	ldw	r2,-8(fp)
  815dc4:	10800317 	ldw	r2,12(r2)
  815dc8:	10800044 	addi	r2,r2,1
  815dcc:	10800fcc 	andi	r2,r2,63
  815dd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  815dd4:	e0bffe17 	ldw	r2,-8(fp)
  815dd8:	10c00217 	ldw	r3,8(r2)
  815ddc:	e0bffd17 	ldw	r2,-12(fp)
  815de0:	18800e1e 	bne	r3,r2,815e1c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815de4:	e0bffe17 	ldw	r2,-8(fp)
  815de8:	10c00117 	ldw	r3,4(r2)
  815dec:	00bfdfc4 	movi	r2,-129
  815df0:	1886703a 	and	r3,r3,r2
  815df4:	e0bffe17 	ldw	r2,-8(fp)
  815df8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  815dfc:	e0bffe17 	ldw	r2,-8(fp)
  815e00:	10800017 	ldw	r2,0(r2)
  815e04:	10800304 	addi	r2,r2,12
  815e08:	e0fffe17 	ldw	r3,-8(fp)
  815e0c:	18c00117 	ldw	r3,4(r3)
  815e10:	10c00035 	stwio	r3,0(r2)
  815e14:	00000106 	br	815e1c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  815e18:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  815e1c:	e037883a 	mov	sp,fp
  815e20:	df000017 	ldw	fp,0(sp)
  815e24:	dec00104 	addi	sp,sp,4
  815e28:	f800283a 	ret

00815e2c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  815e2c:	defffb04 	addi	sp,sp,-20
  815e30:	df000415 	stw	fp,16(sp)
  815e34:	df000404 	addi	fp,sp,16
  815e38:	e13ffc15 	stw	r4,-16(fp)
  815e3c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  815e40:	e0bffc17 	ldw	r2,-16(fp)
  815e44:	10c00417 	ldw	r3,16(r2)
  815e48:	e0bffc17 	ldw	r2,-16(fp)
  815e4c:	10800517 	ldw	r2,20(r2)
  815e50:	18803226 	beq	r3,r2,815f1c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815e54:	e0bffc17 	ldw	r2,-16(fp)
  815e58:	10800617 	ldw	r2,24(r2)
  815e5c:	1080008c 	andi	r2,r2,2
  815e60:	10000326 	beq	r2,zero,815e70 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815e64:	e0bffd17 	ldw	r2,-12(fp)
  815e68:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815e6c:	10001d26 	beq	r2,zero,815ee4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  815e70:	e0bffc17 	ldw	r2,-16(fp)
  815e74:	10800417 	ldw	r2,16(r2)
  815e78:	e0bffc17 	ldw	r2,-16(fp)
  815e7c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  815e80:	e0bffc17 	ldw	r2,-16(fp)
  815e84:	10800017 	ldw	r2,0(r2)
  815e88:	10800104 	addi	r2,r2,4
  815e8c:	e0fffc17 	ldw	r3,-16(fp)
  815e90:	18c00417 	ldw	r3,16(r3)
  815e94:	e13ffc17 	ldw	r4,-16(fp)
  815e98:	20c7883a 	add	r3,r4,r3
  815e9c:	18c01704 	addi	r3,r3,92
  815ea0:	18c00003 	ldbu	r3,0(r3)
  815ea4:	18c03fcc 	andi	r3,r3,255
  815ea8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  815eac:	e0bffc17 	ldw	r2,-16(fp)
  815eb0:	10800417 	ldw	r2,16(r2)
  815eb4:	10800044 	addi	r2,r2,1
  815eb8:	e0fffc17 	ldw	r3,-16(fp)
  815ebc:	18800415 	stw	r2,16(r3)
  815ec0:	10c00fcc 	andi	r3,r2,63
  815ec4:	e0bffc17 	ldw	r2,-16(fp)
  815ec8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  815ecc:	e0bffc17 	ldw	r2,-16(fp)
  815ed0:	10800117 	ldw	r2,4(r2)
  815ed4:	10c01014 	ori	r3,r2,64
  815ed8:	e0bffc17 	ldw	r2,-16(fp)
  815edc:	10c00115 	stw	r3,4(r2)
  815ee0:	00000e06 	br	815f1c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  815ee4:	e0bffc17 	ldw	r2,-16(fp)
  815ee8:	10800017 	ldw	r2,0(r2)
  815eec:	10800204 	addi	r2,r2,8
  815ef0:	10800037 	ldwio	r2,0(r2)
  815ef4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815ef8:	e0bffd17 	ldw	r2,-12(fp)
  815efc:	1082000c 	andi	r2,r2,2048
  815f00:	1000061e 	bne	r2,zero,815f1c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  815f04:	e0bffc17 	ldw	r2,-16(fp)
  815f08:	10c00117 	ldw	r3,4(r2)
  815f0c:	00bfefc4 	movi	r2,-65
  815f10:	1886703a 	and	r3,r3,r2
  815f14:	e0bffc17 	ldw	r2,-16(fp)
  815f18:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  815f1c:	e0bffc17 	ldw	r2,-16(fp)
  815f20:	10c00417 	ldw	r3,16(r2)
  815f24:	e0bffc17 	ldw	r2,-16(fp)
  815f28:	10800517 	ldw	r2,20(r2)
  815f2c:	1880061e 	bne	r3,r2,815f48 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815f30:	e0bffc17 	ldw	r2,-16(fp)
  815f34:	10c00117 	ldw	r3,4(r2)
  815f38:	00beefc4 	movi	r2,-1089
  815f3c:	1886703a 	and	r3,r3,r2
  815f40:	e0bffc17 	ldw	r2,-16(fp)
  815f44:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815f48:	e0bffc17 	ldw	r2,-16(fp)
  815f4c:	10800017 	ldw	r2,0(r2)
  815f50:	10800304 	addi	r2,r2,12
  815f54:	e0fffc17 	ldw	r3,-16(fp)
  815f58:	18c00117 	ldw	r3,4(r3)
  815f5c:	10c00035 	stwio	r3,0(r2)
}
  815f60:	0001883a 	nop
  815f64:	e037883a 	mov	sp,fp
  815f68:	df000017 	ldw	fp,0(sp)
  815f6c:	dec00104 	addi	sp,sp,4
  815f70:	f800283a 	ret

00815f74 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  815f74:	defffd04 	addi	sp,sp,-12
  815f78:	df000215 	stw	fp,8(sp)
  815f7c:	df000204 	addi	fp,sp,8
  815f80:	e13ffe15 	stw	r4,-8(fp)
  815f84:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815f88:	00000506 	br	815fa0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  815f8c:	e0bfff17 	ldw	r2,-4(fp)
  815f90:	1090000c 	andi	r2,r2,16384
  815f94:	10000226 	beq	r2,zero,815fa0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  815f98:	00bffd44 	movi	r2,-11
  815f9c:	00000606 	br	815fb8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815fa0:	e0bffe17 	ldw	r2,-8(fp)
  815fa4:	10c00417 	ldw	r3,16(r2)
  815fa8:	e0bffe17 	ldw	r2,-8(fp)
  815fac:	10800517 	ldw	r2,20(r2)
  815fb0:	18bff61e 	bne	r3,r2,815f8c <__alt_mem_onchip_mem+0xff80df8c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  815fb4:	0005883a 	mov	r2,zero
}
  815fb8:	e037883a 	mov	sp,fp
  815fbc:	df000017 	ldw	fp,0(sp)
  815fc0:	dec00104 	addi	sp,sp,4
  815fc4:	f800283a 	ret

00815fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815fc8:	defffe04 	addi	sp,sp,-8
  815fcc:	dfc00115 	stw	ra,4(sp)
  815fd0:	df000015 	stw	fp,0(sp)
  815fd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815fd8:	d0a01317 	ldw	r2,-32692(gp)
  815fdc:	10000326 	beq	r2,zero,815fec <alt_get_errno+0x24>
  815fe0:	d0a01317 	ldw	r2,-32692(gp)
  815fe4:	103ee83a 	callr	r2
  815fe8:	00000106 	br	815ff0 <alt_get_errno+0x28>
  815fec:	d0a76e04 	addi	r2,gp,-25160
}
  815ff0:	e037883a 	mov	sp,fp
  815ff4:	dfc00117 	ldw	ra,4(sp)
  815ff8:	df000017 	ldw	fp,0(sp)
  815ffc:	dec00204 	addi	sp,sp,8
  816000:	f800283a 	ret

00816004 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  816004:	defff204 	addi	sp,sp,-56
  816008:	dfc00d15 	stw	ra,52(sp)
  81600c:	df000c15 	stw	fp,48(sp)
  816010:	df000c04 	addi	fp,sp,48
  816014:	e13ffc15 	stw	r4,-16(fp)
  816018:	e17ffd15 	stw	r5,-12(fp)
  81601c:	e1bffe15 	stw	r6,-8(fp)
  816020:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  816024:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  816028:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  81602c:	e0bfff17 	ldw	r2,-4(fp)
  816030:	1090000c 	andi	r2,r2,16384
  816034:	1005003a 	cmpeq	r2,r2,zero
  816038:	10803fcc 	andi	r2,r2,255
  81603c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  816040:	00001306 	br	816090 <altera_avalon_uart_read+0x8c>
    {
      count++;
  816044:	e0bff517 	ldw	r2,-44(fp)
  816048:	10800044 	addi	r2,r2,1
  81604c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  816050:	e0bffd17 	ldw	r2,-12(fp)
  816054:	10c00044 	addi	r3,r2,1
  816058:	e0fffd15 	stw	r3,-12(fp)
  81605c:	e0fffc17 	ldw	r3,-16(fp)
  816060:	18c00217 	ldw	r3,8(r3)
  816064:	e13ffc17 	ldw	r4,-16(fp)
  816068:	20c7883a 	add	r3,r4,r3
  81606c:	18c00704 	addi	r3,r3,28
  816070:	18c00003 	ldbu	r3,0(r3)
  816074:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  816078:	e0bffc17 	ldw	r2,-16(fp)
  81607c:	10800217 	ldw	r2,8(r2)
  816080:	10800044 	addi	r2,r2,1
  816084:	10c00fcc 	andi	r3,r2,63
  816088:	e0bffc17 	ldw	r2,-16(fp)
  81608c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  816090:	e0fff517 	ldw	r3,-44(fp)
  816094:	e0bffe17 	ldw	r2,-8(fp)
  816098:	1880050e 	bge	r3,r2,8160b0 <altera_avalon_uart_read+0xac>
  81609c:	e0bffc17 	ldw	r2,-16(fp)
  8160a0:	10c00217 	ldw	r3,8(r2)
  8160a4:	e0bffc17 	ldw	r2,-16(fp)
  8160a8:	10800317 	ldw	r2,12(r2)
  8160ac:	18bfe51e 	bne	r3,r2,816044 <__alt_mem_onchip_mem+0xff80e044>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8160b0:	e0bff517 	ldw	r2,-44(fp)
  8160b4:	1000251e 	bne	r2,zero,81614c <altera_avalon_uart_read+0x148>
  8160b8:	e0bffc17 	ldw	r2,-16(fp)
  8160bc:	10c00217 	ldw	r3,8(r2)
  8160c0:	e0bffc17 	ldw	r2,-16(fp)
  8160c4:	10800317 	ldw	r2,12(r2)
  8160c8:	1880201e 	bne	r3,r2,81614c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  8160cc:	e0bff617 	ldw	r2,-40(fp)
  8160d0:	1000071e 	bne	r2,zero,8160f0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8160d4:	0815fc80 	call	815fc8 <alt_get_errno>
  8160d8:	1007883a 	mov	r3,r2
  8160dc:	008002c4 	movi	r2,11
  8160e0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  8160e4:	00800044 	movi	r2,1
  8160e8:	e0bff405 	stb	r2,-48(fp)
        break;
  8160ec:	00001b06 	br	81615c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8160f0:	0005303a 	rdctl	r2,status
  8160f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8160f8:	e0fff917 	ldw	r3,-28(fp)
  8160fc:	00bfff84 	movi	r2,-2
  816100:	1884703a 	and	r2,r3,r2
  816104:	1001703a 	wrctl	status,r2
  
  return context;
  816108:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  81610c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  816110:	e0bffc17 	ldw	r2,-16(fp)
  816114:	10800117 	ldw	r2,4(r2)
  816118:	10c02014 	ori	r3,r2,128
  81611c:	e0bffc17 	ldw	r2,-16(fp)
  816120:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816124:	e0bffc17 	ldw	r2,-16(fp)
  816128:	10800017 	ldw	r2,0(r2)
  81612c:	10800304 	addi	r2,r2,12
  816130:	e0fffc17 	ldw	r3,-16(fp)
  816134:	18c00117 	ldw	r3,4(r3)
  816138:	10c00035 	stwio	r3,0(r2)
  81613c:	e0bff817 	ldw	r2,-32(fp)
  816140:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816144:	e0bffa17 	ldw	r2,-24(fp)
  816148:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  81614c:	e0bff517 	ldw	r2,-44(fp)
  816150:	1000021e 	bne	r2,zero,81615c <altera_avalon_uart_read+0x158>
  816154:	e0bffe17 	ldw	r2,-8(fp)
  816158:	103fcd1e 	bne	r2,zero,816090 <__alt_mem_onchip_mem+0xff80e090>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81615c:	0005303a 	rdctl	r2,status
  816160:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816164:	e0fffb17 	ldw	r3,-20(fp)
  816168:	00bfff84 	movi	r2,-2
  81616c:	1884703a 	and	r2,r3,r2
  816170:	1001703a 	wrctl	status,r2
  
  return context;
  816174:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  816178:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81617c:	e0bffc17 	ldw	r2,-16(fp)
  816180:	10800117 	ldw	r2,4(r2)
  816184:	10c02014 	ori	r3,r2,128
  816188:	e0bffc17 	ldw	r2,-16(fp)
  81618c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816190:	e0bffc17 	ldw	r2,-16(fp)
  816194:	10800017 	ldw	r2,0(r2)
  816198:	10800304 	addi	r2,r2,12
  81619c:	e0fffc17 	ldw	r3,-16(fp)
  8161a0:	18c00117 	ldw	r3,4(r3)
  8161a4:	10c00035 	stwio	r3,0(r2)
  8161a8:	e0bff817 	ldw	r2,-32(fp)
  8161ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8161b0:	e0bff717 	ldw	r2,-36(fp)
  8161b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8161b8:	e0bff403 	ldbu	r2,-48(fp)
  8161bc:	10000226 	beq	r2,zero,8161c8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  8161c0:	00bffd44 	movi	r2,-11
  8161c4:	00000106 	br	8161cc <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  8161c8:	e0bff517 	ldw	r2,-44(fp)
  }
}
  8161cc:	e037883a 	mov	sp,fp
  8161d0:	dfc00117 	ldw	ra,4(sp)
  8161d4:	df000017 	ldw	fp,0(sp)
  8161d8:	dec00204 	addi	sp,sp,8
  8161dc:	f800283a 	ret

008161e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8161e0:	defffe04 	addi	sp,sp,-8
  8161e4:	dfc00115 	stw	ra,4(sp)
  8161e8:	df000015 	stw	fp,0(sp)
  8161ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8161f0:	d0a01317 	ldw	r2,-32692(gp)
  8161f4:	10000326 	beq	r2,zero,816204 <alt_get_errno+0x24>
  8161f8:	d0a01317 	ldw	r2,-32692(gp)
  8161fc:	103ee83a 	callr	r2
  816200:	00000106 	br	816208 <alt_get_errno+0x28>
  816204:	d0a76e04 	addi	r2,gp,-25160
}
  816208:	e037883a 	mov	sp,fp
  81620c:	dfc00117 	ldw	ra,4(sp)
  816210:	df000017 	ldw	fp,0(sp)
  816214:	dec00204 	addi	sp,sp,8
  816218:	f800283a 	ret

0081621c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  81621c:	defff204 	addi	sp,sp,-56
  816220:	dfc00d15 	stw	ra,52(sp)
  816224:	df000c15 	stw	fp,48(sp)
  816228:	df000c04 	addi	fp,sp,48
  81622c:	e13ffc15 	stw	r4,-16(fp)
  816230:	e17ffd15 	stw	r5,-12(fp)
  816234:	e1bffe15 	stw	r6,-8(fp)
  816238:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  81623c:	e0bffe17 	ldw	r2,-8(fp)
  816240:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  816244:	e0bfff17 	ldw	r2,-4(fp)
  816248:	1090000c 	andi	r2,r2,16384
  81624c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  816250:	00003c06 	br	816344 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  816254:	e0bffc17 	ldw	r2,-16(fp)
  816258:	10800517 	ldw	r2,20(r2)
  81625c:	10800044 	addi	r2,r2,1
  816260:	10800fcc 	andi	r2,r2,63
  816264:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  816268:	e0bffc17 	ldw	r2,-16(fp)
  81626c:	10c00417 	ldw	r3,16(r2)
  816270:	e0bff717 	ldw	r2,-36(fp)
  816274:	1880221e 	bne	r3,r2,816300 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  816278:	e0bff517 	ldw	r2,-44(fp)
  81627c:	10000526 	beq	r2,zero,816294 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  816280:	08161e00 	call	8161e0 <alt_get_errno>
  816284:	1007883a 	mov	r3,r2
  816288:	008002c4 	movi	r2,11
  81628c:	18800015 	stw	r2,0(r3)
        break;
  816290:	00002e06 	br	81634c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816294:	0005303a 	rdctl	r2,status
  816298:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81629c:	e0fff917 	ldw	r3,-28(fp)
  8162a0:	00bfff84 	movi	r2,-2
  8162a4:	1884703a 	and	r2,r3,r2
  8162a8:	1001703a 	wrctl	status,r2
  
  return context;
  8162ac:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8162b0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8162b4:	e0bffc17 	ldw	r2,-16(fp)
  8162b8:	10800117 	ldw	r2,4(r2)
  8162bc:	10c11014 	ori	r3,r2,1088
  8162c0:	e0bffc17 	ldw	r2,-16(fp)
  8162c4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8162c8:	e0bffc17 	ldw	r2,-16(fp)
  8162cc:	10800017 	ldw	r2,0(r2)
  8162d0:	10800304 	addi	r2,r2,12
  8162d4:	e0fffc17 	ldw	r3,-16(fp)
  8162d8:	18c00117 	ldw	r3,4(r3)
  8162dc:	10c00035 	stwio	r3,0(r2)
  8162e0:	e0bff817 	ldw	r2,-32(fp)
  8162e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8162e8:	e0bff617 	ldw	r2,-40(fp)
  8162ec:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8162f0:	e0bffc17 	ldw	r2,-16(fp)
  8162f4:	10c00417 	ldw	r3,16(r2)
  8162f8:	e0bff717 	ldw	r2,-36(fp)
  8162fc:	18bffc26 	beq	r3,r2,8162f0 <__alt_mem_onchip_mem+0xff80e2f0>
      }
    }

    count--;
  816300:	e0bff417 	ldw	r2,-48(fp)
  816304:	10bfffc4 	addi	r2,r2,-1
  816308:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  81630c:	e0bffc17 	ldw	r2,-16(fp)
  816310:	10c00517 	ldw	r3,20(r2)
  816314:	e0bffd17 	ldw	r2,-12(fp)
  816318:	11000044 	addi	r4,r2,1
  81631c:	e13ffd15 	stw	r4,-12(fp)
  816320:	10800003 	ldbu	r2,0(r2)
  816324:	1009883a 	mov	r4,r2
  816328:	e0bffc17 	ldw	r2,-16(fp)
  81632c:	10c5883a 	add	r2,r2,r3
  816330:	10801704 	addi	r2,r2,92
  816334:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  816338:	e0bffc17 	ldw	r2,-16(fp)
  81633c:	e0fff717 	ldw	r3,-36(fp)
  816340:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  816344:	e0bff417 	ldw	r2,-48(fp)
  816348:	103fc21e 	bne	r2,zero,816254 <__alt_mem_onchip_mem+0xff80e254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81634c:	0005303a 	rdctl	r2,status
  816350:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816354:	e0fffb17 	ldw	r3,-20(fp)
  816358:	00bfff84 	movi	r2,-2
  81635c:	1884703a 	and	r2,r3,r2
  816360:	1001703a 	wrctl	status,r2
  
  return context;
  816364:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  816368:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81636c:	e0bffc17 	ldw	r2,-16(fp)
  816370:	10800117 	ldw	r2,4(r2)
  816374:	10c11014 	ori	r3,r2,1088
  816378:	e0bffc17 	ldw	r2,-16(fp)
  81637c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816380:	e0bffc17 	ldw	r2,-16(fp)
  816384:	10800017 	ldw	r2,0(r2)
  816388:	10800304 	addi	r2,r2,12
  81638c:	e0fffc17 	ldw	r3,-16(fp)
  816390:	18c00117 	ldw	r3,4(r3)
  816394:	10c00035 	stwio	r3,0(r2)
  816398:	e0bff817 	ldw	r2,-32(fp)
  81639c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8163a0:	e0bffa17 	ldw	r2,-24(fp)
  8163a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8163a8:	e0fffe17 	ldw	r3,-8(fp)
  8163ac:	e0bff417 	ldw	r2,-48(fp)
  8163b0:	1885c83a 	sub	r2,r3,r2
}
  8163b4:	e037883a 	mov	sp,fp
  8163b8:	dfc00117 	ldw	ra,4(sp)
  8163bc:	df000017 	ldw	fp,0(sp)
  8163c0:	dec00204 	addi	sp,sp,8
  8163c4:	f800283a 	ret

008163c8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8163c8:	defffa04 	addi	sp,sp,-24
  8163cc:	dfc00515 	stw	ra,20(sp)
  8163d0:	df000415 	stw	fp,16(sp)
  8163d4:	df000404 	addi	fp,sp,16
  8163d8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8163dc:	008000c4 	movi	r2,3
  8163e0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8163e4:	e0fffd17 	ldw	r3,-12(fp)
  8163e8:	008003f4 	movhi	r2,15
  8163ec:	10909004 	addi	r2,r2,16960
  8163f0:	1885383a 	mul	r2,r3,r2
  8163f4:	100b883a 	mov	r5,r2
  8163f8:	0100bef4 	movhi	r4,763
  8163fc:	213c2004 	addi	r4,r4,-3968
  816400:	0811d300 	call	811d30 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  816404:	100b883a 	mov	r5,r2
  816408:	01200034 	movhi	r4,32768
  81640c:	213fffc4 	addi	r4,r4,-1
  816410:	0811d300 	call	811d30 <__udivsi3>
  816414:	100b883a 	mov	r5,r2
  816418:	e13fff17 	ldw	r4,-4(fp)
  81641c:	0811d300 	call	811d30 <__udivsi3>
  816420:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  816424:	e0bffe17 	ldw	r2,-8(fp)
  816428:	10002a26 	beq	r2,zero,8164d4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  81642c:	e03ffc15 	stw	zero,-16(fp)
  816430:	00001706 	br	816490 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  816434:	00a00034 	movhi	r2,32768
  816438:	10bfffc4 	addi	r2,r2,-1
  81643c:	10bfffc4 	addi	r2,r2,-1
  816440:	103ffe1e 	bne	r2,zero,81643c <__alt_mem_onchip_mem+0xff80e43c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  816444:	e0fffd17 	ldw	r3,-12(fp)
  816448:	008003f4 	movhi	r2,15
  81644c:	10909004 	addi	r2,r2,16960
  816450:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  816454:	100b883a 	mov	r5,r2
  816458:	0100bef4 	movhi	r4,763
  81645c:	213c2004 	addi	r4,r4,-3968
  816460:	0811d300 	call	811d30 <__udivsi3>
  816464:	100b883a 	mov	r5,r2
  816468:	01200034 	movhi	r4,32768
  81646c:	213fffc4 	addi	r4,r4,-1
  816470:	0811d300 	call	811d30 <__udivsi3>
  816474:	1007883a 	mov	r3,r2
  816478:	e0bfff17 	ldw	r2,-4(fp)
  81647c:	10c5c83a 	sub	r2,r2,r3
  816480:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  816484:	e0bffc17 	ldw	r2,-16(fp)
  816488:	10800044 	addi	r2,r2,1
  81648c:	e0bffc15 	stw	r2,-16(fp)
  816490:	e0fffc17 	ldw	r3,-16(fp)
  816494:	e0bffe17 	ldw	r2,-8(fp)
  816498:	18bfe616 	blt	r3,r2,816434 <__alt_mem_onchip_mem+0xff80e434>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81649c:	e0fffd17 	ldw	r3,-12(fp)
  8164a0:	008003f4 	movhi	r2,15
  8164a4:	10909004 	addi	r2,r2,16960
  8164a8:	1885383a 	mul	r2,r3,r2
  8164ac:	100b883a 	mov	r5,r2
  8164b0:	0100bef4 	movhi	r4,763
  8164b4:	213c2004 	addi	r4,r4,-3968
  8164b8:	0811d300 	call	811d30 <__udivsi3>
  8164bc:	1007883a 	mov	r3,r2
  8164c0:	e0bfff17 	ldw	r2,-4(fp)
  8164c4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8164c8:	10bfffc4 	addi	r2,r2,-1
  8164cc:	103ffe1e 	bne	r2,zero,8164c8 <__alt_mem_onchip_mem+0xff80e4c8>
  8164d0:	00000d06 	br	816508 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8164d4:	e0fffd17 	ldw	r3,-12(fp)
  8164d8:	008003f4 	movhi	r2,15
  8164dc:	10909004 	addi	r2,r2,16960
  8164e0:	1885383a 	mul	r2,r3,r2
  8164e4:	100b883a 	mov	r5,r2
  8164e8:	0100bef4 	movhi	r4,763
  8164ec:	213c2004 	addi	r4,r4,-3968
  8164f0:	0811d300 	call	811d30 <__udivsi3>
  8164f4:	1007883a 	mov	r3,r2
  8164f8:	e0bfff17 	ldw	r2,-4(fp)
  8164fc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816500:	10bfffc4 	addi	r2,r2,-1
  816504:	00bffe16 	blt	zero,r2,816500 <__alt_mem_onchip_mem+0xff80e500>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  816508:	0005883a 	mov	r2,zero
}
  81650c:	e037883a 	mov	sp,fp
  816510:	dfc00117 	ldw	ra,4(sp)
  816514:	df000017 	ldw	fp,0(sp)
  816518:	dec00204 	addi	sp,sp,8
  81651c:	f800283a 	ret

00816520 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  816520:	defffe04 	addi	sp,sp,-8
  816524:	df000115 	stw	fp,4(sp)
  816528:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81652c:	e03fff15 	stw	zero,-4(fp)
  816530:	00000506 	br	816548 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  816534:	e0bfff17 	ldw	r2,-4(fp)
  816538:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81653c:	e0bfff17 	ldw	r2,-4(fp)
  816540:	10800804 	addi	r2,r2,32
  816544:	e0bfff15 	stw	r2,-4(fp)
  816548:	e0bfff17 	ldw	r2,-4(fp)
  81654c:	10820030 	cmpltui	r2,r2,2048
  816550:	103ff81e 	bne	r2,zero,816534 <__alt_mem_onchip_mem+0xff80e534>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  816554:	0001883a 	nop
  816558:	e037883a 	mov	sp,fp
  81655c:	df000017 	ldw	fp,0(sp)
  816560:	dec00104 	addi	sp,sp,4
  816564:	f800283a 	ret

00816568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816568:	defffe04 	addi	sp,sp,-8
  81656c:	dfc00115 	stw	ra,4(sp)
  816570:	df000015 	stw	fp,0(sp)
  816574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  816578:	d0a01317 	ldw	r2,-32692(gp)
  81657c:	10000326 	beq	r2,zero,81658c <alt_get_errno+0x24>
  816580:	d0a01317 	ldw	r2,-32692(gp)
  816584:	103ee83a 	callr	r2
  816588:	00000106 	br	816590 <alt_get_errno+0x28>
  81658c:	d0a76e04 	addi	r2,gp,-25160
}
  816590:	e037883a 	mov	sp,fp
  816594:	dfc00117 	ldw	ra,4(sp)
  816598:	df000017 	ldw	fp,0(sp)
  81659c:	dec00204 	addi	sp,sp,8
  8165a0:	f800283a 	ret

008165a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8165a4:	defffa04 	addi	sp,sp,-24
  8165a8:	dfc00515 	stw	ra,20(sp)
  8165ac:	df000415 	stw	fp,16(sp)
  8165b0:	df000404 	addi	fp,sp,16
  8165b4:	e13ffe15 	stw	r4,-8(fp)
  8165b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8165bc:	e0bffe17 	ldw	r2,-8(fp)
  8165c0:	10000326 	beq	r2,zero,8165d0 <alt_dev_llist_insert+0x2c>
  8165c4:	e0bffe17 	ldw	r2,-8(fp)
  8165c8:	10800217 	ldw	r2,8(r2)
  8165cc:	1000061e 	bne	r2,zero,8165e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8165d0:	08165680 	call	816568 <alt_get_errno>
  8165d4:	1007883a 	mov	r3,r2
  8165d8:	00800584 	movi	r2,22
  8165dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8165e0:	00bffa84 	movi	r2,-22
  8165e4:	00001306 	br	816634 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8165e8:	e0bffe17 	ldw	r2,-8(fp)
  8165ec:	e0ffff17 	ldw	r3,-4(fp)
  8165f0:	e0fffc15 	stw	r3,-16(fp)
  8165f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8165f8:	e0bffd17 	ldw	r2,-12(fp)
  8165fc:	e0fffc17 	ldw	r3,-16(fp)
  816600:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  816604:	e0bffc17 	ldw	r2,-16(fp)
  816608:	10c00017 	ldw	r3,0(r2)
  81660c:	e0bffd17 	ldw	r2,-12(fp)
  816610:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  816614:	e0bffc17 	ldw	r2,-16(fp)
  816618:	10800017 	ldw	r2,0(r2)
  81661c:	e0fffd17 	ldw	r3,-12(fp)
  816620:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  816624:	e0bffc17 	ldw	r2,-16(fp)
  816628:	e0fffd17 	ldw	r3,-12(fp)
  81662c:	10c00015 	stw	r3,0(r2)

  return 0;  
  816630:	0005883a 	mov	r2,zero
}
  816634:	e037883a 	mov	sp,fp
  816638:	dfc00117 	ldw	ra,4(sp)
  81663c:	df000017 	ldw	fp,0(sp)
  816640:	dec00204 	addi	sp,sp,8
  816644:	f800283a 	ret

00816648 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  816648:	defffd04 	addi	sp,sp,-12
  81664c:	dfc00215 	stw	ra,8(sp)
  816650:	df000115 	stw	fp,4(sp)
  816654:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  816658:	00802074 	movhi	r2,129
  81665c:	109c8e04 	addi	r2,r2,29240
  816660:	e0bfff15 	stw	r2,-4(fp)
  816664:	00000606 	br	816680 <_do_ctors+0x38>
        (*ctor) (); 
  816668:	e0bfff17 	ldw	r2,-4(fp)
  81666c:	10800017 	ldw	r2,0(r2)
  816670:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  816674:	e0bfff17 	ldw	r2,-4(fp)
  816678:	10bfff04 	addi	r2,r2,-4
  81667c:	e0bfff15 	stw	r2,-4(fp)
  816680:	e0ffff17 	ldw	r3,-4(fp)
  816684:	00802074 	movhi	r2,129
  816688:	109c8f04 	addi	r2,r2,29244
  81668c:	18bff62e 	bgeu	r3,r2,816668 <__alt_mem_onchip_mem+0xff80e668>
        (*ctor) (); 
}
  816690:	0001883a 	nop
  816694:	e037883a 	mov	sp,fp
  816698:	dfc00117 	ldw	ra,4(sp)
  81669c:	df000017 	ldw	fp,0(sp)
  8166a0:	dec00204 	addi	sp,sp,8
  8166a4:	f800283a 	ret

008166a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8166a8:	defffd04 	addi	sp,sp,-12
  8166ac:	dfc00215 	stw	ra,8(sp)
  8166b0:	df000115 	stw	fp,4(sp)
  8166b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8166b8:	00802074 	movhi	r2,129
  8166bc:	109c8e04 	addi	r2,r2,29240
  8166c0:	e0bfff15 	stw	r2,-4(fp)
  8166c4:	00000606 	br	8166e0 <_do_dtors+0x38>
        (*dtor) (); 
  8166c8:	e0bfff17 	ldw	r2,-4(fp)
  8166cc:	10800017 	ldw	r2,0(r2)
  8166d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8166d4:	e0bfff17 	ldw	r2,-4(fp)
  8166d8:	10bfff04 	addi	r2,r2,-4
  8166dc:	e0bfff15 	stw	r2,-4(fp)
  8166e0:	e0ffff17 	ldw	r3,-4(fp)
  8166e4:	00802074 	movhi	r2,129
  8166e8:	109c8f04 	addi	r2,r2,29244
  8166ec:	18bff62e 	bgeu	r3,r2,8166c8 <__alt_mem_onchip_mem+0xff80e6c8>
        (*dtor) (); 
}
  8166f0:	0001883a 	nop
  8166f4:	e037883a 	mov	sp,fp
  8166f8:	dfc00117 	ldw	ra,4(sp)
  8166fc:	df000017 	ldw	fp,0(sp)
  816700:	dec00204 	addi	sp,sp,8
  816704:	f800283a 	ret

00816708 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  816708:	defffa04 	addi	sp,sp,-24
  81670c:	dfc00515 	stw	ra,20(sp)
  816710:	df000415 	stw	fp,16(sp)
  816714:	df000404 	addi	fp,sp,16
  816718:	e13ffe15 	stw	r4,-8(fp)
  81671c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  816720:	e0bfff17 	ldw	r2,-4(fp)
  816724:	10800017 	ldw	r2,0(r2)
  816728:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81672c:	e13ffe17 	ldw	r4,-8(fp)
  816730:	08095a80 	call	8095a8 <strlen>
  816734:	10800044 	addi	r2,r2,1
  816738:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81673c:	00000d06 	br	816774 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  816740:	e0bffc17 	ldw	r2,-16(fp)
  816744:	10800217 	ldw	r2,8(r2)
  816748:	e0fffd17 	ldw	r3,-12(fp)
  81674c:	180d883a 	mov	r6,r3
  816750:	e17ffe17 	ldw	r5,-8(fp)
  816754:	1009883a 	mov	r4,r2
  816758:	0816ef40 	call	816ef4 <memcmp>
  81675c:	1000021e 	bne	r2,zero,816768 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  816760:	e0bffc17 	ldw	r2,-16(fp)
  816764:	00000706 	br	816784 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  816768:	e0bffc17 	ldw	r2,-16(fp)
  81676c:	10800017 	ldw	r2,0(r2)
  816770:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  816774:	e0fffc17 	ldw	r3,-16(fp)
  816778:	e0bfff17 	ldw	r2,-4(fp)
  81677c:	18bff01e 	bne	r3,r2,816740 <__alt_mem_onchip_mem+0xff80e740>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  816780:	0005883a 	mov	r2,zero
}
  816784:	e037883a 	mov	sp,fp
  816788:	dfc00117 	ldw	ra,4(sp)
  81678c:	df000017 	ldw	fp,0(sp)
  816790:	dec00204 	addi	sp,sp,8
  816794:	f800283a 	ret

00816798 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  816798:	defffb04 	addi	sp,sp,-20
  81679c:	dfc00415 	stw	ra,16(sp)
  8167a0:	df000315 	stw	fp,12(sp)
  8167a4:	df000304 	addi	fp,sp,12
  8167a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8167ac:	d0a00e17 	ldw	r2,-32712(gp)
  8167b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8167b4:	00003106 	br	81687c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8167b8:	e0bffd17 	ldw	r2,-12(fp)
  8167bc:	10800217 	ldw	r2,8(r2)
  8167c0:	1009883a 	mov	r4,r2
  8167c4:	08095a80 	call	8095a8 <strlen>
  8167c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8167cc:	e0bffd17 	ldw	r2,-12(fp)
  8167d0:	10c00217 	ldw	r3,8(r2)
  8167d4:	e0bffe17 	ldw	r2,-8(fp)
  8167d8:	10bfffc4 	addi	r2,r2,-1
  8167dc:	1885883a 	add	r2,r3,r2
  8167e0:	10800003 	ldbu	r2,0(r2)
  8167e4:	10803fcc 	andi	r2,r2,255
  8167e8:	1080201c 	xori	r2,r2,128
  8167ec:	10bfe004 	addi	r2,r2,-128
  8167f0:	10800bd8 	cmpnei	r2,r2,47
  8167f4:	1000031e 	bne	r2,zero,816804 <alt_find_file+0x6c>
    {
      len -= 1;
  8167f8:	e0bffe17 	ldw	r2,-8(fp)
  8167fc:	10bfffc4 	addi	r2,r2,-1
  816800:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  816804:	e0bffe17 	ldw	r2,-8(fp)
  816808:	e0ffff17 	ldw	r3,-4(fp)
  81680c:	1885883a 	add	r2,r3,r2
  816810:	10800003 	ldbu	r2,0(r2)
  816814:	10803fcc 	andi	r2,r2,255
  816818:	1080201c 	xori	r2,r2,128
  81681c:	10bfe004 	addi	r2,r2,-128
  816820:	10800be0 	cmpeqi	r2,r2,47
  816824:	1000081e 	bne	r2,zero,816848 <alt_find_file+0xb0>
  816828:	e0bffe17 	ldw	r2,-8(fp)
  81682c:	e0ffff17 	ldw	r3,-4(fp)
  816830:	1885883a 	add	r2,r3,r2
  816834:	10800003 	ldbu	r2,0(r2)
  816838:	10803fcc 	andi	r2,r2,255
  81683c:	1080201c 	xori	r2,r2,128
  816840:	10bfe004 	addi	r2,r2,-128
  816844:	10000a1e 	bne	r2,zero,816870 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  816848:	e0bffd17 	ldw	r2,-12(fp)
  81684c:	10800217 	ldw	r2,8(r2)
  816850:	e0fffe17 	ldw	r3,-8(fp)
  816854:	180d883a 	mov	r6,r3
  816858:	e17fff17 	ldw	r5,-4(fp)
  81685c:	1009883a 	mov	r4,r2
  816860:	0816ef40 	call	816ef4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  816864:	1000021e 	bne	r2,zero,816870 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  816868:	e0bffd17 	ldw	r2,-12(fp)
  81686c:	00000706 	br	81688c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  816870:	e0bffd17 	ldw	r2,-12(fp)
  816874:	10800017 	ldw	r2,0(r2)
  816878:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81687c:	e0fffd17 	ldw	r3,-12(fp)
  816880:	d0a00e04 	addi	r2,gp,-32712
  816884:	18bfcc1e 	bne	r3,r2,8167b8 <__alt_mem_onchip_mem+0xff80e7b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  816888:	0005883a 	mov	r2,zero
}
  81688c:	e037883a 	mov	sp,fp
  816890:	dfc00117 	ldw	ra,4(sp)
  816894:	df000017 	ldw	fp,0(sp)
  816898:	dec00204 	addi	sp,sp,8
  81689c:	f800283a 	ret

008168a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8168a0:	defffc04 	addi	sp,sp,-16
  8168a4:	df000315 	stw	fp,12(sp)
  8168a8:	df000304 	addi	fp,sp,12
  8168ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8168b0:	00bffa04 	movi	r2,-24
  8168b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8168b8:	e03ffd15 	stw	zero,-12(fp)
  8168bc:	00001906 	br	816924 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  8168c0:	008020b4 	movhi	r2,130
  8168c4:	10a05604 	addi	r2,r2,-32424
  8168c8:	e0fffd17 	ldw	r3,-12(fp)
  8168cc:	18c00324 	muli	r3,r3,12
  8168d0:	10c5883a 	add	r2,r2,r3
  8168d4:	10800017 	ldw	r2,0(r2)
  8168d8:	10000f1e 	bne	r2,zero,816918 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  8168dc:	008020b4 	movhi	r2,130
  8168e0:	10a05604 	addi	r2,r2,-32424
  8168e4:	e0fffd17 	ldw	r3,-12(fp)
  8168e8:	18c00324 	muli	r3,r3,12
  8168ec:	10c5883a 	add	r2,r2,r3
  8168f0:	e0ffff17 	ldw	r3,-4(fp)
  8168f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8168f8:	d0e01217 	ldw	r3,-32696(gp)
  8168fc:	e0bffd17 	ldw	r2,-12(fp)
  816900:	1880020e 	bge	r3,r2,81690c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  816904:	e0bffd17 	ldw	r2,-12(fp)
  816908:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
  81690c:	e0bffd17 	ldw	r2,-12(fp)
  816910:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  816914:	00000606 	br	816930 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  816918:	e0bffd17 	ldw	r2,-12(fp)
  81691c:	10800044 	addi	r2,r2,1
  816920:	e0bffd15 	stw	r2,-12(fp)
  816924:	e0bffd17 	ldw	r2,-12(fp)
  816928:	10800810 	cmplti	r2,r2,32
  81692c:	103fe41e 	bne	r2,zero,8168c0 <__alt_mem_onchip_mem+0xff80e8c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  816930:	e0bffe17 	ldw	r2,-8(fp)
}
  816934:	e037883a 	mov	sp,fp
  816938:	df000017 	ldw	fp,0(sp)
  81693c:	dec00104 	addi	sp,sp,4
  816940:	f800283a 	ret

00816944 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  816944:	defffe04 	addi	sp,sp,-8
  816948:	dfc00115 	stw	ra,4(sp)
  81694c:	df000015 	stw	fp,0(sp)
  816950:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  816954:	01440004 	movi	r5,4096
  816958:	0009883a 	mov	r4,zero
  81695c:	0816d7c0 	call	816d7c <alt_icache_flush>
#endif
}
  816960:	0001883a 	nop
  816964:	e037883a 	mov	sp,fp
  816968:	dfc00117 	ldw	ra,4(sp)
  81696c:	df000017 	ldw	fp,0(sp)
  816970:	dec00204 	addi	sp,sp,8
  816974:	f800283a 	ret

00816978 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  816978:	defff904 	addi	sp,sp,-28
  81697c:	dfc00615 	stw	ra,24(sp)
  816980:	df000515 	stw	fp,20(sp)
  816984:	df000504 	addi	fp,sp,20
  816988:	e13ffc15 	stw	r4,-16(fp)
  81698c:	e17ffd15 	stw	r5,-12(fp)
  816990:	e1bffe15 	stw	r6,-8(fp)
  816994:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  816998:	e0800217 	ldw	r2,8(fp)
  81699c:	d8800015 	stw	r2,0(sp)
  8169a0:	e1ffff17 	ldw	r7,-4(fp)
  8169a4:	e1bffe17 	ldw	r6,-8(fp)
  8169a8:	e17ffd17 	ldw	r5,-12(fp)
  8169ac:	e13ffc17 	ldw	r4,-16(fp)
  8169b0:	0816b280 	call	816b28 <alt_iic_isr_register>
}  
  8169b4:	e037883a 	mov	sp,fp
  8169b8:	dfc00117 	ldw	ra,4(sp)
  8169bc:	df000017 	ldw	fp,0(sp)
  8169c0:	dec00204 	addi	sp,sp,8
  8169c4:	f800283a 	ret

008169c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8169c8:	defff904 	addi	sp,sp,-28
  8169cc:	df000615 	stw	fp,24(sp)
  8169d0:	df000604 	addi	fp,sp,24
  8169d4:	e13ffe15 	stw	r4,-8(fp)
  8169d8:	e17fff15 	stw	r5,-4(fp)
  8169dc:	e0bfff17 	ldw	r2,-4(fp)
  8169e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8169e4:	0005303a 	rdctl	r2,status
  8169e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8169ec:	e0fffb17 	ldw	r3,-20(fp)
  8169f0:	00bfff84 	movi	r2,-2
  8169f4:	1884703a 	and	r2,r3,r2
  8169f8:	1001703a 	wrctl	status,r2
  
  return context;
  8169fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816a00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  816a04:	00c00044 	movi	r3,1
  816a08:	e0bffa17 	ldw	r2,-24(fp)
  816a0c:	1884983a 	sll	r2,r3,r2
  816a10:	1007883a 	mov	r3,r2
  816a14:	d0a77517 	ldw	r2,-25132(gp)
  816a18:	1884b03a 	or	r2,r3,r2
  816a1c:	d0a77515 	stw	r2,-25132(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  816a20:	d0a77517 	ldw	r2,-25132(gp)
  816a24:	100170fa 	wrctl	ienable,r2
  816a28:	e0bffc17 	ldw	r2,-16(fp)
  816a2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816a30:	e0bffd17 	ldw	r2,-12(fp)
  816a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816a38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  816a3c:	0001883a 	nop
}
  816a40:	e037883a 	mov	sp,fp
  816a44:	df000017 	ldw	fp,0(sp)
  816a48:	dec00104 	addi	sp,sp,4
  816a4c:	f800283a 	ret

00816a50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  816a50:	defff904 	addi	sp,sp,-28
  816a54:	df000615 	stw	fp,24(sp)
  816a58:	df000604 	addi	fp,sp,24
  816a5c:	e13ffe15 	stw	r4,-8(fp)
  816a60:	e17fff15 	stw	r5,-4(fp)
  816a64:	e0bfff17 	ldw	r2,-4(fp)
  816a68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816a6c:	0005303a 	rdctl	r2,status
  816a70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816a74:	e0fffb17 	ldw	r3,-20(fp)
  816a78:	00bfff84 	movi	r2,-2
  816a7c:	1884703a 	and	r2,r3,r2
  816a80:	1001703a 	wrctl	status,r2
  
  return context;
  816a84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816a88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  816a8c:	00c00044 	movi	r3,1
  816a90:	e0bffa17 	ldw	r2,-24(fp)
  816a94:	1884983a 	sll	r2,r3,r2
  816a98:	0084303a 	nor	r2,zero,r2
  816a9c:	1007883a 	mov	r3,r2
  816aa0:	d0a77517 	ldw	r2,-25132(gp)
  816aa4:	1884703a 	and	r2,r3,r2
  816aa8:	d0a77515 	stw	r2,-25132(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  816aac:	d0a77517 	ldw	r2,-25132(gp)
  816ab0:	100170fa 	wrctl	ienable,r2
  816ab4:	e0bffc17 	ldw	r2,-16(fp)
  816ab8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816abc:	e0bffd17 	ldw	r2,-12(fp)
  816ac0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816ac4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  816ac8:	0001883a 	nop
}
  816acc:	e037883a 	mov	sp,fp
  816ad0:	df000017 	ldw	fp,0(sp)
  816ad4:	dec00104 	addi	sp,sp,4
  816ad8:	f800283a 	ret

00816adc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  816adc:	defffc04 	addi	sp,sp,-16
  816ae0:	df000315 	stw	fp,12(sp)
  816ae4:	df000304 	addi	fp,sp,12
  816ae8:	e13ffe15 	stw	r4,-8(fp)
  816aec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  816af0:	000530fa 	rdctl	r2,ienable
  816af4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  816af8:	00c00044 	movi	r3,1
  816afc:	e0bfff17 	ldw	r2,-4(fp)
  816b00:	1884983a 	sll	r2,r3,r2
  816b04:	1007883a 	mov	r3,r2
  816b08:	e0bffd17 	ldw	r2,-12(fp)
  816b0c:	1884703a 	and	r2,r3,r2
  816b10:	1004c03a 	cmpne	r2,r2,zero
  816b14:	10803fcc 	andi	r2,r2,255
}
  816b18:	e037883a 	mov	sp,fp
  816b1c:	df000017 	ldw	fp,0(sp)
  816b20:	dec00104 	addi	sp,sp,4
  816b24:	f800283a 	ret

00816b28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  816b28:	defff504 	addi	sp,sp,-44
  816b2c:	dfc00a15 	stw	ra,40(sp)
  816b30:	df000915 	stw	fp,36(sp)
  816b34:	df000904 	addi	fp,sp,36
  816b38:	e13ffc15 	stw	r4,-16(fp)
  816b3c:	e17ffd15 	stw	r5,-12(fp)
  816b40:	e1bffe15 	stw	r6,-8(fp)
  816b44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  816b48:	00bffa84 	movi	r2,-22
  816b4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  816b50:	e0bffd17 	ldw	r2,-12(fp)
  816b54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  816b58:	e0bff817 	ldw	r2,-32(fp)
  816b5c:	10800808 	cmpgei	r2,r2,32
  816b60:	1000271e 	bne	r2,zero,816c00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816b64:	0005303a 	rdctl	r2,status
  816b68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816b6c:	e0fffb17 	ldw	r3,-20(fp)
  816b70:	00bfff84 	movi	r2,-2
  816b74:	1884703a 	and	r2,r3,r2
  816b78:	1001703a 	wrctl	status,r2
  
  return context;
  816b7c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  816b80:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  816b84:	008020b4 	movhi	r2,130
  816b88:	10ad3104 	addi	r2,r2,-19260
  816b8c:	e0fff817 	ldw	r3,-32(fp)
  816b90:	180690fa 	slli	r3,r3,3
  816b94:	10c5883a 	add	r2,r2,r3
  816b98:	e0fffe17 	ldw	r3,-8(fp)
  816b9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  816ba0:	008020b4 	movhi	r2,130
  816ba4:	10ad3104 	addi	r2,r2,-19260
  816ba8:	e0fff817 	ldw	r3,-32(fp)
  816bac:	180690fa 	slli	r3,r3,3
  816bb0:	10c5883a 	add	r2,r2,r3
  816bb4:	10800104 	addi	r2,r2,4
  816bb8:	e0ffff17 	ldw	r3,-4(fp)
  816bbc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  816bc0:	e0bffe17 	ldw	r2,-8(fp)
  816bc4:	10000526 	beq	r2,zero,816bdc <alt_iic_isr_register+0xb4>
  816bc8:	e0bff817 	ldw	r2,-32(fp)
  816bcc:	100b883a 	mov	r5,r2
  816bd0:	e13ffc17 	ldw	r4,-16(fp)
  816bd4:	08169c80 	call	8169c8 <alt_ic_irq_enable>
  816bd8:	00000406 	br	816bec <alt_iic_isr_register+0xc4>
  816bdc:	e0bff817 	ldw	r2,-32(fp)
  816be0:	100b883a 	mov	r5,r2
  816be4:	e13ffc17 	ldw	r4,-16(fp)
  816be8:	0816a500 	call	816a50 <alt_ic_irq_disable>
  816bec:	e0bff715 	stw	r2,-36(fp)
  816bf0:	e0bffa17 	ldw	r2,-24(fp)
  816bf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816bf8:	e0bff917 	ldw	r2,-28(fp)
  816bfc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  816c00:	e0bff717 	ldw	r2,-36(fp)
}
  816c04:	e037883a 	mov	sp,fp
  816c08:	dfc00117 	ldw	ra,4(sp)
  816c0c:	df000017 	ldw	fp,0(sp)
  816c10:	dec00204 	addi	sp,sp,8
  816c14:	f800283a 	ret

00816c18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  816c18:	defff904 	addi	sp,sp,-28
  816c1c:	dfc00615 	stw	ra,24(sp)
  816c20:	df000515 	stw	fp,20(sp)
  816c24:	df000504 	addi	fp,sp,20
  816c28:	e13ffc15 	stw	r4,-16(fp)
  816c2c:	e17ffd15 	stw	r5,-12(fp)
  816c30:	e1bffe15 	stw	r6,-8(fp)
  816c34:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  816c38:	e1bfff17 	ldw	r6,-4(fp)
  816c3c:	e17ffe17 	ldw	r5,-8(fp)
  816c40:	e13ffd17 	ldw	r4,-12(fp)
  816c44:	081390c0 	call	81390c <open>
  816c48:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  816c4c:	e0bffb17 	ldw	r2,-20(fp)
  816c50:	10001c16 	blt	r2,zero,816cc4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  816c54:	008020b4 	movhi	r2,130
  816c58:	10a05604 	addi	r2,r2,-32424
  816c5c:	e0fffb17 	ldw	r3,-20(fp)
  816c60:	18c00324 	muli	r3,r3,12
  816c64:	10c5883a 	add	r2,r2,r3
  816c68:	10c00017 	ldw	r3,0(r2)
  816c6c:	e0bffc17 	ldw	r2,-16(fp)
  816c70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  816c74:	008020b4 	movhi	r2,130
  816c78:	10a05604 	addi	r2,r2,-32424
  816c7c:	e0fffb17 	ldw	r3,-20(fp)
  816c80:	18c00324 	muli	r3,r3,12
  816c84:	10c5883a 	add	r2,r2,r3
  816c88:	10800104 	addi	r2,r2,4
  816c8c:	10c00017 	ldw	r3,0(r2)
  816c90:	e0bffc17 	ldw	r2,-16(fp)
  816c94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  816c98:	008020b4 	movhi	r2,130
  816c9c:	10a05604 	addi	r2,r2,-32424
  816ca0:	e0fffb17 	ldw	r3,-20(fp)
  816ca4:	18c00324 	muli	r3,r3,12
  816ca8:	10c5883a 	add	r2,r2,r3
  816cac:	10800204 	addi	r2,r2,8
  816cb0:	10c00017 	ldw	r3,0(r2)
  816cb4:	e0bffc17 	ldw	r2,-16(fp)
  816cb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  816cbc:	e13ffb17 	ldw	r4,-20(fp)
  816cc0:	0813b980 	call	813b98 <alt_release_fd>
  }
} 
  816cc4:	0001883a 	nop
  816cc8:	e037883a 	mov	sp,fp
  816ccc:	dfc00117 	ldw	ra,4(sp)
  816cd0:	df000017 	ldw	fp,0(sp)
  816cd4:	dec00204 	addi	sp,sp,8
  816cd8:	f800283a 	ret

00816cdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  816cdc:	defffb04 	addi	sp,sp,-20
  816ce0:	dfc00415 	stw	ra,16(sp)
  816ce4:	df000315 	stw	fp,12(sp)
  816ce8:	df000304 	addi	fp,sp,12
  816cec:	e13ffd15 	stw	r4,-12(fp)
  816cf0:	e17ffe15 	stw	r5,-8(fp)
  816cf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  816cf8:	01c07fc4 	movi	r7,511
  816cfc:	01800044 	movi	r6,1
  816d00:	e17ffd17 	ldw	r5,-12(fp)
  816d04:	010020b4 	movhi	r4,130
  816d08:	21205904 	addi	r4,r4,-32412
  816d0c:	0816c180 	call	816c18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  816d10:	01c07fc4 	movi	r7,511
  816d14:	000d883a 	mov	r6,zero
  816d18:	e17ffe17 	ldw	r5,-8(fp)
  816d1c:	010020b4 	movhi	r4,130
  816d20:	21205604 	addi	r4,r4,-32424
  816d24:	0816c180 	call	816c18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  816d28:	01c07fc4 	movi	r7,511
  816d2c:	01800044 	movi	r6,1
  816d30:	e17fff17 	ldw	r5,-4(fp)
  816d34:	010020b4 	movhi	r4,130
  816d38:	21205c04 	addi	r4,r4,-32400
  816d3c:	0816c180 	call	816c18 <alt_open_fd>
}  
  816d40:	0001883a 	nop
  816d44:	e037883a 	mov	sp,fp
  816d48:	dfc00117 	ldw	ra,4(sp)
  816d4c:	df000017 	ldw	fp,0(sp)
  816d50:	dec00204 	addi	sp,sp,8
  816d54:	f800283a 	ret

00816d58 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  816d58:	deffff04 	addi	sp,sp,-4
  816d5c:	df000015 	stw	fp,0(sp)
  816d60:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  816d64:	000170fa 	wrctl	ienable,zero
}
  816d68:	0001883a 	nop
  816d6c:	e037883a 	mov	sp,fp
  816d70:	df000017 	ldw	fp,0(sp)
  816d74:	dec00104 	addi	sp,sp,4
  816d78:	f800283a 	ret

00816d7c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  816d7c:	defffb04 	addi	sp,sp,-20
  816d80:	df000415 	stw	fp,16(sp)
  816d84:	df000404 	addi	fp,sp,16
  816d88:	e13ffe15 	stw	r4,-8(fp)
  816d8c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  816d90:	e0bfff17 	ldw	r2,-4(fp)
  816d94:	10840070 	cmpltui	r2,r2,4097
  816d98:	1000021e 	bne	r2,zero,816da4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  816d9c:	00840004 	movi	r2,4096
  816da0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  816da4:	e0fffe17 	ldw	r3,-8(fp)
  816da8:	e0bfff17 	ldw	r2,-4(fp)
  816dac:	1885883a 	add	r2,r3,r2
  816db0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  816db4:	e0bffe17 	ldw	r2,-8(fp)
  816db8:	e0bffc15 	stw	r2,-16(fp)
  816dbc:	00000506 	br	816dd4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  816dc0:	e0bffc17 	ldw	r2,-16(fp)
  816dc4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  816dc8:	e0bffc17 	ldw	r2,-16(fp)
  816dcc:	10800804 	addi	r2,r2,32
  816dd0:	e0bffc15 	stw	r2,-16(fp)
  816dd4:	e0fffc17 	ldw	r3,-16(fp)
  816dd8:	e0bffd17 	ldw	r2,-12(fp)
  816ddc:	18bff836 	bltu	r3,r2,816dc0 <__alt_mem_onchip_mem+0xff80edc0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  816de0:	e0bffe17 	ldw	r2,-8(fp)
  816de4:	108007cc 	andi	r2,r2,31
  816de8:	10000226 	beq	r2,zero,816df4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  816dec:	e0bffc17 	ldw	r2,-16(fp)
  816df0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  816df4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  816df8:	0001883a 	nop
  816dfc:	e037883a 	mov	sp,fp
  816e00:	df000017 	ldw	fp,0(sp)
  816e04:	dec00104 	addi	sp,sp,4
  816e08:	f800283a 	ret

00816e0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  816e0c:	defffe04 	addi	sp,sp,-8
  816e10:	df000115 	stw	fp,4(sp)
  816e14:	df000104 	addi	fp,sp,4
  816e18:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  816e1c:	e0bfff17 	ldw	r2,-4(fp)
  816e20:	10bffe84 	addi	r2,r2,-6
  816e24:	10c00428 	cmpgeui	r3,r2,16
  816e28:	18001a1e 	bne	r3,zero,816e94 <alt_exception_cause_generated_bad_addr+0x88>
  816e2c:	100690ba 	slli	r3,r2,2
  816e30:	00802074 	movhi	r2,129
  816e34:	109b9104 	addi	r2,r2,28228
  816e38:	1885883a 	add	r2,r3,r2
  816e3c:	10800017 	ldw	r2,0(r2)
  816e40:	1000683a 	jmp	r2
  816e44:	00816e84 	movi	r2,1466
  816e48:	00816e84 	movi	r2,1466
  816e4c:	00816e94 	movui	r2,1466
  816e50:	00816e94 	movui	r2,1466
  816e54:	00816e94 	movui	r2,1466
  816e58:	00816e84 	movi	r2,1466
  816e5c:	00816e8c 	andi	r2,zero,1466
  816e60:	00816e94 	movui	r2,1466
  816e64:	00816e84 	movi	r2,1466
  816e68:	00816e84 	movi	r2,1466
  816e6c:	00816e94 	movui	r2,1466
  816e70:	00816e84 	movi	r2,1466
  816e74:	00816e8c 	andi	r2,zero,1466
  816e78:	00816e94 	movui	r2,1466
  816e7c:	00816e94 	movui	r2,1466
  816e80:	00816e84 	movi	r2,1466
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  816e84:	00800044 	movi	r2,1
  816e88:	00000306 	br	816e98 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  816e8c:	0005883a 	mov	r2,zero
  816e90:	00000106 	br	816e98 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  816e94:	0005883a 	mov	r2,zero
  }
}
  816e98:	e037883a 	mov	sp,fp
  816e9c:	df000017 	ldw	fp,0(sp)
  816ea0:	dec00104 	addi	sp,sp,4
  816ea4:	f800283a 	ret

00816ea8 <atexit>:
  816ea8:	200b883a 	mov	r5,r4
  816eac:	000f883a 	mov	r7,zero
  816eb0:	000d883a 	mov	r6,zero
  816eb4:	0009883a 	mov	r4,zero
  816eb8:	0816f701 	jmpi	816f70 <__register_exitproc>

00816ebc <exit>:
  816ebc:	defffe04 	addi	sp,sp,-8
  816ec0:	000b883a 	mov	r5,zero
  816ec4:	dc000015 	stw	r16,0(sp)
  816ec8:	dfc00115 	stw	ra,4(sp)
  816ecc:	2021883a 	mov	r16,r4
  816ed0:	08170880 	call	817088 <__call_exitprocs>
  816ed4:	008020b4 	movhi	r2,130
  816ed8:	10a54f04 	addi	r2,r2,-27332
  816edc:	11000017 	ldw	r4,0(r2)
  816ee0:	20800f17 	ldw	r2,60(r4)
  816ee4:	10000126 	beq	r2,zero,816eec <exit+0x30>
  816ee8:	103ee83a 	callr	r2
  816eec:	8009883a 	mov	r4,r16
  816ef0:	08172080 	call	817208 <_exit>

00816ef4 <memcmp>:
  816ef4:	01c000c4 	movi	r7,3
  816ef8:	3980192e 	bgeu	r7,r6,816f60 <memcmp+0x6c>
  816efc:	2144b03a 	or	r2,r4,r5
  816f00:	11c4703a 	and	r2,r2,r7
  816f04:	10000f26 	beq	r2,zero,816f44 <memcmp+0x50>
  816f08:	20800003 	ldbu	r2,0(r4)
  816f0c:	28c00003 	ldbu	r3,0(r5)
  816f10:	10c0151e 	bne	r2,r3,816f68 <memcmp+0x74>
  816f14:	31bfff84 	addi	r6,r6,-2
  816f18:	01ffffc4 	movi	r7,-1
  816f1c:	00000406 	br	816f30 <memcmp+0x3c>
  816f20:	20800003 	ldbu	r2,0(r4)
  816f24:	28c00003 	ldbu	r3,0(r5)
  816f28:	31bfffc4 	addi	r6,r6,-1
  816f2c:	10c00e1e 	bne	r2,r3,816f68 <memcmp+0x74>
  816f30:	21000044 	addi	r4,r4,1
  816f34:	29400044 	addi	r5,r5,1
  816f38:	31fff91e 	bne	r6,r7,816f20 <__alt_mem_onchip_mem+0xff80ef20>
  816f3c:	0005883a 	mov	r2,zero
  816f40:	f800283a 	ret
  816f44:	20c00017 	ldw	r3,0(r4)
  816f48:	28800017 	ldw	r2,0(r5)
  816f4c:	18bfee1e 	bne	r3,r2,816f08 <__alt_mem_onchip_mem+0xff80ef08>
  816f50:	31bfff04 	addi	r6,r6,-4
  816f54:	21000104 	addi	r4,r4,4
  816f58:	29400104 	addi	r5,r5,4
  816f5c:	39bff936 	bltu	r7,r6,816f44 <__alt_mem_onchip_mem+0xff80ef44>
  816f60:	303fe91e 	bne	r6,zero,816f08 <__alt_mem_onchip_mem+0xff80ef08>
  816f64:	003ff506 	br	816f3c <__alt_mem_onchip_mem+0xff80ef3c>
  816f68:	10c5c83a 	sub	r2,r2,r3
  816f6c:	f800283a 	ret

00816f70 <__register_exitproc>:
  816f70:	defffa04 	addi	sp,sp,-24
  816f74:	dc000315 	stw	r16,12(sp)
  816f78:	040020b4 	movhi	r16,130
  816f7c:	84254f04 	addi	r16,r16,-27332
  816f80:	80c00017 	ldw	r3,0(r16)
  816f84:	dc400415 	stw	r17,16(sp)
  816f88:	dfc00515 	stw	ra,20(sp)
  816f8c:	18805217 	ldw	r2,328(r3)
  816f90:	2023883a 	mov	r17,r4
  816f94:	10003726 	beq	r2,zero,817074 <__register_exitproc+0x104>
  816f98:	10c00117 	ldw	r3,4(r2)
  816f9c:	010007c4 	movi	r4,31
  816fa0:	20c00e16 	blt	r4,r3,816fdc <__register_exitproc+0x6c>
  816fa4:	1a000044 	addi	r8,r3,1
  816fa8:	8800221e 	bne	r17,zero,817034 <__register_exitproc+0xc4>
  816fac:	18c00084 	addi	r3,r3,2
  816fb0:	18c7883a 	add	r3,r3,r3
  816fb4:	18c7883a 	add	r3,r3,r3
  816fb8:	12000115 	stw	r8,4(r2)
  816fbc:	10c7883a 	add	r3,r2,r3
  816fc0:	19400015 	stw	r5,0(r3)
  816fc4:	0005883a 	mov	r2,zero
  816fc8:	dfc00517 	ldw	ra,20(sp)
  816fcc:	dc400417 	ldw	r17,16(sp)
  816fd0:	dc000317 	ldw	r16,12(sp)
  816fd4:	dec00604 	addi	sp,sp,24
  816fd8:	f800283a 	ret
  816fdc:	00800034 	movhi	r2,0
  816fe0:	10800004 	addi	r2,r2,0
  816fe4:	10002626 	beq	r2,zero,817080 <__register_exitproc+0x110>
  816fe8:	01006404 	movi	r4,400
  816fec:	d9400015 	stw	r5,0(sp)
  816ff0:	d9800115 	stw	r6,4(sp)
  816ff4:	d9c00215 	stw	r7,8(sp)
  816ff8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  816ffc:	d9400017 	ldw	r5,0(sp)
  817000:	d9800117 	ldw	r6,4(sp)
  817004:	d9c00217 	ldw	r7,8(sp)
  817008:	10001d26 	beq	r2,zero,817080 <__register_exitproc+0x110>
  81700c:	81000017 	ldw	r4,0(r16)
  817010:	10000115 	stw	zero,4(r2)
  817014:	02000044 	movi	r8,1
  817018:	22405217 	ldw	r9,328(r4)
  81701c:	0007883a 	mov	r3,zero
  817020:	12400015 	stw	r9,0(r2)
  817024:	20805215 	stw	r2,328(r4)
  817028:	10006215 	stw	zero,392(r2)
  81702c:	10006315 	stw	zero,396(r2)
  817030:	883fde26 	beq	r17,zero,816fac <__alt_mem_onchip_mem+0xff80efac>
  817034:	18c9883a 	add	r4,r3,r3
  817038:	2109883a 	add	r4,r4,r4
  81703c:	1109883a 	add	r4,r2,r4
  817040:	21802215 	stw	r6,136(r4)
  817044:	01800044 	movi	r6,1
  817048:	12406217 	ldw	r9,392(r2)
  81704c:	30cc983a 	sll	r6,r6,r3
  817050:	4992b03a 	or	r9,r9,r6
  817054:	12406215 	stw	r9,392(r2)
  817058:	21c04215 	stw	r7,264(r4)
  81705c:	01000084 	movi	r4,2
  817060:	893fd21e 	bne	r17,r4,816fac <__alt_mem_onchip_mem+0xff80efac>
  817064:	11006317 	ldw	r4,396(r2)
  817068:	218cb03a 	or	r6,r4,r6
  81706c:	11806315 	stw	r6,396(r2)
  817070:	003fce06 	br	816fac <__alt_mem_onchip_mem+0xff80efac>
  817074:	18805304 	addi	r2,r3,332
  817078:	18805215 	stw	r2,328(r3)
  81707c:	003fc606 	br	816f98 <__alt_mem_onchip_mem+0xff80ef98>
  817080:	00bfffc4 	movi	r2,-1
  817084:	003fd006 	br	816fc8 <__alt_mem_onchip_mem+0xff80efc8>

00817088 <__call_exitprocs>:
  817088:	defff504 	addi	sp,sp,-44
  81708c:	df000915 	stw	fp,36(sp)
  817090:	dd400615 	stw	r21,24(sp)
  817094:	dc800315 	stw	r18,12(sp)
  817098:	dfc00a15 	stw	ra,40(sp)
  81709c:	ddc00815 	stw	r23,32(sp)
  8170a0:	dd800715 	stw	r22,28(sp)
  8170a4:	dd000515 	stw	r20,20(sp)
  8170a8:	dcc00415 	stw	r19,16(sp)
  8170ac:	dc400215 	stw	r17,8(sp)
  8170b0:	dc000115 	stw	r16,4(sp)
  8170b4:	d9000015 	stw	r4,0(sp)
  8170b8:	2839883a 	mov	fp,r5
  8170bc:	04800044 	movi	r18,1
  8170c0:	057fffc4 	movi	r21,-1
  8170c4:	008020b4 	movhi	r2,130
  8170c8:	10a54f04 	addi	r2,r2,-27332
  8170cc:	12000017 	ldw	r8,0(r2)
  8170d0:	45005217 	ldw	r20,328(r8)
  8170d4:	44c05204 	addi	r19,r8,328
  8170d8:	a0001c26 	beq	r20,zero,81714c <__call_exitprocs+0xc4>
  8170dc:	a0800117 	ldw	r2,4(r20)
  8170e0:	15ffffc4 	addi	r23,r2,-1
  8170e4:	b8000d16 	blt	r23,zero,81711c <__call_exitprocs+0x94>
  8170e8:	14000044 	addi	r16,r2,1
  8170ec:	8421883a 	add	r16,r16,r16
  8170f0:	8421883a 	add	r16,r16,r16
  8170f4:	84402004 	addi	r17,r16,128
  8170f8:	a463883a 	add	r17,r20,r17
  8170fc:	a421883a 	add	r16,r20,r16
  817100:	e0001e26 	beq	fp,zero,81717c <__call_exitprocs+0xf4>
  817104:	80804017 	ldw	r2,256(r16)
  817108:	e0801c26 	beq	fp,r2,81717c <__call_exitprocs+0xf4>
  81710c:	bdffffc4 	addi	r23,r23,-1
  817110:	843fff04 	addi	r16,r16,-4
  817114:	8c7fff04 	addi	r17,r17,-4
  817118:	bd7ff91e 	bne	r23,r21,817100 <__alt_mem_onchip_mem+0xff80f100>
  81711c:	00800034 	movhi	r2,0
  817120:	10800004 	addi	r2,r2,0
  817124:	10000926 	beq	r2,zero,81714c <__call_exitprocs+0xc4>
  817128:	a0800117 	ldw	r2,4(r20)
  81712c:	1000301e 	bne	r2,zero,8171f0 <__call_exitprocs+0x168>
  817130:	a0800017 	ldw	r2,0(r20)
  817134:	10003226 	beq	r2,zero,817200 <__call_exitprocs+0x178>
  817138:	a009883a 	mov	r4,r20
  81713c:	98800015 	stw	r2,0(r19)
  817140:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  817144:	9d000017 	ldw	r20,0(r19)
  817148:	a03fe41e 	bne	r20,zero,8170dc <__alt_mem_onchip_mem+0xff80f0dc>
  81714c:	dfc00a17 	ldw	ra,40(sp)
  817150:	df000917 	ldw	fp,36(sp)
  817154:	ddc00817 	ldw	r23,32(sp)
  817158:	dd800717 	ldw	r22,28(sp)
  81715c:	dd400617 	ldw	r21,24(sp)
  817160:	dd000517 	ldw	r20,20(sp)
  817164:	dcc00417 	ldw	r19,16(sp)
  817168:	dc800317 	ldw	r18,12(sp)
  81716c:	dc400217 	ldw	r17,8(sp)
  817170:	dc000117 	ldw	r16,4(sp)
  817174:	dec00b04 	addi	sp,sp,44
  817178:	f800283a 	ret
  81717c:	a0800117 	ldw	r2,4(r20)
  817180:	80c00017 	ldw	r3,0(r16)
  817184:	10bfffc4 	addi	r2,r2,-1
  817188:	15c01426 	beq	r2,r23,8171dc <__call_exitprocs+0x154>
  81718c:	80000015 	stw	zero,0(r16)
  817190:	183fde26 	beq	r3,zero,81710c <__alt_mem_onchip_mem+0xff80f10c>
  817194:	95c8983a 	sll	r4,r18,r23
  817198:	a0806217 	ldw	r2,392(r20)
  81719c:	a5800117 	ldw	r22,4(r20)
  8171a0:	2084703a 	and	r2,r4,r2
  8171a4:	10000b26 	beq	r2,zero,8171d4 <__call_exitprocs+0x14c>
  8171a8:	a0806317 	ldw	r2,396(r20)
  8171ac:	2088703a 	and	r4,r4,r2
  8171b0:	20000c1e 	bne	r4,zero,8171e4 <__call_exitprocs+0x15c>
  8171b4:	89400017 	ldw	r5,0(r17)
  8171b8:	d9000017 	ldw	r4,0(sp)
  8171bc:	183ee83a 	callr	r3
  8171c0:	a0800117 	ldw	r2,4(r20)
  8171c4:	15bfbf1e 	bne	r2,r22,8170c4 <__alt_mem_onchip_mem+0xff80f0c4>
  8171c8:	98800017 	ldw	r2,0(r19)
  8171cc:	153fcf26 	beq	r2,r20,81710c <__alt_mem_onchip_mem+0xff80f10c>
  8171d0:	003fbc06 	br	8170c4 <__alt_mem_onchip_mem+0xff80f0c4>
  8171d4:	183ee83a 	callr	r3
  8171d8:	003ff906 	br	8171c0 <__alt_mem_onchip_mem+0xff80f1c0>
  8171dc:	a5c00115 	stw	r23,4(r20)
  8171e0:	003feb06 	br	817190 <__alt_mem_onchip_mem+0xff80f190>
  8171e4:	89000017 	ldw	r4,0(r17)
  8171e8:	183ee83a 	callr	r3
  8171ec:	003ff406 	br	8171c0 <__alt_mem_onchip_mem+0xff80f1c0>
  8171f0:	a0800017 	ldw	r2,0(r20)
  8171f4:	a027883a 	mov	r19,r20
  8171f8:	1029883a 	mov	r20,r2
  8171fc:	003fb606 	br	8170d8 <__alt_mem_onchip_mem+0xff80f0d8>
  817200:	0005883a 	mov	r2,zero
  817204:	003ffb06 	br	8171f4 <__alt_mem_onchip_mem+0xff80f1f4>

00817208 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  817208:	defffd04 	addi	sp,sp,-12
  81720c:	df000215 	stw	fp,8(sp)
  817210:	df000204 	addi	fp,sp,8
  817214:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  817218:	0001883a 	nop
  81721c:	e0bfff17 	ldw	r2,-4(fp)
  817220:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  817224:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  817228:	10000226 	beq	r2,zero,817234 <_exit+0x2c>
    ALT_SIM_FAIL();
  81722c:	002af070 	cmpltui	zero,zero,43969
  817230:	00000106 	br	817238 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  817234:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  817238:	003fff06 	br	817238 <__alt_mem_onchip_mem+0xff80f238>
