#resource "timing.h"
#hostcode-c "#include \"timing.h\""
#hostcode-c "#include <stdio.h>"
@ClocksUseSD
scchart Pacemaker {
  input signal AS, VS
  //input signal AEITimeout, AVITimeout, PVARPTimeout, VRPTimeout, URITimeout, LRITimeout
  
  host "int" AVITime = `AVI_VALUE`
  host "int" AEITime = `AEI_VALUE`
  host "int" PVARPTime = `PVARP_VALUE`
  host "int" VRPTime = `VRP_VALUE`
  host "int" URITime = `URI_VALUE`
  host "int" LRITime = `LRI_VALUE`
  
  output signal PVARPIdle, VRPIdle, URIIdle
  output signal AP, VP

  region main{
    
    /* AVI - max time between atrial event and subsequent ventricular event */
    
    region AVI {
      clock AVI_t = 0
      initial state idle
        if (AS || AP) && PVARPIdle do AVI_t = 0 go to AVI_On
        
      state AVI_On
        if VS do AVI_t = 0 go to idle
        if AVI_t >= AVITime do AVI_t = 0 go to wait
        
      state wait
        if VS do AVI_t = 0 go to idle
        if URIIdle do VP go to idle
    }
    
    /* PVARP - period of time where any atrial events are ignored and turned into AR signals */
    
    region PVARP {
      clock PVARP_t = 0
      initial state idle
        {during do PVARPIdle}
        if VS || VP do PVARP_t = 0 go to PVARP
        
      state PVARP
        if PVARP_t >= PVARPTime do PVARP_t = 0 go to idle
    }
    
    /* VRP - period of time where any ventricular events are ignored and turned into VR signals */
    
    region VRP {
      clock VRP_t = 0
      initial state idle
        {during do VRPIdle}
        if VS || VP do VRP_t = 0 go to VRP
        
      state VRP
        if VRP_t >= VRPTime do VRP_t = 0 go to idle
    }
    
    /* AEI - max time between ventricular event and subsequent atrial event */
    
    region AEI {
      clock AEI_t = 0
      initial state idle
        if (VS || VP) && VRPIdle do AEI_t = 0 go to AEI_On
        
      state AEI_On
        if AS do AEI_t = 0 go to idle
        if AEI_t >= AEITime do AEI_t = 0; AP go to idle
    }
    
    /* LRI - slowest heart operation interval, measured between ventricular signals */
    
    region LRI {
      clock LRI_t = 0
      //LRI should never be off
      initial state LRI_On
        if (VS || VP) && VRPIdle do LRI_t = 0 go to LRI_On
        if LRI_t >= LRITime do VP; LRI_t = 0 go to LRI_On 
    }
    
    /* URI - fastest heart operation interval, measured between ventricular signals */
    region URI {
      clock URI_t = 0
      initial state idle
        {during do URIIdle}
        if (VS || VP) && VRPIdle do URI_t = 0 go to URI_On
      
      state URI_On
        if URI_t >= URITime do URI_t = 0 go to idle
         
    }

    
  }
}
